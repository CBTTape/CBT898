/*--------------------------ooo00 REXX 00ooo---------------------------*
   $COPYMEM: Routine to copy from one PDS(member) dataset to another.
             Source and destination do not need to be same DSORG
   Parameters (positional):
    1. From dataset.
    2. To dataset. Prefix the to dataset with a "+"
       to append (MOD) to sequential datasets. The "+" must be
       outside the quotes (if dataset quoted). A attempted MOD copy
       to a non-PS dataset will turn the MOD off.
    3. TRACE indicator.
       TRACE  - Issue say statement to 'trace' progress.
       TRACEF - Same as TRACEX but CANCELs on ISPF error.
       TRACEX - Proper REXX trace including above say
       DEBUG  - Turn REXX trace on but does not make a physical copy.
    4. Aditional parameter(s)
       /NR    - No Replace.  Do not replace if it exists. (By default
                members will be replaced.)
    Eg.   rc=$copymem(dsn1'('member')',dsn2'('member')','DEBUG')
          If rc/=0 Then Say 'Copy failed....'
   Dataset Format:
       from - dataset{(member)}{=volser}
       to   - {+}dataset{(member)}{=volser}
     For uncatalogued datasets, volser may be supplied by appending
     the volser after the dataset seperated by a "=" delimiter.
     Dataset or dataset(member) may or may not be quoted, however, any
     trailing quote MUST be before the "=volser" if supplied.
     Note: Datasets will be assumed to be fully qualified and unquoted
           datasets will NOT be prefixed by SYSPREF.
*---------------------------------------------------------------------*/
$copymem:ver='1.09'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Parse Upper ARG parm1,parm2,parm3,parm4
    If parm1/='' Then Signal byp1
    "ISREDIT MACRO (parm1,parm2,parm3)";If rc>0 Then ima_macro=1
byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
ini1:
    KMART='SY2 SY5 SY8'

    If parm2='' Then Parse Upper VAR parm1 parm1 ',' parm2 ',' parm3 ',' parm4
    If parm2='' Then Parse Upper VAR parm1 parm1 parm2 parm3 parm4
    zedsmsg=

    If parm3='DEBUG' Then Trace r
    If parm3='TRACEX' Then Do;Trace r;parm3='TRACE';End
    If parm3='TRACEF' Then Do;Trace r;parm3='TRACE';"CONTROL ERRORS CANCEL";End
    If Wordpos('/NR',parm4)>0 Then Do
        replace=;parm4=Delword(parm4,Wordpos('/NR',parm4),1)
    End
    If Substr(parm2,1,1)='+' Then Do
        parm2=Substr(parm2,2);enq='ENQ(MOD)';replace=
    End
    Else enq=
    Parse Value Strip(parm2,,"'") With parm2 '=' tvol
    If tvol/='' Then Do
        x=Listdsi("'SYS1.LINKLIB' VOLUME("tvol")")
        If sysreason=22 Then Do
           zedlmsg="Volume '"tvol"' not mounted or defined to the system."
           rc1=sysreason
           Signal ext1
        End
        Else tvol='VOLUME('tvol')'
    End
    Parse VAR parm2 tdsn '(' tm ')'
    If enq/='' Then Do
        xx=Listdsi("'"tdsn"'" tvol);If sysdsorg/='PS' Then enq=
    End
    Parse Value Strip(parm1,,"'") With parm1 '=' fvol
    If fvol/='' Then Do
        x=Listdsi("'SYS1.LINKLIB' VOLUME("fvol")")
        If sysreason=22 Then Do
           zedlmsg="Volume '"fvol"' not mounted or defined to the system."
           rc1=sysreason
           Signal ext1
        End
        Else fvol='VOLUME('fvol')'
    End
    Parse VAR parm1 fdsn '(' fm ')'
    If fm/='' Then fm='FROMMEM('fm')';If tm/='' Then tm='TOMEM('tm')'
"CONTROL ERRORS CANCEL"
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    If Wordpos(sysid,KMART)>0 Then Do       /* Special site idios..   */
        xx=Listdsi("'"fdsn"' DIRECTORY" fvol)
        If sysadirblk/='NO_LIM' Then Signal Final_copy /* LIBRARY test*/
        xx=Listdsi("'"tdsn"' DIRECTORY" tvol)
        If sysadirblk/='NO_LIM' Then Signal Final_copy /* LIBRARY test*/
        zdsn=$Ztempf(tdsn,'M');#tvol=tvol;tvol=
        rc1=Copy_it(fdsn,fm,zdsn,fm);If rc1/=0 Then Signal ext1
        tvol=#tvol
        rc1=Copy_it(zdsn,fm,tdsn,tm);x=$Ztempf(zdsn,'/D')
        Signal ext1
    End
Final_copy:
    rc1=Copy_it(fdsn,fm,tdsn,tm)
ext1:
    "SETMSG MSG(ISRZ001)";Return rc1

/*--------------------------------------------------------------------*/
/* Copy member                                                        */
/*--------------------------------------------------------------------*/
Copy_it:Arg f_dsn,f_m,t_dsn,t_m
    "LMINIT DATAID(DATA1) DATASET('"f_dsn"')" fvol
    rc1=rc;If rc1/=0 Then do
        zedlmsg="From dataset '"f_dsn"' could not be opened."
        Signal ext1
    End
    "LMINIT DATAID(DATA2) DATASET('"t_dsn"')" tvol enq
    rc1=rc;If rc1/=0 Then do
        zedlmsg="To dataset '"t_dsn"' could not be opened."
        "ISPEXEC LMFREE DATAID(&DATA1)";Signal ext1
    End
    If parm3='TRACE' Then Do
        Say "From DSN:" f_dsn " To DSN:" t_dsn;Say ' '
        Say "  LMCOPY FROMID("data1")" f_m "TODATAID("data2")" t_m "TRUNC",
            replace
    End
    If parm3/='DEBUG' Then,
        "LMCOPY FROMID("data1") "f_m" TODATAID("data2") "t_m" TRUNC "replace
    Else If parm3='DEBUG' Then,
        Say "LMCOPY FROMID("DATA1")" f_m "TODATAID("DATA2")" t_m "TRUNC",
            replace
    rc1=rc
    If rc1/=0 Then Do
        f_dsn=f_dsn'('f_m')';t_dsn=t_dsn'('t_m')'
        zedlmsg="Copy failed - '"f_dsn"' -> '"t_dsn"'."
    End
    "LMFREE DATAID(&DATA1)";"LMFREE DATAID(&DATA2)"
    Return rc1
