/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Site customiser for Alex Kara only.                                */
/*                                                                    */
/* Reinvocation parameters:                                           */
/* 1. Value to change to.                                             */
/* 2. Word # to change.                                               */
/* 3. Trace (optional).                                               */
/*                                                                    */
/*--------------------------------------------------------------------*/

    pref='AKOS'                             /* Prefix                 */
    load='$LOAD'                            /* Loadlib llq            */
    snam='KARA'                             /* Surename for $WHOAMI   */
    acct='TPCICS001-000'                    /* Account                */

/*--------------------------------------------------------------------*/
/* The following REXX routines are customised                         */
/*--------------------------------------------------------------------*/
    exec='$ALKHLQ $ALKACCT $ALKLOAD $WHOAMIC'

/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    im_a_macro=0
    If parm# /= '' Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then Signal byp1
    im_a_macro=1

byp1:
    cactn = "RETURN"
    cactn = "CANCEL"
    "CONTROL ERRORS" cactn

ini1:
    Parse Source . . xcmd . xdat .
    If im_a_macro=0 Then Do
        gc009='Execute "'xcmd'" out of your ''REXX/$$'' dataset as an',
              'edit macro.'
        "SETMSG MSG(GC009)"
        Exit
    End
    "VGET (custmac) SHARED"
    If custmac/='' Then Do
        xx=custmac;custmac=;"VPUT (custmac) SHARED"
        Interpret "Signal macro_"xx
    End

    If parm# /= '' Then Call parse_parms

    "ISREDIT (dsn) = DATASET"

$ALKHLQ_S:
    memb=srce(-1)                           /* Mark line +/-n         */
    macp=pref 5
    custmac=1;"VPUT (custmac) SHARED"
    "EDIT DATASET('&DSN(&MEMB)') MACRO("xcmd") PRESERVE PARM(macp)"
$ALKHLQ_E:

$ALKACCT_S:
    memb=srce(-1)                           /* Mark line +/-n         */
    macp=acct 5 r
    custmac=1;"VPUT (custmac) SHARED"
    "EDIT DATASET('&DSN(&MEMB)') MACRO("xcmd") PRESERVE PARM(macp)"
$ALKACCT_E:

$ALKLOAD_S:
    memb=srce(-1)                           /* Mark line +/-n         */
    macp=load 5
    custmac=1;"VPUT (custmac) SHARED"
    "EDIT DATASET('&DSN(&MEMB)') MACRO("xcmd") PRESERVE PARM(macp)"
$ALKLOAD_E:

$WHOAMIC_S:
    memb=srce(-1)                           /* Mark line +/-n         */
    Interpret 'x='memb'('snam')'
$WHOAMIC_E:

ext1:
    custmac=;"VPUT (custmac) SHARED"
    Exit


Macro_1:
    Parse VAR parm# uid w# #tr
    If #tr/='' Then Do;Trace R;Parse VAR parm# uid w# #tr;End
    "ISREDIT (line) = LINE 1"
    If uid=Word(line,w#) Then Do;"ISREDIT CANCEL";Exit;End
    line=Overlay(uid,line,Wordindex(line,w#),8)
    "ISREDIT LINE 1 = (line)"
    "ISREDIT END"

    Exit


/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)
    If com = 'N' Then com = parse_cons('/U','U','N',2)

    cmdcol = 0
    cmdcol = parse_varb('C=',cmdcol,'NUM') -2

    all = parse_cons('/A','ALL','NULL')
    If all = '' Then all = parse_cons('A','ALL','NULL',1)

    zfrange = parse_cons('-',,'NULL','WORD')
    If zfrange /= '' Then Do
        Parse VAR zfrange zfrange '-' zlrange
        If zfrange = '' Then zfrange = 1
        If Datatype(zfrange) /= 'NUM' Then Do
            gc009 = "Invalid FROM range."
            Signal err01
        End
        If zlrange = '' Then zlrange = last
        If Datatype(zlrange) /= 'NUM' Then Do
            gc009 = "Invalid TO range."
            Signal err01
        End
        If zlrange > last Then zlrange = last
    End

    Parse VAR parm# xx .
    If Datatype(xx) = 'NUM' Then Do
        If xx > last Then xx = last
        zfrange = xx
        zlrange = xx
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y ';If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''  ;If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask;If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

srce: Arg diff;If Datatype(diff)/='NUM' Then diff=1
      Parse Value Sourceline(sigl+diff) With x '_'
      If Wordpos(x,exec)=0 Then Interpret 'Signal' x'_E';Else Return x
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
