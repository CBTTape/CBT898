/*--------------------------ooo00 REXX 00ooo--------------------------*/
$DSNSEL:$dsnsel_ver='1.10'
ms=mark(1) /*

   $DSNSEL:

   Present a DSN selection list.
   Calls routine $DSLIST to do a catalog search.

   Parameters should be comma seperated however may be space seperated
   if all are used.  Parameters are positional:
   1. Dataset (valid dataset mask).
   2. Dataset type. Permissable values are as followws with "*" (ALL)
      the default:
        CLUSTER, DATA, INDEX, NONVSAM, GDS, GDG, PATH, AIX, ALIAS,
        UCAT, ALL or *.
      Default is all.
      You can pass parameter of "/Wild" or "/All" to get all strings
      matching the "dataset" parameter anywhere in the dataset name.
      The following dataset will be generated and the default dataset
      type will be inferred,
        **.*dataset*.**
      Watch this as this could take a loooooooonnnnnnnngggggg time.
   3. Dataset selection list panel name. Optional, default is
      $DSNSELP.
   4. Optional table name. If present the table will be left open on
      return to the caller. If missing a dataset selection list will be
      displayed and on a valid selection the dataset name will be
      returned. If selection table abandoned dataset name '8'
      indicationg abandon is returned.
      You can pass a sub-parameter of "(OLD)" or "(NEW)" with the
      default being "(NEW)". This permits the build of the table from
      multiple masks. Invoke as "(NEW)" the first time and thereafter as
      "(OLD)" on subsequent invocations.  format is "table(OLD)".
          Eg. x=$dsnsel('AKOS.*','ALL',,'MYTAB(OLD)')
   5. Return dataset name indicator. Any non-blank non dot ('.')
      character to indicate the return of the dataset name using '*' as
      the selection. Note '.' is a place holder for this parameter.
          Eg. x=$dsnsel('AKOS.*','ALL',,,)


   Dependencies:
      REXX:
        $DSLIST   - Catalog search driver.
        $DSNSEL   - This driver
        $TTRUNC   - Translate truncate converter
        $WORDAT   - Used by $TTRUNC
        BR        o Output browser. Required for help.
      Panel:
        $DSNSELP  - Table display panel (self extracting).
      Skeleton:
        $DSNSELS  - Skeleton required for the "/PRINT" option (self
                    extracting).

   Commands:
      /NOMigrat - Remove all entries that are migrated.
      /Print   - Print listing.  Output to an edited dataset.
      F member - Find member. Look for member (may be wildcarded with
                 '*' and/or '%') in all the NONVSAM non_MIGRATed
                 datasets.  Will tag them with a '@'
      new_dsn  - New dsname pattern for new display.
      +new_dsn - Append new dsname to exixting table.
      *        - Refresh with current parameters.

   Selections:
      B / S    - Browse dataset.
      E        - Edit dataset.
      HR       - Issue "HRECALL" agains an IBM migrated dataset.
      V        - View dataset.
      34       - Invoke ISPF option 3.4 using dsname.
      *        - Use pattern on line (overtyped dsn) for new display or
                 return dataset to the caller if positional parameter 5
                 is used.
      *+ / +*  - Same as "*" except output is appended to original
                 display.
      other    - Will interpret command against the dataset.

/*--------------------------------------------------------------------*/
*/;me=mark(-1)
    Arg level,dstype,panel,table,retdsn
    If Words(level)> 1 Then Do
        Parse Upper Arg level dstype panel table retdsn
        If Wordpos(Left(dstype,2),'/W /A')>0 Then Do
            Parse Upper Arg . . dstype panel table retdsn
            level='**.*'level'*.**'
        End
    End
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If level/='' Then Signal byp1
    "ISREDIT MACRO (level,dstype,table) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

    Parse SOURCE . . xcmd .

    If Wordpos(level,'? ??')>0 Then Do
        If level='??' Then Signal Help_me
        x=$br(xcmd '??')
        Exit
    End

    If panel='' Then panel=xcmd'P'
    If table/='' Then Do
        Parse Var table tableds '(' tdisp ')'
        If tdisp='OLD' Then newtab=0;ELse newtab=1
    End
    Else Do;tableds='TD'Time('s');newtab=1;End
    #dstype=dstype;cat='.';sayit='.';ret_queued='Y';#dss=
    If retdsn='.' Then retdsn=
    If retdsn/='' Then Do
        zedlmsg='S(elect) dataset to return to calling routine.'
        "SETMSG MSG(ISRZ001)"
    End
    Parse VAR level level parm#

loop1:
    level=Strip(level,,"'")
    If level='' Then Level=Userid()'.*'
    Parse VAR level hlq '.' llq
    If llq='*' Then level=level'*'
    dstype=ver_dstype(dstype)

refresh_it:
    If newtab Then Do
        "TBEND &TABLEDS"
        "TBCREATE &TABLEDS NAMES(dsn,vol,dt,membfnd) NOWRITE REPLACE SHARE"
        membfnd=
    End
    If Trace()='R' Then Say,
        'level=>'level'<''cat=>'cat'<''sayit=>'sayit'<',
        'ret_queued=>'ret_queued'<'
    xx=$dslist(level cat sayit ret_queued)
    If xx/=0 Then Do
        zedlmsg='Invalid dataset mask passed.'
        "SETMSG MSG(ISRZ001)"
        Return xx
    End
    #tr=Trace('o')
    Do Queued()
        Parse Pull line
        If Strip(line)='' Then Iterate
        w1=Word(line,1)
        Select
            When w1='CATALOG' Then Iterate
            When dstype='ALL' Then Nop
            Otherwise If Word(line,1)/=dstype Then Iterate
        End
        Parse var line dt dsn vol .;Parse VAR dsn dsn .
        If vol='' Then If dt='CLUSTER' Then vol='*VSAM*'
        "TBMOD &TABLEDS"
    End
    x=Trace(#tr)                            /* Restore trace setting  */

    "TBSORT &TABLEDS FIELDS(DSN,C,A)";"TBTOP &TABLEDS"
    If table/='' Then Return 0
    If Index(' 'parm#,' NOM')>0 Then Do
        parm#=;cmd='NOM';Signal test_nomig
    End

ds_screen:
    dss=
    If Build_panel/='Y' Then Do;x=Build_panel();Build_panel='Y';End
    "TBDISPL &TABLEDS PANEL(&PANEL)"
    If rc/=0 Then Do
       "TBEND &TABLEDS"
        If Build_panel='Y' Then Do
            "LIBDEF ISPSLIB";"LIBDEF ISPMLIB"
            "LIBDEF ISPPLIB";m#=Msg('Off');Address TSO "DELETE '"dsnfx"'"
        End
        Return 8
    End
    Parse VAR zcmd cmd p1 p2 1 c11 +1 c21 +1 c31 +1 .
    If cmd='TRACE' Then Do
        Select
            When p1='OFF' Then Trace('N')
            When p1='ON'  Then Trace('R')
            Otherwise Do                     /* Toggle                 */
                #tr=Trace()
                If Verify(#tr,'NO')=0 Then Trace('R');Else Trace('N')
            End
        End
        #tr=Trace();Signal ds_screen
    End
    If Wordpos(cmd,'? HELP')>0 Then Do
        If level='??' Then Signal Help_me
        x=$br(xcmd '??')
        Signal ds_screen
    End
    If cmd='' & dss='' Then Signal refresh_it
test_nomig:
    If dss='=' Then dss=#dss
    #dss=dss
    If Substr(cmd,1,4)=Substr('/NOMIGRAT',1,4) Then Do
        "TBTOP &TABLEDS";
        Do While rc=0
            "TBSKIP &TABLEDS";
            If rc/=0 Then Leave
            If vol='MIGRAT' Then "TBDELETE &TABLEDS"
        End
        "TBTOP &TABLEDS";Signal ds_screen
    End
test_Find:
    If cmd = 'F' Then Do
        x=find_member(p1);Signal ds_screen
    End
    If Substr(cmd,1,2)=Substr('/PRINT',1,2) Then Do
        "FTOPEN TEMP"
        "FTINCL" xcmd"S"
        "FTCLOSE"
        "VGET ZTEMPF"
        tempsub=ztempf
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        zedlmsg='Do with whatever you like. On END it will become the',
                'guest of the "bit bucket".'
        "SETMSG MSG(ISRZ001)"
        "VIEW DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        "TBTOP &TABLEDS";Signal ds_screen
    End
    If zcmd='*' Then Do
        Signal loop1
    End
    If zcmd/='' Then Do
        If Substr(zcmd,1,1)='+' Then Do;newtab=0;zcmd=Substr(zcmd,2);End
        Else newtab=1
        level=cmd;dstype=ver_dstype(p1)
        Signal loop1
    End
    If Wordpos(dss,'* R S')>0 & retdsn/='' Then Do
        "TBEND &TABLEDS"
        Return dsn
    End
/*  Select                                                            */
/*     When (dss='B') Then act='BROWSE'                               */
/*     When (dss='E') Then act='EDIT'                                 */
/*     When (dss='V') Then act='VIEW'                                 */
/*     Otherwise act=                                                 */
/*  End                                                               */
    If Wordpos(dss,'VB VC ENQINFO')=0 Then,
        act=$ttrunc(dss,1,'V,VIEW E,EDIT B,BROWSE S,BROWSE *,')
    Else act=
    If act/='' Then Do
        Call ON Error Name br_err1
        act "DATASET('&DSN')"
        Call Off Error
        Signal ds_screen
    End
    If Wordpos(dss,'* +* *+') & dsn/='' Then Do
        If Index(dss,'+')>0 Then newtab=0;Else newtab=1
        level=dsn;dstype=#dstype
        Signal loop1
    End
    If dss='' Then Do
        zedlmsg='A selection must be made or use "END" PF key to abandon.'
        "SETMSG MSG(ISRZ001)"
        Signal ds_screen
    End
    If dss='D' Then Do
        zedlmsg='Enter "34" in the command field to invoke ISPF option',
                '3.4 and delete from there.'
        "SETMSG MSG(ISRZ001)"
        Signal ds_screen
    End
    If Wordpos(dss,'34 DL')>0 Then Do
        dsl=dsn
        "SELECT PGM(ISRDSLST) PARM(DSL '&DSL')"
        Signal ds_screen
    End
    If dss='HR' Then Do
        Address TSO "HRECALL '"dsn"'"
        Signal ds_screen
    End
    Interpret "x="dss"('"dsn"')";Signal ds_screen

ver_dstype:Parse Upper ARG arg1
    matrix=,
           'C,CLUSTER ',
           'D,DATA    ',
           'I,INDEX   ',
           'N,NONVSAM ',
           'S,GDS     ',
           'G,GDG     ',
           'P,PATH    ',
           'A,AIX     ',
           'X,ALIAS   ',
           'U,UCAT    ',
           '*,ALL     ',
           ''
    Return $Ttrunc(Arg1,1,Matrix)

Help_me:
    where=1
    Do i=ms To me
        Say Substr(Sourceline(i),1,79)
    End
    Return 0
br_err1: If rc>4 Then "ISPEXEC SETMSG MSG(&ZERRMSG)";Return 4
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)

/*--------------------------------------------------------------------*/
/* Create panel(s) from sourcelines between the '/* */'               */
/*--------------------------------------------------------------------*/
build_panel:
    u=Userid();p=Sysvar(syspref);If u/=p&p/='' Then u=p'.'u;hlq0=u
    dd='TP'Time('s');lab=0
    dsnfx= hlq0'.$$$TEMP.'dd
    #msg=Msg('Off')
    Address TSO
    "DELETE '"dsnfx"'"
    "ALLOC DA('"dsnfx"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSDA) DIR(1)",
       "RECFM(F B) REU"
    "FREE DA('"dsnfx"')"
    members=xcmd"P" xcmd'S'
    Do While members/=''
        Parse VAR members memb members
        #tr=Trace('o')
        lab=lab+1;Interpret "Call make_mem_"lab
        "NEWSTACK"
        Do i=n_st To n_en;Queue Sourceline(i);End;Queue ''
        x=Trace(#tr)
        "ALLOC F("dd") DA('"dsnfx"("memb")') SHR REU"
        "EXECIO * DISKW "dd" (FINIS"
        If rc/=0 Then Do
           Say "Error outputing to datadset '"dsnfx"("memb")', rc="rc"."
           Exit
        End
    End
    Address
    Address ISPEXEC "LIBDEF ISPPLIB DATASET ID('&dsnfx') STACK"
    Address ISPEXEC "LIBDEF ISPSLIB DATASET ID('&dsnfx') STACK"
    Address ISPEXEC "LIBDEF ISPMLIB DATASET ID('&dsnfx') STACK"
    x=Msg(#msg)
    Return 0

/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_1:n_st = mark(2)
/*
)ATTR
 _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) HILITE(USCORE)
 @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
 ` TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
 ¬ TYPE(OUTPUT) INTENS(LOW) CAPS(ON) COLOR(GREEN)
 ? TYPE(INPUT)  INTENS(LOW) CAPS(ON) COLOR(GREEN)
 $ TYPE(TEXT) SKIP(ON) COLOR(GREEN)
 ~ TYPE(TEXT) INTENS(LOW) HILITE(USCORE)
)BODY EXPAND(\\)
@&ZTIME - DSNLIST &LEVEL -\-\-
$&SID ===>_ZCMD                                               $Scroll ===>_AMT +
~Command ~F~Dataset                                          ~Volser ~Data type+
)MODEL
_DSS     `Z?DSN                                              ¬VOL    ¬DT
)INIT
  &SID = &ZSYSID
  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)
  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT
  .ZVARS='(MEMBFND)'
)PROC
  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)
  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT
)END
*/
n_en=mark(-2);Return 0
make_mem_2:n_st = mark(2)
/*
Catalogued entries for '&LEVEL'.
)BLANK
Dataset                                      Type      Volume(s)
-------------------------------------------- --------- ----------------
)TB 46 56
)DOT &TABLEDS
&DSN!&DT!&VOL
)ENDDOT &TABLEDS
*/
n_en=mark(-2);Return 0

/* External routine imported for completeness.                        */
/******************************** REXX ********************************/
/* Translate TRUNCate data (case sensitive).                          */
/* Comma seperated positional parameters:                             */
/* 1. Word to be translated/truncated.                                */
/* 2. Truncaion factor (default) 1 ("*" defaults to length of parm).  */
/* 3. Translation table. Format 'ch1,val1 ch2,val2 .... *,default)    */
/*    If the default is "*" then the original value is returned.      */
/* Requires access to sub-routine "$WORDAT".                          */
/* Eg.: act=$Ttrunc(xx,2,'/E,EDIT /V,VIEW /B,BROWSE *,BROWSE')        */
/*--------------------------------------------------------------------*/
$Ttrunc: Parse Arg text,tl,matrix
    If tl='*' Then tl=Length(text);If Datatype(tl,'W') Then Nop;Else tl=1
    wt=Substr(text,1,tl);wp=Index(' 'matrix,' 'wt',')
    If wp>0 Then xx=$Wordat(matrix,wp);Else xx=Word(matrix,Words(matrix))
    Parse VAR xx . ',' zz;If wp=0 & zz='*' Then Return text;Else Return zz

find_member:Arg lfind
    Do While rc=0
        "TBSKIP &TABLEDS ROWID(row#)"
        If rc/=0 Then Leave
        If #tr/='N' Then Say 1 dt dsn
        If dt/='NONVSAM' Then Iterate
        "LMINIT DATAID(MS2) DATASET('&DSN') ENQ(SHR) ORG(DSO)"
        If #tr/='N' Then Say 2 dt dsn
        If rc=0 Then Do
            If dso/='PO' Then Do
                "LMFREE DATAID(&MS2)";Iterate
            End
            membfnd=
            "LMOPEN DATAID(&MS2) OPTION(INPUT)"
            If rc=0 Then,
                If pos('*',lfind)>0 | pos('%',lfind)>0 Then,
                    "LMMLIST DATAID(&MS2) MEMBER(CHECK)",
                             "PATTERN(&LFIND) OPTION(LIST)"
                Else "LMMFIND DATAID(&MS2) MEMBER(&LFIND)"
            If rc=0 Then membfnd='@'
            "LMFREE DATAID(&MS2)"
        End
        "TBMOD &TABLEDS"
    End
    Return 0
