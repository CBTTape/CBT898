/*  REXX  */
/*  If Index(v_dsn,'&')>0 Then v_dsn=$evalamp(v_dsn)                  */

$EVALAMP:$evalamp_ver='2.14'
/*--------------------------------------------------------------------*/
/* Parse the line looking for variables startingt with an '&'.        */
/* If found, extract the variable name and than calls anouther sub-   */
/* routine to see if the variable has been set.                       */
/* If the variable name is returned it is not a system symbol and no  */
/* substitution is made.                                              */
/* Parameters:                                                        */
/*  1. Text to parse.                                                 */
/*  2. Column to parse from.                                          */
/*  3. Literal 'LAST' to start from last line rather than current     */
/*     position. Designed when parm is passed to instream proc.       */
/*     Literal 'FIRST' to use the first hit of the variable and don't */
/*     look for any further changes.                                  */
/* Use command "$RU $EVALAMP" ($Routine Upgrade) to update with the   */
/* latest infrastructure copy of $EVALAMP.  Use command               */
/* "$RU $EVALAMP ?" to display latest infrastructure version.         */
/*--------------------------------------------------------------------*/
eval_amper: Parse Arg text,v_p,s_order,trace_it
    If trace_it/='' Then Trace r
    If text='?' Then Return $evalamp_ver
    loop_lim=50                             /* Arbitary loop limit    */
    If debug/=1 Then debug=0
    "ISREDIT (xx)=DATASET"
    If rc/=0 Then Do
        If Verify(text,nat,'N')=0 & Length(text)<=8 Then val=Mvsvar(Symdef,text)
        Else val=
        If val/='' Then Return val;Else Return text
    End
    #tr=Trace()
    expand=1
    nat='ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||,
        'abcdefghijklmnopqrstuvwxyz' ||,
        '0123456789@#$'
    If lin#='LIN#' Then "ISREDIT (lin#)=LINENUM .ZCSR"
    If s_order='LAST' Then "ISREDIT (lin#)=LINENUM .ZLAST"
    If \Datatype(v_p,'W') Then v_p=1
    Do Forever
        v_p=Index(text,'&',v_p)
        If v_p=0 Then Return text
        next_char=Substr(text,v_p+1,1)
        If next_char='&' | next_char=' ' Then Do;v_p=v_p+2;Iterate;End
        If v_p=1 Then p1=;Else p1=Substr(text,1,v_p-1)
        p2=Substr(text,v_p)
        lc=Verify(p2' ',nat,'N',2)
        var=Substr(p2,1,lc-1)
        If Substr(p2,lc,1)='.' Then Do
            lc=lc+1
            var=var'.'
        End
        p2=Substr(p2,lc)
        If debug Then Say Space(var Substr(text,1,72))
        var_v=Get_equate(var)
        If var_v/=var Then Do
            If var_v/='' Then Do
                If Index(var_v,"''")>0 Then var_v=$cstring(var_v,"''","'",,'*')
                text=$cstring(text,var,var_v,v_p,'*')
            End
            Else Do
                x=Index(text,var)
                If x>0 Then text=Delstr(text,x,Length(var))
            End
        End
        If var_v/='' Then v_p=v_p+1
    End
    Return text

/*--------------------------------------------------------------------*/
/* Receive a variable name as the argument and seacrh the JCL for any */
/* variable equate statements, eg. "varname=". If such an equate is   */
/* found it is assumed it is a user variable. If no equate is found   */
/* a MVS symbolic evaluation is undertaken.  If successfull, the      */
/* new value is returned else the original variable name is returned. */
/* Variable "findtry" is used in case we are not in JCL and get into  */
/* an indefinite loop.                                                */
/*--------------------------------------------------------------------*/
Get_equate: Parse Arg var_v
    Parse VAR var_v '&' xxx '.' var_suf
    sysvar=0
    If xxx='SYSUID' Then Return var_v
    Interpret "If vas_"xxx"/='VAS_"xxx"' Then Return vas_"xxx
    lin@=lin#;col@=0;find=xxx'='
    findtry=0                               /* Stop indefinite loop   */
    Do Forever
        findtry=findtry+1;If findtry>loop_lim Then Do
            yy=var_v
            If Substr(yy,Length(yy))='.' Then yy=Substr(yy,1,Length(yy)-1)
            If Wordpos(yy,missing_var)=0 Then missing_var=missing_var yy
            Say 'Recursive loop limit "'loop_lim'" reached processing:'
            Say '  'Space(yy Substr(text,1,72))
            Say 'Check your source and try again.'
            Leave
        End
        "ISREDIT CURSOR=" lin@ col@
        If s_order='FIRST' Then "ISREDIT SEEK '"find"' FIRST"
        Else Do
            "ISREDIT SEEK '"find"' PREV"
            If rc/=0 Then "ISREDIT SEEK '"find"'"
        End
        If rc=0 Then Do
            "ISREDIT (liney)=LINE .ZCSR"
            "ISREDIT (lin@,col@)=CURSOR"
            If Verify(#tr,'NO')>0 Then Say lin@+1 Col@+0 Substr(liney,1,70)
            If Substr(liney,1,3)='//*' | Substr(liney,1,2)/='//' Then,
                Do;col@=col@-1;Iterate;End
            If Verify(liney,nat,'M',col@-1)=col@ & expand Then Do
                If \expand Then Return var_v
                Interpret "Parse VAR liney '"find"' liney"
                If Substr(liney,1,1)/="'" Then Do
                    If Substr(liney,1,1)=' ' Then liney=
                    Parse VAR liney val .
                    Parse VAR val val ',' .
                End
                Else val=get_quote_delim(liney)
                If Substr(val,1,1)='&' Then Do
                    Parse VAR val '&' xxx '.' zzz;xxx=Strip(xxx,,"'")
                    var_suf=var_suf||zzz;find=xxx'='
/*                  findtry=0                                         */
                    col@=col@-1;Iterate
                End
                Select
                    When val='DATE()' Then Return $DATEMAN('REV',,2,'D')
                    When val='TIME()' Then Do
                        Parse Value Time() with hh ':' mm ':' ss
                        Return hh||mm||ss
                    End
                    When Substr(val,1,8)='$DATEMAN(' Then Do
                        Parse VAR liney '$DATEMAN(' dmv ')' .
                        Interpret "xx=$DATEMAN("dmv")"
                        If Word(xx,1)/='Error' Then Return xx
                        Else Return val
                    End
                    Otherwise Return val||var_suf
                End
            End
            Else Do;col@=col@-1;Iterate;End
        End
        Leave
    End
Return_Var_val:
    If Verify(xxx,nat,'N')=0 & Length(xxx)<=8 Then val=Mvsvar(Symdef,xxx)
    Else val=
    If val='' Then Return var_v||var_suf
    Else Do;sysvar=1;Return val||var_suf;End

/*--------------------------------------------------------------------*/
/* It has been established that the first character of a value is a   */
/* quote and the value is parsed for a valid SINGLE quote terminator. */
/*--------------------------------------------------------------------*/
get_quote_delim:
    yyy=Substr(Arg(1),2);nq=1
    Do Forever
        nq=Index(yyy,"'",nq)
        If nq=0 Then nq=Length(Strip(yyy))+1
        Else If Substr(yyy,nq+1,1)="'" Then Do
                 nq=nq+2;Iterate
             End
        val=Substr(yyy,1,nq-1)
        yyy=Substr(yyy,nq+1);If yyy='' Then Leave
        Parse VAR yyy . ',' yyy
        Leave
    End
    Return val
$EVALAMP_end:
