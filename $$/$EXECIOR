    Exit
ext1:

    Address TSO "FREE F("dd")"
    Address TSO "EXECIO 0 DISKR "dd" (STEM linei. FINIS)"
Close_file:

    End
        Say '*'Centre(' Break ',77,'-')'*'
        End
            Say Right(outc,5,'0') Substr(lineo.outc,1,72)
            outc=outc+1;lineo.outc=linei.i
        Do i=1 To linei.0
        If rc/=0 Then eof=1;strt=;totr=totr+linei.0
        Address TSO "EXECIO "#pr" DISKR "dd strt" (STEM linei. OPEN)"
    Do Forever Until eof                    /* End of file test       */
    eof=0                                   /* Enf of file (no)       */
    outc=0                                  /* Output line counter    */
    strt=(totr+#sta)-12;#sta=strt
   the last 12 records may be available in memory from the last read  */
/* To read the last 12 records do the following - However, remember

    Say ' End of 1st. pass';Say ' '
    Say ' Output records='totr;Say ' Total records ='totr+#sta;Say ' '
    End
        Say '*'Centre(' Break ',77,'-')'*'
        End
            Say Right(outc,5,'0') Substr(lineo.outc,1,72)
            outc=outc+1;lineo.outc=linei.i
        Do i=1 To linei.0
        If rc/=0 Then eof=1;strt=;totr=totr+linei.0
        Address TSO "EXECIO "#pr" DISKR "dd strt" (STEM linei. OPEN)"
    Do Forever Until eof                    /* End of file test       */
    eof=0                                   /* Enf of file (no)       */
    outc=0                                  /* Output line counter    */
    totr=0                                  /* Total records accum    */
    totr=strt-1                             /* Total records read     */
    #sta=strt                               /* Preserve Start read at */
strt=15  /* Start read at                                             */
         /* read. Delete this for live usage.                         */
         /* handle large files when #pr would be say 5000 records per */
#pr=10   /* Deliberately made small to see how this routine would     */
    strt=1                                  /* Start read at          */
    #pr=msz%syslrecl                        /* No. records per read   */
    x=Listdsi("'"infile"'")                 /* To return file's LRECL */
    msz=4*(1024*1024)                       /* Memory for read        */

    Address TSO "ALLOC F("dd") DA('"infile"') SHR REU"
    dd='EI'Time('s');infile='KZ1840.$$($EXECIOL)'
ini1:
/*  "CONTROL ERRORS CANCEL"                                           */
byp1:

    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1
    If parm#/='' Then Signal byp1
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
/*--------------------------------------------------------------------*/
/*  calculate records to skip to get the last 12.                     */
/*  loop 1 as you would not know the number of records in the file to */
/*  read + where started in loop 1. This logoc would not work without */
/*  The second loop reads the last 12 records. Used the total records */
/*  reads in blocks of 10.                                            */
/*  In the sample the first loop starts input at record #15 and       */
/*                                                                    */
/*  stats for demonstration purposes.                                 */
/*  NOte some of the variables in the sample are only used to gather  */
/*                                                                    */
/*  capping.                                                          */
/*  may handle large files providing on your above the line TSO       */
/*  while the stem variables copied into are held above the line which*/
/*  date read in the EXECIO is placed in variables below the line     */
/*  variables for later processing.  It shoul;d be noted that the     */
/*  You may process records asis or output to another set of stem     */
/*                                                                    */
/*  of loopng for a small file.                                       */
/*  'break' line displayed between each block to giove the impression */
/*  The sample has been customised to 10 records per read and a       */
/*                                                                    */
/*  length.                                                           */
/*  calculated from 4*(1024*1024) divided by the logical record       */
/*  The number of records to read per IO is based on available memory */
/*  storage for large files.                                          */
/*  This is a sample or EXECIO under a loop designed not to blow      */
/*  $EXECIOL:                                                         */
/*--------------------------ooo00 REXX 00ooo--------------------------*/
