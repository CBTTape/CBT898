/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* $GDG: Return the 'GUVU' of a dataset for the generation passed or  */
/*       create date for 'GUVU' passed.                               */
/*                                                                    */
/* Return 'NOT FOUND' if generation passed is out of range.           */
/*                                                                    */
/* Parameter format is: (positional),                                 */
/*   gdg.name(0/-n)   -> gdg.name.GxxVyy                              */
/*       - or -                                                       */
/*   gdg.name.GxxVyy  -> dd/mm/yyyy                                   */
/*                                                                    */
/*--------------------------------------------------------------------*/
$gdg:Arg gen,trace;If trace/='' Then Trace r
    gen=Strip(gen,,"'")
    llq = Substr(gen,Lastpos('.',gen)+1)
    Parse VAR llq a1 +1 . 6 a2 +1 .
    Parse VAR gen gen '(' ver ')'
    #m1=Msg('On');x=Outtrap('line.',500,'NOCONCAT')
    If a1='G' & a2='V' Then Do
        Address TSO "listc ent('"gen"') ALL"
        x=Outtrap('Off');x=Msg(#m1)
        Do i=1 To line.0;If Index(line.i,' CREATION-')>0 Then Leave;End
        If i=line.0 Then Return 'NOT FOUND'
        Parse Var line.i . ' CREATION-' crdate .
        crdate=Strip(Translate(crdate,' ','-'))
        Return $dateman('j2e',crdate)
    End
    Else Do
        If ver='' Then Return 'Error - Invalid GDG format supplied.'
        Address TSO "listc lev('"gen"')"
        x=Outtrap('Off');x=Msg(#m1)
        goovoo=line.0+(ver*2-1)
        If goovoo>line.0 | goovoo<1 Then Return 'NOT FOUND'
        Else Return Word(line.goovoo,3)
    End
