/******************************** REXX ********************************/
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/*  $HELPDYM:                                                         */
/*                                                                    */
/*  Routine to create dynamic scrollable tutorials.                   */
/*                                                                    */
/*  Execute it for instructions on use.                               */
/*                                                                    */
/*--------------------------------------------------------------------*/
    start=Time()
    Parse Upper Arg parm1
/*  parm1='N1'                                                        */

    #cname1st=0                             /* Christian name first   */

/*--------------------------------------------------------------------*/
/* Your free form doco........                                        */
/*--------------------------------------------------------------------*/
n_st = mark(2)                              /* Mark next line         */
/*
*-- Customise here \|/ ------------------------------------------------*
~tag=;tagged=
~headline=' Dynamic Tutorial Sample '
.1. Features:
!G
.1a.Defining tutorial text:
!g
~slasha="/* .. */";s='/*';a='*/'
`   Type free format text between a block of comment controls (&SLASHA.). Avoid
!                                                              y       b
`   the use of the comment characters &S. and &A. within the text. If it is
!                                     y  b   y  b
    required use the variable substitution feature described below.

    Note - Column 1 is reserved for a control character.  Also note, that column
!   w    b
           1 would normally be taken up by an attribute byte in an ISPF panel.

.1b.Defining colors(attribute characters):
!g
    Once you have finished your freeform text, insert attribute lines only after
!                                                     wpybrgwpyb      y
    lines that are to have text colour highlighted.

    These attribute lines are identified by a ! in column 1 and one of the
!         wpybrgwpyb                          yb
    following characters representing the character attribute immediately below
    the appropriate character. A change in attribute character will be
    replicated until the next non-blank character.  Leading spaces will default
    to the default character defined in this REXX routine by the variable
    defcol.
!   y     b
    The following are valid attribute characters:

        b - blue            B - reverse blue         B - uscore blue
!       b b                 Bb                       1b
        g - green           G - reverse green        G - uscore green
!       g b                 Gb                       2b
        p - pink            P - reverse pink         P - uscore pink
!       p b                 Pb                       3b
        r - red             F - reverse red          F - uscore red
!       r b                 Rb                       4b
        t - turquoise       T - reverse turquoise    T - uscore turquoise
!       t b                 Tb                       5b
        w - white           W - reverse white        W - uscore white
!       w b                 Wb                       6b
        y - yellow          Y - reverse yellow       Y - uscore yellow
!       y b                 Yb                       7b
    Any other character will result in the following highlight ("a" was used).
!                                      a             b           yb
    The limitation of the alphabet restricted characters for uscore
    representation. However, number used are in sorted color order.

.1c.Sample text line and attribute line entry:
!g

    You would enter a line as follows (the grid is provided for column placing):
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
            This is an input line with character colors bgprtwy giving:
!   g
           !g                                           bgprtwyg
!   g

    This is an input line with character colors bgprtwy giving:
!   g                                           bgprtwyg
    Note - After the "y" the following text's color "b" has to be re-directed
!   w    b            yb                             yb
           otherwise the following will be displayed:

    This is an input line with character colors bgprtwy giving:
!   g                                           bgprtwy

.1d.Instream REXX commands:
!g
    You can also execute REXX commands built into the comments from lines
    identified by a ~ in column 1. That line will be Interpreted.
!                   yb                               y        b
    This feature was used to dynamicaly build the index access (by code
    selection) using the instream REXX (again the grid is provided for clarity
    only):

    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
=          g
           ~"TBQUERY &TABLE ROWNUM(rownum)";line.I=rownum
            I. Index.
           !g
    For hidden text (ie. if 1d selection is hidden) code as follows:
!                           y b
           ~"TBQUERY &TABLE ROWNUM(rownum)";line.1d=rownum
           ~line.tag.end=rownum;tag='1D';tagged=tagged tag
            1d.Instream REXX commands:
           !g
=

    The above code queries the number of rows in the table (number of actual
    screen lines generated) so far and places it into stem variable line.1d
!                                                                   y
    which will be used to position the table at the correct row when 1D is
!                                                                    y b
    entered on the command line in the tutorial.

    This same feature was used to define variable slasha which will be displayed
!                                                 y     b
`   as &SLASHA..
!      y      b
    Note - This could have been done in the REXX proper as it is a constant and
!   w    b
           does not need to be dynamically set.

.1e.Instream documentation:
!g
    You can also include instream documentation in the text by a * in column 1.
!                                                                yb
    That line will be ignored.

.2. SCroling:
!G
    This sample dialogue also demonstrates scrolling control for a dynamic panel
    making it usable on all model (screen size) terminals.

.3. Invocation.
!G
    There are basically 2 ways of invoking this dialog using a REXX command when
    the HELP PF key is entered. The method used is governed by the type of panel
!       y    b
    design is used. The following are thed designs and appropriate code:

.3a.Panels using action bars (with Help action):
!g
    Use an action bar definition as per the following example. Our contribution
    is the yellow entry:
      )ABC DESC('Help') MNEM(1)
!     g
      PDC DESC('Dynamic Help') MNEM(1) ACTION
!     y
`         RUN(ISRROUTE) PARM('SELECT CMD(&XCMD.)')
!     y
      PDC DESC('General') MNEM(1) ACTION RUN(TUTOR) PARM(...
!     g
      )ABCINIT
!     g
      .ZVARS=....
!     g

.3b.Panels NOT using action bars:
!g
    The invoking dialogue must be initiated by a REXX routine displaying a
    panel.
    Code the following in the REXX:
=y
      fkeys = 'ZPF01,zpf13'
      "VGET (&FKEYS) PROFILE"
      szpf01 = zpf01
      szpf13 = zpf13
      zpf01  = 'HELPDYN'
      zpf13  = zpf01
      "VPUT (&FKEYS) PROFILE"
=g
      .....
      Scr1: "DISPLAY PANEL(&PANEL)"
      If rc /= 0 Then Signal exit1
=y
      If zcmd = 'HELPDYN' Then Do
        "SELECT CMD(%&XCMD.)"
        Signal scr1
      End
      ....
      exit1:
!g
      zpf01 = szpf01
      zpf13 = szpf13
      "VPUT (&FKEYS) PROFILE"
      Exit
!g
=

.4. Index usage:
!G
    The Index conscept is an optional feature of this facility.  The index is
    realy part of the text with special options used.
    It is recommended that the Index be the last part of the text and tagged
    using the "hidden text" feature so that it does not become part of the
!              g          b
    normal scrollable text (refer to discussion on hidden text).
    This index feature is actually recording pointers to specifically identified
    paragraphs/lines. You then text an Index to let the user know of these fast
    path codes.
    Paragraphs can be automaticaly detected and recorded by the use of the
    paragrapl identifier character in column 1 whic is .(dot) by default. If
!                                                      yb
    this feature is used, the format must be:

    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           .cc. Paragraph header....
!          g
    where cc is any paragraph number/character (trailing dot is optional but a
    space before the description IS required.
    Do not forget to manually update the Index text. (Auto update with
    next release.)
    Individual lines can be manually Indexed as follows:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           ~x=tag('N1')
!          g
~x=tag('N1')
            This is a special line that is not a paragraph but should be indexed
!          g
    The above line will now be fast trackable using N1 on the command line. It
!                                                   y  b
    is recommended that some reference to this be made somewhere to let the user
    know of it. Hence the Index. Go ahead, try N1 on the command line!
!                                y             r  y
    Note - Index entry of 0 should not be used as it is the default top of
!   w    b                yb
           tutorial as set by this routine.

.5. Special characters (in column 1):
!G
    The following is a list of the special characters for use in column 1 and
    their affect:
          Blank. Normal text line that will be displayed after color mods.
!       Yb
        . Dot. Paragraph identifier. Record the line number (actually the
!       yb
          previous line - 'last line before') and parse the line to extract the
          "indexing" value (between the two dots) and permit fast path using
!          g       b
          this indexing value.
        ! Exclamation. Used to identify colouring masks. Should immediately
!       yb
          follow the line it is to mask with the appropriate color below the
          characters.
        = Equal. Used to set/change the default colouring mask. Has the same
!       yb
          affect as a ! mask without the need to repeat after each line. This
!                     yb
          will stay in affect and applied to all text without a following ! mask
!                                                                         yb
          until a = (witht the rest of the line blank) is encountered.
          Note - This mask MUST be set BEFORE the text to be affected as apposed
!         w    b
                 to the ! which must be after the text.
!                       yb
        ~ ??. Sting of syntactically correct REXX command(s) to be interpreted.
!       yb
          Usually commands to set variables and record positions for
          lines/paragraphs and their end.
        ` ??. Perform variable substitution on the line. Replaces all occurences
!       yb
          of &VARNAME. with the value of varname.
!            y        b                  y      b
          Note - To identify a substitutable variable, it must start with an &
!         w    b                                                             y
                 and terminate with a ..  If you actually need a dot at the end
!                                     yb
                 after substitution double up, eg &ENDTEXT...
!                                                 y         b
        \ Backslash. Link turial. Refer to "Linked Tutorials" below.
!       yb                                  g               b
          of &VARNAME. with the value of varname.
        * Asterisk. Instream documentation. Permits the interrnal documentation
!       yb
          of the REXX driver. All lines with * in col 1 will be ignored.
!                                            yb


.6. Linked Tutorials:
!G
    One tutorial may need to reference another tutorial.
    This can be achieved as follows:
    1. Notate the line as a paragraph with either a . in column one or manually
!                                                   yb
       tagging the line with the "TBQUERY...";line.xx=.. command.
!                                y                      b
    2. Precede the above line with the following:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           \R0HELPR
           .         DB2 - Invoke the DB2 tutorial
!          g
       where R0HELPR is the name of the alternate tutorial driver.
!            y       b
\R0HELPR
.          DB2 - Invoke the DB2 tutorial
!          Y  b

       Go ahead enter DB2 on the command line.
!                     y   b


.T. Using this member as a template.
!G
    To customise this member, look for the eyecatchers Customise here \|/ and
!                                                      y                  b
    /|\ flags. All other code should be left ASIS with the exception of the
!   y   b
    REXX code but watch the following:
    Ta.Use the "TBQUERY...";line.x=.. only if you need an Index.
!   g  b       y                      b
       Note - This statement should be BEFORE the actual line.
!      w    b
    Tb.For every ~tag=xx, include a corresponding ~tagged=tag statement. It is
!  g   b         y      b                         y           b
       also advisable to provide a line.x termination using the following code:
       ~line.tag.end=rownum;tag='H';tagged=tagged tag
!      y
       Note - The .tag.end will mark the previous tag value.
!      w    b     y        b                      y   b
    Tc.You can change the default color dynamically by ~defcol=g. Don't forget
!  g   b                                               y       gb
       to set it back.
    GOTCHA:
!g
    Tc.It is recommended that tagged text be placed at the end so as not to
!  g   b
       interfere with scrolling of non tagged text. This includes  any End-off
!                                                                      y
       text. (For details on hidden text, enter H on the command line - refer to
!                                               yb
       Index).
!      yb
    Td.Tagged text may cause unpredictable results in maximum scrollings.
!  g   b
    Te.While the Index is documented as selectable display that is only
!  g   b
       by way of design as t the end so as not to

`                     (End of instructions. Bye &CNAME..)
!P                        Y                    P
*
~"TBQUERY &TABLE ROWNUM(rownum)";line.tag.end=rownum;tag='H'  ;tagged=tagged tag
.H. Hidden text:
!G
    For the purposes of this tutorial, hidden text will be refered to as text
    that is not presented in sequence but MUST be explicitly refered to by it's
    code. Text is not protected but rather a method of selective display as
    prompted/identified through the Index.

    This feature is redundant if Indexes are not used and may cause
    unpredictable results.

    Text is hidden by using the REXX commands ~tag=xx and the
!                                             y       b
    ~tagged=tagged xx, where xx is the code (in this case H). The tagged
!   y                b       y  b                         yb
    variable is used to keep track of all codes tagged as hidden.
    Note - With hidden text, the next topic is not shown if the hidden topic
!   w    b
           does not fill the entire screen as in normal text where the full
           screen is filled with the following topic(s).

~"TBQUERY &TABLE ROWNUM(rownum)";line.tag.end=rownum;tag='HB' ;tagged=tagged tag
~line.tag.end=rownum;tag='HB';tagged=tagged tag
.HB. Hidden text (Big):
!G
    The following text comprises of 80 more lines to demonstrate > 1 screen
    handling. All set up using the REXX command feature.
~Do y=1 to 80;line='   Cont line #'y;linea='!'Copies('p',11)w;"TBMOD &TABLE";End

`                            (End of Hide Big.)
!P                            Y               P
*
* This should be the last entry.
*
* Note the index is not paragraphed but manually positioned as the
* start of the Index is before the "I.".
*
~"TBQUERY &TABLE ROWNUM(rownum)";line.tag.end=rownum;tag='I'  ;tagged=tagged tag
~line.I=rownum
`Hello &CNAME. on &TODAY..

 This routine is designed to be used a template for dynamic help panels.

=Gb                                                                            G
                                   I. Index:
!G
   The following topics are presented in sequence or may be fast tracked by
   selcting from the codes below to demonstrate "index" control:
!Gb                                              y    b                        G

    1  - Features.
!Gy    b G        b                                                            G

    1a - Defining tutorial text.
!Gy    b g                                                                     G

    1b - Defining colors(attribute characters).
!Gy    b g                                                                     G

    1c - Sample text line and attribute line entry.
!Gy    b g                                                                     G

    1d - Instream REXX commands.
!Gy    b g                                                                     G

    1e - Instream documentation:
!Gy    b g                                                                     G

    2  - Scroling.
!Gy    b G        b                                                            G

    3  - Invocation.
!Gy    b G          b                                                          G

    3a - Panels using action bars (with Help action).
!Gy    b g                                                                     G

    3b - Panels NOT using action bars.
!Gy    b g                                                                     G

    4  - Index usage.
!Gy    b G           b                                                         G

    5  - Special characters (in column 1).
!Gy    b G                                b                                    G

    6  - Linked Tutorials.
!Gy    b G                b                                                    G

    T  - Using this member as a template.
!Gy    b G                               b                                     G

   The following topics will not be presented in sequence but can be fast
   tracked by selcting from the codes below:

    I  - This Index (can use 0).
!Gy    b G                      b                                              G

    H  - Hidden text.
!Gy    b G           b                                                         G

    HB - Hidden text(Big).
!Gy    b G                b                                                    G

                               (End of Index.)
!G

~"TBQUERY &TABLE ROWNUM(rownum)";line.tag.end=rownum
*
*-- Customise here /|\ ------------------------------------------------*
*/
n_en = mark(-2)                             /* Mark prev 2 line       */

Help_me:
    Address ISPEXEC
    "ISPEXEC VGET (zscrmaxd)"
    "ISPEXEC VGET (stfinc,dotsrce) PROFILE"
    Numeric digits(15)
    table   = 'DT'Time('s')
    dsn = Sysvar(syspref)'.$$$.DYNAMIC.PANELS.'Userid()
    Parse SOURCE . . xcmd .

    mpref   = 'HELPP'
    panel   = mpref'1'
    defcol  = 'b'                           /* Default color 'blue'   */
    chgchar = '`'                           /* Variable sub ident     */
    rexchar = '~'                           /* REXX command ident     */
    conchar = '+'                           /* REXX command cont ident*/
    atrchar = '!'                           /* Attribute line ident   */
    ignchar = '*'                           /* Ignore line ident      */
    parchar = '.'                           /* Parameter identifier   */
    patchar = '='                           /* Pattern identifier     */
    lnkchar = '\'                           /* Link identifier        */
    atrpat  = Copies(defcol,79)             /* Default color 'blue'   */
    tag     =
    tagged  =
    linked  =
    If #cname1st Then Parse Value $whoami() With cname sname .
    Else            Parse Value $whoami() With sname cname .
    today=Date('e')

    "TBCREATE &TABLE NAMES(LINE,LINEA,TAG) NOWRITE REPLACE"
    Do #i=n_st To n_en
        line = Sourceline(#i)
        ch1 = Substr(line,1,1)
        If ch1 = ignchar Then Iterate
        If ch1 = rexchar Then Do
            Interpret Substr(line,2)
            Iterate
        End
        If ch1 = parchar Then Do
            "TBQUERY &TABLE ROWNUM(rownum)"
            Interpret "Parse Upper VAR line '"parchar"' ii '.'"
            Parse VAR ii ii .
            line.ii=rownum
        End
        If ch1 = lnkchar Then Do
            "TBQUERY &TABLE ROWNUM(rownum)"
            linked = linked rownum':'Strip(Substr(line,2))
            Iterate
        End
        If ch1 = patchar Then Do
            atrpat = parse_atr(Substr(line,2))
            Iterate
        End
        If ch1 = chgchar Then Do Forever
            line = ' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        line = Substr(line,2,79)
        linea = Sourceline(#i+1)
        If Substr(linea,1,1) = atrchar Then Do
            linea = parse_atr(Substr(linea,2))
            #i = #i+1
        End
        Else linea = atrpat
        "TBMOD &TABLE"
    End
    xx       = 'Tutorial'
    headline = xx || Centre(headline,79-2*(Length(xx)),'-') || xx
gc009 = "Started" start 'ended' Time()".";"SETMSG MSG(GC009)"

    Call Create_panels
    "LIBDEF ISPPLIB DATASET ID('&DSN') STACK"

    "CONTROL ERRORS CANCEL"
    "TBTOP &TABLE"
    "TBQUERY &TABLE ROWNUM(rownum) POSITION(tabptr)"
    rownum=rownum +0;#rownum=rownum
    rownum = rownum +0
    If line.tagend = 'LINE.TAGEND' Then line.tagend = rownum
    If line.0 =  'LINE.0' Then line.0=0
    If line.i /= 'LINE.I' Then Do
        show='I';tabptr=line.I
    End
    Else show =

    If parm1 /= '' Then Do
        zcmd = parm1
        Signal scr1a
    End
    "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Call build_field

scr1:
    zcmd =
    "ISPEXEC DISPLAY PANEL(&PANEL)"
    If rc ¬= 0 | zcmd = 'X' Then Signal ext1
scr1a:
    "ISPEXEC VGET (zscrolla zscrolln zverb)"
    If zverb  = 'UP' | zverb = 'DOWN' Then Signal test_scroll
    If show = 'I' & zcmd = '' & zverb = '' Then zcmd = 0
    If zcmd /= '' Then Do
        If Index(' 'tagged' ',' 'zcmd' ') > 0 Then Do
            show=zcmd
            If line.show.end /= 'LINE.'show'.END' Then rownum=line.show.end
            Else                                       rownum=#rownum
        End
        Else Do
            show=;rownum=#rownum
        End
        If line.zcmd /= 'LINE.'zcmd & zverb = '' Then Do
            If Index(linked,' 'line.zcmd':') > 0 Then Do
                xx = Substr(linked,Index(linked,' 'line.zcmd':'))
                Parse var xx ':' lcmd .
                "SELECT CMD(%"lcmd")"
                Signal scr1
            End
            tabptr = line.zcmd
            "TBTOP &TABLE"
            "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
            Call build_field
            Signal scr1
        End
        Else Do
            gc009 = 'Invalid command/Index-pointer "'zcmd'" entered.'
            "SETMSG MSG(GC009)"
            Signal scr1
        End
    End

/*--------------------------------------------------------------------*/
/* Test for scrolling                                                 */
/*--------------------------------------------------------------------*/
test_scroll:
    If zverb  = 'UP' | zverb = 'DOWN' Then Do
        Call scroll_data_ud
        Call scroll_table
        Signal bld2
    End
    If zverb  = 'LEFT' | zverb = 'RIGHT' Then Do
        Call scroll_data_lr
        If result = 0 Then Signal bld2
        Else               Signal scr1
    End

/*--------------------------------------------------------------------*/
/* Rebuild screen                                                     */
/*--------------------------------------------------------------------*/
bld2:
    Call build_field
    Signal scr1

ext1:
   "ISPEXEC TBEND &TABLE"
    "LIBDEF ISPPLIB"
    Address TSO "DELETE '"dsn"'"
    Exit

/*--------------------------------------------------------------------*/
/* This section builds the display field 'DA1' from the table from    */
/* the NEXT row to that poinetd to by variable TABPTR. This allows    */
/* for TBTOP (which is row 0).                                        */
/*--------------------------------------------------------------------*/
build_field:

    Trace Off
    da1 =
    ds1 =
    #i  = 0
    Do Forever
/*      "ISPEXEC TBSKIP &TABLE"                                       */
        "ISPEXEC TBSKIP &TABLE POSITION(c)"
        If rc /= 0 Then Leave
        If show = tag Then Do
            #i  = #i+1
            da1 = da1 Substr(line,1,79)
            ds1 = ds1 Substr(linea,1,79)
        End
        If #i = zscrmaxd Then Leave
        If c  = rownum   Then Leave
    End

    If trace = 'Y' Then Trace r
    Return 0

/*--------------------------------------------------------------------*/
/* This section re-positions the table to the appropriate row         */
/* according to the scroll parameters returned from ISPF.             */
/*--------------------------------------------------------------------*/
scroll_table:
    If tabptr + (qual*scrolln) > rownum Then tabptr = rownum
    Else tabptr = tabptr + (qual*scrolln)
    If tabptr < 0 Then tabptr = 0
   "ISPEXEC TBTOP &TABLE"
   "ISPEXEC TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen to selected line after an UP/DOWN command.       */
/*--------------------------------------------------------------------*/
scroll_data_ud:
    If zscrolla = 'MAX' Then Do
        If zverb  = 'UP' Then tabptr  = 0
        Else                  tabptr  = rownum - (zscrolln-1)
        scrolln = 0
    End
    Else Do
        scrolln  = zscrolln
    End
    If zverb  = 'UP' Then qual = -1
    Else                  qual = +1

    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen LEFT/RIGHT.                                      */
/*--------------------------------------------------------------------*/
scroll_data_lr:
    gc009 = "'"zverb"' is not active."
    "ISPEXEC SETMSG MSG(GC009)"

    Return 4


    Exit

/*--------------------------------------------------------------------*/
/* Cotrol routines.                                                   */
/*--------------------------------------------------------------------*/
parse_atr: Parse Arg #line
    cl = defcol
    Do k=1 To Length(#line)
        If Substr(#line,k,1) = ' ' Then #line = Overlay(cl,#line,k,1)
        Else cl = Substr(#line,k)
    End
    Return Substr(#line,1,79)
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Interpret syntaxact;Signal Value retlab
Tag: Parse Upper Arg #x;"TBQUERY &TABLE ROWNUM(rownum)";line.#x=rownum;Return 0
$whoami:
    Parse Upper ARG type .
    Parse Source . op_mode .
    name = getname()
    If Index(name,',') > 0 Then sep = ','
    Else                        sep = '.'
    Interpret "Parse var name sname '"sep"' cname ."
    Select
        When type = ''  Then name = cname sname
        When type = 'C' Then name = cname
        Otherwise            name = sname
    End
    Return U2Lower(name,2,'*')

/*--------------------------------------------------------------------*/
/* Get name from ACEE control block (imported from REXX '$getname' for*/
/* self containment).                                                 */
/*--------------------------------------------------------------------*/
getname:
    ascb = Storage('224',4)
    asxb = Storage(d2x(c2d(ascb)+x2d('6c')),4)
    acee = Storage(d2x(c2d(asxb)+x2d('c8')),4)
    nam@ = Storage(d2x(c2d(acee)+x2d('64')),4)
    name = Storage(c2x(nam@),30)
    len  = c2d(Substr(name,1,1))
    name = Substr(name,2,len-1)
    Return name

/*--------------------------------------------------------------------*/
/* Convert upper to lower (imported from REXX routine 'lower' for     */
/* self containment).                                                 */
/*--------------------------------------------------------------------*/
U2Lower:
    ARG text,pos,rep
    lc = 'abcdefghijklmnopqrstuvwxyz'
    uc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 99999
    If Datatype(pos) /= 'NUM' | Index(pos,'.') > 0 Then pos = 2
    rname = ''
    Do #j=rep by -1 To 1
        Parse VAR text name text
        If pos > 1 Then Do
            pref = Substr(name,1,pos-1)
            suff = Substr(name,pos)
        End
        Else Do
            pref = ''
            suff = name
        End
        suff = Translate(suff,lc,uc)
        rname = rname pref || suff
        If text = '' Then Leave
    End
    Return Strip(rname text)

/*--------------------------------------------------------------------*/
/* This section dynamically creates the display panel and concatenates*/
/* it to the ISPPLIB concatenation.                                   */
/* Note the build of the panel is designed to execute variable        */
/* substitution if '`' in column 1..                                 */
/*--------------------------------------------------------------------*/
Create_panels:
    chgchar = '`'
    #panel1 = 1                             /* First panel number     */
    #panels = 1                             /* Number of panels       */


    x = Msg('Off')
    Address TSO
    "DELETE '"dsn"'"
    dd='IA'Time('s')
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
    "ALLOC DA('"dsn"') NEW CATALOG CYL SPACE(10,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0)" unitvol "DIR(2)",
       "RECFM(F B) REU"
    "FREE  DA('"dsn"')"

    Do #i=#panel1 To #panels
        member = mpref||#i
        Interpret "Call make_mem_"#i
        Call build_queue
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/* Variable substitution is identified by '`' in clolumn 1. If column */
/* 1 is required the use '`+' followed by the line to be doctored.    */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    #i_backup = #i
    Do #i=n_st To n_en
        If Substr(Sourceline(#i),1,1) = chgchar Then Do
            line = Substr(Sourceline(#i),2)
            If Strip(line) = '+' Then Do
                #i = #i+1
                line = Sourceline(#i)
            End
            Do Forever
                line = ' 'Substr(line,2)
                If Index(line,'&') = 0 Then Leave
                Parse VAR line p1 '&' var '.' p2
                data = 'line = p1 || 'var' || p2'
                Interpret data
            End
            Queue line
        End
        Else Queue Sourceline(#i)
    End
    Queue ''
    #i = #i_backup

    "ALLOC F("dd") DA('"dsn"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    "DELSTACK"

    Return 0

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(2)
/*
)ATTR  DEFAULT(%+_)
 @ TYPE(TEXT) COLOR(YELLOW)
 # TYPE(TEXT) COLOR(GREEN)
 _ TYPE(INPUT) COLOR(RED) HILITE(USCORE)
 ! AREA(DYNAMIC) SCROLL(ON) EXTEND(ON)
 b TYPE(CHAR) COLOR(BLUE)
 g TYPE(CHAR) COLOR(GREEN)
 p TYPE(CHAR) COLOR(PINK)
 r TYPE(CHAR) COLOR(RED)
 t TYPE(CHAR) COLOR(TURQ)
 w TYPE(CHAR) COLOR(WHITE)
 y TYPE(CHAR) COLOR(YELLOW)
 B TYPE(CHAR) COLOR(BLUE)   HILITE(REVERSE)
 G TYPE(CHAR) COLOR(GREEN)  HILITE(REVERSE)
 P TYPE(CHAR) COLOR(PINK)   HILITE(REVERSE)
 R TYPE(CHAR) COLOR(RED)    HILITE(REVERSE)
 T TYPE(CHAR) COLOR(TURQ)   HILITE(REVERSE)
 W TYPE(CHAR) COLOR(WHITE)  HILITE(REVERSE)
 Y TYPE(CHAR) COLOR(YELLOW) HILITE(REVERSE)
 1 TYPE(CHAR) COLOR(BLUE)   HILITE(USCORE)
 2 TYPE(CHAR) COLOR(GREEN)  HILITE(USCORE)
 3 TYPE(CHAR) COLOR(PINK)   HILITE(USCORE)
 4 TYPE(CHAR) COLOR(RED)    HILITE(USCORE)
 5 TYPE(CHAR) COLOR(TURQ)   HILITE(USCORE)
 6 TYPE(CHAR) COLOR(WHITE)  HILITE(USCORE)
 7 TYPE(CHAR) COLOR(YELLOW) HILITE(USCORE)
)BODY EXPAND(\\)
#&HEADLINE
#&SID#===>_ZCMD                                               #Scroll ===>_Z   +
%
!DA1,DS1                                                                       !
+Use@END+PF key to abandon processing.
)INIT
 &SID = &ZSYSID
 .ZVARS = '(ZSCROLLD)'
 IF (&ZSCROLLD = &Z) &ZSCROLLD = CSR
 &#SCROLLD = &ZSCROLLD
 &ZSCROLLD = TRANS(TRUNC(&ZSCROLLD,1)
             M,MAX H,HALF P,PAGE C,CSR D,DATA *,*)
 IF (&ZSCROLLD ¬= MAX,HALF,PAGE,CSR,DATA) &ZSCROLLD = &#SCROLLD
)PROC
 &ZSCROLLD = TRANS(TRUNC(&ZSCROLLD,1)
             M,MAX H,HALF P,PAGE C,CSR D,DATA *,*)
 IF (&ZSCROLLD ¬= MAX,HALF,PAGE,CSR,DATA) &ZSCROLLD = &#SCROLLD
)END
*/
    n_en = mark(-2);Return 0

