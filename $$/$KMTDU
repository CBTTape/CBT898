/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/*  Macro to generate DADSPlus control statements against JCL being   */
/*  viewed/edited.                                                    */
/*                                                                    */
/*  For available options issue command with a '?' in a view/edit     */
/*  session.                                                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
$KMTDU:du_ver='2.00'
    ARG parm#
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    If \ima_macro Then Do
        zedlmsg="Need to be in edit/view to execute this command."
        Signal msx1
    End

ini1:
    Parse SOURCE . xenv xcmd xdd xdsn .
    Parse Upper VAR parm# parm#

    userid=Userid();defsuff='.TEMP.'userid;panel=xcmd'P'

    If Wordpos(parm#,'HELP ? /? /HELP /H')>0 Then Signal Help_me

    Address ISREDIT;"(status)=USER_STATE"

/*parm#=parm# 'CICSTSS2 DNDCICS ALL'                                  */
    If Wordpos('ALL',parm#)>0 Then parm#=Delword(parm#,Wordpos('ALL',parm#),1)
    Else all=
    zfrange=
    "(last)=LINENUM .ZLAST";"(lev)=MACRO_LEVEL"
    If lev>1 & all='' Then Do
        Parse VAR parm# zfrange ',' zlrange ',' lcmd parm#
    End
    Else Do
        If all='ALL' Then Do
            zfrange=1;"(zlrange)=LINENUM .ZLAST"
        End
        Else Do
            "PROCESS RANGE C";"(cmd)=RANGE_CMD"
            If cmd='C' Then Do
               "(zfrange)=LINENUM .ZFRANGE";"(zlrange)=LINENUM .ZLRANGE"
            End
            Else Do
                zedlmsg='No line numbers selected. Select lines or use',
                        'parameter of "ALL".'
                Signal msx1
            End
        End
    End
    "(dsn)=DATASET";"(member)=MEMBER";ojcl="'"dsn"("member")'"
    Address TSO "ALTLIB ACTIVATE APPLICATION(EXEC) DA('"dsn"')"

Rework:
    ipanel=0;zedlmsg=;cursor=
    p1='*';p2=' '
    If Index(parm#,'Q=')>0 Then Do
        Parse VAR parm# x1 'Q=' xcmdq x2;parm#=Strip(x1) Strip(x2)
    End
    Else xcmdq=xcmd'$'                      /* TDQ subroutine name    */
    Signal On Syntax Name ret_syntax_1e
    Interpret 'x='xcmdq'(dd,dsn)'
    Signal ret_syntax_1
ret_syntax_1e: xcmdq=
ret_syntax_1:  Signal Off Syntax

    If Wordpos('/END',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/END',parm#),1)
        endit=1
    End;Else endit=0
    If Wordpos('DCT',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('DCT',parm#),1)
        p1='*';p2=' ';idct='Y'
    End
    If Wordpos('FILE',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('FILE',parm#),1)
        p1=' ';p2='*';ifil='Y'
    End
    If Wordpos('NOFILE',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('NOFILE',parm#),1)
        nofile=1;inof='Y'
    End
    Else nofile=0
    If Index(parm#,'S=')>0 Then Do
        Parse VAR parm# x1 'S=' suff x2;parm#=Strip(x1) Strip(x2)
        If Suff/='' & Substr(suff,1,1)/='.' Then suff='.'suff
    End
    Else suff=defsuff
    Parse VAR parm# stcname hlqc .
    If stcname='' Then Do
        zedlmsg=zedlmsg||"Must supply started task name as first parameter. "
        ipanel=1
    End
    If hlqc='' Then hlqc=defhlqc
    dads01="'"hlqc"."stcname".DADS01'"
dads01="'CICSI20.DADS.CONTROL.CICSESA'"
    dads01="'"stcname".DADS.CONTROL.CICSESA'"
    #m0=Msg('Off');xx=Listdsi(dads01 'NORECALL');x=Msg(#m0)
    If xx<5 | sysreason=9 | sysreason=25 Then Nop;Else Do
        zedlmsg=zedlmsg||"Dataset" dads01 "not found. "
        ipanel=1;cursor="STCNAME"
    End

    sysid=Strip(Storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    Signal On Syntax Name ret_syntax_2
    acct=acct#;acct=$alkacct();Parse Value $Whoami() With cname sname
ret_syntax_2:
    Signal Off Syntax

scr1:
    If ipanel Then Do
        suff=Substr(suff,2)
        Address ISPEXEC,
            "DISPLAY PANEL("panel") CURSOR(&CURSOR) MSG(ISRZ001)"
        If rc/=0 Then Signal ext1
        If idct/='' Then xtra='DCT ';Else xtra=
        If ifil/='' Then xtra=xtra'FILE '
        If inof/='' Then xtra=xtra'NOFILE '
        parm#=stcname hlqc 'Q='xcmdq 'S='suff xtra
        Signal rework
    End
    cursor=

    Address TSO
    dads01cl=dads01
    Call jobcard_JCL
    If suff/='' Then Call clone_dads01
    x=a_l(Copies('-',67))
    x=o_l('//DADM     EXEC PGM=DADM,REGION=700K')
    x=o_l('//STEPLIB  DD  DISP=SHR,DSN='$KMTCICS('dadsload'))
    If suff/='' Then Do
        x=o_l('//*DADS01   DD  DISP=OLD,DSN='Strip(dads01,,"'"))
        x=o_l('//DADS01   DD  DISP=OLD,DSN='Strip(dads01cl,,"'"))
    End
    Else,
        x=o_l('//DADS01   DD  DISP=OLD,DSN='Strip(dads01,,"'"))
    x=o_l('//SYSPRINT DD  SYSOUT=*')
    x=o_l('//SYSIN    DD  *')

    @dd=;dup_dd=;ex_dd=;no_tdq=
    vsdd='VR'Time('s')
    "ALLOC F("vsdd") DSN("dads01") SHR REU"
    "DELSTACK"
    Signal On Error Name ret_syntax_3;vseio=0;#t1=Trace('o');#m1=Msg('Off')
    "EXECIOVS 0 KSDSRF" vsdd "(OPEN NLOG NCONT NTRACE)"  /* Open File */
    vseio=1
ret_syntax_3:
    Signal Off Error
    x=Trace(#t1);x=Msg(#m1)
    sep1='*'Copies('-',69)'*';sep2='*'Copies('+',69)'*'
    #p1=p1;#p2=p2

    #tr=Trace('o')
    Do i=zfrange To zlrange
        "ISREDIT (line)=LINE" i
        If Substr(line,1,3)='//*' Then Iterate
        If Substr(line,1,2)/='//' Then Iterate
        w3=Word(Translate(Word(line,3),' ',','),1)
        Select
/*          When Word(line,3)='DUMMY' Then dsn='DUMMY'                */
            When w3='DUMMY' Then dsn='DUMMY'
            When Index(line,'DSN=')>0 Then Do
                Parse VAR line 'DSN=' dsn .
                Parse VAR dsn dsn ',' .
            End
            When Index(line,'DSNAME=')>0 Then Do
                Parse VAR line 'DSNAME=' dsn .
                Parse VAR dsn dsn ',' .
            End
            Otherwise dsn=
        End
        If dsn='' Then Iterate
        x=o_l(sep2)
        Parse VAR line '//' dd .
        lw=Substr(Word(line,words(Substr(line,1,71))),1,2)
        p1=#p1;p2=#p2;sysdsorg=
        If dsn/='DUMMY' Then Do
            Parse VAR line 'DISP=' disp .;Parse VAR disp disp ',' .
            If disp='' Then Do
                "ISREDIT (line)=LINE" i+1
                If rc=0 Then Do
                    Parse VAR line '//' dd .
                    Parse VAR line 'DISP=' disp .;Parse VAR disp disp ',' .
                End
                If disp='' Then disp='SHR'
            End
            #m0=Msg('Off');xx=Listdsi("'"dsn"' NORECALL");x=Msg(#m0)
            If xx<5 | sysreason=9 | sysreason=25 Then Nop;Else Do
                x=o_l(sep1)
                x=c_l(Left(' Dataset not found',69))
                x=o_l(sep1)
            End
            If sysdsorg='VS' Then Do;p1=' ';p2='*';End
        End
        Else Do;disp='SHR';sysdsorg=;End
        If Index(dd,'.')>0 Then Parse VAR dd . '.' dd
        If Wordpos(dd,@dd)>0 Then Do
            If lineo.ii/=sep1 Then x=o_l(sep1)
            x=c_l(Left(' DD('dd') DSN('dsn') duplicated',69))
            x=o_l(sep1)
            x=c_l(Copies('-',69))
            dup_dd=dup_dd dd;Iterate
        End
        @dd=@dd dd
        key=Left('1'Substr(dd,1,8),24,'00'x)
        If vseio Then,
         "EXECIOVS 1 KSDSR" vsdd "(NOOPEN NNOTIFY NLOG NCONT NTRACE) KEY("key")"
        Else rc=12
        If rc=0 Then Do
            Parse PULL line 44 ods +44;ods=Strip(ods)
            ex_dd=ex_dd dd;type='CHANGEFILE'
            If lineo.ii/=sep1 Then x=o_l(sep1)
            x=c_l(Left(" Dataset already defined '"Strip(ods)"'",69))
            If ods=dsn Then Do
                p1='*'
            xx=" with same name so CHANGEFILE parameters commented out."
            x=c_l(Left(xx,69))
            End
            x=o_l(sep1)
        End
        Else type='ADDFILE'
        "DELSTACK"
        If lw='/I' Then Do;p1='*';p2='*';End
        Else If lw='/F' Then Do;p1=;p2='*';End
             Else If lw='/T' Then Do;p1='*';p2=;End
        If sysdsorg='VS' | lw='/F' | (sysdsorg/='VS' & \nofile) Then Do
            deffile=1
            If lw='/F' Then Do
                If lineo.ii/=sep1 Then x=o_l(sep1)
                x=c_l(Left(" FILE definition explicitly requested.",69))
                x=o_l(sep1)
            End
            x=o_l(p1||type' -')
            x=o_l(p1||'  NAME('dd') -')
            x=o_l(p1||'  DSNAME('dsn') -')
            x=o_l(p1||'  DISP('disp') -')
            If sysdsorg='VS' Then,
                x=o_l(p1||'  NOTINFCT(N) -')
            Else,
                x=o_l(p1||'  NOTINFCT(Y) -')
            x=o_l(p1||'  COLDSTART(Y) WARMSTART(A) EMERSTART(A) -')
            If sysdsorg='VS' Then,
                x=o_l(p1||'  OPEN(Y) OPENCOLD(Y) OPENWARM(Y) OPENEMER(Y)')
            Else,
                x=o_l(p1||'  OPEN(N) OPENCOLD(N) OPENWARM(N) OPENEMER(N)')
            x=o_l('*')
        End
        Else deffile=0
        If (sysdsorg/='VS' & lw/='/F') | lw='/T' Then Do
            key='7';odd=
            "EXECIOVS 1 KSDSRG" vsdd "(NOOPEN NNOTIFY NLOG NCONT NTRACE)",
            "KEY("key")"
            If rc=0 Then rc=process_td()
            Do While rc=0
                "EXECIOVS 20 KSDSRN" vsdd "(NOOPEN NNOTIFY NLOG NCONT NTRACE)"
                If rc<8 Then rc=process_td()
            End
            If odd=dd Then Do
                ex_dd=ex_dd dd;type='CHANGEQUEUE'
                If lineo.ii/=sep1 Then x=o_l(sep1)
                x=c_l(Left(" TDQ already defined '"Strip(ods)"'.",69))
                x=o_l(sep1)
            End
            Else Do
                type='ADDQUEUE'
                If xcmdq/='' Then Interpret 'otd='xcmdq'(dd,dsn)'
                Else otd='    '
                If p2='' & Strip(otd)='' Then no_tdq=no_tdq dd
                If lineo.ii/=sep1 Then x=o_l(sep1)
                x=c_l(Left(' TDQ not defined in control file.',69))
                If otd='' Then Do
                    x=' Suggest command "/F' stcname',CEMT I TD(*) DDN('dd')"'
                    x=c_l(x)
                    x=' to return TDQ under SDSF and input over name below.'
                    x=c_l(x)
                    If deffile Then Do
                        x=' Toggle beween FILE and QUEUE definitions as',
                          'required.'
                        x=c_l(x)
                    End
                End
                x=o_l(sep1)
            End
            "DELSTACK"
            x=o_l(p2||type' -')
            x=o_l(p2||'  NAME('otd') -')
            x=o_l(p2||'  DDNAME('dd') -')
            If dsn='DUMMY' Then x=o_l(p2||'  DUMMY(Y)')
            Else Do
                x=o_l(p2||'  DSNAME('dsn') -')
                x=o_l(p2||'  DISP('disp') -')
                x=o_l(p2||'  NOTINDCT(N) -')
                x=o_l(p2||'  COLDSTART(Y) WARMSTART(A) EMERSTART(A) -')
                x=o_l(p2||'  OPEN(Y) OPENCOLD(Y) OPENWARM(Y) OPENEMER(Y)')
            End
            x=o_l('*')
        End
    End
    If vseio Then "EXECIOVS 0 KSDSRN" vsdd "(FINIS NOTIFY NLOG NCONT NTRACE)"
    "ALTLIB DEACTIVATE APPLICATION(EXEC)"
    "DELSTACK"
    "FREE F("vsdd")"
    dd='EI'Time('s')
    ztempf=$ztempf()
    "ALLOC F("dd") DSN('"ztempf"') SHR REU"
    "EXECIO * DISKW "dd" (FINIS STEM LINEO."
    Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd")"
    zedlmsg=
    If dup_dd/='' Then,
        zedlmsg='The following list of duplicate DD''s were found:',
                '"'Strip(dup_dd)'". '
    If ex_dd/='' Then zedlmsg=zedlmsg ||,
        'The following list of DD''s already defined and will be changed:',
        '"'Strip(ex_dd)'". '
    If no_tdq/='' Then zedlmsg=zedlmsg ||,
        'The following list of Non-VSAM DD''s do not have a DCT entry:',
        '"'Strip(no_tdq)'". '
    If zedlmsg/='' Then Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Address ISPEXEC "EDIT DATAID(&DATAID)"
    Address ISPEXEC "LMFREE DATAID(&DATAID)"
    "FREE F("dd")";x=Msg('Off');"DELETE '"ztempf"'"
    Signal ext1
erx1:
msx1:
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
ext1:
    If endit Then Do
        "ISREDIT CANCEL";Return 0
    End
    Address ISREDIT "USER_STATE=(status)"
    Return 0

/*--------------------------------------------------------------------*/
/* Place IEBCOPY JCL around remaining members created by this         */
/* command.                                                           */
/*--------------------------------------------------------------------*/
jobcard_JCL:
    v1='def_ex def_hd def_ac'
    Interpret "Parse Value $alkjc(v1) With" v1
    ii=0
    jcl='DADS btch update'
    x=o_l("//"Substr(userid"DU",1,8)" JOB "def_ac",")
    x=o_l("//*  RESTART=DADM,    <- Uncomment as/if required")
    x=o_l("//   '"jcl"',")
    x=o_l("//   MSGCLASS="def_hd",CLASS="def_ex",")
    x=o_l("//   NOTIFY=&SYSUID,MSGLEVEL=(1,1)")
    x=o_l("//*")
    x=a_l(Copies('-',67))
    x=a_l()
    x=a_l('This member was created using macro "'xcmd'" around DD definitions')
    x=a_l('  in JCL:')
    x=a_l("    "ojcl)
    x=a_l()
    x=a_l('  TDQ name from DDname generator routine "'xcmdq'" used.')
    x=a_l('  For further details, enter "'xcmd' ?" on the command line.')
    x=a_l()
    x=a_l(Copies('-',67))
    Return 0

clone_dads01:
    dads01uq=Strip(dads01,,"'")
    dads01cl=dads01uq || suff
    x=o_l('//*')
    x=o_l('//DELETE1  EXEC PGM=IDCAMS')
    x=o_l('//SYSPRINT DD   SYSOUT=*')
    x=o_l('//SYSIN    DD   *')
    x=o_l('  DELETE 'dads01cl)
    x=o_l('  IF MAXCC<9 THEN SET MAXCC=0')
    x=o_l('/*')
    x=o_l('//*')
    x=o_l('//DELETE2  EXEC PGM=IEFBR14')
    x=o_l('//SYSPRINT DD   SYSOUT=*')
    x=o_l('//SYSIN    DD   DISP=(NEW,CATLG,CATLG),')
    x=o_l('//       DSN='dads01cl',')
    x=o_l('//       SPACE=(TRK,(0,0)),UNIT=SYSALLDA')
    x=o_l('//*')
    x=o_l('//DELETE3  EXEC PGM=IDCAMS')
    x=o_l('//SYSPRINT DD   SYSOUT=*')
    x=o_l('//SYSIN    DD   *')
    x=o_l('  DELETE 'dads01cl)
    x=o_l('  IF MAXCC<9 THEN SET MAXCC=0')
    x=o_l('/*')
    x=o_l('//*')
    x=o_l("//CLONEDSN EXEC PGM=ADRDSSU PARM='TYPRUN=NORUN'")
    x=o_l('//SYSPRINT DD   SYSOUT=*')
    x=o_l('//SYSIN    DD   *')
    x=o_l(' COPY -')
    x=o_l('  DATASET(INC( -')
    x=o_l('           'dads01uq' -')
    x=o_l('              ) -')
    x=o_l('          ) -')
    x=o_l('   RENUNC ( -')
    x=o_l('          ('dads01uq',-')
    x=o_l('           'dads01cl'), -')
    x=o_l('          ), -')
    x=o_l('   CATALOG ALLDATA(*) -')
    x=o_l('   TOL(ENQF)')
    x=o_l('/*')
    x=o_l("//*")
    Return 0

Help_me:
xcmdu=Copies('-',Length(xcmd':'))
n_st = mark(2)                              /* Mark next line         */
/*

    Hello `CNAME..

    `XCMD.:
    `XCMDU.

    This routine is a macro to process the selected JCL and include
    them into DASDPlus control dataset.  Selection is made by either
    the "Cnn" line command or the "CC" block command.

    Generate ADDFILE parameters into DASDPlus control dataset for
    VSAM datasets and ADDQUEUE parameters for NONVSAM.

    If routine EXECIOVS is available, the DADSPlus control file will
    be checked for the existance of the DD and if it exists, the
    ADDFILE will be replaced by the CHANGEFILE control command for
    VSAM dataset ADDQUEUE will be replaced by the CHANGEQUEUE command
    for NONVSAM.

    NONVSAM datasets:
      All the TDQ records in the DADS control file will be scanned
      using EXECIOVS and matched against the DDNAME extracted from
      the JCL. If there is a match the appropriate TDQ name will be
      included in the control parameter list.

      If no matching TDQ is found or EXECIOVS is not available, a
      comment directing the user to issue a modify CICS command to
      diplay the appropriate TDQs under CEMT will be generated.
      If you do not have console access, LIST the CSD or logon to
      CICS to determine the TDQ name through CEMT or CEDA. If it's a
      new TDQ the RTFM.

    Notes:
    - Defult definition for NON-VSAM is TDQ format and parameters will
      be ADD/CHANGE QUEUE with ADDD/CHANGE FILE being inserted as
      comments.  You can then toggle the two as and if required.
      To toggle, uncomment one set and comment the other.  You can
      automate this by passing keyword parameter of FILE.
    - Definition for VSAM will always be FILE.
    - JCL generated will clone the DADS01 dataset to format
        'DN%CICS.stcname.TEMP.`USERID.'
      and changes applied to it. You may delete the cloning process
      and apply direct providing your VSAM options will permit
      update of live file.
    - Additional parameters set to default values are provided for
      fine tuning.
    - Failure to track down TDQ names will generate multiple "NAME( )"
      parameters with only the first being erroneously actioned and
      the rest rejected as duplicates.
    - You may add the following strings as the last word on the JCL
      line (do not flow into column 72),
         /F - Dataset is a known file (may still be NON-VSAM not
              associated with a TDQ) and will force FILEADD/FILECHANGE
              only defines.
         /I - Dataset is to be ignored.
         /T - Dataset is known to be associated with a TDQ and will
              force QUEUEADD/QUEUECHANGE only defines.


    The following positional pameters must be supplied:
       stcname - Name of the started task to be used in the control
                 dataset in format of 'DN%CICS.stcname.DADS01'.

    Optional parameters:
       hlqCICS - CICS hlq to be used in the above dataset. Default is
                 "`defhlqc.".

    Keyword parameters:
       ALL     - Process all lines in JCL.
       DCT     - Force FILE to be commented
       FILE    - Uncomment the FILE definitions for NON-VSAM and
                 comment the QUEUE definitions.
       NOFILE  - By default bot commented FILE and uncommented QUEUE
                 definitions are generated.  If you are sure you only
                 want QUEUE definitions pass this parameter to remove
                 congestion created by the extra comment lines.
       Q=subr  - Provide subroutine name to return a 4 character TDQ
                 name. Default subroutine name is "`XCMDQ." which
                 will use the last 4 bytes of the DD.
                 Input parameters to the subroutine are DD and DSN
                 comma seperated. Called as follows:
                    dct=`XCMDQ.(dd,dsn)
                 This subroutine should be copied into current dataset
                 and it will be ALTLIBd during execution.  Alternatively
                 it must be include in the SYSPROC or SYSEXEC
                 concatenations.
                 For further details on subroutine name, refer to
                 REXX program "TDQX".
       S=suff  - Suffix to append to the cloned name in place of the
                 default "`defsuff.".
                 Pass parameter of "S=" (blank suffix) to apply to
                 original file.
       /END    - End view/edit session after processing macro. Generally
                 used when invoked as a secondary macro.


*/
n_en = mark(-2)                             /* Mark prev 2 line       */
    chgchar='`'
    cname='there'
    Signal On Syntax Name error_off_1
    cname=$Whoami('C')
error_off_1:
    Signal Off Syntax

    today =Date('e')
    Address ISREDIT
    "(caps)=CAPS";"CAPS=OFF"

    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    x=proc_sourcel('N')
    x=nl_h('*'Copies('-',70)'*')

    "CAPS=(caps)";Address

    Exit

proc_sourcel: Arg a1
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            line = ' 'Substr(line,2)
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line = p1 || 'var' || p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    Return 0

nl_h:Parse Arg n#;"ISREDIT LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
o_l:Parse Arg n#;ii=ii+1;lineo.ii=n#;Return 0
a_l:ii=ii+1;lineo.ii='//*'Substr(Arg(1),1,67)'*';Return 0
c_l:ii=ii+1;lineo.ii='*'Left(Arg(1),69)'*';Return 0
nl_h:Parse Arg n#;"ISREDIT LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* Routine to create a temporary file with the format of:             */
/*    userid.$TEMPunique-suffix.TEMP                                  */
/* If "unique-suffix" > 30, you have too many temporary datasets      */
/* hanging around and a ruturn code of "8" will be set.               */
/* If the dataset has bee created, the potential DDNAME and DSNAME    */
/* will be placed in variables "ddname" and "dsname" respectively.    */
/*                                                                    */
/* If a parameter of "NAME" is passed, only the unique "dsname" will  */
/* be returned without creation.                                      */
/*--------------------------------------------------------------------*/
$ztempf:
    ARG parm#
    pref=Sysvar(Syspref);userid=Userid()
    If pref/=userid Then pref=pref'.'userid
    Do i=1 By 1 Until i>30
        #_dsn=pref".$TEMP"Right(i,2,'0')'.TEMP'
        If Sysdsn("'"#_dsn"'")/='OK' Then Leave
    End
    If i>30 Then Return 8
    If Wordpos('NAME',parm#)=0 Then Do
        Address TSO "ALLOC DS('"#_dsn"') TRACKS SPACE(15,15) ",
                    "UNIT(SYSDA) RECFM(F B) LRECL(80) BLKSIZE(6160) ",
                    "DSORG(PS)"
        Address TSO "FREE DS('"#_dsn"')"
    End
    Return #_dsn
process_td:
    erc=rc;s_k=Queued()
    Do s_k
        Parse PULL line 2 otd +4,
                       44 odd +8,
                      101 ods +44
        If dd=odd Then Return 1
    End
    Return erc
