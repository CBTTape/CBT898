
/*--------------------------ooo00 REXX 00ooo--------------------------*/
Parse_parms_Start:Parse_parms_Start_ver='2.02'                /* REXX */
If Arg(1)='?' Then Return Parse_parms_Start_ver
/**********************************************************************/
/* Delete these top lines as required. The "parse_parms" are where    */
/* you insert your parameters.                                        */
/* Code between labels "parse_parms" and "err01" are samples.         */
/*                                                                    */
/* DO NOT CHANGE ANYTHING AFTER THE "ERR01:" LABEL,                   */
/*                                                                    */
/* If this member is updated, you may use macro $PPC to replace the   */
/* parsing porting of code in an existing member (from                */
/* "Parse_parms_ver=" to the end of this member.                      */
/*                                                                    */
/**********************************************************************/
    parm#='trace conW2tains 20-30 C=12'

    zedsmsg=
    If parm#='PARM#'Then parm#=Space(Arg(1) Arg(2) Arg(3) Arg(4) Arg(5))
    x=parse_parms(parm#)

    Say 'format=>'format'<'
    Say 'cmdcol=>'cmdcol'<'
    Say 'zfrange=>'zfrange'<'
    Say 'zlrange=>'zlrange'<'
    Say 'all=>'all'<'
    Exit
/**********************************************************************/
/* These comment lines and above will be removed by $PPC if no        */
/* previous parsing code existed.                                     */
/**********************************************************************/

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:Arg parm#;#tr=Trace('o')
    Parse Upper VAR parm# parm#

    word2=parse_cons('W2',,,'W#')
Say word2
    word2=parse_cons('W2',,,'WORD')
Say word2
    If #tr/='R' Then Do
        #tr=parse_cons('TRACE','R','O')
        If #tr='O' Then #tr=parse_cons('/TR','R','O',3)
    End
    format=parse_cons('/U',0,1,2)
    If format Then format=parse_cons('U',0,1,1)

    cmdcol=0
    cmdcol=parse_varb('C=',cmdcol,'NUM')-2
    xx=parse_varb('X=','?','NUM');If xx='?' Then xx='Invalid parameter'

    all=parse_cons('/A','ALL','NULL')
    If all='' Then all=parse_cons('A','ALL','NULL',1)

    zfrange=parse_cons('-',,'NULL','WORD')
    If zfrange/='' Then Do
        If Datatype(last)/='NUM' Then "ISREDIT (last)=LINENUM .ZLAST"
        Parse VAR zfrange zfrange '-' zlrange
        If zfrange='' Then zfrange=1
        Else If Datatype(zfrange) /= 'NUM' Then Do
                 zedlmsg="Invalid FROM range."
                 Signal err01
             End
        If zlrange='' Then zlrange=last
        Else If Datatype(zlrange) /= 'NUM' Then Do
                 zedlmsg = "Invalid TO range."
                 Signal err01
             End
        If zlrange>last Then zlrange=last
    End

    Parse VAR parm# xx parm#
    If Datatype(xx)='NUM' Then Do
        If xx>last Then xx=last;zfrange=xx;zlrange=xx
    End

    x=Trace(#tr)
    Return 0

$Parms:
err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8
/*--------------------------------------------------------------------*/
/* Ensure there is a blank line before the "Parse_parms_ver=" line    */
/* (following) for use by the '$PPC' macro parser.                    */
/*--------------------------------------------------------------------*/

Parse_parms_ver='2.02';If Arg(1)='?' Then Return Parse_parms_ver
/*--------------------------------------------------------------------*/
/* Parse variable 'parm#' for a constant 'mask'.                      */
/* Parameters:                                                        */
/*   1. Mask to search for. (May be truncated, refer parameter 4).    */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Positive return value. Value to return if mask found. Default */
/*      is 'Y'.                                                       */
/*   3. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   4. Mask qualifier with one of the following values:              */
/*      - Numeric length of the mask prefix.                          */
/*      - Literal 'W' to return the word that contain that mask (note */
/*        the word does not need to start with mask).                 */
/*      - Literal 'W#' to return the word numb that contain that mask */
/*        (note the word does not need to start with mask).           */
/* Notes:                                                             */
/*   1. For parameters 2 and 3:                                       */
/*      - Set to literal 'NULL' to return null values.                */
/*      - Set to '*' to return the mask as the negative/positive      */
/*        condition.  (Suggest using 'NULL' for the other value.)     */
/*                                                                    */
/*   2. Comma delimit to pad out if prior parameters are not          */
/*      supplied.                                                     */
/*   3. Use command "$RU $PARMS" ($Routine Upgrade) to update with    */
/*      the latest infrastructure copy of $PARMS. Use command         */
/*      "$RU $PARMS ?" to display latest infrastructure version.      */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=    ;If negr='NULL' Then negr=
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (Substr(maskl,1,1)='W') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do
        parm#=Delword(parm#,y#,1);If maskl='W#' Then posr=y#;Return posr
    End
    If maskl='W#' Then Return 0;Else Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' for a variable 'mask'.                        */
/* Parameters:                                                        */
/*   1. Mask to search for prefixing the word.                        */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   3. Literal 'NUM' to check for numerics and return negative       */
/*      result if not numeric.                                        */
/* Notes:                                                             */
/*   1. For parameters 2:                                             */
/*      - If the prefix is found, the returned value is the full      */
/*        word less the prefix.                                       */
/*      - NULLs is a valid returned value.                            */
/*      - pass a unique negative result substitution to ensure mask   */
/*        missing (eg.  '?????').                                     */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
Parse_parms_End:
$Parms_End:
