        /* ---------------------  rexx procedure  -------------------- *
         * Name:      PRMCK (ParmLib Check) - Alias (PC)               *
         *                                                             *
         * Function:  Parmlib Member Validation                        *
         *            Support for PROGxx member statements             *
         *               - LNKLST                                      *
         *               - APF                                         *
         *               - LPA                                         *
         *               - SYSLIB                                      *
         *            Support for LNKLSTxx and LPALSTxx members        *
         *                                                             *
         *  Syntaxc PRMCK cat sysres (debug                            *
         *                                                             *
         *  valid options are:                                         *
         *        ?   - will prompt for catalog and sysres             *
         *        cat - is a name that will be used in the master      *
         *              catalog lookup (find *custom* below) and       *
         *              if not found will be used as the master        *
         *              catalog name (enter without quotes).           *
         *        sysres is the volser of the system ipl volume        *
         *              to be checked when a volser of ****** is       *
         *              coded.                                         *
         *        (DEBUG - will turn on tracing                        *
         *                                                             *
         *  System symbolics are supported in PROGxx for the volser    *
         *  at this time.  Future support will be there for them in    *
         *  the dataset name and elsewhere.                            *
         *                                                             *
         *  The member validation is a rough validation which verifies *
         *  that the keywords used are valid.  Not necessarily that the*
         *  right keywords are used together.  Dataset names are also  *
         *  validated, including existence in the catalog and on the   *
         *  volume.  Multiple occurances of a keyword are not checked  *
         *  nor are inappropriate uses of keywords (e.g. delete and add*
         *  in the same statement).  However this process has been used*
         *  and has caught the majority of the errors that we make.    *
         *                                                             *
         * Syntax:    %PRMCK                                           *
         *                                                             *
         * Author:    Lionel B. Dyck                                   *
         *            Kaiser Permanente                                *
         *            Walnut Creek, CA 94598                           *
         *            (925) 926-5332                                   *
         *            Internet: lionel.b.dyck@kp.org                   *
         *                                                             *
         * History:                                                    *
         *            09/20/01 - minor fixes from Mathew Goldstein     *
         *            02/21/01 - minor corrections                     *
         *            09/11/00 - fix after check                       *
         *            09/05/00 - fix from  Herman  R. Stocker (HRS)    *
         *            11/19/99 - fixed dup msg if ext and sec > 0      *
         *            11/08/99 - fixed &SYSR1                          *
         *            11/04/99 - fixed SYSLIB checking                 *
         *            11/03/99 - find missing parenthesis              *
         *            10/20/99 - add support for vol of *mcat* (apf)   *
         *            10/19/99 - make lookup table more generic        *
         *            10/19/99 - if not on vol - find where cataloged  *
         *            10/18/99 - add lookup table and other options    *
         *            09/30/99 - additional cleanup                    *
         *            09/28/99 - extent and symbolic support           *
         *                     - changed name to PRMCK                 *
         *            09/27/99 - add lnklstxx and lpalstxx support     *
         *            09/26/99 - creation                              *
         *                                                             *
         * ----------------------------------------------------------- *
         * Copyright (c) 1999-2001 by Lionel B. Dyck                   *
         * ----------------------------------------------------------- */
         Address ISREDIT
         "MACRO (parm) NOPROCESS"
         "Reset"
         panel='@PRMCKP';panelp='@PRMCKPP'

         "(savecaps) = CAPS"
         if savecaps = "ON" then
            "CAPS = OFF"

          "(member) = MEMBER"
          Select
            When left(member,6) = "LNKLST" then nop
            When left(member,6) = "LPALST" then nop
            When left(member,4) = "PROG" then nop
            Otherwise do
              zedsmsg = ""
              zedlmsg = "Member" member "is not a supported member type",
                        "by this system parmlib validation process."
              Address ISPExec "Setmsg msg(isrz001)"
              "CAPS =" savecaps
              exit 4
              end
          end

          parse value "" with null dsname volser sms first ,
                              cont lnklpaxx_dsname ,
                              master_cat sysres paren
          errors   = 0
          warnings = 0

        /* ----------------------------------------------------- *
         * Process the parm                                      *
         * ----------------------------------------------------- */
          parm = translate(parm)
          parse value parm with cat res "(" debug
          if debug = "DEBUG" then trace "?i"
          if cat = "?" then do
            cat = null
            Address ISPExec
            "Addpop column(11) row(2)"
            "Display Panel(&panel)"
            "Rempop"
             Address ISREdit
            end
          if res <> null then
             sysres = res

        /* ----------------------------------------------------- *
         * *custom*                                              *
         *  Master catalog 'lookup' table.                       *
         * ----------------------------------------------------- */
          Select
           /* -------------------------- *
            * When Cat = xSYS (Ncal)     *
            * -------------------------- */
            When right(cat,3) = "SYS" then
                 if length(cat) = 4 then
                    master_cat = "MASTCAT.VPAGE1"left(cat,1)
           /* -------------------------- *
            * Hawaii Kaiser              *
            * -------------------------- */
            When cat = "P20H" then
                 master_cat = "ICF.KPHI.MSTRCAT"
           /* -------------------------- *
            * xx0x (Scal kaiser)         *
            * -------------------------- */
            When substr(cat,3,1) = "0" then
                 if length(cat) = 4 then
                     master_cat = "ICF."cat".MSTRCAT"
           /* -------------------------- *
            * Default: use as mastercat  *
            * -------------------------- */
            Otherwise
                 master_cat = cat
            end

        /* ----------------------------------------------------- *
         * Get sysres volser                                     *
         * ----------------------------------------------------- */
         if sysres = null then
            sysres = mvsvar('symdef','sysr1')

        /* ----------------------------------------------------- *
         * Get master catalog name                               *
         * ----------------------------------------------------- */
         if master_cat = null then do
            call outtrap "cat."
            Address TSO,
            "Listc ent('sys1.linklib')"
            call outtrap "off"
            master_cat = word(cat.2,3)
            end

        /* ----------------------------------------------------- *
         * Get master catalog volser                             *
         * ----------------------------------------------------- */
         call outtrap "cat."
         Address TSO,
         "Listc ent('"master_cat"') volser"
         call outtrap "off"
         last = cat.0
         parse value cat.last with "VOLSER------------" master_vol .

        /* ----------------------------------------------------- *
         * Process all card images in the edit dataset(member)   *
         * ----------------------------------------------------- */
         "(last) = linenum .zl"
         last = last + 0

         do card = 1 to last
             "(line)  = line" card
             new_card = 0
             line = left(strip(line),72)
             if length(line) > 0 then call test_card
             end
          if dsname <> null then
             if dsname <> lnklpaxx_dsname then do
                card = card - 1
                call test_dsname
                end
          zedsmsg = null
          if errors = 0 then errors = "No"
          zedlmsg = "Status:" errors "errors were encountered. "
          if warnings = 0 then warnings = "No"
          zedlmsg = zedlmsg "With "warnings ,
                    "warnings encountered."
          Address ISPExec,
             "Setmsg msg(isrz001)"
         /* Changed 09-06-00, HRS.                           */
          if first <> null then do
             if first <= 1 then "locate" 1
                 else "locate" first-1
             end

          "CAPS =" savecaps
          Exit 0

        /* ----------------------------------------------------- *
         * Test for various control statements                   *
         * ----------------------------------------------------- */
         Test_Card:
         val = 0
         do word = 1 to words(line)
            call test_word word(line,word)
            if val = 1 then call invalid_keyword
            if new_card = 1 then leave
            val = 0
            end
        /* ----------------------------------------------------- *
         * Now test for missing paren's                          */
        data = strip(line)
        lp = 0 ; rp = 0
        do c = 1 to length(data)
           if substr(data,c,1) = "(" then
              lp = lp + 1
           if substr(data,c,1) = ")" then
              rp = rp + 1
           end
         if lp <> rp then
            call missing_paren
         return

        /* ----------------------------------------------------- *
         * Test specific keyword                                 *
         * ----------------------------------------------------- */
         Test_Word:
         arg keyword
         Select
           When left(keyword,2) = "/*" then new_card = 1
           When left(member,4) = "PROG" then call Test_Prog
           When left(member,6) = "LNKLST" then do
                type = "LNKLST"
                call Test_LNKLPAxx
                end
           When left(member,6) = "LPALST" then do
                type = "LPA"
                call Test_LNKLPAxx
                end
           otherwise val = 1
           end
         return

        /* ----------------------------------------------------- *
         * Process ongoing process message                       *
         * ----------------------------------------------------- */
         Disp_Process:
         Address ISPEXec
         "Control Display Lock"
         "Addpop column(11) row(2)"
         "Display Panel(&panelp)"
         "Rempop"
         Address ISREdit
         return

        /* ----------------------------------------------------- *
         * Test LNKLSTxx and LPALSTxx members                    *
         * ----------------------------------------------------- */
         Test_LnkLpaxx:
         mcat_test = 1
         cardk     = card
         new_card  = 1
         if cont = 0 then call Cont_After_End
         if right(keyword,1) = "," then cont = 1
                                   else cont = 0
         if pos("(",keyword) > 0 then
            parse value keyword with dsname "(" volser ")" .
         else do
            parse value keyword with dsname "," .
            volser = null
            end
         lnklpaxx_dsname = dsname
         dispmsg = dsname
         call Disp_Process
         call test_dsname
         return


        /* ----------------------------------------------------- *
         * Test PROGxx member of SYS1.PARMLIB                    *
         * ----------------------------------------------------- */
         Test_Prog:
         Select
           When keyword = "EXIT" then do
                type    = "EXIT"
                cardk   = card
                end
           When keyword = "APF" then do
                type    = "APF"
                mcat_test = 0
                if dsname <> null then do
                   card = card - 1
                   call test_dsname
                   card = card + 1
                   end
                parse value "" with dsname volser sms
                cardk   = card
                end
           When keyword = "LNKLST" then do
                type    = "LNKLST"
                mcat_test = 1
                if dsname <> null then do
                   card = card - 1
                   call test_dsname
                   card = card + 1
                   end
                parse value "" with dsname volser
                cardk   = card
                end
           When keyword = "SYSLIB" then do
                type    = "SYSLIB"
                mcat_test = 1
                if dsname <> null then do
                   card = card - 1
                   call test_dsname
                   card = card + 1
                   end
                parse value "" with dsname
                cardk   = card
                end
           When keyword = "LPA" then do
                type    = "LPA"
                mcat_test = 1
                if dsname <> null then do
                   card = card - 1
                   call test_dsname
                   card = card + 1
                   end
                parse value "" with dsname volser
                cardk   = card
                end
           otherwise do
                call Disp_Process
                Select
                when type = "APF" then call test_apf
                when type = "EXIT" then call test_exit
                when type = "LNKLST" then call test_lnklst
                when type = "LPA" then call test_lpa
                when type = "SYSLIB" then call test_syslib
                otherwise val = 1
                end
                end
           end
         return

        /* ----------------------------------------------------- *
         * Test APF keywords (Progxx)                            *
         * ----------------------------------------------------- */
         Test_APF:
         Select
           When keyword = "ADD" then nop
           When keyword = "DELETE" then nop
           When keyword = "SMS" then sms = "SMS"
           When left(keyword,7) = "DSNAME(" then do
                parse value keyword with "DSNAME(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                end
           When left(keyword,4) = "DSN(" then do
                parse value keyword with "DSN(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                end
           When left(keyword,4) = "VOL(" then
                parse value keyword with "VOL(" volser ")"
           When left(keyword,7) = "VOLUME(" then
                parse value keyword with "VOLUME(" volser ")"
           When left(keyword,7) = "VOLSER(" then
                parse value keyword with "VOLSER(" volser ")"
           When left(keyword,7) = "FORMAT(" then do
                parse value keyword with "FORMAT(" format ")"
                if wordpos(format,"DYNAMIC STATIC") = 0 then val = 1
                end
           otherwise val = 1
           end
           call fix_volser
           return

        /* ----------------------------------------------------- *
         * Test EXIT keywords (Progxx)                           *
         * ----------------------------------------------------- */
         Test_Exit:
         Select
           When keyword = "ADD"      then nop
           When keyword = "DELETE"   then nop
           When keyword = "ATTRIB"   then nop
           When keyword = "UNDEFINE" then nop
           When keyword = "MODIFY"   then nop
           When keyword = "FIRST"    then nop
           When keyword = "LAST"     then nop
           When left(keyword,9) = "EXITNAME(" then nop
           When left(keyword,7) = "KEEPRC(" then nop
           When left(keyword,8) = "JOBNAME(" then nop
           When left(keyword,8) = "MODNAME(" then do
                parse value keyword with "MODNAME(" modname ")"
                dispmsg = "Modname" modname
                call Disp_Process
                end
           When left(keyword,9) = "EXITNAME(" then do
                parse value keyword with "EXITNAME(" exitname ")"
                dispmsg = "Exitname" exitname
                call Disp_Process
                end
           When left(keyword,7) = "DSNAME(" then do
                parse value keyword with "DSNAME(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                call test_dsname
                end
           When left(keyword,6) = "STATE(" then do
                parse value keyword with "STATE(" state ")"
                if wordpos(state,"ACTIVE INACTIVE") = 0 then val = 1
                end
           When left(keyword,6) = "FORCE(" then do
                parse value keyword with "FORCE(" force ")"
                if wordpos(force,"YES NO") = 0 then val = 1
                end
           otherwise val = 1
           end
           return

        /* ----------------------------------------------------- *
         * Test LNKLST keywords (progxx)                         *
         * ----------------------------------------------------- */
         Test_LNKLST:
         Select
           When keyword = "ACTIVATE"   then nop
           When keyword = "ADD"        then nop
           When keyword = "ATBOTTOM"   then nop
           When keyword = "ATTOP"      then nop
           When keyword = "DEFINE"     then nop
           When keyword = "DELETE"     then nop
           When keyword = "NOCHECK"    then nop
           When keyword = "UNALLOCATE" then nop
           When keyword = "UNDEFINE"   then nop
           When keyword = "UPDATE"     then nop
           When keyword = "SMS" then sms = "SMS"
           When left(keyword,6) = "AFTER(" then do
                parse value keyword with "AFTER(" aftdsn ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                end
           When left(keyword,4) = "JOB(" then nop
           When left(keyword,5) = "ASID(" then nop
           When left(keyword,9) = "COPYFROM(" then nop
           When left(keyword,4) = "DSN(" then do
                parse value keyword with "DSN(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                end
           When left(keyword,7) = "DSNAME(" then do
                parse value keyword with "DSNAME(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                end
           When left(keyword,5) = "NAME(" then
                parse value keyword with "NAME(" name ")"
           When left(keyword,7) = "VOL(" then
                parse value keyword with "VOL(" volser ")"
           When left(keyword,7) = "VOLSER(" then
                parse value keyword with "VOLSER(" volser ")"
           When left(keyword,7) = "VOLUME(" then
                parse value keyword with "VOLUME(" volser ")"
           otherwise val = 1
           end
           call fix_volser
           return

        /* ----------------------------------------------------- *
         * Test LPA keywords    (progxx)                         *
         * ----------------------------------------------------- */
         Test_LPA:
         Select
           When keyword = "ADD"        then nop
           When keyword = "CURRENT"    then nop
           When keyword = "DELETE"     then nop
           When keyword = "FIXED"      then nop
           When keyword = "OLDEST"     then nop
           When keyword = "PAGEABLE"   then nop
           When keyword = "PAGEPROTPAGE" then nop
           When left(keyword,7) = "CSALIM(" then nop
           When left(keyword,5) = "MASK(" then nop
           When left(keyword,8) = "MODNAME(" then nop
           When left(keyword,6) = "FORCE(" then do
                parse value keyword with "FORCE(" force ")"
                if force <> "YES" then val = 1
                end
           When left(keyword,7) = "DSNAME(" then do
                parse value keyword with "DSNAME(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                if dsname = "LNKLST" then dsname = null
                end
           When left(keyword,4) = "DSN(" then do
                parse value keyword with "DSNAME(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                if dsname = "LNKLST" then dsname = null
                end
           When left(keyword,7) = "VOLSER(" then
                parse value keyword with "VOLSER(" volser ")"
           otherwise val = 1
           end
           call fix_volser
           return

        /* ----------------------------------------------------- *
         * Test SYSLIB keywords (progxx)                         *
         * ----------------------------------------------------- */
         Test_SYSLIB:
         Select
           When left(keyword,7) = "LPALIB(" then do
                parse value keyword with "LPALIB(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                call test_dsname
                dsname = null
                end
           When left(keyword,7) = "MIGLIB(" then do
                parse value keyword with "MIGLIB(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                call test_dsname
                dsname = null
                end
           When left(keyword,7) = "CSSLIB(" then do
                parse value keyword with "CSSLIB(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                call test_dsname
                dsname = null
                end
           When left(keyword,8) = "LINKLIB(" then do
                parse value keyword with "LINKLIB(" dsname ")"
                if right(keyword,1) <> ")" then
                   if word(line,word+1) = ")" then word = word + 1
                dispmsg = dsname
                call Disp_Process
                call test_dsname
                dsname = null
                end
           otherwise val = 1
           end
           return

        /* ----------------------------------------------------- *
         * Test validity of the dataset name                     *
         * ----------------------------------------------------- */
         Test_Dsname:
         lmvol = null
         do forever
            if pos("&",dsname) > 0 then call fix_symdef
                                   else leave
            end
         Select
         When sms = "SMS" then call test_sms
         When volser = null then
              call test_catalog
         When volser <> null then do
              if volser = "******" then volser = sysres
              call fix_volser
              lmvol = "Vol("volser")"
              call test_volume
              end
         end
         return

        /* ----------------------------------------------------- *
         * Fixup dsname found with system symbolics              *
         * ----------------------------------------------------- */
         Fix_Symdef:
           parse value dsname with . '&' symbol '.' .
           if pos("&",symbol) > 0 then
              parse value dsname with symbol '&' .
           p1 = pos("&"symbol,dsname)
           p1l = length(symbol)
           newdsnl = left(dsname,p1-1)
           p1r = p1l + p1
           newdsnr = right(dsname,length(dsname)-p1r)
           if left(newdsnr,2) = ".." then
              newdsnr = substr(newdsnr,2)
           newdsn = newdsnl""mvsvar('symdef',symbol)""newdsnr
           dsname = newdsn
         return

        /* ----------------------------------------------------- *
         * Test SMS Status of dataset                            *
         * ----------------------------------------------------- */
         Test_SMS:
         call listdsi "'"dsname"' norecall smsinfo"
         if (sysreason+0) = 9 then call Migrate_Msg
         else do
            if sysstorclass = null then call Not_SMS
            if sysvolume    = null then call Not_Catalog
            end
         return

        /* ----------------------------------------------------- *
         * Test Catalog status of datasets                       *
         * ----------------------------------------------------- */
         Test_Catalog:
         call outtrap "cat."
         Address TSO "Listc ent('"dsname"') vol"
         cat_rc = rc
         call outtrap "off"
         x = cat.0
         volser = substr(cat.x,26,6)
         if cat_rc > 0 then do
            call Not_Catalog
            return
            end
         if Mcat_Test = 1 then do
            call outtrap "c."
            Address TSO "Listc ent('"dsname"') cat('"master_cat"')"
            c_rc = rc
            call outtrap "off"
            if c_rc > 0 then call Not_Master_Cat
            end
         if volser = "******" then volser = sysres
         call fix_volser
         lmvol = "Vol("volser")"
         volser = sysres
         call test_volume
         return

        /* ----------------------------------------------------- *
         * Test dataset on volume                                *
         * ----------------------------------------------------- */
         Test_Volume:
         sysvolume = null
         call listdsi "'"dsname"'" lmvol
         if sysreason > 0 then do
            call listdsi "'"dsname"'"
            if sysvolume <> null then
               found_vol = sysvolume
            else found_vol = null
            call Not_OnVolume
            end
         else do
              if wordpos(type,"LNKLST") = 1 then do
                 if sysextents > 1 then call mult_extents
                 else
                 if sysseconds > 0 then call mult_extents
                 end
              if volser <> null then do
                 call listdsi "'"dsname"' smsinfo"
                 if sysmgmtclass <> null then call not_defined_sms
                 end
              end
         return

        /* ----------------------------------------------------- *
         * fixup volser                                          *
         * ----------------------------------------------------- */
         Fix_Volser:
           if volser = "*MCAT*" then
              volser = master_vol
           if left(volser,1) = "&" then do
              volser = right(volser,length(volser)-1)
              volser = mvsvar('symdef',volser)
              if right(volser,1) = "." then
                 volser = left(volser,length(volser)-1)
              end
         return

        /* ----------------------------------------------------- *
         * Set messages                                          *
         * ----------------------------------------------------- */
         Set_First:
          if first = null then first = cardk
          return
         Missing_Paren:
          "line_after" card "= msgline 'Warning: Missing parenthesis",
                            "on the previous statement.'"
           errors = errors + 1
           call set_first
           return
         Cont_After_End:
          "line_after" card "= msgline 'Error: Invalid Continuation '"
           errors = errors + 1
           call set_first
           return
         Migrate_Msg:
          "line_after" card "= msgline 'Warning: Dataset Migrated",
             "unable to determine SMS Status'"
           errors = errors + 1
           call set_first
           return
         Not_Catalog:
          "line_after" card "= msgline 'Error:" dsname "Not Cataloged'"
           errors = errors + 1
           call set_first
           return
         Not_Master_Cat:
          "line_after" card "= msgline 'Error:" dsname ,
             "Not Cataloged in the Master Catalog'"
           errors = errors + 1
           call set_first
           return
         Not_OnVolume:
          if found_vol <> null then
          "line_after" card "= msgline '       was found on:" found_vol "'"
          "line_after" card "= msgline 'Error:" dsname "Not on" volser"'"
           errors = errors + 1
           found_vol = null
           call set_first
           return
         Not_SMS:
          "line_after" card "= msgline 'Warning:" dsname,
                            "Not SMS Managed'"
           warnings = warnings + 1
           call set_first
           return
         Not_Defined_SMS:
          "line_after" card "= msgline '         volume:" volser "'"
          "line_after" card "= msgline 'Warning:" dsname,
                            "SMS Managed but defined to'"
           warnings = warnings + 1
           call set_first
           return
         Mult_Extents:
          "line_after" card "= msgline '        ",
           "in" sysextents "extents'"
          "line_after" card "= msgline 'Warning:" dsname ,
           "with a secondary allocation of" sysseconds "'"
           warnings = warnings + 1
           call set_first
           return
         Invalid_Keyword:
          "line_after" card "= msgline 'Error: Above",
            "record has a syntax error in keyword:",
           keyword "'"
           errors = errors + 1
           return
