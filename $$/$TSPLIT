/*------------------------------ REXX --------------------------------*/
/* $TSPLIT:                                                           */
/* -------                                                            */
/* Performs a text split as per parameters.                           */
/* Generally used to break up an indefinite text length into 79 byte  */
/* legible lines without character truncation.                        */
/*                                                                    */
/* Invoke with parameter of "?" or refer to bottom for text.          */
/*                                                                    */
/*                                                                    */
/*--------------------------------------------------------------------*/
    "ISREDIT MACRO (itxt)"
    If rc=0 Then im_a_macro=1
    Else         im_a_macro=0
    If itxt='?' Then Signal help_me

Parse Arg itxt,tl,mg,otype,lb,sp,pad,trace

    If itxt='?' Then Signal help_me
    If trace /= '' Then Trace r
    If Datatype(tl) /= 'NUM' Then tl=79
    If Datatype(mg) /= 'NUM' Then mg=0
    Select
        When (otype='Q') Then otype='Q'
        When Substr(otype,1,2) ='NB' Then Do
            Parse VAR otype '(' ln ')'
            If Datatype(ln) = 'CHAR' Then ln=1
            otype='N';nt='LINE_BEFORE'
        End
        When Substr(otype,1,2) ='NA' Then Do
            Parse VAR otype '(' ln ')'
            If Datatype(ln) = 'CHAR' Then ln=0
            otype='N';nt='LINE_AFTER'
        End
        Otherwise otype='S'
    End
    If Substr(lb,2) /= '' Then bl='Y'
    If sp='Y' Then itxt=Space(itxt)
    Do While itxt/=''
        txt=$wordat(itxt,tl-mg,'L')
        If txt='' Then Do
            txt=Substr(itxt,1,tl-mg)
            itxt=Substr(itxt,tl-mg+1)
        End
        itxt=$wordat(itxt,tl-mg,'T')
        If lb/='' Then Do
            If Index(txt,lb)>0 Then Do
                Interpret "Parse VAR txt txt '"lb"' x"
                itxt=x itxt
            End
        End
        x=q_c(txt);If bl='Y' Then x=q_c()
    End
    Return 0

q_c: Parse Arg x_x
    linex = pad || Substr(' ',1,mg)Substr(x_x,1,tl) || pad
    Select
        When (otype='S') Then Say linex
        When (otype='Q') Then Queue linex
        Otherwise Do
            "ISREDIT" nt ln "= NOTELINE (linex)"
            If rc>4 Then Do
                otype='S'
                Say linex
            End
        End
    End
    Return 0

help_me:

n_st = mark(2)                              /* Mark next line         */
/*

`  Hello &CNAME..

   $TSPLIT:
   -------
   Performs a text split as per parameters.
   Generally used to break up an indefinite text length into 79 byte
   legible lines without character truncation.

   Invoke with parameter of "?" or refer to bottom for text.


   Parameters (positional):
     1. Source string.
     2. Text (line) length. Default is 79.
     3. Leading margin. Default is 0.
     4. Output type. Valid values are, (default is 'S'):
           NB(nn) - Noteline before line nn. Default is 1.
           NA(nn) - Noteline after line nn. Default is 0. Note that
                    test will be in reverse line order.
           Q      - Queue line. Caller will have to handle/prepare the
                    stack.
           S      - Say. Caller may wish to trap output using the
                    "OUTTRAP" function.
        You may conver notelines to data if/as required. Noteline
        assumes you called this routine from an EDIT Macro. If the
        first input gives bad RC no further processing is attempted.
        NB default is 1 while NA is 0. Notelines will revert to Say
        statements in the event of a NOTELINE error.
     5. Line break indicator. Any character to indicate premature
        line break. If you wish a blank line (or more) after the
        break add 1 or more break indicators. No default.
     6. Space indicator. Set to 'Y' to reduce imbedded spaces to 1
        byte for formatting large white space text.
     7. Pad character(s). Character(s) to use at the start (before the
        margin - parm #3) and at the end (after legth of text - parm
        #2).
     8. Trace. Any non blank value will turn trace on. Default is off.

   Routines require:
     REXX:
       $WHOAMI  o Routine to return users name for tutorial only
                  (optional).
       $WORDAT  - Routine to split text on a word at a particular
                  column. Refer to $WORDAT for parameters use or enter
                  $WORDAT on the command line.

   Eg:
     xx=$tsplit(text,70,9,NB(),,'Y',)
     This will remove unnecessary spaces, start in column 10 and end
     in column 70 and insert as notelines before line 1.

*/
n_en = mark(-2)                             /* Mark prev 2 line       */

    chgchar = '`'
    syntaxact = "cname = 'there'"
    retlab = error_off_1
    Signal on Syntax Name syntaxerr
    cname=$Whoami('C')
error_off_1:
    Call Off Error

    today =Date('e')
    If im_a_macro Then Do;"ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF";End
    x = nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,1) = chgchar Then Do Forever
            line = ' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        x = nl_h('*'Substr(line,1,70)'*')
    End
    x = nl_h('*'Copies('-',70)'*')
    If im_a_macro Then "ISREDIT CAPS = (caps)"

    Exit

nl_h:Parse Arg n#
    If im_a_macro Then "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)"
    Else Say n#;Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Interpret syntaxact;Signal Value retlab
