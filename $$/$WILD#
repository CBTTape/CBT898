/*--- Demo - REXX --------------\|/------------- Delete --------------*/
first=mark(1)
list1=,
         'AKOS.$$',
         'AKOS.$LOAD',
         'AKOS.$TOAD',
         'AKOS.$HOAD',
         ''
list2=,
         'AKOS.ALEX.SPFLOG1.LIST',
         'AKOS.CBT465.FILE103.PDS',
         'AKOS.CEXEC',
         'AKOS.CLIST',
         'AKOS.DB2.UTILS',
         'AKOS.HG2000.V52.REXX',
         ''
list3=,
         'AKOS.ISPPLIB',
         'AKOS.ISPPLIB.PDS',
         'AKOS.ISPPLIB.TUTORIAL',
         'AKOS.ISPSLIB',
         'AKOS.ISPTLIB',
         'akos.isptlib',
         ''
list4=,
         'AKOS.JEH.EXEC',
         'AKOS.JEH.ISPPLIB',
         'AKOS.JEH.ISPSLIB',
         'AKOS.LOADLIB',
         'AKOS.MXI.LOAD',
         'AKOS.MXI.LOAD',
         'AKOS.MXI.PANELS',
         'AKOS.MXI.TABLES',
         'AKOS.PFKEY',
         'AKOS.QS.REXX',
         'AKOS.REXX',
         'ALEX',
         'ALEX.HFS',
         'ALEX.ISPF.ISPPROF',
         ''
mask = 'AKOS.%%LO*.FRED'
mask = 'AKOS.%%%%*.F*E%%'
mask = 'AK**.%%%%*.F*E%%'
mask = 'AKOS.$LOAD'
mask = 'AK*.$%OAD'
mask = 'AKOS.*$*'
mask = 'AK%%.*E*'
mask = 'AK%%.*E**'
mask = 'AKOS.ISP%LIB.*'

Say 'Mask->'mask

    Say '*------------ Called as function ------------------------*'
    list=list1 list2 list3 list4;xx=$wild(mask,list)
    x=proc_list()
    Say '*------------ Called as function (ASIS) -----------------*'
    list=list3;xx=$wild(mask,list,'ASIS')
    x=proc_list()
    Say '*------------ Called as in-stream sub-routine -----------*'
    list=list3;xx=De_mask(mask);xx=
    Do while list/=''
        Parse VAR list yy list;xx=xx $wild_match(yy)
    End
    list=list3;x=proc_list()
    Say '*------------ Called on in-stream text as function ------*'
    mask='*list%=*'
    Say 'Mask->'mask
    Do i=first To mark(-1)
        line=SOurceline(i)
        If $wild(mask,line,1)='OK' Then,
            Say 'Hit'Right(i,3)'->' Substr(line,1,60)
    End
    Exit

proc_list:
    Do while list/=''
        Parse VAR list dsn list;Parse VAR xx rc xx;Say Left(dsn,44) rc
    End
    Return 0
Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff

/*--- Demo ---------------------/|\------------- Delete --------------*/
/* Copy following into a member callex "$wild"...                     */
/*                              \|/                                   */

/*--------------------------ooo00 REXX 00ooo--------------------------*/
$Wild:$wild_ver='1.02'
/*
    $WILD:

    Function to check each word in a list against a mask. The list
    can be:
      - List of dataset names
      - List of member names
      - String of text/code etc.

    Parameters:
    1. mask   - Dataset mask wildcarded by interspacings of '*' for
                any string mask or '%' for any single character mask.
                Note: Mask is not validated but parsed into matching
                      components based on the locations of '%' and
                      '*'.
    2. list   - List of dataset names. Should be unquoted and space
                seperated, however, any quotes (no prefix added) and
                comma seperators will be removed.  If no list is
                provided 'NO-DATA' is returned.  The returned data
                will be an entry for each dataset with one of the
                following values:
                  NO-MATCH
                  OK
    3. 1 | ASIS
              - Numeric "1" to indicate that the list is 1 record
                containing embeded blanks (eg. text or code) rather
                than space seperated entities.
                If using this feature you must perform upper case
                translation if required before invoking the function.
                            - or -
              - Any (other than 1) non blank character (eg. 'ASIS')
                To prevent upper case translation to both the mask
                and list.

    Examples:

    1.Check a list of datasets against a mask:-
        list='dataset1 dataset2 .... datasetn'
        mask='hlq%.ISP%LIST.*.TEMP*'
        match=$wild(mask,list)
        Do WHile match/=''
            Parse VAR list dsn list;Parse VAR match rcm match
            Say Left(dsn,44) rcm
        End

    2.Check line(s) against a tring mask:-
        mask='*STR%NG% #%%% *'
        Do i=first to last
            "(line)=LINE" i;lineu=Tranlate(line)
            If $wild(mask,lineu,1)='OK' Then Say 'line' i 'matched'
        End

    Gotcha(s):
    1. Each time the function is called, the mask is parsed. If you
       are "execution cycle" constrained and your need is to check
       for many single 'texts' at a time using complex masks, copy
       "$WILD" into your routine and invoke the 'De_Mask' option once
       and then the '$Wild_Match' for each dataset, eg. (assuming
       this resides snugly at to end of your REXX),
          x=De_Mask(mask)
          Do While dsn_list/=''
              Parse VAR dsn_list dsn dsn_list
              rcm=$wild_match(dsn)
              ....
          End
    2. Needs acces to routine '$CSTRING'.
    3. '*' and '**' are treated the same. A single '*' will cross
       qualifier boundaries (dots) like '**'.

                               *****
  --------------------------------------------------------------------*/
     Parse Arg mask,dsn_list,asis
     If asis='' Then Do;mask=Translate(mask);dsn_list=Translate(dsn_list);End
     If dsn_list='' Then Do
         Parse VAR mask mask ',' dsn_list
         If dsn_list='' Then Parse VAR mask mask dsn_list
         dsn_list=Translate(dsn_list,' ',',')
     End
     x=De_Mask(mask);If dsn_list='' Then Return 'NO-DATA'
     If asis=1 Then Return $wild_match(dsn_list)
     hit_list=
     Do While dsn_list/=''
         Parse VAR dsn_list dsn dsn_list;dsn=Strip(dsn,,"'")
         hit_list=hit_list $wild_match(dsn)
     End
     Return Space(hit_list)

/*--------------------------------------------------------------------*/
/* Break the mask up into each of its 'components' for later use.     */
/*--------------------------------------------------------------------*/
De_Mask: Parse Arg mask
    pmask=$cstring(mask,'.*','*',1,'*');optr=1;j=0
    Do Forever
        nptr=Verify(pmask,'*%','M',optr);If nptr=0 Then Leave
        j=j+1
        If optr/=nptr Then,
            Interpret "Parse VAR pmask" optr "mv.j +"nptr-optr" mc.j +1 rest"
        Else Do
            Interpret "Parse VAR pmask" optr ". +"nptr-optr" mc.j +1 rest"
            mv.j=
        End
        optr=nptr+1
        If mv.j||mc.j='.*' Then j=j-1
    End
    mv.0=j
    Return pmask

$wild_match: Parse Arg line
        optr=1;match=1;prevc='%'
        If mv.0=0 Then Do
            Interpret "Parse VAR line p1 +"Length(pmask)
            If pmask/=p1 Then Return 'NO-MATCH'
            Else Return 'OK'
            Iterate
        End
        Do j=1 To mv.0
            If mv.j/='' Then Do
                ll=Length(mv.j)
                If prevc='%' Then Do
                    Interpret "Parse VAR line" optr "p1 +"ll
                    If mv.j/=p1 Then Do;match=0;Leave;End
                    optr=optr+ll
                End
                Else Do
                    nptr=Index(line,mv.j,optr)
                    If nptr=0 Then Do;match=0;Leave;End
                    optr=nptr+ll
                End
            End
            prevc=mc.j;If prevc='%' Then optr=optr+1
        End
        If \match Then Return 'NO-MATCH'
        If rest/='' Then Do
            If prevc='%' Then Do
                Interpret "Parse VAR line" optr "p1 +"ll
                If rest/=p1 Then Return 'NO-MATCH'
            End
            Else Do
                nptr=Index(line,rest,optr)
                If nptr=0 Then Return 'NO-MATCH'
            End
        End
        Return 'OK'

$Wild_End:
