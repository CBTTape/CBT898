/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* ABENDS: Analyse CICS SDSF held output for abends.                  */
/*                                                                    */
/* Macro to summarise a combination of CICS 'MSGUSR' logs for dump    */
/* analysis.                                                          */
/*                                                                    */
/* For help, re-invoke with '?' parameter.                            */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1;Else ima_macro=0
    Parse UPPER VAR parm# parm1 parm2 parm3

/*  "CONTROL ERRORS CANCEL"                                           */

    If parm1='?' Then Signal Help_me

    jesmsglg='$HASP373'

    "ISREDIT (status)=USER_STATE"

    If parm1/='' Then Do
        st=
        If parm1='XD' Then Do
            st=35;en=
            parm1='program/offset'
        End
        Else Do
            xdtable=,
                    'HH    2 3',
                    'HHM   2 5',
                    'HHMM  2 6',
                    'HHMMS 2 8',
                    ''
            If Index(xdtable,parm1)>0 Then Do
                "ISREDIT (line)=LINE 1"
                Parse VAR line v1 .
                If Index(v1,'.')=0 Then,
                    xdtable=,
                            'HH    10 11',
                            'HHM   10 13',
                            'HHMM  10 14',
                            'HHMMS 10 16',
                            ''
                matrix=Substr(xdtable,Index(xdtable,parm1))
                Parse VAR matrix . st en .
            End
        End
        If st/='' Then Do
            "ISREDIT RESET"
            "ISREDIT xd" st en
            gc009="Duplicates excluded on '"parm1"' basis."
            "SETMSG MSG(GC009)"
            Signal ext1
        End
    End

    "ISREDIT CURSOR=1 0"
    "ISREDIT F '&JESMSGLG' FIRST"
    If rc = 0 Then joblog = 'Y'
    If joblog /= 'Y' & parm1 = 'JL' Then joblog = 'Y'
    If joblog = 'Y' Then Do
        "ISREDIT CURSOR = 1 0"
        "ISREDIT F '//' 1"
        If rc = 0 Then "ISREDIT DEL ALL NX .ZCSR .ZLAST"
    End
    "ISREDIT X ALL"
    If joblog /= 'Y' Then "ISREDIT F +DFHIC0801 ALL"
    "ISREDIT F +DFHSM0102 ALL"
    "ISREDIT F +DFHDU0201 ALL"
    "ISREDIT F DFHAC2206 ALL"
    "ISREDIT F DFHAC2016 ALL"
"ISREDIT F DFHZC3433 ALL"
"ISREDIT F DFHZC4923 ALL"
"ISREDIT F DFHAC2047 ALL"
    If rc = 0 Then "ISREDIT F 'is not available' ALL"
    "ISREDIT F ABEND ALL"
    "ISREDIT DEL ALL X"
    "ISREDIT USER_STATE = (status)"

    If parm1 /= '/F' Then Do
        If joblog /= 'Y' Then Do
            gc009 = "Abends summary ready to be 'EXP'd... Use",
                    "parameter of '/F' to analyse."
            "SETMSG MSG(GC009)"
        End
        Else Do
          If xvi = 'Y' Then Do
            "ISREDIT xv 11 31 null"
            "ISREDIT xv 35 57 null"
/*          "ISREDIT xv 34 56 null"                                   */
          End
            gc009 = "Abends summary truncated to fit in screen."
            "SETMSG MSG(GC009)"
        End
        Signal ext1
    End

    "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 To last
        "ISREDIT (line) = LINE &I"
        Parse VAR line msgid .
        Select
            When (msgid = 'DFHZC3433') Then Do
                prog = ''
                Parse VAR line . . d1 t1 r term tran code 92 ':' sc .
                "ISREDIT (line) = LINE" i+1
                Select
                    When (Index(line,'DFHZC4923') > 0) Then,
                        line = Substr(line,Index(line,'DFHZC4923'))
                    When (Index(line,'DFHAC2047') > 0) Then Do
                        line = '/' Substr(line,Index(line,'DFHAC2047'),36),
                               '/ Secv /'
                    End
                    Otherwise Nop
                End
                Parse VAR line . . . t2 r2 . rt .
                linx = d1 t1 Substr(r,1,8),
                       Substr(r2,1,8),
                       Substr(tran,1,4),
                       Substr(code,1,4),
                       Substr(term,1,4),
                       Substr(prog,1,8),
                       Substr(Strip(sc),1,10),
                       Substr(rt,1,4)
            End
            When (msgid = 'DFHAC2236') Then Do
                Parse VAR line . d1 t1 r . tran . code .,
                      79 prog 'term' term .
                If Index(line,'DFHAC2262') > 0 Then Do
                    i = i +1
                    "ISREDIT (line) = LINE &I"
                    Parse VAR line . . . . . . '(' . . sc ')' . . . r2 .
                End
                Else Do
                    r2 = ''
                    sc = ''
                End
                linx = d1 t1 Substr(r,1,8),
                       Substr(r2,1,8),
                       Substr(tran,1,4),
                       Substr(code,1,4),
                       Substr(term,1,4),
                       Substr(prog,1,8),
                       Strip(sc)
            End
            When (msgid = 'DFHIR3783') Then Do
                Parse VAR line . d1 t1 r . tran . term .
                i = i +1
                "ISREDIT (lineb) = LINE &I"
                pr = ''
                Select
                    When (Index(line,'DFHAC2206') > 0) Then,
                        Parse VAR lineb . r2 . . . . . . code .
                    When (Index(line,'DFHAC2016') > 0) Then,
                        Parse VAR lineb . r2 . . . pr '.' .
                    Otherwise NOP
                End
                linx = d1 t1 Substr(r,1,8),
                       Substr(r2,1,8),
                       Substr(tran,1,4),
                       Substr(code,1,4),
                       Substr(term,1,4),
                       Substr('  ',1,8),
                       pr
            End
            Otherwise Do
             Iterate
                Parse VAR line t1 r . tran . . . . code .
                linx = d1 t1 Substr(' ',1,8),
                       Substr(r,1,8),
                       Substr(tran,1,4),
                       Substr(code,1,4),
                       Substr('  ',1,4)
            End

        End
/*      "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (linx)"               */
        "ISREDIT LINE_AFTER  .ZLAST  = (linx)"
    End

    "ISREDIT CURSOR =" last 0
    "ISREDIT DEL ALL NX .ZFIRST .ZCSR"
    "ISREDIT SORT 1 27 A 37 40 A 47 50 A"

    linx = '---------- -------- -------- -------- ---- ---- ---- --------',
           '---------- ----'
    "ISREDIT LINE_BEFORE .ZFIRST  = (linx)"
    linx = 'Date       Time     Region   MRO      Tran Code Term Program ',
           'Sense code RTrn'
    "ISREDIT LINE_BEFORE .ZFIRST  = (linx)"

ext1:
    "USER_STATE = (status)"

    Exit

Help_me:
    x_msg=Msg('Off')
    Call build_msg
    Call output_msg
    x=Msg(x_msg)
    Return 0

build_msg:
n_st=mark(2)                                /* Mark next line         */
/*

    Hello &CNAME..


    Abends analyser (CICS joblog under SDSF).

    This macro should only be used on either the JESMSGLG or MSGUSR
    DDNAME under SDSF (and if you don't know how to seperate them
    you wouldn't be able to spell your name let alone analyse dumps).

    JESMSGLG:
    ~~~~~~~~~
    1. Under SDSF, 'SE' the JESMSGLG DDNAME.
    2. Hit it with this macro to extract only the appropriate mesage
       lines.
    3. The macro will identify this DD by the eye catcher $HASP373.
       If this eye catcher is missing (for whatever reason) modify
       this macro by changing "jesmsglg = '$HASP373'" to an
       appropriate value. If this eye cather is not found, the below
       format will not be performed.
    4. Edit the superfluous text to remove unnecessary comments to
       permit full viewing length in one screen.
       The region-id is kept to permit merging of extracts from MRO
       regions.

    Aditional parameters to this feature:
      JL     - Force Job Log if JESMSGLG eyecatcher not present.
      XD     - Exclude duplicates (applies to offset and module name).
      HHMMSS - A substring of the above mask where duplicates are
               excluded on a time basis thereby giving an indication
               of the number of abends for that time mask.
               HHMMS - to the tenth second
               HHMM  - to the minute
               HHM   - to the tenth minute
               HH    - to the hour
               H     - invalid (couldn't be bothered syntax checking)

    MSGUSR:
    ~~~~~~~
    1. Under SDSF, 'SE' the MSGUSER DDNAME.
    2. Hit it with this macro to extract only the appropriate mesage
       lines.  (May use parameter of "F". Refer note below.)
    3. Export it to an appropriate PDS(member).
    4. Repeat steps 1-3 for all other regions within the MRO but MOD
       them to he original PDS(member).
    5. Edit the output PDS(member) and hit it with this macro using
       parameter "/F" and analyse the results.

    Aditional parameters to this feature:
      HHMMSS - Same as described above except that sort is on
               different columns.

    Notes - THis is a destructive macro and suggest the PDS(member)
            be viewed or remember to CANcel out of the edit session
            or you will need to repeat steps 1-5 above.
          - If you do not wish to analyse on an MRO level use
            parameter of "/F" on step 2 and then bypass steps 3 to 5
            below.  With "MRO" analysis you can merge dump summaries
            to get an overall picture of what happens in each region
            and how it affects other regions.


*/
n_en=mark(-2)                               /* Mark prev 2 line       */
    Return 0

output_msg:
    chgchar='&';cname='there'
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_1: Signal Off Syntax

    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
