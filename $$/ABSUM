/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
    Trace o;msg=Msg();x=Msg('Off')
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Macro to process the output from an AbendAid/FX report and         */
/* summarise regions/abends.                                          */
/*                                                                    */
/* Parameters:                                                        */
/*    REGIONs(reg1,reg2,...,regn) : Regions to report (default is ALL)*/
/*    R()                           (Truncating region name will      */
/*                                  automatically wildcard.)          */
/*    ABENDs(abc1,abc2,...,abcn)  : Abend codes (default is ALL)      */
/*    A()                                                             */
/*    TAG(abc1,abc2,...,abcn)     : Tag/highlight specified abends.   */
/*    TA()                          TAG(ASRA) is the default if all   */
/*                                  abends selected.                  */
/*    JCL               or J      : Generate JCL in accordance with   */
/*                                  the LPAR this feature is executed */
/*                                  on.                               */
/*    ABBREV            or AB     : Abbreviated list (no program      */
/*                                  details).                         */
/*                                                                    */
/*    NE                          : No Notifications. Suppresses      */
/*                                  sending emails.                   */
/*                                                                    */
/*  Date range can be entered in the following formats (remember      */
/*  that JCL gen'd by this routine may blow the PARM= string length   */
/*  of PGM=IKJEFT01):                                                 */
/*    DATE(YYYYMMDD)    or D()    : For that day only.                */
/*        * or *                                                      */
/*    -dd                         : From dd days in the past to today */
/*        * or *                                                      */
/*    FDATE(YYYYMMDD)   or F()    : From date                         */
/*    TDATE(YYYYMMDD)   or T()    : to date (defaults to today        */
/*                                  Dates default to ALL. Suggest -7  */
/*                                  for weekly reports run before     */
/*                                  midnight -8 for after midnight.   */
/*  Last parameter remaining will be the dataset name unless you re   */
/*  viewing/editing the actual Abend?FX summary extract.              */
/*                                                                    */
/*  "SET" JCL commands will be generated so they can be directly fed  */
/*  into the IKJEFT01,PARM='...' JCL statement and the JCL can be     */
/*  set up from the first screen. Large parameter lists will exceed   */
/*  the parameter size and you will need to scroll down the JCL to    */
/*  STEP4 and commemnt out the PARM= statement and uncomment the      */
/*  appropriate SYSTSIN statements (move the closing bracket to last  */
/*  uncommented line.                                                 */
/*                                                                    */
/*  If this routine is to be continually used to generate the JCL     */
/*  look for the following eyecatchers and keep the EDMATRIX up to    */
/*  date or point it to an external dataset/member.                   */
/*  As for SYSTCPD keep it's matrix up to date. It cannot be          */
/*  exported but alternatively hard coded for each LPAR.              */
/*    "//EDMATRIX - Eyecatcher"                                       */
/*    "//SYSTCPD  - Eyecatcher"                                       */
/*                                                                    */
/* eg's.,                                                             */
/*    ABSUM dumpds REGION(CICS1P01) ABENDS(ASRA,APCT) -7              */
/*    ABSUM dumpds REGION(CICSIP01) ABENDS(ASRA) DATE(20001020)       */
/*    ABSUM dumpds REGION(ALL) ABENDS() TAG(ASRA,AICA)                */
/*                                                                    */
/*    Default "dumpds" is built as follows:                           */
/*         Syspref.userid.ABENDS.ON.sysid                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* Mebers required to package this function.                          */
/*    ABSUM    - This driver                                          */
/*    BR       o To browse the help details.                          */
/*    $DATEMAN - Date manipulation routine.                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    x=Msg(msg)

    Address ISPEXEC
    ARG parm#
    Parse SOURCE . . xcmd .
    If parm# Â¬= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1
    ima_macro = 'Y'
    "ISREDIT (sysproc) = DATASET"           /* REXX where ABSUM found */

byp1:
    cactn = "RETURN"
    cactn = "CANCEL"
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    If parm# = '?' Then Do
        Signal On Syntax Name staxroc
        retsyn = help_me
        X = $BR(xcmd "??")
        Return 0
    End
    If parm# = '??' Then Signal help_me

    If sysproc = 'SYSPROC' Then,
       sysproc = 'TPM.TPM12.KARA.$$'        /* REXX where ABSUM found */
    action = 'VIEW'
    vars   = 'BATCH,SREGN,SABND,FDATE,TDATE,TAG,ABBREV,SUFR,SENDMAIL'
    sender = 'CICSSUPP'                     /* Sender identifier      */
    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))

    zerrhm   = '*'
    zerralrm = 'NO'
    zerrsm   = ''

    If Sysvar(Sysenv) = 'FORE' Then batch = 'N'
    Else                            batch = 'Y'

    If ima_macro = 'Y' Then Signal macro_1
    Call parse_parms
    If b_jcl = 'Y' Then Signal build_jcl

/*--------------------------------------------------------------------*/
/* Play it both ways. Dataset name can be passed as a parameter or    */
/* pre-allocted in JCL.                                               */
/*--------------------------------------------------------------------*/
    If dsname /= '' Then Do
        "ISPEXEC VPUT ("vars") SHARED"
        "ISPEXEC &ACTION DATASET(&DSNAME) MACRO("xcmd")"
    End
    Else Do
        "ISPEXEC LMINIT DATAID(DATAID) DDNAME(STATCOPY)"
        If rc /= 0 Then Do
            zerrlm = "Missing or invalid dataset name passed",
                     "or DD 'STATCOPY' not allocated."
            If batch = 'Y' Then Say zerrlm
            Else "SETMSG MSG(ISRZ002)"
            Exit
        End
        "ISPEXEC VPUT ("vars") SHARED"
        "ISPEXEC &ACTION DATAID(&DATAID) MACRO("xcmd")"
        "ISPEXEC LMFREE DATAID(&DATAID)"
    End

    Return 0


/*--------------------------------------------------------------------*/
/* Eexcute as a macro                                                 */
/*--------------------------------------------------------------------*/
macro_1:
    If parm# /= '' Then Call parse_parms
    Else Do
        "VGET ("vars") SHARED"
        If sregn = '' Then Call parse_parms
    End
    If b_jcl = 'Y' Then Signal build_jcl

/*--------------------------------------------------------------------*/
/* Self preservation                                                  */
/*--------------------------------------------------------------------*/
    "ISREDIT (member) = MEMBER"
    If member = xcmd Then Do
        gc009 = 'Watch it.. You were just about to cream "'xcmd'".',
                'Try again on a proper dataset/member.'
        "SETMSG MSG(GC009)"
        Exit
    End
/*--------------------------------------------------------------------*/

/*--------------------------------------------------------------------*/
/* Blout out parameters:                                              */
/*--------------------------------------------------------------------*/
    Say '*------------------------------------------------------------*'
    Say "*"
    Say "* Processing datasets '"dsname"'."
    Say "* Regions   :" sregn
    Say "* Abends    :" sabnd
    Say "* Tag       :" tag
    Say "* From      :" fdate
    Say "* To        :" tdate
    Say "*"
    Say '*------------------------------------------------------------*'

    If abbrev = 'Y' Then Do
/*--------------------------------------------------------------------*/
/* Sort on ABEND                                                      */
/*--------------------------------------------------------------------*/
        sortstrg = '22'
        bldstrg = 'strng = abnd'
        outstrg = 'outpt = Substr(abnd,1,4)'
        head1   = 'Code Times'
        head2   = '---- -----'
    End
    Else Do
/*--------------------------------------------------------------------*/
/* Sort on Region/Program/Trans/ABEND                                 */
/*--------------------------------------------------------------------*/
        sortstrg = '63 70 a 16 19 a 22 25 a'
        bldstrg = 'strng = regn prog tran abnd'
        outstrg = 'outpt = Substr(regn,1,8) Substr(prog,1,8)',
                  'Substr(tran,1,4) Substr(abnd,1,4)'
        head1   = 'Region   Program  Tran Code   Times'
        head2   = '-------- -------- ---- ----   -----'
    End

    "ISREDIT (status) = USER_STATE"
    "ISREDIT (dsn)    = DATASET"

/*--------------------------------------------------------------------*/
/* Get rid of unnecessary data from report including blank lines      */
/*--------------------------------------------------------------------*/
    "ISREDIT F '---------' 2 FIRST"
    "ISREDIT DEL ALL NX .ZFIRST .ZCSR"
    "ISREDIT C P'.' ' ' ALL"
    "ISREDIT F 'SHARED DIRECTORY ENTRIES' 2"
    "ISREDIT DEL ALL NX .ZCSR .ZLAST"
    "ISREDIT (last) = LINENUM .ZLAST"
    Do While last > 1
        "ISREDIT (line) = LINE" last
        If Strip(line) /= '' Then Leave
        last = last -1
    End
    "ISREDIT CURSOR =" last +1 0
    "ISREDIT DEL ALL NX .ZCSR .ZLAST"
    "ISREDIT X ALL '          ' 27"
    "ISREDIT DEL ALL X"
    "ISREDIT RESET"

    "ISREDIT (last) = LINENUM .ZLAST"

/*--------------------------------------------------------------------*/
/* Set seperator for easier deletion of redundant lines               */
/*--------------------------------------------------------------------*/
    linen = '*'Copies('-',70)'*'
    "ISREDIT LINE_AFTER .ZLASt = (linen)"

/*--------------------------------------------------------------------*/
/* Overlay iterated data. Also expand non-displayed lines             */
/*--------------------------------------------------------------------*/
    Do i=1 To last
        "ISREDIT (line) = LINE" i
        If Substr(line,10,4) /= '' Then Do
            Parse VAR line o1 o2 o3 . . . .,
                  45 o4 +8,
                  55 o5 +6
            Iterate
        End
        If Index(line,'*** ONLY THE') > 0 Then Do
            Call repeat_lines
            Iterate
        End
        Parse VAR line n1 n2 n3 n4 n5
        n5 = Strip(n5,'t')
        linen = Right(o1,13)'  ' ||,
                Substr(o2,1,5) Substr(o3,1,5) ||,
                n1 n2 n3 Right(n4,5),
                Substr(o4,1,9) o5'  'Strip(n5,'l')
        "ISREDIT LINE &I = (linen)"
    End

    "ISREDIT SORT &SORTSTRG"

/*--------------------------------------------------------------------*/
/* Remove redundant (processed) lines                                 */
/*--------------------------------------------------------------------*/
add_them:
    "ISREDIT RESET"
    string = '*** ONLY THE'
    "ISREDIT X '&STRING' ALL"
    "ISREDIT X '*------' 1 ALL"
    "ISREDIT DEL ALL X"
    "ISREDIT RESET"

/*--------------------------------------------------------------------*/
/* If reions/abends selected, remove redundancies                     */
/*--------------------------------------------------------------------*/
    "ISREDIT RESET"
    If sregn /= 'ALL' Then Do
        xxx = sregn
        "ISREDIT X ALL"
        Do Forever
            Parse VAR xxx x_x ',' xxx
            If Substr(x_x,Length(x_x),1) = '*' Then,
                x_x = Substr(x_x,1,Length(x_x)-1)
            "ISREDIT F "x_x" 63 ALL"
            If xxx = '' Then Leave
        End
        "ISREDIT DEL ALL X"
    End
    If sabnd /= '' Then Do
        xxx = sabnd
        "ISREDIT X ALL"
        Do Forever
            Parse VAR xxx x_x ',' xxx
            "ISREDIT F "x_x" 22 ALL"
            If xxx = '' Then Leave
        End
        "ISREDIT DEL ALL X"
    End

/*--------------------------------------------------------------------*/
/* Set seperator for easier deletion of redundant lines               */
/*--------------------------------------------------------------------*/
    linen = '*'Copies('-',70)'*'
    "ISREDIT LINE_AFTER .ZLASt = (linen)"

    "ISREDIT (last) = LINENUM .ZLAST"
/*--------------------------------------------------------------------*/
/* Process data accumulatingdeletion of redundant lines               */
/*--------------------------------------------------------------------*/
    edate = 20001231
    odate = 20000101

    @r = ''                                 /* Last region processed  */
    @s = ''                                 /* Last region/abend proc */
    #rt= 0                                  /* Abend/region sub-total */
    #t = 0                                  /* Abend sub-total        */
    tt = 0                                  /* Running total          */
    If batch = 'Y' Then Do
        Address TSO "NEWSTACK"
        Queue ' '
        Queue 'Report run on' Date('e') 'at' Time('c')'.'
        Queue ' '
        Queue head1
        Queue head2
    End
    Else Do
        "ISREDIT (caps) = CAPS"
        "ISREDIT CAPS = OFF"
        "ISREDIT LINE_AFTER .ZLAST = ' '"
        linen = 'Report run on' Date('e') 'at' Time('c')'.'
        "ISREDIT LINE_AFTER .ZLAST = (linen)"
        "ISREDIT LINE_AFTER .ZLAST = ' '"
        linen = head1
        "ISREDIT LINE_AFTER .ZLAST = (linen)"
        linen = head2
        "ISREDIT LINE_AFTER .ZLAST = (linen)"
    End
    Do i=1 To last -1
        "ISREDIT (line) = LINE" i
        Parse var line ,
            16 tran +4,
            22 abnd +4,
            27 dd mm yy .,
            63 regn +8,
            45 prog +8

        Select
            When (mm = 'JAN') Then mm = '01'
            When (mm = 'FEB') Then mm = '02'
            When (mm = 'MAR') Then mm = '03'
            When (mm = 'APR') Then mm = '04'
            When (mm = 'MAY') Then mm = '05'
            When (mm = 'JUN') Then mm = '06'
            When (mm = 'JUL') Then mm = '07'
            When (mm = 'AUG') Then mm = '08'
            When (mm = 'SEP') Then mm = '09'
            When (mm = 'OCT') Then mm = '10'
            When (mm = 'NOV') Then mm = '11'
            Otherwise              mm = '12'
        End
        datea = yy || mm || dd
        If datea < fdate Then Iterate
        If datea > tdate Then Iterate
        If datea > odate Then odate = datea
        Else If datea < edate Then edate = datea

        Interpret bldstrg
        If strng /= @s Then Do              /* Change on string       */
            If @s /= '' Then Call sub_tot_trans
            Interpret outstrg
            @s = strng
            @a = abnd
            @r = regn
            tt = tt + #t
            #t = 0
        End
        #rt= #rt+1
        #t = #t +1
    End
    tt = tt + #t
    If regn /= sregn then regn = 'End_of_file' /* Fool sub_tot caller */
    Call sub_tot_trans
/*--------------------------------------------------------------------*/
/* Output summary line                                                */
/*--------------------------------------------------------------------*/
    "ISREDIT CAPS = OFF"
    PARSE VAR edate yy +4 mm +2 dd
    edate = dd'/'mm'/'yy
    PARSE VAR odate yy +4 mm +2 dd
    odate = dd'/'mm'/'yy
    linen = 'Total of' tt 'abends ranging from' edate 'to' odate'.'
    "ISREDIT LINE_AFTER .ZLAST = ' '"
    "ISREDIT LINE_AFTER .ZLAST = (linen)"
    If batch = 'Y' Then Do;Queue ' ';Queue linen;Queue ' ';End

/*--------------------------------------------------------------------*/
/* Clean up redundant (processed) lines                               */
/*--------------------------------------------------------------------*/
    "ISREDIT RESET"
    "ISREDIT F '*------' 1 FIRST"
    If rc = 0 Then "ISREDIT DEL ALL .ZFIRST .ZCSR"

get_out:
    "ISREDIT USER_STATE = (status)"
    If batch = 'Y' Then Do
        Address TSO "EXECIO * DISKW ABNDSSUM (FINIS"
        Address TSO "DELSTACK"
        If sendmail = 'Y' Then Call set_email_parm
        "ISREDIT CANCEL"
        "ISREDIT MEND"
    End
    Exit

/*--------------------------------------------------------------------*/
/* Reiterate duplicated entries                                       */
/*--------------------------------------------------------------------*/
repeat_lines:
    Parse VAR line . . . . v1 . . . . v2 .
    Do v2-v1
        "ISREDIT LINE_AFTER .ZLASt = (linen)"
    End
    Return

/*--------------------------------------------------------------------*/
/* Sub-total on abend break                                           */
/*--------------------------------------------------------------------*/
sub_tot_trans:
    If Index(tag,@a) > 0 Then xtra = '<--- *** Attention ***'
    Else xtra = ''
    linen = outpt '-' Right(#t,5) xtra
    "ISREDIT LINE_AFTER .ZLAST = (linen)"
    If batch = 'Y' Then Queue linen
    If @r /= '' Then,           /* Change on region       */
    If @r /= regn & abbrev = 'N' & regn /= sregn Then,
        Call sub_tot_regn

    Return 0

/*--------------------------------------------------------------------*/
/* Sub-total on region break if multi regions and no ABBREV listing   */
/*--------------------------------------------------------------------*/
sub_tot_regn:
    linen = Right('Total of (',29)Right(#rt,6)')'
    "ISREDIT LINE_AFTER .ZLAST = (linen)"
    "ISREDIT LINE_AFTER .ZLAST = ' '"
    If batch = 'Y' Then Do
        Queue linen
        Queue ' '
    End
    #rt= 0

    Return 0

/*--------------------------------------------------------------------*/
/* Set up Email parms other than userid                               */
/*--------------------------------------------------------------------*/
set_email_parm:
    Address TSO "EXECIO * DISKR EDMATRIX (STEM linei. FINIS)"
    Address TSO "NEWSTACK"
    Parse VAR sregn regn1 ',' .
    Do i=1 To linei.0
        If Substr(linei.i,1,9) = Substr('ALL',1,8)':' Then NOP
        Else Do
            If Substr(linei.i,1,9) /= Substr(regn1,1,8)':' Then Iterate
        End
        xxx = Substr(linei.i,10)
        Parse VAR xxx xxx .
        Do Forever
            Parse VAR xxx who ',' xxx
            Call set_email_detl
            If xxx = '' Then Leave
        End
    End
    Address TSO "EXECIO * DISKW EMAILDAT (FINIS"
    Address TSO "DELSTACK"

    Return 0

set_email_detl:
    Signal On Syntax Name staxroc_2;retsyn = got_repday
    repday = $DATEMAN('E-E',odate,edate)
    repday = repday +1
got_repday:Signal Off Syntax

    Queue "%EMAIL "Strip(who)"@ANZ.COM -"
    Queue "  FROM "sender"@"sysid".HOST.AU.ANZ -"
    Queue "  MSGDD DD1 -"
    Queue "  FILE '"dsn"."sufr"' -"
    Queue "  SUBJECT '"sregn" Abends("sabnd") over last" repday,
          "days on "sysid".'"
          "days on "sysid".'"

    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    b_jcl = parse_cons('JCL',,,1)
    abbrev = parse_cons('ABBREV',,,2)
    sendmail = parse_cons('NE','N','Y')

    sregn = parse_varb('R(')
    If sregn = 'N' Then sregn = parse_varb('REGION(')
    If sregn = 'N' Then sregn = parse_varb('REGIONS(')
    If sregn /= 'N' Then Parse VAR sregn sregn ')' .
    Else sregn = 'ALL'
    Parse VAR sregn sufr .
    If Substr(sufr,Length(sufr),1) = '*' Then,
        sufr = Substr(sufr,1,Length(sufr)-1)

    sabnd = parse_varb('A(')
    If sabnd = 'N' Then sabnd = parse_varb('ABEND(')
    If sabnd = 'N' Then sabnd = parse_varb('ABENDS(')
    If sabnd /= 'N' Then Do
        Parse VAR sabnd sabnd ')' .
        If sabnd /= '' Then #tag = ''
    End
    Else Do
        sabnd = ''
        #tag = 'ASRA'                       /* Default tag for ALL abs*/
    End

    tag = parse_varb('TA(')
    If tag = 'N' Then tag = parse_varb('TAG(')
    If tag /= 'N' Then Parse VAR tag tag ')' .
    Else tag = #tag

/*--------------------------------------------------------------------*/
/* End date of '-dd' is only acceptable if $DATEMAN() routine avail   */
/* and data verfication made.                                         */
/*--------------------------------------------------------------------*/
    min_date = '19000101'
    max_date = '30001231'
    fdate = parse_varb('F(')
    If fdate = 'N' Then fdate = parse_varb('FDATE(')
    If fdate /= 'N' Then Do
        Parse VAR fdate fdate ')' .
        If fdate /= '' Then Do
            tdate = parse_varb('T(')
            If tdate = 'N' Then tdate = parse_varb('TDATE(')
            If tdate /= 'N' Then Do
                Parse VAR tdate tdate ')' .
            End
            Else tdate = max_date
            Signal got_fdate
        End
    End
    fdate = parse_varb('D(')
    If fdate = 'N' Then fdate = parse_varb('DATE(')
    If fdate /= 'N' Then Do
        Parse VAR fdate fdate ')' .
        If fdate /= '' Then Do
            tdate = fdate
            Signal got_fdate
        End
    End
    fdate = parse_varb('-',min_date)
    If fdate /= min_date & Datatype(fdate) = 'NUM' Then Do
        Signal On Syntax Name staxroc_1
        retsyn = got_fdate
        y = $DATEMAN('E-N',,,'-'fdate)
        Parse VAR y dd '/' mm '/' yy
        fdate = yy || mm || dd
    End
    Else fdate = min_date
    tdate = max_date

got_fdate:Signal On Syntax Name staxroc_0;retsyn = got_dates
    date = Substr(fdate,7,2)'/'||,
           Substr(fdate,5,2)'/'||,
           Substr(fdate,1,4)
    If Word($DATEMAN('VER',date),1) = 'Error' Then fdate = min_date
    date = Substr(tdate,7,2)'/'||,
           Substr(tdate,5,2)'/'||,
           Substr(tdate,1,4)
    If Word($DATEMAN('VER',date),1) = 'Error' Then tdate = max_date

got_dates:Signal Off Syntax
    If ima_macro /= 'Y' & b_jcl /= 'Y' Then Do
        dsname = ''
        Do Forever
            Parse VAR parm# dsn parm#
            If dsn = '' Then Leave
            If Substr(dsn,1,1) /= "'" Then dsn = "'"dsn"'"
            If Sysdsn(dsn) = 'OK' Then Do
                dsname = dsn
                Leave
            End
        End
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Trap sYNTAX errors (designed for $DATEMAN() failure                */
/*--------------------------------------------------------------------*/
staxroc_0:Interpret Signal retsyn
/*--------------------------------------------------------------------*/
/* Set default for variable FDATE                                     */
/*--------------------------------------------------------------------*/
staxroc_1:fdate = '19990101';Signal staxroc_0
/*--------------------------------------------------------------------*/
/* Set default for variable REPDAY                                    */
/*--------------------------------------------------------------------*/
staxroc_2:repday = 7;Signal staxroc_0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Build JCL according to LPAR on.                                    */
/*--------------------------------------------------------------------*/
build_jcl:
userid = Userid()
abendsn= Sysvar(Syspref)'.'userid'.ABENDS.ON.'sysid
sep    = '//*'Copies('-',67)'*'
sepp   = '//*'Copies('=',67)'*'
If Verify(Substr(sysid,4,1),'CHI') = 0 Then prod = ''
Else                                        prod = 'P'

Address TSO "NEWSTACK"
Queue "//"userid"ABS JOB ,'ABEND-REPORTING',MSGCLASS=V,CLASS=E,"
Queue '//*  RESTART=STEP2,      <--- Uncomment for selective report or'
Queue '//*                           comment for full extract.'
Queue "//*  RESTART=STEP4,      <--- Uncomment to re E-Mail. Don't"
Queue '//*                           forget to instream recipient'
Queue '//   NOTIFY=&SYSUID'
Queue '//*'
Queue '//*MAIN SYSTEM='sysid
Queue sep
Queue '//*  Original source and updates to JCL available from:               *'
x ='//*    Execute command "TSO 'xcmd' JCL" and save for later use....'
Queue Substr(x,1,70)'*'
Queue sep
If Length('//VARS SET R=R('sregn')') < 28 Then,
Queue Substr('//VARS SET R=R('sregn')',1,28) 'Selective regions'
Else,
       Queue '//VARS SET R=R('sregn') Selective regions'
Queue '//  SET A=                   All ABENDS'
Queue '//* SET A=ABENDS(ASRA,AICA)  Selective abends'
Queue "//  SET TA=                  Don't tag/highlight any abends."
Queue '//* SET TA=TAG(ASRA,AEYQ)    Tag these two, default is TAG(ASRA) if'
Queue '//*                            REGION(ALL) used'
Queue '//  SET D=-8                 Last 7 days (run in morning, +1)'
Queue '//* SET D=                   Uncomment for ALL dates'
got_fdate:Signal On Syntax Name staxroc_0;retsyn = got_yesterday
date = 'YYYYMMDD'
date = $DATEMAN('E-N',Date('e'),,-1)
Parse VAR date dd '/' mm '/' yy
date = yy || mm || dd
got_yesterday:Signal Off Syntax
Queue '//* SET D=D('date')        Specific date (yesterday)'
Queue '//* SET F=F('fdate')        F(YYYYMMDD)'
Queue '//* SET T=T('tdate')        T(YYYYMMDD)'
Queue '//* SET AB=ABBREV            Uncomment for ABBREV listing'
If sendmail = 'Y' Then,
  Queue '//* SET N=NE                 No notification via Email'
Else,
  Queue '//  SET N=NE                 No notification via Email'
Queue '//*'
Queue Substr('//  SET ABNLREPT='abendsn,1,52)'Abend/FX report'
Queue Substr('//  SET ABNDSSUM=&ABNLREPT..'sufr,1,52)'Region summary out.'
Queue '//*'
Queue Substr('//  SET SYSPROC='sysproc,1,52)'"'xcmd'" location'
Queue sep
Queue '//* Delete if extract rerun report extract                            *'
Queue sep
Queue '//STEP0    EXEC PGM=IEFBR14'
Queue '//ABNLREPT DD DSN=&ABNLREPT,'
Queue '//            DISP=(MOD,DELETE),'
Queue '//            SPACE=(TRK,(0,0),RLSE),UNIT=DISK'
Queue sep
Queue '//* Abend/FX extract                                                  *'
Queue sep
Queue '//STEP1    EXEC PGM=CWFXSDUT,REGION=1024K'
Queue '//STEPLIB  DD DISP=SHR,DSN=SYS1.ANZ.LINKLIB            */ CSS LOADLIB'
Queue '//         DD DISP=SHR,DSN=SYS4.ABAIDFX.LOADLIB        */ FX LOADLIB'
Queue '//FDBDCUST DD DISP=SHR,DSN='prod'CIX.ABAIDFX.CUST           */ CUSTFILE'
Queue '//ABNLREPT DD DSN=&ABNLREPT,'
Queue '//            DISP=(NEW,CATLG),'
Queue '//            DCB=(RECFM=FBM,LRECL=132,BLKSIZE=27984,DSORG=PS),'
Queue '//            SPACE=(TRK,(15,15),RLSE),UNIT=DISK'
Queue '//SYSUDUMP DD SYSOUT=*'
Queue '//VIOSTAT1 DD DUMMY'
Queue '//ABNLPARM DD *'
Queue '   DIR OBJECT=SHRDIR,DIRDSN='prod'CIX.ABAIDFX.SHRDIR'
Queue '/*'
Queue sepp
Queue '//* Delete if rerun                                                   *'
Queue sep
Queue '//STEP2    EXEC PGM=IEFBR14'
Queue '//ABNDSSUM DD DSN=&ABNDSSUM,'
Queue '//            DISP=(MOD,DELETE),'
Queue '//            SPACE=(TRK,(0,0),RLSE),UNIT=DISK'
Queue '//*EMAILDAT DD SPACE=(TRK,(0,0)),UNIT=SYSDA,'
Queue '//*           DSN=&ABNDSSUM..EMAIL,'
Queue '//*           DISP=(MOD,DELETE)'
Queue sep
Queue '//* Proces abend report                                               *'
Queue sep
Queue '//STEP2    EXEC PGM=IKJEFT01,DYNAMNBR=65,'
Queue "//*PARM=('ISPSTART CMD(%"xcmd" &ABNLREPT &R &A &TA &D &AB &F &T &N)'),"
Queue "// PARM=('ISPSTART CMD(%"xcmd" &R &A &TA &D &AB &F &T &N)'),"
Queue '// REGION=4096K'
QUEUE "//SYSPROC  DD DISP=SHR,DSN=&SYSPROC"
Queue sep
Queue '//* ANZ - ISPF environment                                            *'
Queue sep
Queue '//ISPPLIB  DD DISP=SHR,DSN=SYS1.ISPF.PANELS'
Queue '//ISPSLIB  DD DISP=SHR,DSN=SYS1.ISPF.SKELS'
Queue '//ISPMLIB  DD DISP=SHR,DSN=SYS1.ISPF.MSGS'
Queue '//ISPTLIB  DD DISP=SHR,DSN=SYS1.ISPF.TABLES'
Queue '//ISPPROF  DD SPACE=(TRK,(10,,10)),UNIT=SYSDA,DSN=&&ISPPROF,'
Queue '//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)'
Queue '//ISPLOG   DD DUMMY'
Queue '//ISPLIST  DD DUMMY'
Queue '//SYSTSPRT DD SYSOUT=*'
Queue '//ABNDSSUM DD SPACE=(TRK,(15,15),RLSE),UNIT=DISK,'
Queue "//            DSN=&ABNDSSUM,                 Abends summary to be FTP'd"
Queue '//            DISP=(NEW,CATLG),'
Queue '//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS)'
Queue '//*'
Queue '//EMAILDAT DD SPACE=(TRK,(1,1)),UNIT=SYSDA,'
Queue '//            DSN=&&EMAILDAT,                Email distribution file'
Queue '//            DISP=(NEW,PASS),'
Queue '//*           DSN=&ABNDSSUM..EMAIL,'
Queue '//*           DISP=(NEW,CATLG),'
Queue '//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)'
Queue sep
Queue '//* If the parameter length is too long, uncomment the appropriate    *'
Queue "//* lines to execute from here. (Don't forget to comment out the      *"
Queue '//* "PARM=" statement.)                                               *'
Queue sep
Queue '//SYSTSIN  DD *'
Queue Substr('//* ISPSTART CMD(%'xcmd,1,50)'+'
Queue Substr('//*   REGION('sregn')',1,50)'+'
Queue Substr('//*   -8',1,50)'+'
Queue '//*     )'
Queue Substr('//*   'abendsn,1,50)'+'
Queue Substr('//*   ABENDS()',1,50)'+'
Queue Substr('//*   TAG(ASRA)',1,50)'+'
Queue Substr('//*   ABENDS()',1,50)'+'
Queue Substr('//*   DATE('date')',1,50)'+'
Queue Substr('//*   FDATE('fdate')',1,50)'+'
Queue Substr('//*   TDATE('tdate')',1,50)'+'
Queue Substr('//*   ABBREV',1,50)'+'
Queue '//*'
Queue sep
Queue '//* Mailing MATRIX (keep up to date with new mailees)......           *'
Queue '//* "ALL     :" represents all regions.                               *'
Queue "//* Seperate multiple entries with an ','. '*' in column 1 will be    *"
Queue '//* treated as a comment.                                             *'
Queue sep
Queue '//EDMATRIX DD *'
/*--------------------------------------------------------------------*/
/* //EDMATRIX - Eyecatcher                                            */
/* Keep this matrix up to date if you want to use this REXX to        */
/* generate JCL. Amend the Select;End block to reflect updates.       */
/*--------------------------------------------------------------------*/
Queue 'ALL     :KARAA                                              Test'
Queue '*LL     :KARAA,GARTLANA,RODEC,COOPERP,MCKENZD               CICS Sup.'
Queue '*ICSIP01:KARAA                                              CICS Sup.'
/*--------------------------------------------------------------------*/
Queue '/*'
Queue '//*'
Queue sepp
Queue '//* FTP for mailing                                                   *'
Queue sep
Queue '//STEP4    EXEC PGM=IKJEFT1A'
Queue '//SYSEXEC  DD DISP=SHR,DSN=SYS4.ANZ.CLIST'
Queue '//SYSPRINT DD SYSOUT=*'
Queue '//SYSTSPRT DD SYSOUT=*'
Queue '//DD1      DD DUMMY'
Queue '//ABNLREPT DD DSN=&ABNLREPT,'
Queue '//            DISP=(SHR,DELETE),'
Queue '//            SPACE=(TRK,(0)),UNIT=DISK'
Queue sep
/*--------------------------------------------------------------------*/
/* //SYSTCPD  - Eyecatcher                                            */
/* Keep this matrix up to date if you want to use this REXX to        */
/* generate JCL. Amend the Select;End block to reflect updates.       */
/*--------------------------------------------------------------------*/
Queue '//* The SYSTCPD DD needs to change for each system as follows:-       *'
Queue '//*       ANZD - SYS3.TCPIP.PARMLIB(TCPDAT09)                         *'
Queue '//*       ANZU - SYS3.TCPIP.PARMLIB(TCPDAT18)                         *'
Queue '//*       ANZP - SYS3.TCPIP.PARMLIB(TCPDAT04)                         *'
Queue '//*       ANZF - SYS3.TCPIP.PARMLIB(TCPDAT10)                         *'
Queue '//*       ANZH - SYS3.TCPIP.DATA                                      *'
Queue '//*       ANZC - SYS3.TCPIP.DATA                                      *'
Queue '//*       ANZI - SYS3.TCPIP.DATA                                      *'
Queue '//*       ???? - Missing.to.give.jcl.error                            *'
Queue sep
Select
    When (sysid = 'ANZD') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT09)'
    When (sysid = 'ANZU') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT18)'
    When (sysid = 'ANZP') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT04)'
    When (sysid = 'ANZF') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT10)'
    When (sysid = 'ANZH') Then systcpd = 'SYS3.TCPIP.DATA'
    When (sysid = 'ANZC') Then systcpd = 'SYS3.TCPIP.DATA'
    When (sysid = 'ANZI') Then systcpd = 'SYS3.TCPIP.DATA'
    Otherwise systcpd = 'Missing.to.give.jcl.error'
End
Queue '//SYSTCPD  DD DISP=SHR,DSN='systcpd
/*--------------------------------------------------------------------*/
Queue '//*SYSTSIN  DD DISP=SHR,DSN=&ABNDSSUM..EMAIL        Mailing List'
Queue '//SYSTSIN  DD DISP=(OLD,DELETE),DSN=&&EMAILDAT     Mailing List'
Queue '//'
Queue sep
Queue '//* Comment out above 2 lines and change the dots below to re E-Mail  *'
Queue '//* after changing RESTART=STEP4 in jobcard.                          *'
Queue sep
Queue "//SYSTSIN  DD *                                    Manual Mail"
Queue "%EMAIL ....@ANZ.COM -"
Queue "  FROM "sender"@"sysid".HOST.AU.ANZ -"
Queue "  MSGDD DD1 -"
Queue "  FILE '"abendsn"."sufr"' -"
Queue "  SUBJECT 'CICS.... Abends() over last xxx days on "sysid".'"
Queue ''
"VGET ZTEMPF"
Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
Address TSO 'DELSTACK'
"LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
"EDIT DATAID(&DATAID)"
"LMFREE DATAID(&DATAID)"
Address TSO "FREE DD(ZTEMPF)"

Exit

/*--------------------------------------------------------------------*/
/* Help details...                                                    */
/*--------------------------------------------------------------------*/
Help_me:
    Do i=n_st-1 To n_en+1
        Say Center(Strip(Sourceline(i),'t'),79)
    End

    Exit

errproc:Call Off Error;Return Sigl
