/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to format assembler code as follows:                       */
/*   1 - Labels                                                       */
/*  10 - Commands                                                     */
/*  16 - Operands                                                     */
/*  40 - Text                                                         */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Arg parm#
    Address ISPEXEC
    If parm# /= '' Then Signal byp1
    "CONTROL ERRORS RETURN"
    "CONTROL ERRORS CANCEL"
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    hlq = $alkhlq()
    Parse Upper VAR parm#
    If parm# = "HELP" | parm# = "?" | parm# = '/?' Then Signal Help_me

    #cs  = 10                               /* Command starting col   */
    #os  = 16                               /* Operand starting col   */
    #ts  = 40                               /* Text start             */
    "VGET (AFCSCOL AFOSCOL AFTSCOL) PROFILE"
    If afcscol = '' Then Do
        afcscol = #cs
        afoscol = #os
        aftscol = #ts
        "VPUT (AFCSCOL AFOSCOL AFTSCOL) PROFILE"
    End
    cs      = afcscol
    os      = afoscol
    ts      = aftscol
    cont    = 'N'
    all     = ''
    "ISREDIT (last) = LINENUM .ZLAST"

    Call parse_parms

    If trace = 'Y' Then Trace r

    Select
        When all = 'ALL' Then Do
            zfrange = 1
            "ISREDIT (zlrange) = LINENUM .ZLAST"
        End
        When Datatype(zfrange) /= 'NUM' Then Do
            "ISREDIT PROCESS RANGE C"
            "ISREDIT (cmd) = RANGE_CMD"
            If cmd = 'C' Then Do
                "ISREDIT (zfrange) = LINENUM .ZFRANGE"
                "ISREDIT (zlrange) = LINENUM .ZLRANGE"
            End
            Else Do
                If zfrange = '' Then Do
                    "ISREDIT (zfrange) = CURSOR"
                    zlrange = zfrange
                End
            End
        End
        Otherwise NOP
    End

    Do lin#=zfrange To zlrange
      "ISREDIT (LINE) = LINE &LIN#"
      If SUBSTR(line,1,1) = '*' Then Iterate
      If STRIP(line) = 'SPACE 1' Then Iterate
      linec = Substr(line,73)
      line  = Substr(line,1,72)
      If SUBSTR(line,72,1) = ' ' & cont = 'N' Then Do
          If xst ¬= 'A' Then Do
              "ISREDIT (xstat) = XSTATUS &LIN#"
              If xstat ¬= xst Then Iterate
          End
          text = ''
          If SUBSTR(line,1,1) = ' ' Then Do
              If ts ¬= 'I' Then ,
                  PARSE VAR line command operand text
              Else ,
                  PARSE VAR line command operand
              label = ' '
          End
          Else Do
              If ts ¬= 'I' Then ,
                  PARSE VAR line label command operand text
              Else ,
                  PARSE VAR line label command operand
          End
          command = STRIP(command)
          operand = STRIP(operand)
          text    = STRIP(text)
          If SUBSTR(text,1,3) = 'Y. ' | SUBSTR(text,1,3) = 'N. ' Then ,
              text = '   'text
          line    = label
          If LENGTH(line) < cs-2 Then ,
              line = SUBSTR(line,1,cs-2,' ') command
          Else line = line command
          If LENGTH(line) < os-2 Then ,
              line = SUBSTR(line,1,os-2,' ') operand
          Else line = line operand
          If ts ¬= 'I' Then Do
              If LENGTH(line) < ts-2 Then ,
                  line = SUBSTR(line,1,ts-2,' ') text
              Else line = line text
          End
          linex = SUBSTR(line,1,71) linec
          "ISREDIT LINE &LIN# = (linex)"
          If LENGTH(line) > 71 Then Do
              textt = '* Trunc -> '
              textt = textt||LEFT(text,71-LENGTH(textt),' ')
              "ISREDIT (caps) = CAPS"
              "ISREDIT CAPS = OFF"
              "ISREDIT LINE_BEFORE &LIN# = NOTELINE (textt)"
              "ISREDIT CAPS = (caps)"
          End
      End
      Else Do
          If SUBSTR(line,72,1) = ' ' Then cont = 'N'
          Else cont = 'Y'
      End
    End
ext1:
    Exit

err01:
    "SETMSG MSG(GC009)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE',,,2)
    If trace = 'N' Then trace = parse_cons('/T',,,2)

    all = parse_cons('/A','ALL','NULL')
    If all = '' Then all = parse_cons('A','ALL','NULL',1)

    xst = parse_cons('/X','X','A')
    If xst = 'A' Then xst = parse_cons('/NX','NX','A')

/*--------------------------------------------------------------------*/
/* Test for DEF entry screen parameter                                */
/*--------------------------------------------------------------------*/
    xxx = parse_cons('/D',,,2)
    If xxx = 'N' Then xxx = parse_cons('D',,,3)
    If xxx = 'Y' Then Call getdef

/*--------------------------------------------------------------------*/
/* Test for text exclude 'T=' parameter                               */
/*--------------------------------------------------------------------*/
    xxx = parse_varb('T=')
    If xxx /= 'N' Then Do
        ts = xxx
        If ts /= 'I' Then Do
            If Datatype(ts) ¬= 'NUM' Then Do
                gc009 = "Text start parameter is invalid."
                Signal err01
            End
            If ts ¬> os + 2 Then Do
                gc009 = "Text start parameter is invalid."
                Signal err01
            End
            If ts > 70 Then Do
                gc009 = "Text start parameter is invalid."
                Signal err01
            End
        End
    End

/*--------------------------------------------------------------------*/
/* Test for text exclude 'O=' parameter                               */
/*--------------------------------------------------------------------*/
    xxx = parse_varb('O=')
    If xxx /= 'N' Then Do
        os = xxx
        If os /= 'I' Then Do
            If DATATYPE(os) ¬= 'NUM' Then Do
                gc009 = "Operand start parameter is invalid."
                Signal err01
            End
            If os > 70 Then Do
                gc009 = "Operand start parameter is invalid."
                Signal err01
            End
        End
        Else os = ts
        If ts <= 40 Then ts = 'I'
    End

/*--------------------------------------------------------------------*/
/* Test for range partameter supplied                                 */
/*--------------------------------------------------------------------*/
    zfrange = parse_cons('-',,'NULL','WORD')
    If zfrange /= '' Then Do
        Parse VAR zfrange zfrange '-' zlrange
        If zfrange = '' Then zfrange = 1
        If Datatype(zfrange) /= 'NUM' Then Do
            gc009 = "Invalid FROM range."
            Signal err01
        End
        If zlrange = '' Then zlrange = last
        If Datatype(zlrange) /= 'NUM' Then Do
            gc009 = "Invalid TO range."
            Signal err01
        End
        If zlrange > last Then zlrange = last
    End

/*--------------------------------------------------------------------*/
/* Test for repeat parameter                                          */
/*--------------------------------------------------------------------*/
    zfrange = parse_cons('.',,'NULL','WORD')
    If zfrange /= '' Then Do
        Parse VAR zfrange zfrange '.' zlrange
        If zfrange = '' Then zfrange = 1
        If Datatype(zfrange) /= 'NUM' Then Do
            gc009 = "Invalid FROM range."
            Signal err01
        End
        If zlrange = '' Then zlrange = last
        Else Do
            If Datatype(zlrange) /= 'NUM' Then Do
                gc009 = "Invalid TO range."
                Signal err01
            End
            Else zlrange = zlrange + zfrange -1
        End
        If zlrange > last Then zlrange = last
    End

/*--------------------------------------------------------------------*/
/* Test for single line pointer                                       */
/*--------------------------------------------------------------------*/
    Parse VAR parm# x .
    If Datatype(x) = 'NUM' Then Do
        zfrange = x
        zlrange = x
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* process new default column settings                                */
/*--------------------------------------------------------------------*/
getdef:
    lineh = '¢'CENTRE(" Assembler columns ",79,"-")
    dynline = 4
    dyncol  = 23
    message = "Account Number"

defscr1:
    line2  = "{Enter parameters below:"
    line4  = "  {Command start}===>~"RIGHT(cs,2,'0')"}<=",
             "{Must be > 1"
    line5  = "  {Operand start}===>~"RIGHT(os,2,'0')"}<=",
             "{Must be > command col + 2"
    line6  = "  {Text start   }===>~"RIGHT(ts,2,'0')"}<=",
             "{Must be > operand col + 2 and < 71"
    line9  = "{Use}END{PF key to abandon screen."

    "DISPLAY PANEL(DYNAMIC$)"
    IF rc ¬= 0 Then Do
        gc009 = "Default column placement updated."
        Signal err01
    End

    cs = SUBSTR(line4,23,2)
    os = SUBSTR(line5,23,2)
    ts = SUBSTR(line6,23,2)
    If DATATYPE(cs) ¬= 'NUM' Then Do
        dynline = 4
        Signal err11
    End
    If DATATYPE(os) ¬= 'NUM' Then Do
        dynline = 5
        Signal err11
    End
    If DATATYPE(ts) ¬= 'NUM' Then Do
        dynline = 6
        Signal err11
    End
    If cs < 2 Then Do
        dynline = 4
        Signal err12
    End
    If os ¬> cs + 2 Then Do
        dynline = 5
        Signal err12
    End
    If ts ¬> os + 2 Then Do
        dynline = 6
        Signal err12
    End
    If ts > 70 Then Do
        dynline = 6
        Signal err12
    End
    afcscol = cs
    afoscol = os
    aftscol = ts
    "VPUT (AFCSCOL AFOSCOL AFTSCOL) PROFILE"
    gc009 = "Default column placement updated."
    Signal err01

err11:
    linem = "¢Value must be numeric"
    Signal defscr1

err12:
    linem = "¢Invalid value."
    Signal defscr1

/*--------------------------------------------------------------------*/
/* Self generating help facility                                      */
/*--------------------------------------------------------------------*/
Help_me:
    dsn = hlq'.TEMP1'

    mempref   = 'AFH'
    forchar.0 = 1
    chgchar.0 = '`'
    forchar.1 = '~'
    subchar.1 = mempref
    #panel1   = 1                           /* First panel number     */
    #panels   = 2                           /* Number of panels       */


    x   = Msg('Off')
    Address TSO
    "DELETE '"dsn"'"
    dd  = 'IA'Time('s')
    "ALLOC DA('"dsn"') NEW CATALOG CYL SPACE(10,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(2)",
       "RECFM(F B) REU"
    "FREE  DA('"dsn"')"

    Do i=#panel1 To #panels
        member = mempref||i
        Interpret "Call make_mem_"i
        Call build_queue
    End


    Address ISPEXEC
    "LIBDEF ISPPLIB DATASET ID('&DSN') STACK"
    "SELECT PGM(ISPTUTOR) PARM(&MEMPREF.1)"
    "LIBDEF ISPPLIB"

    Address TSO "DELETE '"dsn"'"

    Exit


/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    #i_backup = i
    #j_backup = j
    Do i=n_st To n_en
        If forchar.0 > 0 Then Do
            If Substr(Sourceline(i),1,1) = chgchar.0 Then Do
                line = Substr(Sourceline(i),2)
                DO j=1 To forchar.0
                    line = $cstring(line,forchar.j,subchar.j)
                End
                Queue line
            End
            Else Queue Sourceline(i)
        End
        Else Queue Sourceline(i)
    End
    Queue ''
    i = #i_backup
    j = #j_backup

    "ALLOC F("dd") DA('"dsn"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    "DELSTACK"

    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Change string                                                      */
/*--------------------------------------------------------------------*/
$cstring:
    PArse ARG string,fstrg,tstrg,start,rep
    Numeric Digits 10
    If rep = '*' Then rep = 9999999999
    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 1
    If Datatype(start) /= 'NUM' | Index(start,'.') > 0 Then start = 1
    fl = Length(fstrg)
    tl = Length(tstrg)
    Do While rep > 0
        start = Index(string,fstrg,start)
        If start = 0 Then Leave
        string = Delstr(string,start,fl)
        string = Insert(tstrg,string,start-1,tl)
        rep = rep -1
        start = start + tl
    End
    Return string

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(2)
/*
)ATTR DEFAULT(%+_)
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(\\)
@Tutorial-----\-\ Assembler Format \-\(1/2)Tutorial
%COMMAND ===>_ZCMD                                                             +
%
+
+The purpose of this command is to 'neatly' format assembler output in
+predefined columns.
+You may select lines by using a@Cnnn+or@block CC+line command, cursor placement
+or passing it as a paremeter (refer next screen).
+Any lines with@*+or@.+(for macros) in column 1 will be ignored.  Any continued
+lines with non-blank character in column 72 and their associated continuation
+line(s) will also be ignored.
+
+The dafault columns are as follows:
@    1+- Labels.
@   10+- Commands. Must not be less than 2.
@   16+- Operands. Must be at lest 2 columns greater than the commands column.
@   40+- Text. Must be at lest 2 columns greater than the operands column and
+        less than 71.
+
+\ \(Continued next screen.)\ \
)REINIT
)PROC
` &ZUP   = ~1
` &ZCONT = ~2
)END
*/
    n_en = mark(-2);Return 0

make_mem_2: n_st = mark(2)
/*
)ATTR DEFAULT(%+_)
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(\\)
@Tutorial-----\-\ Assembler Format \-\(2/2)Tutorial
%COMMAND ===>_ZCMD                                                             +
%
+
+Parameters:
@  n  +- Line number.
@  s-e+  Line range, where@s+is the start and@e+is the end line
@  s.r+- Line extent(repetition), where@s+is the start and@r+is the number of
+        lines to repeat.
@  /A +- Process all lines in the member.
@  /C +- Convert line(s) to comment.
@  C=c+- Change command column for the current command.
@  Def+- Change column default setting. This command will negate any line
+        selections.
@  /NX+- Only change lines that are Not eXcluded.
@  O=I+- Ignore operand. Sets up a parameter list of@O=t T=I+.
@  O=o+- Change operand column for the current command.
@  T=I+- Ignore text. Treat all data following the command as the operand,
+        regardless of spaces.
@  T=t+- Change text column for the current command.
@  /U +- Uncomment line(s).
@  /X +- Only change lines that are eXcluded.
+
+\ \(End of instructions.)\ \
)REINIT
)PROC
` &ZUP   = ~0
` &ZCONT = ~0
)END
*/
