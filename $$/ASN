/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* ASN: Address Space Navigator.                                      */
/*                                                                    */
/* Routine to navigate the ASVT and present all the address spaces    */
/* (with the exception of INIT (initiators)) in a selection screen    */
/* before executing SHOWSTOR in cross memory.                         */
/*                                                                    */
/* Members required to package this routine:                          */
/*   REXX:                                                            */
/*     ASN      - This routine                                        */
/*     SHOWSTOR - Routine to control displaying of data (refer to     */
/*                this routine for it's related packaging.            */
/*   Panels:                                                          */
/*     DYNAMICA - Dynamic panel display.                              */
/*     SHOW*    - Refer to SHOWSTOR EXEC for related packaging.       */
/*   LMODs:                                                           */
/*     XMEMSTOR - Data fetch/write routine using cross memory.        */
/*     XMEMASTA - ESTAE routine for program XMEMSTOR.                 */
/*                                                                    */
/*--------------------------------------------------------------------*/
ASN_ver='1.03'
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "ISPEXEC CONTROL ERRORS CANCEL"                                   */

ini1:
    zedsmsg=
    Parse Upper VAR parm# ij parm2 .

    trace='N'

    Call constant_vars
    Call variable_vars

    Numeric Digits 15
    regdsn='SYS2.MVST.PROCLIB($CICSREG)'

    ignore_list='INIT ASCHINT'
    one_hit=                                /* First occurance list   */
    regions=
    Call set_vars_1

    aadrs  = iyellow                        /* Active address colour  */
    cicsc  = iwhite                         /* CICS address colour    */
    ncicsc = iblue                          /* Non-CICS address colour*/
    aadrs  = iyellowr                       /* Active address colour  */
    cicsc  = iyellow                        /* CICS address colour    */
    ncicsc = iblue                          /* Non-CICS address colour*/

    cvt     =  Storage(10,4)
    asvt    =  Storage(d2x(c2d(cvt) + x2d(22c)),4)
    ascbmax =  c2d(Storage(d2x(c2d(asvt) + x2d(204)),4))
    asve@   =  d2x(c2d(asvt) + x2d(210))
    asve    =  Storage(asve@,4)
    xf7     = '7F'X                         /* Active @ mask          */
    j=0
    Trace off
    Do i=1 To ascbmax
        If Bitor(Substr(asve,1,1),xf7)=xf7 Then Do
            jbn=c2x(Storage(d2x(c2d(asve)+x2d(0AC)),4))
            If jbn=0 Then jbn=c2x(Storage(d2x(c2d(asve)+x2d(0B0)),4))
            jbnm=Storage(jbn,8)
            If Wordpos(Strip(jbnm),Ignore_list)>0 | jbn=0 Then Do
                asve@=d2x(x2d(asve@)+(4));asve=Storage(asve@,4)
                Iterate
            End
            If Wordpos(Strip(jbnm),one_hit)>0 Then,
                ignore_list=ignore_list Strip(jbnm)
            j=j+1
            jbnm.j=Strip(jbnm)
            asnx.j=Storage(d2x(c2d(asve) + x2d(024)),2)
            asv.j =c2x(asve)
            asn.j =c2x(Storage(d2x(c2d(asve) + x2d(024)),2))
        End
        asve@=d2x(x2d(asve@)+(4));asve=Storage(asve@,4)
    End
    headline=oyellow || Centre(' Job selection screen ',79,'-')
    col='Jobname  ASID   ';coll=Length(col)
    Subhead2=ogreenr || Copies(col,5)
    Subhead1=oblue   ||  ''
    Do m=1 to j
        sw=0
        Do n=1 to j-1
            o=n+1
            If jbnm.n<jbnm.o Then Iterate
            xx=jbnm.n;jbnm.n=jbnm.o;jbnm.o=xx
            xx=asnx.n;asnx.n=asnx.o;asnx.o=xx
            xx=asn.n;asn.n=asn.o;asn.o=xx
            sw=sw+1
        End
        If sw=0 Then Leave
    End
    Address ISPEXEC

scr1:
    Parse Value '' With zcmd da1
    Trace Off
    Do i=1 To j
        If jbnm.i=ij Then Do
            If dscr1='DSCR1' Then dscr1='N'
            xx=aadrs
        End
        Else Do
            If Wordpos(jbnm.i,regions)>0 Then xx=cicsc;Else xx=ncicsc
        End
        da1=da1||xx||Substr(jbnm.i,1,8)||oblue||c2x(asnx.i)||ogreenr' '
    End
    da1=da1||oblue

    If dscr1='N' Then NOP
    Else Do
        "DISPLAY PANEL(&PANEL) CURSOR(&CSR) CSRPOS(&CSRP)"
        If rc/=0 Then Signal ext1
    End
    If zcmd/='' Then ij=Strip(zcmd)
    dscr1='Y'
    If csr='DA1' Then Do
        i=csrp%coll+1
        Signal ret1
    End
    If ij/='' Then Do i=1 To j
        If ij/=jbnm.i Then Iterate
        Signal ret1
    End
    zedlmsg='Invalid or missing jobname entered.'
    "SETMSG MSG(ISRZ001)"
    Signal scr1

ret1:
    ij=jbnm.i
    asnx=c2x(asnx.i)
    xx=Showstor('XMEM('asnx','Strip(jbnm.i)','parm2')')
    Signal scr1

ext1:
    Exit

/*--------------------------------------------------------------------*/
/* To following are constant variables and should not change.         */
/*--------------------------------------------------------------------*/
constant_vars:
    ztdmark = Centre(' Rsend ',79,'*')
    #colors = 7                             /* Number of colors       */

    reverse = X2C('10')                     /* Reverse mask           */
    uscore  = X2C('20')                     /* Underscore mask        */
    blink   = X2C('30')                     /* Blink Mask. Note - this*/
                                            /* may not work on some   */
                                            /* terminals...           */

    ired    = X2C('01')                     /* Input RED etc...       */
    iblue   = X2C('02')
    iyellow = X2C('03')
    igreen  = X2C('04')
    iturq   = X2C('05')
    ipink   = X2C('06')
    iwhite  = X2C('07')

    ored    = D2C(#colors+C2D(ired))        /* Output RED etc...      */
    oblue   = D2C(#colors+C2D(iblue))
    oyellow = D2C(#colors+C2D(iyellow))
    ogreen  = D2C(#colors+C2D(igreen))
    oturq   = D2C(#colors+C2D(iturq))
    opink   = D2C(#colors+C2D(ipink))
    owhite  = D2C(#colors+C2D(iwhite))

    altered = X2C('AA')                     /* Altered field indicator*/

    Return 0

/*--------------------------------------------------------------------*/
/* To following are variables dependant on the application.           */
/*--------------------------------------------------------------------*/
variable_vars:
    oredr    = Bitor(ored,reverse)
    oyellowb = Bitor(oyellow,blink)
    oyellowu = Bitor(oyellow,uscore)
    oyellowr = Bitor(oyellow,reverse)
    ogreenb  = Bitor(ogreen,blink)
    ogreenu  = Bitor(ogreen,uscore)
    ogreenr  = Bitor(ogreen,reverse)
    iredu    = Bitor(ired,uscore)
    iyellowr = Bitor(iyellow,reverse)
    oblueu   = Bitor(oblue,uscore)
    qual     = 1
    scrolln  = 0
    panel    = 'DYNAMICA'
    csr      =                              /* Cursor field           */
    csrp     =                              /* Cursor position        */

    Return 0

set_vars_1:
    If Sysdsn("'"regdsn"'")/='OK' THen Return 8
Trace r
    dd='CR'Time('s')
    Address TSO "ALLOC DD("dd") DSN('"regdsn"') SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM line. FINIS)"
    Address TSO "FREE  DD("dd")"
    regs_a = ''
    lpar   = ''
    lpar#  = 0
    Do i=1 To line.0
        If Substr(line.i,1,1) = '*' Then Iterate
        Parse VAR line.i regx regy .
        If Index(regx,':') > 0 Then Do
            If lpar = 'IGNORE:' Then ignore = regs_a
            Else Do
                regions = Strip(regions Strip(lpar regs_a))
                lpar# = lpar# +1
            End
            lpar = regx
            If regy /= '' Then regs_a = regy
            Else               regs_a = ''
        End
        Else regs_a = regs_a regx
    End
    regions = Strip(regions Strip(lpar regs_a))

    Return 0

