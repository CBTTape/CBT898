/*--------------------------ooo00 REXX 00ooo--------------------------*/
    n_st=mark(2)                                          /* Mark Start

    AUXTRCE1: Routine to process CICS Auxiliary trace.

    Any options previously executed (or attempted) will be marked with a
    green '*" for audit purposes.

    Functions:
      1. Inquire Auxiliary trace
         (Issue "F region,CEMT I AUX" console command and display
          returned in a browsable dataset.)
      2. Start Auxiliary trace
         (Issue "F region,CEMT S AUX START" console command and display
          the "new" auxiliary status.)
      3. Switch Auxiliary trace
         (Issue "F region,CEMT S AUX SWITCH" console command and display
          the "new" auxiliary status.
          For this option, both A and B trace datasets must exist.)
      4. Stop Auxiliary trace
         (Issue "F region,CEMT S AUX STOP" console command and display
          the "new" auxiliary status.)
      5. Print Auxiliary trace
         (Displays JCL to print the auxiliary trace dataset. You will
          need to customise the trace parameters to fine tune your
          requirement. This JCL must be manually submitted. Suggest you
          do not attempt to print the active trace dataset if trace is
          active.)
      6. Resize Auxiliary trace
         (This feature will resize the auxiliary dataset. Before you can
          resize the dataset, it must be deallocated from CICS, if
          allocated. ENQINFO will be used to see if it ENQ'd and if it
          is it will QUEUE a deallocate to CICS using the DADS BIF
          feature.  To deallocate, it must be defined to DADS. If you
          are unsure, use option 11 to add the trace to DADS. You will
          get an RC=12 if it is already defined.
          For resizes, the original details will be presented for
          overtyping.
          Use this feature to define trace file B if it does not exist.
          Do not try this on the active trace dataset.)
      7. Deallocate Auxiliary trace
         (This feature uses the DADS BIF to deallocate the dataset to an
          active CICS region.  Use option 11 to add the trace to DADS.
          You will get an RC=12 if it is already defined.
          Do not try this on the active trace dataset.)
      8. Allocate Auxiliary trace
         (This feature uses the DADS BIF to allocate the dataset to an
          active CICS region.  Use option 11 to add the trace to DADS.
          You will get an RC=12 if it is already defined.
          Do not try this on the active trace dataset.)
      9. ENQ information
         (ENQINFO is used to report on any ENQ's against the CICS
          regions trace datasets, both A and B.
          Suggest execution of this option before attempting options
          7 or 8.)
     10. Dataset list
         (Ye olde faithful ISPF option 3.4 against datasets,
            'region.DFH%UXT'
          No real surprises. Use this for evaluation before option 6.)
     11. Add trace dataset to DADS
         (Uses the DADS batch update feature to ADD, CHANGE or DELETE
          datasets to DADS. Any duplicate definitions will give a
          RC=12. By default no CICS infrastructure datasets (including
          the trace datasets) are not defined to DADS.)
     12. Inquire DADS
         (If EXECIOVS is available, you can use this feature to see if
          the trace dataset is defined to DADS.)

    Parameters (positional):
      Region  - The region's applid.
      Trace type
              - Trace file A or B.
                This field is required for options 5, 6, 7, 8 and 11.

    If parameters are not presented, a panel will be displayed from
    missing parameter entry.

    REXX:
      AUXTRCE1 - This driver.
      $KMTCICS - Returns the values (loadlib and program) to print the
                 trace dataset.
      BR       o Output browser.  This tutorial is by the compliment of
                 this member.
      EXECIOVS o Facility to read VSAM datasets. Look at the member for
                 its own packaging. Required for option 12.

    Panels:
      DYNAMICZ - Dynamic panel used to present prompts.

                              *****

*/;n_en=mark(-2)                                        /* Mark End   */
/*--------------------------------------------------------------------*/
AUXTRCE1:auxtrce1_ver='1.02'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
    "CONTROL ERRORS CANCEL"

ini1:
    "VGET (zusvsn zusrel) PROFILE"
    ver=zusvsn||zusrel
    userid=Userid();zedlmsg=
    If userid='T32AZK' Then If parm#='' Then parm#='CICSI20 A'
    Parse Upper VAR parm# region t_file
    Parse SOURCE . . xcmd .
    If region='??' Then Signal help
    If region='?' Then Do
        x=BR(xcmd "??");Exit
    End

    action='L'
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    If Wordpos('/A',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/A',Translate(parm#)),1)
        action='A'
    End;Else parms='/S'

    Do i=1 To 12;Interpret "x"i"=' '";End
Set_up_screen_1:
    x=build_screen_1()
    Select
        When region='' Then Do;dynline=4;dyncol=18;End
        When t_file='' Then Do;dynline=5;dyncol=18;End
        Otherwise Do;dynline=;dyncol=;End
    End
Prompt_input_clear_command:
    linec=
    zcmd=
Prompt_input:
    "SETMSG MSG(ISRZ001)"
    "DISPLAY PANEL(DYNAMICZ)"
    If rc/=0 Then Do
        zedlmsg='Previous function terminated.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    Parse VAR zcmd action zparm1 zparm2
    If action='?' Then Do
        x=BR(xcmd "??")
        Signal Prompt_input_clear_command
    End
    If action='TRACE' Then Do
        If zparm1='OFF' Then #tr=Trace('o');Else #tr=TRace('r')
        Signal Prompt_input_clear_command
    End
    region=Strip(Substr(line4,18,7))
    t_file=Strip(Substr(line5,18,1))
    Select
        When region='' Then Do;dynline=4;dyncol=18;End
        When t_file='' Then Do;dynline=5;dyncol=18;End
        When action='' Then Do;dynline= ;dyncol=11;End
        Otherwise dynline=0
    End
    If Wordpos(action,'1 2 3 4 5 6 7 8 9 10 11 12')=0 Then Do
        zedlmsg='Invalid action entered.';dynline=
        Signal Prompt_input
    End
    If dynline/=0 Then Do
        zedlmsg='Field must be entered.'
        Signal Prompt_input
    End
    If sysid='SY2' Then val_regs=CICU$('SY2')
    Else val_regs=CICU$('SY5') CICU$('SY8')
    If Wordpos(region,val_regs)=0 THen Do
        zedlmsg='Invalid region entered.';dynline=4;dyncol=18
        Signal Prompt_input
    End
    dfhauxt=region".DFH"t_file"UXT"
    If Wordpos(action,'5 6 7 8 11')>0 Then Do
        If Sysdsn("'"dfhauxt"'")/='OK' & action/=6 Then Do
            zedlmsg="Invalid Trace type entered. Trace doesn't exist."
            dynline=5;dyncol=18
            Signal Prompt_input
        End
    End
    zedlmsg=
    Select
        When (action='1') Then Do
/*          x=DADS_trace('A','BROWSE')                                */
/*          x=CMLCMD_JCL('F 'region',CEMT I AUX')                     */
            x=CMD_on_line('F 'region',CEMT I AUX','BROWSE')
            x1='*'
        End
        When (action='2') Then Do
            x=CMD_on_line('F 'region',CEMT S AUX','BROWSE')
            x2='*'
        End
        When (action='3') Then Do
            If Sysdsn("'"region".DFHBUXT'")/='OK' Then Do
                zedlmsg='Only 1 trace dataset. Cannot switch.'
                Address Ispexec "SETMSG MSG(ISRZ001)"
            End
            Else Do
                x=CMD_on_line('F 'region',CEMT S AUX SWITCH','BROWSE')
                x3='*'
            End
        End
        When (action='4') Then Do
            x=CMD_on_line('F 'region',CEMT S AUX STOP','BROWSE')
            x4='*'
        End
        When (action='5') Then Do
            x=Print_trace()
            x=Show_jcl()
            x5='*'
        End
        When (action='6') Then Do
            x=Alter_trace_size()
            x6='*'
        End
        When (action='7') Then Do
            x=DADS_trace('D','NBROWSE')
            If x=0 Then Do
                zedlmsg="Dataset '"dfhauxt"' has been deallocated or",
                        "queued for deallocation."
            End;Else zedlmsg=
            x7='*'
        End
        When (action='8') Then Do
            x=DADS_trace('A','NBROWSE')
            If x=0 Then Do
                zedlmsg="Dataset '"dfhauxt"' has been allocated or",
                        "queued for allocation."
            End
            x8='*'
        End
        When (action='9') Then Do
            Address TSO "%ENQINFO" region".DFH%UXT*"
            x9='*'
        End
        When (action='10') Then Do
            "SELECT PGM(ISRDSLST) PARM(DSL '"region".DFH%UXT*')"
            x10='*'
        End
        When (action='11') Then Do
            x=DADS_define(dfhauxt)
            x=Show_jcl()
            x11='*';zedlmsg=
        End
        When (action='12') Then Do
            zedlmsg=DADS_check(dfhauxt)
            x12='*'
        End
        Otherwise Exit
    End
    dynline=
    Signal Set_up_screen_1
Exit

Show_JCL:
    Queue ''
    dd='EI'Time('s');ztempf=$ztempf()
    Address TSO "ALLOC F("dd") DSN('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "dd" (FINIS"
    zedlmsg='Change parameters to your liking and manually submit.',
            'Otherwise loose it to the bit bucket gremlins.'
    "SETMSG MSG(ISRZ001)"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    "EDIT DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dd")";xx=$ztempf(ztempf,'D')
    Return 0

Mark:Arg n#;If Datatype(n#)/='NUM' Then n#=1;Return sigl+n#

build_screen_1:
    lineh=Centre(' AUXilary trace prcessing ',78,'-')
    Parse Value '' With zcmd line1 linem
    line2 ="{ Enter from options below after entering parameters:"
    line3 =" "
    line4 ='{   Region }===>~'Left(region,7)'}<={'
    line5 ='{   Trace F}===>~'Left(t_file,1)'}<=      ¢A{or¢B'||,
           '{(for options¢5, 6, 7, 8{and¢11{)'
    line6 =" "
    line7 ="["x1  "¢ 1.{Inquire Auxilary trace       "
    line8 ="["x2  "¢ 2.{Start Auxilary trace         "
    line9 ="["x3  "¢ 3.{Switch Auxilary trace        "
    line10="["x4  "¢ 4.{Stop Auxilary trace          "
    line11="["x5  "¢ 5.{Print Auxilary trace         "
    line12="["x6  "¢ 6.{Resize Auxilary trace        "
    line13="["x7  "¢ 7.{Deallocate Auxilary trace    "
    line14="["x8  "¢ 8.{Allocate Auxilary trace      "
    line15="["x9  "¢ 9.{ENQ information              "
    line16="["x10 "¢10.{Dataset list (A & B)        "
    line17="["x11 "¢11.{Add trace dataset to DADS   "
    line18="["x12 "¢12.{Inquire DADS                "

    line21='{ Enter¢?{on the command line for HELP.'
    line22='{ Use¢END{PF key to abandon processing.'
    Return 0

DADS_trace:Arg funct,act
    hlq=Substr(region,1,Length(region)-1)
    Address TSO;"NEWSTACK"
    Queue ' FUNCTION=DADS,APPLID=('region',QUEUE),REQ=('funct',F,DFHAUXT)'
    Queue ''
    ddi='SYSIN';ztempfi=$ztempf()
    ddo='SYSPRINT';ztempfo=$ztempf('/N')
    "ALLOC F("ddi") DSN('"ztempfi"') SHR REU"
    "ALLOC F("ddo") DSN('"ztempfo"') NEW CATALOG UNIT(SYSDA)",
        "RECFM(F B A) LRECL(133) BLKSIZE(0)  DSORG(PS) REU"
    "EXECIO * DISKW "ddi" (FINIS"
    "ALLOC DD(DADSBIF) DSN('"hlq".DADS.BATCH') SHR REU"
    Parse Value $KMTCICS('DADSLOAD',ver) With dadsload
    "CALL '"dadsload"(DADBBI)'"
    rrc=rc
    If Wordpos(act,'BROWSE EDIT VIEW')>0 Then Do
        Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("ddo")"
        Address ISPEXEC "&ACT DATAID(&DATAID)"
        Address ISPEXEC "LMFREE DATAID(&DATAID)"
    End
    "FREE F("ddo","ddi")"
    m#=Msg('Off')
    x=$ztempf(ztempfi,'/D');x=$ztempf(ztempfo,'/D')
    x=Msg(m#)
    Return rrc

Alter_trace_size:
    t_exist=Listdsi("'"dfhauxt"'")
    If t_exist/=0 Then Do
        t_exist=Listdsi("'"region".DFHAUXT'")
        zedlmsg="Based on '"region".DFHAUXT'."
    End
    If t_exist=0 Then Do
        vol=sysvolume
        unit_t=sysunits
        prim=sysprimary
        sec=sysseconds
        rf=sysrecfm
        lrecl=syslrecl
        blk=sysblksize
    End;Else
        Parse Value 'ZDC209 4096 4096 C F 10 2' With,
                    vol lrecl blk unit_t rf prim sec
/*  lineh=Centre(' AUXilary trace prcessing ',78,'-')              */
    Parse Value '' With linec line1 linem
    dynline=5;dyncol=20
    If Sysdsn("'"dfhauxt"'")/='OK' Then parm#=
    Else parm#=Space(prim sec Substr(unit_t,1,1) vol lrecl blk rf)
build_screen_2:
    line2 ='{ Overtype the displayed values to generate create JCl'
    line3 ="{ with those values:  }'"dfhauxt"'"
    line4 =
    line5 ='{    Primary {===>~'Left(prim,4)'}<={     {Numeric'
    line6 ='{    Second  }===>~'Left(sec,4)'}<=      {Numeric'
    line7 ='{    Type    }===>~'Left(unit_t,1)'}<=         ¢T{rack or¢C{ylinder'
    line8 ='{    Volser  }===>~'Left(vol,6)'}<=      '
    line9 ='{    LRECL   }===>~'Left(lrecl,5)'}<=     {Numeric'
    line10='{    BLKSIZE }===>~'Left(blk,5)'}<=     {Numeric'
    line11='{    RF      }===>~'Left(rf,2)'}<=        ¢F{or¢FB'
    Parse Value '' With line12 line13 line14 line15 line16 line17 line18 line19

    line21='{ Enter¢?{on the command line for HELP.'
    line22='{ Use¢END{PF key to abandon processing.'
Prompt_input_resize:
    zcmd=
    "SETMSG MSG(ISRZ001)"
    "DISPLAY PANEL(DYNAMICZ)"
    If rc/=0 Then Do
        zedlmsg='Previous function terminated.'
        "SETMSG MSG(ISRZ001)"
        Return 0
    End
    prim   =Strip(Substr(line5,20,4))
    sec    =Strip(Substr(line6,20,4))
    unit_t =Strip(Substr(line7,20,1))
    vol    =Strip(Substr(line8,20,6))
    lrecl  =Strip(Substr(line9,20,5))
    blk    =Strip(Substr(line10,20,5))
    rf     =Strip(Substr(line11,20,2))
    If t_exist=0 & parm#=Space(prim sec unit_t vol lrecl blk rf) Then Do
        zedlmsg='No field has changed. Cannot change nothing.'
        dynline=
        Signal Prompt_input_resize
    End
    Select
      When \Datatype(prim,'w') Then Do;dynline=5;zedlmsg='Must be numeric.';End
      When \Datatype(sec,'w') Then Do;dynline=6;zedlmsg='Must be numeric.';End
      When Verify(unit_t,'CT')>0 Then Do;dynline=7;zedlmsg='Invalid value.';End
      When $Vername(vol)/='OK' Then Do;dynline=8;zedlmsg='Invalid value.';End
      When \Datatype(lrecl,'w') Then Do;dynline=9;zedlmsg='Must be numeric.';End
      When \Datatype(blk,'w') Then Do;dynline=10;zedlmsg='Must be numeric.';End
      When Verify(rf,'FB')>0 Then Do;dynline=11;zedlmsg='Invalid value.';End
      Otherwise dynline=0
    End
    dyncol=20
    If dynline/=0 Then Signal Prompt_input_resize
    #m1=Msg('On');x=Outtrap('line.',50,'NOCONCAT')
    Address TSO "%ENQINFO /TSO" dfhauxt'*'
    x=Outtrap('Off');x=Msg(#m1)
    If line.0>5 Then y=DADS_trace('D','NBROWSE');Else y=0
    If y=0 Then Do
        If unit_t='C' Then unit_t='CYLINDERS';Else unit_t='TRACKS'
        m#=Msg('Off')
        Address TSO "DELETE '"dfhauxt"'"
        x=Msg(m#)
        Address TSO "ALLOC DA('"dfhauxt"') NEW CATALOG UNIT(3390)",
              "VOLUME("vol") LRECL("lrecl") BLKSIZE("blk")",
              "SPACE("prim","SEC")" unit_t "RECFM("rf")"
        Address TSO "FREE DA('"dfhauxt"')"
        zedlmsg="Dataset '"dfhauxt"' resized."
        If line.0>5 Then Do
            x=DADS_trace('A','NBROWSE')
            If x=0 Then  zedlmsg=Substr(zeldmsg,1,Length(zedlmsg)-1),
                'and re-allocated to CICS.'
        End
    End
    "CONTROL DISPLAY REFRESH"
    dynline=
    Return 0

Help:
    Do i=n_st To n_en;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

/*--------------------------------------------------------------------*/
/* Read the DADS file (if "EXECIOVS" is available) and advise.        */
/*--------------------------------------------------------------------*/
DADS_check:
    dads01="'"region".DADS.CONTROL.CICSESA'"
    vsdd='VR'Time('s')
    Address TSO "ALLOC F("vsdd") DSN("dads01") SHR REU"
    trace_dd='DFH't_file'UXT'
    key=Left('1'Substr(trace_dd,1,8),24,'00'x)
vseio_error:
    Signal on Syntax Name error_off_VSEIO
    Address TSO,
      "EXECIOVS 1 KSDSR" vsdd "(FINIS NNOTIFY NLOG NCONT NTRACE) KEY("key")"
    vr_rc=rc
    Signal off Syntax
    Address TSO "FREE F("vsdd")"
    If vr_rc=0 Then Do
        Parse PULL line 44 ods +44;ods=Strip(ods)
    End
    Address TSO "DELSTACK"
    If vr_rc=0 Then Return '"DD('trace_dd')" defined to DADS as',
                           "DSN('"ods"')."
    Else Return '"DD('trace_dd')" NOT defined to DADS.'
error_off_VSEIO:Signal off Syntax
    Return '"EXECIOVS" not available.'

/*--------------------------------------------------------------------*/
/* Generate JCL to define datasets to DADS.                           */
/*--------------------------------------------------------------------*/
DADS_define:
Parse Value $KMTCICS('DADSLOAD',ver) With dadsload
Address TSO "NEWSTACK"
Queue "//T32AZKT  JOB (SU1ZIBMS),'DFHTUP-',"
Queue '//             CLASS=A,COND=(4,LT),'
Queue '//             MSGCLASS=X,TIME=1440,REGION=0M,'
Queue '//             NOTIFY=&SYSUID,LINES=9999'
Queue '//*'
Queue '//*MAIN LINES=9999'
Queue '//*'
Queue '//*-------------------------------------------------------------------*'
Queue '//DADM     EXEC PGM=DADM,REGION=700K'
Queue '//STEPLIB  DD  DISP=SHR,DSN='dadsload
Queue '//DADS01   DD  DISP=SHR,DSN='region'.DADS.CONTROL.CICSESA'
Queue '//SYSPRINT DD  SYSOUT=*'
Queue '//SYSIN    DD  *'
Queue '*---------------------------------------------------------------------*'
Queue '* ADDFILE will fail if definition exists. Delete the ADDFILE statement*'
Queue '* and uncomment the CHANGEFILE statement to make changes.             *'
Queue '*---------------------------------------------------------------------*'
Queue '*CHANGEFILE -'
Queue ' ADDFILE -'
Queue '   NAME(DFH't_file'UXT) -'
Queue '   DSNAME('dfhauxt') -'
Queue '   DISP(SHR) -'
Queue '   NOTINFCT(Y) -'
Queue '   COLDSTART(N) WARMSTART(N) EMERSTART(N) -'
Queue '   OPEN(N) OPENCOLD(N) OPENWARM(N) OPENEMER(N)'
Queue '*'
Queue '*---------------------------------------------------------------------*'
Queue '* Comment or delete above lines and uncomment the DELETE line if you  *'
Queue '* want to delete the definition.                                      *'
Queue '*---------------------------------------------------------------------*'
Queue '*DELETEFILE -'
Queue '*  NAME(DFH't_file'UXT) -'
Queue '/*'
Queue '//'

Return 0

/*--------------------------------------------------------------------*/
/* Generate JCL to print the trace.                                   */
/*--------------------------------------------------------------------*/
Print_trace:
    Parse Value $KMTCICS('SDFHLOAD DFHTUP',ver) With sdfhload dfhtup
    Address TSO "NEWSTACK"
Queue "//T32AZKT  JOB (SU1ZIBMS),'DFHTUP-',"
Queue '//             CLASS=A,COND=(4,LT),'
Queue '//             MSGCLASS=X,TIME=1440,REGION=0M,'
Queue '//             NOTIFY=&SYSUID,LINES=9999'
Queue '//*'
Queue "//*  JCL from: 'CICSESA.JCL.CNTL(DFHTUP)"
Queue '//*'
Queue '//*MAIN LINES=9999'
Queue '//*--------------------------------------------------------'
Queue '//*----   DESC: PRINT THE CICS AUXTRACE FILE - CICS 5.3 ---'
Queue '//*--------------------------------------------------------'
Queue '//PRTTRCA EXEC  PGM='dfhtup
Queue '//STEPLIB   DD DISP=SHR,DSN='sdfhload
Queue '//DFHAUXT   DD DISP=SHR,DSN='dfhauxt
Queue '//DFHAXPRT  DD SYSOUT=*'
Queue '//DFHAXPRM  DD *'
Queue 'ABBREV'
Queue '/*'
Queue '//'
Queue ' '
Queue 'FULL'
Queue 'ABBREV'
Queue 'TERMID=(XL00,XL01,XL02,XL03,XL04,XL05,XL06,XL07,XL08,XL09,XL10)'
Queue 'TERMID=(XL11,XL12,XL13,XL14,XL15,XL16,XL17,XL18,XL19,XL20)'
Queue 'TERMID=(XL21,XL22,XL23,XL24,XL25,XL26,XL27,XL28,XL29,XL30)'
Queue 'TERMID=(TTTT,TTTT,TTTT)'
Queue 'TRANID=(SII0,TTTT,TTTT)'
Queue 'FULL'
Queue 'TRANID=MP06'
Queue 'TASKID=ID'
Queue 'KE_NUM='
Queue 'TIMERG=HHMMSS-HHMMSS'
Queue '***** SEE CICS/ESA OPERATIONS GUIDE P162'
    Return 0

/*--------------------------------------------------------------------*/
/* Break up returned data from console command into a large message.  */
/*--------------------------------------------------------------------*/
CMD_on_line:
    x=Kmartcon(Arg(1),'/R')
    If x=1 Then Do
        zedlmsg='Could not establish a console. Check If you have',
                'authority.'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Terurn 0
    End
    If Arg(2)='' Then Do
        i=0;zedlmsg=
        Do While x/=''
            Parse VAR x y '~' x
            i=i+1;If i>5 Then zedlmsg=zedlmsg||Substr(y,1,78)
        End
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
    End
    Else Do
        Address TSO "NEWSTACK"
        Do While x/=''
            Parse VAR x y '~' x
            Queue Substr(y,1,78)
        End
        Queue ''
        dd='CC'Time('s');ztempf=$ztempf()
        Address TSO "ALLOC F("dd") DSN('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW "dd" (FINIS"
        Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd")"
        Address ISPEXEC "BROWSE DATAID(&DATAID)"
        Address ISPEXEC "LMFREE DATAID(&DATAID)"
        Address TSO "FREE F("dd")";xx=$ztempf(ztempf,'D')
    End
    Return 0

/*--------------------------------------------------------------------*/
/* JCL to issue a MVS command in batch. Redundant if have access to   */
/* the console command.                                               */
/*--------------------------------------------------------------------*/
CMLCMD_JCL:
Address TSO "NEWSTACK"
Queue "//T32AZKM  JOB (SU1ZIBMS),'DFHTUP-',"
Queue '//             CLASS=A,COND=(4,LT),'
Queue '//             MSGCLASS=X,TIME=1439,REGION=0M,'
Queue '//             NOTIFY=&SYSUID,LINES=9999'
Queue '//*'
Queue '//COMMAND  EXEC PGM='$Kmtcics('OPERCMD')
Queue '//STEPLIB  DD DISP=SHR,DSN='$Kmtcics('OPERCMDL')
Queue '//SYSOUT   DD SYSOUT=*'
Queue '//SYSPRINT DD SYSOUT=*'
Queue '//BATCHCMD DD *'
Queue Arg(1)
Queue '/*'
    Return 0
