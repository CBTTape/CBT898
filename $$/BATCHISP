/******************************** REXX ********************************/
n_st=mark(1)                                /* Mark Start             */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Hello &CNAME..                                                     */
/*                                                                    */
/* BATCHISP: [ V1.06 ].                                               */
/*                                                                    */
/* This routine generates JCL to execute ISPF in batch.  It makes use */
/* of existing ISPF allocations and identifies datasets that contain  */
/* key members (including this member) and alloacates them if the     */
/* "CONC" parameter is used.                                          */
/* It will automatically allocate dataset this member is found in     */
/* to SYSEXEC.                                                        */
/*                                                                    */
/* If you get a JCL error or failure to build valid JCL, look at site */
/* customisation of member "BATCHISM"...                              */
/*                                                                    */
/* Parameters (keywords):                                             */
/*   ALL     - Concatenate all datasets fond in the DD concatenation. */
/*             This is mutually exclusive (and takes precedence over  */
/*             the "CONC" parameter.                                  */
/*   BSS(n)  - Batch step suffix. Default none. Use this parameter    */
/*             when this routine is called multiple times to gen one  */
/*             JCL job to prevent duplicate step names.               */
/*   CONC{(* | dd1,dd2,...,ddn)}                                      */
/*           - Concatenate default DD setting from this member to     */
/*             system allocated ones.  (Added datasets are from       */
/*             member $ALKBI.                                         */
/*   DATA/MD - Make data rather than NOTELINES.                       */
/*   ISPPROF - Include ISPPROF datasets if found in any concatenation.*/
/*             Usually ISPPROF has DISP=OLD for online allocations    */
/*             and would normaly cause a conflict with the batch job. */
/*             Use this parameter if you know what you are doing.     */
/*   NOINF/NI- No infrastructure (just ISPF concats).                 */
/*   NOJOB/NJ- No jobcard wanted.                                     */
/*   NONSTANDARD/NST                                                  */
/*           - Non standard ISPF names. (Ie.  llq for ISPPLIB is      */
/*             not SISPPENU etc...)                                   */
/*   NOSIN/NS- No //SYSTSIN parameters.  Must supply your own ending  */
/*             '/*'                                                   */*/
/*   NOSPR/NP- No //SYSTSPRT output DD required.  Usually for output  */
/*             to a dataset rather than SYSOUT.                       */
/*   NOUSER/NU                                                        */
/*           - No user dataset. Just ISPF defaults.                   */
/*   QUEUE   - Queue data rather than NOTELINE/DATA.                  */
/*   RETURN  - Return the settings in format:                         */
/*             dd1=dsn11 dsn12:dd2=dsn21 dsn22:....:ddn=dsnn1 dsnn2:  */
/*   SID(i)  - Send a fixed "SYSID".  Uses this rather than derive it.*/
/*                                                                    */
/* Sample use of 'RETURN' parameter:                                  */
/*                                                                    */
/* xxx=batchisp('RETURN')                                             */
/* Do While xxx/=''                                                   */
/*    Parse Var xxx yyy ':' xxx                                       */
/*    Parse Var yyy dd '=' dsn1 dsnl                                  */
/*    If dsn1='' Then x=Substr('//'Strip(dd),1,10) 'DD DUMMY'         */
/*    Else x=Substr('//'Strip(dd),1,10) 'DD DISP=SHR,DSN='Strip(dsn1) */
/*    Say x                                                           */
/*    Do While dsnl/=''                                               */
/*        Parse Var dsnl dsn1 dsnl                                    */
/*        x=Substr('//',1,10) 'DD DISP=SHR,DSN='Strip(dsn1)           */
/*        Say x                                                       */
/*    End                                                             */
/* End                                                                */
/*                                                                    */
/*  The following members are required to package this function.      */
/*  Those marked with an 'o' seperator are optional and enhance the   */
/*  available fetures:                                                */
/*  REXX:                                                             */
/*    $ALKACCT o Site account customiser used by JC.                  */
/*    $ALKJC   o Site default JC details customiser used by JC        */
/*    $ALKJCPG o Used by $ALKJC to customise program name.            */
/*    $ALKBI   o Allocate your datasetsts if using the 'CONC' opt.    */
/*               (If routine not found it will be bypassed.)          */
/*    $ALKHLQ  o Global HLQ allocator used by $ALKBI.                 */
/*    $ALKLOAD o Global LLQ for LOADLIB used by $ALKBI.               */
/*    $ALKLLQR o Global LLQ for REXX dataset used by $ALKBI.          */
/*    $DDALLOC - Returns all the datasets allocated to a DD           */
/*               concatenation.                                       */
/*    $WHOAMI  o Personaliser.                                        */
/*    BATCHISM - Site customised matrix builder to naming standards.  */
/*    BATCHISP - This driver.                                         */
/*    BATCHIS$ o Packager.                                            */
/*    BE       o Sample user of feature.                              */
/*    JC       o Create jobcard.                                      */
/*    JF       o JCL formatter used by JC.                            */
/*                                                                    */
/*--------------------------------------------------------------------*/
n_en=mark(-1)                               /* Mark End               */
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

init:
    If Wordpos(Word(parm#,1),'? /? HELP')>0 Then Signal Help_me
    Parse Upper VAR parm# parm#;Parse SOURCE . xenv xcmd . xdsn .
    If Wordpos('/T',Translate(parm#))>0 Then Do
        Trace r;parm#=Delword(parm#,Wordpos('/T',Translate(parm#)),1)
    End;Else kwp=0

    If Wordpos('MD',parm#)>0 Then noteline=
    Else If Wordpos('DATA',parm#)>0 Then noteline=
    If noteline='' Then Do;where='LINE_AFTER .ZLAST';jc=;End
    ELse Do;where='LINE_BEFORE .ZFIRST';jc='/N';End
    If Wordpos('ALL',parm#)>0 Then add_all=1;Else add_all=0
    If Wordpos('RETURN',parm#)>0 Then ret_val=1;Else ret_val=0
    If Wordpos('ISPPROF',parm#)>0 Then use_ipr=1;Else use_ipr=0
    If Wordpos('NOJOB',parm#)>0 Then jobcard=0
    Else If Wordpos('NJ',parm#)>0 Then jobcard=0;Else jobcard=1
    If Wordpos('NONSTANDARD',parm#)>0 Then std_name=0
    Else If Wordpos('NST',parm#)>0 Then std_name=0;Else std_name=1
    If Wordpos('NOUSER',parm#)>0 Then no_user=1
    Else If Wordpos('NU',parm#)>0 Then no_user=1;Else no_user=0
    If Wordpos('NOSIN',parm#)>0 Then systsin=0
    Else If Wordpos('NS',parm#)>0 Then systsin=0;Else systsin=1
    If Wordpos('NOSPR',parm#)>0 Then systsprt=0
    Else If Wordpos('NP',parm#)>0 Then systsprt=0;Else systsprt=1
    If Wordpos('NOINF',parm#)>0 Then infra=0
    Else If Wordpos('NI',parm#)>0 Then infra=0;Else infra=1
    If Wordpos('QUEUE',parm#)=0 Then queueit=0
    Else Do;queueit=1;jc='/Q';End
    v_c='ispplib ispmlib ispslib isptlib ispllib sysexec sysproc'
    Interpret "Parse Value '' With" v_c

    If Index(' 'parm#,' BSS(')>0 Then Do
        Parse Value ' 'parm# With ' BSS(' bss ')' .
        If Datatype(bss,'W') Then ispfbtch=Substr('ISPFBTC'||bss,1,8)
        Else ispfbtch='ISPFBTCH'
    End;Else ispfbtch='ISPFBTCH'

    Parse Value ' 'parm# With ' SID(' sysid ')' .
    If sysid='' Then,
        sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))

    If Index(parm#,'CONC')>0 Then Do
        conc=Substr(parm#,Index(parm#,'CONC'))
        Parse VAR conc conc;Parse VAR conc '(' conc ')'
        If conc='' | conc='*' Then conc=v_c
        Else conc=Translate(conc,' ',',')
    End;Else conc=
    If conc/='' Then Do
        Signal on Syntax Name error_00
        Interpret "Parse Value $alkbi(conc) With" conc
        Signal error_off_00
    End
error_00:conc=
error_off_00:Signal off Syntax
    xxx=conc
    Do While xxx/=''
        Parse VAR xxx xx xxx
        Interpret xx"=Translate("xx",' ','/')"
    End

    ispprof=$ddalloc('ISPPROF')

    matrix=,                                /* See BATCHISM 4 meaning */
           'SYSEXEC:'xcmd':',
           'ISPPLIB:ISREDDE2:SISPPENU',
           'ISPMLIB:ISPA00:SISPMENU',
           'ISPSLIB:ISREMAS1:SISPSENU',
           'ISPTLIB:ISPKEYS:SISPTENU',
           'ISPLLIB:*:',
           ''
    Signal on Syntax Name error_off_01
    matrix=Batchism(sysid)
error_off_01:Signal off Syntax
    xxx=matrix
    Do While xxx/=''
        Parse VAR xxx xx xxx;Parse var xx dd ':' memb ':' llq
        If \std_name Then llq=
        If conc/='' Then Interpret dd"="dd "Get_dataset(dd,memb,llq)"
        Else             Interpret dd"=Get_dataset(dd,memb,llq)"
    End
/*  If sysexec/='' Then sysproc=                                      */

    If xenv='FUNCTION' & ret_val Then Return,
        'SYSEXEC='Space(sysexec)':',
        'SYSPROC='Space(sysproc)':',
        'ISPPLIB='Space(ispplib)':',
        'ISPMLIB='Space(ispmlib)':',
        'ISPSLIB='Space(ispslib)':',
        'ISPTLIB='Space(isptlib)':',
        ''
    If ima_macro | queueit Then Call gen_JCL
    Else Do
        Say 'SYSEXEC='Space(sysexec)
        Say 'SYSPROC='Space(sysproc)
        Say 'ISPPLIB='Space(ispplib)
        Say 'ISPMLIB='Space(ispmlib)
        Say 'ISPSLIB='Space(ispslib)
        Say 'ISPTLIB='Space(isptlib)
    End
    Exit

Get_dataset: Arg a_dsn,a_memb,a_llq
    yyy=$ddalloc(a_dsn);zzz=
    If \use_ipr & a_dsn/='ISPPROF' Then Do
        xx=Wordpos(ispprof,yyy);If xx>0 Then yyy=Delword(yyy,xx,1)
    End
    If ret_val & \no_user Then Return yyy
    If a_memb='' Then Return ''
    If a_memb='*' Then Return yyy
    If Datatype(a_memb,'W') Then Return Word(yyy,a_memb)
    If add_all Then Return yyy
    Do While yyy/=''
        Parse Var yyy yy yyy
        If a_llq/='' Then Do
            If std_name Then,
                If Substr(yy,Lastpos('.',yy)+1)/=a_llq Then Iterate
            If Sysdsn("'"yy"("a_memb")'")='OK' Then Return yy
        End
        Else If Sysdsn("'"yy"("a_memb")'")='OK' Then zzz=zzz yy
    End
    If zzz/='' Then Return Strip(zzz);Else Return ''

gen_JCL:
    Address ISREDIT;"(last)=LINENUM .ZLAST"
    If last=0 Then "LINE_AFTER .ZLAST=' '"
    m#=Msg('Off');#tr=Trace('o')
    If jobcard Then "ISREDIT JC" jc  /* BUild JOB card         */
    sep=Substr('//*',1,70,'-')'*'
    If infra Then
        x=ol('//'ispfbtch' EXEC PGM=IKJEFT01,DYNAMNBR=65,REGION=4096K')
    x=ol(sep)
    x=ol(Substr('//* xxxxxxx - ISPF Environment',1,70)'*')
    x=ol(sep)

    xxx=matrix
    Do While xxx/=''
        zzz=
        Parse VAR xxx xx xxx;Parse var xx dd ':' .;Interpret 'yy='dd
        Do while yy/=''
            Parse VAR yy y yy
            If Wordpos(y,zzz)>0 Then Iterate;zzz=zzz y
            x=ol(Substr('//'dd,1,10) 'DD DISP=SHR,DSN='y)
            dd=
        End
    End
    x=ol(sep)
    Signal on Syntax Name error_off_$ALKUVOL
    uvol_tb="UNIT=SYSDA";uvol_tb=$Alkuvol('$ZTEMPF',,'J')
error_off_$ALKUVOL:Signal off Syntax
    If uvol_tb/='' Then uvol_tb=uvol_tb','

    x=ol('//ISPPROF  DD DSN=&&ISPPROF,SPACE=(TRK,(10,10,10)),'uvol_tb)
    x=ol('//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)')
    x=ol('//ISPLOG   DD DSN=&&ISPLOG,SPACE=(TRK,(10,10)),'uvol_tb)
    x=ol('//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)')
    x=ol(sep)
    If infra Then Do
        If systsprt Then x=ol('//SYSTSPRT DD SYSOUT=*')
        x=ol('//SYSOUT   DD SYSOUT=*')
        x=ol('//SYSTERM  DD SYSOUT=*')
        x=ol('//SYSTSIN  DD *')
        If systsin Then Do
            x=ol(' ISPSTART CMD(%'xcmd')')
            x=ol('/*')
        End
    End
    If last=0 Then "DEL ALL .ZLAST .ZLAST";Address;Return 0

ol:zz=Arg(1);If queueit Then Queue Arg(1);Else where"="noteline "(zz)";Return 0
Help_me:
    cname='there';Signal On Syntax Name ret_syntax_$WHOAMI
    cname=$Whoami('C')
ret_syntax_$WHOAMI:
    chgchar='&'
    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(Substr(line,1,72))
    End
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
