/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/*  BD:  BackDown member.                                             */
/*                                                                    */
/*  Macro to restore member being editted.                            */
/*  Refer tutorial for permissable parameters.                        */
/*                                                                    */
/*  Associated members:                                               */
/*     EXEC       BD (alias)                                          */
/*                BKUP (converse)                                     */
/*                BU (alias of BKUP)                                  */
/*     Panels   - BUP                                                 */
/*     Tutorial - BKUPH000                                            */
/*                BKUPH010                                            */
/*                BKUPH020                                            */
/*                                                                    */
/**********************************************************************/
BD:bd_ver='1.02'
    Address ISPEXEC;'CONTROL ERRORS RETURN'
    "ISREDIT MACRO (parm#)";If rc/=0 Then Exit
    "ISREDIT (DATASET)=DATASET";"ISREDIT (MEMBER)=MEMBER"
/*  'CONTROL ERRORS CANCEL'                                           */
    Parse Upper VAR parm# parm#;Parse SOURCE . xenv xcmd xdd xdsn .

/*********************************************************************/
/*  Display tutorial...                                              */
/*********************************************************************/
    If Wordpos(Word(parm#,1),'/H /? ?')>0 Then Do
        "ISREDIT BU ?"
        Return 0
    End

    xmsg=
    vars = 'BKUPDEFT BKUPWHER BKUPOLAY'
    'VGET ('vars') PROFILE'
    If bkupdeft='' | bkupwher='' | bkupdeft="BKUPDEFT" |,
       bkupwher="BKUPWHER" Then Do
        If bkupdeft = '' | bkupdeft = "BKUPDEFT" Then bkupdeft = '#'
        If bkupwher = '' | bkupwher = "BKUPWHER" Then bkupwher = 'P'
        gc009='Change defaults as required and hit [ENTER] to accept.'
        'SETMSG MSG(gc009)'
    End
    If Word(parm#,1)='/DEF' Then Do
scr1:
        zcmd=
        'DISPLAY PANEL(BUP)'
        If rc=0 Then Do
            'VPUT ('vars') PROFILE'
            gc009='Defaults have been set to designated values.'
            'SETMSG MSG(gc009)'
            Signal scr1
        End
        gc009='Defaults have been saved. Please execute command again.'
        'SETMSG MSG(gc009)'
        Exit
    End

    buid = bkupdeft                       /* <=== CAHNGE FOR SITE */
    wher = bkupwher                       /* <=== CAHNGE FOR SITE */
    #tr=Trace('O');Call parse_parms;x=Trace(#tr)
    If backup = '' Then Do
        If parm#/='' Then buid = parm#
        If LENGTH(buid) > 8 Then Do
            gc009 = 'Cannot pass character string > 8 characters.'
            Signal errx
        End
        If Length(member) = 8 & olay /= '' Then,
             backup = Overlay(buid,member,olay)
        Else Do
            If meml < Length(backup) Then
                backup = SUBSTR(backup,1,meml)
            If Length(buid) = 8 Then member = ''
            lc = Length(member||buid)
            lm = Length(member)
            If lc > 8 Then Do
                s = lc - 7
                e = lm + 8 - lc
            End
            backup = member
            If wher = 'P' Then Do
                If lc > 8 Then backup = SUBSTR(member,s,lm+1-s)
                backup = buid||backup
            End
            Else Do
                If lc > 8 Then backup = SUBSTR(member,1,e)
                backup = backup||buid
            End
            If meml < Length(backup) Then
                backup = SUBSTR(backup,1,meml)
        End
    End
    backup = STRIP(backup)
    If DATATYPE(backup) = 'NUM' Then Do
        gc009 = 'Member name '''backup'''not valid for',
                'partitioned dataset.'
        Signal errx
    End
    If what_if Then Do
        zedlmsg='Member would be backed up into member '''backup'''.'
        Signal errx
    End

    If SYSDSN(''''dataset'('backup')''')/='OK' Then Do
        gc009 = 'Backup member "'backup'" not found.'
        'ISREDIT RESET'
        Signal errx
    End
    If action = 'MOVE' Then xmsg = ' which has been deleted'
    If keep/='KEEP' Then Do
        'ISREDIT X ALL'
        'ISREDIT DELETE X ALL'
    End
    'ISREDIT 'action backup' AFTER .ZLAST'
    gc009 = 'Member restored from "'backup'"'xmsg'.'
    Signal errx

err1:
    gc009 = 'Invalid length parameter of"'meml'" passed.'
    Signal errx
err2:
    gc009 = 'Invalid overlay colum entered. Update using "/DEF"',
            'parameter.'
errx:
    'SETMSG MSG(gc009)'
    Return 0

/*********************************************************************/
/*  Parse  parameters...                                             */
/*********************************************************************/
parse_parms:
    prev   = parse_cons('/NC')
    edit   = parse_cons('/ED','EDIT',,3)
    exist  = parse_cons('/EX','EXIST',,3)
    keep   = parse_cons('/KE','KEEP',,3)
    action = parse_cons('/DEL','MOVE','COPY',3)

    wher   = parse_cons('/S','S',,3)
    If wher = 'N' Then wher   = parse_cons('/P','P',bkupwher,3)

    meml   = parse_varb('/L=',8)
    If meml = 'ML' Then meml = Length(member)
    If Datatype(meml) /= 'NUM' Then Signal err1
    If meml < 1 | meml > 8 Then Signal err1

    olay   = parse_varb('/O=',bkupolay,'NUM')
    If olay='N' Then olay=bkupolay
    If olay /= bkupolay Then Do
        If olay < 1 | olay > 8 Then Signal err2
    End
    what_if= parse_cons('/W',1,0)

    backup=parse_varb('/M=','?')
    If backup='?' Then backup=parse_varb('M=','?')
    If backup='?' Then backup=

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
