/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* BFIMR - BMS From ISPF Make Redefines copybook.                     */
/*                                                                    */
/* Routine to combine the BMS map with it's generated COBOL copybook  */
/* to create a redefines copybook for use in accessing map fields     */
/* using meaningfull COBOL names.                                     */
/*                                                                    */
/* Use "BFIMR ?" command for self generating help.                    */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    If parm# /= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    Parse Upper VAR parm# parm1 parm2 parm3
    Parse Source opsys . xcmd . dsn_name .

    "ISREDIT (status) = USER_STATE"
    If parm1 = '?' Then Signal help

    mapcnig = 'MAP-'                        /* Ignore default value   */
    mapbmss = Translate(parm1)
    mapocpy = Translate(parm2)
    vars = "MAPBMSS MAPOCPY MAPSDSN MAPSEQN MAPDILR MAPEVOC"
    "ISREDIT (member) = MEMBER"
    "ISREDIT (procmem) = DATASET"
    csr1 = ''
    If mapbmss = '' Then Do
        "VGET ("vars") PROFILE"
        If mapbmss = '' Then,
            mapsdsn = "'"procmem"(member)'"
        If mapocpy = '' Then,
            mapocpy = Substr(member,1,Length(member)-1)
        If mapsdsn = '' Then,
            mapsdsn = "'"procmem"'"
        Signal scr1a
    End
/*  mapocpy = 'S1'                                                    */
/*  mapbmss = "'PSAZK.$P.LMS(GPOMJ00)'"                               */
    Signal process_it_1

scr1a:
    procmem = "'"procmem"("member")'"
scr1:
    "DISPLAY PANEL(BFIMRP) CURSOR(&CSR1)"
    If rc /= 0 Then Do
        gc009 = 'BMS map location entry screen abandoned.'
        Signal erx1
    End

process_it_1:
    If Sysdsn(mapbmss) /= 'OK' Then Do
        gc009 = Sysdsn(mapbmss)
        "ISPEXEC SETMSG MSG(GC009)"
        csr1 = 'MAPBMSS'
        Signal scr1
     End

    "ISREDIT RESET"
    "ISREDIT DELETE ALL NX"
    "ISREDIT NUMBER OFF"
    "ISREDIT (sdsn) = DATASET"
    If "'"sdsn"'" = mapsdsn | mapsdsn = '' Then Do
        "ISREDIT COPY" mapocpy "BEFORE .ZFIRST"
        "ISREDIT UNNUMBER"
        "ISREDIT NUMBER OFF"
    End
    Else Do
        If Substr(mapsdsn,1,1) = "'" Then,
            Parse VAR mapsdsn "'" dsn "'"
        idsn = "'"dsn"("mapocpy")'"
        If Sysdsn(idsn) /= 'OK' Then Do
            gc009 = Sysdsn(idsn)"."
            "ISPEXEC SETMSG MSG(GC009)"
            csr1 = 'MAPSDSN'
            Signal scr1
        End
        Call get_source
        Do i=1 To linei.0
            line = linei.i
            "ISREDIT LINE_AFTER .ZLAST = (line)"
        End
    End
    Call get_bms_map

    "ISREDIT F ' 01 ' 7  FIRST"
    "ISREDIT (line) = LINE .ZCSR"
    Parse var line w1 w2 '.'
    line = '       'w1' 'w2'-R  REDEFINES' w2'.'
    "ISREDIT LINE .ZCSR = (line)"

    "ISREDIT F ' 01 ' 7  NEXT"
    If rc = 0 Then "ISREDIT DELETE ALL NX .ZCSR .ZLAST"

    "ISREDIT X ' REDEFINES ' ALL"
    "ISREDIT X ' 03 ' 13 ALL"
    j = 0
    Do i=1 To linei.0
        If Substr(linei.i,1,1) = '*' Then Iterate
        If Word(linei.i,2) /= 'DFHMDF' Then Iterate
        line = Substr(linei.i,1,71)
        Parse VAR line var . '),' cob_name .
        cob_name = Strip(cob_name)
        If cob_name = '' Then Iterate
        If cob_name = mapcnig Then Iterate
        "ISREDIT CHANGE ' "var"' ' "cob_name"-' ALL"
        j = j+1
        linex.j = cob_name'-'
    End
    "ISREDIT F ' 01 ' 7  ALL"
    "ISREDIT DELETE ALL X"
    "ISREDIT CHANGE ' PICTURE ' ' PIC ' ALL"
    "ISREDIT X ALL"
    Do i=1 To j
        "ISREDIT FIND ' "linex.i"' ALL"
    End
    "ISREDIT FLIP"
    i = 0
    picv = 0
    Do Forever
        i = i +1
        "ISREDIT (line) = LINE" i
        If rc /= 0 Then Leave
        "ISREDIT (xstat) = XSTATUS" i
        If xstat = "X" |  Word(line,1) = '01' Then Do
            If picv > 0 Then Do
                linex = '           02  FILLER                  PIC',
                        'X('picv').'
                "ISREDIT LINE_BEFORE" i "= (linex)"
                picv = 0
                i = i +1
            End
            Iterate
        End
        Parse VAR line . ' PIC ' pic '.' .
/*      If pic = '' Then Parse VAR line . ' PICTURE ' pic '.' .       */
        If Index(pic,'(') > 0 Then Parse VAR pic . '(' pic ')' .
        Else pic = Length(pic)
        If Index(line,' COMP ') > 0 Then pic = 2
        picv = picv + pic
        linex = '*'Substr(line,2)
        "ISREDIT LINE" i "= (linex)"
/*      linex = '           02  FILLER PIC X('picv').'                */
/*      "ISREDIT LINE_AFTER" i "= NOTELINE (linex)"                   */
    End
    If picv > 0 Then Do
        linex = '           02  FILLER                  PIC',
                'X('picv').'
        "ISREDIT LINE_AFTER .ZLAST = (linex)"
    End
    "ISREDIT RESET"
    "ISREDIT X '*' 1 1 ALL"
    "ISREDIT DELETE ALL X"

    "ISREDIT (caps) = CAPS"
    "ISREDIT CAPS = OFF"
    line = '      'Copies('*',66)
    "ISREDIT LINE_BEFORE 1  = (line)"
    line = '      'Substr('*',1,65)'*'
    "ISREDIT LINE_AFTER 1 = (line)"
    line = '      * This MAP redefinition was created using macro'
    line = line "'"xcmd"' against"
    line = Substr(line,1,71)'*'
    "ISREDIT LINE_AFTER 2 = (line)"
    line = '      * BMS map:'
    line = Substr(line,1,71)'*'
    "ISREDIT LINE_AFTER 3 = (line)"
    line = "      *    "mapbmss" on" Date('E')"."
    line = Substr(line,1,71)'*'
    "ISREDIT LINE_AFTER 4 = (line)"
    line = '      'Substr('*',1,65)'*'
    "ISREDIT LINE_AFTER 5 = (line)"
    line = '      'Copies('*',66)
    "ISREDIT LINE_AFTER 6 = (line)"
    "ISREDIT CAPS = (caps)"

    "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 To last
        "ISREDIT (line) = LINE" i
        xx = Index(line,' PIC ')
        If xx = 0 Then xx = Index(line,' PICTURE ')
        If xx = 0 Then Iterate
        Parse VAR line w1 w2 w3 w4 w5 w6
        pad = 2 * w1
        line = Substr(' ',1,6) Substr(' ',1,pad)w1'  'w2
        If w3 = 'COMP' Then len = 46
        Else                len = 51
        Line = Substr(line,1,len) w3 w4 w5 w6
        "ISREDIT LINE" i "= (line)"
        If Length(w2) > 30 Then Do
            line = '* Line 'i',',
                   'var "'w2'" greater than 30 bytes.'
            "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (line)"
        End
    End

    If mapevoc = 'Y' Then,
        "ISREDIT BFIMRO"
    If mapseqn = 'Y' Then,
        "ISREDIT NO 1-6 100 100 AP ALL"
    If mapdilr = 'Y' Then,
        "ISREDIT C '-I ' '   ' ALL"

    "VPUT ("vars") PROFILE"

exi1:
    "ISREDIT USER_STATE = (status)"
    Exit

erx1:
    "ISPEXECT SETMSG MSG(GC009)"
    Signal exi1

get_source:
    dd = 'BFIMRDD'
    Address TSO "ALLOC F("dd") DSN("idsn") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    Return 0

get_bms_map:
    dd = 'BFIMRDD'
    Address TSO "ALLOC F("dd") DSN("mapbmss") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    Return 0

put_noteline:
    Trace
    "ISREDIT RESET"
    x = Msg(x_msg)
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"
    Return 0

errproc:
    Call Off Error
    Return Sigl

nl:
    Parse Arg noteline
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (noteline)"
    Return 0

help:
    x_msg = Msg()
    x     = Msg('Off')
    Trace o
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

    BFIMR (BMS map From Ispf Make Redefine) is a routine to suplement
    BFI for generating COBOL source redefines to permit map fields
    to be addressed by their full COBOL names.

                             *****

    NOTE - To use this facility, the BMS map must be defined as an
           I/O map, ie. "MODE=INOUT,".

                             *****
    To execute this macro you may pass the following parameters:
      "?"       - For help but you already know this you clever
                  person you. Don't you???
      BMS_map   - Fully qualified BMS macro source.
                  If this parameter is missing, a panel will be
                  displayed to permit dataset(member) entry.
                  This file will be read to assist in the
                  redefinition end COBOL name generation. See
                  requirements below.
      source    - Fully qualified  COBOL source generated by the
                  BMS map assembly process. The supplied file will
                  be copied into the current member for subsequent
                  processing.
                  If this parameter is missing (either as an initial
                  parameter or panel entry from above) the current
                  member being edited/viewed will be assumed to be a
                  copy of the source and processed accordingly.
                  Caution is advised as this is a destructive macro
                  and may cream an innocent record layout if misused.
                  Suggest alway use in view mode and use explicit
                  saves to avoid those silly little accidents that
                  we always say @#*! to AFTER the event and don't
                  have the OOPS button functioning.

    This macro requires the COBOL field name on the first line of
    the DFHMDF macro (with at least one space after the last comma
    and before the continuation indicator).
    If BFI is used to design the map using ISPF panels and
    subsequent conversion to BMS map, if you use the COBOL name
    inclusion feature, the COBOL name will be isserted on the
    appropriate line starting in column 40. (For further details on
    the COBOL name feature refer to the help screens for the BFI
    macro/command.
    If you do not like COBOL names mentioned in the BMS map (would
    be bloody good doco but) and use the BFI macro to create BMS
    map, you can create a temporary BMS map with the names and use
    it to build the redefinition copy-book.

    You have the option to attempt to evaluate occurances. Select
    "Y" on the parameter entry panel or run macro "BFIMRO" stand
    alone. For this feature to work, the BMS map's COBOL names
    should be the same so that the process can pick up duplicate
    (or block duplicate names) and treat them a occurances.
    Watch this feature as if an occurance is detected on like COBOL
    names, evaluated occurances are assumed to be a mirror image and
    no validation is performed.

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Call put_noteline

    Exit
