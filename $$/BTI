/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* BTI:(Bms map To Ispf panel).                                       */
/*                                                                    */
/* For further details refer to bottom or use parameter of "?".       */
/*                                                                    */
/* Parameters:                                                        */
/*   parm1  - BMS map name (must be in the same directory for PC).    */
/*                             - or -                                 */
/*            "?" for help (Invokes BFIDH Opt.10)                     */
/*   parm2  - "NOL" or "OL". Output to Literal conversion.            */
/*   parm3  - "PC" if running on a PC. This is required as certain    */
/*            syntax differ from mainframe to PC.                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
bti_ver='2.00'
    Arg parm#;Address ISPEXEC "CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal ini1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then Do;ima_macro=1;Address ISREDIT;End
    "(status)=USER_STATE";"(caps)=CAPS";"CAPS=OFF"

ini1:
/*  Address ISPEXEC "CONTROL ERRORS CANCEL"                           */

    zedsmsg=
/*  PARM1 = 'KPM2855'                                                 */
/*  PARM2 = 'PC'                                                      */
    Parse Upper VAR parm# parm1 parm2 parm3
    Parse SOURCE op_sys op_mode xcmd dd_name dsn_name .


    mapgenp='N'                             /* Generate prefix        */

    If parm1='?' Then Do;x=Help_BTI();Exit;End

    If parm1='/TEST' Then Do
        "TP &PARM1 &PARM2";Exit
    End

/*  atrb='_+`!@#$%¬{}?<>/|\:;*()~'                                    */
    atrb='%+_$`!@#¬{}?<>/\:;*()~'

    mapbmss=parm1
    If parm2='PC'  Then pc='Y'
    Else If parm3='PC' Then pc='Y';Else pc='N'
    vars="MAPOLIT MAPGENP MAPPREF MAPSEQ MAPREMR MAPDCOLI MAPDCOLO",
         'MAPPADX MAPPAD9'
    Address ISPEXEC "VGET ("vars") PROFILE"
    If mapdcolo='' Then mapdcolo='WHITE'    /* Output default color   */
    If mapdcoli='' Then mapdcoli='RED'      /* Input deefault color   */
    If mapolit ='' Then mapolit ='N'
    If mapgenp ='' Then mapgenp ='N'
    If mapremr ='' Then mapremr ='Y'
    If mappadx ='' Then mappadx ='X'
    If mappad9 ='' Then mappad9 ='9'
    If mapbmss ='' Then Do
        Address ISPEXEC "VGET (mapbmss) PROFILE"
        If mapbmss='' Then Do
            "(mapbmss)=DATASET"
            mapbmss="'"mapbmss"(........)'"
        End
        Signal scr1
    End
    Signal process_it_1

scr1:zcmd=
    Address ISPEXEC "DISPLAY PANEL(BTIP)"
    If rc/=0 Then Do
        zedlmsg='BMS map location entry screen abandoned.'
        Signal erx1
    End
    If zcmd='?' Then Do
        x=Help_BTI()
        Signal scr1
    End

process_it_1:
    If mapdcolo='' Then defcol=;Else defcol='COLOR('mapdcolo')'
    If mapdcoli='' Then defcoli=;Else defcoli='COLOR('mapdcoli')'

    If Sysdsn(mapbmss)/='OK' Then Do
        zedlmsg=Sysdsn(mapbmss)
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Signal scr1
     End
     act = ''
     Parse Upper VAR zcmd cmd parm1
     If Substr(cmd,1,1) = 'V' Then act = 'VIEW'
     If Substr(cmd,1,1) = 'E' Then act = 'EDIT'
     If Substr(cmd,1,1) = 'B' Then act = 'BROWSE'
     If act /= '' Then Do
         If parm1 /= '' Then Do
             Parse VAR mapbmss dsn '('
             If Substr(dsn,1,1) = "'" Then dsn = Substr(dsn,2)
             dsn = "'"dsn"("Strip(parm1)")'"
         End
         Else dsn = mapbmss
         act "DATASET("dsn")"
         Signal scr1
     End

     Call get_bms_map

    "(scan#)=SCAN";"RESET";"DEL ALL NX"
    If parm3='PC' Then "COPY" parm1
    Else Call load_copy

    line.=

/*--------------------------------------------------------------------*/
/* Chech to ensure that potential attribute bytes are not part of the */
/* BMS map (either variable name or text literal).                    */
/*--------------------------------------------------------------------*/

    al   = Length(atrb)
    Do i=1 To al
        atrbb = Substr(atrb,i,1)
        "FIND '"atrbb"' FIRST"
        If rc /= 0 Then Iterate
        atrb = Translate(atrb,' ',atrbb)
        ch = ch atrbb
    End

/*--------------------------------------------------------------------*/
/* Get mapset name  a BMS map set name.                               */
/*--------------------------------------------------------------------*/
    "FIND ' DFHMSD ' FIRST"
    If rc /= 0 Then Do
        zedlmsg = "'DFHMSD' not found. Get your act together.."
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Exit
    End
    "(line) = LINE .ZCSR"
    Parse VAR line maps .

/*--------------------------------------------------------------------*/
/* Get map name and from the macro, get the screen dimensions.        */
/*--------------------------------------------------------------------*/
    "FIND ' DFHMDI ' ALL"
    If rc /= 0 Then Do
        zedlmsg = "'DFHDMI' not found. Get your act together.."
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Exit
    End
    "(find#) = FIND_COUNTS"
    Select
        When find# > 2 Then Do
            zedlmsg = find#+0" 'DFHDMI' entries found. Please break",
                     "mapsets up into individual maps and retry" xcmd,
                     "command."
            Address ISPEXEC "SETMSG MSG(ISRZ001)"
            Signal ext1
        End
        When find# = 2 Then Do
            "FIND ' DFHMDI ' LAST"
            "(line) = LINE .ZCSR"
            If Index(line,' TYPE=FINAL') = 0 Then Do
                zedlmsg = find#+0" 'DFHDMI' entries found. Please break",
                         "mapsets up into individual maps and retry" xcmd,
                         "command."
                Address ISPEXEC "SETMSG MSG(ISRZ001)"
                Signal ext1
            End
            Else "FIND ' DFHMDI ' FIRST"
        End
        Otherwise NOP
    End
    "(lin#) = LINENUM .ZCSR"
    linem = ''
    Do Forever
        "(line) = LINE" lin#
        lin# = lin# + 1
        Parse VAR line line 71 cc 73 .
        If linem = '' Then linem = Strip(line,'T')
        Else               linem = linem||Strip(line)
        If cc = ' ' Then Leave
    End
    Parse VAR linem mapn . 'SIZE=(' #lin ',' #col ')' .
/*  Say maps mapn #lin #col line                                      */

/*--------------------------------------------------------------------*/
/* Get each unit of output and string into one long variable for      */
/* subsequent processing.                                             */
/*--------------------------------------------------------------------*/
/*  "MACRO"                                                           */
/*  "(status) = USER_STATE"                                           */
    Do i=1 To 99999
        "FIND ' DFHMDF '"
        If rc /= 0 Then Leave
        "(lin#) = LINENUM .ZCSR"
        line.i = ''
        Do Forever
            "(line) = LINE" lin#
            lin# = lin# + 1
            If Substr(line,1,1) = '*' Then Iterate
            Parse VAR line line 72 cc 73 .
            If line.i = '' Then Do
                line.i = line
                If Index(line.i," INITIAL='") = 0 Then,
                    Parse VAR line.i . . . na.i .
                Else na.i = ''
            End
            Else line.i = line.i||Substr(line,16)
            If cc = ' ' Then Leave
        End
    End

    line.0=i-1
    Parse Value '' With cursor fset inits initu zvars

/*--------------------------------------------------------------------*/
/* Delete all lines and process each unit for appropriate position    */
/* and attributes, (type, intensity, color and highlight).            */
/* Writes a line of data for each each unit's attribute combination.  */
/*--------------------------------------------------------------------*/
    "DEL ALL NX"
    If mapgenp='Y' Then Do
        seq=mapseq-1;seql=Length(mapseq)
        If Length(mappref)+seql>7 Then seql=7-Length(mappref)
    End
    zv.=
    Do j=1 To line.0
        If mapgenp = 'Y' Then Do
            seq = seq +1
            n.j = mappref || Right(seq,seql,'0')
        End
        Else n.j  = Substr(line.j,1,7)
        on.j = n.j
        data = Substr(line.j,8)
/*--------------------------------------------------------------------*/
/*      Parse VAR data 'POS=(' lin.j ',' col.j ')' .                  */
/*      If Datatype(lin.j) = 'NUM' Then lin.j = lin.j +0              */
/*      If Datatype(col.j) = 'NUM' Then col.j = col.j +0              */
        Parse VAR data 'POS=' xx .
        Parse VAR xx '(' lin.j ',' col.j ')' .
        If lin.j='' Then Do
            Parse VAR xx lin.j ',' .
            col.j=1
        End
        If Datatype(lin.j) = 'NUM' Then lin.j = lin.j +0
        If Datatype(col.j) = 'NUM' Then col.j = col.j +0
        If lin.j=0 Then lin.j=1
        If col.j=0 Then col.j=1
/*--------------------------------------------------------------------*/
        Parse VAR data 'ATTRB=(' atrb.j ')' .
        Parse VAR data 'LENGTH=' len.j ',' .
        Parse VAR len.j len.j .
        Parse VAR data 'COLOR=' clr.j ',' .
        Parse VAR clr.j clr.j .
        Parse VAR data 'HILIGHT=' hi.j ',' .
        Parse VAR hi.j hi.j .
        Parse VAR data "PICOUT='" po.j "'" .
        Parse VAR data "PICIN='" pi.j "'" .
        Parse VAR data "INITIAL='" iv "'" .
/*      Parse VAR data "NAME=" na.j "," .                             */
        n.j   = Strip(n.j)
        len.j = Strip(len.j)
        If n.j /= '' &,
             Index(atrb.j,'UNPROT') = 0 Then atrb.j = atrb.j',OUT'
        If n.j/='' & Index(data,"INITIAL='")>0 Then Do
            If Strip(iv)='' Then inits=inits','n.j;Else initu=initu','n.j
        End
        Call parse_atrb
        If n.j /= '' & Length(n.j) > len.j Then Do
            makez = 'N'
            Select
               When Index(atrb.j,'DRK') > 0 Then NOP
               When mapolit = 'N' Then makez = 'Y'
               When na.j /= ''    Then makez = 'Y'
               When Index(atrb.j,'OUT,') = 0 Then makez = 'Y'
               When Index(atrb.j,'OUT,') > 0 & iv = '' Then makez = 'Y'
               Otherwise NOP
            End
            If makez = 'Y' Then Do
                zvars = zvars','n.j
                zvars = 'Y'
                zv.j = Right(lin.j,2,'0') || Right(col.j,2,'0')'.'n.j
                n.j = 'Z'
            End
        End
        Call parse_init
        a.j = Left(atrb.j,20) || Left(clr.j,10) || hi.j
        aj  = "." a.j
        "LINE_AFTER .ZLAST = (aj)"
    End
/*--------------------------------------------------------------------*/
/* If zvars found, sort them to ensure the placeholder is in screen   */
/* position order.                                                    */
/*--------------------------------------------------------------------*/
    If zvars /= '' Then Do
        zvars = ''
        Do Forever
            sorted = 'Y'
            Do i=1 To j-1
                ii = i +1
                If zv.i > zv.ii Then Do
                    sorted = 'N'
                    x = zv.ii
                    zv.ii = zv.i
                    zv.i  = x
                End
            End
            If Sorted = 'Y' Then Leave
        End
        Do i=1 To j
            If zv.i = '' Then Iterate
            Parse VAR zv.i . '.' xx
            zvars = zvars','xx
        End
    End

/*--------------------------------------------------------------------*/
/* The attribute combinations are sorted and the duplicates are       */
/* eliminated using macro 'XDUP' to generate a list of uninue         */
/* attribute combinations.                                            */
/* The default ISPF attributes are then searched for (%+_) and set up */
/* if matched.                                                        */
/* Thereafter each unique combination is give an attribute byte from  */
/* the following selection '_+`!@#$%/{}?[]<>/|\:;*()~' with any       */
/* conflicts already removed.                                         */
/*--------------------------------------------------------------------*/
    def_atr=
    "SORT 3 40"
    "XD           1 80"
    "DEL ALL X"
    "F 'UNPROT,BRT          RED       OFF' FIRST"
    If rc = 0 Then Do
        If Index(atrb,'_') > 0 Then Do
            "C '.' '_' 1 1 .ZCSR .ZCSR ALL"
            atrb = Translate(atrb,' ','_')
        End
    End
    "F 'TEXT,BRT            NEUTRAL   OFF' FIRST"
    If rc/=0 Then "F 'TEXT,BRT,ASKIP      NEUTRAL   OFF' FIRST"
    If rc/=0 Then "F 'TEXT,BRT            DEFAULT   OFF' FIRST"
    If rc/=0 Then "F 'TEXT,BRT,ASKIP      DEFAULT   OFF' FIRST"
    If rc=0 Then Do
        If Index(atrb,'%') > 0 Then Do
            "C '.' '%' 1 1 .ZCSR .ZCSR ALL"
            atrb = Translate(atrb,' ','%')
        End
    End
    "F 'TEXT,NORM           BLUE      OFF' FIRST"
    If rc/=0 Then "F 'TEXT,NORM,ASKIP     BLUE      OFF' FIRST"
    If rc/=0 Then "F 'TEXT,NORM           DEFAULT   OFF' FIRST"
    If rc/=0 Then "F 'TEXT,NORM           NEUTRAL   OFF' FIRST"
    If rc/=0 Then "F 'TEXT,NORM,ASKIP     DEFAULT   OFF' FIRST"
    If rc/=0 Then "F 'TEXT,NORM,ASKIP     NEUTRAL   OFF' FIRST"
    If rc = 0 Then Do
        If Index(atrb,'+') > 0 Then Do
            "C '.' '+' 1 1 .ZCSR .ZCSR ALL"
            atrb = Translate(atrb,' ','+')
            def_atr='+'
        End
    End
    Else Do
        If Index(atrb,'+') > 0 Then Do
            line = '+ TEXT,NORM           NEUTRAL   OFF'
            atrb = Translate(atrb,' ','+')
            def_atr='+'
        End
        Else,
            line = '. TEXT,NORM           NEUTRAL   OFF'
        "LINE_BEFORE .ZFIRST = (line)"
    End
    "(#ats) = LINENUM .ZLAST"
    j = 1
    Do i=1 to #ats
        "(line) = LINE" i
        If Substr(line,1,1) /= '.' Then Iterate
        Do Forever
            j = j + 1
            If j > al Then Do
                Say "More Atrbiute combinations than reserved bytes.",
                    "See can be done with variable 'atrb' in",
                    "this routine."
                Signal ext1
            End
            atrbb = Substr(atrb,j,1)
            If atrbb /= ' ' Then Leave
        End
        "CURSOR =" i 0
        "C '.' '"atrbb"' 1 1 .ZCSR .ZCSR ALL"
        "(line) = LINE .ZCSR"
        linea.i = line
    End

    #atrb    = atrb

/*--------------------------------------------------------------------*/
/* Select the appropriate unique attribute byte to each unit of ouput.*/
/* and output each detail in into the member for subsequent sorting.  */
/*--------------------------------------------------------------------*/
    Do j=1 To line.0
        "F '"a.j"' FIRST"
        If rc /= 0 Then Do
            Say "How can this happen. '"a.j"' not found."
            Signal ext1
        End
        "(line) = LINE .ZCSR"
        Parse VAR line ab.j .
        nl= Right(j,3,'0')')' Right(lin.j,2) Right(col.j,2) ab.j,
            Right(len.j,3,'0') Substr(n.j,1,8) iv.j
        nl.j = nl
/*      x = nl(nl)                                                    */
    End
    If fset  /='' Then fset  ="&FSET    = '("Substr(fset,2)")'"
    If initu /='' Then initu ="&INITU   = '("Substr(initu,2)")'"
    If inits /='' Then inits ="&INITS   = '("Substr(inits,2)")'"
    If zvars /='' Then zvars =".ZVARS   = '("Substr(zvars,2)")'"

/*--------------------------------------------------------------------*/
/* Set the ISPF panel attribute syntax for each unique byte.          */
/*--------------------------------------------------------------------*/
    atb# = ''
    att# = ''
    Do i=1 To #ats
        typ = 'TYPE(TEXT)'
        int = 'INTENS(LOW)'
        col = 'COLOR(BLUE)'
        pad = ''
        hil = ''
        sk  = ''
        num = ''
        cap = ''
        "(line) = LINE" i
        Parse VAR line atb 3 atrb 22 col 32 hi .
        atb = Strip(atb)
        col = Strip(col)
        If Index(atrb,'BRT') > 0    Then int = 'INTENS(HIGH)'
        If Index(atrb,'DRK') > 0    Then int = 'INTENS(NON)'
        If Index(atrb,'NORM') > 0   Then int = 'INTENS(LOW)'
        If Index(atrb,'OUT') > 0    Then Do
            typ = 'TYPE(OUTPUT)'
            cap = 'CAPS(OFF)'
            pad = 'PAD(&PADX)'
        End
        If Index(atrb,'UNPROT') > 0 Then typ = 'TYPE(INPUT)'
        Else,
            If Index(atrb,'ASKIP') > 0  Then sk  = 'SKIP(ON)'
        If Index(atrb,'NUM') > 0 & pc = 'N' Then Do
            num = 'NUMERIC(ON)'
            pad = 'PAD(&PAD9)'
        End
        If Substr(hi,1,1) = 'R'     Then hil = 'HILITE(REVERSE)'
        If Substr(hi,1,1) = 'U'     Then hil = 'HILITE(USCORE)'
        If Substr(hi,1,1) = 'B'     Then hil = 'HILITE(BLINK)'
        Select
            When (Substr(col,1,1) = 'R') Then col = 'COLOR(RED)'
            When (Substr(col,1,1) = 'T') Then col = 'COLOR(TURQ)'
            When (Substr(col,1,1) = 'Y') Then col = 'COLOR(YELLOW)'
            When (Substr(col,1,1) = 'W') Then col = 'COLOR(WHITE)'
            When (Substr(col,1,1) = 'P') Then col = 'COLOR(PINK)'
            When (Substr(col,1,1) = 'G') Then col = 'COLOR(GREEN)'
            When (Substr(col,1,1) = 'B') Then col = 'COLOR(BLUE)'
            When (Substr(col,1,1) = 'N') Then col = defcol
            Otherwise Do
              If col = '' Then Do
                Select
                   When atrb = 'OUT,BRT'  Then col = 'COLOR(WHITE)'
                   When atrb = 'OUT,BRT'  Then col = 'COLOR(WHITE)'
                   When atrb = 'OUT,NORM' Then col = defcol
                   Otherwise                   col = defcol
                End
              End
              Else col = defcol
            End
        End
        If int = 'INTENS(NON)' & typ = 'TYPE(OUTPUT)' Then,
            typ = 'TYPE(TEXT)'
        If Index(atrb,'UNPROT') > 0 Then col = defcoli
        If typ = 'TYPE(TEXT)' Then sk  = 'SKIP(ON)'
        If typ = 'TYPE(OUTPUT)' Then num  = ''
        al.i = atb Left(typ,12) Left(int,12) Left(sk,8),
               Left(col,13) Strip(hil cap) pad
        If num /= '' Then num.i = Strip(al.i) num
        Else              num.i = ''

        atb# = atb# || atb
        att# = att# || Substr(typ,6,1)
    End

/*--------------------------------------------------------------------*/
/* Remove the attribute bytes' lines and sort the unit entities.      */
/*--------------------------------------------------------------------*/
    "CURSOR = "#ats 0
    "DEL ALL NX .ZFIRST .ZCSR"
    "SORT 6 10"

/*--------------------------------------------------------------------*/
/* Set the ISPF panel attribute syntax for each unique byte, then     */
/* clear the member.                                                  */
/* Set syntax and populate the attribute section of the ISPF panel.   */
/*--------------------------------------------------------------------*/
    Do i=1 To line.0
        Parse VAR nl.i . 6 lin.i 9 col.i 12 ab.i 14 len.i 18 n.i 27 iv.i
        lin.i = Strip(lin.i)
        col.i = Strip(col.i)
        len.i = Strip(len.i)
        ab.i  = Strip(ab.i)
        n.i   = Strip(n.i)
        iv.i  = Strip(iv.i,'t')
        If n.i /= '' Then f.i = n.i
        Else              f.i = iv.i
    End
    If lin.1='' Then Do;lin.1=1;col.1;End
    "ISREDIT LINE_AFTER .ZLAST = ')ATTR'"
    If def_atr='' Then Do
        "LINE_AFTER .ZLAST = ')ATTR'"
        "F 'TEXT' FIRST"
        "(line) = LINE .ZCSR"
        stopatrb=Substr(line,1,1)
    End
    Do i=1 To #ats
        If num.i /= '' Then Do
            If parm3 = 'PC' Then Do
                "LINE_AFTER .ZLAST = '/* "num.i" */'"
                num.i = al.i
            End
            xx = num.i
        End
        Else xx=al.i
        If def_atr='' Then Do
/*          If Wordpos('TYPE(TEXT)',xx)>0 & stopatrb='' Then,         */
/*              Parse var xx stopatrb .                               */
            If Wordpos('INTENS(LOW)',xx)>0 & stopatrb/='' &,
                Index(xx,'HILITE(')=0 Then Parse var xx stopatrb .
        End
        If Length(xx)>80 Then Do
            xx=Space(xx)
            If Length(xx)<=80 Then noteline=,
                '* Spaces removed to fit in line.'
            Else noteline=,
                '* Spaces removed but still >80 chars. Will need action.'
        End;Else noteline=
        "LINE_AFTER .ZLAST = (xx)"
        If noteline/='' Then "LINE_BEFORE .ZLAST=NOTELINE (noteline)"
    End
    "LINE_AFTER .ZLAST = ')BODY'"

/*--------------------------------------------------------------------*/
/* Initialise the 24 lines of output (in case it is not referenced).  */
/*--------------------------------------------------------------------*/
    If def_atr/='' Then stopatrb=def_atr
    ol.=stopatrb

/*--------------------------------------------------------------------*/
/* Build each line from it's sorted units usin line no. as the key.   */
/*--------------------------------------------------------------------*/
    j=lin.1+0
    line=
    Do i=1 To line.0
        iz=lin.i
        Parse VAR atrb.i az ',';If az='OUT' Then az=stopatrb;Else az=
        If hi.i/='OFF' Then az=stopatrb
        If mapolit = 'N' Then olay = ab.i||Substr(f.i,1,len.i)az
        Else Do
/*--------------------------------------------------------------------*/
/* Try to find out whether the field is an output field or text       */
/* represented as an output field (PAYSYS idiosincracy). If COBOL     */
/* name present it is an output field.                                */
/*--------------------------------------------------------------------*/
            xx = Index(atb#,ab.i)
            na.i "= ''"
            If az='DRK' > 0 Then Do
                If zv.i = '' Then olay = ab.i || Substr(iv.i,1,len.i)
                Else              olay = ab.i || Substr(f.i,1,len.i)
            End
            Else Do
                If xx > 0 & (Substr(att#,xx,1) = 'O' & iv.i /= '') &,
                  na.i = '' Then olay = stopatrb || Substr(iv.i,1,len.i)
                Else Do
                    xx=Substr(ol.iz,col.i+len.i+1,1)
/*                  xx = 0                                            */
                    If Index(atb#,xx) = 0 Then
                        olay = ab.i||Substr(f.i,1,len.i) || stopatrb
                    Else
                        olay = ab.i||Substr(f.i,1,len.i)
                End
            End
        End
        ol.iz = Overlay(olay,ol.iz,col.i)
    End

/*--------------------------------------------------------------------*/
/* Output the 'BODY' section of the ISPF panel.                       */
/*--------------------------------------------------------------------*/
    Do i=1 To #lin
        line = ol.i
        "LINE_AFTER .ZLAST = (line)"
    End

/*--------------------------------------------------------------------*/
/* Output the rest of the cosmetics.                                  */
/*--------------------------------------------------------------------*/
    "LINE_AFTER .ZLAST = ')INIT'"
    If zvars /= '' Then Do
        Do Forever
            Parse VAR zvars line 62 xtra ',' zvars
            If zvars = '' Then Leave
            line = line || xtra', +'
            "LINE_AFTER .ZLAST = (line)"
            zvars = "           "zvars
        End
        line = line || xtra
        "LINE_AFTER .ZLAST = (line)"
    End
    If cursor /= '' Then ,
        'ISREDIT LINE_AFTER .ZLAST = ".CURSOR = '''cursor'''"'
    xx="&PADX    = '"mappadx"'"
    "LINE_AFTER .ZLAST = (xx)"
    xx="&PAD9    = '"mappad9"'"
    "LINE_AFTER .ZLAST = (xx)"
    If inits/='' Then Do
        Do Forever
            Parse VAR inits line 62 xtra ',' inits
            If inits='' Then Leave
            line=line || xtra', +'
            "LINE_AFTER .ZLAST=(line)"
            inits="           "inits
        End
        line=line || xtra
        "LINE_AFTER .ZLAST=(line)"
    End
    If initu/='' Then Do
        Do Forever
            Parse VAR initu line 62 xtra ',' initu
            If initu='' Then Leave
            line=line || xtra', +'
            "LINE_AFTER .ZLAST=(line)"
            initu="           "initu
        End
        line=line || xtra
        "LINE_AFTER .ZLAST=(line)"
    End
    "LINE_AFTER .ZLAST = ')PROC'"
    If Length(fset) > 0 Then Do
        Do Forever
            Parse VAR fset line 62 xtra ',' fset
            If fset = '' Then Leave
            line = line || xtra', +'
            "LINE_AFTER .ZLAST = (line)"
            fset =  "           "fset
        End
        line = line || xtra
        "LINE_AFTER .ZLAST = (line)"
    End

    "LINE_AFTER .ZLAST = ')END'"

/*--------------------------------------------------------------------*/
/* Now lets create variable equates for 'PICIN' equates.              */
/*--------------------------------------------------------------------*/
    Do i=1 To line.0
        If pi.i = '' Then Iterate
        line = Left("&I_"on.i,11) "= '"pi.i"'"
        "LINE_AFTER .ZLAST = (line)"
    End

/*--------------------------------------------------------------------*/
/* Now lets create variable equates for 'PICOUT' equates.             */
/*--------------------------------------------------------------------*/
    Do i=1 To line.0
        If po.i = '' Then Iterate
        line = Left("&O_"on.i,11) "= '"po.i"'"
        "LINE_AFTER .ZLAST = (line)"
    End

/*--------------------------------------------------------------------*/
/* Now lets create name aliases for 'NAME=' equates.                  */
/*--------------------------------------------------------------------*/
    Do i=1 To line.0
        If na.i = '' Then Iterate
        line = Left("&N_"on.i,11) "= '"na.i"'"
        "LINE_AFTER .ZLAST = (line)"
    End

/*--------------------------------------------------------------------*/
/* Now lets add the extracted mapset and mapname at the end for       */
/* rebuilds.                                                          */
/*--------------------------------------------------------------------*/
    "LINE_AFTER .ZLAST = ' '"
    line = Left("&M_MAPSET",11)" = '"maps"'"
    "LINE_AFTER .ZLAST = (line)"
    line = Left("&M_MAPNAME",11)" = '"mapn"'"
    "LINE_AFTER .ZLAST = (line)"

/*--------------------------------------------------------------------*/
/* Now lets put initial values to I/O fields in the )INIT section for */
/* ISPF displayin purposes.                                           */
/* NOTE: The '&I_*' and '&O_*' values after the )END is used to build */
/*       the respective PICIN and PICOUT values in the BMS map.       */
/*                                                                    */
/*--------------------------------------------------------------------*/
    "FIND ')PROC' 1 FIRST"
    "(lin#) = LINENUM .ZCSR"
    Do i=1 To line.0
        If n.i  = '' Then Iterate
        If iv.i = '' Then Iterate
        line = Left('&'on.i,8) "= '"iv.i"'"
        If Length(line) > 79 Then line = Substr(line,1,79)"'"
        "LINE_BEFORE "lin#" = (line)"
        lin# = lin# +1
    End

/*--------------------------------------------------------------------*/
/* Tidy up attributes as some may be redirected because of different  */
/* combinations.                                                      */
/*                                                                    */
/*--------------------------------------------------------------------*/
    If mapremr = 'Y' Then Do
        "FIND ')ATTR' 1 FIRST"
        "LABEL .ZCSR = .LATTR"
        "(#attr) = LINENUM .ZCSR"
        "FIND ')BODY' 1 FIRST"
        "LABEL .ZCSR = .LBODY"
        "(#body) = LINENUM .ZCSR"
        "FIND ')INIT' 1 FIRST"
        "LABEL .ZCSR = .LINIT"
        "(lin#) = LINENUM .ZCSR"
        Do i=#attr+1 To #body-1
            "(line) = LINE" i
            "F '"Word(line,1)"' ALL .LBODY .LINIT"
            If rc /= 0 Then "XSTATUS" i "= X"
        End
    End

    Call build_noteline

/*--------------------------------------------------------------------*/
/* Get out.                                                           */
/*--------------------------------------------------------------------*/
 ext1:
    Address ISPEXEC "VPUT (mapbmss" vars") PROFILE"
    "USER_STATE = (status)"
    Return 0

 erx1:
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Signal ext1

/*--------------------------------------------------------------------*/
/* Organise the attributes in order for sorting to eliminate dups.    */
/* This way you can assume free format in BMS map.                    */
/*                                                                    */
/*   type : intens : askip : num                                      */
/*                                                                    */
/*--------------------------------------------------------------------*/
parse_atrb:
    Select
        When (Index(atrb.j,'UNPROT') > 0) Then atrb.0 = 'UNPROT'
        When (Index(atrb.j,'OUT')    > 0) Then atrb.0 = 'OUT'
        Otherwise                              atrb.0 = 'TEXT'
    End
    Select
        When (Index(atrb.j,'BRT')    > 0) Then atrb.0 = atrb.0||',BRT'
        When (Index(atrb.j,'DRK')    > 0) Then atrb.0 = atrb.0||',DRK'
        Otherwise                              atrb.0 = atrb.0||',NORM'
    End
    If Index(atrb.j,'ASKIP') > 0 Then atrb.0 = atrb.0||',ASKIP'
    If Index(atrb.j,'NUM')   > 0 Then atrb.0 = atrb.0||',NUM'
    If Index(atrb.j,'IC')    > 0 Then cursor = n.j
    if Index(atrb.j,'FSET')  > 0 Then fset   = fset','n.j
    atrb.j = atrb.0

    Return 0

/*--------------------------------------------------------------------*/
/* Parse data for the initialisation value. This is established by    */
/* the data between 'INITIAL=' and the next keyword.                  */
/*--------------------------------------------------------------------*/
parse_init:
    is = Index(data,'INITIAL=') +8
    If is = 8 Then Do
        iv.j = ''
        Return 0
    End
    ie = Length(data) +2
    x  = Index(data,'POS=(')
    If x > is & x < ie Then ie = x
    x  = Index(data,'ATTRB=(')
    If x > is & x < ie Then ie = x
    x  = Index(data,'LENGTH=')
    If x > is & x < ie Then ie = x
    x  = Index(data,'COLOR=')
    If x > is & x < ie Then ie = x
    x  = Index(data,'HILIGHT=')
    If x > is & x < ie Then ie = x
    x  = Index(data,'PICOUT=')
    If x > is & x < ie Then ie = x
    x  = Index(data,'PICIN=')
    If x > is & x < ie Then ie = x
    x  = Index(data,'NAME=')
    If x > is & x < ie Then ie = x
    iv.j = Substr(data,is+1,ie-is-1)
    iv.j  = Strip(iv.j,'t')
    il = Length(iv.j)
    If Substr(iv.j,il,1) = ',' Then Do
        iv.j  = Substr(iv.j,1,il-1)
        il = il-1
    End
    If Substr(iv.j,il,1) = "'" Then iv.j  = Substr(iv.j,1,il-1)
    Else Do
        il = Lastpos("'",iv.j)
        If il > 0 Then iv.j  = Substr(iv.j,1,il-1)
    End

    Return 0

get_bms_map:
    dd = 'BFIMRDD'
    Address TSO "ALLOC F("dd") DSN("mapbmss") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    Return 0

load_copy:
    Do i=1 to linei.0
        line=linei.i
        "LINE_AFTER .ZLAST=(line)"
    End
    Return 0

build_noteline:
    n_st = mark(2)
/*

    This ISPF panel is now ready to be tested in one of the following
    ways:
    1. Save it in a PDS that is concatenated to your ISPPLIB DD
       allocations.
       Use ISPF Dialog Test (option 7.2) to test/modify panel until it
       behaves for you.
    2. Leave it where it is and pass parameter /TEST to the BTI macro
       to test the panel in place. If the test fails and an error
       message is displayed, pass a second parameter of /C
       (ie. BTI /TEST /C). This will bring up the ISPF dialog error
       panel with a decriptive message of the error within the panel.
    Note, the dialog error panel (if applicable) will be displayed
    regardless of whether you use option 1 or 2 for testing.
    In either case don't forget to put a '/' in the appropriate field
    or you will be returned to the primary options panel.

*/
    n_en = mark(-2)
    Call output_notes; Return 0

output_notes:
    "(caps) = CAPS"; "CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "CAPS = (caps)"
    Return 0

nl: Parse Arg nl;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (nl)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
Help_BTI:
    #msg=Msg('Off')
    Address TSO "ALLOC F(BFIDH) DA('"$alkhlq()"."$alkllqr()"') SHR REU"
    zcmd=;Address ISPEXEC "SELECT CMD(%HELPDRVR BFIDH=BFIDH 10)"
    Address TSO "FREE F(BFIDH)"
    x=Msg(#msg)
    Return 0
