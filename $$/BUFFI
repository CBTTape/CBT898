/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* BUFFI:                                                             */
/*                                                                    */
/* Routine to convert ISPF panels to 3270 character data streams.     */
/*                                                                    */
/* For more details invoke the tutorial once the routine has been     */
/* executed.                                                          */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     BUFFI    - Self contained driver and edit macro(s).            */
/*                Will re-invoke itself as required.                  */
/*     BUFFIDH  - Dynamic tutorial.                                   */
/*                                                                    */
/*   Panels:                                                          */
/*     BUFFIP   - Main parameter entry panel.                         */
/*     HBUFF*** - (Obsolete tutorial panels.)                         */
/*                                                                    */
/*   Source:                                                          */
/*     BUFFATTR - Module of 'BUFFISPF'                                */
/*     BUFFBODY - Module of 'BUFFISPF'                                */
/*     BUFFCOMA - Module of 'BUFFISPF'                                */
/*     BUFFEXPD - Module of 'BUFFISPF'                                */
/*     BUFFHEAD - Module of 'BUFFISPF'                                */
/*     BUFFINIT - Module of 'BUFFISPF'                                */
/*     BUFFISPF - 3270 character data stream from an ISPF panel       */
/*     BUFFLOAD - Test 3270 character data stream from an ISPF panel  */
/*     BUFFTIME - Module of 'BUFFISPF'                                */
/*                                                                    */
/*   Skeleton:                                                        */
/*     BUFFIS   - Skeleton for batch job submission.                  */
/*                                                                    */
/*   LoadMOD:                                                         */
/*     BUFFISPF - Self explanitory.                                   */
/*     BUFFLOAD - Program to test 3270 data stream.                   */
/*                                                                    */
/*--------------------------------------------------------------------*/
Arg parm#
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm1,parm2,parm3)"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    Parse Upper VAR parm# parm1 parm2 parm3

ini1:
    hlq=$alkhlq();sysuid=Sysvar(syspref)

    "VGET buffispf SHARED";If buffispf='' Then Signal is_a_macro
not_a_macro:
    Parse SOURCE . . xcmd .;"VGET (zapplid)"
    If zapplid/='CSM' Then Do
        "SELECT CMD(%"xcmd_name parm#") NEWAPPL(CSM)"
        Return 0
    End
    loadlib=$alkload()
    ispfvars = "BUFFMEMB SCRNAME SCRSIZE ACCT ISPPLIB COPYLIB",
               "MAPTRAN LINE#ON MACROE EXTATR BUFFLINF BUFFLINL",
               "BUFFWCC"
    "ISPEXEC VGET ("ispfvars") PROFILE"
    member=buffmemb;tran=maptran
    xx='def_ex def_hd def_ac'
    Interpret "Parse Value $alkjc(xx) With" xx
    m=def_hd;id='B';acct=def_ac;xcl=def_ex
    If bufflinf='' Then Do
        bufflinf='01';bufflinl='24'
    End
    wcc=buffwcc;hxm='N'
    "VGET (zpf01)";szpf01=zpf01;zpf01='HELPDH';"VPUT (zpf01)"

scr1:
    zcmd=
    "DISPLAY PANEL(BUFFIP) MSG(&MSG) CURSOR(&CSR)"
    If rc/=0 Then Do
        If Wordpos(zcmd,'CAN CANCEL')>0 Then Return 4
        If hxm='N' Then Do
            buffmemb=member;maptran=tran;buffwcc=wcc
            "VPUT ("ispfvars") PROFILE"
        End
        zpf01=szpf01;"VPUT (zpf01)"
        Return 0
    End
    If Wordpos(zcmd,'CAN CANCEL')>0 Then Return 4

    If zcmd='TRACE' Then Do
        If parm1='OFF' Then Do
            trace='N';Trace Off
        End
        Else Do
            trace='Y';Trace R
        End
        Signal scr1
    End
    If zcmd = 'HELPDH' Then Do
        x=helpdrvr('BUFFIDH');Signal scr1
    End
    If zcmd='HXM' Then Do
        If hxm='N' Then Do
            buffmemb=member;maptran=tran;buffwcc=wcc
            "VPUT ("ispfvars") PROFILE"
            hxm='Y'
        End
        ispplib = 'CICS.ISPPLIB'
        member  = 'HXM'parm1
        copylib = 'XMEM.ASM'
        scrname = 'SCR'parm1
        scrsize = 'SCRSZ'parm1
        BUFFLINF = '04'
        BUFFLINL = '24'
        line#on = 'N'
        macroe  = 'N'
        extatr  = 'Y'
        wcc     = 'W'
        tran    = 'ASIS'
        Signal scr1
    End

    If SUBSTR(ispplib,1,1) = "'" Then ,
         sispplib = SUBSTR(ispplib,2,LENGTH(ispplib)-2)
    Else sispplib = sysuid'.'ispplib

    If SYSDSN("'"sispplib"'")/='OK' Then Do
        csr    = 'ISPPLIB'
        gc009  = "Dataset '"sispplib"' not found."
        Signal scr1e
    End

    If zcmd = 'EP' | zcmd = 'EDITP' Then Do
        If member/='' Then ,
             "ISPEXEC EDIT DATASET('&SISPPLIB(&MEMBER)')"
        Else "ISPEXEC EDIT DATASET('&SISPPLIB')"
        Signal scr1
    End

    If zcmd = 'TEST' Then Do
        If SYSDSN("'"sispplib"("member")'")/='OK' Then Do
            gc009  = SYSDSN("'"sispplib"("member")'")'.'
            Signal scr1e
        End
        "ISPEXEC CONTROL ERRORS RETURN"
        "ISPEXEC LIBDEF ISPPLIB DATASET ID('&SISPPLIB')"
        Do Forever
            zcmd = ''
            "ISPEXEC DISPLAY PANEL(&MEMBER)"
            If rc/=0 Then Leave
        End
        "ISPEXEC CONTROL ERRORS &CNTLACTN"
        Signal scr1
    End

    If zcmd = '' Then Do
        If SYSDSN("'"sispplib"("member")'")/='OK' Then Do
            csr = 'MEMBER'
            gc009  = "Dataset '"sispplib"("member")' not found."
            Signal scr1e
        End
    End

    If SUBSTR(copylib,1,1) = "'" Then ,
         scopylib = SUBSTR(copylib,2,LENGTH(copylib)-2)
    Else scopylib = sysuid'.'copylib
    If SYSDSN("'"scopylib"'")/='OK' Then Do
        csr    = 'COPYLIB'
        gc009  = "Dataset '"scopylib"' not found."
        Signal scr1e
    End
    If zcmd = 'EDITA' Then Do
        If SYSDSN("'"scopylib"("scrname")'")/='OK' Then Do
            gc009  = "'"scopylib"("scrname")' not found."
            csr    = 'SCRNAME'
            Signal scr1e
        End
        "ISPEXEC EDIT DATASET('&SCOPYLIB(&SCRNAME)')"
        Signal scr1
    End

    If zcmd = 'RUN' | zcmd = 'LOAD' Then Do
        If SYSDSN("'"scopylib"("scrname")'")/='OK' Then Do
            gc009  = "'"scopylib"("scrname")' not found."
            csr    = 'SCRNAME'
            Signal scr1e
        End
        buffispf = 'MACRO1'
        "ISPEXEC VPUT BUFFISPF SHARED"
        "ISPEXEC EDIT DATASET('&SCOPYLIB(&SCRNAME)') MACRO(BUFFISPF)"
        Signal scr1
    End

    csr = ''
    buffispf = 'MACRO3'
    "ISPEXEC VPUT BUFFISPF SHARED"
    "ISPEXEC EDIT DATASET('&SISPPLIB(&MEMBER)') MACRO(BUFFISPF)"
    "ISPEXEC VGET (CURSOR PARM1 PARM2 VARCOUNT RCODE) SHARED"
    "ISPEXEC VGET (LINF LINL) SHARED"
    If rc/=0 Then Signal scr1

    buffispf = 'MACRO4'
    "ISPEXEC VPUT BUFFISPF SHARED"
    "ISPEXEC EDIT DATASET('&SISPPLIB(&MEMBER)') MACRO(BUFFISPF)"
    "ISPEXEC VGET (PARM3 PARM4 FSETCNT RCODE) SHARED"
    If rc/=0 Then Signal scr1

    BUFFLINF = RIGHT(BUFFLINF,2,'0')
    BUFFLINL = RIGHT(BUFFLINL,2,'0')
    scrname = STRIP(scrname)
    parm = ''
    parm = parm||SUBSTR(scrname,1,8,' ')
    parm = parm||SUBSTR(scrsize,1,8,' ')
    parm = parm||SUBSTR(mo,1,8,' ')
    parm = parm||SUBSTR(lang,1,8,' ')
    parm = parm||SUBSTR(cursor,1,8,' ')
    parm = parm||SUBSTR(tran,1,8,' ')
    parm = parm||line#on||macroe||extatr||wcc
    parm = parm||BUFFLINF||BUFFLINL

bchjcl1:
    "ISPEXEC FTOPEN TEMP"
    "ISPEXEC FTINCL BUFFISPF"
    "ISPEXEC FTCLOSE"
    "ISPEXEC VGET   ZTEMPF"
    tempsub = ztempf
zcmd="EDIT"
    If zcmd = "EDIT" | Substr(zcmd,1,2) = '/E' Then Do
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        "ISPEXEC LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        umodel = "NOTEZED"
        "ISPEXEC VPUT UMODEL SHARED"
        "ISPEXEC EDIT DATAID(&DATAID) MACRO(UMODEL)"
        "ISPEXEC LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
    End

runit:
    "ISPEXEC VPUT (TEMPSUB) SHARED"
    Address TSO "%TEMPSUB"
    "ISPEXEC VGET (MESSAGE) SHARED"
    gc009  = message'.'
    Signal scr1e

exi1:
    Exit

scr1e:
    'ISPEXEC SETMSG MSG(GC009)'
    Signal scr1

is_a_macro:
    If buffispf = 'MACRO1' Then Do
        buffispf=;"VPUT BUFFISPF SHARED"
        Call macro1_rtn
        Return rc
    End
    If buffispf = 'MACRO2' Then Do
        buffispf=;"VPUT BUFFISPF SHARED"
        Call macro2_rtn
        Return rc
    End
    If buffispf = 'MACRO3' Then Do
        buffispf=;"VPUT BUFFISPF SHARED"
        fp='.ZVARS'
        opt=3
        Call macro3_rtn
        varcount = counter
        "ISPEXEC VPUT (VARCOUNT) SHARED"
        Return rc
    End
    If buffispf = 'MACRO4' Then Do
        buffispf=;"VPUT BUFFISPF SHARED"
        fp      = '&MDTON'
        opt     = 4
        Call macro3_rtn
        fsetcnt = counter
        "ISPEXEC VPUT (FSETCNT) SHARED"
        Return rc
    End
    Signal not_a_macro                      /* Some sort ogf goof     */

/*--------------------------------------------------------------------*/
/* This routine assembles and link-edits a 3270 data stream member    */
/* and display it under full screen.                                  */
/*--------------------------------------------------------------------*/
macro1_rtn:
Trace r
    asmbler = 'ASMA90'
    Address ISPEXEC
    "ISPEXEC FTOPEN TEMP"
    "ISPEXEC FTCLOSE"
    "ISPEXEC VGET ZTEMPF"
    "ISREDIT (DATASET) = DATASET"
    "ISREDIT (MEMBER)  = MEMBER"
    file1   = ztempf
    smember = member
    maclib  = "'"hlq".MACLIB'",
              "'SYS1.MACLIB'",
              "'SYS1.MODGEN'"
    syslib  = "'SYS3.LINKLIB'"

/*            "'SYS1S03.AMODGEN'",                                    */

    "ISPEXEC VGET BUFFENV SHARED"
    If buffenv = 'GO' Then cancel = 'N'
    buffenv = ''
    "ISPEXEC VPUT BUFFENV SHARED"

    zcmd  = ''
    x     = MSG('Off')
x = MSG('On')

    gc009 = "Creating member for assembling data stream."
    "ISPEXEC SETMSG MSG(GC009)"
    "ISPEXEC CONTROL DISPLAY LOCK"
    "ISPEXEC DISPLAY"

    Address TSO "ALLOC DD(SYSPRINT) DUMMY OLD REU"
    "ISPEXEC SELECT CMD(%COPYMEMB" dataset"("smember")" ztempf")"
    Address TSO "FREE DD(SYSPRINT)"

    Address TSO "ALLOC DD(ZTEMPF) DS('"file1"') OLD REU "
    "ISPEXEC LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    buffispf = 'MACRO2'
    "ISPEXEC VPUT BUFFISPF SHARED"
    "ISPEXEC EDIT DATAID(&DATAID) MACRO(BUFFISPF)"
    "ISPEXEC LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD(ZTEMPF)"

    Address TSO
    "ALLOC F(SYSLIB) DA("maclib") SHR REU"
    "ALLOC F(SYSUT1) UNIT(SYSDA) TRACKS SPACE(50,50) BLKSIZE(1700) REU"
    "ALLOC F(SYSUT2) UNIT(SYSDA) TRACKS SPACE(50,50) BLKSIZE(1700) REU"
    "ALLOC F(SYSUT3) UNIT(SYSDA) TRACKS SPACE(50,50) BLKSIZE(1700) REU"
    "ALLOC F(SYSLIN) DUMMY REU"

    time = TIME('s')
    syspunch = hlq".A"time".TEMP"
    loadlib  = hlq".L"time".TEMP"
    If SYSDSN(syspunch) = 'OK' Then "DELETE '"syspunch"'"
    If SYSDSN(loadlib)  = 'OK' Then "DELETE '"loadlib"'"
    "FREE F(SYSLMOD)"
    "ALLOC F(SYSPUNCH) NEW UNIT(SYSDA) TRACKS SPACE(5,5) DSORG(PS)",
          "BLKSIZE(400) DA('"syspunch"') CATALOG REU"
    "ALLOC F(SYSPRINT) DUMMY REU"
    "ALLOC F(SYSIN) DA('"file1"') SHR REU"

    gc009  = "Assembling data stream."
    Address ISPEXEC "SETMSG MSG(GC009)"
    Address ISPEXEC "CONTROL DISPLAY LOCK"
    Address ISPEXEC "DISPLAY"

    "CALL 'SYS1.SASMMOD1("asmbler")'"
/*  Address TSO asmbler                                               */
    rc1 = rc
    If rc1 <= 4 Then Do

        gc009  = "Link-editing data stream."
        Address ISPEXEC "SETMSG MSG(GC009)"
        Address ISPEXEC "CONTROL DISPLAY LOCK"
        Address ISPEXEC "DISPLAY"

        "ALLOC F(SYSLIB) DA("syslib") SHR REU"
        "ALLOC F(SYSUT1) UNIT(SYSDA) TRACKS SPACE(100,50)",
              "BLKSIZE(1024) REU"
        "ALLOC F(SYSLMOD) DA('"loadlib"(BUFFTEST)') SPACE(2,2)",
            "DSORG(PO)",
            "UNIT(SYSDA) RECFM(U) BLKSIZE(23476) CATALOG NEW DIR(1)"
        "ALLOC F(SYSLIN)  DA('"syspunch"') SHR REU"
        "CALL 'SYS1.LINKLIB(IEWL)'"
        rc1 = rc
    End
    Else Do
        gc009  = "Assembly failed, RC="rc1"."
        Signal erx2
    End
    If rc1 = 0 Then Do
    "FREE  F(SYSLIN SYSUT1 SYSUT2 SYSUT3 SYSLMOD SYSPUNCH)"
        gc009  = "Loading data stream."
        Address ISPEXEC
        "ISPEXEC SETMSG MSG(GC009)"
        "ISPEXEC CONTROL DISPLAY LOCK"
        "ISPEXEC DISPLAY"

        rc1 = rc
        Address TSO "CALL '"loadlib"(BUFFTEST)'"
        Address TSO
    End
    Else Do
        gc009  = "Link-edit failed, RC="rc1"."
        Signal erx2
    End
    Signal exi2

erx2:
    Address ISPEXEC "SETMSG MSG(GC009)"

exi2:
    "FREE  F(SYSLIN SYSUT1 SYSUT2 SYSUT3 SYSLMOD SYSPUNCH)"
    If SYSDSN("'"syspunch"'") = 'OK' Then "DELETE '"syspunch"'"
    If SYSDSN("'"loadlib"'")  = 'OK' Then "DELETE '"loadlib"'"
    Address ISPEXEC "CONTROL DISPLAY REFRESH"
    If cancel/='N' Then ,
        Address ISREDIT "CANCEL"

    Return rc1

/*--------------------------------------------------------------------*/
/* This routine assembles and link-edits a 3270 data stream member    */
/* and display it under full screen.                                  */
/*--------------------------------------------------------------------*/
macro2_rtn:
    line = "BUFFLOAD KICKOFF (R11)"
    "ISREDIT LINE_AFTER 0 = (LINE)"
    line = "         CALL  CLEAR"
    "ISREDIT LINE_AFTER 1 = (LINE)"
    line = "         LA    R2,D3270"
    "ISREDIT LINE_AFTER 2 = (LINE)"
    line = "         LA    R3,D3270L"
    "ISREDIT LINE_AFTER 3 = (LINE)"
    line = "         TPUT  (R2),(R3),NOEDIT,WAIT,,BREAKIN,HIGHP"
    "ISREDIT LINE_AFTER 4 = (LINE)"
    line = "         TGET  D3270,8,ASIS,WAIT"
    "ISREDIT LINE_AFTER 5 = (LINE)"
    line = "EXITPROG RACKOFF RC=0"
    "ISREDIT LINE_AFTER 6 = (LINE)"
    line = "D3270    DS    0C"
    "ISREDIT LINE_AFTER 7 = (LINE)"
    line = "D3270L   EQU   *-D3270"
    "ISREDIT LINE_AFTER .ZLAST = (LINE)"
    line = "         END"
    "ISREDIT LINE_AFTER .ZLAST = (LINE)"
    "ISREDIT END"
    Return 0

/*--------------------------------------------------------------------*/
/*  Macro to find all the variables that are to be set to "MTDON"     */
/*  ie. Modified-Data-Tag ON or are included in .ZVARS name           */
/*  substitution.                                                     */
/*--------------------------------------------------------------------*/
macro3_rtn:
    rcode=0
    linf=1
    "ISREDIT FIND ')BODY' ALL"
    If rc = 0 Then Do
        "ISREDIT (LINF) = CURSOR"
        linf = linf + 1
    End
    Else linf = 1
    "ISREDIT FIND ')INIT' ALL"
    If rc = 0 Then Do
        "ISREDIT (LINL) = CURSOR"
        Signal setlabs
    End
    "ISREDIT FIND ')REINIT' ALL"
    If rc = 0 Then Do
        "ISREDIT (LINL) = CURSOR"
        Signal setlabs
    End
    "ISREDIT FIND ')PROC' ALL"
    If rc = 0 Then Do
        "ISREDIT (LINL) = CURSOR"
        Signal setlabs
    End
    "ISREDIT FIND ')END' ALL"
    If rc = 0 Then Do
        "ISREDIT (LINL) = CURSOR"
        Signal setlabs
    End
    "ISREDIT (LINL) = LINENUM .ZLAST"

setlabs:
    "ISREDIT LABEL &LINF = .BODY"
    "ISREDIT LABEL &LINL = .BODYE"

    If fp = '.ZVARS' Then Do
        "ISREDIT FIND '.CURSOR'"
        If rc/=0 Then Signal tzvars
        "ISREDIT (LIN) = CURSOR"
        "ISREDIT (LINE) = LINE &LIN"
        PARSE VAR line v1 v2 v3
        If v1/='.CURSOR' Then Signal tzvars
        cursor = v3
    End

tzvars:
    counter = 0
    If fp = '.ZVARS' Then Do
        "ISREDIT FIND '"fp"' ALL"
        rc1 = rc
    End
    Else Do
        "ISREDIT SCAN OFF"
        "ISREDIT FIND '&&MTDON' ALL"
        rc1 = rc
        "ISREDIT SCAN ON"
    End
    If rc1/=0 Then Signal ext3
    "ISREDIT FIND '(' .ZCSR .ZCSR"
    If rc/=0 Then Signal ext3
    "ISREDIT (LIN1,COL1) = CURSOR"
    col1 = col1 + 1
    "ISREDIT (LINE1) = LINE &LIN1"
    "ISREDIT FIND ')' .ZCSR .ZCSR"
    If rc = 0 Then Do
        "ISREDIT (LIN1,COL2) = CURSOR"
        col2 = col2 - 1
        vars = SUBSTR(line1,col1,(col2-col1)+1)
        Signal getval
    End
    vars = STRIP(SUBSTR(line1,col1,(80-col1)+1))
    "ISREDIT (LAST) = LINENUM .ZLAST"
    Do Forever
        lin1 = lin1 + 1
        If last < lin1 Then Do
            gc009 = "No "fp" delimiter found."
            "ISPEXEC SETMSG MSG(GC009)"
            rcode = 8
            Signal ext3
        End
        "ISREDIT CURSOR = &LIN1 1"
        "ISREDIT FIND ')' .ZCSR .ZCSR"
        rcode = rc
        "ISREDIT (LINE1) = LINE &LIN1"
        If rcode = 0 Then Do
            "ISREDIT (XXX,COL2) = CURSOR"
            vars = vars STRIP(SUBSTR(line1,1,col2-1))
            Signal getval
        End
        vars = vars STRIP(SUBSTR(line1,1,80))
    End

getval:
    PARSE VAR vars v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13,
                   v14 v15 v16 v17 v18 v19 v20 v21 v22 v23 v24,
                   v25 v26 v27 v28 v29 v30 v31 v32 v33 v34,
                   v35 v36 v37 v38 v39 v40 v41 v42 v43 v44
    sub   = 0
    If fp = '.ZVARS' Then sub2  = 0
    Else                  sub2  = 2
    parmx = ''
    Do i=1 To 44
        var = VALUE('v'i)
        If var = '' Then Signal ext3
        If counter > 20 Then Do
            gc009 = "> 20 "fp" fields."
            "ISPEXEC SETMSG MSG(GC009)"
            rcode = 8
            "ISPEXEC VPUT (RCODE) SHARED"
            Signal ext3
        End
        subx = counter // 10
        If subx = 0 Then Do
            data  = "parm"sub2" = parmx"
            INTERPRET data
            sub2  = sub2 + 1
            parmx = ''
        End
        If var = '+' Then ITERATE
        counter = counter + 1
        parmx = parmx||SUBSTR(var,1,8,' ')
    End

ext3:
    counter = RIGHT(counter,4,'0')
    data  = "parm"sub2" = parmx"
    INTERPRET data
    If fp = '.ZVARS' Then Do
        "ISPEXEC VPUT (VARCOUNT RCODE CURSOR PARM1 PARM2) SHARED"
        "ISPEXEC VPUT (LINF LINL) SHARED"
    End
    Else ,
        "ISPEXEC VPUT (RCODE PARM3 PARM4) SHARED"
    "ISREDIT CANCEL"

    Return rcode
