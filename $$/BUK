/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/*  BU:  BackUp member.                                               */
/*                                                                    */
/*  Macro to save member being editted.                               */
/*  Refer tutorial for permissable parameters.                        */
/*                                                                    */
/*  Associated members:                                               */
/*   REXX:                                                            */
/*     $COPYMEM - Copy member (backup member) without change (and     */
/*                retain stats).                                      */
/*     BD       - Back down                                           */
/*     BKDN     - Alias of BD                                         */
/*     BKUP     - Alias of BU                                         */
/*     BU       - This member (backup)                                */
/*   Panels:                                                          */
/*     BUP      - Backup permanent options entry screen.              */
/*                                                                    */
/*--------------------------------------------------------------------*/
BU:bu_ver='1.04'
    Address ISPEXEC;'CONTROL ERRORS RETURN'
    "ISREDIT MACRO (parm#)";If rc/=0 Then Exit
    "ISREDIT (DATASET)=DATASET";"ISREDIT (MEMBER)=MEMBER"
/*  'CONTROL ERRORS CANCEL'                                           */
    vars='BKUPDEFT BKUPWHER BKUPOLAY BKUPDUP'
    'VGET ('vars') PROFILE'
    Parse Upper VAR parm# parm#;Parse SOURCE . xenv xcmd xdd xdsn .

/**********************************************************************/
/*  Branch if macro being stacked                                     */
/**********************************************************************/
    "VGET BUSTACK SHARED";If bustack="Y" Then Signal stack1

/*********************************************************************/
/*  Display tutorial...                                              */
/*********************************************************************/
    If Wordpos(Word(parm#,1),'/H /? ?')>0 Then Signal help

/*********************************************************************/
/*  Test defaults update required...                                 */
/*********************************************************************/
    If bkupdeft='' | bkupwher='' | bkupdeft="BKUPDEFT" |,
       bkupwher="BKUPWHER" Then Do
        zedlmsg="Change defaults as required and hit <ENTER> to accept."
        'SETMSG MSG(ISRZ001)'
    End

    If Word(parm#,1)='/DEF' Then Do
scr1:
        zcmd=
        'DISPLAY PANEL(BUP)'
        If rc=0 Then Do
            'VPUT ('vars') PROFILE'
            zedlmsg='Defaults have been set to designated values.',
                  'Use END PF key to exit screen.'
            'SETMSG MSG(ISRZ001)'
            Signal scr1
        End
        zedlmsg='Defaults have been saved. Please execute command again.'
        'SETMSG MSG(ISRZ001)'
        Exit
    End

    buid=bkupdeft                   /* <=== Change for site */
    wher=bkupwher                   /* <=== Change for site */
    #tr=Trace('O');Call parse_parms;x=Trace(#tr)

/*********************************************************************/
/*  Process data/parameters...                                       */
/*********************************************************************/
    If backup='' Then Do
        If parm#/='' Then buid=Strip(parm#)
        If Length(buid)>8 Then Do
            zedlmsg='Cannot pass character string > 8 characters.'
            'SETMSG MSG(ISRZ001)'
            Exit
        End
        If Length(member)=8 & olay/='' Then backup=Overlay(buid,member,olay)
        Else Do
            If meml<Length(backup) Then backup=Substr(backup,1,meml)
            If Length(buid)=8 Then member=
            lc=Length(member||buid);lm=Length(member)
            If lc > 8 Then Do
                s=lc-7;e=lm+8-lc
            End
            backup=member
            If wher='P' Then Do
                If lc>8 Then backup=Substr(member,s,lm+1-s)
                backup=buid||backup
            End
            Else Do
                If lc>8 Then backup=Substr(member,1,e)
                backup=backup||buid
            End
            If meml<Length(backup) Then backup=Substr(backup,1,meml)
        End
    End

    backup=Strip(backup)
    If Datatype(backup)='NUM' Then Do
        zedlmsg='Member name '''backup''' not valid for partitioned dataset.'
        Signal errx
    End
    If backup=member Then Do
        zedlmsg='Backup name "'backup'" must be different from "'member'".',
                'Have you set the backup parameters with the "BU /DEF" command.'
        Signal errx
    End
    If what_if Then Do
        zedlmsg='Member would be backed up into member '''backup'''.'
        Signal errx
    End

    If edit='EDIT' Then Do
        "ISREDIT EDIT "backup
        Exit
    End

    If del='DEL'  Then Do
        If Sysdsn("'"dataset"("backup")'")/='OK' Then,
            zedlmsg = "Member '"backup"' does not exists."
        Else Do
            x=Outtrap('lineo.',10,'NOCONCAT')
            Address TSO "DELETE '"dataset"("backup")'"
            x=Outtrap('OFF')
            zedlmsg=lineo.1'.'
            Address
        End
        Signal errx
    End

    If exist='EXIST' Then Do
        If Sysdsn("'"dataset"("backup")'")='OK' Then,
            zedlmsg='member "'backup'" exists.'
        Else,
            zedlmsg='member "'backup'" does not exists.'
        Signal errx
    End

    If no_replace Then Do
      If Sysdsn("'"dataset"("backup")'")='OK' Then Do
        zedlmsg=,
              'Not backed up into "'backup'" because of non-replace parameter.',
              'Enter "'xcmd' ?" for more details or change using "/DEF" parm.'
        "SETMSG MSG(ISRZ001)";Exit
      End
    End
    If prev='Y' Then Signal use_$copymemb
    Else Do
        "ISREDIT (changed)=DATA_CHANGED"
        If changed='NO' Then Signal use_$copymemb
        "ISREDIT REPLACE "backup" .ZFIRST .ZLAST"
        If rc/=0 Then Do
            "SETMSG MSG("zerrmsg")"
            Return 8
        End
        Else Do
            zedlmsg='Member saved under "'backup'" with current changes',
                    'made. Repeat with parameter "/NC" to backup without',
                    'changes to preserve backup integrity.'
            'SETMSG MSG(ISRZ001)'
        End
    End
    Return 0

/*********************************************************************/
/*  Use $Copymemb so that original stats will be retained.            */
/*********************************************************************/
use_$copymemb:
/*  rc=$Copymem(dataset'('member')',dataset'('backup')')              */
    rc=$Copymem(dataset'('member')','T32AZK.$.CI('backup')')
    If rc=0 Then rc=$Copymem('T32AZK.$.CI('backup')',dataset'('backup')')
    If rc=0 Then zedlmsg='Member saved under "'backup'" without changes.'
    Else zedlmsg='Backup into member "'backup'" failed.'
    "SETMSG MSG(ISRZ001)"
    Return 0

/*********************************************************************/
/*  Stacked processing...                                            */
/*********************************************************************/
stack1:
    bustack=
    "VPUT BUSTACK SHARED"
    "VGET (MEMBER BACKUP) SHARED"
    "ISREDIT DELETE ALL NX"
    "ISREDIT COPY &MEMBER AFTER .ZFIRST"
    If rc/=0 Then,
         zedlmsg='Saved copy of member doesn''t exist.'
    Else zedlmsg='Member saved under "'backup'" without changes.'
    "SETMSG MSG(ISRZ001)"
    "ISREDIT END"
    Return 0

err1:
    zedlmsg='Invalid length parameter of "'meml'" passed.'
    Signal errx
err2:
    zedlmsg='Invalid overlay value of "'olay'" passed.'
    Signal errx
errx:
    "SETMSG MSG(ISRZ001)"
    Exit 0

/*********************************************************************/
/*  Parse  parameters...                                             */
/*********************************************************************/
parse_parms:
    del='N'
    If bkupdup='' Then bkupdup='N'
    prev   = parse_cons('/NC')
    edit   = parse_cons('/ED','EDIT',,3)
    exist  = parse_cons('/EX','EXIST',,3)
    keep   = parse_cons('/KE','KEEP',,3)
    what_if= parse_cons('/W',1,0)
    action=parse_cons('/DEL','MOVE','COPY',3)
    If bkupdup='Y' Then no_replace=0;Else no_replace=1
    If parse_cons('/R',1,0) Then no_replace=0
    If parse_cons('/NR',1,0) Then no_replace=1

    wher   = parse_cons('/S','S',,3)
    If wher = 'N' Then wher   = parse_cons('/P','P',bkupwher,3)

    meml   = parse_varb('/L=',8)
    If meml = 'ML' Then meml = Length(member)
    If Datatype(meml) /= 'NUM' Then Signal err1
    If meml < 1 | meml > 8 Then Signal err1

    olay   = parse_varb('/O=',bkupolay,'NUM')
    If olay ='N' Then olay=bkupolay
    If olay /= bkupolay Then Do
        If olay < 1 | olay > 8 Then Signal err2
    End

    backup=parse_varb('/M=','?')
    If backup='?' Then backup=parse_varb('M=','?')
    If backup='?' Then backup=

    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y#>0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Help routine.                                                      */
/*--------------------------------------------------------------------*/
help:
    'CONTROL ERRORS RETURN'
    n_st = mark(2)                          /* Mark next line         */
/*

   The two edit macros to backup and restore the PDS member
   currently being edited are called BKUP and BKDN respectively with
   aliases of BU and BD .

   By default, BKUP backs up the member being edited into member
   prefixed by a # unless the member name is 8 bytes, in which case
   the first byte is dropped off and replaced by the prefix
   character. BKDN restores using the same principle.
   If the member has not been changed of if "NC" parameter is passed,
   $COPYMEM will be used to backup then member, thereby retaining the
   original stats.

   Permissable parameters:
      char/string
          - You may pass your own prefix/suffix from #, @, $ or any
            alpha/numeric character string combination provided that
            they form valid member names (eg. numeric prefix will
            produce an invalid member name). Do not use any of the
            valid parameters listed below as the character string.
            The character string may be up to eight characters long.
            The member name will be decreased in accordance with the
            length of the character string if the combination is
            greater than 8 characters. (NOTE - The character string
            takes precedence over member name.)

    /DEF  - Change the default settings for character string,
            position and overlay column if required.

    /DEL  - TO delete the backup version during a BKDN operation in
            one move.

    /EDit - To edit the backed up member as created by your previous
            supplied or default parameters.

    /EX   - Test if the proposed backup member already exists.

    /KEep - To append the backup version to the bottom of your
            current edit member without deleting existing lines.

    /L=l  - You may restrict the length of the member name in either
            backup or backdown by the /L=l parameter where l must be
            numeric and between 1 and 8.

            Alternatively you may set l to "ML" and let the routine
            establish the original Member's (name) Length and use
            it.

    /M=mn - Member name to backup into.

    /NC   - Backup without changes. Usefull for when changes are
            made before the backup is taken.

    /R    - Replace if backup member already exists.  Without this
            parameter duplicate members will be stopped unless the
            default "Stop duplicates" is set to Y(es) in the default
            settings panel (/DEF).

    /NR   - No Replace if backup member already exists.  Without this
            parameter duplicate members will be replaced unless the
            default "Stop duplicates" is set to N(o) in the default
            settings panel (/DEF). This is the default value.

    /O=c  - You may specify an overlay position for the suffix/prefix
            if different to the default defined position (if used).
            Must be in the range of 1-8 or blank. Defaulr is blank.

    /P    - Prefix identifier, indicating the position of the
            character string.

    /S    - Suffix identifier, indicating the position of the
            character string.

    /W    - play What-ifs.  Advise member name it would be backed up
            into (in case where you are not sure of defaults and want
            want to see result of parameters passed).

   It is recommended that you practice with a test member to ensure
   you do not accidently overwrite legitimate members as no
   existance checking is made.

*/
    n_en = mark(-2)                         /* Mark prev 1 line       */

    "ISREDIT UP MAX"
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"
    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
nl: Parse Arg ntl;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)";Return 0
