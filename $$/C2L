/******************************** REXX ********************************/
/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* C2L: Compare 2 lines.                                              */
/*                                                                    */
/* Compares 2 lines character by character for display WIDTH. As you  */
/* scroll, re-issue the command.                                      */
/*                                                                    */
/* If the display is a cut and paste of a HEX display, it is no use   */
/* comparing the character set but the respective HEX line(s).        */
/*                                                                    */
/* Will compensate for column position.                               */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse VAR parm# l1 l2 parm3
    If \Datatype(l1,'w') Then Do
        zedsmsg=
        zedlmsg='First line number not numeric.'
        "SETMSG MSG(ISRZ001)";Exit
    End
    If \Datatype(l2,'w') Then Do
        zedsmsg=
        zedlmsg='Second line number not numeric.'
        "SETMSG MSG(ISRZ001)";Exit
    End
    "ISREDIT (status)=USER_STATE";"ISREDIT (last)=LINENUM .ZLAST"

    If l1>last Then Do
        zedsmsg=
        zedlmsg='Fisst line past last line.'
        "SETMSG MSG(ISRZ001)";Exit
    End
    If l2>last Then Do
        zedsmsg=
        zedlmsg='Second line past last line.'
        "SETMSG MSG(ISRZ001)";Exit
    End
    If l1>l2 Then where=l2;Else where=l1;
    Address ISREDIT
    "(line1)=LINE" l1;"(line2)=LINE" l2
    "(c1,c2)=DISPLAY_COLS";linex=
    Do i=c1 To c2
        ch1=Substr(line1,i,1);ch2=Substr(line2,i,1)
        If ch1/=ch2 Then linex=linex'*';Else linex=linex' '
    End
    cols=;Do i=1 To 9;cols=cols'----+----'i;End;cols=cols'----+----0'
    colss=cols||cols
    c1='0'c1;c1=Substr(c1,Length(c1)-1);cols=Substr(colss,c1,72)
    "LINE_BEFORE" where"=NOTELINE (cols)"
    "LINE_BEFORE" where"=NOTELINE (linex)"

Signal get_out

    If dataset='DNMCICS.CICS230.CUST' Then Do
        "C '??????' 'RPCIC2' ALL"
        "C '=HLQ.' '=DNDCICS.' ALL"
        "C ' HLQ.' ' DNDCICS.' ALL"
        "C '=MVSSMPSF.' '=MVSSMPJ.' ALL"
        "C '(MVSSMPSF.' '(MVSSMPJ.' ALL"
        "C ' MVSSMPSF.' ' MVSSMPJ.' ALL"
        "C '=GSESF.'    '=DNMCICS.' ALL"
        "C '(GSESF.'    '(DNMCICS.' ALL"
        "C ' GSESF.'    ' DNMCICS.' ALL"
        "CURSOR=1 0"
        Do Forever
            "F ' MAXCC = 0'";If rc/=0 Then Leave
            "F ' SET ' .ZCSR .ZCSR ALL"
            If rc=0 Then "(,col)=CURSOR";Else col=2
            linex=Substr(' ',1,col)'IF MAXCC<9 THEN SET MAXCC=0'
            "(lin#)=LINENUM .ZCSR"
            "LINE" lin#"=' '";"LINE" lin#+1"= (linex) "
            "CURSOR="lin#+2 0
        End
        Signal get_out
    End

    "X '//*' 1 ALL"
    "C 'UUUU'     '&&UUUU'     ALL NX"
    "C 'VVVVVV'   '&&VVVVVV'   ALL NX"
    "C 'DOCVOL'   '&&DOCVOL'   ALL NX"
    "C 'PPVOL'    '&&PPVOL'    ALL NX"
    "C 'DLVOL'    '&&DLVOL'    ALL NX"
    "C 'SMPVOL'   '&&SMPVOL'   ALL NX"
    "C 'HFSVOL'   '&&HFSVOL'   ALL NX"
    "C 'GSEX'     '&&GSEX'     ALL NX"
    "C 'MVSSMPX'  '&&MVSSMPX'  ALL NX"
    "C 'CCCCCCCC' '&&CCCCCCCC' ALL NX"

Exit

    Do Forever
        "F 'GRPLIST=('"
        If rc/=0 Then Leave
        "(line)=LINE .ZCSR"
        Parse VAR line p1 'GRPLIST=(' list ')' p2
        list=Translate(list,' ',',')
        com=Wordpos('COMMON',list)
        If com=0 Then msg='** No "COMMON" list.'
        Else Do
            x1=SubWord(list,1,com-2);x2=Subword(list,com+1)
            w1=Word(list,com-1)
            list=Translate(Space(x1 "COMMON" w1 x2),',',' ')
            linex=p1'GRPLIST=('list')'p2
            "LINE .ZCSR=(linex)"
            msg=line
        End
        x=nl(msg)
    End

Get_out:
    "USER_STATE=(status)"
    Exit

nl: Parse Arg nl1
    "LINE_BEFORE .ZCSR= NOTELINE (nl1)";Return 0

