/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* C3I: Cics 3rd party Include.                                       */
/*                                                                    */
/* Supplement to C3. This routine will look for all uncdommented      */
/* INCLUDE statements and copy them into the current session.         */
/*                                                                    */
/*--------------------------------------------------------------------*/
C3I:c3i_ver='1.03'
    Parse SOURCE . xenv xcmd xdd xdsn .
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    "VGET (c3imac,origlib) SHARED"
    If c3imac/='' Then Interpret "Signal macro_"c3imac
    "ISREDIT (last)=LINENUM .ZLAST";"ISREDIT (origlib)=DATASET"
    Do i=1 To last
        "ISREDIT (line)=LINE" i;Queue line
    End
    Queue ''
    ztempf=$ztempf('$ZTEMPF');dd1='C3'Time('s')
    Address TSO "ALLOC F("dd1") DSN('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "dd1" (FINIS"
    Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd1")"
    c3imac=1;Address ISPEXEC "VPUT (c3imac,origlib) SHARED"
    Address ISPEXEC "EDIT DATAID(&DATAID) MACRO("xcmd")"
    c3imac=;Address ISPEXEC "VPUT (c3imac) SHARED"
    Address ISPEXEC "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dd1")"
    xx=$ztempf(ztempf,'D')
    Exit

Macro_1:
    c3imac=;Address ISPEXEC "VPUT (c3imac) SHARED"
    Address ISREDIT;"(status)=USER_STATE";"(caps)=CAPS";"CAPS=OFF"
    "CURSOR=1 0";c3procs=C3$('procs');jcllibs=
    "LABEL .ZCSR=.FLINE"
    Do Forever
        "SEEK ' INCLUDE '";If rc/=0 Then Leave
        "(linei)=LINE .ZCSR";If Word(linei,2)/="INCLUDE" Then Iterate
        Parse VAR linei w#1 . w#3 1 ch12 +2 1 ch13 +3
        If ch12/='//' | ch13='//*' Then Iterate
        Parse VAR linei w#1 ' INCLUDE' . 'MEMBER=' im .
        If im='' Then Iterate
        "LABEL .ZCSR=.TLINE";"(lin#)=LINENUM .ZCSR";ilin#=lin#
        fr_line='.FLINE';to_line='.TLINE'
        Do Forever
            "SEEK ' JCLLIB ' PREV" fr_line to_line
            If rc/=0 Then Do
                If to_line='.ZLAST' Then Leave
                "CURSOR=.ZLAST 0"
                to_line='.ZLAST';Iterate
            End
            "(linej)=LINE .ZCSR";"(lin@)=LINENUM .ZCSR"
            Parse VAR linej w#1 . w#3 1 ch12 +2 1 ch13 +3
            If ch12/='//' | ch13='//*' Then Iterate
            Parse VAR linej +72.;linej=Strip(linej)
            Do While Substr(linej,Length(linej),1)=','
                lin@=lin@+1;"(linex)=LINE" lin@
                If Substr(linex,1,3)='//*' Then Iterate
                Parse VAR linex '//' linex;linej=linej||Strip(linex)
            End
            Parse VAR linej 'ORDER=' xx
            If Substr(xx,1,1)='(' Then Parse VAR xx '(' xx ')'
            jcllibs=Translate(xx,' ',',')
        End
        "CURSOR="lin# 0;inc_fnd=0
        yyy=jcllibs origlib c3procs
        Do While yyy/=''
            Parse var yyy dsn yyy
            proc="'"dsn"("im")'"
            If Index(proc,'&')>0 Then Do
                zedsmsg=;zedlmsg='"&" found in dataset name' proc'.',
                   'Plese use command "SYMSUB /A { /L }" first and try',
                   'again.'
                Address ISPEXEC "SETMSG MSG(ISRZ001)"
                Exit
            End
            If Sysdsn(proc)='OK' Then Do
                inc_fnd=1
                x=nb('//*')
                x=nc('//*'Substr(linei,3))
                x=na(Substr("//*-- Including "proc" ",1,70,'-')'*')
                x=na('//*')
                Address TSO;"ALLOC F("dd2") DSN("proc") SHR REU"
                "EXECIO * DISKR "dd2" (FINIS";"FREE F("dd2")"
                Address
                Do Queued()
                    Parse Pull line
                    x=na(line)
                End
                x=na(Substr("//*--Include End ",1,70,'-')'*')
                yyy=
            End
        End
        If \inc_fnd Then x=nl('***   Include member "'im'" not found')
        "CURSOR="ilin#+1 0
    End
    "CAPS=(caps)";"USER_STATE=(status)"
    Exit
nl:Parse ARG n#;"LINE_BEFORE" lin#"=NOTELINE (n#)";Return 0
nc:Parse ARG n#;"LINE" lin#"=(n#)";Return 0
na:Parse ARG n#;"LINE_AFTER" lin#"=(n#)";lin#=lin#+1;Return 0
nb:Parse ARG n#;"LINE_Before" lin#"=(n#)";lin#=lin#+1;Return 0
