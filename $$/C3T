/******************************** REXX ********************************/
Trace r
C3_ver='2.11'
n_st=mark(2)    /* Mark Start */                                  /*QH*/
/*                                                                /*QH*/
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* C3: Cics 3rd party audit.                                          */
/*                                                                    */
/* Macro to process CICS startup JCL and attempt the following:       */
/*   - Chain through the JCL and SYSIN data and report on some of the */
/*     more important SIT override variables. Will display value of   */
/*     '??' if the parameter is not found in overrides.               */
/*     Notes:                                                         */
/*       - SIT of '??' probably means the IBM default SIT '$$' is in  */
/*         use.                                                       */
/*       - May need to manually check the SIT table (source).         */
/*   - identify use of products by locating predefined dataset in a   */
/*     matrix "matrix1".                                              */
/*     Note: Loadlibs may be defined in DFHRPL but not referenced     */
/*           (not used) in the region                                 */
/*   - identify 3rd. party DD alloaction to ensure product is used.   */
/*                                                                    */
/* The macro will try to identify procs and if any are found, it will */
/* search if it is an instream proc otherwise it will look for it in  */
/* the list of datasets defined by variable "procs" in 'C3$'.         */
/* (NOTE: If you get a lot of '??' against parameters check that the  */
/*  "procs" variable in C3$ is correctly defined.)                    */
/* Will place any/all JCLLIB datasets at the front ot this concat..   */
/* The JCL will also be searched for any SIT or START overrides.      */
/*                                                                    */
/* Will also update CICS3PP member with source of JCL (so don't run   */
/* with "STAT" option out of test datasets).                          */
/*                                                                    */
/* Packaging:                                                         */
/*  REXX:                                                             */
/*   C3$      - Macro used to supply site customised parameters.      */
/*              Will also return dataset to house members CICSREGN    */
/*              and CICS3PP.  (This member should be customised prior */
/*              to executing C3.)                                     */
/*   C3PLTPI$ - Macro used to site customise PLTPI data.              */
/*   C3SITOX  - macro to extract some of the common SIT Override      */
/*              parameters, which includes the 'applid' which is then */
/*              fed into matrix2 to identify user datasets to confirm */
/*              use of product.                                       */
/*                                                                    */
/* Additional routines:                                               */
/*   $ALKCICS - CICS dataset processor used by C3$.                   */
/*   $ALKHLQU - User hlq generator.                                   */
/*   $COPYMEM - Get comulative SYSIN extract (used by C3SITOX).       */
/*   $EVALAMP - Look for any variable equates/substitutions.          */
/*   $WORDAT  - Line breaker at column position.                      */
/*   $ZTEMPF  - Allocate/delete temporary file.                       */
/*   C3I      - Evaluate all INCLUDE statements.  Comments out the    */
/*              INCLUDE and copies in the appropriate include member  */
/*              (found in JCLLIB statements and "procs" variable      */
/*              returned by C3$.                                      */
/*   SJF      - SDSF JCL Format.  Routine to format the "SE" output   */
/*              of SDSF held output (eg. CICS job to extract the      */
/*              expanded JCL (with INCLUDE members and expanded       */
/*              procs).  Then use "SYMSUB /A" to perform symbolic     */
/*              substitution before you "C3" it.                      */
/*                                                                    */
/* Matrix2 is used to identify 3pp user datasets required for each    */
/* region.  This will identify if the dataset exists.                 */
/*                                                                    */
/* Parameters: (keyword)                                              */
/*   JE      - JCL error. Marks member in CICS3PP with literal        */
/*             "JCL error". After using JCLCHECK or DSNE.             */
/*             (Easier than manually doing it.)                       */
/*   NEW     - Empty members CICSREGN and CICS3PP. This parameter     */
/*             will automatically turn "STATs" on and copy new        */
/*             product description and initialise matrix.             */
/*   PROD    - Use production matrix from C3$. (This parameter may    */
/*             be redundant if C3$ is carefully designed - include    */
/*             production names in the test combination.)             */
/*   STATs   - Update members CICSREGN and CICS3PP.                   */
/*   VR      - View CICSREGN member.                                  */
/*   VS      - View SIT (and overrides) during processing.            */
/*   V3      - View 3PP member.                                       */
/*                                                                    */
/* Gotchas:                                                           */
/*  1. Some sites use a combination of instream procs, external       */
/*     procs, INCLUDEs, INCLUDEs with INCLUDEs, INCLUDEs that set     */
/*     variables for other INCLUDEs and other combinations that one   */
/*     could only have nightmares about.  C3 was originally designed  */
/*     for sane JCL.  I have found that the following command(s) seem */
/*     to cover MOST bases for these twisted sites:                   */
/*        C3;SS /A /L;C3I;C3 xxxx                                     */
/*     Explained as follows:                                          */
/*        C3        - Invoke this command which evaluates the         */
/*                    majority of instream and external procs.        */
/*        SS /A /L  - Perform symbolic substitution (has greater      */
/*                    granularity than C3) and the '/L' parameter     */
/*                    isntructs processing from the last card in the  */
/*                    deck (works most of the time, however, there    */
/*                    will always be exceptions so be wary).          */
/*        C3I       - Evaluate all INCLUDE statements.                */
/*        C3 xxxx   - Rerun C3 (this time with "xxxx" as your desired */
/*                    parameters) to do a full process.               */
/*     Phew, Good luck!                                               */
/*                                                                    */
/*--------------------------------------------------------------------*/
*/                                                                /*QH*/
n_en=mark(-2)   /* Mark End   */                                  /*QH*/
    Parse SOURCE . xenv xcmd xdd xdsn .
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
                                                                  /*QH*/
w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1   /*QH*/
If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc        /*QH*/
If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me        /*QH*/
Parse Source . . xcmd .;x=$Br(xcmd "??");Return                   /*QH*/
Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)  /*QH*/
Help_me:Signal Off Syntax;#tr=Trace("o")                          /*QH*/
Do i=n_st To n_en;nl=Sourceline(i)                                /*QH*/
"ISREDIT (caps)=CAPS";"ISREDIT CAPS=OFF"                          /*QH*/
If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"               /*QH*/
Else Say Substr(nl,1,79);End;"ISREDIT CAPS=(caps)";Return 0       /*QH*/
                                                                  /*QH*/
No_help_#1:                                                       /*QH*/
Trace r
    parm@=parm#;Parse Upper VAR parm# parm#
    C3SITOX='Extract CICS applids from startup JCL'
    Parse Value C3$('CICS3PP CICSREGN') With cics3pp cicsregn

    If Wordpos('/T',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/T',Translate(parm#)),1)
        #tr=Trace('r')
    End
    If Wordpos('/VS',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/VS',Translate(parm#)),1)
        viewsit='Y';"VPUT (viewsit) SHARED"
    End
    If Wordpos('VS',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('VS',Translate(parm#)),1)
        viewsit='Y';"VPUT (viewsit) SHARED"
    End
    If Wordpos('V3',parm#)>0 Then Do;"VIEW DATASET(&CICS3PP)";Exit;End
    If Wordpos('VR',parm#)>0 Then Do;"VIEW DATASET(&CICSREGN)";Exit;End

    "VGET (applmac) SHARED"
    If applmac/='' Then Interpret "Signal macro_"applmac

    Address ISREDIT;"(member)=MEMBER";"(jcldsn)=DATASET";"(status)=USER_STATE"
    find=Substr('//',1,72)
    "F '"find"' first";If rc/=0 Then "CURSOR=.ZLAST"
    "LABEL .ZCSR=.TLINE"
    "RESET";"X '//*' 1 ALL";"CURSOR=1 0"
    procs=C3$('procs');procb=
    "SEEK ' JCLLIB ' NX .ZFIRST .TLINE"
    If rc=0 Then Do
        "(line)=LINE .ZCSR"
        Parse VAR line '(' xx ')'
        procs=Translate(xx,' ',',') procs
    End
    "CURSOR=1 0";lin#=0;proci=
    Do Forever
        "CURSOR="lin#+1 0;If rc=12 Then Leave
        "SEEK ' EXEC ' NX .ZFIRST .TLINE"
        If rc/=0 Then Leave
        "(line)=LINE .ZCSR";"(lin#)=linenum .ZCSR"
        line=Translate(line,' ',',')
        Parse VAR line . . pgm .
        If Substr(pgm,1,5)='PROC=' Then pgm=Substr(pgm,6)
        If Substr(pgm,1,4)/='PGM=' Then Do
            "F '//"pgm" ' PREV"
            If rc=0 Then Do
                "(linep)=LINE .ZCSR";Parse VAR linep w1 w2 w4
                If Left(w1,3)='//*' Then Iterate
                If Left(w3,4)='PGM=' Then Iterate
            End
            proci=proci pgm
        End
    End
    Do While proci/=''
        Parse var proci memb proci
        yyy=procs
        Do While yyy/=''
            Parse var yyy dsn yyy
            proc="'"dsn"("memb")'"
            If Sysdsn(proc)='OK' Then Do;procb=procb proc;Leave;End
        End
    End
    "(last)=LINENUM .TLINE"
    ztempf=$ztempf();dd1='C3'Time('s');dd2='#'dd1
    Address TSO;"NEWSTACK"
    Do While procb/=''
        Parse var procb dsn procb
        Queue '//*'
        Queue Substr("//*------- "dsn" ",1,70,'-')'*'
        Queue '//*'
        "ALLOC F("dd2") DSN("dsn") SHR REU"
        "EXECIO * DISKR "dd2" (FINIS";"FREE F("dd2")"
    End
    Queue '//*'
    Queue Substr("//*------- '"jcldsn"("member")' ",1,70,'-')'*'
    Queue '//*'
    Do i=1 To last
        "ISREDIT (line)=LINE" i
        If Word(line,2)="INCLUDE" Then Do
            Parse VAR line w#1 . w#3 1 ch12 +2 1 ch13 +3
            Parse VAR line w#1 ' INCLUDE' . 'MEMBER=' im .
            If ch12='//' & ch13/='//*' & im/='' Then Do
                yyy=procs
                Do While yyy/=''
                    Parse var yyy dsn yyy
                    proc="'"dsn"("im")'"
                    If Sysdsn(proc)='OK' Then Do
                        Queue '//*'
                        Queue '//*'Substr(line,3)
                        Queue Substr("//*------- "proc" ",1,70,'-')'*'
                        Queue '//*'
                        "ALLOC F("dd2") DSN("proc") SHR REU"
                        "EXECIO * DISKR "dd2" (FINIS";"FREE F("dd2")"
                        xx="//*------- '"jcldsn"("member")' cont'd "
                        Queue Substr(xx,1,70,'-')'*'
                    End
                End
            End
            Else Queue line
            Iterate
        End
        Queue line
    End
Trace r
    Address ISPEXEC "CONTROL ERRORS RETURN"
    Queue ' ';Queue ''
    "ALLOC F("dd1") DSN('"ztempf"') SHR REU"
    "EXECIO * DISKW "dd1" (FINIS"
    Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd1")"
    applmac=1
    Address ISPEXEC "VPUT (member,applmac,parm#,jcldsn) SHARED"
/*Address ISPEXEC "VIEW DATAID(&DATAID)"                              */
    Address ISPEXEC "EDIT DATAID(&DATAID) MACRO("xcmd")"
    Address ISPEXEC "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dd1")"
    xx=$ztempf(ztempf,'D')
    "ISREDIT RESET";"ISREDIT USER_STATE=(status)"
/*  "ISREDIT CANCEL"                                                  */
    Exit

macro_1:
    applmac=;"VPUT (applmac) SHARED"
    "VGET (member,parm#,jcldsn) SHARED"
    hits=Substr(member,1,9)

    If Wordpos('PROD',parm#)=0 Then prod=0;Else prod=1
    matrix1=,    /* Product:unique loadlib name patern                */
            C3$('matrix1',prod)
    matrix2=,    /* Product:unique user dataset name patern           */
            C3$('matrix2',prod)
    sysin=,      /* SIT override SYSIN DDname                         */
            C3$('sysin',prod)
    If Wordpos('STAT',parm#)>0 Then xparm='RETURN STAT'
    Else If Wordpos('STATS',parm#)>0 Then xparm='RETURN STAT'
         Else xparm='RETURN NOSTAT'
    If Wordpos('NEW',parm#)=0 Then newi=0;Else Do;newi=1;xparm='RETURN STAT';End
    If Wordpos('JE',parm#)>0 Then Do
        xparm='RETURN STAT'
        uwje=1;Signal update_CICS3PP
    End;Else uwje=0

    "VPUT (newi,prod,member) SHARED"
    "ISREDIT C3SITOX" sysin xparm           /* Get SIT override det.  */
    "VGET (sitp,csdjcl,sitjcl,startjcl) SHARED";"VGET ("sitp") SHARED"
    If csdjcl/='' Then csddsn=csdjcl
    If sitjcl/='' Then sit=sitjcl
    If startjcl/='' Then start=startjcl

build_loadlib_stats:
    Address ISREDIT;"(status)=USER_STATE"
    "RESET";"X '//*' 1 ALL"
    string=matrix1;loadlibs=
    If db2conn='' Then hits=hits'¦ ';Else hits=hits'¦Y'
    Do while string/=''
        Parse VAR string var xxx string
        val=0
        Do while xxx/=''
            Parse VAR xxx fstr '+' xxx;If fstr='' Then Iterate
            "F '"fstr"' ALL NX"
            "(xx)=FIND_COUNTS"
            val=val+xx
        End
        Interpret var'=val'
        If val=0 Then hits=hits'¦ '
        Else Do
            hits=hits'¦Y'
            If Index(loadlibs,var'=')=0 Then
                Interpret 'loadlibs=loadlibs "'var'="'var
        End
    End
    loadlibs=Strip(loadlibs)
build_dataset_stats:
    string=matrix2
    datasets=
    If matrix2/='' Then hits=hits'¦ '
    Do while string/=''
        Parse VAR string var xxx string
        val=0;Interpret var'=val'
        Do while xxx/=''
            Parse VAR xxx dsn '+' xxx;If dsn='' Then Iterate
            If Index(dsn,'.applid.')=0 Then "F '"dsn"' ALL NX"
            Else Do
                Parse VAR dsn p1 '.applid.' p2
                dsn="'"p1'.'applid'.'p2"'"
                rc=Listdsi(dsn "NORECALL")
                If rc=4 Then rc=0
                If sysreason=9 | sysreason=25 then rc=0
            End
            If rc=0 Then val=val+1
        End
        If val=0 Then hits=hits'¦ ';Else hits=hits'¦Y'
        If val=0 & Value(var)=0 Then Iterate
        Interpret 'datasets=datasets "'var'="'val
    End
    hits=hits'¦'

update_CICS3PP:
    If xparm='RETURN STAT' Then Do
        Parse Value Strip(cics3pp,,"'") With xx '(' .
        If Sysdsn("'"xx"'")='OK' Then Do
            applmac=3
            Address ISPEXEC "VPUT",
                "(applmac,hits,newi,uwje,prod,jcldsn) SHARED"
            Address ISPEXEC "EDIT DATASET(&CICS3PP) MACRO("xcmd")"
        End
    End
    If uwje Then Do
        zedlmsg='CICS3PP member updated with "JCL error".'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Exit
    End

/*--------------------------------------------------------------------*/
/*  Just display all finds to identify hits (cosmetic only).          */
/*--------------------------------------------------------------------*/
    "X ALL"
    string=matrix1
    Do while string/=''
        Parse VAR string var xxx string
        Do while xxx/=''
            Parse VAR xxx fstr '+' xxx;If fstr='' Then Iterate
            "F '"fstr"' ALL"
        End
    End
    string=matrix2
    Do while string/=''
        Parse VAR string var xxx string
        Do while xxx/=''
            Parse VAR xxx dsn '+' xxx;If dsn='' Then Iterate
            If Index(dsn,'.applid.')=0 Then Nop
            Else Do;Parse VAR dsn p1 '.applid.' p2;End
            "F '"dsn"' ALL"
        End
    "X '//*' 1 ALL"

output_stats:
    m_sito_i ='??'       /* Missing SITO indic'r (same as in C3SITOX) */
    sitparm_x=
    If sit=m_sito_i Then sit='Using_Defaults_with_overrides_only.'
    rapplid='Applid  : 'Substr(applid,1,8)"    CSD    : '"csddsn"'"
    sitparm='PLTPI   : 'Substr(pltpi,1,8)'    PLTSD  : 'pltsd
    sitparm=,
            'GRPLIST='grplist,
            'AIEXIT='aiexit,
            'DFLTUSER='dfltuser,
            'DSALIM='dsalim,
            'EDSALIM='edsalim,
            'PLTPI='pltpi,
            'PLTSD='pltsd,
            'START='start,
            'STGPROT='stgprot,
            ''
    If dct/=m_sito_i Then sitparm_x=sitparm_x 'DCT='dct
    If fct/=m_sito_i Then sitparm_x=sitparm_x 'FCT='fct
    If mct/=m_sito_i Then sitparm_x=sitparm_x 'MCT='mct
    region='Region  : 'Substr(member,1,8)'    Sysidnt: 'Left(sysidnt,4),
           '    DB2conn:' Left(db2conn,6) 'DB2-SS:' dsn2strt
/*
    gc009=region  Substr(' ',1,79),
          rapplid Substr(' ',1,79),
          'More SIT:' Space(sitparm,1,',')   Substr(' ',1,79),
          'Loadlibs:' Space(loadlibs,1,',')  Substr(' ',1,79),
          'Datasets:' Space(datasets,1,',')  Substr(' ',1,79)
*/
    "(caps)=CAPS";"CAPS=OFF"
    "LINE_BEFORE .ZFIRST=NOTELINE (region)"
    If dfhmqprm=m_sito_i Then dfhmqprm=csqcparm
    subsys=Substr(' ',1,40)'MQ-SS  :' Left(dfhmqprm,4) '  IMS-SS:' dfhdbcon
    "LINE_BEFORE .ZFIRST=NOTELINE (subsys)"
    "LINE_BEFORE .ZFIRST=NOTELINE (rapplid)"
    x=Output('SIT     :',sit)
    x=Output('More SIT:',sitparm)
    If sitparm_x/='' Then x=Output('        +',sitparm_x)
    x=Output('Loadlibs:',loadlibs)
    x=Output('Datasets:',datasets)
    "LINE_BEFORE .ZFIRST=NOTELINE ' '"
    "CAPS=(caps)";"USER_STATE=(status)"
/*  Address ISPEXEC "SETMSG MSG(GC009)"                               */

    Exit

Output:Parse Arg l_pref,data
    Do While Length(data)>62
        If Length(data)>62 Then Do
            data1=l_pref Space(Strip($Wordat(data,62,'l')),1,',')','
            data=Space($Wordat(data,62,'t'))
            "LINE_BEFORE .ZFIRST=NOTELINE (data1)"
            l_pref=Copies(' ',Length(l_pref))
        End
    End
    data=l_pref Space(Strip($Wordat(data,62,'l')),1,',')
    "LINE_BEFORE .ZFIRST=NOTELINE (data)"
    Return 0

/*--------------------------------------------------------------------*/
/* This macro component processes the update of the 3rd party products*/
/* summary file.                                                      */
/*--------------------------------------------------------------------*/
macro_3:
    applmac=;"VPUT (applmac) SHARED"
    "VGET (hits,newi,uwje,prod,jcldsn) SHARED"
    Address ISREDIT;"(status)=USER_STATE"
    "(memb)=MEMBER";"(dsn)=DATASET"
    If "'"dsn"("memb")'"/=cics3pp Then Do
        zedlmsg='Not in member' cics3pp'.'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Exit
    End

    If newi Then Do;"X ALL";"DELETE ALL X";End
    "(last)=LINENUM .ZLAST";"(caps)=CAPS";"CAPS=OFF"
    jclid=Substr('CICS JCL',1,9)':';jclline=jclid jcldsn
    If last=0 Then Do
        pref=Substr(' ',1,9)
        sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
        line='3rd. Party Product use by CICS regions ('sysid'):'
        "LINE_AFTER .ZLAST=(line)"
        line=Copies('-',Length(line))
        "LINE_AFTER .ZLAST=(line)";"LINE_AFTER .ZLAST=' '"
        matrix1=C3$('matrix1',prod)
        string='DB2 .' matrix1;i1=0
        Do while string/=''
            i1=i1+1;Parse VAR string var.i1 . string
            "LINE_AFTER .ZLAST='"Substr(var.i1,1,8)" -" C3$(var.i1)"'"
        End
        "LINE_AFTER .ZLAST=' '"
        "LINE_AFTER .ZLAST=(jclline)"
        "LINE_AFTER .ZLAST=' '"
        matrix2=C3$('matrix2',prod);i2=i1;string=matrix2
        Do while string/='';i2=i2+1;Parse VAR string var.i2 . string;End
        If matrix2/='' Then Do
            d_head=' Data';d_sep=Copies('+-',i2-i1)'+'
        End
        Else Do;d_head=;d_sep=;End
        line=pref||Copies('+-',i1)'+'
        ll=i1*2
        xx=pref||Substr('Loadlib',1,i1*2) d_head
        "LINE_AFTER .ZLAST=(xx)"
        line=line d_sep
        "LINE_AFTER .ZLAST=(line)"
        Do k=1 To 8
            line=pref
            Do j=1 To i1
                ch=Substr(var.j,k,1);If ch='_' Then ch=' '
                line=line'¦'ch
            End
            If matrix2/='' Then Do
                line=line'¦ '
                Do j=i1+1 To i2
                    ch=Substr(var.j,k,1);If ch='_' Then ch=' '
                    line=line'¦'ch
                End
            End
            line=line'¦';"LINE_AFTER .ZLAST=(line)"
        End
        line=Copies('-',Length(pref))Copies('+-',i1)'+' d_sep
        "LINE_AFTER .ZLAST=(line)"
    End
    Else Do
        "F '"jclline"' FIRST"
        If rc/=0 Then Do
            "F '"jclid" ' 1 LAST"
            If rc/=0 Then Do
                "F ' Loadlib ' 9 LAST";"LINE_BEFORE .ZCSR=' '"
                "(lin#)=LINENUM .ZCSR";"CURSOR="lin#-2
            End
            Else Do;jclid=Copies(' ',Length(jclid));jclline=jclid jcldsn;End
            "LINE_AFTER .ZCSR=(jclline)"
        End
    End

    "F '+-' LAST";"(last)=LINENUM .ZCSR"
    Do k=1 To last;"XSTATUS" k"=X";End
    Parse VAR hits member '¦'.
    "F '"member"' 1"
    If rc=0 Then Do
        If uwje Then Do
            "(hits)=LINE .ZCSR"
            hits=Strip(Substr(hits,1,Lastpos('¦',hits))) 'JCL error'
        End
        "LINE .ZCSR=(hits)"
    End
    Else Do
        If uwje Then Signal exi3
        "LINE_AFTER .ZLAST=(hits)"
    End
    "SORT 1 8 NX"

Exi3:
    "CAPS=(caps)";"END"
/*  "F '+++++++' FIRST"                                               */
    Address
    Return

nl: Parse Arg nl1
    "ISREDIT" where "= NOTELINE (nl1)";Return 0
