/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* CC - Clear Column.                                                 */
/*                                                                    */
/* Clears columns for line range indicated by 'C' line commands.      */
/* Colums entered by parameter of format:                             */
/*    sc-ec   where:  sc  - start column                              */
/*                    '-' - literal seperator                         */
/*                    ec' - end column                                */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=
    Parse Upper VAR parm# parm#
    Call parse_parms
    x=Trace(#tr)

    Address ISREDIT;"(status)=USER_STATE"
    "PROCESS RANGE C M";"(cmd)=RANGE_CMD"
    If cmd='C' Then Do
        "(labf)=LINENUM .ZFRANGE";"(labt)=LINENUM .ZLRANGE"
    End
    Else Do;labf=1;"(labt)=LINENUM .ZLAST";End
    "LABEL &LABF=.MARKS"
    If labf/=labt Then Do
        "LABEL &LABT=.MARKE";range='.MARKS .MARKE'
    End
    Else range='.MARKS .MARKS'

    "C P'Â¬' ' ' ALL" sc ec range
    zedlmsg='Data cleared.';Signal ext1

ext1:
    "USER_STATE=(status)"
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    #tr=parse_cons('TRACE','R','O')
    If #tr='O' Then #tr=parse_cons('/TR','R','O',3)
    If com='N' Then com = parse_cons('/U','U','N',2)

    all=parse_cons('/A','ALL','NULL',2)
    If all='' Then all=parse_cons('A','ALL','NULL',1)

    ot=parse_cons('APPLY','NULL','NOTELINE',2)

    sc=parse_cons('-',,'NULL','WORD')
    If sc/='' Then Do
        Parse VAR sc sc '-' ec
        If sc='' | sc='*' Then sc=1
        Else If \Datatype(sc,'W') Then Do
            zedlmsg="Invalid FROM range.";Signal err01
        End
        If ec='' | ec='*' Then "ISREDIT (ec)=LRECL"
        Else If \Datatype(ec,'W') Then Do
            zedlmsg="Invalid TO range.";Signal err01
        End
    End
    Else Do
        zedlmsg="Missing column range of format 'scol-ecol'.";Signal err01
    End

    Return 0

err01:
    "SETMSG MSG(ISRZ001)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
