/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Edit macro to hit a CUT/PASTE copy of AVRS archive screen for      */
/* restoration into a private library.                                */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC
    ARG parm#
    Parse SOURCE . . xcmd .
    IF PARM# /= "" THEN SIGNAL BYP1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (PARM#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1
    is_mac = 'Y'

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    "VGET (udmacro) SHARED"
    If udmacro = 'Y' Then Signal macro_1


    Address TSO
    "NEWSTACK"

    Call parse_parms

    If dsname = '' Then Do
        dsname = '????????'
        subit  = 'N'
    End
    If node   = 'ANZ?' Then subit  = 'N'

    Call Get_block_0
    If subit /= 'Y' Then Do
        Queue ''
        Address ISPEXEC
        "VGET ZTEMPF"
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        udmacro = 'Y'
        "VPUT (udmacro,node,dsname) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd")"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
    End
    Else Do
        Queue "ZZ"
        x = Msg('On')
        x = Outtrap('line.',10,'NOCONCAT')
        Address TSO "SUBMIT * END(ZZ)"
        x = Msg('On')

        Do i=1 To line.0
            If Index(line.i,'SUBMITTED') > 0 Then Do
                line = ' 'line.i
                Parse VAR line ' JOB ' rest
                gc009 = 'JOB' rest
                Address ISPEXEC "SETMSG MSG(GC009)"
            End
        End
    End

    Address TSO 'DELSTACK'

    Exit

/*--------------------------------------------------------------------*/
/* prc_c = 'Q' will queue the message.                                */
/*--------------------------------------------------------------------*/
process_block:
    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,2) = 'I\' Then Do Forever
            line = '  'Substr(line,3)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        If pro_c = 'Q' Then,
            Queue Substr(line,3,72)
        Else,
            x = nl('*'Substr(line,1,ml)'*')
    End

    Return 0

errproc:
    Call Off Error
    Return Sigl

/*--------------------------------------------------------------------*/
/* is_mac = 'Y' will NOTELINE message else SAY it.                    */
/*--------------------------------------------------------------------*/
nl:
    Parse Arg noteline
    If is_mac = 'N' Then,
        Say noteline
    Else,
        "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (noteline)"
    Return 0

/*--------------------------------------------------------------------*/
/* Set up notelines for the JCL generated                             */
/*--------------------------------------------------------------------*/
Help_me:
    is_mac = 'N'
    x_msg = Msg()
    x     = Msg('Off')
    ml    = 77                              /* Message length         */

    Call get_block_2
    x = Msg(x_msg)
    x = nl('*'Centre('ooo000OOOO000ooo',ml,'-')'*')
    pro_c = 'N'
    Call process_block

    x = nl('*'Copies('-',ml)'*')

    Exit

macro_1:
    udmacro = ''
    "VPUT (udmacro) SHARED"
    "VGET (dsname,node) SHARED"
    "ISREDIT RESET"
/*--------------------------------------------------------------------*/
/* Set up notelines for the JCL generated                             */
/*--------------------------------------------------------------------*/
    x_msg = Msg()
    x     = Msg('Off')
    ml    = 70                              /* Message length         */

    Call get_block_1
    x = Msg(x_msg)
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',ml,'-')'*')
    pro_c = 'N'
    Call process_block

    x = nl('*'Copies('-',ml)'*')
    "ISREDIT CAPS = (caps)"

    msg = ''
    If node = 'ANZ?' Then Do
        msg = "ALL the destination nodes 'ANZ?'"
        "ISREDIT CURSOR = 14 39"
    End
    If dsname = '????????' Then Do
        If msg /= '' Then msg = msg' and '
        Else "ISREDIT CURSOR = 16 26"
        msg = msg"dataset names '????????'"
    End
    If msg /= '' Then Do
        gc009 = "Please enter correct values for" msg "prior to",
                "submitting."
        Address ISPEXEC "SETMSG MSG(GC009)"
    End
    Exit

Get_block_0:
    userid = Userid()
    cddsn  = 'TPM.'userid'.$CD.TRASH'
    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    cddet_fr = Date('e') Substr(Time(),1,5)'>'node  'DSN='dsname
    cddet_to = Date('e') Substr(Time(),1,5)'<'sysid 'DSN='dsname
    jobid = Substr(userid'DMB',1,8)

Queue "//"jobid" JOB CLASS=E,MSGCLASS=V,NOTIFY="Userid()
Queue "//*MAIN SYSTEM="sysid
Queue "//*"
Queue cjcl(Copies('-',68))
Queue cjcl(' ')
Queue cjcl(' CONNECT:DIRECT BATCH TRANSMISSION')
Queue cjcl(' ')
Queue cjcl(Copies('-',68))
Queue "//*"
Queue "//PS010    EXEC  DMBATCH                                  "
Queue "//VIOSTAT1 DD  DUMMY                                      "
Queue "//SYSIN    DD  *                                          "
Queue "         SIGNON                                           "
Queue "         SUBMIT    PROC=COPY SNODE="node "         -      "
Queue "                   &NODE=PNODE                    -       "
Queue "                   &DSN1="dsname "-"
Queue "                   &DSN2="dsname "-"
Queue "                   &DISP1="disp"                    -     "
Queue "                   &DISP2=CATLG                   -       "
Queue "                   &COMPRESS=COMPRESS                     "
Queue "         SIGNOFF                                          "
Queue "/*                                                        "
Queue "//*                                                       "
Queue "//*----------------------------------------------------------------*"
Queue "//*  Create record of dataset shipped TO on source system          *"
Queue "//*----------------------------------------------------------------*"
Queue "//WHERETO  EXEC PGM=IEBGENER"
Queue "//SYSPRINT DD  SYSOUT=*"
Queue "//SYSUT2   DD  DSN="cddsn","
Queue "//             DISP=(MOD,CATLG),"
Queue "//             UNIT=DISK,"
Queue "//             SPACE=(TRK,(15,5)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)"
Queue "//SYSIN    DD DUMMY"
Queue "//SYSUT1   DD *"
Queue cddet_fr
Queue "/*"
Queue "//                                                        "

Queue "//"userid"CDD JOB CLASS=E,MSGCLASS=V,NOTIFY=&SYSUID"
Queue "//*ROUTE XEQ" node
Queue "//"userid"CDD NJB CLASS=E,MSGCLASS=V,NOTIFY=&SYSUID"
Queue "//*----------------------------------------------------------------*"
Queue "//*  Create record of dataset shipped FROM on destination system   *"
Queue "//*----------------------------------------------------------------*"
Queue "//WHEREFR  EXEC PGM=IEBGENER"
Queue "//SYSPRINT DD  SYSOUT=*"
Queue "//SYSUT2   DD  DSN="cddsn","
Queue "//             DISP=(MOD,CATLG),"
Queue "//             UNIT=DISK,"
Queue "//             SPACE=(TRK,(15,5)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)"
Queue "//SYSIN    DD DUMMY"
Queue "//SYSUT1   DD *"
Queue cddet_to
Queue "/*"
Queue "//*"
Queue "//"

    Return 0

cjcl:
    Arg data
    Return '//*'Substr(data,1,67)'*'

get_block_1:
    Trace o
    "CONTROL ERRORS RETURN"
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

    You can manually submit this JCL from the command line
                       - or -
    Copy it to another member for later use
                       - or -
    Submit it in 1 step by passing a parameter of "SUB" and bypass
    this edit session.
    To perform this 1 step submission you must also pass a
    destination node paramer in the format of 'N=ANZx' where 'x' is
    you know.

    Parameter of 'N=ANZx' will update the JCL otherwise the cursor
    will be placed on the '?'. However, don't forget to change the
    other occurance.

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Trace
    Return 0

get_block_2:
    Trace o
    "CONTROL ERRORS RETURN"
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

    No help written up...

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Trace
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#
    trace = parse_cons('TRACE')

    node  = parse_varb('NODE=','ANZ?')
    If node = 'ANZ?' Then node  = parse_varb('N=','ANZ?')
    If Length(node) = 1 Then node = 'ANZ'node
    subit = parse_cons('SUB',,,2)

    disp  = parse_cons('SHR','*','NEW')

    yy     = parm#
    dsname = ''
    Do Forever
        If yy = '' Then Leave
        Parse VAR yy xx yy
        If Substr(xx,1,1) = "'" Then xx = Substr(xx,2,Length(xx)-2)
        If Sysdsn("'"xx"'") /= 'OK' Then Iterate
        dsname = xx
        Leave
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

