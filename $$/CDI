/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/*  CDI: CICS Dump Inventory                                          */
/*                                                                    */
/*  EXEC to create an inventory of CICS dumps from a dump dataset     */
/*                                                                    */
/*--------------------------------------------------------------------*/
CDI:cdi_ver='1.07'
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=
    Parse Upper VAR parm# parm1 parm2 parm3
    If Wordpos(Word(parm#,1),'HELP /H ? /? ??')>0 Then Do
        Parse SOURCE . . xcmd .
        If Word(parm#,1)='??' Then Signal Help_me
        #msg=Msg('Off');Signal on Syntax Name Help_me
        x=$Br(xcmd '??')
        Exit
    End
    ##tr=Trace('O');Call parse_parms;#tr=Trace(##tr)

    acct=$alkacct()

    llq='TRASH';msg=;ver='C';regn=;id='I';act='I';optn='INVENTORY'
    skel='CDIS';panel='CDIP';curs=
    userid=Userid();sysuid=userid
    v1='def_ex def_hd def_bb def_vm'
    Interpret 'Parse Value $alkjc(v1) With' v1
    cl       = def_hd                       /* Output class           */
    mcl      = def_bb                       /* Message class          */
    vmcl     = def_vm                       /* Message class          */
    jcl      = def_ex                       /* Job CLass              */
    jcln     = def_ex                       /* Job CLass Normal       */
    jclp     = def_ex                       /* Job CLass (Production) */
    jcregn   = 'REGION=0M,'                 /* Job card region        */
    #dcv     = '??'                         /* See $alkcics()         */
    title    = 'DUMP(inventory)'
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(title);If x/='' Then title=x
error_off_alkjcpg:Signal off Syntax

/*--------------------------------------------------------------------*/
/* Work out CICS load library                                         */
/*--------------------------------------------------------------------*/
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))

/*--------------------------------------------------------------------*/

screen1:
    zcmd=;head=;regn=;which=
    "DISPLAY PANEL(&PANEL) MSG(&MSG) CURSOR(&CURS)"
    If rc/=0 Then Exit
    If Substr(dumpds,1,1)/="'" Then dumpds="'"hlq"."dumpds"'"

finddsn:
    If cdumpvol/='' Then Do
        xx=Listdsi("'SYS1.LINKLIB' VOLUME("cdumpvol")")
        If sysreason=22 Then Do
            xcall=;msg='zedlmsg'
            zedlmsg="Volume '"cdumpvol"' not mounted or defined to the",
                    "system."
            curs='CDUMPVOL'
            Signal scrret1
        End
        invvol=cdumpvol
    End
    Else Do
        If sysdsn(dumpds)/='OK' Then Do
            xcall=;msg='zedlmsg'
            zedlmsg = "Dump data set not found."
            curs='DUMPDS'
            Signal scrret1
        End
        invvol=
    End
    sdumpds=Strip(dumpds,,"'")
    If Substr(sdumpds,3,1)='P' Then jcl=jclp;Else jcl=jcln
    dumpinv=hlq"."sdumpds"."llq

    Call btchjclc

scrret1:
    "SETMSG MSG(ISRZ001)"
    If xcall='Y' Then Exit
    Signal screen1

btchjclc:
    Parse Value $alkcics('loadmnt dfhdump',cdumpv) With sdfhload dfhdump
    Parse VAR sdumpds hlq '.' mlq1 '.' mlq2 '.' llq '.' xlq
    If llq='' Then llq=mlq2;If hlq='DNMCICS' Then hlq='DNDCICS'
    sdfhload=$cstring(sdfhload,'DN%CICS',hlq)
    jobid=Strip(Substr(userid||id,1,8))
    "FTOPEN TEMP";"FTINCL" skel;"FTCLOSE";"VGET ZTEMPF"
    xxx=Translate(zcmd parm1 parm2 reply,' ','/')
    If Wordpos('EDIT',xxx)>0 | Wordpos('Y',xxx)>0 Then Do
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        zz='NOTEZED';xx=$ddalloc('ISPSLIB',,zz)
        If Datatype(xx,'w') Then umodelds=;Else umodelds="'"xx"("zz")'"
        "VPUT (umodelds) SHARED"
        "EDIT DATAID(&DATAID) MACRO(UMODEL)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
    End
    tempsub=ztempf;"VPUT TEMPSUB SHARED";Drop tempsub
    Address TSO "%TEMPSUB"
    "VGET MESSAGE SHARED";zedlmsg=message"."
    reply=
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:

    #tr=parse_cons('TRACE','R','O')
    If #tr='O' Then #tr=parse_cons('/TR','R','O',3)

    reply=parse_cons('/E',,,2)
    If reply='N' Then reply=parse_cons('E',,,1)
    todasd=parse_cons('/D') If todasd='Y' Then reply='Y'
    cdumpv=parse_cons('/31','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/23','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/22','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/13','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/41','*','NULL')
    If cdumpv='' Then cdumpv=$alkcics('ver')
    Else cdumpv=Substr(cdumpv,2)

    Parse VAR parm# dumpds parm#
    If parm# /= '' Then Do
        zedlmsg = "Unrecognised parameter >"parm#"< entered. Correct and",
                "re-submit."
        "SETMSG MSG(ISRZ001)"
        Exit
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

Help_me:
    tfl=75                                  /* Text Flow limit        */
    n_st=mark(2)                            /* Mark Start             */
/*

  Hello &CNAME..

  CDI: CICS Dump Inventory

  This routine is required to produce an inventory of the contents of a
  CICS dump dataset.

  It is designed to execute against a dataset list under ISPF option 3.4.

  It will genearte a dump list that can then be processed by macro CDP
  (CICS Dump Print) to select the dump to be printed.

  Parameters:
    1. Pass parameter of dump dataset.
    2. Pass parameter of CICS version. Valid parameters are 41, 13, 22 or
       23 for the appropriate version.  This parameter is a keyword and may
       be the first or second parameter.  To use this feature, you will
       require access to $ALKCICS.

  Miscellaneous:
    1. Routine $ALKCICS is used to site customise your dataset names for
       the applicable version(s) of CICS.  This is a required routine.

*/
    n_en=mark(-2)                           /* Mark End               */

    chgchar='&';cname='there';xpad=79-tfl
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_1: Signal Off Syntax

    If ima_macro Then x=nl_h(Centre('ooo000OOOO000ooo',tfl+xpad,'-'))
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If Â¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(Substr(line,1,tfl+xpad))
    End
    If ima_macro Then x=nl_h(Copies('-',tfl+xpad))
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
    Return 0
