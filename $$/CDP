/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* Macro to process output from a CICS dump inventory for dump print  */
/* selection.                                                         */
/*                                                                    */
/* For further details, invoke with parameter of '?'...               */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     CDP      - Driver                                              */
/*                                                                    */
/*   Panels:                                                          */
/*     CDPPT    - Dump selection display panel.                       */
/*     HNOHELP  - Panel to inform user that no help panel available.  */
/*                                                                    */
/*   Skeleton:                                                        */
/*     CDIS     - Skeleton to create JCL to print selected dump       */
/*                                                                    */
/*--------------------------------------------------------------------*/
CDP:cdp_ver='1.07'
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse SOURCE . xenv xcmd xdd xdsn .
    If \ima_macro Then Do
        gc009='"'xcmd'" must be run in an edit/view session.'
        "SETMSG MSG(GC009)";Exit
    End
    Parse Upper VAR parm# parm#

    dumped='DUMPED'
    hlq=$alkhlq();acct=$alkacct()
    auddsn="'"hlq".$256("dumped")'"

    If Wordpos(Word(parm#,1),'? /? HELP /HELP')>0 Then Signal help

    #tr#=Trace('O');Call parse_parms;x=Trace(#tr#)
    Address ISREDIT
    "(status)=USER_STATE";"(lin#)=CURSOR"
    "F 'INDEX OF DUMPS ON DATASET' FIRST"
    If rc/=0 Then Do
        gc009='Does not appear to be an inventory of CICS dumps.'
        Signal msgx1
    End
    "(first)=LINENUM .ZCSR";"(line)=LINE .ZCSR";"(last)=LINENUM .ZLAST"
    sdumpds=Word(Substr(line,2),6);tablenm='CD'Time('s')
    dyna="`Dump DSN:?'"sdumpds"'"
    Address
    "TBEND &TABLENM"
    "TBCREATE &TABLENM KEYS(DUMPID)",
                      "NAMES(CODE TASK TIME DATE RM LN) NOWRITE",
                      "REPLACE"
    If recit='Y' Then Do
        dd="DR"Time('s')
        Address TSO "ALLOC F("dd") DSN("auddsn") SHR REU"
        If rc=0 Then Do
            Address TSO "EXECIO * DISKR "dd" (STEM line. FINIS)"
            Address TSO "FREE F("dd")"
        End
        Else recit='N'
    End

    first=first+1
    Do i=first To last
        ln=i;"ISREDIT (line) = LINE" i
        line=Strip(Substr(line,2),'t')
        w1=Word(line,1)
        If w1='END' Then Leave
        If Index(w1,'/')=0 Then Iterate
        Parse VAR line dumpid applid date time task code .
        ignore='N'
        If recit='Y' Then Do
            rm=
            Do j=1 To line.0
                If Index(line.j,task)>0 & Index(line.j,code)>0 Then Do
                    Parse VAR line.j . . . . . . rm
                    rm=Strip(rm)
                    If igrec='Y' Then ignore='Y'
                    Leave
                End
            End
        End
        Else rm=applid
        If ignore='N' Then "TBADD &TABLENM"
    End
    "TBTOP &TABLENM"
    userid=Userid();id='P';act='P'
    optn='PRINT';skel='CDIS';panel='CDPPT'
reply='Y'
    ttype='A'                               /* F(ull) / A(brev)       */
    stsk='*';scod='*';sdate='*';stime='*';drow='ALL'
    v1='def_ex def_hd def_bb def_vm'
    Interpret 'Parse Value $alkjc(v1) With' v1
    cl     = def_hd                         /* Output class           */
    mcl    = def_bb                         /* Message class          */
    vmcl   = def_vm                         /* Message class          */
    jcl    = def_ex                         /* Job CLass              */
    jcln   = def_ex                         /* Job CLass Normal       */
    jcregn = 'REGION=0M,'                   /* Job card region        */
    If tonly='Y' Then Do
        drow='SCAN';#drow='RESET'
        Parse VALUE Date('e') With dd '/' .
        sdate=dd'*'
        "TBVCLEAR &TABLENM"
        task=stsk;code=scod;date=sdate;time=stime
        "TBSARG &TABLENM"
    End
/*--------------------------------------------------------------------*/
/* Work out CICS load library                                         */
/*--------------------------------------------------------------------*/
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
/*--------------------------------------------------------------------*/
scr1:
    zcmd=;sel=;
    #tsk=stsk;#cod=scod;#date=sdate;#time=stime;#drow=drow
    "TBDISPL &TABLENM PANEL(&PANEL)"
    If rc>4 Then Do
        "TBEND &TABLENM";Signal exit1
    End
    Parse VAR zcmd cme parm1 .
    If zcmd='TRACE' Then Do
        Select
            When (parm1='ON')  Then #tr='R'
            When (parm1='OFF') Then #tr='O'
            Otherwise Do
                If Verify(Trace(),'NO')>0 Then #tr='R';Else #tr='O'
            End
        End
        x=Trace(#tr);Signal scr1
    End

    Select
        When (zcmd='ALL') Then Do
            drow='ALL';stsk='*';scod='*';sdate='*';stime='*'
        End
        When (stsk='*' & scod='*' & sdate='*' & stime='*') Then rowd='ALL'
        When (#tsk/=stsk | #cod/=scod | #date/=sdate | #time/=stime) Then Do
            "TBTOP &TABLENM"
            drow='SCAN';#drow='RESET'
            "TBVCLEAR &TABLENM"
            task=stsk;code=scod;date=sdate;time=stime
            "TBSARG &TABLENM"
        End
        Otherwise NOP
    End
    If #drow/=drow Then Signal scr1

    msub=ztdsels
    Signal con2

mlt2:
    "TBDISPL &TABLENM"

con2:
    "CONTROL DISPLAY SAVE"
    reply=

    Select
        When (sel='')  Then Signal scr1
        When (sel='P' | sel='S') Then Call btchjclc
        When (sel='R' | sel='S') Then Call btchjclc
        When (sel='E') Then Do
            reply='Y'
            Call btchjclc
        End
        When (sel='C') Then Do
            gc009=rm
            "SETMSG MSG(GC009)"
            msub=0
        End
        Otherwise Do
            gc009="Invalid selection '"sel"', re-enter."
            "SETMSG MSG(GC009)"
            msub=0
        End
    End

nxt2:
    "CONTROL DISPLAY RESTORE"
    msub=msub-1
    If msub<1 Then Signal scr1;Else Signal mlt2

btchjclc:
    Parse Value $alkcics('loadmnt dfhdump',cdumpv) With sdfhload dfhdump
    jobid=userid'P'
    title=Strip(task)'-'Strip(code)
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(title);If x/='' Then title=x
error_off_alkjcpg:Signal off Syntax

    "FTOPEN TEMP";"FTINCL" skel;"FTCLOSE";"VGET ZTEMPF"
    xxx=Translate(zcmd parm1 parm2 reply,' ','/')
    If Wordpos('EDIT',xxx)>0 | Wordpos('Y',xxx)>0 Then Do
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        zz='NOTEZED';xx=$ddalloc('ISPSLIB',,zz)
        If Datatype(xx,'w') Then umodelds=;Else umodelds="'"xx"("zz")'"
        "VPUT (umodelds) SHARED"
        "EDIT DATAID(&DATAID) MACRO(UMODEL)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
    End
    tempsub=ztempf;"VPUT TEMPSUB SHARED";Drop tempsub
    Address TSO "%TEMPSUB"
    rc1=rc
    "VGET MESSAGE SHARED";gc009=message"."
    If rc1=0 Then Do
        "VGET JOBNUMB SHARED"
/*      rm='Printed'                                                  */
        rm='J('jobnumb')'
        If sel='R' Then Do
            Address TSO "ALLOC F("dd") DSN("auddsn") SHR REU"
            If rc=0 Then Do
                lineo.0=1
                "ISREDIT (line) = LINE" ln
                Address TSO "EXECIO * DISKR "dd" (STEM lineo. FINIS)"
                rn=lineo.0+1
                lineo.rn=' 'Substr(line,2,64)'(PRINTED)' rm
                Address TSO "EXECIO * DISKW "dd" (STEM lineo. FINIS)"
                Address TSO "FREE F("dd")"
                rm=rm 'and added.'
            End
        End
    End
    Else rm="Canc'd"
    "TBMOD &TABLENM"

    Return 0

msgx1:
    "SETMSG MSG(GC009)"

exit1:
    "ISREDIT USER_STATE=(status)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    #tr=parse_cons('TRACE','R','O')
    cdumpv=parse_cons('/31','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/23','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/22','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/21','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/13','*','NULL')
    If cdumpv='' Then cdumpv=parse_cons('/41','*','NULL')
    If cdumpv='' Then cdumpv=$alkcics('ver')
    Else cdumpv=Substr(cdumpv,2)
    tonly=parse_cons('/T')
    recit=parse_cons('/R')
    igrec=parse_cons('/I')
    If igrec='N' Then igrec=parse_cons('/RI')
    If igrec='N' Then igrec=parse_cons('/IR')
    If igrec='Y' Then recit='Y'

    Parse VAR parm# xx .
    If Datatype(xx)='NUM' Then Do
        If xx>last Then xx=last
        zfrange=xx;zlrange=xx
    End

    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

help:
    Signal on Syntax Name error_off_1
    cname='there';cname=$Whoami('C')
error_off_1: Signal Off Syntax

help:
    chgchar='&'                             /* Variable substitute    */
    n_st=mark(2)                            /* Mark next line         */
/*

    Hello &CNAME..


    CICS Dump Print selection.

    Parameters:
       /IR  - Ignore reconciled
       /R   - Reconcile with reported abends (in dataset
              &AUDDSN.)
       /RI  - Same as '/IR'
       /T   - Only todays dumps

    Selections:
       C    - Display full comment details as message
       E    - Select for print and present JCL under editor
       P    - Select for print
       R    - Select for print and record in audit file (same file
              as defined in parameter '/R' above)
       S    - Select for print

    For details of packaging this function, browse REXX member '&XCMD.'.

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    "ISREDIT (caps)=CAPS";"ISREDIT CAPS=OFF"
    x=nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line = p1 || 'var' || p2'
        End
        x=nl('*'Substr(line,1,70)'*')
    End
    x=nl('*'Copies('-',70)'*')
    "ISREDIT CAPS=(caps)"
    Return 0

Mark:Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
nl:Parse Arg #l;"ISREDIT LINE_BEFORE .ZFIRST=NOTELINE (#l)";Return 0
