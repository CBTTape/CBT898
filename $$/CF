/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to format COBOL code.                                      */
/*                                                                    */
/* Permissable para,meters:                                           */
/*  CP     - Change prefix.                                           */
/*  ALL    - Process all lines (otherwise line command select lines)  */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Parse Upper ARG parm#
    If parm# /= "" Then Signal byp1
    Address ISPEXEC
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    If parm# = "HELP" | parm# = "?" | parm# = '/?' Then Do
        "ISPEXEC SELECT PGM(ISPTUTOR) PARM(AFH000)"
        Exit
    End
    #fa  =  8                               /* Command starting col   */
    #fb  = 12                               /* Operand starting col   */
    #cp  = 44                               /* PIC start col          */
    #cv  = 54                               /* VALUE start col        */
    "ISPEXEC VGET (cfcacol cfcbcol cfcpcol cfcvcol) PROFILE"
    If cfcacol = '' Then Do
        cfcacol = #fa
        cfcbcol = #fb
        cfcpcol = #ts
        "ISPEXEC VPUT (cfcacol cfcbcol cfcpcol) PROFILE"
    End
    ca      = cfcacol
    cb      = cfcbcol
    cp      = cfcpcol
    cv      = cfcvcol
    zfrange = ''
    linexi  = '      '

    "ISREDIT (last) = LINENUM .ZLAST"
    Call parse_parms

    If trace = 'Y' Then Trace r

    If all = 'Y' Then Do
        zfrange = 1
        "ISREDIT (zlrange) = LINENUM .ZLAST"
    End
    Else Do
        "ISREDIT PROCESS RANGE C M"
        "ISREDIT (cmd) = RANGE_CMD"
        If cmd = 'C' Then Do
            "ISREDIT (zfrange) = LINENUM .ZFRANGE"
            "ISREDIT (zlrange) = LINENUM .ZLRANGE"
        End
        Else Do
            If zfrange = '' Then Do
                "ISREDIT (zfrange) = CURSOR"
                zlrange = zfrange
            End
        End
    End

    If change_pref = 'Y' Then Do
        pref = ''
        Do i=zfrange To zlrange
            "ISREDIT (line) = LINE" i
            If Substr(line,7,1) /= ' ' Then Iterate
            line = Substr(line,7)
            If DataType(Word(line,1)) /= 'NUM' Then Iterate
            PARSE VAR line . pref '-' .
            pref = Strip(pref)
            Leave
        End
        If pref = '' Then Do
            gc009 = 'No valid prefix found on lines to be changed.'
            Signal erx1
        End
        If Index(pref,':') > 0 Then irl = 8
        Else                        irl = 6
        If Length(pref) < irl Then Do
            "ISREDIT LABEL &ZFRANGE = .LINSTA"
            If zfrange /= zlrange Then Do
                "ISREDIT LABEL &ZLRANGE = .LINEND"
                line_range = '.LINSTA .LINEND'
            End
            Else line_range = '.LINSTA .LINSTA'
            "ISREDIT C ' "pref"-' ' "pref"IR-' ALL" line_range
        End
    End

    "ISREDIT RESET"
    linex = linexi
    cid   = ''
    lin#s = zfrange
    line_owe = ''

    "ISREDIT LABEL &ZFRANGE = .LINSTA"
    If zfrange /= zlrange Then Do
        "ISREDIT LABEL &ZLRANGE = .LINEND"
        line_range = '.LINSTA .LINEND'
    End
    Else line_range = '.LINSTA .LINSTA'
    lin#o = zlrange
    length_err = 'N'

    Do lin#i=zfrange To zlrange
      "ISREDIT (line) = LINE" lin#i
      If Substr(line,7,1) = '*' | Substr(line,7,1) = '/' |,
                                  Strip(line) = '' Then Do
          Call nl('      'Substr(line,7))
          lin#s = lin#i +1
          linex = linexi
          cid   = ''
          Iterate
      End
      Parse VAR line seq 7 line 73 c73on
      If cid = '' Then cid = c73on
      If linex /= '' Then linex = linex || Strip(line,'B')' '
      Else                linex = linex || Strip(line,'T')' '
      xx = Strip(linex)
      If xx /= '' Then,
          If Substr(xx,Length(xx),1) = '.' Then Do
              Call process_line
              lin#s = lin#i +1
              linex = linexi
              cid   = ''
          End
    End

    "ISREDIT DEL ALL NX" line_range
    If length_err = 'Y' Then,
        gc009 = 'Name length error detected. Look for noteline.'
    Else gc009  ''

erx1:
    "ISPEXEC SETMSG MSG(GC009)"

ext1:
    Exit

process_line:
    If Word(linex,1) = '88' Then Do
        line_owe = line_owe || Substr(linex,1,72)
        Return 0
    End
    pic_found = Index(' 'linex' ',' PIC ')
    If pic_found = 0 Then pic_found = Index(' 'linex' ',' PICTURE ')
    If pic_found = 0 Then Do
        Do j=lin#s To lin#i
            "ISREDIT (liney) = LINE" j
            Call nl('      'Substr(liney,7))
        End
        Return 0
    End
    If Length(Word(linex,2)) > 30 Then Do
        lx = Length(Word(linex,2)) - 30
        xx = '* Next name exceeds 30 characters by' lx'. Please correct.'
        line_owe = line_owe || Substr(xx,1,72)
        length_err = 'Y'
    End
    If Word(linex,1) = '88' Then Do
        line_owe = line_owe || Substr(linex,1,72)
        Return 0
    End
    If Datatype(Word(linex,1)) /= 'NUM' Then Return 0
    Parse VAR linex p1 ' PIC ' p2 p3 '.'
    p1 = Strip(p1,'t')
    p2 = eval_pic(p2)
    If p3 /= '' Then p3 = ' 'Strip(p3)
    If Length(p1) > #cp - 2 Then Do
        Call nl(p1)
        p1 = Substr(' ',1,42)
    End
    Else p1 = Substr(p1,1,#cp-2)
    If Length(p1 'PIC' p2 || p3) > 72 Then Do
        Call nl(p1 'PIC' p2)
        linex = Substr(' ',1,52) p3
    End
    Else linex = p1 'PIC' p2 || p3
    If Length(linex ap1) > 72 Then Do
        Call nl(linex)
        linex = Substr(' ',1,52) ap1
    End
    Else linex = linex ap1
    Call nl(linex)

    Return 0

nl: Arg ntl
    ntl = Substr(ntl,1,72) || cid
    "ISREDIT LINE_AFTER" lin#o "= (ntl)"
    lin#o = lin#o +1
    Do While line_owe /= ''
        Parse VAR line_owe linen +72 line_owe
        "ISREDIT LINE_BEFORE" lin#o "= NOTELINE (linen)"
    End
    Return 0

eval_pic: Arg pici
    pico = ''
    If Substr(pici,1,1) = 'X' Then Do
        ap1 = 'VALUE SPACE.'
        picv = 'X'
    End
    Else Do
        ap1 = 'VALUE ZERO.'
        picv = '9'
    End
    If Index(pici,'(') = 0 Then Do
        v2 = Length(pici)
        If Length(v2) = 1 Then v2 = '0'v2
        pico = picv'('v2')'
    End
    Else Do Forever
        Parse VAR pici v1 '(' v2 ')' pici
        If v2 = '' Then v2 = 1
        If Datatype(v2) = 'NUM' Then v2 = v2 +0
        If Length(v2) = 1 Then v2 = '0'v2
        pico = pico || v1'('v2')'
        If pici = '' Then Leave
    End
    Return pico

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE',,,1)
    If trace = 'N' Then trace = parse_cons('/TR',,,2)

    change_pref = parse_cons('/CP',,,2)
    If change_pref = 'N' Then change_pref = parse_cons('CP',,,1)

    all   = parse_cons('ALL',,,1)
    If all = 'N' Then all = parse_cons('/A',,,2)

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

