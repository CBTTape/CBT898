/* REXX */
cicu:cicu_ver='2.11'
/*==================================================================*/
/*                                                                  */
/*  CICU     - This is the CICS Start / Stop Exec for TSO           */
/*           - Start and Stop CICS Regions                          */
/*           - Called by old TSO CICSUP TSO panels                  */
/*           - Called by QSTart / QSHut TSO Commands                */
/*                                                                  */
/*==================================================================*/
/*                                                                  */
/*  MODIFICATIONS                                                   */
/*                                                                  */
/*  YYMMDD - WHO - ?DESC?                                           */
/*  ------ - --- - -----------------------------------------------  */
/*  111009 - ALK - Added the "R|*" startup option to bypass SUA     */
/*                 checking (default).                              */
/*  021009 - ALK - Split SUA parmlib dataset into LPAR dedicated    */
/*                 regions.                                         */
/*  300709 - ALK - Added I(NITIAL) startup option and verify of     */
/*                 startup change option.                           */
/*                 Added instream documentation.                    */
/*  050607 - pac - Add CICS*AN & CICS*AP & CICS*AQ                  */
/*  050419 - pac - Add CICS*AM                                      */
/*  041104 - rz  - Add CICS*AJ & CICS*AL                            */
/*  030506 - pac - Add CICS*AH & CICS*AI                            */
/*  030428 - pac - Delete CICSP8A                                   */
/*  030203 - pac - Alter user_auth variable to userauth             */
/*  020618 - pac - Delete CICSP89                                   */
/*  010214 - pac - Add SYE                                          */
/*  991115 - RJR - Add regions Q00 Q01 Q02                          */
/*  991109 - pac - Add regions T01 T02                              */
/*  991018 - RJR - Add code to validate CICS region exists on LPAR  */
/*  991018 - RJR - Remove old code used to select jcl lib           */
/*  990921 - PAC - All regions, All lpars use Common JCL lib        */
/*  990913 - PAC - DG* DD* Q1* R1* now in Common JCL lib            */
/*                 If CU Lib is XX, Skel will use Common JCL Lib    */
/*                 Added CU Lib of XX for I2*, D0*, T0*             */
/*  990903 - PAC - Added code to support Single Common JCL Lib      */
/*                 All msgs prefixed with "CICU:"                   */
/*                 COLD option for T32 Only                         */
/*                 Merged USR4010 into this exec                    */
/*  990816 - PAC - MAJOR rework of code - was a bit spaghetti like  */
/*  990802 - PAC - Removed CICSRZ* regions                          */
/*                                                                  */
/*==================================================================*/

  PARSE UPPER ARG parm#
  Parse SOURCE . . xcmd .
  sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
  xsysid=sysid
  c_up='g'                                /* Color UP               */
  c_nu='r'                                /* Color Not Up           */

  If Wordpos('/T',Translate(parm#))>0 Then Do
      parm#=Delword(parm#,Wordpos('/T',Translate(parm#)),1);#te=Trace(r)
  End

  If Wordpos(Word(Arg(1),1),'??')>0 Then Signal Help_me
  If Wordpos(Word(Arg(1),1),'? /? HELP /H /HELP')>0 Then Do
      x=$BR("%"xcmd "??")
      Return
  End

  PARSE VAR parm# cicreg cicopt edjcl .
  If cicreg='.' Then cicreg=;@cicreg=cicreg
  If cicopt='.' Then cicopt=
  Parse Value '1' With i_rq cicsup
  If sysid='SY2' Then Do
      valid_reg2=CICU$('SY2')
      valid_regions=valid_reg2
/*    If edjcl='' Then edjcl='N'                                      */
If edjcl='' Then Do
    If Userid()='xT32AZK' Then edjcl='Y';Else edjcl='N'
End
  End
  Else Do
      valid_reg5=CICU$('SY5')
      valid_reg8=CICU$('SY8')
      valid_regions=valid_reg5 valid_reg8
      If edjcl='' Then edjcl='Y'
  End

  /* Default Environment                                            */
  ADDRESS COMMAND ;

  call CHECK_USER_AUTH ;               /* Check User Authority      */

  call VALIDATE_PARMS  ;               /* Check Parms               */

  IF  parms_OK = 'Y' THEN              /* Parms OK                  */
      call NON_PANEL ;                 /* Bypass Panel              */
  ELSE,
      call DIS_PANEL ;                 /* Use Panel to Validate     */

  ADDRESS ISPEXEC "SETMSG MSG(ISRZ000)" ;
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)" ;

  EXIT 0 ;  /* END of Program */

/*------------------------------------------------------------------*/
CHECK_USER_AUTH:
/*------------------------------------------------------------------*/
/*  Invoke ACF2,                                                    */
/*  Extract user's UID string                                       */
/*  Set userauth value                                              */
/*------------------------------------------------------------------*/

  x = OUTTRAP("acf_out.",1) ;

  queue   "set terse" ;
  queue   "list *"    ;
  queue   "end" ;

  address tso 'acf' ;

  x = OUTTRAP("OFF") ;

  acfuid = SUBSTR(WORD(acf_out.1,2),1,20) ;

  IF  substr(acfuid,01,12) = '11-011-04-00' THEN
      userauth = "GOD" ;
  ELSE
      userauth = "???" ;

  RETURN ;

/*------------------------------------------------------------------*/
VALIDATE_PARMS:
/*------------------------------------------------------------------*/
/*  Valid values for CICOPT are A-Auto C-Cold S-Shutdown            */
/*  I-Initial N-Normal R-Regular                                    */
/*  CICREG should be 3 chars, or comma separated list, or ALLxx     */
/*------------------------------------------------------------------*/
/*                                                                  */

  parms_OK = 'Y' ;                     /* Initialise to OK          */

  /*--- Check CICOPT -----------------------------------------------*/

  IF  cicopt = '' | cicopt = '*' Then ,
      cicopt = 'R' ;                   /* Default to Regular Start  */

  IF  POS(cicopt,'A C I N R S') = 0  THEN DO
      parms_OK = 'N' ;
      SAY  'CICU: ' ;
      SAY  'CICU: Parm 2 invalid' ;
      SAY  'CICU: Must be  A=Auto C=Cold I=Initial N=Norm Start' ;
      SAY  'CICU:          R=Regular';
      SAY  'CICU:             - or -';
      SAY  'CICU:          S=ShutDown' ;
      SAY  'CICU: ' ;
      END

  IF  userauth          ¬= 'GOD' ,
  &   Pos(cicopt,'C I N R')>0   THEN,
      cicopt = 'A' ;                   /* Only T32 for C/I  Start   */
                                       /* and R allowed for all     */

  /*--- Check CICREG -----------------------------------------------*/

  IF  length(cicreg)     < 3  THEN DO
      parms_OK = 'N' ;
      IF  cicreg ¬= '' THEN DO
          SAY  'CICU: ' ;
          SAY  'CICU: Parm 1 invalid' ;
          SAY  'CICU: Must be 3 char CICS id(s), comma delimited' ;
          SAY  'CICU: ' ;
          END
      END

  IF  userauth           = 'GOD' ,
  &   length(cicreg)     = 5 ,
  &   substr(cicreg,1,3) = 'ALL' THEN
      call CICS_ALL ;                  /* CICS ALL** requested      */

  IF  length(cicreg) > 3 & pos(',',cicreg) = 0 THEN DO
      parms_OK = 'N' ;
      SAY  'CICU: ' ;
      SAY  'CICU: Parm 1 invalid' ;
      SAY  'CICU: Must be 3 char CICS id(s), comma delimited' ;
      SAY  'CICU: ' ;
      END

  RETURN ;

/*------------------------------------------------------------------*/
CICS_ALL:
/*------------------------------------------------------------------*/
/*  User has invoked EXEC passing parm of ALLxy                     */
/*  Set CICREG = a list of regions, comma delimited                 */
/*    eg ALLP8 (Cosmos) -> P80,P83,    P8A,P8P                      */
/*    eg ALLD9 (Target) -> D90,D92,D93,D94                          */
/*------------------------------------------------------------------*/

  cicreg=CICU$('allregs',cicreg)
  Say cicreg;Exit


  RETURN ;

/*------------------------------------------------------------------*/
DIS_PANEL:
/*------------------------------------------------------------------*/
/*  Display panel USP4010                                           */
/*  Prompt user for CICREG and CICOPT                               */
/*------------------------------------------------------------------*/

  ZEDSMSG = 'CICU: Utility Started' ;
  ZEDLMSG = 'CICU: CICS region control utility has Started' ;

  DO  FOREVER      /* Display panel, process selection, until <F3>  */

      /* Initialise Variables                                       */
/*
      If i_rq='0' Then Do
          cicreg = '' ;                /* region / list of regions  */
          cicopt = '' ;                /* (S)hut (C)old (A)uto      */
      End
      Else cicreg=@cicreg
*/
      cicreg=@cicreg
      cicopt=Left(cicopt,1)

      Address ISPEXEC "SETMSG MSG(ISRZ001)"       /* Init Panel Msg */
      prot1='INPUT';csr='CICREG';zcmd=
      Call set_valid_jobs
      ADDRESS ISPEXEC "DISPLAY PANEL(USP4010)" ;

      IF  rc  =  8  THEN               /* <F3> Pressed              */
          LEAVE ;

      If Wordpos('/T',Translate(zcmd))>0 Then Do
          zcmd=Delword(zcmd,Wordpos('/T',Translate(zcmd)),1);#te=Trace(r)
      End
      @cicreg=cicreg
      If Wordpos(Word(zcmd,1),'? /? HELP /H /HELP')>0 |,
         zverb='HELP' Then Do
          x=$BR("%"xcmd "??")
          i_rc=2
          Iterate
      End
      If cicreg='' Then Do
          Parse Value '' With zedlmsg zedsmsg;Iterate
      End

      i_rq=ISSUE_REQUEST() ;           /* process screen input      */

  END  /*  DO FOREVER  */

  ZEDSMSG = 'CICU: Utility Ended' ;
  ZEDLMSG = 'CICU: CICS region control utility has Ended' ;

  return ;

/*------------------------------------------------------------------*/
NON_PANEL:
/*------------------------------------------------------------------*/
/*  If Multiple regions passed (eg cicreg='I20,I21,I22' )           */
/*  then PARSE them out and process one by one                      */
/*------------------------------------------------------------------*/
/*                                                                  */

  cicreg_work = cicreg ;      /* set work variable for use in parse */
  Call set_valid_jobs

  DO  until length(cicreg_work) < 3
      PARSE VAR cicreg_work cicreg','cicreg_work ;
      x=ISSUE_REQUEST() ;
      If zedlmsg/='' Then say ZEDLMSG ;
  END

  return ;

/*------------------------------------------------------------------*/
ISSUE_REQUEST:
/*------------------------------------------------------------------*/
/*  Variable CICREG and CICOPT have been validate                   */
/*  Submit a job to do what the user requested                      */
/*------------------------------------------------------------------*/

  cicreg = "CICS"||cicreg ;
  ADDRESS ISPEXEC 'VGET (ZSYSID,ZUSER)' ;
  If Wordpos(cicreg,valid_regions)=0 Then Do
      ZEDSMSG = 'CICU: Invalid Region/SYSID';
      ZEDLMSG = 'CICU: Region 'cicreg' invalid on "'sysid'".'
      Return 8
  END

  IF  cicopt = '' | cicopt = 'A' THEN
      cicopt = 'AUTO' ;

  IF  cicopt = 'C' THEN
      cicopt = 'COLD' ;

  IF  cicopt = 'I' THEN
      cicopt = 'INITIAL' ;

  IF  cicopt = 'N' THEN
      cicopt = 'NORM' ;

  IF  cicopt = 'R' THEN
      cicopt = 'REGU' ;

  IF  Wordpos(cicopt,'S SHUTDOWN')>0 THEN DO
      cicopt = 'SHUTDOWN' ;
      IF  userauth          ¬= 'GOD' ,
      &   pos(ZSYSID,'SY2 SY9 SY7 SYE') = 0  THEN DO
          ZEDSMSG = 'CICU: Shutdown not allowed' ;
          ZEDLMSG = 'CICU: 'ZUSER' not allowed to Shutdown on 'ZSYSID ;
          return 8;
      END
  END
  ELse Do
      If sysid='SY2' Then sid_s='2'
      Else Do
          If Wordpos(cicreg,valid_reg5)>0 Then sid_s='5';Else sid_s='8'
      End
      suadsn=CICU$('suadsn')'.SY'sid_s
      If SYSDSN("'"suadsn"("cicreg")'") /= 'OK' Then Do
          ZEDSMSG = 'CICU: Invalid Region' ;
          ZEDLMSG = 'CICU: Region 'cicreg' invalid on this system. Member',
                    "'"suadsn"("cicreg")' NOT found."
          Return 8
      End
      dd='SU'Time('s')
      Address TSO "ALLOC F("dd") DSN('"suadsn"("cicreg")') SHR REU"
      Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
      Address TSO "FREE F("dd")"
      std_sup=Strip(linei.1)
  END
  If cicopt='SHUTDOWN' Then Do
      If sysid/='SY2' Then Do
          If Wordpos(cicreg,Translate(up_reg5,' ',','))>0 Then xsysid='SY5'
          Else xsysid='SY8'
      End
      If Wordpos(cicreg,Translate(up_regs,' ',','))=0 Then Do
          Call set_valid_jobs
          prot1='OUTPUT'
          #cicreg = cicreg;cicreg=Substr(cicreg,5)
          #cicopt = cicopt;cicopt=Substr(cicopt,1,1)
          ZEDSMSG =
          ZEDLMSG = 'CICU: You have requested a shutdown for a region',
                    'that is not up.',
                    'Hit enter to proceed with shutdown or use',
                    'your END PF key to abandon processing.'
          cicsups=Overlay('RRRRRRR',cicsups,Index(cicsup,'CICS'cicreg))
          Address ISPEXEC 'SETMSG MSG(ISRZ001) MSGLOC(CICOPT)'
          ADDRESS ISPEXEC "DISPLAY PANEL(USP4010)" ;

          IF  rc  =  8  THEN Do        /* <F3> Pressed              */
              cicopt=#cicopt
              ZEDLMSG =,
                    'CICU: You have cancelled this request. All other',
                    'requests (if applicable) will still be processed.'
              Address ISPEXEC 'SETMSG MSG(ISRZ001) MSGLOC(CICOPT)'
              ADDRESS ISPEXEC "DISPLAY PANEL(USP4010)" ;
              zedlmsg=
/*            cicopt='A'                                              */
              Return 8
          End
          cicreg=#cicreg;cicopt=#cicopt
      End
  End
  If cicopt/='SHUTDOWN' &,
     Wordpos(cicreg,Translate(up_regs,' ',','))>0 Then Do
      prot1='OUTPUT'
      #cicreg = cicreg;cicreg=Substr(cicreg,5)
      #cicopt = cicopt;cicopt=Substr(cicopt,1,1)
      ZEDSMSG =
      ZEDLMSG = 'CICU: You have requested a startup for a region',
                'that is already executing. Enter FORCE on the',
                'command line and hit [ENTER] to proceed with',
                'new startup or use',
                'your [END] PF key to abandon processing.'
      zcmd=
      Do While rc=0 &zcmd/='FORCE'
          Call set_valid_jobs
          If Wordpos('CICS'cicreg,Translate(cicsup,' ',','))=0 Then Leave
          cicsups=Overlay('2222222',cicsups,Index(cicsup,'CICS'cicreg))
          Address ISPEXEC 'SETMSG MSG(ISRZ001) MSGLOC(CICOPT)'
          ADDRESS ISPEXEC "DISPLAY PANEL(USP4010)" ;
      End
      IF  rc  =  8  THEN Do            /* <F3> Pressed              */
          cicopt=#cicopt
          ZEDLMSG =,
                'CICU: You have cancelled this request. All other',
                'requests (if applicable) will still be processed.'
          Address ISPEXEC 'SETMSG MSG(ISRZ001) MSGLOC(CICOPT)'
          ADDRESS ISPEXEC "DISPLAY PANEL(USP4010)" ;
          zedlmsg=;cicopt='A'
/*        cicreg=#cicreg;cicopt=#cicopt                               */
          Return 8
      End
      cicreg=#cicreg;cicopt=#cicopt
  End
/*If cicopt/=std_sup & cicopt/='SHUTDOWN' Then do                     */
  If cicopt/=std_sup & \(cicopt='SHUTDOWN' | cicopt='REGU') Then Do
      prot1='OUTPUT'
      #cicreg = cicreg;cicreg=Substr(cicreg,5)
      #cicopt = cicopt;cicopt=Substr(cicopt,1,1)
      ZEDSMSG =
      ZEDLMSG = 'CICU: The startup option you have chosen is not the',
                'normal startup ('Strip(linei.1)').',
                'Hit enter to continue startup or use',
                'your END PF key to abandon processing.'
      If cicopt='I' Then zedlmsg=zedlmsg,
          'BE WARNED.. AN "INITIAL" START MAY BE MORE THAN YOU BARGAINED',
          'FOR.  LST CHANCE TO PULL OUT.....'
      Address ISPEXEC 'SETMSG MSG(ISRZ001) MSGLOC(CICOPT)'
      csr='CICOPT'
      Call set_valid_jobs
      ADDRESS ISPEXEC "DISPLAY PANEL(USP4010)" ;

      IF  rc  =  8  THEN Do            /* <F3> Pressed              */
          cicopt=#cicopt
          ZEDLMSG =,
                'CICU: You have cancelled this request. All other',
                'requests (if applicable) will still be processed.'
          Address ISPEXEC 'SETMSG MSG(ISRZ001) MSGLOC(CICOPT)'
          ADDRESS ISPEXEC "DISPLAY PANEL(USP4010)" ;
          zedlmsg=;cicopt='A'
          Return 8
      End
      cicreg=#cicreg;cicopt=#cicopt

  END  /*  DO FOREVER  */

  ADDRESS ISPEXEC 'VGET (ZACCTNUM)' ;
  acct  = zacctnum ;
  mroset = SUBSTR(cicreg,05,02) ;

  CALL CHECK_REGION ;                  /* Find JCL Library          */

  IF  CICS_OK = 'OK' THEN ,
      CALL BUILD_AND_SUBMIT ;          /* Build and Submit Job      */

  return 0;

/*------------------------------------------------------------------*/
CHECK_REGION:
/*------------------------------------------------------------------*/
/*  Validate that the region requested exists on this lpar          */
/*------------------------------------------------------------------*/
/*                                                                  */

  cicsjcl=CICU$('cicsjcl')
  CICS_OK = SYSDSN("'"cicsjcl"("cicreg")'")

  IF  CICS_OK ¬= 'OK' THEN DO
      ZEDSMSG = 'CICU: Invalid Region' ;
      ZEDLMSG = 'CICU: Region 'cicreg' invalid on this system' ;
      END

  return ;

/*------------------------------------------------------------------*/
BUILD_AND_SUBMIT:
/*------------------------------------------------------------------*/
/*  Allocate an ISPF Temp Dataset                                   */
/*  File Tailor the Job                                             */
/*  Submit it                                                       */
/*------------------------------------------------------------------*/
/*                                                                  */

  x = msg(off) ;
  ADDRESS TSO "FREE FILE(ISPFILE)" ;
  x = msg(on)  ;

  ADDRESS ISPEXEC 'VGET (ZPREFIX)' ;
  /* ADDRESS TSO ; */
  tmpjcl = zprefix||'.CICSSTRT.JCL' ;

  message = sysdsn("'"tmpjcl"'") ;

  IF  message ¬= 'DATASET NOT FOUND' THEN
      DO
        x = msg(off) ;
        ADDRESS TSO "DELETE '"tmpjcl"'" ;
        x = msg(on)  ;
      END

  ADDRESS TSO ,
      "ALLOC DATASET('"tmpjcl"') FILE(ISPFILE) MOD CATALOG
       TRACKS SPACE(01,01) DSORG(PS)
       RECFM(F,B) LRECL(80) BLKSIZE(8000)"
  allocrc = rc ;

  IF  allocrc  ¬= 0 THEN
      DO
        ZEDSMSG = 'CICU: Alloc RC('allocrc')' ;
        ZEDLMSG = 'CICU: 'tmpjcl' file alloc error RC('allocrc')' ;
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ000)" ;
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)" ;
        EXIT allocrc ;  /* END of Program */
      END
  ELSE ,
      DO
        ADDRESS ISPEXEC 'FTOPEN ' ;
        ADDRESS ISPEXEC 'FTINCL USS4010' ;
        ADDRESS ISPEXEC 'FTCLOSE' ;

        ADDRESS TSO "FREE FILE(ISPFILE)" ;
/*      If cicopt/='SHUTDOWN' Then Do                                 */
        If cicopt/=std_sup & \(cicopt='SHUTDOWN' | cicopt='REGU') Then Do
            Address "NEWSTACK"
            dd='SU'Time('s')
            If cicopt='INITIAL' Then Queue 'INIT';Else Queue cicopt;queue ''
            Address TSO "ALLOC F("dd") DSN('"suadsn"("cicreg")') SHR REU"
            Address TSO "EXECIO * DISKW "dd" (FINIS"
            Address TSO "FREE F("dd")"
        End
        If edjcl='Y' Then Do
            ZEDSMSG=
            ZEDLMSG='You have selected to explicitly edit the JCL.',
                    'You will need to manually submit it.'
            If cicopt/=std_sup & cicopt/='SHUTDOWN' Then zedlmsg=zedlmsg,
                    'Note: If you have altered the startup type. If you',
                    'do NOT submit this JCL, next time' cicreg 'will',
                    'startup with start of "'cicopt'".'
            Address ISPEXEC "SETMSG MSG(ISRZ001)"
            Address ISPEXEC "VIEW DATASET('&TMPJCL')"
            ZEDLMSG =
        End
        Else Do
            If edjcl='S' Then,
                Say 'Saying, not Executing:' ADDRESS TSO "SUBMIT '"tmpjcl"'"
            Else Do
                x=Outtrap('linei.',10,'NOCONCAT')
                ADDRESS TSO "SUBMIT '"tmpjcl"'"
                x=Outtrap('Off')
            End
            ZEDSMSG = cicreg' 'cicopt' started' ;
            ZEDLMSG = 'CICU: Region 'cicreg' 'cicopt' started.' ;
        End
        x = msg(off) ;
        ADDRESS TSO "DELETE '"tmpjcl"'" ;
        x = msg(on)  ;
        @cicreg=

      END

  return ;

/*------------------------------------------------------------------*/
/*  Determine which jobs are executing. For production, will list   */
/*  both the SY5 and SY8 candidates.                                */
/*------------------------------------------------------------------*/
/*                                                                  */
set_valid_jobs:
    #tr1=Trace('o')
    up_regs=;c_1=Copies(c_nu,7)
    If sysid='SY2' Then Do
        up_reg2=Space(valid_reg2,,',')
        cicsup='On SY2:' up_reg2
        cicsups='BBBGGGGb'Copies(c_1'w',Words(valid_reg2)-1)c_1
        xx=get_executing_jobs('SY2')
    End
    Else Do
        up_reg5=Space(valid_reg5,,',')
        cicsup='On SY5:' up_reg5
        cicsups='BBBGGGGb'Copies(c_1'w',Words(valid_reg5)-1)c_1
        ll=Length(cicsup)%72;If Length(cicsup)//72>0 Then ll=ll+1
        cicsup=Left(cicsup,ll*72,' ')
        cicsups=Left(cicsups,ll*72,'w')
        up_reg8=Space(valid_reg8,,',')
        cicsup=cicsup'On SY8:' up_reg8
        cicsups=cicsups'BBBGGGGb'Copies(c_1'w',Words(valid_reg8)-1)c_1
        xx=get_executing_jobs('SY5')
        xx=get_executing_jobs('SY8')
    End
    x=Trace(#tr1)                          /* Restore trace setting  */
    Return

get_executing_jobs:
    Parse Upper Arg s_id
    exec_reg=CICUJ(s_id,,);up_regs=up_regs','exec_reg
    If Verify(#tr1,'NO')>0 Then Say s_id 'CICUJ=>'exec_reg
    Do While exec_reg/=''
        Parse VAR exec_reg e_reg ',' exec_reg
        sp=Index(cicsup,e_reg)
        cicsups=Overlay(Copies(c_up,Length(e_reg)),cicsups,sp)
    End
    Return 0

Help_me:
cv=cicu_ver
suadsn=CICU$('suadsn')'.SY%'                /* DsName for the doco    */
n_st = mark(2)                              /* Mark next line         */
/* *** Full 80 column display is acceptable for tutorial ***

  &TOD. &CNAME..

  &XCMD. [V&CV.] is designed to manually start up and shut down CICS regions by
  authorised personell.

  It can also be used to provide a quick snapshot of what CICS regions are up
  and executing. (Bypasses the need to invoke Flasher and put up with it's
  associated "noise".)

  '&XCMD.' can be front ended on by "KILLCICS", either on-line or batch, to
  shutdown all CICS regions operating on the executing LPAR. For further
  details see below under heading KILLCICS.

  This command may be parameter or panel driven.
  Parameters (positional):
  ------------------------
  1. rid1{,rid2,....ridn} | ALLea
         - Single or a list of the last 3 characters of the region name with
           comma seperators
         - ALLea regions where
             e - Environment,
                  D - Development
                  T - Systems test
                  Q - QA
                  Q - Production
             a - Application, where
                  0 - &VALID_0_REGIONS.
                  1 - &VALID_1_REGIONS.
                  7 - &VALID_7_REGIONS.
                  8 - &VALID_8_REGIONS.
                  9 - &VALID_9_REGIONS.
                  A - &VALID_A_REGIONS.
                  C - &VALID_C_REGIONS.
  2. Operation required for all the regions passed as the first parameter.
      A - Auto start (default).
      C - Cold start. Regardless of the last CICS shutdown.
      I - Init(ial) start.
      N - Norm(al) start.  This is not a CICS START parameter, however it is
          used by SUA to perform a COLD start (as opposed to a WARM start if it
          is deemed safe to do so.  This should be requested if you desire a
          COLD start but do not want to enforce it if an Emergency restart
          should take place.
      S - Shut down the region(s).  This will submit a job that will issue a
          WTO message,
            CICSSHUTDOWN CICSI20 IS REQUESTED
          that will be intercepted by automation and issue the following
          shutdown commands,
            F CICSI20,CEMT I TA
            F CICSI20,CEMT P SHUT
      * | R
        - Regular startup. This will bypass checking SUA with the current
          startup and perform the regular SUA startup.  (It is assumed that
          no interrupted startup has been performed and the START= SIT parameter
          is the same value as the SUA.)
  3. Edit JCL.
      N - Automatically submit JCL generated. This is the default on SY2.
      Y - Edit/view JCL generated.  The JCL must be manually submitted.  This
          is the default on SY5 and SY8.
      S - Simulation mode (for testing).  This option will infer 'N' for JCL
          edit, however, the JCL will not be auto submitted but replaced by a
          "say" statement informing of what action would have been taken.
  Notes: If a list of regions is passed (to bypass panel entry) any violation
         of these rules will pop up a panel.  You may use a '.' placeholder
         when passing a parameter list.  These '.' placeholders will be changed
         to a space and the default value(s) will be used.


  Panel driven:
  -------------
  Enter the above parameters manually.  Only one region can be started up at a
  time, however, the panel entry screen will be redisplayed once the JCL is
  processed.

  In the panel, CICS region available for startup will be colored &C_NUL. while
  executing regions will be colored &C_UPL..  Executing regions(&C_UPL.) cannot
  be started and regions colored &C_NUL. cannot be stopped.
  NOTES: While this is not 100% correct, any "illegal" operation will give a
         warning and you will need to enter "FORCE" on the command line to
         execute the process.  The results/conflicts are on YOUR shoulders.

  If a starup operation is requested that is not the normal (as per the SUA
  SYSIN parameter - for further details refer to SUA below) a confirmation
  screen with an appropriate message will be displayed.
  You can either enter to continue or use the END PF key/command to bypass
  startup.  If INITial is requested the confirmation panel will also display a
  red flashing warning.  After that, well, you HAD your chance.
  NOTE: If you choose to manually submit the JCL (edit JCL) and decide not to
        do so, the parameter for SUA would have already been changed and you
        may get (or bypass) the change in startup confirmation screen.  Also
        that entry will be in affect at the next startup.

  KILLCICS.
  ---------
  This routine replaces the original CML assembler program "KILLCICS".  By
  default the regions presented for shutdown will be built from those
  physically executing on the current LPAR.  For SY2 this is a non issue,
  however, on SY5 or SY8 you may request shutdown of the regions on the
  alternate LPAR by passing the alternate system-id as the first parameter.
  On-line you will be presented with a screen highligting the regions that will
  be shutdown (in yellow). [ENTER] will invoke "CICU" with the appropriate
  parameters to shutdown all the yellow regions.  END commnad (PF key) will not
  start the shutdown process.  In batch there will be an appropriate message
  displaying which regions will be terminated.
  You can pass a second parameter of "BACK" to emulate batch processing and
  bypass the confirmation screen.


  CICS/TS StartUp Assist Program (DNCBSUA).
  -----------------------------------------
  The following vaules can be passed via the SYSIN dataset,
    '&SUADSN.(region)'.

    AUTO - AUTO start, defer to START= in SIT.
    COLD - Force COLD start
    INIT - Force INITIAL start
    NORM - DNCBSUA will decide. It will try to perform a COLD start if
           PERMITTED.

  These parameters can be manually changed prior to the next scheduled region
  startup by automation or done ad-hoc to manually start the region using CICU
  which will make the change automatically as requested.

  Return codes from DNCBSUA:
  --------------------------
   0      COLD start is safe
              -or-
          "COLD" was coded in the SYSIN

   4      COLD start is not safe (Usually associated with a "NORM"
          start in SYSIN
              -or-
          "AUTO" was coded in SYSIN
              -or-
          An error was detected, safest approach is "AUTO" start.

   8      "INIT" was coded in SYSIN

  The logic of SAU processing within the JCL.
  -------------------------------------------
  Check for SUA parm update.
  The next two steps will automatically restore the preferred Start Up Assist
  Parm.  i.e., If '&SYADSN.(cicsregn)' is preferred to be 'NORM' but an 'INIT'
  start is needed one time, this step will compare the preferred parm to the
  current parm.  If they are different, the next step will restore the
  preferred parm.  This will prevent leaving a temporary startup type in place
  permanently,
  If a "NORM" (COLD) start is requested and an AUTO in substituted, a console
  message will be generated (to take appropriate action).

  Packaging:
  ----------
  The following members make up this package.  Members notated with 'o'
  seperator are 'generic routines'.
  REXX:
    $BR      o Output browser.  This tutorial is by the compliment of this
               member.
    $TTRUNC  o Translate TRUNCated data.
    $WHOAMI  o One person that will NOT 'not say hello' to you.
    $WORDAT  o Returns data from a string according to column position. Used by
               the $TTRUNC routine.
    CICU     - This driver.
    CICU$    - Member called by this routine to set customisable variables.
               All LPAR and site oriented values should be customised in this
               member.
    CICUJ    - Routine to return CICS jobs executing.  Issues a STATUS command
               for all applicable CICS jobs and then parses the output and
               extracts the executing jobs from the list provided.
               Parameters to CICUJ (positional):
                sysid  - System id. Default is the system.
                type   - request type.
                         F - Returns the full CICS name(s) comma seperated
                             (default).
                         P - Returns the part CICS name(s) comma seperated
                             (last 3/4 characters.
    KILLCICS - Shutdown all CICS regions on LPAR. On-line will display panel
               off regions that will be shut down while in batch the same will
               be "Say"ed.
               Can pass 1st. positional parameter of sysid (for use on
               SY5/SY8).
  Panels:
    USP4010  - Parameter entry panel.
    USS4020  - Display regions to be "killed". Used by KILLCICS on-line.
  Skeletons:
    USS4010  - Skeleton for startup and shutdown JCL.
  Load modules:
    T32BSUB  - Program executed in startup/shutdown JCL to to send JCL through
               the internal reader with the appropriate user authorisations.
    T32BWTO  - Program executed in startup/shutdown JCL to issue a WTO for both
               audit trail and automation action initiator.

                              *****

*/
n_en = mark(-2)                             /* Mark prev 2 line       */

    c_upl=$Ttrunc(c_up,1,'r,RED g,GREEN y,YELLOW b,BLUE t,TURQ w,WHITE p,PINK')
    c_nul=$Ttrunc(c_nu,1,'r,RED g,GREEN y,YELLOW b,BLUE t,TURQ w,WHITE p,PINK')
    sets='valid_0_regions',
         'valid_1_regions',
         'valid_7_regions',
         'valid_8_regions',
         'valid_9_regions',
         'valid_A_regions',
         'valid_C_regions',
         ''
    Do While sets/=''
        Parse VAR sets set sets
        Interpret set"=Cicu$("set")"
    End
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='Good morning'
        When hh<18 Then tod='Good afternoon'
        Otherwise tod='Good evening'
    End
    chgchar='&';cname='there';today=Date('e')
    Signal on Syntax Name error_off_$WHOAMI
    Parse Value $Whoami() With cname sname .
error_off_$WHOAMI: Signal Off Syntax
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(Substr(line,1,79))
    End
    Exit

nl_h:Parse Arg n#;Say n#;Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

