/*            REXX                                                    */
ARG parm#
/*    TRACE r                                                         */
/**********************************************************************/
/*                                                                    */
/*  Macro to comment lines on the member being edited. For further    */
/*  details, refer tutorial for permissable parameters("CL ?").       */
/*                                                                    */
/*  Associated members:                                               */
/*     CLIST:                                                         */
/*       CL      - Driver. (This driver is used instead of the REXX   */
/*                 driver because of performance criteria. REXX takes */
/*                 5 to 10 times longer to execute edit macros.)      */
/*                                                                    */
/*     PANEL:                                                         */
/*       CLDEFPAN- Defaul parameter entry panel                       */
/*                                                                    */
/*     TUTORIAL:                                                      */
/*       CLH000  - Tutorial panel                                     */
/*       CLH010  - Tutorial panel                                     */
/*       CLH015  - Tutorial panel                                     */
/*       CLH020  - Tutorial panel                                     */
/*       CLH030  - Tutorial panel                                     */
/*       CLH035  - Tutorial panel                                     */
/*       CLH040  - Tutorial panel                                     */
/*       CLH045  - Tutorial panel                                     */
/*       CLH050  - Tutorial panel                                     */
/*       CLH055  - Tutorial panel                                     */
/*       CLH060  - Tutorial panel                                     */
/*       CLH070  - Tutorial panel                                     */
/*                                                                    */
/*  Trace options (parameters):                                       */
/*     TRACE1 - Start of routine..                                    */
/*     TRACE2 - Processing after parameter interpretation....         */
/*     You may turn trace off by hitting the attention key during     */
/*     tracing if it is on.                                           */
/*                                                                    */
/**********************************************************************/
    If parm# /= "" Then Signal byp1
    ADDRESS "ISPEXEC"
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then Signal byp1

byp1:
    Parse Upper VAR parm# parm#
    Parse VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7
    cactn = "RETURN"
    cactn = "CANCEL"
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
/*--------------------------------------------------------------------*/
/* The following variables are set up to group like members according */
/* to type of comments used.                                          */
/* +----------+------------------+------------------+                 */
/* ¦ Variable ¦     Start        ¦       End        ¦                 */
/* ¦ (PR def) +-----------+------+-----------+------+                 */
/* ¦          ¦ Character ¦ Col  ¦ Character ¦ Col  ¦                 */
/* +----------+-----------+------+-----------+------+                 */
/* ¦ clist(X) ¦ '/*'      ¦ 1    ¦ '*/'      ¦ 71   ¦                 */
/* ¦ asm  (A) ¦ '*'       ¦ 1    ¦ '*'       ¦ 71   ¦                 */
/* ¦ jcl  (J) ¦ '//*'     ¦ 1    ¦ '*//'     ¦ 69   ¦                 */
/* ¦ cobol(C) ¦ '*'       ¦ 7    ¦ ''        ¦ 71   ¦                 */
/* ¦ sysin(S) ¦ '/*'      ¦ 2    ¦ '*/'      ¦ 70   ¦                 */
/* +----------+-----------+------+-----------+------+                 */
    clist    = "X       "||,
               "CLIST   "||"REXX    "||"ISPPLIB "||"PANELS  "
    asm      = "A       "||,
               "ASM     "||"SOURCE  "||"MACLIB  "||"ASSM    "
    jcl      = "J       "||,
               "JCL     "||"CNTL    "
    cobol    = "C       "||,
               "COBOL   "||"OSCOBOL "||"COBOL2  "
    sysin    = "S       "||,
               "SYSIN   "

/*--------------------------------------------------------------------*/
    If parm1 = "?" | parm1 = "/?" | parm1 = 'HELP' Then Do
        "ISPEXEC VPUT (clist,asm jcl sysin cobol) SHARED"
        "ISPEXEC SELECT PGM(ISPTUTOR) PARM(CLH0A0)"
        exit

    End

    "ISREDIT (status) = USER_STATE"
    rep#     = 1
    sep      = ""
    profvars = "SCOL",
               "ECOL",
               "SCOM",
               "ECOM",
               "EDLM",
               "DCOL",
               "SEPR",
               "DTEXT",
               "CLXTRA",
               "ASMC",
               "TXTLIT",
               "TXTP",
               "TXTL",
               ""
    "ISPEXEC VGET (&PROFVARS) PROFILE"
    #scol    = 1                            /* Default values         */
    #dcol    = 45                           /* Default values         */
    #ecol    = 71                           /* Default values         */
    #scom    = "/*"                         /* Default values         */
    #ecom    = "*/"                         /* Default values         */
    #edlm    = "+"                          /* Default values         */
    #sepr    = "-"                          /* Default values         */
    #asmc    = "+"                          /* assembler cont char    */
    ac       = "AC"                         /* assembler cont ident   */
    If parm1 = "DEF" Then Do
        csr = ""
scr1:
        zcmd = ""
        "ISPEXEC DISPLAY PANEL(CLP) CURSOR(&CSR)"
        If rc = 8 Then Exit
        If ecol ¬> scol+1 Then Do
            gc009  = "End column must be greater than start column +1."
            csr = "ECOL"
        End
        Else Do
            "ISPEXEC VPUT (&PROFVARS) PROFILE"
            gc009  = "Default values updated."
            csr = ""
        End
        "ISPEXEC SETMSG MSG(GC009)"
        Signal scr1
    End

    If scom = "" Then Do
        scol = #scol
        dcol = #dcol
        ecol = #ecol
        scom = #scom
        ecom = #ecom
        edlm = #edlm
        sepr = #sepr
        asmc = #asmc
        "ISPEXEC VPUT (&PROFVARS) PROFILE"
    End

    If dtext = "" Then dtext = " "
    dscom = scom
    trace = ""
    uncdo = "N"
    ponly = "N"
    Doco  = "N"
    box   = "N"
    shiftr= 0
    ncsr  = "N"
    alld  = "N"
    label = "N"
    #zdr  = "N"
    txt   = "N"
    txto  = "N"
    txtor = "N"
    errf  = 0
    timr  = TIME()
    lin#  = ""
    com1  = ""
    com2  = ""
    errc1 = "\|/ the comment position is already used."
    errc2 = "         the end comment position is already used."
    erru1 = "\|/ the line below Does not contain ",
                 "specIfied comment characters        "
    errx  = "\|/ the line below is already un-commented."

    parml = 6
    data  = "parm"parml+1" = ''"
    Interpret data

/*         test for trace                                             */
    mask = 'TRACE'
    Call parse_cons
    trace = result

trace1:
    If trace = "TRACE1" Then ,
        Trace r

/*         test for profile                                           */

    prof  = ""

    mask = 'PR='
    Call parse_varb
    If result /= 'N' Then prof = result
    If prof = "" Then "ISREDIT (PROF) = PROFILE"
    prof    = Substr(prof,1,8)
    c1  = "/*"
    c2  = "*/"
    Select
        When INDEX(clist,prof) > 0 Then Do
            scol = 1
            ecol = 71
            scom = "/*"
            ecom = "*/"
            If prof = "REXX" Then wri = "Say"
            Else                  wri = "WRITE"
        End
        When INDEX(asm,prof) > 0 Then Do
            scol = 1
            ecol = 71
            scom = "*"
            ecom = "*"
        End
        When INDEX(jcl,prof) > 0 Then Do
            scol = 1
            ecol = 69
            scom = "//*"
            ecom = "*//"
        End
        When INDEX(cobol,prof) > 0 Then Do
            scol = 7
            ecol = 71
            ecol = ''
            scom = "*"
            ecom = ''
        End
        When INDEX(sysin,prof) > 0 Then Do
            scol = 2
            ecol = 70
            scom = "/*"
            ecom = "*/"
        End
        Otherwise Do
            wri = "?"
        End
    End

/*     Test for clearence of sequence # columns                       */

    mask = 'SEQ'
    Call parse_cons
    If result = 'Y' Then Do
        "ISREDIT C P'/' ' ' 73 80 ALL"
        gc009 = "Sequence number columns set to blanks."
        "ISPEXEC SETMSG MSG(GC009)"
        Return 0
    End

/*     Test for Assembler Comment                                     */

    mask = ac
    Call parse_cons
    If result = 'Y' Then Do
        parm# = parm# 'P=0+72 C=+'asmc
        acc   = "Y"
    End

/*     Test for right shIft parameter                                 */

    mask = ')'
    Call parse_varb
    If result /= 'N' Then Do
        If result = '' Then shiftr = 1
        Else Do
           shiftr = result
           If Datatype(shiftr) /= "NUM" Then Do
               gc009 = "Invalid right shift parameter."
               Signal erx1
           End
        End
    End

    dummy = ""

/*     Test for seperator parameter                                   */

sep_test:
    mask = 'S'
    Call parse_varb
    If result /= 'N' Then Do
        #zdr = "Y"
        x = result
        Select
           When (x = '')  Then sep = sepr
           When (x = '=') Then sep = 'BB'
           Otherwise           sep = Substr(x,2)
        End
    End

    dirmark = ''
    sepmark = ''
    sepbox  = ''
    If sep /= '' Then Do
        dirmark = Copies(sep,3)

        mask = '/B'
        Call parse_cons
        If result = 'N' Then Do
            mask = 'B'
            Call parse_cons
        End
        If result = 'Y' Then Do
            sepbox  = 'Y'
            box     = 'N'
            dirmark = '/|\'
            sepmark = '<====='
        End
        mask = '/D'
        Call parse_cons
        If result = 'N' Then Do
            mask = 'D'
            Call parse_cons
        End
        If result = 'Y' Then Do
            box     = 'N'
            dirmark = '\|/'
            sepmark = '<====='
        End
        mask = '/U'
        Call parse_cons
        If result = 'N' Then Do
            mask = 'U'
            Call parse_cons
        End
        If result = 'Y' Then Do
            box     = 'N'
            dirmark = '/|\'
            sepmark = '<====='
        End
    End


/*     Test for ME seperator                                          */

    If sepmark /= '' Then Do
        x = 'ME'
        Call parse_cons
        If result = 'Y' Then sepmark = Userid()
    End

/*     Test for Box parameter                                         */

    mask = 'B'
    Call parse_varb
    If result /= 'N' Then Do
        #zdr = "Y"
        box = "Y"
        If Substr(result,1,1) = '+' Then rep# = Substr(result,2)
        If rep# < 1 Then rep# = 1
        If sep = '' Then sep = sepr
    End

/*      repetition parameter supplied                                 */

    Parse VAR parm# p1 '.' p2
    If parm# /= p1 Then Do
        w = Words(p1)
        lin# = Word(p1,w)
        e    = WordIndex(p1,w)
        If w > 1 Then p1 = Substr(p1,1,e-2)
        Else          p1 = ''
        Parse VAR p2 rep# p2
        parm# = Strip(p1 p2)
    End

/*     Test for Text parameter                                        */

    mask = 'T'
    Call parse_cons
    txt = result

/*     Test for Text overrite parameters                              */

    mask = 'TO'
    Call parse_cons
    txto = result

/*     Test for Text overrite removal                                 */

    If txto = 'Y' Then Do
        mask = 'R'
        Call parse_cons
        txtor = result
    End

/*     Test for WRITE 'W' Toggle                                    */

    mask = 'W'
    Call parse_cons
    If result = 'Y' Then scom = wri

/*       numeric (line number) parameter supplied                     */

    Do i=1 To Words(parm#)
        x = Word(parm#,i)
        If DATATYPE(x) = num Then Do
            lin# = x
            parm# = DelWord(parm#,i,1)
            Leave
        End
    End

/*       range partameter supplied                                    */

    Parse VAR parm# p1 '-' p2
    If parm# /= p1 Then Do
        w = Words(p1)
        lin# = Word(p1,w)
        e    = WordIndex(p1,w)
        If w > 1 Then p1 = Substr(p1,1,e-2)
        Else          p1 = ''
        Parse VAR p2 rep# p2
        parm# = Strip(p1 p2)
        If lin# > rep# Then Signal rger1
        rep#  =  rep#-lin#+1
    End

/*      change all lines                                              */

    mask = 'ALL'
    Call parse_cons
    If result = 'Y' Then Do
        lin# = 1
        alld = "Y"
        "ISREDIT (rep#) = LINENUM .ZLAST"
    End

    mask = 'U'
    Call parse_cons
    If result = 'Y' Then uncDo = "U"

    mask = 'C'
    Call parse_cons
    If result = 'Y' Then uncDo = "C"

/* Check for Doco (and Doco text)                                     */
    mask = 'D'
    Call parse_cons
    doco = Result

/* Check for Prefix Only parameter                                    */
    mask = 'PO'
    Call parse_cons
    ponly = result

/* Check for force parameter                                          */
    mask = 'FORCE'
    Call parse_cons
    force = result

/* Check for label                                                    */
    mask = 'L'
    Call parse_cons
    label = result


/**********************************************************************/
/*  Make sure that these last 3 tests (X, C= and P=) are left last    */
/*  as they will change the value of parameters.....                  */
/**********************************************************************/
/*         test for xtra                                              */

    If parm1 = "X" Then PARSE UPPER VAR clxtra parm1 parm2 parm3,
                              parm4 parm5 .
    If parm2 = "X" Then PARSE UPPER VAR clxtra parm1 parm2 parm3,
                              parm4 parm5 .
    If parm3 = "X" Then PARSE UPPER VAR clxtra parm1 parm2 parm3,
                              parm4 parm5 .
    If parm4 = "X" Then PARSE UPPER VAR clxtra parm1 parm2 parm3,
                              parm4 parm5 .
    If parm5 = "X" Then PARSE UPPER VAR clxtra parm1 parm2 parm3,
                              parm4 parm5 .


/* Changed comment characters supplied                                */

    mask = 'C='
    Call parse_varb
    If result /= 'N' Then Do
        p = result
        ecl = LENGTH(ecom)
        l = INDEX(p,edlm)
        If l < LENGTH(p) and l > 0 Then ecom =,
            SUBSTR(p,INDEX(p,edlm)+1,LENGTH(p)-INDEX(p,edlm))
        If l > 1 Then ,
            scom = SUBSTR(p,1,INDEX(p,edlm)-1)
        If l = LENGTH(p) Then ecom = " "
        If l = 0 Then scom = p
        If l = 1 Then scom = ""
        If LENGTH(ecom) < ecl Then ecol = ecol+1
    End

/* Changed comment position parameter supplied                        */

    mask = 'P='
    Call parse_varb
    If result /= 'N' Then Do
        p = result
        l = INDEX(p,edlm)
        If l < LENGTH(p) and l > 0 Then ecol =,
            SUBSTR(p,INDEX(p,edlm)+1,LENGTH(p)-INDEX(p,edlm))
        If l > 1 Then Do
            scol = SUBSTR(p,1,INDEX(p,edlm)-1)
            dcol = scol
        End
        If l = 0 Then scol = p
        If scol > 1 Then ncsr = "Y"
        data = 'parm'i' = ""'
        Interpret data
    End

    If scol = 0  Then scom = ""
    If ecol = 0  Then ecom = ""
    If scol = "" Then scol = #scol
    If ecol = "" Then ecol = #ecol

/**********************************************************************/
trace2:
    If trace = "TRACE2" Then ,
        Trace r

    "ISREDIT (LAST) = LINENUM .ZLAST"


    If repeat_it = 'Y' Then signal pro1
    "ISREDIT PROCESS RANGE C"
    "ISREDIT (cmd) = RANGE_CMD"
    If cmd = 'C' Then Do
        "ISREDIT (labf) = LINENUM .ZFRANGE"
        "ISREDIT (labt) = LINENUM .ZLRANGE"
        lin# = labf
        rep# = labt - labf + 1
    End
    Else Do
        If label = "Y" Then Do
            "ISREDIT (LABF) = LINENUM .F"
            If rc = 0 Then Do
                "ISREDIT (LABT) = LINENUM .T"
                If rc /= 0 Then Do
                    gc009 = ".F label must have a matching .T label."
                    Signal erx1
                End
                lin# = labf
                rep# = labt - labf + 1
            End
            Else Do
                gc009 = ".F label missing."
                Signal erx1
            End
        End
    End
    repeat_it = 'Y'


pro1:
    If DATATYPE(rep#) /= "NUM" Then Do
        gc009 = "To line must be numeric."
        Signal erx1
    End
    "ISREDIT (last) = LINENUM .ZLAST"
    If #zdr = "Y" Then Do
        "ISREDIT PROCESS DEST"
        If rc = 0 Then "ISREDIT (LIN#) = LINENUM .ZDEST"
    End
    If lin# = "" Then Do
        "ISREDIT (LIN#) = CURSOR"
        If lin# = 0  Then lin# = 1
    End
    Else Do
        If lin# > last | lin# < 0 Then Do
            gc009 = "Invalid line number entered."
            "ISPEXEC SETMSG MSG(GC009)"
            Signal erx1
        End
    End
    If lin#+rep#-1 > last Then Do
        If sep = "" Then Do
            gc009 = "To line must not be greater than last."
            Signal erx1
        End
    End
    lin#  = lin# + 0                        /* Force truncation       */
    lins# = lin# + 0                        /* Force truncation       */

    If Doco = "Y" Then Do
        if dcol = '' Then dcol = #dcol
        scol  = dcol
        ncsr  = "Y"
        uncDo = "C"                         /* force comment for Doco */
    End

    If ponly = "Y" Then ecom = " "

    If scom = "" Then Do
        v1 = ""
        ps = 0
    End
    Else Do
        v1 = "'"scom"'"
        ps = scol
    End
    If ecom = "" Then Do
        v2 = ""
        pe = 0
    End
    Else Do
        v2 = "'"ecom"'"
        pe = ecol
    End

    If sep /= "" | box = "Y" Then Do
      If sep = "bb" | sep = "BB" Then sep = "       "
      If dirmark = '' Then dirmark = Copies(sep,3)
      If sepmark = '' Then sepmark = Copies(sep,6)
      sep = Copies(sep,5) || dirmark || Copies(sep,20) || sepmark ||,
            Copies(sep,46)
      Select
          When INDEX(clist,prof) > 0 Then Do
              coml = 72
          End
          When INDEX(asm,prof) > 0 Then Do
              coml = 71
          End
          When INDEX(jcl,prof) > 0 Then Do
              coml = 71
          End
          otherwise Do
              coml = 71
          End
      End
      l = coml - (LENGTH(scom) + LENGTH(ecom)) - (scol-1)
      line = SUBSTR(' ',1,scol-1)scom||SUBSTR(sep,1,l)||ecom
      If box = "Y" Then Do
          blkl = SUBSTR(' ',1,scol-1)scom||SUBSTR(' ',1,l)||ecom
          "ISREDIT LINE_AFTER &LIN# = (LINE)"
          lin# = lin# + 1
          rep# = rep# + lin#
          lins# = lin# + 1
          ncsr = "Y"
          Do while lin# < rep#
              "ISREDIT LINE_AFTER &LIN# = (BLKL)"
              lin# = lin# + 1
          End
          "ISREDIT LINE_AFTER &LIN# = (LINE)"
      End
      Else Do
          If sepbox  /= '' Then Do
              septop = lin# - 1
              lin#   = lin# + rep# - 1
              rep#  = 1
          End
          rep# = rep# + lin#
          Do while lin# < rep#
              "ISREDIT LINE_AFTER &LIN# = (LINE)"
              lin# = lin# + 1
          End
          ncsr = "N"
      End
      If sepbox  /= '' Then Do
          parm1 = septop
          parm2 = 'S'
          parm3 = '/D'
          If sepmark /= '<=====' Then parm4 = 'ME'
          Else                        parm4 = ''
          rep#  = 1
          parm# = Strip(parm1 parm2 parm3 parm4)
          Signal sep_test
      End
      Signal exi1
    End

    If txt = "Y" Then Do
        If DATATYPE(txtp) /= 'NUM' | txtlit = '' Then Do
            gc009 = "Missing text string or it's starting position."
            Signal erx1
        End
        line = SUBSTR(' ',1,txtp-1)txtlit
        "ISREDIT LINE_AFTER &LIN# = (LINE)"
        Signal exi1
    End
    If txto = "Y" Then Do

        If DATATYPE(txtp) /= 'NUM' | txtlit = '' Then Do
            gc009 = "Missing text string or it's starting position."
            Signal erx1
        End
        If Datatype(txtl) = 'NUM' Then txtlit = Substr(txtlit,1,txtl)
        If parm# /= '' Then Do
            If Substr(parm#,1,1) = "'" Then Parse VAR parm# "'" parm# "'" .
            txtlit = txtlit || Strip(parm#)
        End
        If txtor = 'N' Then xx = txtlit
        Else                xx = Substr(' ',1,Length(txtlit))
        Do i=lin# to lin#+rep#-1
            "ISREDIT (linex) = LINE &I"
            linex = Overlay(xx,linex,txtp,Length(txtlit))
            "ISREDIT LINE &I = (linex)"
        End
        Signal exi1
    End
    If Doco = "Y" Then Do
        l = pe - ps - LENGTH(v1)
        If l > 0 Then Do
            If l ¬> LENGTH(dtext) Then ,
                dtext = "'"SUBSTR(dtext,1,l)"'"
            Else ,
                dtext = "'"dtext"'"
            pt = ps + LENGTH(v1) - 2 + 1
        End
        Else Do
            dtext = ""
            pt    = ""
        End
        If pe = 0 Then pe = ''
        maskline = "<"ps v1 pt dtext pe v2">"
    End
    Else Do
        If pe = 0 Then pe = ''
        maskline = "<"ps v1 pe v2">"
    End
    "ISREDIT MASKLINE = &MASKLINE"

    i = 0
    Do while i < rep#
        i = i + 1
        lina# = lins#"-"lin#
        If shiftr > 0 Then ,
            "ISREDIT SHIfT ) &LIN# &shiftr"
        "ISREDIT (LINE) = LINE &LIN#"

        If scom /= "" Then ,
            com1 = SUBSTR(line,scol,(scol+LENGTH(scom)-1)-scol+1)
        If ecom /= "" Then ,
            com2 = SUBSTR(line,ecol,(ecol+LENGTH(ecom)-1)-ecol+1)
        Else ,
            com2 = ecom
        If uncDo = "U" Then Do
          "ISPEXEC VPUT (LIN# LINE SCOM DSCOM ECOM FORCE ERRF COM1 ",
                         "COM2 SCOL ECOL ERRF ERRC1 ERRU1) SHARED"
          Call uncuc
          "ISPEXEC VGET (ERRF) SHARED"
        End
        Else Do
          If uncDo = "C" | com1 = "" Then Do
            If com1 = "" & com2 = "" Then ,
              "ISREDIT LINE &LIN# = MASKLINE + (LINE)"
            Else Do
              errf = errf + 1
              Select
                When force = "Y" Then ,
                   "ISREDIT LINE &LIN# = (LINE) + MASKLINE"
                When com1 /= "" Then Do
                  If com1 = scom Then Do
                    If com2 = "" | com2 = ecom Then Do
                      "ISREDIT LINE &LIN# = MASKLINE + (LINE)"
                      errf = errf - 1
                    End
                    Else ,
                      "ISREDIT LINE_BEFORE &LIN# = NOTELINE (ERRC1)"
                  End
                  Else ,
                   "ISREDIT LINE_BEFORE &LIN# = NOTELINE (ERRC1)"
                End
                When com1 = "" Then  Do
                  If com2 = "" or com2 = ecom Then Do
                    "ISREDIT LINE &LIN# = MASKLINE + (LINE)"
                    errf = errf - 1
                  End
                  Else ,
                    "ISREDIT LINE_BEFORE &LIN# = NOTELINE (ERRC2)"
                End
                otherwise
              End
            End
          End
          Else Do
              "ISPEXEC VPUT (LIN# LINE SCOM ECOM FORCE ERRF COM1 COM2 ",
                     "DSCOM SCOL ECOL ERRF ERRC1 ERRU1) SHARED"
              Call uncuc
              "ISPEXEC VGET (ERRF) SHARED"
          End
        End
        lin# = lin# + 1
    End
    gc009 = "Line number '"lina#"' has been"
    If errf = 0 Then Do
        If uncDo = "U" Then gc009 = gc009 "un-commented"
        If uncDo = "N" Then gc009 = gc009 "toggled"
        If uncDo = "C" Then gc009 = gc009 "commented"
        Else
            If Doco = "Y" Then gc009 = gc009 "for Doco"
    End
    Else gc009 = "Errors detected have been marked. enter 'RES' on",
             "the command line to remove comments"
    gc009 = gc009"."
    If acc = "Y" Then gc009 = "Assembler continuation character",
         "inserted."

erx1:
    "ISPEXEC SETMSG MSG(GC009)"

exi1:
    "ISREDIT MASKLINE = ''"
    "ISREDIT USER_STATE = (status)"
    If ncsr = "Y" Then "ISREDIT CURSOR = "lins# (scol + LENGTH(scom)+1)
    Exit

uncuc:
    "ISPEXEC VGET (LIN# LINE SCOM DSCOM ECOM FORCE ERRF COM1 COM2 ",
                "SCOL ECOL ERRF ERRC1 ERRU1) SHARED"
    If scom /= "" Then ,
        com1 = SUBSTR(line,scol,(scol+LENGTH(scom)-1)-scol+1)
    Select
      When force = "Y" Then ,
        Signal uncit
      When com1 = ""   Then ,
        Signal uncit
      When com1 /= scom Then Do
          "ISREDIT LINE_BEFORE &LIN# = NOTELINE (ERRU1)"
          errf = errf + 1
          "ISPEXEC VPUT (ERRF) SHARED"
          return 0
      End
      When com2 /= ecom Then Do
        If com2 /= "" Then Do
              "ISREDIT LINE_BEFORE &LIN# = NOTELINE (ERRU1)"
              errf = errf + 1
              "ISPEXEC VPUT (ERRF) SHARED"
              return 0
          End
      End
      otherwise Nop
    End

uncit:
    If scom /= "" Then v11 = scom
    Else               v11 = dscom
    v12 = SUBSTR("             ",1,LENGTH(v11))
    "ISREDIT CURSOR = &LIN# 0"
    "ISREDIT CHANGE '"v11"' '"v12"' "scol ".ZCSR .ZCSR"
    If ecom /= "" Then Do
        v21 = ecom
        v22 = SUBSTR("           ",1,LENGTH(v21))
        "ISREDIT CHANGE '"v21"' '"v22"' "ecol ".ZCSR .ZCSR"
    End
    "ISPEXEC VPUT (ERRF) SHARED"
    return 0

rger1:
    gc009 = "TO range must not be less than FROM range."
    Signal erx1

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found.                                      */
/*--------------------------------------------------------------------*/
parse_cons:
    y = Wordpos(mask,parm#)
    If y > 0 Then Do
        found = 'Y'
        parm# = Delword(parm#,y,1)
        Return 'Y'
    End
    Return 'N'

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/*--------------------------------------------------------------------*/
parse_varb:
    parm## = ' 'parm#
    m#     = ' 'mask
    y = Index(parm##,m#)
    If y > 0 Then Do
        If Substr(parm##,y+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        Return px
    End
    Return 'N'
