/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to compile COBOL program being editted.                    */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    If parm# /= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
    cactn = "CANCEL"
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    skeleton = 'COMPPSYS'
    userid = Userid()
    If parm# /= '' Then Call parse_parms

    "ISREDIT (status) = USER_STATE"
    "ISREDIT (source) = DATASET"
    "ISREDIT (member) = MEMBER"
    loadlib = $alkhlq()'.$L'

    "ISREDIT (changed) = DATA_CHANGED"
    If changed = "YES" Then "ISREDIT SAVE"

    "ISPEXEC FTOPEN TEMP"
    "ISPEXEC FTINCL &SKELETON"
    "ISPEXEC FTCLOSE"
    "ISPEXEC VGET   ZTEMPF"
    tempsub = ztempf
    If editit = 'Y' Then Do
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        Address ISPEXEC
        "ISPEXEC LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        umodel = "NOTEZED"
        "ISPEXEC VPUT UMODEL SHARED"
        "ISPEXEC EDIT DATAID(&DATAID) MACRO(UMODEL)"
        "ISPEXEC LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Address ISPEXEC
    End
    "ISPEXEC VPUT (TEMPSUB) SHARED"
    x = MSG(ON)
    Address TSO "%TEMPSUB"
    rc1 = rc
    x = MSG(OFF)
    Address ISPEXEC
    "ISPEXEC VGET (JOBNUMB JOBNAME MESSAGE) SHARED"
    gc009 = message
    If parm Â¬= "" Then gc009 = parm" - "gc009
    "ISPEXEC SETMSG MSG(GC009)"
    apr    = pr
    ptypex = ptype
    "ISPEXEC VPUT ("profvars") PROFILE"
    return
ext1:
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    editit = parse_cons('EDIT',,,1)
    If editit = 'N' Then editit = parse_cons('/EDIT',,,2)

    all = parse_cons('/A','ALL','NULL')
    If all = '' Then all = parse_cons('A','ALL','NULL',1)

    zfrange = parse_cons('-',,'NULL','WORD')
    If zfrange /= '' Then Do
        Parse VAR zfrange zfrange '-' zlrange
        If zfrange = '' Then zfrange = 1
        If Datatype(zfrange) /= 'NUM' Then Do
            gc009 = "Invalid FROM range."
            Signal err01
        End
        If zlrange = '' Then zlrange = last
        If Datatype(zlrange) /= 'NUM' Then Do
            gc009 = "Invalid TO range."
            Signal err01
        End
        If zlrange > last Then zlrange = last
    End

    Parse VAR parm# xx .
    If Datatype(xx) = 'NUM' Then Do
        If xx > last Then xx = last
        zfrange = xx
        zlrange = xx
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

