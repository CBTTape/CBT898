/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Macro to create a mappable record layout from a COBOL record layout*/
/* to be used in mapping memory processed by SHOWSTOR.                */
/*                                                                    */
/* Permissable parameters:                                            */
/*   X88  - Exclude level 88 entries. Without this parameter, the 88  */
/*          level entries are included after the field for equate     */
/*          purposes.                                                 */
/*                                                                    */
/* Record layout:                                                     */
/*   1 -  7 Field start column.                                       */
/*   9 - 12 Offset (in HEX).                                          */
/*  14 - 14 Field type C(haracter) (he)X                              */
/*                                                                    */
/*--------------------------------------------------------------------*/
    "ISREDIT MACRO (parm#) NOPROCESS"
    Parse Upper VAR parm# parm#

byp1:
    cactn = "RETURN"
    cactn = "CANCEL"
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    "ISREDIT (status) = USER_STATE"
    "ISREDIT (zfrange) = LINENUM .ZFIRST"
    "ISREDIT (zlrange) = LINENUM .ZLAST"
    "ISREDIT RESET"
    "ISREDIT (caps) = CAPS"
    "ISREDIT CAPS = OFF"
    If parm# = 'TRACE' Then Trace r
    linei  = ''
    picl   = 0
    baset  = 0
    base_n = 0
    base   = base_n
    oi     = 0
    ri     = 0
    hdr    = '       '
    hdr    = ' '

    If parm# /= '' Then Call parse_parms
x88 = 'Y'

    lin#l = zfrange

/*  Signal Pass_#2                                                    */
    Do lin#=zfrange To zlrange
      "ISREDIT (line) = LINE" lin#
      If Substr(line,7,1) = '*' Then Iterate
      If Substr(line,7,1) = '/' Then Iterate
      If Strip(Substr(line,8,65)) = '' Then Iterate

      If Substr(line,7,1) = '-' Then Do
          line = Strip(Substr(line,8,65))
          If Substr(line,1,1) = "'" Then line = Substr(line,2)
          line = '       'line
      End
      linei = linei Strip(Substr(line,8,65))
/*    Else linei = linei || Strip(Substr(line,8,65),'t')              */
      If Substr(linei,Length(linei),1) /= '.' Then Iterate
      linei = Substr(linei,1,Length(linei)-1)
      Parse VAR linei lev vname .
      Select
        When Datatype(lev) /= 'NUM' Then Do
            x = nl1(hdr || 'Line' lin#l '**** Not valid data line ****')
            Call end_level
            Iterate
        End
        When lev = 88 Then Do
            If x88 /= 'Y' Then Do
                Parse VAR linei . fld88 ' VALUE ' value
                x = nl1('%'Substr(Strip(fld88),1,30) value)
            End
            Call end_level
            Iterate
        End
        When lev = 77 Then Do
            Call end_level
            Iterate
        End
        Otherwise NOP
      End

      lev = lev +0

/*--------------------------------------------------------------------*/
/* Get field length                                                   */
/*--------------------------------------------------------------------*/
      If baset < base + picl Then baset = base + picl
      If Index(linei,' PIC ') > 0 Then picl = eval_pic_size()
      Else                             picl = 0
      If Substr(pico,1,1) = '9' Then dtype = 'N'
      Else                           dtype = 'C'
      piclo = picl
      Select
        When Index(' 'linei' ',' COMP ') > 0 |,
          Index(' 'linei' ',' COMPUTATIONAL ') > 0 |,
          Index(' 'linei' ',' COMP-4 ') > 0 |,
          Index(' 'linei' ',' COMPUTATIONAL-4 ') > 0 |,
          Index(' 'linei' ',' BINARY ') > 0 Then Do
            dtype = 'X'
            Select
              When picl <  5 Then picl = 2
              When picl < 10 Then picl = 4
              When picl < 19 Then picl = 8
              Otherwise Do
                x = nl1(hdr || '**** Have not catered for binaly length',
                       picl'.')
                Call end_level
                Iterate
              End
            End
        End
        When Index(' 'linei' ',' COMP-3 ') > 0 |,
             Index(' 'linei' ',' COMPUTATIONAL-3 ') > 0 |,
             Index(' 'linei' ',' PACKED-DECIMAL ') > 0 Then Do
             picl = picl%2 +1
             dtype = 'X'
        End
        When Index(' 'linex' ',' COMP-2 ') > 0 |,
             Index(' 'linex' ',' COMPUTATIONAL-2 ') > 0 Then Do
             picl = 8
             dtype = 'X'
        End
        Otherwise Do
          If Index(' 'linei' ',' COMP- ') > 0 |,
             Index(' 'linei' ',' COMPUTATIONAL- ') > 0 Then Do
               x = nl1(hrd || '**** Have not catered for COMP-x format')
               Call end_level
               Iterate
          End
        End
      End
/*--------------------------------------------------------------------*/
/* Process OCCURS....                                                 */
/*--------------------------------------------------------------------*/
      endoccur = 'N'
      If oi > 0 Then Do               /* Under OCCURS           */
          Do While lev <= ol#.oi      /* End OCCURS             */
              Call end_occur
              If oi = 0 Then Leave
          End
      End
      If Index(linei,' OCCURS ') > 0 Then Do
          Parse VAR linei . ' OCCURS ' o1 . ' TO ' o2 .
          oi = oi +1
          If o2 /= '' Then oc#.oi = o2
          Else oc#.oi = o1
    x=nl1('* Start occur' oc#.oi)
          om#.oi = 0
          ol#.oi = lev
          osb.oi = base
      End
/*--------------------------------------------------------------------*/

/*--------------------------------------------------------------------*/
/* Process REDEFINES.                                                 */
/*--------------------------------------------------------------------*/
      If Index(linei,' REDEFINES ') > 0 Then Do
          Parse VAR linei . ' REDEFINES ' anchor .
          If vb.anchor /= base# Then Do
              ri     = ri +1
              rl#.ri = lev
              rb#.ri = base
          End
          base   = vb.anchor
          base#  = base
      End
      Else Do
          anchor = ''
          If ri > 0 Then Do                 /* Under REDEFINES        */
              If rl#.ri >= lev Then Do      /* End REDEFINES          */
                  base = rb#.ri
                  If vb.anchor /= base# Then ri = ri -1
              End
          End
      End
/*--------------------------------------------------------------------*/
      vb.vname = base
      If anchor /= '' Then xtra = '(' anchor ')'
      Else                 xtra = ''

      off  = Right(base+1,6) Right(d2x(base),4,'0')
      picx = Right(piclo,4)'/'Left(picl,4)
      If oi > 0 Then dvname = Eval_subscript(vname,1)
      Else           dvname = vname
      x = nl1(hdr || off dtype picx Right(lev,2)'-'dvname xtra)
      If oi > 0 Then Do                     /* Under OCCURS           */
          If ol#.oi <= lev Then Do          /* End OCCURS             */
              om#.oi = om#.oi +1
              xx = om#.oi
              omm.oi.xx = picx dtype Right(lev,2)'-'vname xtra
          End
      End
      base  = base + picl
      Call end_level
    End
    off  = Right(base,6) Right(d2x(base-1),4,'0')
    base = base + picl
    Do while oi > 0                         /* Under OCCURS           */
        Call end_occur
    End
    x = nl1(hdr || off 'End')

    "ISREDIT CURSOR =" zlrange
    "ISREDIT DEL ALL NX .ZFIRST .ZCSR"

/*  Exit                                                              */
Pass_#2:
    "ISREDIT (zlrange) = LINENUM .ZLAST"
    Do Forever
        "ISREDIT F ' 0/0 ' FIRST"
        If rc /= 0 Then Leave
        "ISREDIT (line0) = LINE .ZCSR"
        "ISREDIT (lin#00) = LINENUM .ZCSR"
        Parse VAR line0 st . . . lev0 '-' .
        Do j=lin#00+1 To zlrange
            "ISREDIT (line) = LINE" j
            If Substr(line,1,1) = '%' Then Iterate
            If Substr(line,1,1) = '*' Then Iterate
            Parse VAR line . . . . lev '-' .
            If lev <= lev0 Then Leave
        End
        Parse VAR line w1 .
        If j = zlrange Then w1 = w1 +1
        If w1 <= st Then Do
            "ISREDIT (line) = LINE" j-1
            If Substr(line,1,1) = '*' Then "ISREDIT (line) = LINE" j-2
            If Substr(line,1,1) = '*' Then "ISREDIT (line) = LINE" j-3
            Parse VAR line w1 . '/' len .
            w1 = w1 + len
        End
        len = w1 - st
        picx = Left('0/'len,6)
        line0 = Overlay(picx,line0,19)
        "ISREDIT LINE" lin#00 "= (line0)"
    End
    "ISREDIT (zlrange) = LINENUM .ZLAST"
    "ISREDIT CAPS = (caps)"
    "ISREDIT USER_STATE = (status)"
    Exit

nl1: Parse ARG #nl1
    "ISREDIT LINE_AFTER .ZLAST  = (#nl1)";Return 0

eval_pic_size:
    Parse VAR linei . ' PIC ' pic .
    Parse VAR pic pic '.' .
    picl = 0
    pic  = Translate(pic,'','SV.,')
    pico = pic
    If Index(pic,'(') > 0 Then Do Forever
        Parse VAR pic xx '(' v1 ')' pic
        If v1 = '' Then v1 = Length(Strip(xx))
        picl = picl + v1
        If pic = '' Then Leave
    End
    Else Do
        pic = Translate(pic,'    ','SV.,')
        pic = Space(pic,0)
        picl = Length(pic)
    End

    Return picl

end_level:
    linei = ''
    lin#l = lin# +1
    Return 0

end_occur:
x=nl1('* End occur' oi oc#.oi)
    endoccur = 'Y'
    baseo = base
    oip = oi -1
    If oip > 0 Then Do
        Parse VAR omm.oi.1 l1 '/' l2 odtype ovname oxtra
        ooff  = Right(baseo+1,6) Right(d2x(baseo),4,'0')
        opicx = Right(l1,4)'/'Left(l2,5)
        om#.oip = om#.oip +1
        xx = om#.oip
        ovname = ovname':('1')'
Say ovname
        omm.oip.xx = opicx odtype ovname oxtra
    End
    Do j=2 to oc#.oi
        Do i=1 to om#.oi
            Parse VAR omm.oi.i l1 '/' l2 odtype ovname oxtra
            ooff  = Right(baseo+1,6) Right(d2x(baseo),4,'0')
            opicx = Right(l1,4)'/'Left(l2,5)
            xvname = eval_subscript(ovname,j)
/*
Say xvname
*/
            x = nl1(hdr || ooff odtype opicx xvname oxtra)
            If oip > 0 Then Do
              om#.oip = om#.oip +1
              xx = om#.oip
              ovname = ovname':('j')'
Say ovname
              omm.oip.xx = opicx odtype ovname oxtra
            End
            baseo = baseo + l2
        End
    End
    dif = base - osb.oi
    mpl = oc#.oi -1
    base = base + (dif * mpl)
    oi = oi -1
    Return 0

eval_subscript: ARg xname,sub
    Parse VAR xname xname ':(' llo ')' .
    xx = ''
    Do k=1 To oi-1
        xx = xx||k','
    End
    If llo /= '' Then Return xname '('xx || sub','llo')'
    Else              Return xname '('xx || sub')'

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    x88 = parse_cons('X88')

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

