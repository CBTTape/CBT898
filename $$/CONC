/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* CONC: CONCatenate datasets.                                        */
/*                                                                    */
/* Edit macro to concatenate a group of concatenated dataset from     */
/* valid (?) JCL against a specified DDname and allocate them to      */
/* DDname prefixed with $A followed by the time (hhmmss) and then     */
/* invoke 'ISPFALOC' (if available) else "ISRDDN".                    */
/*                                                                    */
/* This routine may be front ended onto routine JES2, which performs  */
/* CONC processing on a temporary copy of 'SYS1.PROCLIB(JES2)'.       */
/*                                                                    */
/* For further details invoke with parameter "?".                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
conc_ver='1.12'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    Parse SOURCE . . xcmd .

env1:
    Parse Upper VAR parm# parm#
    If Wordpos(Word(parm#,1),'? HELP /H')>0 Then Signal Help_me

    "ISREDIT (lev)=MACRO_LEVEL"
    If lev>1 Then Do
        Parse VAR parm# lin1 ',' last ',' lcmd parm#
        If lin1=last Then "(last)=LINENUM .ZLAST"
    End
    #tr=Trace('o')
    Call parse_parms
    x=Trace(#tr)

    If xprog/='?' Then Signal err_bypass_#1
    xprog='ISRDDN'
    Signal On Syntax Name err_bypass_#1
    x=ispfaloc('/T');xprog='ISPFALOC'       /* Test availability      */
err_bypass_#1:Signal Off Syntax

    "VGET (PROC FIND) SHARED"
    If proc/='' Then Do
        #proc=proc;proc=
        "VPUT proc SHARED"
    End
    If find/='' Then Do
        findp=find;find=
        "VPUT find SHARED"
    End
    Else findp=

    Address ISREDIT;"(status)=USER_STATE"

    If lev>1 Then Signal con2
    If force Then Do
        "PROCESS RANGE C M";"(cmd)=RANGE_CMD"
        If cmd='C' Then Do
            "(lin1)=LINENUM .ZFRANGE";"(last)=LINENUM .ZLRANGE"
        End
        Else Do
            "(lin1)=LINENUM .ZFIRST";"(last)=LINENUM .ZLAST"
        End
        Signal con2
    End
    If at_curs Then Do;"(lin#,col#)=CURSOR";"CURSOR="lin# 0;End
    If #proc/='' Then Signal fin1
    "(line)=LINE .ZCSR"
    char=Substr(line,3,1)
    If Wordpos('DD',line)=0 Then Signal err1
    If char='' | char='*' Then Signal err1
    PARSE VAR line '//' #proc .
    Signal con1

fin1:
    "FIND '&#PROC ' 3"
    If rc/=0 Then Do
        zedlmsg="'DDNAME' not found in column 3. If SDSF output, hit",
                'with "SJF ALL" macro.'
        Signal err2
     End

con1:
    "(lin1)=CURSOR";"(last)=LINENUM .ZLAST"

con2:
/**********************************************************************/
/*  Get all the DSNames in the DDname concatenation                   */
/**********************************************************************/
    x=Trace(O);zedlmsg=;dsname=
    x=get_conc_dsn(lin1,last)
    If dsname='' Then Do
        zedlmsg='No datasets found to concatenate.'
        Signal err2
    End
    If zedlmsg/='' Then Do
        zedlmsg='The following datasets were not found:',
                zedlmsg,
                'and have not been concatenated.'
    End

/**********************************************************************/
/*  Allocate the DSNames to the temporary DDname                      */
/**********************************************************************/
    Address
    #tr=Trace(O);#msg=Msg('On')

    x=Outtrap('line.',500,'NOCONCAT')
    ddname='$A'Time('s')
    Address TSO "ALLOC F("ddname") DA("dsname") SHR REU"
    rc1=rc
    x=Outtrap('OFF')
    x=Trace(#tr)
    #msg=Msg(#msg)
    linex=;Do i=1 To line.0;linex=linex line.i;End

/**********************************************************************/
/*  Invoke ISPFALOC with allocation message                           */
/**********************************************************************/
    Address ISPEXEC
    If rc1/=0 Then Do
        zedlmsg=line.1
        zedlmsg=Space(linex)
        If Index(zedlmsg,'NOT IN CATALOG')>0 Then,
            zedlmsg=zedlmsg'. Use the "/CC" parameter to check catalogs.'
        Else zedlmsg=zedlmsg'.'
        If Index(zedlmsg,'UNLIKE DATA SET ORGANIZATIONS')>0 Then Do
            Parse VAR dsname dsn dsname
            xx=Listdsi(dsn "DIRECTORY NORECALL SMSINFO")
            pref='  '
            Say 'RC Org  Dataset ('Words(dsname)')'
            Say '-- ---  ----------------------------------------'
            Say Right(xx,2) sysdsorg pref||dsn
            o_dsorg=sysdsorg
            Do while dsname/=''
                Parse VAR dsname dsn dsname
                xx=Listdsi(dsn "DIRECTORY NORECALL SMSINFO")
                If sysdsorg/=o_dsorg Then pref='<-';Else pref='  '
                Say Right(xx,2) sysdsorg pref||dsn
            End
        End
        Signal err2
    End
    Else If zedlmsg='' Then,
            zedlmsg="Datasets concatenated to ddname '"ddname"'."
    If xprog='ISRDDN' Then Do
        If findp='' Then Do
            zopt='Only' ddname
            zedlmsg=zedlmsg 'Use command "M memname" to find members.'
        End
        Else zopt='Only' ddname';Member' findp
    End
    Else Do
        concfree='Y';"VPUT (concfree) SHARED"
        zopt="DDNAME("ddname")" findp
    End
    "SETMSG MSG(ISRZ001)"
/*  Address TSO "%ISPFALOC DDNAME("ddname")" findp                    */
    "SELECT CMD("xprog zopt")"
    If xprog/='ISRDDN' Then Do
        "VGET (concfree) SHARED"
        If concfree='Y' Then Address TSO "FREE F("ddname")"
    End

    Signal exi1

err1:
    zedlmsg="Must place cursor on a '//xxxxxx' DD line or block ""CC""",
            'the lines and use the "/F" (force) parameter.'

err2:
    Address ISPEXEC "SETMSG MSG(ISRZ001)"

exi1:
    "ISREDIT USER_STATE=(status)"
    Address ISPEXEC "VGET EXITACTN SHARED"
    If exitactn="END" Then "ISREDIT END"
    Return 0

/*--------------------------------------------------------------------*/
/* Get all the datasets and DDNAME references.                        */
/*--------------------------------------------------------------------*/
get_conc_dsn: Arg lin0,linz
    Do i=lin0 To linz
        "(line)=LINE &I"
        If \force Then Do
            If Substr(line,1,1)=' ' Then Leave
            If Substr(line,3,1)='*' Then Iterate
            If Substr(line,3,1)/=' ' & i>lin0 Then Leave
            If Substr(line,1,2)='/*' Then Iterate
            iter=1
            Select
                When at_curs Then Do
                    dsn=Substr(line,col#);iter=0
                End
                When Index(line,"DSN=")>0 Then Do
                    Parse VAR line 'DSN=' dsn .;iter=0
                End
                When Index(line,"DSNAME=")>0 Then Do
                    Parse VAR line 'DSNAME=' dsn .;iter=0
                End
                When Index(line,"DDNAME=")>0 Then Do
                    If \no_appl Then Do
                        Parse VAR line 'DDNAME=' concdd .
                        Parse VAR concdd concdd ','
                        "(olin,ocol)=CURSOR"
                        x=find_ddname()
                        If rc=0 Then Do
                            "(lin2)=LINENUM .ZCSR"
                            #i=i;#lin0=lin0;lin0=lin2+1
                            x=get_conc_dsn(lin2,last)
                            i=#i;lin0=#lin0
                        End
                        "CURSOR="olin ocol
                    End
                    iter=1
                End
                Otherwise iter=1
            End
            If iter Then Iterate
            Parse VAR dsn dsn ',' .;Parse VAR dsn dsn .
            If Index(dsn,'&')>0 Then dsn=$Evalamp(dsn)
        End
        Else Do
            If Strip(line)='' Then Iterate
            If Substr(line,1,1)='*' Then Iterate
            dsn=xb('/P',line)
            If dsn='' Then Iterate
        End
        If cat_check Then Do
            If Sysdsn("'"dsn"'")='OK' Then dsname = dsname "'"dsn"'"
            Else zedlmsg = zedlmsg "'"dsn"'"
        End
        Else dsname=dsname "'"dsn"'"
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Evaluate if DDNAME reference is commented                          */
/*--------------------------------------------------------------------*/
find_ddname:
    "CURSOR=1 0"
    "FIND '//&CONCDD '"
    Return rc

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:

    #tr=parse_cons('TRACE','R','O',2)
    cat_check=parse_cons('/CC',1,0)
    at_curs=parse_cons('/AC',1,0)
    no_appl=parse_cons('/NA',1,0)
    force=parse_cons('/F',1,0)
    xprog=parse_cons('/I','ISRDDN','?')
    If xprog='?' Then Do
        xprog=parse_varb('P(','?')
        If xprog='?' Then xprog=parse_varb('PROG(','?')
        If xprog/='?' Then Parse VAR xprog xprog ')'
    End

    Parse VAR parm# #proc parm#_rest

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

$EVALAMP:$evalamp_ver='2.09'
/*--------------------------------------------------------------------*/
/* Parse the line looking for variables startingt with an '&'.        */
/* If found, extract the variable name and than calls anouther sub-   */
/* routine to see if the variable has been set.                       */
/* If the variable name is returned it is not a system symbol and no  */
/* substitution is made.                                              */
/* Parameters:                                                        */
/*  1. Text to parse.                                                 */
/*  2. Column to parse from.                                          */
/*  3. Literal 'LAST' to start from last line rather than current     */
/*     position. Designed when parm is passed to instream proc.       */
/*--------------------------------------------------------------------*/
eval_amper: Parse Arg text,v_p,s_order
    loop_lim=50                             /* Arbitary loop limit    */
    If debug/=1 Then debug=0
    "ISREDIT (xx)=DATASET"
    If rc/=0 Then Do
        If Verify(text,nat,'N')=0 & Length(text)<=8 Then val=Mvsvar(Symdef,text)
        Else val=
        If val/='' Then Return val;Else Return text
    End
    #tr=Trace()
    expand=1
    nat='ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||,
        'abcdefghijklmnopqrstuvwxyz' ||,
        '0123456789@#$'
    If lin#='LIN#' Then "ISREDIT (lin#)=LINENUM .ZCSR"
    If s_order='LAST' Then "ISREDIT (lin#)=LINENUM .ZLAST"
    If \Datatype(v_p,'W') Then v_p=1
    Do Forever
        v_p=Index(text,'&',v_p)
        If v_p=0 Then Return text
        next_char=Substr(text,v_p+1,1)
        If next_char='&' | next_char=' ' Then Do;v_p=v_p+2;Iterate;End
        If v_p=1 Then p1=;Else p1=Substr(text,1,v_p-1)
        p2=Substr(text,v_p)
        lc=Verify(p2' ',nat,'N',2)
        var=Substr(p2,1,lc-1)
        If Substr(p2,lc,1)='.' Then Do
            lc=lc+1
            var=var'.'
        End
        p2=Substr(p2,lc)
        If debug Then Say Space(var Substr(text,1,72))
        var_v=Get_equate(var)
        If var_v/=var Then Do
            If var_v/='' Then Do
                If Index(var_v,"''")>0 Then var_v=$cstring(var_v,"''","'",,'*')
                text=$cstring(text,var,var_v,v_p,'*')
            End
            Else Do
                x=Index(text,var)
                If x>0 Then text=Delstr(text,x,Length(var))
            End
        End
        If var_v/='' Then v_p=v_p+1
    End
    Return text

/*--------------------------------------------------------------------*/
/* Receive a variable name as the argument and seacrh the JCL for any */
/* variable equate statements, eg. "varname=". If such an equate is   */
/* found it is assumed it is a user variable. If no equate is found   */
/* a MVS symbolic evaluation is undertaken.  If successfull, the      */
/* new value is returned else the original variable name is returned. */
/* Variable "findtry" is used in case we are not in JCL and get into  */
/* an indefinite loop.                                                */
/*--------------------------------------------------------------------*/
Get_equate: Parse Arg var_v
    Parse VAR var_v '&' xxx '.' var_suf
    sysvar=0
    If xxx='SYSUID' Then Return var_v
    Interpret "If vas_"xxx"/='VAS_"xxx"' Then Return vas_"xxx
    lin@=lin#;col@=0;find=xxx'='
    findtry=0                               /* Stop indefinite loop   */
    Do Forever
        findtry=findtry+1;If findtry>loop_lim Then Do
            Say 'Recursive loop limit "'loop_lim'" reached processing:'
            Say '  'Space(var_v Substr(text,1,72))
            Say 'Check your source and try again.'
            Leave
        End
        "ISREDIT CURSOR=" lin@ col@
        "ISREDIT SEEK '"find"' PREV"
        If rc/=0 Then "ISREDIT SEEK '"find"'"
        If rc=0 Then Do
            "ISREDIT (liney)=LINE .ZCSR"
            "ISREDIT (lin@,col@)=CURSOR"
            If Verify(#tr,'NO')>0 Then Say lin@+1 Col@+0 Substr(liney,1,70)
            If Substr(liney,1,3)='//*' | Substr(liney,1,2)/='//' Then,
                Do;col@=col@-1;Iterate;End
            If Verify(liney,nat,'M',col@-1)=col@ & expand Then Do
                If \expand Then Return var_v
                Interpret "Parse VAR liney '"find"' liney"
                If Substr(liney,1,1)/="'" Then Do
                    If Substr(liney,1,1)=' ' Then liney=
                    Parse VAR liney val .
                    Parse VAR val val ',' .
                End
                Else val=get_quote_delim(liney)
                If Substr(val,1,1)='&' Then Do
                    Parse VAR val '&' xxx '.' zzz;xxx=Strip(xxx,,"'")
                    var_suf=var_suf||zzz;find=xxx'='
/*                  findtry=0                                         */
                    col@=col@-1;Iterate
                End
                Select
                    When val='DATE()' Then Return $DATEMAN('REV',,2,'D')
                    When val='TIME()' Then Do
                        Parse Value Time() with hh ':' mm ':' ss
                        Return hh||mm||ss
                    End
                    When Substr(val,1,8)='$DATEMAN(' Then Do
                        Parse VAR liney '$DATEMAN(' dmv ')' .
                        Interpret "xx=$DATEMAN("dmv")"
                        If Word(xx,1)/='Error' Then Return xx
                        Else Return val
                    End
                    Otherwise Return val||var_suf
                End
            End
            Else Do;col@=col@-1;Iterate;End
        End
        Leave
    End
Return_Var_val:
    If Verify(xxx,nat,'N')=0 & Length(xxx)<=8 Then val=Mvsvar(Symdef,xxx)
    Else val=
    If val='' Then Return var_v||var_suf
    Else Do;sysvar=1;Return val||var_suf;End

/*--------------------------------------------------------------------*/
/* It has been established that the first character of a value is a   */
/* quote and the value is parsed for a valid SINGLE quote terminator. */
/*--------------------------------------------------------------------*/
get_quote_delim:
    yyy=Substr(Arg(1),2);nq=1
    Do Forever
        nq=Index(yyy,"'",nq)
        If nq=0 Then nq=Length(Strip(yyy))+1
        Else If Substr(yyy,nq+1,1)="'" Then Do
                 nq=nq+2;Iterate
             End
        val=Substr(yyy,1,nq-1)
        yyy=Substr(yyy,nq+1);If yyy='' Then Leave
        Parse VAR yyy . ',' yyy
        Leave
    End
    Return val
$EVALAMP_end:

help_me:
    n_st=mark(2)                            /* Mark next line         */
/*

   Hello &CNAME..

   &XCMD. is an edit macro to allocate a group of concatenated dataset
   from valid (?) JCL to a TSO allocation for subsequent processing.

   The datasets are allocated against a DDname prefixed with '$A'
   followed by the time (hhmmss) and then invoke 'ISPFALOC'.

   You can then do all the appropriate ISPFALOC commands like
   "FIND member", LMD(Last Modified Date), SLM(Show Load Module)
   disassemble etc...

   If the allocation fails with a missing dataset, pass parameter of
   "/CC" (Check Catalog) and if a datasets does not exist, it will
   not be included in the allocation concatenation.

   If you are not processing standard JCL, pass parameter of "/F" to
   force processing of the line. This function will invoke the services
   of "XB" to extract a valid dataset from the line. Use this feature
   to concatenate cut and paste datasets. Blank lines and "*" in column
   1 will be ignored. Non valid datasets will be ignored. This can be
   used as an alternative to "/CC", however, remember the non "/F"
   processing is terminated on a change of 'DD'.

   Parameters:
     Positional:
      1. DDname to concatenate.
     Keywords:
      /AC  - Take dataset from cursor At Column position. All datasets
             from following lines will use the same column so ensure
             dsnames are column aligned. (May need to be bolstered by
             the "/F' parameter if it fails JCL verification format.
      /CC  - Check catalog before allocating.
      /F   - Force concatenation even if not JCL format. Use with the
             "?AC" parameter.
      /I   - Use ISRDDN instead of ISPFALOC. Shorthand alternative to
             parameter "P(ISRDDN)"
      /NA  - Do Not append Applications datasets.  This feature only
             applies if the applications' dataset are appended using
                 //   DD DDNAME=ddname
             JCL syntax.
      P(p) - Use program 'P' insted of default ISPFALOC.


   Notes:
      1. For this function to be usable, you will need access to
         ISPFALOC. ISPFALOC (REXX routine) lists all it's packaging
         requirements.
         *----------------------------------------------------------*
         If ISPFALOC is not available, it will use the IBM supplied
         ISRDDN interface. Use the "Member memname" function to find
         members.
         Alternatively you can pass a parameter of P(ISRDDN) to force
         use of ISRDDN.
         *----------------------------------------------------------*
      2. Uses REXX command $WHOAMI. (This is optional.)
      3. For SDSF held output that call external procs that woulkd not
         be revealed using the "SJ" line command,
         a) open using the "SE" line command
         b) use edit-macro "SJF all"
         c) you shoud be ready to &XCMD..

   GOTCHAs:
      1. DDs used on a DDNAME= statement should be unique within the
         job else the wrong one may be picked up.  "stepname.ddname"
         is not supported.

                               *****

*/
n_en=mark(-2)                               /* Mark prev 2 line       */
    Call process_source
    Return 0

process_source:
    chgchar='&'
    cname='there'
    Signal on Syntax Name errir_off_1
    cname=$Whoami('C')
error_off_1:Signal Off Syntax
    today=Date('e')
    If ima_macro Then Do
        Address ISREDIT;"(caps)=CAPS";"CAPS=OFF"
        "(l#1,l#l)=DISPLAY_LINES";If l#1=1 Then where='.ZFIRST';Else where=l#1+1
    End
    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1||'var'||p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Return 0

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE" where"=NOTELINE (n#)"
    Else Say n#;Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
