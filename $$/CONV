/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* PSLOG:                                                             */
/* Routine to generate mass ADR040xx entries from map processing      */
/* programs.                                                          */
/*                                                                    */
/* It will utilise the output from PICIT (which has been updated with */
/* the PSPROG command). Ie. If FIELD-CODE not = 'XXXX'                */
/*                                                                    */
/* The gend indicator will be changed from 'X' to 'Y' (if update flag */
/* set to prevent subsequent code generation.                         */
/* This flag can be manually changed back to 'X' to force code gen.   */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Parse Upper ARG parm#
    If parm# /= "" Then Signal byp1
/*  Address ISPEXEC                                                   */
    "ISPEXEC CONTROL ERRORS RETURN"
/*  "ISREDIT MACRO (parm#) NOPROCESS"                                 */
    "ISREDIT MACRO (parm#)"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
/*--------------------------------------------------------------------*/

    panel = 'CONVP'
    cobl  = 'SYS1.COB39022.SIGYCOMP'
    vars  = 'CONVDBUG,CONVIDSN,CONVODSN,CONVPDSN,CONVPMEM,CONVJCLA,',
            'CONVJCLT'
    "ISPEXEC VGET ("vars") PROFILE"
    csr1 = 'CONVIDSN'

convidsn = "'PSAZK.AMBS.S1.FE.OLD'"
    dsn = convidsn
    Call get_dsn_info
    ilrecl = lrecl
    If dsorg = 'VS' Then ikey = key
    Else                 ikey = '0'
    If ikey /= '0' Then Do
        Parse VAR ikey orkp '.' okey
        orkp = orkp -1
    End
    olrecl = ilrecl
    If convodsn = '' Then Do
        If Substr(convidsn,1,1) = "'" Then convodsn =,
            Substr(convidsn,1,Length(convidsn)-1)".CONV'"
        Else convodsn = "'"convidsn".CONV'"
    End

scr1:
    zcmd = ''
    "ISPEXEC DISPLAY PANEL(&PANEL) CURSOR(&CSR1)"
    If rc /= 0 Then Do
        gc009 = "Parameter entry screen abandoned."
        Signal erx1
        Exit
    End
    If zcmd /= 'BI' Then Do
        Parse VAR convpdsn convedsn '(' member ')'
        Parse VAR convedsn "'" convedsn "'"
        If Sysdsn("'"convedsn"'") /= 'OK' Then Do
            gc009 = "'"convedsn"'" Sysdsn("'"convedsn"'")"."
            "ISPEXEC SETMSG MSG(GC009)"
            Signal scr1
        End
        If convpmem /= '' Then member = convpmem
        convedsn = "'"convedsn"("member")'"
        If zcmd = 'EC' Then Do
            "ISPEXEC EDIT DATASET(&CONVEDSN)"
            Signal scr1
        End
    End

    If Sysdsn(convidsn) /= 'OK' Then Do
        gc009 = convidsn Sysdsn(convidsn)"."
        "ISPEXEC SETMSG MSG(GC009)"
        Signal scr1
    End
    If zcmd = 'BI' Then Do
        If dsorg = 'VS' Then Do
            zdlvol = '*VSAM*'
            "ISPEXEC VPUT (ZDLVOL) SHARED"
            Address TSO "%VB" convidsn
        End
        Else "ISPEXEC BROWSE DATASET('&CONVIDSN')"
        Signal scr1
    End

    If convidsn = convodsn Then update = 'Y'
    Else                        update = 'N'

/*--------------------------------------------------------------------*/
Process:
    Call get_sysin

    "ISREDIT RESET"
    "ISREDIT (last) = LINENUM .ZLAST"
    If last = 0 Then "ISREDIT LINE_AFTER .ZFIRST = ' '"

    If convjcla = 'Y' | convjclt = 'Y' Then Call j_jobcard
    If convjcla = 'Y' Then Call j_comp_1

    If olrecl = '' | olrecl = '*' Then olrecl = ilrecl
    If okey   = '' | okey   = '*' Then okey   = ikey
    okeyl = okey
    If okey /= '0' Then okey = orkp+1'.'okey+0

    i_colp = 1
    o_colp = 1
    i_f.1 = ' 01  I-RECORD.'
    i_f.2 = '     03  I-'Right(1,5,'0')'-'Right(ilrecl,5,'0'),
                  '        PIC X('Right(ilrecl,5,'0')').'
    o_f.1 = ' 01  O-RECORD.'
    o_f.2 = '     03  O-'Right(1,5,'0')'-'Right(olrecl,5,'0'),
                  '        PIC X('Right(olrecl,5,'0')').'
    if#  = 2
    of#  = 2

    If ikey /= '0' & update = 'N' Then Do
        type = 'X'
        col   = ikey
        lrecl = ilrecl
        Call eval_col_len
        ikey = 'I-'Right(col,5,'0')'-'Right(col+len-1,5,'0')
        i_f.3 = '         05  'ikey,
                      '    PIC X('Right(len,5,'0')').'
        if# = if# +1
    End
    If okey /= '0' Then Do
        type = 'X'
        col   = okey
        lrecl = olrecl
        Call eval_col_len
        okey = 'O-'Right(col,5,'0')'-'Right(col+len-1,5,'0')
        o_f.3 = '         05  'okey,
                      '    PIC X('Right(len,5,'0')').'
        of# = of# +1
    End
    if#s = if#
    of#s = of#

    err = 0
    len = 0
    cd# = 0
    Call nld(Copies('-',70))
    Do i=1 To sysin.0
        Call nld(' ')
        Call nld(" Cols  >----+----1----+----2----+----3----+----4")
        Call nld(" Input >"sysin.i)
        Parse VAR sysin.i 1 f_col +11,
                         13 t_col +11,
                         25 fmt cond pad .
        Select
            When fmt = 'D' Then type = '9'
            When fmt = 'P' Then type = '9'
            Otherwise           type = 'X'
        End
        f_col = Strip(f_col)
        If f_col = 'I' | f_col = '' Then,
            Call nld('    I - Initialisation of output only')
        Else Do
            col   = f_col
            colp  = i_colp
            lrecl = ilrecl
            ecl = 'I'
            Call eval_col_len
            i_colp = col
            i_len = plen
            If update = 'Y' Then,
                Call nld('    I - Initialisation of output only')
            Else do
                Call nld('    I - 'Left('col='col,9) Left('len='len,9),
                         'packdlen='plen)
                If len = 'E' Then Do
                    xx = nle('E >'i_colp'< Erroneous FROM parameter detected')
                    Iterate
                End
                If len > 0 Then Do
                    if# = if# +1
                    i_f = 'I-'Right(i_colp,5,'0')'-'Right(i_colp+len-1,5,'0')
                    i_f.if# = '         05 ' i_f '    PIC',
                              type'('Right(i_len,5,'0')')' || xtra || '.'
                End
                i_colp = i_colp +len
            End
        End

        col   = t_col
        colp  = o_colp
        lrecl = olrecl
        ecl = 'O'
        Call eval_col_len
        o_colp = col
        o_len = plen
        Call nld('    O - 'Left('col='col,9) Left('len='len,9) 'packdlen='plen)
        If len = 'E' Then Do
            xx = nle('E >'o_colp'< Erroneous TO parameter detected')
            Iterate
        End
        If len = 0 Then Iterate
        of# = of# +1
        o_f = 'O-'Right(o_colp,5,'0')'-'Right(o_colp+len-1,5,'0')
        o_f.of# = '         05 ' o_f '    PIC',
                  type'('Right(o_len,5,'0')')' || xtra || '.'
        o_colp = o_colp +len
        If update = 'Y' Then Do
            If pad = '' | pad = ',' Then Iterate
        End
        cd# = cd# +1
        If Substr(cond,1,1) = 'C' Then Do
            clen = Substr(cond,2)
            If clen = '' | clen > 5 Then clen = 5
            cd.cd# = ' T-'i_f'.'
            cd# = cd# +1
            cd.cd# = "     IF " i_f "(1:"clen") = '"Copies('?',clen)"'"
            cd# = cd# +1
            If pad = '' | pad = ',' Then,
                cd.cd# = "         MOVE '"Copies('?',clen)"' TO" o_f
            Else Do
                #i_f = i_f
                Call fake_from_field
                cd.cd# = "         MOVE" i_f "TO" o_f
                i_f = #i_f
            End
            cd# = cd# +1
            cd.cd# = '         GO TO X-'i_f'.'
            cd# = cd# +1
            cd.cd# = ' X-'i_f'.'
        End
        Else Do
            If i_len = 0 | pad /= '' Then Call fake_from_field
            cd.cd# = '     MOVE' Substr(i_f,1,13) 'TO' o_f'.'
        End
        Call nld(' ')
     End
     Call nld(Copies('-',70))
     If convdbug = 'N' & err Then Do
         Call nle(' ')
         Call nle('E - Errors detected. Suggest rerun with debug=Y.')
         Call nle(' ')
     End

     If update = 'Y' Then Signal sorted_input
     Parse VAR i_f.2 .  irec  .
     Do Forever
         sorted = 'Y'
         Do i=if#s To if#-1
             j = i +1
             Parse VAR i_f.i . '-' coli  .
             Parse VAR i_f.j . '-' colj  .
             If colj = coli | 'I-'coli = irec Then Do
                 Do i=i To if#-1
                     j = i +1
                     i_f.i = i_f.j
                 End
                 if# = if# -1
                 sorted = 'N'
                 Iterate
             End
             If colj > coli Then Iterate
             sorted = 'N'
             xx    = i_f.j
             i_f.j = i_f.i
             i_f.i = xx
         End
         If sorted = 'Y' Then Leave
     End
     If 'I-'colj = Irec Then if# = if# -1
sorted_input:
     Parse VAR o_f.2 .  orec  .
     Do Forever
         sorted = 'Y'
         Do i=of#s To of#-1
             j = i +1
             Parse VAR o_f.i . '-' coli  .
             Parse VAR o_f.j . '-' colj  .
             If colj = coli | 'O-'coli = orec Then Do
                 Do i=i To of#-1
                     j = i +1
                     o_f.i = o_f.j
                 End
                 of# = of# -1
                 sorted = 'N'
                 Iterate
             End
             If colj > coli Then Iterate
             sorted = 'N'
             xx    = o_f.j
             o_f.j = o_f.i
             o_f.i = xx
         End
         If sorted = 'Y' Then Leave
     End
     If 'O-'colj = orec Then of# = of# -1

     Call set_code
     Do i=1 To 5
         Call nl(cl.i)
     End
     If update = 'N' Then Do
         If ikey /= '0' Then Do
             Call nl(cl.6i)
             Call nl('            RECORD KEY IS' ikey'.')
         End
         Else Do
             Call nl(cl.6s)
         End
     End
     If okey /= '0' Then Do
         Call nl(cl.8i)
         Call nl('            RECORD KEY IS' okey'.')
     End
     Else Do
         Call nl(cl.8s)
     End
     Do i=10 To 12
         Call nl(cl.i)
     End
     If update = 'N' Then Do
         Call nl(cl.13)
         Call nl(i_f.1)
         Call nl(i_f.2)
         Parse VAR i_f.2 .  coli  .
         Do i=3 To if#
             Parse VAR i_f.i . '-' xx '-' .
             Call nl('     03  REDEFINES' coli'.')
             If xx > 1 Then Do
                 line = '         05  FILLER',
                        '           PIC X('Right(xx-1,5,'0')').'
                 Call nl(line)
             End
             Call nl(i_f.i)
         End
     End
     Call nl(cl.15)
     Call nl(o_f.1)
     Call nl(o_f.2)
     Parse VAR o_f.2 . colo  .
     Do i=3 To of#
         Parse VAR o_f.i . '-' xx '-' .
         Call nl('     03  REDEFINES' colo'.')
         If xx > 1 Then Do
             line = '         05  FILLER',
                    '           PIC X('Right(xx-1,5,'0')').'
             Call nl(line)
         End
         Call nl(o_f.i)
     End
     Do i=17 To 20
         Call nl(cl.i)
     End
     If update = 'N' Then Do
         Call nl(cl.21)
         Call nl(cl.22)
     End
     Else Call nl(cl.21u)
     Call nl(cl.23)
     If update = 'N' Then Call nl(cl.24)
     Else                 Call nl(cl.24u)
     Call nl(' ')
     Do i=1 To cd#
         Call nl(cd.i)
     End
     Call nl(' ')
     If update = 'N' Then pref = ''
     Else                 pref = 'RE'
     Call nl('     'pref'WRITE O-RECORD.')
     Do i=27 To 28
         Call nl(cl.i)
     End
     If update = 'N' Then Call nl(cl.29)
     Else                 Call nl(cl.29u)
     Do i=30 To 31
         Call nl(cl.i)
     End
     If convjcla = 'Y' Then Call j_link_1
     If convjclt = 'Y' & update = 'N' Then Call j_create
     If convjclt = 'Y' Then Call j_convert
     If convjclt = 'Y' & update = 'N' Then Call j_rename

erx1:
/*  "ISPEXEC SETMSG MSG(GC009)"                                       */

ext1:
    "ISPEXEC VPUT ("vars") PROFILE"
    If last = 0 Then "ISREDIT DEL .ZCSR .ZCSR ALL"
    Exit

Right: Arg val,wlen,fc
    Return Substr(Copies(fc,wlen),1,wlen-Length(val))val

nl: Parse Arg ntl
    ntl = '      'ntl
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)"
    Return 0

nle: Parse Arg ntl
    err = 1
    ntl = Substr('*    'ntl,1,60)'*'
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)"
    Return 0

nld: Parse Arg ntl
    If convdbug /= 'Y' Then Return 0
    ntl = Substr('*'ntl,1,60)'*'
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)"
    Return 0

nlj: Parse Arg ntl
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)"
    Return 0

eval_col_len:
    If Strip(col) = ',' Then col = ''
    Select
        When Index(col,'-') > 0 Then Do
            Parse VAR col sc '-' ec .
            If sc = '*' Then sc = colp
            If ec = '*' Then ec = lrecl
            If Datatype(sc) /= 'NUM' | Datatype(ec) /= 'NUM' Then,
                 len = 'E'
            Else len = ec - sc +1
        ENd
        When Index(col,'.') > 0 Then Do
            Parse VAR col sc '.' len .
            If sc  = '*' | sc = '' Then sc = colp
            If len = '*' Then len = lrecl - sc +1
            If Strip(len) = '' & ecl = 'O' Then len = i_len
            If Datatype(sc)  /= 'NUM' Then len = 'E'
            If Datatype(len) /= 'NUM' Then len = 'E'
        End
        When col = '*' Then Do
            sc  = 1
            If ecl = 'I' Then len = ilrecl
            Else              len = olrecl
        End
        Otherwise Do
            len = 0
            If Strip(col) = '' Then len = 0
            Else                    len = 'E'
        End
    End
    col = sc
    If len > 0 & type = 9 & fmt = 'P' Then Do
        xtra = ' COMP-3'
        plen = len*2 -1
        If plen > 18 Then Do
            Call nl('* Packed length of 2*'len '> 18 digits.')
            len = 'E'
        End
    End
    Else Do
        xtra = ''
        plen = len
    End
    If len /= 'E' Then Do
        Select
            When sc > lrecl Then Do
               Call nle("E Past '"ecl"' record length.")
               len = 'E'
            End
            When sc+len-1 > lrecl Then Do
               Call nle("E Past '"ecl"' record length.")
               len = 'E'
            End
            Otherwise Nop
        End
    End
    Return 0

fake_from_field:
    pad = Strip(pad)
    If pad = ',' Then Return 0              /* Comments seperator     */
    Select
        When pad = '' &type = 'X' Then i_f = 'SPACES'
        When pad = '' &type = '9' Then i_f = 'ZEROS'
        When pad = '' Then i_f = 'SPACES'
        When pad = 0  Then i_f = 'ZEROS'
        When Index(pad,"X'") > 0 Then Do
             Parse VAR pad "X'" pad "'"
             i_f = "ALL X'"pad"'"
        End
        Otherwise Do
             If Substr(pad,1,1) = "'" Then Parse VAR pad "'" pad "'"
             i_f = "ALL '"pad"'"
        End
    End

    Return 0


get_sysin:
    dd = 'CONVPDD'
    Address TSO "ALLOC F("dd") DSN("convedsn") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM sysin. FINIS)"
    Address TSO "FREE F("dd")"
    Return 0

linei    = "from_fields to_fields Fmt Cond Pad  "
sysin.1  = "*           *           C N       "
sysin.2  = "191.4       *.*         P N      0"
sysin.3  = "*.2         195.        D N      0"
sysin.0  = 3
    Return 0

sysin.10 = "00001-02000 00001-02000 C N       "
sysin.9  = "02001-02009 *           P N       "
sysin.8  = "02010-02019 *.20        P N       "
sysin.7  = "02020.02029 *.20        P N       "
sysin.6  = "02020.02029 *.20        P N       "
sysin.5  = "            *.10        C N       "
sysin.4  = "            *.10        C N  X'00'"
sysin.3  = "            *.10        D N  X'00'"
sysin.2  = "02030-02040 *.          C C3 X'FF' Check first 3 chars"
sysin.1  = "02041-02100 *.          C C3     , Check first 3 chars"
sysin.11 = "02101-02169 ,           C C3     , Check first 3 chars"
sysin.12 = "02170-*     *.*         P N       "
sysin.0  = 12
    Return 0

linei    = "from_fields to_fields Fmt Cond Pad  "
sysin.1  = "00001-02000 00001-02000 C N       "
sysin.2  = "02001-02009 *           P N       "
sysin.3  = "02010-02019 *.20        P N       "
sysin.4  = "02020.02029 *.20        P N       "
sysin.5  = "02020.02029 *.20        P N       "
sysin.6  = "            *.10        C N       "
sysin.7  = "            *.10        C N  X'00'"
sysin.8  = "            *.10        D N  X'00'"
sysin.9  = "02030-02040 *.          C C3 X'FF' Check first 3 chars"
sysin.10 = "02041-02100 *.          C C3     , Check first 3 chars"
sysin.11 = "02101-02169 ,           C C3     , Check first 3 chars"
sysin.12 = "02170-*     *.*         P N       "
sysin.0  = 12
    Return 0

execio_rl_update:
    dd = 'PSLOGDD'
    Address TSO "ALLOC F("dd") DSN("pslogsrc") SHR REU"
    Address TSO "EXECIO * DISKW "dd" (STEM sysin. FINIS)"
    Address TSO "FREE F("dd")"
    gc009 = "Dataset" pslogsrc "has been updated with the new log numbers."

    Return 0

/*-------------------------------------------------------------------*/
/* Set code lines to use as templates or copy startight in.          */
/*-------------------------------------------------------------------*/
set_code:
cl.1  = ' IDENTIFICATION DIVISION.                          '
cl.2  = ' PROGRAM-ID. CONVERT.                              '
cl.3  = ' ENVIRONMENT DIVISION.                             '
cl.4  = ' INPUT-OUTPUT SECTION.                             '
cl.5  = ' FILE-CONTROL.                                     '
cl.6s = '     SELECT I1 ASSIGN I1 ACCESS SEQUENTIAL.        '
cl.6i = '     SELECT I1 ASSIGN I1 INDEXED ACCESS SEQUENTIAL '
cl.7  = '            RECORD KEY IS AMBI-KEY.                '
cl.8s = '     SELECT O1 ASSIGN O1 ACCESS SEQUENTIAL.        '
cl.8i = '     SELECT O1 ASSIGN O1 INDEXED ACCESS SEQUENTIAL '
cl.9  = '            RECORD KEY IS AMBO-KEY.                '
cl.10 = '                                                   '
cl.11 = ' DATA DIVISION.                                    '
cl.12 = ' FILE SECTION.                                     '
cl.13 = ' FD  I1.                                           '
cl.14 = ' 01  I-RECORD-LAYOUT                               '
cl.15 = ' FD  O1.                                           '
cl.16 = ' 01  o-RECORD-LAYOUT                               '
cl.17 = ' WORKING-STORAGE SECTION.                          '
cl.18 = '                                                   '
cl.19 = ' PROCEDURE DIVISION.                               '
cl.20 = ' 100-INITIALISE.                                   '
cl.21u= '     OPEN I_O    O1.                               '
cl.21 = '     OPEN INPUT  I1                                '
cl.22 = '          OUTPUT O1.                               '
cl.23 = ' 200-READ-LOOP.                                    '
cl.24u= '     READ  O1 AT END GO TO 400-FINALISE.           '
cl.24 = '     READ  I1 AT END GO TO 400-FINALISE.           '
cl.25 = '     MOVE ...........                              '
cl.26 = '     WRITE O-RECORD.                               '
cl.27 = '     GO TO 200-READ-LOOP.                          '
cl.28 = ' 400-FINALISE.                                     '
cl.29 = '     CLOSE I1 O1.                                  '
cl.29u= '     CLOSE O1.                                     '
cl.30 = ' 900-GET-OUT.                                      '
cl.31 = '     STOP RUN.                                     '

Return 0

get_dsn_info:
    If Substr(dsn,1,1) /= "'" Then dsn = "'"dsn"'"
    x = Listdsi(dsn)
    dsorg = sysdsorg
    If dsorg = 'VS' Then Signal process_VSAM
    lrecl = syslrecl

    Return 0

process_VSAM:
/*  x = Msg('On')                                                     */
/*  x = Outtrap('outt.',500,'NOCONCAT')                               */
/*  Address TSO "LISTC ENT("dsn") ALL"                                */
/*  x = Msg('Off')                                                    */
/*  x = Outtrap('Off')                                                */
/*  ksds = 'N'                                                        */
/*  Do i=1 To outt.0                                                  */
/*      Select                                                        */
/*          When Index(outt.i,'KEYLEN-') > 0 Then Do                  */
/*              w1  = Word(outt.i,1)                                  */
/*              key = Substr(w1,Lastpos('-',w1)+1)                    */
/*          End                                                       */
/*          When Index(outt.i,'RKP-') > 0 Then Do                     */
/*              w1  = Word(outt.i,1)                                  */
/*              key = Substr(w1,Lastpos('-',w1)+1)+1'.'key            */
/*              w2    = Word(outt.i,2)                                */
/*              lrecl = Substr(w2,Lastpos('-',w2)+1)                  */
/*          End                                                       */
/*          When Index(outt.i,' INDEXED ') > 0 Then Do                */
/*              ksds = 'Y'                                            */
/*              Leave                                                 */
/*          End                                                       */
/*          Otherwise NOP                                             */
/*      End                                                           */
/*  End                                                               */

    Parse var convidsn "'" oconvidsn "'" .
    Parse var convodsn "'" oconvodsn "'" .
    Call listc_and_parse
    lrecl = dmrecl
    key   = dkeyp+1'.'dkeyl
    If vtype = 'INDEXED' Then ksds = 'Y'

    Return 0

j_jobcard:
userid = Userid()
x=nlj("//"userid"C JOB (CCS),'CONVERT',CLASS=C,MSGCLASS=P,             ")
x=nlj("//         REGION=0M,NOTIFY=&SYSUID                             ")
x=nlj("//*                                                             ")
Return 0

j_comp_1:
x=nlj("//*-----------------------------------------------------        ")
x=nlj("//*  COMPILE INSTREAM CONVERSION PROGRAM               -        ")
x=nlj("//*-----------------------------------------------------        ")
x=nlj("//COB0001 EXEC PGM=IGYCRCTL,REGION=4096K,                       ")
x=nlj("//        PARM=(NOADV,C,FSRT,APOST,RENT,RES,S,X,MAP,OFF,OPT,    ")
x=nlj("//        'TRUNC(BIN)','LANG(UE)',AWO,LIB,'FLAG(E,I)')          ")
x=nlj("//STEPLIB  DD DISP=SHR,DSN=SYS1.COB39022.SIGYCOMP               ")
x=nlj("//SYSLIN   DD DSN=&&LOD0001,                                    ")
x=nlj("//            DCB=(BLKSIZE=3120,LRECL=80,RECFM=FB),             ")
x=nlj("//            DISP=(,PASS),                                     ")
x=nlj("//            SPACE=(CYL,(2,2),RLSE),                           ")
x=nlj("//            UNIT=VIO                                          ")
x=nlj("//SYSPRINT DD SYSOUT=*                                          ")
x=nlj("//SYSPUNCH DD DUMMY,DCB=BLKSIZE=80                              ")
x=nlj("//SYSUT1   DD SPACE=(CYL,(1,5),RLSE),UNIT=VIO                   ")
x=nlj("//SYSUT2   DD SPACE=(CYL,(1,5),RLSE),UNIT=VIO                   ")
x=nlj("//SYSUT3   DD SPACE=(CYL,(1,5),RLSE),UNIT=VIO                   ")
x=nlj("//SYSUT4   DD SPACE=(CYL,(1,5),RLSE),UNIT=VIO                   ")
x=nlj("//SYSUT5   DD SPACE=(CYL,(1,5),RLSE),UNIT=VIO                   ")
x=nlj("//SYSUT6   DD SPACE=(CYL,(1,5),RLSE),UNIT=VIO                   ")
x=nlj("//SYSUT7   DD SPACE=(CYL,(1,5),RLSE),UNIT=VIO                   ")
x=nlj("//SYSIN    DD *                                                 ")
Return 0

j_link_1:
x=nlj("//*                                                             ")
x=nlj("//*-----------------------------------------------------        ")
x=nlj("//*  LINK CONVERSION PROGRAM                           -        ")
x=nlj("//*-----------------------------------------------------        ")
x=nlj("//LKED0001 EXEC PGM=IEWL,COND=(4,LT,COB0001),                   ")
x=nlj("//         PARM='RENT,MAP,LIST,XREF'                            ")
x=nlj("//SYSPRINT DD SYSOUT=*                                          ")
x=nlj("//SYSLIB   DD DISP=SHR,DSN=SYS1.CICSTS13.CICS.SDFHLOAD          ")
x=nlj("//         DD DISP=SHR,DSN=SYS1.SCEELKED                        ")
x=nlj("//         DD DISP=SHR,DSN=SYS1.SCEECICS                        ")
x=nlj("//SYSLIN   DD DISP=(OLD,PASS,DELETE),DSN=&&LOD0001              ")
x=nlj("//SYSLMOD  DD DISP=(NEW,PASS),DSN=&&SYSLMOD(CONVERT),           ")
x=nlj("//            SPACE=(CYL,(1,1,1)),UNIT=SYSALLDA,                ")
x=nlj("//            DCB=(RECFM=U,BLKSIZE=0)                           ")
x=nlj("//SYSUT1   DD SPACE=(CYL,(1,1),RLSE),UNIT=VIO                   ")
x=nlj("//*                                                             ")
Return 0

j_create:
x=nlj("//*-----------------------------------------------------        ")
x=nlj("//*  CREATE NEW DATASET                                -        ")
x=nlj("//*-----------------------------------------------------        ")
x=nlj("//DEFVSAM  EXEC PGM=IDCAMS                                      ")
x=nlj("//SYSPRINT DD SYSOUT=*                                          ")
x=nlj("//SYSIN    DD *                                                 ")
x=nlj("     DELETE ("oconvodsn")      +                                ")
x=nlj("           PURGE NOERASE CLUSTER                                ")
x=nlj("                                                                ")
x=nlj("     IF MAXCC < 9 THEN SET MAXCC = 0                            ")
x=nlj("                                                                ")
If okey /= 0 Then Do
    Do i=1 To ztempf.0
        x=nlj(ztempf.i,1,72)
    End
x=nlj("/*                                                              ")
End
Else Do
x=nlj("//DEFSEQF  EXEC PGM=IEFBR14                                     ")
x=nlj("//         DD DSN="oconvodsn",                                  ")
x=nlj("//            SPACE=(CYL,(50,50),,RLSE),UNIT=SYSALLDA,          ")
x=nlj("//            DCB=(RECFM=FB,LRECL="olrecl",BLKSIZE=0),          ")
x=nlj("//            DISP=(NEW,CATLG)                                  ")
End
Return 0

j_convert:
x=nlj("//*------------------------------------------------------       ")
x=nlj("//*  CONVER OLD DATASET INTO NEW                        -       ")
x=nlj("//*------------------------------------------------------       ")
x=nlj("//CONVERT EXEC PGM=CONVERT                                      ")
x=nlj("//STEPLIB  DD DISP=(OLD,PASS,DELETE),DSN=&&SYSLMOD              ")
If update = 'N' Then,
x=nlj("//I1       DD DISP=SHR,DSN="oconvidsn                            )
x=nlj("//O1       DD DISP=SHR,DSN="oconvodsn                            )
x=nlj("//                                                              ")
x=nlj("                                                                ")
x=nlj("                                                                ")
Return 0

j_rename:
x=nlj("//*------------------------------------------------------       ")
x=nlj("//*  REMOVE ABOVE TERMINATION LINES TO EFFECT RENAMES   -       ")
x=nlj("//*------------------------------------------------------       ")
x=nlj("//ST10502  EXEC PGM=IDCAMS,REGION=1024K                         ")
x=nlj("//SYSPRINT DD SYSOUT=*                                          ")
x=nlj("//ENQ1     DD DISP=OLD,DSN="oconvidsn                            )
x=nlj("//SYSIN    DD *                                                 ")
x=nlj("   ALTER  "oconvidsn" +                                         ")
x=nlj("       NEWNAME("oconvidsn".OLD )                                ")
x=nlj("   ALTER  "oconvidsn".D +                                       ")
x=nlj("       NEWNAME("oconvidsn".OLD.D )                              ")
x=nlj("   ALTER  "oconvidsn".I +                                       ")
x=nlj("       NEWNAME("oconvidsn".OLD.I )                              ")
x=nlj("                                                                ")
x=nlj("   ALTER  "oconvodsn" +                                         ")
x=nlj("       NEWNAME("oconvidsn" )                                    ")
x=nlj("   ALTER  "oconvodsn".D +                                       ")
x=nlj("       NEWNAME("oconvidsn".D )                                  ")
x=nlj("   ALTER  "oconvodsn".I +                                       ")
x=nlj("       NEWNAME("oconvidsn".I )                                  ")
x=nlj("                                                                ")
x=nlj("/*                                                              ")
x=nlj("//                                                              ")
Return 0

/*--------------------------------------------------------------------*/
/*                                                                    */
/*  Generate JCL to delete/create a VSAM dataset from a supplied      */
/*  model.                                                            */
/*  Parameters may be changed through screen displays or during edit  */
/*  session of the JCL.                                               */
/*  There is an option to copy all or part of the model dataset into  */
/*  the new dataset.                                                  */
/*                                                                    */
/*  Members required to package this portion:                         */
/*   REXX:                                                            */
/*     VSAMCRM1 - Macro to parse LISTC output                         */
/*   Skeleton:                                                        */
/*     VSAMCRES - Skeleton to format the IDCAMS //SYSIN parms         */
/*                                                                    */
/*--------------------------------------------------------------------*/
listc_and_parse:
    dname   = 'DATA'
    dname   = 'D'
    iname   = 'INDEX'
    iname   = 'I'
    userid  = Userid()
    hlq     = $alkhlq()
    unit    = 'SYSALLDA'
    sysda   = 'SYSDA'
    dataset = hlq'.$L'TIME('s')'.TEMP'
    x       = MSG('Off')
    x_x     = Time('s')
    dd      = '$D'x_x
    x       = Msg('Off')
    Address TSO "DELETE '"dataset"'"
    Address TSO "ALLOC F("dd") DA('"dataset"') NEW SPACE(5,5)",
                "RECFM(V B) LRECL(125) BLKSIZE(19029) TRACKS",
                "UNIT("sysda") CATALOG REUSE"

    Address TSO "LISTC ENT('"oconvidsn"') OFILE("dd") ALL"

prs1:
/*  e_ass = 'N'                                                       */
/*  "ISPEXEC VPUT (NDEVT) SHARED"                                     */
    "ISPEXEC EDIT DATASET('&DATASET') MACRO(VSAMCRM1)"

    "ISPEXEC VGET (VSAMVAR) SHARED"
    "ISPEXEC VGET (&VSAMVAR) SHARED"

    sdshro = dshro
    sishro = ishro
    orecsz = '('darecl dmrecl')'
    okeys  = '('dkeyl dkeyp')'
    dfree  = '('dfreei dfreea')'

    action = 'GOODIES'                      /* For SYSIN only fr Skel */
    genunit= 'N'                            /* No UNIT allocation(VOL)*/
    dsname = oconvodsn
    volume = sysvolume
    dataname = dsname'.'dname
/*  otype2 = '(DATA)'                                                 */
/*  dshro  = sdshro                                                   */
    If index = 'Y' Then Do
        ishro    = sishro
        indxname = dsname'.'iname
        otype3   = '(INDEX)'
    End
    Else Do
        indxname = ''
        otype3   = ''
        ishro    = ''
    End
/*  If ass0 ¬= '' Then asscnt = asscnt                                */
/*  If dcisz = '' Then xcisz = 0                                      */
/*  Else               xcisz = dcisz                                  */
/*  rem = xcisz // 512                                                */
/*  If rem ¬= 0 Then csr2 = 'DCISZ'                                   */
/*  If rem = 0 Then Do                                                */
/*      If icisz = '' Then xcisz = 0                                  */
/*      Else               xcisz = icisz                              */
/*      rem = xcisz // 512                                            */
/*      If rem ¬= 0 Then csr2 = 'ICISZ'                               */
/*  End                                                               */

    zcmd = 'FORCE'
    "ISPEXEC CONTROL NONDISPL ENTER"        /* Panel is used for data */
    "ISPEXEC DISPLAY PANEL(VSAMCRE1)"       /* translation.           */
    vtype = vtype'ED'                       /* Was done in panel      */

    "ISPEXEC FTOPEN TEMP"
    "ISPEXEC FTINCL VSAMCRES"
    "ISPEXEC FTCLOSE"
    "ISPEXEC VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
/*  "ISPEXEC LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"                    */
/*  "ISPEXEC EDIT DATAID(&DATAID) MACRO(UMODEL)"                      */
/*  "ISPEXEC LMFREE DATAID(&DATAID)"                                  */
    Address TSO "EXECIO * DISKR ZTEMPF (STEM ztempf. FINIS)"
    Address TSO "FREE DD(ZTEMPF)"

    Address TSO "DELETE '"dataset"'"

    Return 0
