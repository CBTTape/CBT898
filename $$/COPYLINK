/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Macro to hit link-edit output (eb. SMP/E output) to generate       */
/* IEBCOPY statements to copy members assembled.                      */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC
    ARG parm#
    Parse SOURCE . . xcmd .
    If parm# Â¬= "" Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    "ISREDIT (member) = MEMBER"
    If member = xcmd Then Do
        gc009 = 'Watch it.. You were just about to cream "'xcmd'".',
                'Try again on a proper dataset/member.'
        "SETMSG MSG(GC009)"
        Exit
    End

    Parse Upper VAR parm# parm#
    jc = 'E'                                /* Job class              */
    mc = 'V'                                /* Message class          */
    "ISREDIT (status) = USER_STATE"
    "ISREDIT RESET"

    "ISREDIT (last) = LINENUM .ZLAST"

    "ISREDIT X ALL"
    "ISREDIT F ALL 'MEMBER NAME '"
    "ISREDIT F ALL 'LOAD LIBRARY'"
    "ISREDIT DEL ALL X"
    uid = Userid()
    bkup= 'BACKUP'
    chgs= 'CHANGES'
    ds# = 0
    ds. = ''
    ml. = ''
    v_c = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||,
          'abcdefghijklmnopqrstuvwxyz' ||,
          '0123456789'                 ||,
          '@#$_'

    tm =,                                   /* Translate matrix       */
        'Original.hlqs   New hlqs',
        '--------------- --------',
        'OS390.TS13.CICS CIX.TS13',
        'SYS0.CICS.R410  CIX.R410',
        ''

    "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 To last
        "ISREDIT (line1) = LINE" i
        i = i+1
        "ISREDIT (line2) = LINE" i
        line1 = Strip(line1)
        line2 = Strip(line2)
        Parse VAR line1 . . member .
        Parse VAR line2 . . dsn .
        nomatch = 1
        Do j=1 To ds#
            If ds.j /= dsn Then Iterate
            nomatch = 0
            Leave
        End
        If nomatch Then Do
            ds# = ds# +1
            ds.ds# = dsn
            j = ds#
        End
        ml.j = ml.j member
    End

    Call instruct_me
    Call build_job
    prog = 'IDCAMS'
    Call build_jcl
    x = nl(Substr('//SYSIN',1,10) 'DD *')
    Do i=1 To ds#
        x = nl('  DELETE' Trans_Matrix(ds.i)'.'chgs)
    End
    x = nl(' ')
    If parm# = 'NEW' Then Do
        Do i=1 To ds#
            x = nl('  DELETE' Trans_Matrix(ds.i)'.'bkup)
        End
    End
    x = nl(' ')
    x = nl('  IF MAXCC < 9 THEN SET MAXCC = 0')
    x = nl('/*')
    x = nl('//*')

    prog = 'IEBCOPY'
    Call build_jcl

    Do i=1 To ds#
        x = nl(Substr('//IN'i,1,10) 'DD DISP=SHR,DSN='ds.i)
        out = Trans_Matrix(ds.i)
        x = nl(Substr('//OUT'i,1,10) 'DD DISP=SHR,DSN='out)
        x = nl(Substr('//OUT'i'B',1,10) 'DD DSN='out'.'bkup',')
        x = nl(Substr('//',1,10) '   DISP=(MOD,CATLG),UNIT=DISK,')
        x = nl(Substr('//',1,10) '   SPACE=(TRK,(30,15,5)),')
        x = nl(Substr('//',1,10) '   DCB=*.OUT'i)
        x = nl(Substr('//OUT'i'C',1,10) 'DD DSN='out'.'chgs',')
        x = nl(Substr('//',1,10) '   DISP=(MOD,CATLG),UNIT=DISK,')
        x = nl(Substr('//',1,10) '   SPACE=(TRK,(30,15,5)),')
        x = nl(Substr('//',1,10) '   DCB=*.OUT'i)
        x = nl('//*')
    End
    x = nl(Substr('//SYSIN',1,10) 'DD *')

    Do i=1 To ds#
        x = nl(' COPY INDD=((OUT'i',R)),OUTDD=OUT'i'B')
        xx = ml.i
        Do Forever
            Parse VAR xx member xx
            x = nl('     SELECT MEMBER='member)
            If xx = '' Then Leave
        End
        x = nl(' ')
        x = nl(' COPY INDD=((IN'i',R)),OUTDD=OUT'i)
        xx = ml.i
        Do Forever
            Parse VAR xx member xx
            x = nl('     SELECT MEMBER='member)
            If xx = '' Then Leave
        End
        x = nl(' ')
        x = nl(' COPY INDD=((IN'i',R)),OUTDD=OUT'i'C')
        xx = ml.i
        Do Forever
            Parse VAR xx member xx
            x = nl('     SELECT MEMBER='member)
            If xx = '' Then Leave
        End
        x = nl(' ')
    End
    x = nl('/*')
    x = nl('//')

get_out:
    "ISREDIT USER_STATE = (status)"
    Exit

Trans_Matrix:
    lp  = Lastpos('.',ds.i)
    hlq = Strip(Substr(ds.i,1,lp-1))
    llq = Strip(Substr(ds.i,lp+1))
    Interpret 'Parse VAR tm "'hlq'" hlq .'
    If hlq /= '' Then out = hlq'.'llq
    Else Do
        Parse VAR ds.i v1 '.' out .
        out = Substr('x',1,Length(v1),'x')'.'out
    End

    Return out

build_job:
    x = nl('//'Substr(Userid()"IEB",1,10)" JOB ,'"xcmd"',")
    x = nl('//             CLASS='jc',COND=(4,LT),')
    x = nl('//             MSGCLASS='mc',')
    x = nl('//             NOTIFY=&SYSUID')
    x = nl('//*')
    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    x = nl('//*MAIN SYSTEM='sysid)
    x = nl('//*')
    Return 0

build_jcl:
    x = nl('//STEP1   EXEC PGM='prog',REGION=2048K')
    x = nl('//SYSPRINT DD SYSOUT=*')
    Return 0

nl:Parse Arg line;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (line)";      Return 0

instruct_me:
    x     = Msg('Off')
    Trace o

    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

    The JCL has been placed in front of the data processed. Being a
    destructive macro there should be no residual data that can cause
    grief if you follow the following steps.

I\  1. Go to the line "//&UID.IEB" and overtype the line number with
       "MD9999" to convert the NOTELINES to data.

    2. Change all the lines that contain "DSN=XXXX." to the correct
       output name. The hlq was changes to "XXXX" as there may be
       similarities in the other qualifiers to the required output
       name. If no "XXXX" found, a match was found in the internal
       translate matrix. Verify courec "OUTn" DDs generated.

    3. Eyeball the JCL and make any fine tuning as required.

    4. Check out DD "OUTnC" which contains all changed members for
       subsequent migration to other LPARS.

    5. Submit it.

    Notes:
    1. Only run JCL once as you will overwrite your backup with the
       new changes copied in previous run.

    2. Do not convert these instructions NOTELINES to data if you
       don't want your job to JCL....

    3. If you want to clear the backup datasets, re-invoke this macro
       with a parameter of "NEW". Because of it's destructive nature
       any JCL turned to data will be deleted.

                            **********

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Trace

    x = nl('//*'Centre('ooo000OOOO000ooo',68,'-')'*')

    "ISREDIT (caps) = CAPS"
    "ISREDIT CAPS = OFF"
    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,2) = 'I\' Then Call eval_subs
        x = nl('//*'Substr(line,3,68)'*')
    End
    "ISREDIT CAPS = (caps)"

    x = nl('//*'Copies('-',68)'*')

errproc:
    Call Off Error
    Return Sigl

eval_subs:
    st = 0
    line = '  'Substr(line,3)
    Do Forever
        st = Index(line,'&',st+1)
        If st = 0 Then Leave
        en = Index(line,'.',st+1)
        If en = 0 Then Leave
        p1 = Substr(line,1,st-1)
        p2 = Substr(line,St+1)
        ic = Verify(p2,v_c)
        If ic = 0 Then Leave
        If Substr(p2,ic,1) /= '.' Then Iterate
        var = Substr(p2,1,ic-1)
        p2  = Substr(p2,ic+1)
        Interpret 'val =' var
        line = p1 || val || p2
    End

    Return 0

