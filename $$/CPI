/******************************** REXX ********************************/
    n_st=mark(2)    /* Mark Start */
/*
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*  CPI: CoPy Index (description)                                     */
/*  This macro is used to document an updated index subset by         */
/*  extracting the description out of the $$$INDEX member and insert  */
/*  the dscription over the line as a NOTELINE.                       */
/*                                                                    */
/*  Use:                                                              */
/*  1. Run INDEX against an existing member which will adde all other */
/*     members to your edit session with '     ' in col 12.           */
/*  2. Delete any unwanted members.                                   */
/*  3. Execute CPI to place comment lines from $$$INJDEX member.      */
/*  4. Use MD9999 line command to conver all NOTELINES to data.       */
/*  5. Isuue command "X '     ' 12 ALL;DEL ALL X" to delete duplicate */
/*     lines with no description.                                     */
/*                                                                    */
/*  Parameters:                                                       */
/*  1. None.                                                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
*/
n_en=mark(-2)   /* Mark End   */
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1
    If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc
    If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me
    Parse Source . . xcmd .;x=$BR(xcmd "??");Return
    Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
    Help_me:Signal Off Syntax;#tr=Trace("o")
    Do i=n_st To n_en;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

No_help_#1:
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm1,parm2,parm3,parm4,parm5,parm6,parm7
    If Word(parm2,2)/='' Then,
         Parse Upper VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7
    If Wordpos(parm1,'HELP H /HELP /H')>0 Then Signal Help_me

    #tr=Trace('O')
    Call parse_parms
    x=Trace(#tr)

    Address ISREDIT;"(status)=USER_STATE";"(dataset)=DATASET"

    dd='EI'Time('s')
    Address TSO "ALLOC F("dd") DA('"dataset"($$$INDEX)') SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    "(line)=LINE .ZFIRST";Parse VAR line membf +11 .
    If membf='¦ Member  ¦' Then Do
        "(line)=LINE 3";Parse VAR line membf +11 .
    End
    "(line)=LINE .ZLAST";Parse VAR line membl +11 .
    "RESET"
    Do i=3 To linei.0
        Parse VAR linei.i memb +11 .
        If memb<membf Then Iterate
        If memb>membt Then Leave
        "F '&MEMB     ' 1 FIRST";If rc/=0 Then Iterate
        "LINE_BEFORE .ZCSR=NOTELINE '"linei.i"'"
    End
    "USER_STATE=(status)"
Exit_before_parameter_parsing: Exit

/******************************* REXX *********************************/
/* Delete these top lines as required. The "parse_parms" are where    */
/* you insert your parameters.                                        */
/* Code between labels "parse_parms" and "err01" are samples.         */
/*                                                                    */
/* DO NOT CHANGE ANYTHING AFTER THE "ERR01:" LABEL,                   */
/*                                                                    */
/**********************************************************************/
    parm#='trace 20-30 C=12'

    zedsmsg=
    x=parse_parms()

    Say 'format=>'format'<'
    Say 'cmdcol=>'cmdcol'<'
    Say 'zfrange=>'zfrange'<'
    Say 'zlrange=>'zlrange'<'
    Say 'all=>'all'<'
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:#tr=Trace('o')
    Parse Upper VAR parm# parm#

    If #tr/='R' Then Do
        #tr=parse_cons('TRACE','R','O')
        If #tr='O' Then #tr=parse_cons('/TR','R','O',3)
    End
    format=parse_cons('/U',0,1,2)
    If format Then format=parse_cons('U',0,1,1)

    cmdcol=0
    cmdcol=parse_varb('C=',cmdcol,'NUM')-2
    xx=parse_varb('X=','?','NUM');If xx='?' Then xx='Invalid parameter'

    all=parse_cons('/A','ALL','NULL')
    If all='' Then all=parse_cons('A','ALL','NULL',1)

    zfrange=parse_cons('-',,'NULL','WORD')
    If zfrange/='' Then Do
        If Datatype(last)/='NUM' Then "ISREDIT (last)=LINENUM .ZLAST"
        Parse VAR zfrange zfrange '-' zlrange
        If zfrange='' Then zfrange=1
        Else If Datatype(zfrange) /= 'NUM' Then Do
                 zedlmsg="Invalid FROM range."
                 Signal err01
             End
        If zlrange='' Then zlrange=last
        Else If Datatype(zlrange) /= 'NUM' Then Do
                 zedlmsg = "Invalid TO range."
                 Signal err01
             End
        If zlrange>last Then zlrange=last
    End

    Parse VAR parm# xx parm#
    If Datatype(xx)='NUM' Then Do
        If xx>last Then xx=last;zfrange=xx;zlrange=xx
    End

    x=Trace(#tr)
    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
