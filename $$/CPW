/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to change passwords accros plexs.                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    If parm# Â¬= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
    cactn = "CANCEL"
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    zerrhm   = '*'
    zerralrm = 'NO'
    zerrsm   = ''
    Parse Upper VAR parm# parm1 parm2

    name = getname('A')
    Parse var name sname '.' cname .
    cname = U2Lower(cname,2)

    hlq = $alkhlq()
    dsn = hlq'.CPW.TEMP1'
    Call Build_panel

    sim = 'N'
    mcl = 'Z'
    uid = Userid()

    #in = 'NON'
    zerrlm = 'Hello' cname'.'
    "SETMSG MSG(ISRZ002)"
    Call set_vars
scr1:
    zcmd = ''
    "ISPEXEC DISPLAY PANEL(CPW1)"
    If rc /= 0 Then Do
        zerrlm = 'Password entry panel abandoned.'
        "SETMSG MSG(ISRZ002)"
        Signal exi1
    End
    If Substr(zcmd,1,2) = Substr('PROMPT',1,2) Then Do
        #in = 'HIGH'
        npw = 'FOOLS3X'
        opw = 'FRED2X'
        Signal scr1
    End

    Address TSO

    Do While plexs /= ''
        Parse VAR plexs sid ',' plexs
        Call build_jcl
        If plexs = '' Then Leave
    End

exi1:
    Address ISPEXEC "LIBDEF ISPPLIB"
    Address TSO "DELETE '"dsn"'"

    Exit

set_vars:
    plexs =,
         '['    ||,
         'A00,' ||,
         'B00,' ||,
         'C00,' ||,
         'E00,' ||,
         'F00,' ||,
         'NID,' ||,
         'NIQ,' ||,
         'NI2,' ||,
         ''

    lpars =,
         'A01 - A00',
         'A02 - A00',
         'A03 - A00',
         'B03 - B00',
         'B04 - B00',
         'C01 - C00',
         'C02 - C00',
         'NIL - C00',
         'VIC - E00',
         'VIK - E00',
         'VIN - E00',
         'VIO - E00',
         'VIP - E00',
         'VIR - E00',
         'VIS - E00',
         'VI2 - E00',
         'F01 - F00',
         'VIB - F00',
         'VID - F00',
         'VIL - F00',
         'VIT - F00',
         'NID - 000',
         'NIQ - 000',
         'NI2 - 000',
         ''

    Return 0


build_JCL:
    'NEWSTACK'
    Queue "//C838704"Substr(i,Length(i),1)" JOB (TPCICS001),'"sid,
          cname"',MSGCLASS="mcl","
    Queue '//         CLASS=A,NOTIFY=&SYSUID,USER='uid','
    Queue '//*        TYPRUN=SCAN,'
    Queue '//         PASSWORD=('opw','npw')'
    Queue '/*ROUTE XEQ' sid
    Queue '//IEFBR14  EXEC PGM=IEFBR14'
    Queue '//SYSPRINT DD SYSOUT=*'
    Queue '//SYSIN    DD DUMMY'
    Queue "ZZ"

    If sim = 'Y' Then Do
        Do j=1 To Queued()
            Parse Pull line
            Say line
        End
    End
    Else "SUBMIT * END(ZZ)"

    'DELSTACK'
    Return 0


Build_panel:

    mempref   = 'CPW'
    subchar.0 = 1
    chgchar.0 = '`'
    forchar.1 = '&'
    #panel1   = 1                           /* First panel number     */
    #panels   = 1                           /* Number of panels       */


    x   = Msg('Off')
    Address TSO
    "DELETE '"dsn"'"
    dd  = 'IA'Time('s')
    "ALLOC DA('"dsn"') NEW CATALOG CYL SPACE(10,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(2)",
       "RECFM(F B) REU"
    "FREE  DA('"dsn"')"

    Do i=#panel1 To #panels
        member = mempref||i
        Interpret "Call make_mem_"i
        Call build_queue
    End


    Address ISPEXEC
    "LIBDEF ISPPLIB DATASET ID('&DSN') STACK"
    Return 0

/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    #i_backup = i
    #j_backup = j
    Do i=n_st To n_en
        Queue Sourceline(i)
    End
    Queue ''
    i = #i_backup
    j = #j_backup

    "ALLOC F("dd") DA('"dsn"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    "DELSTACK"

    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Change string                                                      */
/*--------------------------------------------------------------------*/
cstring:
    PArse ARG string,fstrg,tstrg,rep,start
    Numeric Digits 10
    If rep = '*' Then rep = 9999999999
    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 1
    If Datatype(start) /= 'NUM' | Index(start,'.') > 0 Then start = 1
    fl = Length(fstrg)
    tl = Length(tstrg)
    Do While rep > 0
        start = Index(string,fstrg,start)
        If start = 0 Then Leave
        string = Delstr(string,start,fl)
        string = Insert(tstrg,string,start-1,tl)
        rep = rep -1
        start = start + tl
    End
    Return string

/*--------------------------------------------------------------------*/
/* Get name from ACEE control block (imported from REXX '$getname' for*/
/* self containment).                                                 */
/*--------------------------------------------------------------------*/
getname:
    Parse Upper Arg parm#
    ascb = Storage('224',4)
    asxb = Storage(d2x(c2d(ascb)+x2d('6c')),4)
    acee = Storage(d2x(c2d(asxb)+x2d('c8')),4)
    nam@ = Storage(d2x(c2d(acee)+x2d('64')),4)
    name = Storage(c2x(nam@),30)
    len  = c2d(Substr(name,1,1))
    name = Substr(name,2,len-1)
    If parm# /= 'A' Then
        name = U2Lower(name,2)
    Return name

/*--------------------------------------------------------------------*/
/* Convert upper to lower (imported from REXX routine 'lower' for     */
/* self containment).                                                 */
/*--------------------------------------------------------------------*/
U2Lower:
    ARG text,pos,rep
    lc = 'abcdefghijklmnopqrstuvwxyz'
    uc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 99999
    If Datatype(pos) /= 'NUM' | Index(pos,'.') > 0 Then pos = 2
    rname = ''
    Do i=rep by -1 To 1
        Parse VAR text name text
        If pos > 1 Then Do
            pref = Substr(name,1,pos-1)
            suff = Substr(name,pos)
        End
        Else Do
            pref = ''
            suff = name
        End
        suff = Translate(suff,lc,uc)
        rname = rname pref || suff
        If text = '' Then Leave
    End
    Return Strip(rname text)

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(2)
/*
)ATTR
  _ TYPE(Input) INTENS(HIGH) HILITE(USCORE)
  @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)
  ~ TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)  SKIP(ON)
  # TYPE(INPUT) INTENS(&#IN)
  ` AREA(DYNAMIC)
  [ TYPE(DATAIN)  COLOR(RED)    INTENS(HIGH) HILITE(USCORE) CAPS(ON)
  ] TYPE(DATAOUT) COLOR(BLUE)   intens(low)  CAPS(OFF) SKIP(ON)
)BODY EXPAND(\\)
@\-\ Password change entry panel \-\
%&SID ===>_ZCMD
%
+Enter password parameters below:
+
+  Old password%===>#OPW     ~<=
+  New password%===>#NPW     ~<=
+
+Simulation run%===>_Z~<=    @Y+or@N+.
+Message class %===>_Z~<=    +Suggest@Z+so cannot be read by others under SDSF
+
+Plexes/LPARS:
`PLEXS                                                                         `
+
+
+Use@END+PF key to abandon processing
)INIT
  &SID = &ZSYSID
  .ZVARS = '(SIM,MCL)'
)PROC
 VER(&OPW,NB,NAME)
 VER(&NPW,NB,NAME)
 VER(&SIM,NB,LIST,Y,N)
 VER(&MCL,NB,LIST,A,X,Z)
)END
*/
    n_en = mark(-2);Return 0

