/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* CRMEMB: This function is used to indicate duplicate datasets       */
/*         between multiple datasets (usually > 2 otherwise use       */
/*         'MM').                                                     */
/*                                                                    */
/*         The routine is designed to act on JCL, with dataset names  */
/*         being extracted from 'DSN=...' and an optional             */
/*         'VOL=SER=...' parameter.                                   */
/*                                                                    */
/* For further details go to bottom of this member or invoke with the */
/* '?' parameter.                                                     */
/*--------------------------------------------------------------------*/
CRMEMB:crmemb_ver='2.04'
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zerrhm='*';zerralrm='NO';zerrsm=
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    jnd=Mvsvar(Symdef,'JESNAME')
    vjnd=Strip(Translate($alkrsid(sysid),',','/'),,',')

    hardcopy=1                              /* Default hard copy      */
    dxc='A';l_dxc=Mark(0)                   /* Default SS exec class  */
    Parse Upper VAR parm# parm#
    If Wordpos('/SS',Translate(parm#))>0 Then Do
        s_s=1;parm#=Delword(parm#,Wordpos('/SS',Translate(parm#)),1)
    End;Else s_s=0
    If Wordpos('/VR',Translate(parm#))>0 Then Do
        v_report=1;parm#=Delword(parm#,Wordpos('/VR',Translate(parm#)),1)
    End;Else v_report=0
    If Wordpos('/VRM',Translate(parm#))>0 Then Do
        v_report=1;parm#=Delword(parm#,Wordpos('/VRM',Translate(parm#)),1)
        m_report=1
    End;Else m_report=0
    If Wordpos('/HC',Translate(parm#))>0 Then Do
        hardcopy=1;parm#=Delword(parm#,Wordpos('/HC',Translate(parm#)),1)
    End
    If Wordpos('/SC',Translate(parm#))>0 Then Do
        hardcopy=0;parm#=Delword(parm#,Wordpos('/SC',Translate(parm#)),1)
    End
    If Wordpos('/XA',Translate(parm#))>0 Then Do
        jnd=;parm#=Delword(parm#,Wordpos('/XA',Translate(parm#)),1)
    End
    If Index(parm#,'/HLQ(')>0 Then Do
        Parse var parm# p1 '/HLQ(' spref ')' p2
        parm#=Space(p1 p2)
        If $vername(spref,'N')/='OK' Then spref=Sysvar(syspref)
    End
    Else Do
        If ima_macro Then Do
            "ISREDIT (dsni)=DATASET";PArse VAR dsni spref '.' .
        End
        Else spref=Sysvar(syspref)
    End
    Parse VAR parm# parm1 parm2 parm3 parm4 parm5 parm6
    Parse Source . . xcmd .
    "VGET (CRMEMAC#) SHARED"
    If crmemac#='1' Then Signal macro_1
    If crmemac#='2' Then Signal macro_2
    If crmemac#='3' Then Signal macro_3
    If crmemac#='4' Then Signal macro_4

    v1='def_ex def_hd def_ac def_bb def_vm def_ti'
    Interpret "Parse Value $alkjc(v1) With" v1

    If Hardcopy Then mcl=def_hd;Else mcl=def_bb
    bbc=def_bb
    vmcl=def_vm                             /* SET TO 'X' FOR DEBUG   */
    cl=def_ex                               /* Class                  */

    jtime='TIME='def_ti','                  /* Jobcard TIME parameter */
    parm3=trace
    "VPUT (PARM3) SHARED"
    userid=Userid()
    clist1=$alkhlq()'.'$alkllqr()
    edjcl='Y'
    ispfprof='ISPFPROF'

    crvars="CRMEMV1 CRMEMV2 CRMEMPDS CRMEMMEM CRMEMTYP "||,
           "CRMEMP0 CRMEMP0E CRMEMP1 CRMEMP1E CRMEMP2 "||,
           "CRMEMDS1 CRMEMDS2  ACCT CRSAYDSN"
/*  "VGET (crvars) PROFILE"                                           */
    "VGET ("crvars") PROFILE"

    Signal on Syntax Name $alkacct_error
    acct=$alkacct()
$alkacct_error:
    Signal on Syntax Name error_off_$ALKUVOL
    uvoltb="UNIT=SYSDA";uvolpb="UNIT=SYSALLDA"
    uvoltb=$ALKUVOL('$ZTEMPF',,'J');uvolpb=$ALKUVOL('SMS',,'J')
error_off_$ALKUVOL:Signal off Syntax
    If uvoltb/='' Then uvoltb=uvoltb','
    If uvolpb/='' Then uvolpb=uvolpb','

    If Wordpos(Word(parm#,1),'? /? HELP /HELP /H')>0 Then Do
        "ISREDIT (memb)=MEMBER"
        x=Help_me();Exit
    End

    progname='XR-CRMEMB';re1=;re2=
    If ima_macro Then Do
        Address ISREDIT
        "(CRMEMPDS)=DATASET";"(re1)=LINENUM .ZLAST";re1=re1+0;re2=re1
        "(CRMEMMEM)=MEMBER";progname='XR-'crmemmem
        crmempds="'"crmempds"'";crmemtyp=1
        "(lev)=MACRO_LEVEL"
        If lev>1 Then Do
            Parse VAR parm# crmemp0 ',' crmemp0e ',' lcmd parm#
        End
        Else Do
            "PROCESS RANGE C";"(cmd)=RANGE_CMD"
            If cmd='C' Then Do
               "(crmemp0)=LINENUM .ZFRANGE";"(crmemp0e)=LINENUM .ZLRANGE"
            End
            Else Do
                crmemp0=1;crmemp0e=re1
            End
        End
        If v_report Then Signal Verify_report
        crmemp0=crmemp0+0;crmemp1=crmemp0
        crmemp0e=crmemp0e+0;crmemp1e=crmemp0e
        If parm1=2 Then Do
            "(line)=LINE" crmemp0
            Parse VAR line 'DSN=' crmemds1
            If crmemds1='' Then Parse VAR line 'DSNAME=' crmemds1
            Parse Value Translate(crmemds1,' ',',') With parm1 .
            parm1="'"parm1"'"
            Parse VAR line 'SER=' crmemv1
            If crmemv1='' Then Parse VAR line 'VOLUME=' crmemv1
            Parse Value Translate(crmemv1,'  ',',.') With zdlvol .
            Address ISPEXEC "VPUT ZDLVOL SHARED"
            "(line)=LINE" crmemp0+1
            Parse VAR line 'DSN=' crmemds2
            If crmemds2='' Then Parse VAR line 'DSNAME=' crmemds2
            Parse Value Translate(crmemds2,' ',',') With crmemds2 .
            crmemds2="'"crmemds2"'"
            Parse VAR line 'SER=' crmemv2
            If crmemv2='' Then Parse VAR line 'VOLUME=' crmemv2
            Parse Value Translate(crmemv2,'  ',',.') With crmemv2 .
            crmemtyp=2
        End
        Address
    End
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(progname);If x/='' Then progname=x
error_off_alkjcpg:Signal off Syntax

    If crmemtyp=1 Then Do
        vol11=crmemv1;vol12=crmemv2
    End
    Else Do
        vol21=crmemv1;vol22=crmemv2
    End

    If parm1/='' Then Do
        crmemds1=parm1
        "VGET ZDLVOL SHARED";If zdlvol/='' Then vol21=zdlvol
        crmemtyp=2;csr1="CRMEMDS2"
    End

scr1:
    zcmd=
    "DISPLAY PANEL(CRMEMBP) CURSOR(&CSR1)"
    If rc/=0 Then Exit
    If Wordpos(Word(zcmd,1),'? /? HELP /HELP /H')>0 Then Do
        x=Help_me();Signal scr1
    End
    csr1="ZCMD"

    If zcmd="TRACE" Then Do
        If parm="OFF" Then Do;trace=;Trace Off;End
        Else Do;trace="Y";Trace r;End
        Signal scr1
    End

    If zcmd="SW" Then Do
        xx=crmemds1 vol21
        crmemds1=crmemds2;vol21=vol22
        Parse VAR xx crmemds2 vol22
        zerrlm='Datasets swapped.'
        Signal scrm
    End

    If Substr(crmempds,1,1)="'" Then #rmempds=Strip(crmempds,,"'")
    Else #rmempds=spref'.'crmempds

    If crmemtyp=1 | zcmd="E" Then Do
        dataset=#rmempds
        If Sysdsn("'"dataset"'")/="OK" Then Do
            zerrlm="Dataset not found.";csr1="CRMEMPDS"
            Signal scrm
        End

        If zcmd='' | zcmd="EDIT" Then Do
            dataset=#rmempds"("crmemmem")"
            If Sysdsn("'"dataset"'")/="OK" Then Do
                zerrlm="Member not found.";csr1="CRMEMMEM"
                Signal scrm
            End
            If crmemp0>crmemp0e Then Do
                zerrlm="End must be equal to or greater than start."
                csr1="CRMEMP0E"
                Signal scrm
            End
            If crmemp1>crmemp1e Then Do
                zerrlm="End must be equal to or greater than start."
                csr1="CRMEMP1E"
                Signal scrm
            End
            If \ima_macro Then Do
                "VPUT (CRMEMP0E CRMEMP1E) SHARED"
                crmemac#='3';"VPUT (CRMEMAC#) SHARED"
                "EDIT DATASET('&DATASET') MACRO("xcmd")"
                zerrsm=
                "VGET (rc csr1) SHARED"
            End
            Else Call macro_3e
            If rc/=0 Then Signal scr1
        End
    End
    If Wordpos(zcmd,'E V')>0 Then Do
        "VPUT (CRMEMPDS CRMEMMEM) PROFILE"
        If crmemmem/='' Then x='('crmemmem')';Else x=
        If zcmd='V' Then act='VIEW';Else act='EDIT'
        act "DATASET('&DATASET&X')"
        Signal scr1
    End
    If zcmd="B" Then Do
        "VPUT (CRMEMPDS CRMEMMEM) PROFILE"
        "BROWSE DATASET('&DATASET')"
        Signal scr1
    End
    If zcmd='' | zcmd="EDIT" | zcmd="X1" | zcmd="X2" Then Do
        If crmemv1/='' & zcmd/="X2" Then Do
            x=Listdsi("'SYS1.LINKLIB' VOLUME("crmemv1")")
            If sysreason=22 Then Do
               zerrlm="Volume '"crmemv1"' not mounted or "||,
                      "defined to the system."
               csr1="VOL"crmemtyp"1"
               Signal scrm
            End
        End
        If crmemv2/='' & zcmd/="X1" Then Do
            x=Listdsi("'SYS1.LINKLIB' VOLUME("crmemv2")")
            If sysreason=22 Then Do
               zerrlm="Volume '"crmemv2"' not mounted or "||,
                      "defined to the system."
               csr1="VOL"crmemtyp"2"
               Signal scrm
            End
        End
    End
    If crmemtyp=2 | zcmd="X1" | zcmd="X2" Then Do
        If Substr(crmemds1,1,1)="'" Then #rmemds1=Strip(crmemds1,,"'")
        Else #rmemds1=spref"."crmemds1
        If Substr(crmemds2,1,1)="'" Then #rmemds2=Strip(crmemds2,,"'")
        Else #rmemds2=spref"."crmemds2
        If crmemv1/='' Then volser="VOLUME("crmemv1")";Else volser=
        If #rmemds1||crmemv1 = #rmemds2||crmemv2 Then Do
            zerrlm="Seccond dataset cannot be the same as the first."
            csr1="CRMEMDS2"
            Signal scrm
        End
        If zcmd="" | zcmd="X1" Then Do
            "LMINIT DATAID(DATA1) DATASET('&#rmemds1') &VOLSER"
            If rc/=0 Then Do
                zerrlm="Data "crmemds1" not found."
                csr1#="CRMEMDS1"
                Signal scrm
            End
            If zcmd="X1" Then Do
                Signal On Error Name err1
                csr1#="CRMEMDS1"
                "&ACTION DATAID(&DATA1)"
                Signal Off Error
                "LMFREE DATAID(&DATA1)"
                Signal scr1
            End
            "LMFREE DATAID(&DATA1)"
        End
        If crmemv2/='' Then volser="VOLUME("crmemv2")";Else volser=
        If zcmd='' | zcmd="X2" Then Do
            "LMINIT DATAID(DATA1) DATASET('&#rmemds2') &VOLSER"
            If rc/=0 Then Do
                zerrlm="Data "crmemds2" not found."
                csr1="CRMEMDS2"
                Signal scrm
            End
            If zcmd="X2" Then Do
                Signal On Error Name err1
                csr1#="CRMEMDS2"
                "&ACTION DATAID(&DATA1)"
                Signal Off Error
                "LMFREE DATAID(&DATA1)"
                Signal scr1
            End
            "LMFREE DATAID(&DATA1)"
        End
    End
    "VPUT (crvars) PROFILE"
    "VPUT ("crvars") PROFILE"

    If ima_macro Then Do
        "ISREDIT (xx)=DATA_CHANGED"
        If xx="YES" Then "ISREDIT SAVE"
    End
    sysuid=userid
    ispfsite='BISPENV'
    def_id=$alkjc('def_id')
    If s_s Then id=dxc;Else id=def_id       /* Unique JOB id          */
    If jnd/='' Then xeq='/*XEQ' jnd;Else xeq='//*XEQ n/a'

    "FTOPEN TEMP";"FTINCL CRMEMBS";"FTCLOSE";"VGET ZTEMPF"

    sep=Left('//*',70,'-')'*'
    If hardcopy Then np='NP';Else np=
    Address TSO "NEWSTACK";dd='CR'Time('s')
    Call batchisp 'NJ NS NU QUEUE' np
    Queue ' ISPSTART CMD(%FINDIT)';Queue '/*'
    Queue '//*';Queue sep;Queue ''
    Pull line                               /* And discard            */
    Address TSO "ALLOC DD("dd") DS('"ztempf"') OLD REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "EXECIO * DISKW "dd" (STEM linei.)"
    Address TSO "EXECIO * DISKW "dd" (FINIS)"

    If edjcl="Y" | zcmd="EDIT" Then Do
        Address TSO "ALLOC DD("dd") DS('"ztempf"') OLD REU"
        "LMINIT DATAID(DATAID) DDNAME("dd")"
        crmemac#='4';"VPUT (crmemac#,hardcopy,mcl,bbc) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd")"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD("dd")"
    End
    tempsub=ztempf
    "VPUT (tempsub) SHARED"
    Address TSO "%TEMPSUB"
    rc1=rc
    "VGET (message) SHARED"
    zerrsm=;zerrlm=message;csr1=
    Signal scrm

err1:
    rc1=rc
    Signal Off Error
    If rc>4 Then Do
        "SETMSG MSG(ISRZ002)"
        csr1=csr1#
    End
    Return 0

scrm:
    "SETMSG MSG(ISRZ002)"
    Signal scr1

/*--------------------------------------------------------------------*/
/* Verify if CRMEMB has been executed against members in the dataset  */
/* (usually viewing/editting some for of "index").                    */
/*--------------------------------------------------------------------*/
Verify_report:
    "(status)=USER_STATE"
/*  "RESET"                                                           */
    Do i=crmemp0 To crmemp0e
        "(line)=LINE" i;Parse var line  . . dsnq .
        del=Substr(line,1,1);memb=Substr(line,2,8)
        If $vername(memb,'N')/='OK' Then Iterate
        If m_report then dsn=spref".$XREF.PROGRAM.CICSALL("Strip(memb)")"
        Else dsn=spref".$XREF.PROGRAM."Strip(memb)
        If Sysdsn("'"dsn"'")='OK' Then Do
            If dsnq/=dsn Then Do
                linex=del||Left(memb,8) del Left(dsn,44)'/V  -'
                "LINE_BEFORE" i"=NOTELINE (linex)"
            End
        End
    End

    "USER_STATE=(status)";Exit

/*--------------------------------------------------------------------*/
/* Self invoked a macro #1 for source out of JCL format               */
/*--------------------------------------------------------------------*/
macro_1:
    crmemac#=;"VPUT (crmemac#) SHARED"
    "VGET (crvars) PROFILE"
    "VGET ("crvars" parm3) PROFILE"
    If Wordpos('TRACE',crmemp1 crmemp2 parm3)>0 Then Do
        Trace R;trace="TRACE"
    End
    If crmemp1="TRACE" Then crmemp1=

    "ISREDIT (last)=LINENUM .ZLAST"
    last#=last
    If trace="TRACE" Then xtra=1;xtra=0
lop11:
    lin#=1
    Do While lin#¬>last
        "ISREDIT (LINE) = LINE &LIN#"
        Say Right(lin#,3)") "line
        lin#=lin#+1
    End
    Say ' '
    lin#=crmemp0
    If crmemv1/='' Then volsers1="VOLUME("crmemv1")";Else volsers1=
    If crmemv2/='' Then volsers2="VOLUME("crmemv2")";Else volsers2=
    v1=crmemp0e+0
con11:
/*  v1=(crmemp0e-crmemp0)+1                                           */
    Do While lin#¬>last
        fnd=0;nfnd=0
        "ISREDIT (line)=LINE &LIN#"
        Parse VAR line 'DSN=' dsn1 .
        If dsn1='' Then Parse VAR line 'DSNAME=' dsn1 .
        If Substr(line,1,3)='//*' Then Do
            If dsn1/='' Then Say lin#'/'v1' W - Bypassing comment "'line'"'
            lin#=lin#+1;If lin#>crmemp0e Then lin#=last+1
            Iterate
        End
        If dsn1='' Then Say lin#"/"v1" No 'DSN=' found."
        Else Do
          Parse VAR dsn1 dsn1 ',' .
          Parse VAR line 'VOL=SER=' vol .
          If vol='' Then Parse VAR line 'VOL=' vol .
          If vol='' Then Parse VAR line 'VOLUME=' vol .
          Parse VAR vol vol ','
          If vol/='' Then volser1=vol;Else volser1=volsers1
          Say lin#"/"v1" Source = '"dsn1"' "volser1
          x=Listdsi("'"dsn1"'" volser1 "DIRECTORY NORECALL SMSINFO")
          If sysmembers=0 Then Do
              Say "             No members, bypassing."
              rc=4
          End
          Else Do
              "LMINIT DATAID(DATA1) DATASET('&DSN1') &VOLSER1"
              If rc/=0 Then,
                  Say "             E - LMINIT (1) '"dsn1"'"
          End
          If rc/=0 Then Nop
          Else Do
            If crmemp2="HITS" Then Do
                If crmemp1>lin# Then lin@=crmemp1;Else lin@=lin#+1
            End
            Else lin@=crmemp1
            "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
            Do While lin@¬>last
                If crmemv1='' Then slin@=lin@;Else slin@=lin#+1
                If slin@=lin# Then,
                      Say "    "Right(lin@,3)") Ignoring  '"dsn2"' "volser2
                Else Do
                    "ISREDIT (line) = LINE &LIN@"
                    Parse VAR line 'DSN=' dsn2 .
                    If dsn2='' Then Parse VAR line 'DSNAME=' dsn2 .
                    If Substr(line,1,3)='//*' Then Do
                        If dsn2/='' Then,
                            Say '    'Right(lin@,3)')',
                                'W - Bypassing com "'line'"'
                        lin@=lin@+1;If lin@>crmemp1e Then lin@=last+1
                        Iterate
                    End
                    If dsn2='' Then Say "    "Right(lin@,3)") No 'DSN=' found."
                    Else Do
                      Parse VAR dsn2 dsn2 ',' .
                      Parse VAR line 'VOL=SER=' vol .
                      If vol='' Then Parse VAR line 'VOL=' vol .
                      If vol='' Then Parse VAR line 'VOLUME=' vol .
                      Parse VAR vol vol ','
                      If vol/='' Then volser2=vol;Else volser2=volsers2
                      Say "    "Right(lin@,3)") Comparing '"dsn2"' "volser2
                      If dsn2=dsn1 Then Do;lin@=lin@+1;Iterate;End
                      x=Listdsi("'"dsn2"'" volser2 "DIRECTORY NORECALL SMSINFO")
                      If sysmembers=0 Then Do
                          Say "             No members, bypassing."
                          lmrc=4
                      End
                      Else Do
                          "LMINIT DATAID(DATA2) DATASET('&DSN2') &VOLSER2"
                          lmrc=rc
                          If lmrc/=0 Then Do
                              member=
                              Say "             E - LMOPEN (2) '"dsn2"'"
                          End
                      End
                      If lmrc/=0 Then Nop
                      Else Do
                        "LMOPEN DATAID(&DATA2) OPTION(INPUT)"
                        If rc/=0 Then Do
                            Say '         E -',
                                'Cannot open dataset RC='rc'.',
                                'Authority? Look at log if not to bit-bucket.'
                            lin@=lin@+1;If lin@>crmemp1e Then lin@=last+1
                            Iterate
                        End
                        sub=1
                        Do While lmrc=0
                            "LMMLIST DATAID(&DATA1) OPTION(LIST) "||,
                                 "MEMBER(MEMBER) STATS(NO)"
                            lmrc=rc
                            If lmrc=0 Then Do
                              member=Strip(member)
                              "LMMFIND DATAID(&DATA2) MEMBER(&MEMBER)"
                              rc1=rc
                              If rc1/=0 Then Do
                                  suff="Not found";nfnd=nfnd+1
                              End
                              Else Do
                                  suff="*** Found ***";fnd=fnd+1
                              End
                              sub=Right(sub,5,' ')
                              write=
                              If crsaydsn='N' Then dsnmemb=member
                              Else dsnmemb="'"dsn2"("member")'"
                              If crmemp2="HITS" Then,
                                  If rc1=0 Then write=,
                                      "             "sub dsnmemb
                                  Else Nop
                              Else If crmemp2="MISS" Then,
                                       If rc1/=0 Then write=,
                                         "             "sub dsnmemb
                                       Else Nop
                                   Else write=,
                                         "             "sub dsnmemb
                              If write/='' Then Do
                                  If Length(write)<56 Then,
                                      write=Left(write,56,' ')
                                  Say write suff
                              End
                              sub=sub+1
                            End
                        End

                        "LMCLOSE DATAID(&DATA2)";"LMFREE DATAID(&DATA2)"

                        "LMMLIST DATAID(&DATA1) OPTION(FREE)"
                        member=
                      End
                    End
                End
                lin@=lin@+1;If lin@>crmemp1e Then lin@=last+1
            End
            "LMCLOSE DATAID(&DATA1)";"LMFREE DATAID(&DATA1)"
          End
        End
        lin#=lin#+1;If lin#>crmemp0e Then lin#=last+1
        tot=fnd+nfnd
        Say " Of "tot" members, "fnd" were found and "nfnd" were NOT found."
        Say " "
    End
exm1:
    "ISREDIT CANCEL"
    Exit

/*--------------------------------------------------------------------*/
/* Self invoked a macro #2 for datasets / volumes defined in panel    */
/* Note:                                                              */
/* This feature is obsolete if you have access to the 'MM' routine and*/
/* you should have as it is a feature of macro #1.                    */
/*--------------------------------------------------------------------*/
macro_2:
    crmemac#=;"VPUT (CRMEMAC#) SHARED"
    "VGET (crvars) PROFILE"
    "VGET ("crvars" parm3) PROFILE"
    If Wordpos('TRACE',crmemp1 crmemp2 parm3)>0 Then Do
        Trace R;trace="TRACE"
    End
    If crmemp1="TRACE" Then crmemp1=

    "ISREDIT (last)=LINENUM .ZLAST"
    fnd=0;nfnd=0

    If trace="TRACE" Then xtra=1;Else xtra=0
    If crmemv1/='' Then volsers1="VOLUME("crmemv1")";Else volsers1=
    If crmemv2/='' Then volsers2="VOLUME("crmemv2")";Else volsers2=
    Say " 001/001 Source = '"crmemds1"'" volsers1
    "LMINIT DATAID(DATA1) DATASET('&CRMEMDS1') &VOLSERS1"
    If rc/=0 Then Do
        lin@=last+1
        Say "             E - LMINIT (1) '"crmemds1"'"
        Signal exi1
    End

    lin@=crmemp1
    "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    Say "      "lin@") Comparing '"crmemds2"'" volsers2
    "LMINIT DATAID(DATA2) DATASET('&CRMEMDS2') &VOLSERS2"
    lmrc=rc
    If lmrc/=0 Then Do
        Say "             E - LMOPEN (2) '"crmemds2"'"
        Signal exi1
    End

    "LMOPEN DATAID(&DATA2) OPTION(INPUT)"
    sub=1
    Do while lmrc=0
        "LMMLIST DATAID(&DATA1) OPTION(LIST) "||,
            "MEMBER(MEMBER) STATS(NO)"
        lmrc=rc
        If lmrc=0 Then Do
          member=Strip(member)
          "LMMFIND DATAID(&DATA2) MEMBER(&MEMBER)"
          rc1=rc
          If rc1/=0 Then Do
              suff="Not found";nfnd=nfnd+1
          End
          Else Do
              suff="*** Found ***";fnd=fnd+1
          End
          sub=Right(sub,5,' ')
          write=
          If crmemp2="HITS" Then,
              If rc1=0 Then write=,
                      "             "sub" '"crmemds2"("member")'"
              Else Nop
          Else If crmemp2="MISS" Then,
                   If rc1/=0 Then write=,
                      "             "sub" '"crmemds2"("member")'"
                   Else Nop
               Else write=,
                      "             "sub" '"crmemds2"("member")'"
          If write/="" Then Do
              write=Left(Substr(write,1,56),56,' ')
              Say write suff
          End
          sub=sub+1
        End
    End

    "LMCLOSE DATAID(&DATA2)";"LMFREE DATAID(&DATA2)"

    "LMMLIST DATAID(&DATA1) OPTION(FREE)"
    "LMCLOSE DATAID(&DATA1)";"LMFREE DATAID(&DATA1)"
    tot=fnd+nfnd
    Say "Of "tot" members, "fnd" were found and "nfnd" were not found.."
    Say " "
exm2:
    "ISREDIT CANCEL"
    Exit

/*--------------------------------------------------------------------*/
/* Self invoked a macro #3                                            */
/*--------------------------------------------------------------------*/
macro_3:
    crmemac#=;"VPUT (CRMEMAC#) SHARED";"VGET (CRMEMP0E CRMEMP1E) SHARED"
macro_3e:
    "ISREDIT (last)=LINENUM .ZLAST"
    rc1=0
    If crmemp0e>last Then Do
        zerrlm="Source end pointer greater than lines in member "||,
               "("last")."
        csr1="CRMEMP0E"
        rc1=4
        Signal exm3
    End
    If crmemp1e>last Then Do
        zerrlm="Dest. end pointer greater than lines in member "||,
               "("last")."
        csr1="CRMEMP1E"
        rc1=4
    End
exm3:
    If xamac='Y' Then Return
    "VPUT (rc csr1) SHARED"
    If rc1>0 Then "SETMSG MSG(ISRZ002)"
    Return 0

/*--------------------------------------------------------------------*/
/* Self invoked a macro #4 to put instructional notelines             */
/*--------------------------------------------------------------------*/
macro_4:
    crmemac#=;"VPUT (crmemac#) SHARED"
              "VGET (hardcopy,mcl,bbc) SHARED"
    hc_msg='HARDCOPY='hardcopy '- 1=Hard copy, 0=Soft Copy'
    If mcl=bbc Then out_msg='Output is to the bit-bucket.',
                            'How you going to debug?'
    Else out_msg=
n_st=mark(2)                                /* Mark next line         */
/*

    This is the JCL that has been generated from the parameters you
    have supplied. Use END PF Key to submit job
            - OR -
    delete all the lines or enter DONTSUB/KS to abandon submission.

    Notes:
      &HC_MSG.
      &OUT_MSG.
*/
n_en=mark(-2)                               /* Mark prev 2 line       */
    dl1='.ZFIRST';If ima_macro Then Address ISREDIT

Say_it_2_me:
    chgchar='&'
    If ima_macro Then Do;"(caps)=CAPS";"CAPS=OFF";End
    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(Substr(line,1,72))
    End
    x=nl_h('*'Copies('-',70)'*')
    If ima_macro Then Do;"CAPS=(caps)";Address;End

    Return 0

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE" dl1"=NOTELINE (n#)";Else Say n#;Return 0
Mark:Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

Help_me:
n_st=mark(2)                                /* Mark next line         */
/*

 CRMEMB: [ &CRMEMB_VER. ] Cross Reference MEMbers

 This facility has been developed to perform member list comparisons
 between three or more PDS's. (For 2 datasets, use MM direct).

 Volsers must be supplied if the datasets are not catalogued on the
 executing system.

 The routine is designed to act on expanded JCL (or an extract), and
 dataset names will be extracted from 'DSN=...' and an optional
 'VOL=SER=...' JCL parameters.

 If the JCL is a procedure, contains INCLUDE statements or JCL
 variables, some or all of the following routines will need to be
 executed first:
   C3      - CICS 3rd. party analyser.  Even if the JCL is not a CICS
             job, this routine does extensive variable substitutions
             and expansions of procedures.
   C3I     - Supplement to the "C3" command and will expand and JCL
             'INCLUDE' parameters.
   SYMSUB /A {/L}
           - Performs variable substitutions that may be introduced by
             the expansion of include statements.  Use the '/L'
             parameter to for varible assignment searches from the last
             card up (as would be performed by an instream PROC with
             variable assignments below the "PEND" command.
             Note: If you use combinations of trailing PROC variables
                   and top of JCL "SET" commands, you may not get the
                   right results (after all this is not an expensive
                   JCLCHECK).
 No goto GOTCHA #3.

 Data may be entered via a parameter PDS(member) or direct from screen
 input.

 This routine will compare the member list of the source datasets one by
 one with the member list of the destination datasets. A report will be
 generated on all the HITS, MISSES or BOTH (depending on option entered
 in the input panel.

 The parameter file must have a dataset on each line prefixed by DSN. If
 the dataset is not catalogued, you may indicate the volser by supplying
 a VOL=SER=volume as the next parameter on the line. The dataset name
 and volser may be seperated by space(s) or a comma. This data may be
 standard JCL, eg. DD concatenations.
 (At this stage both the 'DSN=' and 'VOL=SER=' statements must be on the
 same line.  If they are not, you will have to doctor the JCL
 accordingly.  The line does not have to be syntactically correct, but
 dataset must be prefixed by 'DSN=' and the volume by 'VOL=SER='
 literals for processing/parsing purposes.)

 You must specify the start line number of the source dataset and the
 end line number along with the start and end of the destination
 datasets. If only one dataset is desired both the start and end line
 numbers should be the same.  You may also specify a source and a
 destination volser. However, this will expect all source and all the
 destination datasets to be on the specified disks. Any in stream
 VOL=SER= parameter will overwrite the supplied one for processing that
 dataset.

 You can use the ISPF block command "CC" to select the start and end
 range for comparisons.  The default is all lines.

 It is not recommended that source and destination ranges overlap unless
 either a converse perspective is required or you are comparing datasets
 on different volumes.  However, if there is overlap and/or a lot of
 datasets processed, expect lengthy batch execution times (several
 hours).

 Be aware of output limitations. There is a limit to batch TSO displays
 (?  value).

 You may edit the data dataset, under part 1, by entering E on the
 command line.  A member list is provided unless the member is enterd.

 Enter EDIT on the command line to edit the JCL generated prior to
 submission.  You may wish to do this to change message classes etc...
 (This may not be necessary as some sites may automatically present the
 JCL and not have it optional.)

 You may enter R in either the source or destination dataset or volsers
 to repeat the alternative to minimise typing and possible errors.

 The parameter input screen has a field SYSAFF.  Use this if you want
 to restrict execution in a MAS otherwise leave asis for current
 JESNODE.

 (Note: Part 2 is obsolete if you have access to "MM".)
 You may browse or edit either the source or destination datasets, under
 part 2, by entering B1, B2, E1 or E2 respectively on the command line.

 You may enter SW on the command line to swap the two dataset positions
 in Part 2.

 GOTCHA's:
 ---------
 1. Watch the output class (for JCL messages). Usually the default is
    the bit-bucket ('&B.') rather than held ('&H.').  If you JCL or get
    security violation messages (which can only be guessed in the
    report), you won't be able to debug without output so change the
    class as per above in the parameter entry screen (2nd. last line, or
    there abouts).
 2. $ALKJC (and associated sub-routines) will allocate a unique jobid
    suffix to permit concurrent report execution.  If cycles are an
    issue, use parameter '/SS' to single stream.
 3. CRMEMB only works on a permanent saved member of a PDS being
    processed  (or member details manually input after issuing a 'TSO
    CRMEMB' command) and not a mirror image. If you use a fancy-shmancy
    routine (like C3, C3I and/or SYMSUB) which create temporary
    sequential dataset, it/they must be copied into a PDS member (try
    using a combination of IMP/EXP to get it into a valid PDS member).
 4. In a MAS, pay attention to the SYSAFF parameter entry to ensure you
    get what you want.  Sometimes WLM gets it's hooks in and it's hard
    to create generic work arounds.  You may need to fifddle with the
    'JOBPARM' parameter (especially on a JES3 system).
 5. Watch here for further Gotchas.....

 Parameters:
 ----------------------
 The following are permissable Invocation parameters:
   Keyword:
     /HC      - Hard Copy.  Will generate output to output dataset
                  'syspref.$XREF.PROGRAM.member'
                Where -
                  syspref   - Sytem prefix allocated to your profile
                  member    - Name of member (usually the CICS region
                              name or JCL member name) used for dataset
                              name 'lists'.
                Name generated would be:
                  '&SPREF..$XREF.PROGRAM.&MEMB.'

                Use this command if the site default is "Soft Copy" and
                you want a hard copy.
                Note: With hard copies you cannot determine your
                      progress as output is to a file.
                The current setting is:
                  &HARDCOPY. - 1=Hard copy, 0=Soft Copy
     /HLQ(altspref)
              - High Level Qualifier to use instead of your system
                prefix as set in your TSO profile.
                Use this command if your prefix is your userid and
                tight security would preclude you sharing your tid bits
                with others.
                The following is the p-refix (hlq) that will be used and
                depends on whether you are defaulting or used this
                parameter:
                  Syspref -> &SPREF.

                Use this command if the site default is "Soft Copy" and
                you want a hard copy.
                Note: With hard copies you cannot determine your
                      progress as output is to a file.
                The current setting is:
                  &HARDCOPY. - 1=Hard copy, 0=Soft Copy

     /SC      - Soft Copy.  Will keep output under SDSF (SYSOUT).
                Use this command if the site default is "Hard Copy" and
                you don't want a hard copy.
                Note: With soft copies you can follow  your progress as
                      output is displayed under the SDSF held output.
                The current setting is:
                  &HARDCOPY. - 1=Hard copy, 0=Soft Copy

     /SS      - Single Stream.  By default, this process uses routine
                $ALKJC which in turn uses sub-routine $ALKUJBS to
                generate a unique jobid suffix so you do not have
                duplicates (untill the range is reached).  This way each
                jobname is different for viewing under SDSF (for sites
                that dont include program value).  This also results in
                multiple reports being submitted and executed at the
                same time.  This may not be an acceptable option at some
                sites, so, use this parameter to single stream job
                submission.  With this parameter the default jobname
                used (for ALL jobs) will be "&USERID.&S.".  This default
                suffix of '&S.' may be changed by changing variable
                "DXC" at the top of this REXX routine (on line &L.)  to
                your site's preference.

     /VR      - Verify Report run.  Usually you will run CRMEMB on
                members of PDS's and usually out of some sort or index.
                This routine will verify if the hard copy (refer to the
                "/HC" parameter for dataset name) exists.  If it does,
                and the rest of the line(s) do not have the dataset
                name on it, a noteline will be inserted above with a
                LINEMAC '/V' prompters to permit MMOO operation.
                If the NOTELINE is not there, either the dataset name
                is documented on the line or a hardcopy report not run.
                Note: When using this parameter, you can use the ISPF
                      block command "CC" to select the start and end
                      range for verification.  The default is all lines
                      (any lines not matching naming standards, except
                      for '|' or '¦' used as index column seperators,
                      will be ignored.

     /VRM     - Verify Report Member files.  By default, hard copies go
                to a sequential file (refer "/HC" parameter. For sites
                with a lot of regions you can either heve hundreds of
                seperate hard copies or ammass them into one PDS. If you
                choose to, suggest it is called
                'spref.$XREF.PROGRAM.CICSALL' under member name carried
                through the reporting process (again refer to splurge on
                "/HC" above).

     /XA      - eXecute Anywhere.  By default the SYSAFF 'JOBPARM'
                parameter is set to the current JESNODE.  However, at
                sites with workload manager the more efficient
                executions is determined accordingly.  Use this
                parameter to let WLM do it's thing.  This parameter
                clears the SYSAFF field in the entry screen or you can
                manually do it in the screen.

   Passed variables to batch REXX routine:
      CRMEMP0  - Starting line of the JCL to extract DSN from for
                 source DSN.
      CRMEMP0E - Ending line of the JCL to extract DSN from for
                 source DSN.
      CRMEMP1  - Starting line of the JCL to extract DSN from for
                 compare with DSN.
      CRMEMP1E - Ending line of the JCL to extract DSN from for
                 compare with DSN.
      CRMEMV1  - Volser of source DSNs.
      CRMEMV2  - Volser of with DSNs.
                 For both CRMEMV1 and CRMEMV2, the parameter may be
                 passed on the JCL statement if the 'DSN=' is the
                 last parameter in the JCL line and it is followed
                 by 'VOL=SER=volser'.
      CRMEMP2  - What to report on. valid values are:
                    'ALL'  report on all members.
                    'HITS' report only found members.
                    'MISS' report only not found members.
      CRMEMPDS - Dataset where JCL resides.
      CRMEMMEM - Member name.

   The following members are required to package this routine:
     REXX:
       $ALK*    o Number of generic housekeeping routines.
       $VERNAME o Verify member names if the '/VR' parameter is used.
       BATCHISP - Set up JCL for ISPF in batch. Dynamically
                  customised for site.
       CRMEMB   - Driver.
                  Self invoked as macro#1:
                    Edit macro. Run in batch for processing from PDS
                    member (part 1).
                  Self invoked as macro#2:
                    Edit macro. Run in batch for processing from
                    direct dataset entry (part 2).
                  Can be used as an audit trail to verify report run (if
                  harcopy format is used), when you are running MANY
                  reports.
       CRMEMBDH o Dynamic tutorial (requires access to HELPDRVR).
       C3       o 3pp. parser/identifier and procedure expander.
       C3I      o INCLUDE statement expander.
       SYMSUB   o Symbolic variable substituter.
       TEMPSUB  o Auto submitter.
       XRPL     o Subtract DFHRPL information out of JESJCL part of
                  held output for CRMEB processing.  This option uses
                  SJF (Sdsf Jcl Format) and JF (Jcl Format) to format
                  output and remove the unnecessary crap. This
                  process also retains the STEPLIB DD's just in case
                  it may be required.

     Panels:
       CRMEMBP  - Parameter entry panel.

     Skeleton:
       CRMEMBS  - Skeleton JCL to execute in batch.


*/
n_en=mark(-2)                               /* Mark prev 2 line       */

    b=def_bb;h=def_hd;l=l_dxc;s=dxc
    If ima_macro Then Do
        Address ISREDIT;"(dl1,dl2)=DISPLAY_LINES";If rc/=0 Then dl1=0
        If \Datatype(dl1,'w') Then "(dl1)=LINE .ZFIRST"
        If dl1=0 Then Do;dl1='.ZFIRST';"LINE_AFTER" dl1"=' '";End
        Else If dl1>1 Then dl1=dl1+1
    End
    x=Say_it_2_me();Return 0
