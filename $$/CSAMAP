/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to show CSA usage.                                         */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC

    cactn = "RETURN"
    cactn = "CANCEL"
    "CONTROL ERRORS" cactn

/*--------------------------------------------------------------------*/
/* Default settings                                                   */
/*--------------------------------------------------------------------*/
    csa_t   = 'ABOVE'
    csa_t   = 'BELOW'
    xmem_av = 'N'                           /* XMEM available         */
    hlq     = $alkhlq()

    ARG vsmap@c free_sp
    Parse VAR parm# 'VSLIST@(' vsmap@c ')' .
    If vsmap@c = '' Then Do
        x = Substr(parm#,1,1)
        If x = 'A' | x = 'B' Then Do
            If x = 'A' Then csawhere = 'ABOVE'
            Else            csawhere = 'BELOW'
            "VPUT (csawhere) PROFILE"
        End
        Call $alklibd('IN')

        Address TSO "CSAMAPL"

        Call $alklibd('OUT')

        Return 0
    End

/*--------------------------------------------------------------------*/
/* Set variables                                                      */
/*--------------------------------------------------------------------*/
    vgetvars = 'CSAWHERE CSAKON CSASON CSAFON CSACL1 CSACL2 CSACL3'
    "VGET ("vgetvars") PROFILE"
    If csawhere = '' Then Do
        csawhere = csa_t
        "VPUT (csawhere) PROFILE"
    End
    Else csa_t = csawhere

    pfks = 'ZPF13,ZPF14,ZPF15,ZPF16,ZPF17,ZPF18'
    "VGET (&PFKS) PROFILE"
    szpf13 = zpf13;szpf14 = zpf14;szpf15 = zpf15;szpf16 = zpf16
    szpf17 = zpf17;szpf18 = zpf18
    zpf13  = '/DUMP'
    zpf14  = '/PAGE'
    zpf15  = '/CSA'
    "VPUT (&PFKS) PROFILE"
    csax11 = 'YELLOW' ; c.y = x2c('11')
    csax12 = 'GREEN'  ; c.g = x2c('12')
    csax13 = 'PINK'   ; c.p = x2c('13')
    csax14 = 'BLUE'   ; c.b = x2c('14')
    csax15 = 'RED'    ; c.r = x2c('15')
    csax16 = 'TURQ'   ; c.t = x2c('16')
    csax17 = 'WHITE'  ; c.w = x2c('17')
    def_lcol = 'TWR'                        /* Default line colors    */
    If csacl1 = '' Then x = Define_line_color(def_lcol)

/*--------------------------------------------------------------------*/

    o_GDAECSA  = 124 ; o_GDAECSAS = 128 ; o_GDAECSAA = 436
    o_GDACSA   = 108 ; o_GDACSASZ = 112 ; o_GDACSAA  = 432
    o_CVTGDA   = 560

    sp_i = d2c(227) || d2c(228) || d2c(231) || d2c(241)
    sp_o = 'abcd'
    up_i = '_'                              /* Unused page indicator  */
    nf_i = '0'                              /* No free indicator      */
    nf_i = '.'                              /* No free indicator      */
    If csakon = '' | csason = '' | csafon = '' Then Do
        csakon = 1
        csason = 1
        csafon = 1
        "VPUT (CSAKON CSASON CSAFON) PROFILE"
    End
    k_on = CSAKON                           /* Display Key line       */
    s_on = CSASON                           /* Display Sub-pool line  */
    f_on = CSAFON                           /* Display Fragment line  */
    nold = k_on + s_on + f_on               /* No of lines 2 display  */
    cvt      = c2d(storage(10,4))
    cvtgda   = c2d(storage(d2x(cvt + o_CVTGDA),4))

    exit_code= 0

/*--------------------------------------------------------------------*/
/* Initial or re-processing point when there is a toggle between CSA  */
/* and E/CSA.                                                         */
/*--------------------------------------------------------------------*/
Pick_location:
    cursor   = 'ZCMD'
    csrpos   = 1
    clt      = 1
    free_off = 0
    csa_t    = Substr(csa_t,1,1)
    If csa_t = 'A' Then csa_tl = 'E/CSA'
    Else                csa_tl = 'CSA'
    free_sp = Substr(free_sp,1,1)
    vsmap@d = c2d(vsmap@c)
    If csa_t = 'A' Then Do
        csa@_x = c2x(storage(d2x(cvtgda + o_GDAECSA),4))
        csal_x = c2x(storage(d2x(cvtgda + o_GDAECSAS),4))
        csaa_x = c2x(storage(d2x(cvtgda + o_GDAECSAA),4))
    End
    Else Do
        csa@_x = c2x(storage(d2x(cvtgda + o_GDACSA),4))
        csal_x = c2x(storage(d2x(cvtgda + o_GDACSASZ),4))
        csaa_x = c2x(storage(d2x(cvtgda + o_GDACSAA),4))
    End

    csa@_d = x2d(csa@_x)
    csal_d = x2d(csal_x)

    data@d = c2d(Storage(d2x(vsmap@d + 4),4))
    regn_d = c2d(Storage(d2x(data@d),4))
    data@d = data@d + 4

    c_sp. = up_i
    c_ky. = up_i
    c_fr. = up_i
    toff  = 0
    #data@d = data@d

    Signal On Syntax Name syntax_handle

    Do i=1 To regn_d
        spd_x  = c2x(Storage(d2x(data@d),8))
        spab_d = c2d(Storage(d2x(data@d+8),4))
        data@d = data@d + 4 + x2d(substr(spd_x,3,2))
        sp_d   = x2d(substr(spd_x,5,2))
        sp_c   = d2c(sp_d)
/*      key_d  = x2d(substr(spd_x,7,1))                               */
/*      key_c  = d2c(key_d)                                           */
        key_d  = substr(spd_x,7,1)
        Do j=1 To spab_d
            abd_x = c2x(Storage(d2x(data@d),8))
            abd_t = Substr(abd_x,1,2)
            Select
                When (csa_t = 'A' & abd_t = '00') Then process = 'N'
                When (csa_t = 'B' & abd_t /= '00') Then process = 'N'
                Otherwise Do
                    process = 'Y'
                    csapo_x = Substr(abd_x,1,8)
                    csapl_x = Substr(abd_x,9)
                    koff = (x2d(csapo_x) - csa@_d) / 4096
                    noff = x2d(csapl_x) / 4096
                    Do k=koff To koff + (noff -1)
                        c_sp.k = sp_c
                        c_ky.k = key_d
                        c_fr.k = nf_i
                    End
                    If k > toff Then toff = k
                End
            End
            If free_sp = 'F' Then Do
                abf_d = c2d(Storage(d2x(data@d+8),4))
                data@d = data@d + 12 + abf_d*8
                If process = 'Y' Then Do
                    If abf_d > 9 Then c_fr.koff = '*'
                    Else If abf_d > 0 Then c_fr.koff = abf_d
                End
            End
            Else,
                data@d = data@d + 8
        End
    End

    Signal Off Syntax

    roff = 0
    loff = 0
    fini = 'N'
    line_c = 64
    line_r = line_c*4096
    k = 1
    Do Forever
        linek = ''
        lines = ''
        linef = ''
        Do i=1 To line_c
            j = roff + i -1
            If j = toff Then Do
                fini = 'Y'
                Leave
            End
            linek = linek || c_ky.j
            lines = lines || c_sp.j
            linef = linef || c_fr.j
        End
        linek.k = Right(d2x(csa@_d),8,'0')Right(loff/4096,6) linek
        lines.k = Right(d2x(csa@_d),8,'0')Right(loff/4096,6),
            Translate(lines,sp_o,sp_i)
        linef.k = Right(d2x(csa@_d),8,'0')Right(loff/4096,6) linef
        If fini = 'Y' Then Leave
        csa@_d = csa@_d + line_r
        loff   = loff   + line_r
        roff = roff + line_c
        k    = k +1
    End
    linek.0 = k

    Call Show_CSA_Alloc

/*--------------------------------------------------------------------*/
/* Reset PF Keys and return                                           */
/*--------------------------------------------------------------------*/
    zpf13 = szpf13;zpf14 = szpf14;zpf15 = szpf15;zpf16 = szpf16
    zpf17 = szpf17;zpf18 = szpf18
    "VPUT (&PFKS) PROFILE"

    Return exit_code

/*--------------------------------------------------------------------*/
/* Show CSA allocations                                               */
/*--------------------------------------------------------------------*/
Show_CSA_Alloc:
    'VGET (zscreend)'
    u_p = 0
    #p.a = 0
    #p.b = 0
    #p.c = 0
    #p.d = 0
    up_i_a = Copies(up_i,64)
/*--------------------------------------------------------------------*/
/* Calculate actual free space (fragmented) and pages allocated per   */
/* sub pool.                                                          */
/*--------------------------------------------------------------------*/
    Do i=1 to linek.0
        linek = Substr(linek.i,16)
        lines = Substr(lines.i,16)
        If linek = up_i_a Then u_p = u_p + 64
        Else Do j=1 To Length(linek)
            If Substr(linek,j,1) = up_i Then Do
                u_p = u_p +1
                Iterate
            End
            sp = Translate(Substr(lines,j,1))
            If sp /= up_i Then #p.sp = #p.sp +1
        End
    End
    a_p = d2x(csal_d - (u_p*4096))
    xx = c.w'Address:' || c.t || Right(csa@_x,8,'0') ,
         c.w'Size:' || c.t || Right(csal_x,8,'0') ,
         c.w'Sum of pages allocated:' || c.t || Right(a_p,8,'0') ||,
         c.g'('Format((x2d(a_p) / csal_d) * 100,,2)'%)'
    map1 = Substr(xx,1,80)
    xx = c.w'GETMAINEd:' || c.t || Right(csaa_x,8,'0') ||,
         c.g'('Format((x2d(csaa_x) / csal_d) * 100,,2)'%)' ||,
         c.w'Allocated/Total:' || c.t ||,
         #p.a + #p.b + #p.c + #p.d || c.g || 'of' || c.t ||,
         csal_d % 4096 || c.g || 'pages'
    map1 = map1 || Substr(xx,1,80)
    xx = c.w'Subpool usage:',
         c.w'227('c.t || Value(#p.a) ||c.w')',
         c.w'228('c.t || Value(#p.b) ||c.w')',
         c.w'231('c.t || Value(#p.c) ||c.w')',
         c.w'241('c.t || Value(#p.d) ||c.w')'
    map1 = map1 || Substr(xx,1,80)
    map1 = map1 || Substr(c.y'*'Copies('-',77)'*',1,80)
    map# = map1
    subhl = Length(map#)
/*--------------------------------------------------------------------*/
/* Build screen                                                       */
/*--------------------------------------------------------------------*/
build_screen:
    map1 = map#
    cl  = clt
    n1  = (zscreend - 6) % nold
    Do v=1 to n1
        If cl > linek.0 Then Do
            rem = 80 - (Length(map1) // 80)
            map1 = map1 || Substr(' ',1,rem) ||,
                   c.y || Centre(' End of 'csa_tl' ',79,'*')
            Leave
        End
        pref = Substr(linek.cl,1,14)
        pref = c.t || Overlay(c.w,pref,9)
        If k_on Then Do
            map1 = map1 ||,
                   Substr(pref || csacl1 || Substr(linek.cl,16),1,80)
            pref = '               '
        End
        If s_on Then Do
            map1 = map1 ||,
                   Substr(pref || csacl2 || Substr(lines.cl,16),1,80)
            pref = '               '
        End
        If f_on Then,
            map1 = map1 ||,
                   Substr(pref || csacl3 || Substr(linef.cl,16),1,80)
        cl = cl +1
    End
    lin_h = 'Line' clt

/*--------------------------------------------------------------------*/
/* Display CSA/ECSA data.                                             */
/*--------------------------------------------------------------------*/
disp_screen_1:
    free_off = ''
    Do Forever
        csahmain = Time() Centre(' 'csa_tl' ',68-Length(lin_h),'-')
        csahead1 = csahmain lin_h
        zcmd = ''

        "DISPLAY PANEL(CSAMAPP1) CURSOR(&CURSOR) CSRPOS(&CSRPOS)"
        If rc /= 0 Then Return 0

        Parse Upper VAR zcmd cmdx parm

        #csrp = csrpos
        "VGET (ZVERB ZSCROLLA ZSCROLLN)"
        If Datatype(zscrolln) = 'NUM' Then scrl3 = (zscrolln % nold) -1
        scr_it = 'Y'

        Select
            When(zverb = 'DOWN') Then Do
                Select
                    When(zscrolla = 'MAX') Then clt = (linek.0 - n1)+2
                    When(zscrolla = 'CSR') Then clt = clt + scrl3
                    Otherwise clt = clt + zscrolln
                End
            End
            When(zverb = 'UP') Then Do
                Select
                    When(zscrolla = 'MAX') Then clt = 1
                    When(zscrolla = 'CSR') Then clt = clt - scrl3
                    Otherwise clt = clt - zscrolln
                End
            End
            When (zverb = 'LEFT' | zverb = 'RIGHT') Then Do
                zcmd = #zcmd
                scr_it = 'N'
                Parse Upper VAR zcmd cmdx parm
                cursor = 'MAP1'
                If zverb = 'LEFT' Then csrpos = #csrp -1
                Else                   csrpos = #csrp +1
            End
            Otherwise scr_it = 'N'
        End
        Leave
    End
    If scr_it = 'Y' Then Do
        If clt < 1 Then clt = 1
        If clt > linek.0 Then clt = linek.0 +1
        cursor = 'ZCMD'
        csrpos = 1
        Signal build_screen
    End

    If cursor = 'MAP1' Then Do
        poff  = (csrpos // 80)
        If poff = 0 Then poff = 80
        poff = poff - 17
        If poff < 0 | csrpos <= subhl Then Do
            gc009 = 'Invalid cursor position. It must be over an',
                    'addressable field.'
            "Setmsg msg(gc009)"
            Signal disp_screen_1
        End
        lin# = ((csrpos - (subhl+1)) % (80 * nold)) +1
        csa_of_x = Substr(map1,((lin#-1)*80*nold)+subhl+2,8)
        adr_2_d = x2d(csa_of_x) + (poff * 4096)
        adr_2_x = Right(d2x(adr_2_d),8,'0')

        lin@ = (lin# + clt) -1
        If cmdx = '' Then Do
            key = Substr(linek.lin@,15+poff+1,1)
            gc009 = "Address( "Right(adr_2_x,8,'0')" )"
            If key = up_i Then gc009 = gc009 'and has not',
                'been GETMAINed.'
            Else Do
                sp = Substr(lines.lin@,15+poff+1,1)
                xx = c2d(Translate(sp,sp_i,sp_o))
                gc009 = gc009 'and is used for SP(' xx '),',
                       'in KEY(' key ').'
            End
            "SETMSG MSG(GC009)"
            Signal disp_screen_1
        End

        char  = Substr(map1,csrpos,1)
        If char = up_i Then Do
            gc009 = 'CSA unused. Cursor must be over an',
                    'used address.'
            "Setmsg msg(gc009)"
            Signal disp_screen_1
        End

        If Substr(cmdx,1,2) = Substr('/Page',1,2) Then Do
            #zcmd = zcmd
            free_off = adr_2_d
            #map1 = map1
            #csr  = cursor
            #csrp = csrpos
            Call Show_Free_Space
            map1 = #map1
            cursor = #csr
            csrpos = #csrp
            Signal disp_screen_1
        End

        If Substr(cmdx,1,2) = Substr('/Dump',1,2) Then Do
            #zcmd = zcmd
            xx = Storage(adr_2_x,4)
            If xx = '' Then Do
                If xmem_av  = 'Y' Then Do
                    gc009 = "Protected storage at address '"adr_2_x"'."
                    "SETMSG MSG(GC009)"
                    Call cross_memory_4_auth
                End
                Else Do
                    gc009 = "Protected storage at address '"adr_2_x"'.",
                            "Cross-memory navigation tools not",
                            "available."
                    "SETMSG MSG(GC009)"
                End
            End
            Else Address TSO '%SHOWSTOR' adr_2_x
            Signal disp_screen_1
        End
    End

    If Substr(cmdx,1,3) = Substr('/COlor',1,3) Then Do
        If parm = '' Then parm = def_lcol
        x = Define_line_color(parm)
        If x /= 0 Then Do
            gc009 = "Invalid color value entered or not all 3 lines",
                    "catered for."
            Signal e_screen_1
        End
        exit_code = 8
        Return 0
    End

    If Substr(cmdx,1,2) = Substr('/Show',1,2) Then Do
        If parm = '' Then parm = 111
        x = Verify(parm,'10')
        If x > 0 | Length(parm) /= 3 | parm = '000' Then Do
            gc009 = "Use combination of 1/0 and map all",
                    "3 lines with at lest one displayed (1)."
            Signal e_screen_1
        End
        Parse VAR parm csakon +1 csason +1 csafon
        k_on = csakon
        s_on = csason
        f_on = csafon
        nold = k_on + s_on + f_on
        "VPUT (CSAKON CSASON CSAFON) PROFILE"
        exit_code = 8
        Return 0
    End

    If Substr(cmdx,1,2) = Substr('/Refresh',1,2) | zcmd = '' Then Do
        exit_code = 8
        Return 0
    End
    If Substr(cmdx,1,2) = '/A' | Substr(cmdx,1,2) = '/B' Then Do
        csa_t  = Substr(cmdx,2)
        csawhere = csa_t
        "VPUT (csawhere) PROFILE"
        Signal Pick_location
    End
    If Substr(cmdx,1,3) = Substr('/CSA',1,3) Then Do
        If csa_t = 'A' Then csa_t = 'BELOW'
        Else                csa_t = 'ABOVE'
        csawhere = csa_t
        "VPUT (csawhere) PROFILE"
        Signal Pick_location
    End
    If Substr(cmdx,1,2) = Substr('/Vsmlist',1,2) Then Do
        x = Showstor(c2x(vsmap@c))
        Signal disp_screen_1
    End

    gc009 = 'Invalid command entered.'
e_screen_1:
    "SETMSG MSG(GC009)"
    Signal disp_screen_1

/*--------------------------------------------------------------------*/
/* Display of free space /fragmentation for cursor selected page.     */
/*--------------------------------------------------------------------*/
Show_Free_Space:
    xx = posit_2_free()

    data@dx = data@d +12
    csapo_d = x2d(csapo_x)
    mapx = Copies(Translate(sp_c,sp_o,sp_i),1024)
    abf_d = c2d(Storage(d2x(data@d+8),4))
    Do abf_d
        adrs_d = c2d(Storage(d2x(data@dx),4))
        leng_d = c2d(Storage(d2x(data@dx+4),4))
        dif = (adrs_d - csapo_d) / 4
        len = leng_d / 4
        If dif = 0 Then dif = 1
        p1 = Substr(mapx,1,dif-1)
        p2 = Substr(mapx,dif+len)
        mapx = p1 || Copies('_',len) || p2
        data@dx = data@dx+8
    End
    adro_d = csapo_d
    xx = ' CSA Free Space Page Map ( Key = 'c.r ||,
         Substr(linek.lin@,15+poff+1,1) || c.w') '
    map1 = c.w || Centre(xx,79,'*')
    Do i=1 To 16
        Parse VAR mapx mapy +64 mapx
        line =,
               c.t || Right(d2x(adro_d),8,'0') ||,
               c.w || '+'Right(d2x(adro_d-csapo_d),4,'0') ||,
               c.g || mapy
        map1 = map1 || line
        adro_d = adro_d + 64*4
    End

    map1 = map1 || c.w || Centre(' End of Data ',79,'*')
    map1 = map1 || Substr(' ',1,80)
    xx =,
    '   ID   Sub-Pool-No.   Page-Fixed   Fetch-Protected   Storage-Key'
    map1 = map1 || Substr(c.w || xx,1,80)
    xx = '  'c.g'a'c.t,
        '       227           Yes             Yes            User'
    map1 = map1 || Substr(c.t || xx,1,80)
    xx = '  'c.g'b'c.t,
        '       228           Yes              No            User'
    map1 = map1 || Substr(c.t || xx,1,80)
    xx = '  'c.g'c'c.t,
        '       231            No             Yes            User'
    map1 = map1 || Substr(c.t || xx,1,80)
    xx = '  'c.g'd'c.t,
        '       241            No              No            User'
    map1 = map1 || Substr(c.t || xx,1,80)
    xx = '  'c.g'_'c.t,
        '    Free space'
    map1 = map1 || Substr(c.t || xx,1,80)

/*--------------------------------------------------------------------*/
/* Actual display.                                                    */
/*--------------------------------------------------------------------*/
screen_free:
    Do Forever
        zcmd = ''
        csahead1 = Time() Centre(' 'csa_tl' ',79-Length(Time()),'-')
        "DISPLAY PANEL(CSAMAPP1)"
        If rc /= 0 Then Leave
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Find the page in the workarea passed to enable extraction of free  */
/* space data for the page.                                           */
/* Return code 0 when have a hit.                                     */
/*--------------------------------------------------------------------*/
posit_2_free:
    data@d = #data@d
    csa@_d = x2d(csa@_x)
    csal_d = x2d(csal_x)
    free_off = (free_off - csa@_d) / 4096
    Do i=1 To regn_d
        spd_x  = c2x(Storage(d2x(data@d),8))
        spab_d = c2d(Storage(d2x(data@d+8),4))
        data@d = data@d + 4 + x2d(substr(spd_x,3,2))
        sp_c   = x2c(substr(spd_x,5,2))
        key_c  = x2c(substr(spd_x,7,1))
        Do j=1 To spab_d
            abd_x = c2x(Storage(d2x(data@d),8))
            abd_t = Substr(abd_x,1,2)
            Select
                When (csa_t = 'A' & abd_t = '00') Then NOP
                When (csa_t = 'B' & abd_t /= '00') Then NOP
                Otherwise Do
                    csapo_x = Substr(abd_x,1,8)
                    csapl_x = Substr(abd_x,9)
                    koff = (x2d(csapo_x) - csa@_d) / 4096
                    noff = x2d(csapl_x) / 4096
                    Do k=koff To koff + (noff -1)
                        If free_off = k Then Return 0
                    End
                End
            End
            If free_sp = 'F' Then Do
                abf_d = c2d(Storage(d2x(data@d+8),4))
                data@d = data@d + 12 + abf_d*8
            End
            Else,
                data@d = data@d + 8
        End
    End
    gc009 = "Error - Should never reach this situation. Please",
            "report this issue to the dialogue developer or",
            "try to fix it yourself."
    "SETMSG MSG(GC009)"
    Return 8

/*--------------------------------------------------------------------*/
/* Establish user's ASID to invoke SHOWSTOR as looking at a foreign   */
/* address space using cross memory causing it to use the XMEMSTOR    */
/* program to return data from the foreign address space. For doco    */
/* purposes the foreign address space will be called 'PROTECTED' even */
/* though the users address space is used.                            */
/*--------------------------------------------------------------------*/
cross_memory_4_auth:
    cvt     = Storage(10,4)
    asvt    = Storage(d2x(c2d(cvt) + x2d(22c)),4)
    ascbmax = c2d(Storage(d2x(c2d(asvt) + x2d(204)),4))
    asve@   = d2x(c2d(asvt) + x2d(210))
    asve    = Storage(asve@,4)
    xf7     ='7F'X                          /* Active @ mask          */

    userid  = Userid()

    Do i=1 To ascbmax
        If Bitor(Substr(asve,1,1),xf7) = xf7 Then Do
            jbn = c2x(Storage(d2x(c2d(asve) + x2d(0AC)),4))
            If jbn = 0 Then
                jbn = c2x(Storage(d2x(c2d(asve) + x2d(0B0)),4))
            jbnm = Storage(jbn,8)
            If jbnm = userid Then Do
                asnx = Storage(d2x(c2d(asve) + x2d(024)),2)
                Leave
            End
        End
        asve@ = d2x(x2d(asve@) + (4))
        asve  =  Storage(asve@,4)
    End

    xx = Showstor('XMEM('asnx',Protected)' adr_2_x)

    Return 0

/*--------------------------------------------------------------------*/
/* Set up line colors (defaults are Turq, White and Red)              */
/*--------------------------------------------------------------------*/
Define_line_color:
    Arg ccc
    x = Verify(ccc,'WTYGRPB')
    If x > 0 | Length(ccc) /= 3 Then Return 8
    Parse VAR ccc c1 +1 c2 +1 c3 +1 .
    Do i=1 To 3
        data = 'csacl'i '= c.c'i
        Interpret data
    End
    "VPUT (CSACL1 CSACL2 CSACL3) PROFILE"
    exit_code = 8
    Return 0
    csacl1 = c.t
    csacl2 = c.w
    csacl3 = c.r
    "VPUT (csacl1,csacl2,csacl3) PROFILE"

    Return 0

/*--------------------------------------------------------------------*/
/* Error detection handler                                            */
/*--------------------------------------------------------------------*/
syntax_handle:
    Signal Off syntax
    gc009 = "Error detected on line '"sigl"'. Please contact your",
            "your dialogue administrator."
    gc009 = Substr(gc009,1,79) Sourceline(sigl)
    gc009 = Substr(gc009,1,79) "===>    " Strip(sourceline(sigl))
    "SETMSG MSG(GC009)"
Exit
    Return 8

error1:
    Say 'sp='sp 'x_sp='c2x(sp)
    Exit

