/******************************** REXX ********************************/
CSDC:csdc_ver='1.17'
n_st=mark(2)    /* Mark Start */
/*
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*  CSDC: CSD Change.                                                 */
/*                                                                    */
/*  Process a CSD and list all the changes entered since specific     */
/*  date/time which are entered via a self extracted panel.  Has the  */
/*  potential to generate CSD update definitions IF this facility is  */
/*  FULLY packaged (refer below).                                     */
/*                                                                    */
/*  By default the 'O' (online) invocation is executed.  If the CSD   */
/*  is large use the 'N' (batch) option or if you want the            */
/*  definitions regardless of the CSD size ('D').                     */
/*                                                                    */
/*  Alternatively you can manually define entries to extract define   */
/*  statements that can then be customised to appropriate ALTER       */
/*  inputs. (Use the "/M" keyword.)                                   */
/*                                                                    */
/*  Enter "/M" on the command line of the "CSD Changes" enquiry       */
/*  screen to enter "manual entry" mode.                              */
/*                                                                    */
/*  A byproduct of this routine is to list all groups that are not    */
/*  included in a list. This list is automatically produced everytime */
/*  the program is run.  To generate this listing only select a       */
/*  unique date time combination when no changes have been made       */
/*  (midnight on any date is usually a safe bet, usually(??)).        */
/*  Alternatively enter "/OG" (orphan groups) on the command line.    */
/*                                                                    */
/*  Parameters:                                                       */
/*    Positional:                                                     */
/*     1. CSD dataset.                                                */
/*     2. Date to scan from (to today). Default is today -90 days.    */
/*    Keyword for batch processing:                                   */
/*     /nn   - CICS version, where 'nn' can be: 41, 13, 22, 23 or 31  */
/*             (or any value accepted by "$ALKCICS).                  */
/*             Required by "CSDL" when invoking "$ALKCICS" to get     */
/*             location/version of IBM program "DFHCSDUP".            */
/*     /2    - Stage 2. Builds CSD extract from output from phase 1   */
/*             member 'userid.$.CSDC01' into member                   */
/*             'userid.$.CSDC02' and builds JCL to extract changed    */
/*             groups into 'userid.$.CSDC03'.                         */
/*             output of large groups.                                */
/*     /3    - Stage 3. Uses members 'userid.$.CSDC01' and            */
/*             member 'userid.$.CSDC03' to generate CSD update        */
/*             parameters 'userid.$.CSDC04'.                          */
/*     /4    - Stage 4. Generates batch ISPF JCL for stand alone      */
/*             stage 5 process.                                       */
/*     /5    - Stage 5. Execute in batch to extract CSD upfdate       */
/*             entries form d.$.CSDC03' to generate CSD update        */
/*             parameters 'userid.$.CSDC04'.                          */
/*     /M(aa)- Manually provide alter parameters.                     */
/*             If provided between parentheses, it must be in the     */
/*             format:                                                */
/*               /M(GROUP(group):resource(entry)                      */
/*             These values will be populated into an entry screen    */
/*             for confirmation.  Alternatively you will be presented */
/*             with a blank screen.                                   */
/*             Default (for use as sample/templae) is:                */
/*                GROUP(DFHCOMP3):TRANSACTION(CEMT)                   */
/*     /MA(aa)                                                        */
/*           - Manually provide alter parameters and append to        */
/*             existing CSDC01 dataset.  (This parameter is the       */
/*             default passed from "CSDA" processing.)                */
/*     /MJ   - Generate JCL for already manually generated CSDC01     */
/*             dataset.  Assumes CSCD01 has been popolated and        */
/*             bypasses data entry.  Must still pass CSD dataset name.*/
/*     /OG   - Orphan groups. Automatically uses 01011975-000000 for  */
/*             both the from and to date-time parameters.             */
/*     /NJ   - No JCL.  Used with '/M' and '/MA' parameters to bypass */
/*             JCL presentation for submitting.  If this parameter is */
/*             used (eg. in a loop) either leave out in last          */
/*             invocation or explicitly use '/MJ' at a later stage.   */
/*     /T    - Trace process for debugging putposes.                  */
/*                                                                    */
/*  Packaging:  Those marked with an 'o' seperator are optional and   */
/*  are only required if you wish to do any batch processing          */
/*  (including update definition generation).                         */
/*  REXX: (Suggest concatenating Alex's $$ dataset.)                  */
/*    $ALK*    o Miscellaneus site routines to return parameters to   */
/*               build JCL ($ALKJC, $ALKHLQ, $ALKLOAD, $ALKHLQO,      */
/*               $ALKJCPG, $ALKCICS).                                 */
/*    $WHOAMI  o Personaliser.                                        */
/*    $WORDAT  o Get word at cursor. Required when "manually"         */
/*               generating 'alter' statements using the "/M" option. */
/*    $ZTEMPF  - Create temporary file.                               */
/*    BR       o BR to browse help instructions from this routine.    */
/*    CSDC     - This driver. Includes self extracting panel CSDCP1.  */
/*    CSDL     o Routine to print the CSD (issue EXTRACT command).    */
/*    BATCHISP o Set up JCL for ISPF in batch. Dynamically customised */
/*               for site.                                            */
/*    $DATEMAN - Date manipulation routine. Dates must be in          */
/*               'dd/mm/yyyy' format.                                 */
/*  Panel:                                                            */
/*    CSDCP    - Self extracted panel.                                */
/*  Load modules:                                                     */
/*    CSGCSDDC - Program to process a CSD with date range supplied to */
/*               report changes.                                      */
/*    DFH0CBDC o IBM supplied sample program to generate batch CSD    */
/*               update statements. (Required by REXX program "CSDL"  */
/*               above.)                                              */
/*                                                                    */
/*  GOTCHAs:                                                          */
/*  1. Routine uses dataset 'userid.$CSDC*' for work members. As      */
/*     member name is static this routine is single streaming and     */
/*     multiple executions will cause unpredictable results.          */
/*  2. Creation of JCL for CSD definitions (option 'D') may take up   */
/*     to 1 minute for sites with a lot of TSO allocated datasets     */
/*     while "BATCHISP" analyses the alloactions to build batch       */
/*     executable ISPF JCL.                                           */
/*  3. More a feature than a Gotcha, you can always use higher levels */
/*     of CICS than the CSD version you are reproting as "DFHCSDUP"   */
/*     is downward compatible. Just ensure the "SDFHLOAD" dataset     */
/*     returned by "$ALKCICS" for the version is valid (or it'll just */
/*     JCL on you).                                                   */
/*     However watch crossing over to TS2.1. TS1.3 is downward        */
/*     compatible but over TS1.3, upper versions are only downward    */
/*     compatible to TS2.1.                                           */
/*  4. If you use the "/M" manual 'define/alter' statement generation,*/
/*     lower case entries are NOT the same as upper case.  They may   */
/*     entirely different transactions depending on the site's setup  */
/*     of upper case translation.                                     */
/*     If you find that no define statemnts have been generated for   */
/*     your manually enetered entry(s) it is because it does NOT      */
/*     exist when "cased mapped" to the CSD definition.  Correct the  */
/*     case and run againg.                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
*/
n_en=mark(-2)   /* Mark End   */
    Parse Upper Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini0:
    w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1
    If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc
    If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me
    Parse Source . . xcmd .;x=$BR(xcmd "??");Return
    Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
    Help_me:Signal Off Syntax;#tr=Trace("o")
    Do i=n_st To n_en;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

No_help_#1:
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    Parse SOURCE . . xcmd .
    Parse VAR parm# parm1,parm2,parm3,parm4,parm5,parm6,parm7
    If Word(parm2,2)/='' Then,
         Parse VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7
    If Wordpos(parm1,'HELP /HELP /H')>0 Then Signal Help_me

ini1:
    If Wordpos('/T',parm#)>0 Then Do
        #tr='R'
        Trace r;parm#=Delword(parm#,Wordpos('/T',parm#),1)
    End
    chgchar='`';day_dif='-90';hlq=$alkhlqo();steplib=$alkload()
    idsn1=hlq'.CC'Time('s')'.TEMP1'
    odsn1=hlq'.$.CSDC01'
    odsn2=hlq'.$.CSDC02'
    odsn3=hlq'.$.CSDC03'
    odsn4=hlq'.$.CSDC04'
    panel_built=0
    "VGET (zenvir) SHARED";Parse VAR zenvir 17 envir +8
    If envir='TSO' Then on_line=1;Else on_line=0
    "VGET (rbmacro) SHARED";If rbmacro/='' Then,
        Interpret "Signal Macro_"rbmacro

    Parse Source . . xcmd .
    mdisp='NEW'
    If Index(' 'parm#,' /M')>0 Then Do
        alter=1;alter_parm=;alter_JCL_only=0
        parm#=' 'parm#
        Select
            When Index(' 'parm#,' /MA')>0 Then Do
                Parse VAR parm# p1 ' /MA' xx p2;
                mdisp='MOD'
            End
            When Index(' 'parm#,' /MJ')>0 Then Do
                Parse VAR parm# p1 ' /MJ' xx p2;
                alter_JCL_only=1
            End
            Otherwise Parse VAR parm# p1 ' /M' xx p2;
        End
        If Substr(xx,1,1)='(' Then,
            alter_parm=Substr(xx,2,Length(xx)-2)
        Else p2=xx p2
        parm#=Space(p1 p2)
    End;Else alter=0

    If parm#='' Then parm#='DNPCICS.TEST.DFHCSD /23'
    Parse Upper VAR parm# parm1 parm2 .

    Select
        When Wordpos('/41',parm#)>0 Then ver='41'
        When Wordpos('/13',parm#)>0 Then ver='13'
        When Wordpos('/22',parm#)>0 Then ver='22'
        When Wordpos('/23',parm#)>0 Then ver='23'
        Otherwise ver=
    End
    If ver/='' Then parm#=Delword(parm#,Wordpos('/'ver,parm#),1)

    Signal on Syntax Name error_off_$alkcics
    v1='sdfhload ver';$alkcics_nogo=1
    Interpret "Parse Value $alkcics(v1,ver) With" v1;ver='/'ver
    $alkcics_nogo=0
error_off_$alkcics:Signal off Syntax
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol_op="UNIT(SYSALLDA)";unitvol_ot=unitvol_op
    unitvol_bp="UNIT=SYSALLDA";unitvol_bt=unitvol_bp
    unitvol_op=$ALKUVOL('SMS');unitvol_ot=$ALKUVOL('$ZTEMPF')
    unitvol_bp=$ALKUVOL('SMS',,'J');unitvol_bt=$ALKUVOL(,,'J')
error_off_$ALKUVOL:Signal off Syntax

    st=1;panel_built=0

    If Wordpos('/NJ',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/NJ',parm#),1);no_jcl=1
    End;Else no_jcl=0
    If alter Then Do
        If \alter_JCL_only Then x=Get_Alter_Data()
        If no_jcl Then Signal ext1
        justc='D';Signal Gen_JCL
    End
    If Wordpos('/2',parm#)>0 Then Do;st=2
        parm#=Delword(parm#,Wordpos('/2',parm#),1);Signal Stage_2
    End
    If Wordpos('/3',parm#)>0 Then Do;st=3
        parm#=Delword(parm#,Wordpos('/3',parm#),1);Signal Stage_3
    End
    If Wordpos('/4',parm#)>0 Then Do;st=4
        parm#=Delword(parm#,Wordpos('/4',parm#),1);Signal Stage_4
    End
    If Wordpos('/5',parm#)>0 Then Do;st=5
        Address TSO;x=Msg('Off');"DELETE '"odsn4"'";x=Msg(x)
        "ALLOC DSN('"odsn4"') NEW TRACKS SPACE(60,15)" unitvol_op,
            "REU RECFM(F B) LRECL(80) BLKSIZE(27920) CATALOG"
        "FREE DSN('"odsn4"')"
        parm#=Delword(parm#,Wordpos('/5',parm#),1)
        Address ISPEXEC;rbmacro=5;"VPUT (rbmacro) SHARED"
        "EDIT DATASET('"odsn4"') MACRO("xcmd")"
        Return 0
    End

    #panel1=1                               /* First panel number     */
    #panels=1                               /* Number of panels       */
    #tr1=Trace('o');Call Build_panel;x=Trace(#tr1)

    Parse VAR parm# w1 w2 w3 w4
    todate=$DATEMAN('VER');totime='HH:MM:SS'
    zedlmsg='From date has been set to "'day_dif'" from today (to today).'

    If Datatype(w2,'W') Then Do
         frdate=$DATEMAN('VER',W2,2))
         If Word(frdate,1)='Error' Then todate=$DATEMAN('VER')
         Else zedlmsg='From date taken from input "'W2'".'
    End
    Else frdate=$DATEMAN('E-N',todate,,-90);frtime='HH:MM:SS'
    zedsmsg=;csr1='DD1';justc='O'
    l#=$dat@csr('/L#');#zwinttl='CSD Changes';#popr=l#-2;#popc=17
Scr1:
    Address ISPEXEC
    If Substr(ver,1,1)='/' Then ver=Substr(ver,2)
    Parse VAR frdate dd1 '/' mm1 '/' yy1;Parse VAR frtime h1 ':' m1 ':' s1
    Parse VAR todate dd2 '/' mm2 '/' yy2;Parse VAR totime h2 ':' m2 ':' s2
    "SETMSG MSG(ISRZ001)";zcmd=;time=Substr(Time(),1,5)

    "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
    zcmd=
    "DISPLAY PANEL(CSDCP1) CURSOR(&CSR1)";rc1=rc;"REMPOP"
    If rc1/=0 Then Signal ext1
    If Wordpos(zcmd,'? HELP ?? /? /HELP')>0 Then Do
        x=$BR(xcmd "??")
        Signal scr1
    End
    If Wordpos(zcmd,'/M /MA')>0 Then Do
        "LIBDEF ISPPLIB";Address TSO "DELETE '"idsn1"'"
        alter=1;alter_parm=
        If zcmd='/M' Then mdisp='NEW';Else mdisp='MOD'
        x=Get_Alter_Data()
        justc='D';Signal Gen_JCL
    End
    If zcmd='/OG' Then,
        Parse Value '01 01 1975 00 00 00 01 01 1975 00 00 00' With,
            dd1 mm1 yy1 h1 m1 s1 dd2 mm2 yy2 h2 m2 s2
    d1=$DATEMAN('VER',dd1'/'mm1'/'yy1)
    If Word(d1,1)='Error' Then Do
        csr1=Word(d1,3)'1';zedlmsg=d1;Signal scr1
    End;Else frdate=d1
    frtime=Right(h1,2,'0')':'Right(m1,2,'0')':'Right(s1,2,'0')
    d2=$DATEMAN('VER',dd2'/'mm2'/'yy2)
    If Word(d2,1)='Error' Then Do
        csr1=Word(d2,3)'2';zedlmsg=d2;Signal scr1
    End;Else todate=d2
    totime=Right(h2,2,'0')':'Right(m2,2,'0')':'Right(s2,2,'0')
/*  frdate=dd1'/'mm1'/'yy1                                            */
    frtime=h1':'m1':'s1
/*  todate=dd2'/'mm2'/'yy2                                            */
    totime=h2':'m2':'s2
    If justc='O' Then Do
        odsno=$Ztempf('NAME')
        Address TSO "ALLOC F(REPORT) DSN('"odsno"') NEW REU TRACKS",
            "SPACE(60,15) RELEASE DSORG(PS) RECFM(F B A) LRECL(132)",
            "BLKSIZE(1320)" unitvol_ot
        Address TSO "ALLOC F(DFHCSD) DSN("parm1") SHR REU"
        Address TSO "ALLOC F(SYSPRINT) DSN(*) SHR REU"
        Address TSO "CALL '"$Alkload()"(CSGCSDDC)'",
               "'"frdate"-"frtime" TO "todate"-"totime"'"
        Address TSO "FREE F(DFHCSD)"
        Address ISPEXEC "VIEW DATASET('&ODSNO')"
        x=$ztempf(odsno,'/D')
        Signal scr1
    End

Gen_JCL:
    If justc='D' Then Do
        If $alkcics_nogo Then Do
            zedlmsg='Routine "$ALKCICS" not found. Cannot generate defines.'
            Signal scr1
        End
        v1='sdfhload ver'
        Interpret "Parse Value $alkcics(v1,ver) With" v1;ver='/'ver
    End
    v1='def_ex def_hd def_ac def_bb def_vm'
    Interpret "Parse Value $alkjc(v1) With" v1
    Address TSO;"NEWSTACK"
    jid=Substr(Userid()'CCR',1,8)
    sep=Substr('//*',1,70,'-')'*'
    prognm='CSGCSDDC-'sname
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(prognm);If x/='' Then prognm=x
error_off_alkjcpg:Signal off Syntax

    Queue "//"jid" JOB "def_ac",'"prognm"',"
    Queue '//             CLASS='def_ex',COND=(4,LT),'
    If alter Then Queue '// RESTART=ISPFBTC2, <- Skip here because of "/A"',
                        'requested process.'
    Queue '//             MSGCLASS='def_hd',TIME=1440,REGION=0M,'
    Queue '//             NOTIFY=&SYSUID'
    Queue '//*'
    Queue '//VARS SET DFHCSD='parm1
    Queue "//     SET FRDATE='"frdate"'"
    Queue "//     SET TODATE='"todate"'"
    Queue "//     SET FRTIME='"frtime"'"
    Queue "//     SET TOTIME='"totime"'"
    Queue '//*'
    Queue sep
    Queue Substr('//*',1,70)'*'
    x='//* Step to delete/create output file and prime it with the CSD'
    Queue Substr(x,1,70)'*'
    x='//* and CICS version for later use.'
    Queue Substr(x,1,70)'*'
    Queue Substr('//*',1,70)'*'
    Queue sep
    Queue '//*'
    Queue '//DELETE1  EXEC PGM=IEFBR14'
    Queue '//REPORT   DD DISP=(MOD,DELETE),DSN='odsn1','
    Queue '//         UNIT=SYSALLDA,'
    Queue '//         SPACE=(TRK,(0,0))'
    Queue '//SYSUT2   DD DISP=(MOD,DELETE),DSN='odsn1'.EXEC,'
    Queue '//         UNIT=SYSALLDA,'
    Queue '//         SPACE=(TRK,(0,0))'
    Queue '//*'
    Queue '//CREATE   EXEC PGM=IEBGENR'
    Queue '//SYSPRINT DD SYSOUT=*'
    Queue '//SYSUT1   DD *,DCB=LRECL=80'
    Queue ' /* REXX */'
    Queue ' Address TSO'
    Queue ' "ALLOC F(XXX) DA('''odsn1''')",'
    Queue '   "'unitvol_op'",'
    Queue '   "DSORG(PS) NEW CATALOG RECFM(F B A)",'
    Queue '   "SPACE(60,15) LRECL(132) BLKSIZE(1320)"'
    Queue " Queue ' *'"
    Queue ' Queue " * CSD -' parm1 ver'"'
    Queue " Queue ' *';Queue ' *';Queue ''"
    Queue ' "EXECIO * DISKW XXX (FINIS"'
    Queue ' "FREE F(XXX)"'
    Queue ' Exit'
    Queue '/*'
    Queue '//SYSUT2   DD DISP=(NEW,CATLG),DSN='odsn1'.EXEC,'
    Queue '//         'unitvol_bp','
    Queue '//         SPACE=(TRK,(1,1)),'
    Queue '//         DCB=(RECFM=F,LRECL=80)'
    Queue '//SYSIN    DD DUMMY'
    Queue '//*'
    Queue '//ISPFBTC1 EXEC PGM=IKJEFT01,DYNAMNBR=65,REGION=4096K'
    Queue '//SYSTSPRT DD SYSOUT=*'
    Queue '//SYSOUT   DD SYSOUT=*'
    Queue '//SYSTERM  DD SYSOUT=*'
    Queue '//SYSTSIN  DD *'
    Queue " EXEC '"odsn1".EXEC'"
    Queue '/*'
    Queue '//*'
    Queue '//SYSUT2   DD DISP=(OLD,DELETE),DSN='odsn1'.EXEC'
    Queue sep
    Queue Substr('//*',1,70)'*'
    x='//* Step to list all the entries in a CSD that has been changed'
    Queue Substr(x,1,70)'*'
    x='//* between two dates-times.'
    Queue Substr(x,1,70)'*'
    Queue Substr('//*',1,70)'*'
    Queue sep
    Queue '//*'
    Queue '//STEP010  EXEC PGM=CSGCSDDC,'
    Queue "//        PARM='&FRDATE-&FRTIME TO &TODATE-&TOTIME'"
    Queue '//STEPLIB  DD DISP=SHR,DSN='steplib
    Queue '//SYSPRINT DD SYSOUT=H'
    Queue '//SYSUDUMP DD SYSOUT=*'
    Queue '//SYSOUT   DD SYSOUT=*'
    Queue '//*REPORT   DD SYSOUT=*'
    Queue '//REPORT   DD DISP=MOD,DSN='odsn1
    Queue '//DFHCSD   DD DISP=SHR,DSN=&DFHCSD'
    Queue '//*'
    If justc='Y' Then Do;Queue '//';Queue ' ';Queue ' ';Signal JCL1;End

    Queue sep
    Call batchisp 'NJ NS NU QUEUE CONC(SYSEXEC,SYSPROC) BSS(2)'
    Queue ' ISPSTART CMD(%'xcmd' /2)';Queue '/*';Queue '//*';Queue sep
    Call CSDL parm1 ver '/XC' odsn2 odsn3
    Call batchisp 'NJ NS NU QUEUE CONC(SYSEXEC,SYSPROC) BSS(3)'
    Queue ' ISPSTART CMD(%'xcmd' /5)';Queue '/*';Queue '//*';Queue sep
JCL1:
    Queue ''
    dd='DD'Time('s')
    ztempf=$ztempf()
    "ALLOC DD("dd") DS('"ztempf"') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    Address ISPEXEC;rbmacro=1;"VPUT (rbmacro) SHARED"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    "VIEW DATAID(&DATAID) MACRO("xcmd")"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD("dd")";x=$ztempf(ztempf,'/D')

ext1:
/*  If alter Then Exit                                                */
    If \panel_built Then exit
    Address ISPEXEC "LIBDEF ISPPLIB";Address TSO "DELETE '"idsn1"'"
    Exit

/*--------------------------------------------------------------------*/
/* Second stage. Process output of Stage_1 to extract groups that     */
/* have changed to print their object(s).                             */
/*--------------------------------------------------------------------*/
Stage_2:
Trace r
    groupl=;Address TSO
    "ALLOC F(CSDC01) DSN('"odsn1"') SHR REU"
    "EXECIO * DISKR CSDC01 (STEM linei. FINIS)"
    "FREE F(CSDC01)"
    Do i=7 To linei.0
        Parse VAR linei.i w1 .
        If Wordpos(w1,'* RDO')>0 Then Iterate
        If Strip(linei.i)='' Then Iterate
        Parse VAR linei.i ')' . '(' group ')'
        If group='' Then Leave
        group=strip(group)
        If Wordpos(group,groupl)=0 Then groupl=groupl group
    End
    "NEWSTACK"
    Queue '*';Queue "* Input - '"odsn2"'";Queue '*'
    Do While groupl/=''
        Parse VAR groupl group groupl;group=Substr(group,1,8)
        Queue 'EXTRACT GROUP('group') USERPROGRAM(DFH0CBDC) OBJECTS'
    End;Queue ''
    x=Msg('Off');"DELETE '"odsn2"'"
    "ALLOC F(CSDC02) DSN('"odsn2"') NEW TRACKS SPACE(1,1)" unitvol_op,
        "REU RECFM(F) LRECL(80) CATALOG"
        "EXECIO * DISKW CSDC02 (FINIS"
    "FREE DD(CSDC02)"
    If on_line Then Address ISPEXEC "VIEW DATASET('"odsn2"')"

    Return 0

/*--------------------------------------------------------------------*/
/* Third stage. Input output of Stage_2 to create CSD group extracts  */
/* into a flat file.                                                  */
/*--------------------------------------------------------------------*/
Stage_3:
    Address TSO;"NEWSTACK"
    jid=Substr(Userid()'CCR',1,8)
    Call JC '/Q'
    Call CSDL parm1 ver '/XC' odsn2 odsn3
    Queue ''
    dd='DD'Time('s')
    ztempf=$ztempf()
    "ALLOC DD("dd") DS('"ztempf"') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    Address ISPEXEC;rbmacro=1;"VPUT (rbmacro) SHARED"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    "VIEW DATAID(&DATAID) MACRO("xcmd")"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD("dd")";x=$ztempf(ztempf,'/D')

    Return 0

/*--------------------------------------------------------------------*/
/* Batch JCL generation .                                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
Stage_4:Arg type
    Address TSO;"NEWSTACK"
    jid=Substr(Userid()'CCR',1,8)
    Call JC '/Q'
    Call batchisp 'NJ NS NU QUEUE CONC(SYSEXEC,SYSPROC) BSS(3)'
    Queue ' ISPSTART CMD(%'xcmd' /'st')'
    Queue ''
    dd='DD'Time('s')
    ztempf=$ztempf()
    "ALLOC DD("dd") DS('"ztempf"') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    Address ISPEXEC;rbmacro=1;"VPUT (rbmacro) SHARED"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    "VIEW DATAID(&DATAID) MACRO("xcmd")"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD("dd")";x=$ztempf(ztempf,'/D')

    Return 0

/*--------------------------------------------------------------------*/
/* Fifth stage. Process output of Stage_1 to extract groups that      */
/* have changed to print their object(s).                             */
/*--------------------------------------------------------------------*/
Stage_5:
Macro_5:
    rbmacro=;"VPUT (rbmacro) SHARED"
    "ISREDIT (dataset)=DATASET";If dataset/=odsn4 Then Do
        zedsmsg=
        zedlmsg="Must be viewing '"odsn4"' for stage 5."
        Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit
    End
    changes=;Address TSO
    "ALLOC F(CSDC01) DSN('"odsn1"') SHR REU"
    "EXECIO * DISKR CSDC01 (STEM linei. FINIS)"
    "FREE F(CSDC01)"
    Do i=7 To linei.0
        Parse VAR linei.i w1 .
        If Wordpos(w1,'* RDO')>0 Then Iterate
        If Strip(linei.i)='' Then Iterate
        Parse VAR linei.i obj '(' type ')' . '(' group ')'
        If group='' Then Leave
        If type='SESSION' Then type='SESSIONS'
        changes=changes Space(obj'/'type'/'group,0)
    End
    Address ISREDIT;"X ALL";"DELETE ALL X";"COPY '"odsn3"' BEFORE .ZFIRST"
    "(status)=USER_STATE";"X ALL";"(last)=LINENUM .ZLAST"
    "CURSOR=1 0"
    Do Forever
        "SEEK 'DEFINE ' 1 NEXT"
        If rc/=0 Then Do
            "SEEK '*DEFINE ' 1 NEXT";If rc/=0 Then Leave
        End
        "(linf)=LINENUM .ZCSR";"(line)=LINE .ZCSR"
        Parse VAR line . type '(' obj ')' . '(' group ')'
        If Wordpos(Space(obj'/'type'/'group,0),changes)=0 Then Iterate
        "SEEK 'DEFINE ' 1 NEXT"
        If rc/=0 Then Do
            "SEEK '*DEFINE ' 1 NEXT";If rc/=0 Then lint=last+1
            Else "(lint)=LINENUM .ZCSR"
        End
        Else "(lint)=LINENUM .ZCSR"
        Do linf=linf To lint-1;"XSTATUS" linf"=NX";End
        If lint>last Then Leave
        "CURSOR="lint-1 0
    End

    "DEL ALL X"
    If on_line Then "USER_STATE=(status)";Else "END"
    Return 0

/*--------------------------------------------------------------------*/
/* Come in as a macro to put informative notelines in gen'd JCL.     */
/*--------------------------------------------------------------------*/
Get_Alter_Data:
    #popr=6;#popc=12
    validtypes=CSDA$('validtypes')
    csr=;findtype=;validtypeu=Translate(validtypes)
/*--------------------------------------------------------------------*/
/*If alter_parm='' Then alter_parm='GROUP(ALK@) DB2CONN(RCT00A)'      */
If alter_parm='' Then Do
    alter_parm='GROUP(DFHCOMP3):TRANSACTION(CEMT)'
    msgx='Transaction "CEMT" has been set up as a default sample.'
End
Else msgx=
    alter_parm=Translate(alter_parm,' ',':')
    Parse VAR alter_parm 'GROUP(' group ')' resource '(' entry ')'
    Parse Value group resource entry With group resource entry
    If resource/='' Then Do
        ch1=Substr(resource,1,1);ptr=1
        Do Forever
            ptr=Index(validtypeu,' 'ch1,ptr);If ptr=0 Then Leave
            xx=$wordat(validtypes,ptr+1)
            yy=Verify(xx,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789','N')
            pref=Substr(xx,1,yy-1)
            If Index(' 'resource,' 'pref)>0 Then Do;findtype=xx;Leave;End
            ptr=ptr+1
        End
    End
    If findtype='' Then Do
        msgx='Invalid ''resource'' "'findt'" entered. Format is',
             '"resource(entry)" - Where resource must be in list:',
             Space(Translate(validtypes,'/',','))'.'
        in_error=1;csr1='CD'
    End;Else cd=Word(validtypes,Wordpos(findtype,validtypes)-1)
    #panel1=2                               /* First panel number     */
    #panels=2                               /* Number of panels       */
    #tr1=Trace('o');Call Build_panel;x=Trace(#tr1)
    noitems=Words(validtypes)%3
    dynav=;shadv=;xxx=validtypes;ent_len=18
    #tr=Trace('o')
    Do while xxx/=''
        Parse VAR xxx w1 w2 w3 xxx
        yy=Verify(w2,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789','N')
        w2=Substr(w2,1,ent_len-2)
        dynav=dynav||Right(w1,2) w2
        shadv=shadv||'yy 'Copies('w',yy-1)Copies('t',ent_len-(yy+1))
    End
    x=Trace(#tr)
    zcmd=;zedsmsg=;zedlmsg=msgx;csr=
    zwinttl='CSD Alter Generator';typ#='INPUT'
    j=0
    If mdisp='NEW' | Sysdsn("'"odsn1"'")/='OK' Then Do
      x=ol('* The following datails will be input to stage #2 of CSDC process.')
      x=ol('* Watch case as "entries" are case sensitive and column aligned.')
      x=ol('*')
      x=ol("* Format:       (usig CSD:"parm1")")
      x=ol('entry    (resource    )  GROUP(group   )')
      x=ol('-------- --------------  ---------------')
    End
    entry_list=
    Address ISPEXEC
    Do Forever
        "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
        If zedlmsg/='' Then "SETMSG MSG(ISRZ001)                        "
        "DISPLAY PANEL("xcmd"P2) CURSOR(&CSR)";rc1=rc;"REMPOP";csr1=
        If rc1/=0 Then Leave
        If Substr(zcmd,1,3)='CAN' Then Do
            Address TSO "DELSTACK"
            zedlmsg='Alter parameter entry screen "cancelled".'
            "SETMSG MSG(ISRZ001)"
            Signal ext1
        End
        If Wordpos(zcmd,'? HELP ?? /? /HELP')>0 Then Do
            x=$BR(xcmd "??")
            Iterate
        End
        If csr='DYNAV' Then ptr=csp;Else ptr=Index(dynav,' 'cd+0)
        ptr=ptr%(ent_len+1)+1;findtype=Word(dynav,ptr*2);cd=Word(dynav,ptr*2-1)
        resource=Translate(findtype)
        If $lastchr(resource)='S' Then,
            resource=Substr(resource,1,Length(resource)- 1)
        x=ol(Left(entry,8) '('Left(resource,12)')  GROUP('Left(group,8)')')
        entry_list=entry_list 'GROUP('group'):'resource'('entry')';csr='ENTRY'
        zedlmsg='Modify for next entry.  Already queued:' entry_list'.'
    End
    lineo.0=j
    If entry_list='' Then Do
        Address TSO "DELSTACK"
        zedlmsg='No alter parameters entered. Processing abandoned.'
        "SETMSG MSG(ISRZ001)"
        Signal ext1
    End
    dd='DD'Time('s')
    Address TSO
    If mdisp='NEW' Then Do
        x=Msg('Off');"DELETE '"odsn1"'";x=Msg(x)
        "ALLOC F("dd") DSN('"odsn1"') NEW TRACKS",
             "SPACE(15,1)" unitvol_op "REU RECFM(F B) LRECL(80)",
             "BLKSIZE(27920) CATALOG"
    End
    Else Do
        "ALLOC F("dd") DSN('"odsn1"') SHR REU"
        "EXECIO * DISKR "dd" (STEM linei. FINIS)"
        "ALLOC F("dd") DSN('"odsn1"') SHR REU"
        "EXECIO * DISKW "dd" (STEM linei.)"
    End
    "EXECIO * DISKW "dd" (STEM lineo. FINIS)"
    "DELSTACK"
    Address
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    n_st=mark(2)    /* Mark Start */
/*
*---------------------------ooo000OOOO000ooo---------------------------*
* Good `TOD. `CNAME..                                                  *
*                                                                      *
* The following data will be input to stage #2 processing of the CSDC  *
* cycle.  The next display will be the JCL to execute it.  You can     *
* either submit it or end out and either add to this list by           *
* reinvoking "CSDC" with a '/MA' (append) option with other resources  *
* or invoke "CSDC" with a '/MJ' option to generate JCL to process the  *
* CSDC01 dataset while it still exists.  In the interim you can edit   *
* it and manipulate it to your liking, add to it using the '/MA'       *
* option or add to it using the '/CSDC' option under CSDA.             *
*                                                                      *
* Note: The first 6 lines will not be processed and are only there to  *
*       match the CSGCSDDC program output format.                      *
*                                                                      *
*----------------------------------------------------------------------*
*/
    n_en=mark(-2)   /* Mark End   */
    Address TSO;"NEWSTACK";qit='Y';Call process_source;Address
    umodelds='*';"VPUT (umodelds) SHARED"
    "EDIT DATAID(&DATAID) MACRO(UMODEL)"
    "LMFREE DATAID(&DATAID)"
    Address TSO
    "ALLOC F("dd") DSN('"odsn1"') SHR REU"
    "EXECIO 1 DISKR "dd" (STEM linei. FINIS)"
    "FREE DD("dd")"
    Address
    If linei.0=0 Then Do
        zedlmsg='As there is no data in file, processing abandoned.'
        "SETMSG MSG(ISRZ001)"
        Signal ext1
    End
    Return 0
ol:j=j+1;lineo.j=Arg(1);Return 0

/*--------------------------------------------------------------------*/
/* Come in as a macro to put informative notelines in gen'd JCL.     */
/*--------------------------------------------------------------------*/
Macro_1:
    rbmacro=;"VPUT (rbmacro) SHARED"
    "ISREDIT RESET"
    n_st=mark(2)                            /* Mark next line         */
/*

    Good `TOD. `CNAME..

    This is the JCL that has been generated from the parameters you
    have supplied.
    Enter SUB on the command line if you wish to submit the job,
                           - or -
    copy/cut & paste it into a dataset(member) for later submission.

    If everything works OK, you will have your define statements in
    dataset:
        '`ODSN4.'


*/
    n_en=mark(-2)                           /* Mark prev 2 line       */

    Call noteline_it

    Return 0

/*--------------------------------------------------------------------*/
/* Generate the notelines from inbuilt comments.                      */
/*--------------------------------------------------------------------*/
noteline_it:
    Address ISREDIT

    "(caps)=CAPS";"CAPS=OFF"
    x=nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    qit='N'
        Signal scr1
    x=nl('*'Copies('-',70)'*')
    "CAPS=(caps)";"UP MAX";"MEND"
    Exit

/*--------------------------------------------------------------------*/
/* Generic one lienr paragraphs.                                      */
/*--------------------------------------------------------------------*/
errsyntax:Signal Off Syntax;Interpret Signal retsyn
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
nl:Parse Arg ntl;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)";Return 0

/*--------------------------------------------------------------------*/
/* Generic one lienr paragraphs.                                      */
/*--------------------------------------------------------------------*/
Build_panel:
    mempref='CSDCP';panel_built=1

    Address TSO;x=Msg('Off')
    "DELETE '"idsn1"'"
    dd='IA'Time('s')
    "ALLOC DA('"idsn1"') NEW CATALOG CYL SPACE(10,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0)" unitvol_op "DIR(2)",
       "RECFM(F B) REU"
    "FREE DA('"idsn1"')"

    Do i=#panel1 To #panels
        pann=mempref||i
        Interpret "Call make_mem_"i
        Call build_queue
    End

    Address ISPEXEC
    "LIBDEF ISPPLIB DATASET ID('&IDSN1') STACK"

    Return 0

/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    qit='Y'
    Call process_source
    Queue ''

    "ALLOC F("dd") DA('"idsn1"("pann")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    "DELSTACK"

    Return 0


/*--------------------------------------------------------------------*/
/* Queue or noteline instream source                                 */
/*--------------------------------------------------------------------*/
process_source:
    cname='there';sname='batch'
    Signal On Syntax Name ret_syntax_1
    Parse Value $Whoami() With cname sname
ret_syntax_1:
    Signal Off Syntax
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End
    #i_backup=i;#j_backup=j

    #tr=Trace('O')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        If qit='Y' Then Queue line
        Else x=nl('*'Substr(line,1,70)'*')
    End
    x=Trace(#tr)

    i=#i_backup;j=#j_backup
    Return 0

/*--------------------------------------------------------------------*/
/* Create member "CSDCP1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(2)
/*
)ATTR
  + TYPE(TEXT)  INTENS(LOW) COLOR(GREEN) SKIP(ON)
  @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)
  ? TYPE(INPUT) INTENS(HIGH) HILITE(USCORE)
  $ TYPE(OUTPUT) INTENS(HIGH)
  ~ TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
  # TYPE(TEXT)  INTENS(LOW) COLOR(TURQ) HILITE(USCORE)
)BODY EXPAND(\\) SMSG(POPUPMSG) LMSG(POPUPMSG) WINDOW(52,23)
@&XTIM\-\ CSD Changes \-\-----
%&SID ===>_ZCMD
%
+Enter parameters below for CSD:
+ @&PARM1
+           #Date          +         #Time        +
+  From%===>?Z +/?Z +/?Z   +  To%===>?Z +:?Z +:?Z +
+  To  %===>?Z +/?Z +/?Z   +  To%===>?Z +:?Z +:?Z +
+
+  Just changes:
+      %===>?Z+  @O+- Just report changes (online)
+                @Y+- Just report changes (batch)
+                @D+- Generate appliable@DEFINE
+                     statements (batch).
+  Ver %===>_Z +  CICS version for option@D+above.
+Month and years can be left blank and let $DATEMAN
+fill it in for you.
+Leave time as 'HH:MM:SS' unless you want to fine
+tune changes detection. However, if any component
+is changed ALL must be changed to valid numerics.
+
+Use%END+PF key to terminate session.
+$Z+
)INIT
  &SID = &ZSYSID
  &XTIM= &ZTIME
  .ZVARS='(DD1 MM1 YY1 H1 M1 S1 DD2 MM2 YY2 H2 M2 S2 JUSTC VER POPUPMSG)'
)PROC
  VER(&DD1,NB,NUM)
  VER(&MM1,NUM)
  VER(&YY1,NUM)
  VER(&DD2,NB,NUM)
  VER(&MM2,NUM)
  VER(&YY2,NUM)
  If (&H1 ¬= 'HH')
     VER(&H1,RANGE,0,24)
     VER(&M1,RANGE,0,59)
     VER(&S1,RANGE,0,59)
     VER(&H2,RANGE,0,23)
     VER(&M2,RANGE,0,59)
     VER(&S2,RANGE,0,59)
  If (&M1 ¬= 'MM')
     VER(&H1,RANGE,0,24)
     VER(&M1,RANGE,0,59)
     VER(&S1,RANGE,0,59)
     VER(&H2,RANGE,0,23)
     VER(&M2,RANGE,0,59)
     VER(&S2,RANGE,0,59)
  If (&S1 ¬= 'SS')
     VER(&H1,RANGE,0,24)
     VER(&M1,RANGE,0,59)
     VER(&S1,RANGE,0,59)
     VER(&H2,RANGE,0,24)
     VER(&M2,RANGE,0,59)
     VER(&S2,RANGE,0,59)
  If (&H1 = 24)
     VER(&M1,RANGE,0,0)
     VER(&S1,RANGE,0,0)
  If (&H2 ¬= 'HH')
     VER(&H1,RANGE,0,23)
     VER(&M1,RANGE,0,59)
     VER(&S1,RANGE,0,59)
     VER(&H2,RANGE,0,23)
     VER(&M2,RANGE,0,59)
     VER(&S2,RANGE,0,59)
  If (&M2 ¬= 'MM')
     VER(&H1,RANGE,0,23)
     VER(&M1,RANGE,0,59)
     VER(&S1,RANGE,0,59)
     VER(&H2,RANGE,0,23)
     VER(&M2,RANGE,0,59)
     VER(&S2,RANGE,0,59)
  If (&S2 ¬= 'SS')
     VER(&H1,RANGE,0,23)
     VER(&M1,RANGE,0,59)
     VER(&S1,RANGE,0,59)
     VER(&H2,RANGE,0,23)
     VER(&M2,RANGE,0,59)
     VER(&S2,RANGE,0,59)
  If (&H2 = 24)
     VER(&M2,RANGE,0,0)
     VER(&S2,RANGE,0,0)
  VER(&JUSTC,NB,LIST,Y,D,O)
  If (&JUSTC = 'D')
     VER(&VER,NUM)
)END
*/
    n_en = mark(-2);Return 0

/*--------------------------------------------------------------------*/
/* Create member "CSDCP2" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_2: n_st = mark(2)
/*
)ATTR DEFAULT(%?_)
 _ TYPE(INPUT)   INTENS(HIGH) COLOR(RED)    HILITE(USCORE)
 ~ TYPE(&TYP#)   INTENS(HIGH) COLOR(RED)    HILITE(USCORE) CAPS(OFF)
 # TYPE(&TYP#)   INTENS(HIGH) COLOR(RED)    HILITE(USCORE)
 @ TYPE(TEXT)    INTENS(HIGH) COLOR(YELLOW)
 + TYPE(TEXT)    INTENS(LOW)  COLOR(GREEN)
 $ TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)
 ! AREA(DYNAMIC)
 ¬ TYPE(DATAIN)  INTENS(HIGH) COLOR(RED) CAPS(ON) HILITE(USCORE)
 { TYPE(DATAOUT) INTENS(LOW)  COLOR(TURQ) CAPS(OFF) SKIP(ON)
 } TYPE(DATAOUT) INTENS(LOW)  COLOR(GREEN) CAPS(OFF) SKIP(ON)
 w TYPE(CHAR) COLOR(WHITE)
 W TYPE(CHAR) COLOR(WHITE) HILITE(USCORE)
 y TYPE(CHAR) COLOR(YELLOW)
 b TYPE(CHAR) COLOR(BLUE)
 B TYPE(CHAR) COLOR(BLUE) HILITE(USCORE)
 r TYPE(CHAR) COLOR(RED)
 t TYPE(CHAR) COLOR(TURQ)
 g TYPE(CHAR) COLOR(GREEN)
)BODY EXPAND(\\) WINDOW(60,22)
%&SID%=>_ZCMD
%
+Enter details below:
+Entry....~ENTRY   +
+Resource.#CD+Enter code from list below (or place cursor):
+Group....~GROUP   +
   !DYNAV,SHADV                                            !
   !                                                       !
   !                                                       !
   !                                                       !
   !                                                       !
   !                                                       !
   !                                                       !
   !                                                       !
   !                                                       !
   !                                                       !
   !                                                       !
+DFHCSD...#PARM1                                       +
@  [ENTER]+- Add entry to list.
@  END    +- Process list.
@  CANcel +- abandon,@?+-tutorial.
)INIT
 .ATTR (PARM1)='COLOR(BLUE)'
 &SID=&ZSYSID
)PROC
 &CSR=.CURSOR
 &CSP=.CSRPOS
 &CHAR1=TRUNC(&ZCMD,1)
 IF (&CHAR1 ¬= '/')
    IF (&ZCMD ¬= '?','CANCEL','CAN')
       VER(&ENTRY,NB)
       IF (&TYP# ¬= 'OUTPUT')
          IF (&CSR ¬= DYNAV)
          IF (&ENTRY ¬= '?')
             IF (&CSR ¬= DYNAV)
                VER(&CD,NB,RANGE,1,&NOITEMS)
       VER(&GROUP,NB)
       VER(&PARM1,NB,DSNAME)
)END
*/
    n_en = mark(-2)                         /* Mark end of data       */
    Return 0

