/******************************** REXX ********************************/
CSDL:CSDL_ver='2.20'
n_st=mark(2)    /* Mark Start */                                  /*QH*/
/*                                                                /*QH*/
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* CSDL:  CSD List  [ V2.16 ]                                         */
/*                                                                    */
/* Command to list the CSD from ISPF option 3.4.                      */
/*                                                                    */
/* Will add the following lines at the top to facilitate "CSDA"       */
/* processing in identifying the source CSD:                          */
/*    ***********************************************************     */
/*    * CSD file: 'DN%CICS.CICSvvv.DFHCSD' /VB .                      */
/*    ***********************************************************     */
/*                                                                    */
/* Parameters:                                                        */
/*  Positional:                                                       */
/*    1.  CSD dataset name (quoted).                                  */
/*  Keyword:                                                          */
/*    /41 - Use CICS V 4.1  SDFHLOAD dataset.                         */
/*    /13 - Use CICS TS 1.3 SDFHLOAD dataset.                         */
/*    /23 - Use CICS TS 2.3 SDFHLOAD dataset.                         */
/*    /AO - LIST ALL OBJECTS.                                         */
/*    /B  - Expect BIG output.  Overallocate and then release.        */
/*    /H  - Hard copy. Output to DASD as 'userid.csd_name.Dyymmdd'    */
/*          Without this parameter the output dataset name            */
/*          (SET command) is commented out.                           */
/*    /LX - List eXtract.  Extract the CSD name from a previously     */
/*          executed "CSDL /H" command.  Will drop off the hlq and    */
/*          llq.                                                      */
/*          Will force a "/H" (hard copy).                            */
/*    /O  - LIST ALL OBJECTS.                                         */
/*    /Q  - Statements are supplied in the Queue                      */
/*    /S  - Submit JCL without edit.                                  */
/*    /T  - Trace. Used for debugging purposes.                       */
/*    /U  - Update the CSD.                                           */
/*    /W  - Update (Write)the CSD.                                    */
/*    /XC - eXtract Changes (reserved for CSDC - do not use manually) */
/*          This parameter should be immediately followed by the name */
/*          of the sysin dataset and CDBOUT dataset                   */
/*    /XD - eXtract Dsname.  Same as '/LX'. I could never remember    */
/*          the correct one and this is another backup.               */
/*    /XL - eXtract List.  Same as '/LX'. I could never remember the  */
/*          correct one so I defined both (couse I CAN).              */
/*          Will force a "/H" (hard copy).                            */
/*                                                                    */
/*  Packaging:                                                        */
/*  The following members are required to package this product.       */
/*   REXX:                                                            */
/*     $ALKCICS - Set CICS datasets according to version.             */
/*     $ALKJC   - Jobcard.                                            */
/*     $ALKJCPG - Jobcard program name.                               */
/*     $ALKLOAD - Set loadlibrary name.                               */
/*     $DATEMAN - Set date suffix for hardcopy creation.              */
/*   Load Modules:                                                    */
/*     BATCHSIN - Program to take variables for dynamic SYSIN         */
/*                inclusion.                                          */
/*     DFH0CBDC - IBM supplied CSD extract program.                   */
/*--------------------------------------------------------------------*/
*/                                                                /*QH*/
n_en=mark(-2)   /* Mark End   */                                  /*QH*/
Address ISPEXEC "CONTROL ERRORS RETURN";ima_macro=0               /*QH*/
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
                                                                  /*QH*/
w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1   /*QH*/
If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc        /*QH*/
If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me        /*QH*/
Parse Source . . xcmd .;x=$Br(xcmd "??");Return                   /*QH*/
Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)  /*QH*/
Help_me:Signal Off Syntax;#tr=Trace("o")                          /*QH*/
Do i=n_st To n_en;nl=Sourceline(i)                                /*QH*/
If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"               /*QH*/
Else Say Substr(nl,1,79);End;Return 0                             /*QH*/
                                                                  /*QH*/
No_help_#1:                                                       /*QH*/
    If Wordpos('/T',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/T',parm#),1);#tr=Trace('r')
    End;Else #tr='N'
    Select
        When Wordpos('/41',parm#)>0 Then ver=41
        When Wordpos('/13',parm#)>0 Then ver=13
        When Wordpos('/22',parm#)>0 Then ver=22
        When Wordpos('/23',parm#)>0 Then ver=23
        When Wordpos('/31',parm#)>0 Then ver=31
        Otherwise ver=
    End
    If ver/='' Then parm#=Delword(parm#,Wordpos('/'ver,parm#),1)
    v1='loadmnt dfh0cbdc'
    Interpret "Parse Value $alkcics(v1,ver) With" v1
    steplib=$alkload()

    If Wordpos('/XC',parm#)>0 Then Do
        xx=Subword(parm#,Wordpos('/XC',parm#),3)
        parm#=Delword(parm#,Wordpos('/XC',parm#),3);x_c=1
        Parse VAR xx . x_c_idsn x_c_odsn
    End;Else Parse Value '0' With x_c x_c_idsn x_c_odsn

    If Wordpos('/H',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/H',parm#),1);hard_copy=1
    End;Else hard_copy=0
    If Wordpos('/U',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/U',parm#),1);update=1
    End;Else update=0
    If Wordpos('/W',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/W',parm#),1);update=1
    End
    If Wordpos('/S',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/S',parm#),1);subit=1
    End;Else subit=0
    If Wordpos('/HX',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/HX',parm#),1);x_c=1
    End
    If Wordpos('/Q',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/Q',parm#),1);from_q=1
    End;Else from_q=0
    If Wordpos('/B',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/B',parm#),1);big_o=1
    End;Else big_o=0
    If Wordpos('/LX',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/LX',parm#),1);ext_csd=1
        hard_copy=1
    End;Else ext_csd=0
    If \ext_csd Then,
        If Wordpos('/XL',parm#)>0 Then Do
            parm#=Delword(parm#,Wordpos('/XL',parm#),1);ext_csd=1
            hard_copy=1
        End
    If \ext_csd Then,
        If Wordpos('/XD',parm#)>0 Then Do
            parm#=Delword(parm#,Wordpos('/XD',parm#),1);ext_csd=1
        End

    list='LIST'
    If Wordpos('/O',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/O',parm#),1);list='LIST ALL OBJECTS'
    End
    Else If Wordpos('/AO',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/AO',parm#),1);list='LIST ALL OBJECTS'
    End

    Parse Upper VAR parm# csd parm#;csd=Strip(csd,,"'")
    If csd='' Then Do
        zedsmsg=
        zedlmsg='Missing CSD dataset name.  Please provide and try again.'
        "SETMSG MSG(ISRZ001)";Exit
    End
    If ext_csd Then Do
        Parse VAR csd '.' csd
        csd=Substr(csd,1,Lastpos('.',csd)-1)
    End
    llq=Substr(csd,Lastpos('.',csd)+1)
    If Wordpos(llq,'DATA INDEX')>0 Then,
        csd=Substr(csd,1,Lastpos('.',csd)-1)
    xx=Listdsi("'"csd"' DIRECTORY NORECALL")
    If xx<5 | sysreason=9 | sysreason=25 Then zdlvol=
    Else "VGET (zdlvol)"
    If zdlvol='*VSAM*' Then zdlvol=

    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    prog="CSD Print list"
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(xcmd);If x/='' Then prog=x
error_off_alkjcpg:Signal off Syntax

    userid=Userid();"VGET (zacctnum)";acct=zacctnum
    hlq=$alkhlqo()
    outlist=Substr(hlq'.'csd'.D'$DATEMAN('REV',,2,'D'),1,44)
    If Lastpos('.',outlist)=Length(outlist) Then,
    outlist=Substr(outlist,1,Length(outlist)-1)
    If x_c & x_c_odsn='' Then x_c_odsn='&OUTLIST.X'
    v1='def_ex def_hd def_ac def_bb def_vm main'
    Interpret "Parse Value $alkjc(v1) With" v1
    mcl=def_bb;xcl=def_ex;hcl=def_hd

    Call build_jcl

    If subit Then Do
        Queue "ZZ"
        #m1=Msg('On');x=Outtrap('line.',10,'NOCONCAT')
        Address TSO "SUBMIT * END(ZZ)"
        x=Msg(#m1)
        Do i=1 To line.0
            If Index(line.i,'SUBMITTED')>0 Then Do
                If Wordpos('JOB',line.i)=0 Then Iterate
                zedlmsg=line.i
                "SETMSG MSG(ISRZ001)";Signal ext1
            End
        End
    End

    Queue ''
/*  "VGET ZTEMPF"                                                     */
    ztempf=$ztempf()
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    Address TSO 'DELSTACK'
    "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    "EDIT DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD(ZTEMPF)"
    #m1=Msg('Off');Address TSO "DELETE '"ztempf"'";x=Msg(#m1)

ext1:
    Exit

Build_jcl:
    If sysid='NB1' Then Do                  /* Dupont's NIB           */
        rg1=
        amp="//*"
    End
    Else Do
        rg1=',REGION=0M'
        amp="//            AMP=('BUFNI=30','BUFND=90'),"
    End
    Signal on Syntax Name error_off_$ALKUVOL
    uvol_tb="UNIT=SYSDA";uvol_pb="UNIT=SYSALLDA"
    uvol_tb=$ALKUVOL('$ZTEMPF',,'J');uvol_pb=$ALKUVOL('SMS',,'J')
error_off_$ALKUVOL:Signal off Syntax
/*  If uvol_tb/='' Then uvol_tb=uvol_tb','                            */
    If uvol_pb/='' Then uvol_pb=uvol_pb','
    sep=Substr('//*',1,70,'-')'*'
    Address TSO
    If x_c & x_c_idsn/='' Then Nop
    Else Do
        If from_q Then Do
            ii=0
            Do Queued()
                ii=ii+1;Parse PULL lineq.ii
            End
            lineq.0=ii
        End
        "NEWSTACK"
        Queue "//"userid"L JOB "acct",'"prog"',"
        Queue "//        MSGLEVEL=1,LINES=9999,"
        Queue '//        MSGCLASS='mcl',CLASS='xcl', TIME=1440,'
        Queue '//        NOTIFY=&SYSUID  TYPRUN=SCAN'
/*      If main/='' Then Queue main                                   */
    End
    Queue '//*'
    Queue "//VARS1 SET XTRA=' /VB .'"
    Queue '//*'
    Queue '//VARS2 SET DFHCSD='csd
    Queue '//      SET FROMCSD='csd '<- Change'
    If hard_copy Then xx='// ';Else xx='//*'
    Queue Substr(xx'     SET OUTLIST='outlist' <- Ver.',1,71)
    Queue '//*'
    Queue '//      SET CSDLOAD='loadmnt
    Queue '//      SET VOLUME='zdlvol
    If update Then Do
        Queue '//      SET CSDACT=READWRITE                 Update CSD desired'
        Queue '//*     SET CSDACT=READONLY                  Report CSD desired'
    End
    Else Do
        Queue '//*     SET CSDACT=READWRITE                 Update CSD desired'
        Queue '//      SET CSDACT=READONLY                  Report CSD desired'
    End
    Queue '//*'
    Queue sep
    Queue Substr('//*',1,70)'*'
    x='//* Check JCL, tweak the command if you have to and manually submit'
    Queue Substr(x,1,70)'*'
    Queue Substr('//* the job.',1,70)'*'
    Queue Substr('//*',1,70)'*'
    Queue sep
    Queue Substr('//*',1,70)'*'
    x='//* This step will generate a temporary file containing the CSD'
    Queue Substr(x,1,70)'*'
    x='//* dataset name for inclusion into the SYSIN data to readily'
    Queue Substr(x,1,70)'*'
    x='//* identify the dataset in the output listing.'
    Queue Substr(x,1,70)'*'
    Queue Substr('//*',1,70)'*'
    Queue sep
    If hard_copy Then Do
        If Sysdsn("'"Strip(Strip(outlist),,"'")"'")='OK' Then Do
            Queue '//         EXEC PGM=IEFBR14'
            Queue '//SYSOUT   DD DSN=&OUTLIST,'
            Queue '//            DISP=(MOD,DELETE),'
            Queue '//            UNIT=SYSALLDA,'
            Queue '//            SPACE=(TRK,(0,0))'
            Queue '//*'
            Queue sep
        End
    End
    Queue '//         EXEC PGM=BATCHSIN,'
    Queue "// PARM='* CSD file: ''&DFHCSD''&XTRA'"
    Queue '//STEPLIB  DD DISP=SHR,DSN='steplib
    Queue '//SYSOUT   DD DISP=(NEW,PASS),DSN=&&SYSGCD1,'
    Queue '//            SPACE=(TRK,(1,1)),'
    If uvol_tb/='' Then Queue '//            'uvol_tb','
    Queue '//            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB)'
    Queue '//*'
    Queue sep
    Queue Substr('//*',1,70)'*'
    Queue Substr('//* CSD process/update',1,70)'*'
    Queue Substr('//*',1,70)'*'
    Queue sep
    If x_c Then Do
        Queue '//DELETE   EXEC PGM=IEFBR14'
        Queue '//CBDOUT   DD DSN='x_c_odsn','
        Queue '//            DISP=(MOD,DELETE),'
        Queue '//            UNIT=SYSALLDA,'
        Queue '//            SPACE=(TRK,(0,0))'
        Queue '//*'
    End
    Queue "//UPDATE   EXEC PGM=DFHCSDUP,PARM='CSD(&CSDACT)'"rg1
    Queue '//STEPLIB  DD DISP=SHR,DSN=&CSDLOAD'
    If dfh0cbdc/=loadmnt Then,
        Queue '//         DD DISP=SHR,DSN='dfh0cbdc'    <- Home of DFH0CBDC'
    Queue '//*        DD DISP=SHR,DSN=Migrated.table.if.not.&CSDLOAD'
    Queue '//DFHCSD   DD DISP=SHR,DSN=&DFHCSD,'
    Queue amp
    Queue '//            VOL=SER=&VOLUME,UNIT=SYSALLDA'
    Queue '//FROMCSD  DD DISP=SHR,DSN=&FROMCSD'
    If hard_copy Then Do
        Queue '//SYSPRINT DD DSN=&OUTLIST,'
        Queue '//            DISP=(NEW,CATLG),'
        If uvol_pb/='' Then Queue '//            'uvol_pb
        If big_o Then Queue '//            SPACE=(CYL,(30,15),RLSE)'
        Else          Queue '//            SPACE=(TRK,(30,15),RLSE)'
    End
    Else Queue '//SYSPRINT DD SYSOUT='hcl',OUTLIM=3000000'
    If x_c Then Do
        Queue '//CBDOUT   DD DSN='x_c_odsn','
        If x_c Then Queue '//            DISP=(NEW,CATLG),'
        Else  Queue '//            DISP=(MOD,CATLG),'
        If uvol_pb/='' Then Queue '//            'uvol_pb
        If big_o Then Queue '//            SPACE=(CYL,(60,15),RLSE),'
        Else          Queue '//            SPACE=(TRK,(60,15),RLSE),'
        Queue '//            DCB=(LRECL=80,BLKSIZE=0,RECFM=FB)'
    End
    Else Queue '//CBDOUT   DD SYSOUT='hcl',OUTLIM=3000000'
    Queue '//SYSIN    DD *'
    Queue '***********************************************************'
    Queue '//         DD DISP=(OLD,DELETE),DSN=&&SYSGCD1'
    Queue '//         DD *'
    Queue '***********************************************************'
    If x_c & x_c_idsn/='' Then Do
/*      Queue '//         DD DISP=SHR,DSN='x_c_idsn                   */
        Queue '//         DD DISP=MOD,DSN='x_c_idsn
        Queue '//*'
        Exit
    End
    If from_q Then Do ii=1 To lineq.0;Queue lineq.ii;End
    Else Queue list
    Queue '/*'
    Queue '//'

    Queue 'LIST ALL OBJECTS'
    Queue 'LIST G(        ) OBJECTS'
    Queue 'EXTRACT GROUP(        ) USERPROGRAM(DFH0CBDC) OBJECTS'
    Queue 'COPY G(        ) TO(        ) FROMCSD(FROMCSD)'
    Queue 'MIGRATE TABLE(        ) TOGROUP(        )'
    Queue 'MIGRATE TABLE(TCT.... ) TYPESGROUP(        )'
    Queue 'DEL  G(        )'
    Queue 'DEL  G(        ) REMOVE'
    Queue 'ADD  LIST(        ) G(        )'
    Queue 'REM  LIST(        ) G(        )'
    a=#a#
    Return 0

Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
