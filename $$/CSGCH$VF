/*--------------------------ooo00 REXX 00ooo--------------------------*/
    n_st=mark(2)                            /* Mark Start             */
/*

    Hello &CNAME..

    CSGCH$VF: CSGCH$ VeriFy member.

    This macro is designed to detect any new variables that have been
    included in an upgrade of CSGCH and have been shipped in member
    CSGCH$$.

    As CSGCH$ is unique to each system it cannot be overwritten yet
    the new variables have to be included in the member.
    For this purpose, CSGCH$$$ is shipped and used as a template.

    Use:
      Edit member CSGCH$ and hit it with this macro. The macro will
      replace the doco description in the original member (from the
      ")DOCO" eyecatcher) with CSGCH$$$. It will then look for any
      variables that have an explanation that are not in the upper
      part. These should be new variables and will be placed as
      notelines at the top of the member. These lines should be made
      into data (MD line command) and copied with it's appropriate
      equates into the top equate part of CSGCH$. For your
      convenience the preceeding variable's name is provided as
      'after "variable"' doco in the notelines.
      For this reason
      CSGCH$ doco should always reflect each variable used and should
      be verified using this macro everytime an CSGCH is upgraded.
      Ensure you get a upgraded copy of CSGCH$$$ with CSGCH.

*/
    n_en=mark(-2)                           /* Mark End               */
/*--------------------------------------------------------------------*/
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then Do;ima_macro=1;Address ISREDIT;End

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    If Wordpos(word(parm#,1),'? ?? /? HELP /H')>0 Then Signal Help_me

    ignlist='',
            'reg    ',
            'sid    ',
            'chgenvt',
            'parm1  ',
            ''
    "(status)=USER_STATE";"(last)=LINENUM .ZLAST";"COPY CSGCH$$$ AFTER .ZLAST"
    "F ')DOCO ' 1 LAST";"(lin#)=LINENUM .ZCSR";"LABEL" lin#-1"=.LINET"
    "F ')DOCO ' 1 FIRST"
    If rc/=0 Then Do
        "LINE_AFTER .ZLAST=' '";"CURSOR=.ZLAST"
    End
    "LABEL .ZCSR = .LINEF"
    "DEL ALL NX .LINEF .LINET"
    "RESET"
    "F ')DOCO ' 1 FIRST"
    "LABEL .ZCSR = .LINEF"
    "F '*- Must variable' 1 NEXT"
    "(lin#) = LINENUM .ZCSR"
    varp=;where='LINE_BEFORE .ZFIRST'
    #tr=Trace('o')
    Do While rc=0
        "CURSOR =" lin#+1 0
        "F '=' 13 13 NEXT"
        If rc/=0 Then Leave
        "(lin#)=LINENUM .ZCSR";"(line)=LINE .ZCSR"
        var=Substr(strip(line),1,9)
        "F '"var"' .ZFIRST .LINEF FIRST"
        If rc/=0 Then Do
            If notel = 'NOTEL' Then Do
                x=nl('/*'Copies('-',68)'*/')
                x=nl('/*'Substr('  The following varaiables have not',
                   'been defined:',1,68)'*/')
                x=nl('/*'Copies('-',68)'*/')
                notel='Y'
            End
            Parse VAR var xx '=' .
            xx=Strip(xx)
            If Index(ignlist,' 'xx' ')=0 Then Do
                "CURSOR =" lin# 0;"F '=' 13 13 PREV"
                If rc=0 Then Do
                    "(line)=LINE .ZCSR"
                    varp=Substr(strip(line),1,9)
                    Parse VAR varp varp '=' .
                    x=nl('    'var' after 'varp)
                End
                Else x=nl('    'var' missing(???)')
            End
        End
        rc=0

    End
    If Verify(#tr,'NO')>0 Then x=Trace('r')

Exi1:
    "USER_STATE=(status)"
    Return

nl: Parse Arg nl1
    "ISREDIT" where "= NOTELINE (nl1)";Return 0

Help_me:
    "ISREDIT (#member#)=MEMBER"
    If rc=0 Then Do;Address ISREDIT;ima_macro=1;End;Else ima_macro=0

    chgchar='&';cname='there'
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_1: Signal Off Syntax

    today=Date('e')
    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If Â¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    If ima_macro Then Do;"CAPS=(caps)";"UP MAX";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
