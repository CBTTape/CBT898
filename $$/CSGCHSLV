/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/*  CSGCHSLV - Routine to generate a SOLVE/CPMA template for cut/paste*/
/*             into the task docket.                                  */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Parse Upper Arg parm#
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    ima_macro=0

    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc>0 Then SIGNAL byp1
    ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    "VGET (csgchslv) SHARED";Interpret 'Signal macro_'csgchslv

macro_:
    non_r_job='Non routine Implement job.'
    non_r_job='>>>>...????...<<<<'

    Parse SOURCE . . xcmd .
    Parse Var parm# ifile CSDbreq chgmano chgmanc ex_act .
    Parse Var ifile . '.' . '.CH' chgdate .

    ignmemb=' ' Csgch$('ignmemb')' '
    string1=' ',
            '$CSD  C:CSD:',
            '$JOBL J:JOBlib:',
            '$PARM P:Parmlib:',
            '$PROC R:Proclib:',
            '$TAB  T:CICS tables:',
            '$UTIL U:In-house UTILLIB:',
            '$AUTH A:AUTHLIB:',
            '$CTRL M:Control-M:',
            '$LOAD L:Region loadlib:',
            '$DATA D:User datasets:',
            ' '
    string2=' ',
            'BU U:backup:',
            'ST S:staging:',
            'IM I:implement:',
            'BO B:backout:',
            'UP P:update:',
            'UP D:update user datasets:',
            'OC O:oper command:',
            'RS R:Review staging with backup:',
            'RU R:Review original with backup:',
            ' '

    "VGET (reg,sid,chgenvt,chgmano,chgmanc,chgnot) SHARED"
    v1='chgjclc csd_o proc_o proc_# tab_o util_o auth_o parm_o',
       'cicstl1 cicstl2 loadlib load_r csdsip',
       'jobl_o jobl_#',
       ''
    v2=Csgch$(v1)
    Interpret "Parse var v2" v1
Say 'chgenvt=>'chgenvt'<'

    csd_s  = csd_o'.ST'chgdate
    csd_u  = csd_o'.BU'chgdate
    jobl_u = jobl_#'.BU'chgdate
    jobl_s = jobl_#'.ST'chgdate
    proc_u = proc_#'.BU'chgdate
    proc_s = proc_#'.ST'chgdate
    tab_u  = tab_o'.BU'chgdate
    tab_s  = tab_o'.ST'chgdate
    util_s = util_o'.ST'chgdate
    util_u = util_o'.BU'chgdate
    auth_s = auth_o'.ST'chgdate
    auth_u = auth_o'.BU'chgdate
    parm_s = parm_o'.ST'chgdate
    parm_u = parm_o'.BU'chgdate
    load_# = load_r
    load_s = load_r'.ST'chgdate
    load_u = load_r'.BU'chgdate

    "LMINIT DATAID(DATA1) DATASET('&IFILE') ENQ(SHR)"
    "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    st_list=;bu_list=;im_list=;bo_list=;pr_list=
    unknown=
    member=
    lmrc=rc
    Do While lmrc=0
        "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) "||,
                "STATS(YES)"
        lmrc=rc
        If lmrc/=0 Then Leave
        member=Strip(member)
        If Substr(member,2,1)='#' Then Iterate
        If Wordpos(member,ignmemb)>0 Then Iterate
        pref1=Substr(member,1,1);pref3=Substr(member,1,3)
        suff2=Substr(member,Length(member)-1,2)
        Select
            When pref1='I' Then im_list=im_list member
            When pref1='B' Then bo_list=bo_list member
            When pref1='P' Then pr_list=pr_list member
            When pref3='$CU' Then bu_list=bu_list member
            When pref3='$CS' Then st_list=st_list member
            When suff2='BU' Then bu_list=bu_list member
            When suff2='ST' Then st_list=st_list member
            Otherwise unknown=unknown member
        End
    End
    "LMMLIST DATAID(&DATA1) OPTION(FREE)"

    "LMCLOSE DATAID(&DATA1)"
    "LMFREE  DATAID(&DATA1)"

    Address TSO "NEWSTACK"

    If Index(chgmano,'P')=0 Then Signal implementation
preparation:
    Queue 'CICS Support preparation:'
    Queue '-------------------------'
    Queue "1. From dataset '"ifile"', submitted the following"
    Queue '   member to generate backup datasets:'
    If bu_list='' Then Do
        If csdsip='N' Then,
            Queue '   *** HAVE YOU RUN THE BACKUP JOBS ???? ***'
        Else
            Queue '     N/A'
    End
    Do While bu_list/=''
        Parse VAR bu_list member bu_list
        desc=p_string1_1('U')
        Queue '     'Substr(member,1,8)' -' desc
    End
    Queue ' '
    Queue '   Generate staging datasets:'
    If st_list='' Then Do
        If csdsip='Y' Then,
            Queue '   *** HAVE YOU RUN THE STAGING CREATE JOBS ???? ***'
        Else
            Queue '     N/A'
    End
    Do While st_list/=''
        Parse VAR st_list member st_list
        desc=p_string1_1('S')
        Queue '     'Substr(member,1,8)' -' desc
    End
    If pr_list/='' Then Do
        Queue ' '
        Queue '   Update staging datasets:'
        Do While pr_list/=''
            Parse VAR pr_list member pr_list
            desc=p_string1_2('S')
            Queue '     'Substr(member,1,8)' -' desc
        End
    End

    Queue ' '
    Queue ' '
    If Index(chgmano,'I')=0 Then Signal backout_instructions
implementation:
    Queue 'CICS Support implementation:'
    Queue '----------------------------'
    Queue "1. Submit member '"ifile"(I#CTRLM)' which will"
    Queue '   submit the following members to update the indicated',
          'production'
    Queue '   datasets from the appropriate staging datasets:'
    csd_im=
    Do While im_list/=''
        Parse VAR im_list member im_list
        desc=p_string1_2('O')
        Queue '     'Substr(member,1,8)' -' desc
        If mt='O' | mt = 'C' Then Nop
        Else Interpret 'x=member_list_select('suff'_s)'
    End
    Queue ' '
    Queue 'Check for rc=0 from all implementation jobs.'
    Queue ' '
    If csd_im='Y' Then Do
        If CSDbreq = 'N' Then Do
            Queue 'NOTE - The CSD implementation will take affect'          ,
                  'with the submission'
            Queue '       of the operator command job' impcsd'.'
        End
        Else Do
            Queue 'NOTE - The CSD implementation will not take affect'      ,
                  'until next cold'
            Queue '       start of the CICS region(s).'
        End
    End
    Queue ' '
    Queue ' '
    If Index(chgmano,'O')=0 Then Signal finish_instructions
backout_instructions:
    Queue 'CICS Support backout instructions:'
    Queue '----------------------------------'
    Queue "1. Submit member '"ifile"(B#CSG)' which will submit"
    Queue '   jobs to restore the following members/datasets to the',
          'production'
    Queue '   from the appropriate backup datasets:'
    csd_im=
    Do While bo_list/=''
        Parse VAR bo_list member bo_list
        desc=p_string1_2('O')
        Queue '     'Substr(member,1,8)' -' desc
        If mt='O' | mt='C' Then Nop
        Else Interpret ' x = member_list_select('suff'_s)'
    End
    Queue ' '
    Queue 'Check for rc=0 from all backout jobs.'
    Queue ' '
    If csd_im='Y' Then Do
        If CSDbreq='N' Then Do
            Queue 'NOTE - The CSD backout will take affect'                 ,
                  'with the submission'
            Queue '       of the operator command job' impcsd'.'
        End
        Else Do
            Queue 'NOTE - The CSD backout will not take affect'             ,
                  'until next cold'
            Queue '       start of the CICS region(s).'
        End
    End
finish_instructions:
    Queue ''
    dd = 'SL'Time('s')
    Address TSO "ALLOC DD("dd") DS('"ifile"($G"chgnot")') SHR REU"
    Address TSO "EXECIO * DISKW" dd "(FINIS"
    Address TSO "FREE DD("dd")"
    Address TSO "DELSTACK"
    If ex_act /= 'EXIT' Then,
        csgchslv=1;"VPUT (csgchslv) SHARED"
        "EDIT DATASET('&IFILE($G"chgnot")') MACRO(&XCMD)"
    Exit

p_string1_1:
    mt=Substr(member,2,1)
    Select
        When mt='C' Then Do
            csgchslv=2;"VPUT (csgchslv) SHARED"
            xx=ifile'('member')'
            "VIEW DATASET('&XX') MACRO(&XCMD)"
            "VGET (csdr#) SHARED"
            csd_o=csdr#
            csd_s=csd_o'.ST'chgdate;csd_u=csd_o'.BU'chgdate
            suff='csd'
        End
        When mt='$L' Then Do
            suff='load'
            reg=Substr(member,3,4)
            suff='load'
            load_o=$cstring(load_#,'.reg.','.'reg'.')
            load_s=load_o'.ST'chgdate;load_u=load_o'.BU'chgdate
        End
        Otherwise Do
            xx=Index(string1,Substr(member,1,4)' ')
            suff=Substr(member,2,Length(member)-3)
            Select
                When xx>0 Then,
                    Parse Value Substr(string1,xx) With . ':' type ':' .
                Otherwise type='Miscellaneous'
            End
        End
    End
    Interpret 'xx =' suff'_'Arg(1)
    If xx = suff'_'Arg(1) Then Return non_r_job
    Else Return xx

p_string1_2:
    mt=Substr(member,2,1)
    Select
        When mt='C' Then Do
            csd_im='Y'
            csgchslv=2;"VPUT (csgchslv) SHARED"
            xx=ifile'('member')'
            "VIEW DATASET('&XX') MACRO(&XCMD)"
            "VGET (csdr#) SHARED"
            csd_o=csdr#
            csd_s=csd_o'.ST'chgdate;csd_u=csd_o'.BU'chgdate
            suff='csd'
        End
        When mt='O' Then Do
            impcsd=member
            Return 'Operator commands for CEDA group install'
        End
        When mt='L' Then Do
            suff='load'
            reg=SUbstr(member,3,4)
            suff='load'
            load_o=$cstring(load_#,'.reg.','.'reg'.')
            load_s=load_o'.ST'chgdate;load_u=load_o'.BU'chgdate
        End
        Otherwise Do
            xx=Index(string1,' 'mt':')
            If xx=0 Then Do
                mt='O'
                Return non_r_job
            End
            Interpret "Parse VAR string1" xx+1 "w1 ."
            xx=Wordpos(w1,String1)
            xx=Word(string1,xx-1)
            suff=Substr(xx,2)
        End
    End
    Interpret 'xx =' suff'_'Arg(1)
    If xx=suff'_'Arg(1) Then Return non_r_job
    Else Return xx

member_list_select: Arg files
    If Index(files,'DATA_')>0 Then Do
         Queue '                User dataset renames.'
         Return 0
    End
    x=Listdsi("'"files"' DIRECTORY NORECALL SMSINFO")
    If sysreason=30 Then x=0
    If x/=0 | Datatype(sysmembers)/='NUM' | sysmembers=0 Then Do
         Queue '                 Missing members.'
         Return 0
    End

    "ISPEXEC LMINIT DATAID(DATA1) DATASET('&FILES') "
    "ISPEXEC LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    memb=;m_list='                ('
    Do While rc = 0
        "ISPEXEC LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMB) "||,
                "STATS(NO)"
        If rc /= 0 Then Leave
        If Words(m_list) = 5 Then Do
            Queue Substr(m_list,1,Length(m_list)-2)')'
            m_list = '                ('
        End
        m_list = m_list || Strip(memb)', '
    End
    Queue Substr(m_list,1,Length(m_list)-2)')'

    "ISPEXEC LMMLIST DATAID(&DATA1) OPTION(FREE)"
    "ISPEXEC LMCLOSE DATAID(&DATA1)"
    "ISPEXEC LMFREE  DATAID(&DATA1)"
    Return 0

Macro_1:
    csgchslv=;"VPUT (csgchslv) SHARED";"VGET (chgmanc) SHARED"
    Address ISREDIT
    "(status)=USER_STATE";"RESET"
    "(ifile)=DATASET"
    Call build_message
    Call find_errors
    "CURSOR=1 0"
    "USER_STATE=(status)"
    Exit


/*--------------------------------------------------------------------*/
/*  Self extracting NOTELINE processor. (Not used at this stage.)     */
/*--------------------------------------------------------------------*/
build_message:
n_st=mark(2)                                /* Mark next line         */
/*

   Hello ~CNAME..

   The following details have been amassed from the members in dataset
   '~IFILE.'.
   Tailor this member to satisfy change management whims with all the
   trimmings that may be missing and use your favourite cut & paste
   methodology to get it into ~CHGMANC..

   The data may be load of crock but the dataset names will be
   correct.

                            -****-

*/
n_en=mark(-2)                               /* Mark prev 2 line       */

    Call put_message
    Return 0

/*--------------------------------------------------------------------*/
/*  Finds missing explanations for highlights.                        */
/*--------------------------------------------------------------------*/
find_errors:
    xx='                Next line has unknown details. Change manually.'
    Do Forever
        "ISREDIT F '"non_r_job"'"
        If rc/=0 Then Leave
        x=nl_c(xx)
    End
    Return 0

/*--------------------------------------------------------------------*/
/*  Process self-extracted data. Tries to identify user using routine */
/*  '$WHOAMI'. If routine not available will just say 'Hello there..' */
/*--------------------------------------------------------------------*/
put_message:
    chgchar='~';cname='there'
    Signal on Syntax Name error_off_1
    cname=$whoami('C')
error_off_1:
    Signal Off Syntax

    Address ISREDIT
    "(caps)=CAPS";"CAPS=OFF"

    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
            Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            ELse Interpret 'line=p1||'var'||p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    "CAPS=(caps)";Address

    Return 0

nl_h:Parse Arg n#;"LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
nl_c:Parse Arg n#;"LINE_BEFORE .ZCSR=MSGLINE (n#)";Return 0

Mark:Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/*  Self executed macro to return the CSD dataset name.               */
/*--------------------------------------------------------------------*/
macro_2:
    csgchslv=;"VPUT (csgchslv) SHARED"
    "ISREDIT F '.DFHCSD'"
    If rc=0 Then Do
        "ISREDIT (,col#)=CURSOR";"ISREDIT (line)=LINE .ZCSR"
        csdr#=$Wordat(line,col#)
        If Substr(csdr#,1,1)='(' Then csdr#=Substr(csdr#,2)
        Parse VAR csdr# csdr# '.DFHCSD';csdr#=csdr#'.DFHCSD'
    End
    Else csdr#='??????'
    csdr#=Strip(Translate(csdr#," ","'"))
    "VPUT (csdr#) SHARED"
    "ISREDIT CANCEL"
    "ISREDIT MEND"
    Exit

