/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/*  CSGCHSRC:                                                         */
/*                                                                    */
/*  Routine to modify CICS 'source' assembly jobs. The 'sources' can  */
/*  be legitimates source or tables.                                  */
/*                                                                    */
/*  Members required to package this routine. Those marked with 'o'   */
/*  are optional:                                                     */
/*  REXX:                                                             */
/*    CSGCHSRC - Driver                                               */
/*                                                                    */
/*  Messages:                                                         */
/*    GC00     - Generic messages member.                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Arg parm#
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc>0 Then SIGNAL byp1
    ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm1 parm2 .
    If ima_macro=0 Then Do
        gc009='"'xcmd'" can only be invoked as a macro.'
        "SETMSG MSG(GC009)"
        Exit
    End
    p1_3=Substr(parm1,1,3)
    If p1_3='' Then Do
        "ISREDIT (dsn)=DATASET"
        p1_3=Substr(Strip(Substr(dsn,Lastpos('.',dsn)+1),,"'"),1,3)
    End
    If p1_3='TAB' | p1_3='UTI' | p1_3='AUT' | p1_3='LOA' Then Nop
    Else Do
        gc009='Must pass a destination identification parameter of',
              '"TABlib/UTILlib/AUTHlib/LOADlib".'
        "SETMSG MSG(GC009)"
        Exit
    End

    vars='CHGENVT,CHGDATE';"ISPEXEC VGET ("vars") PROFILE"
    "ISPEXEC VGET (#config) SHARED"

    sid=Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    v1='tab_o util_o auth_o parm_o load_r',
       ''
    "ISPEXEC VPUT (sid,chgenvt) SHARED"
    Interpret "v2="#config"(v1)"
    Interpret "Parse var v2" v1
    Select
        When p1_3='TAB' Then Do
            syslmod=tab_o'.ST'chgdate
            Interpret "ddcard="#config"('tab_slm')"
        End
        When p1_3='UTI' Then Do
            syslmod=util_o'.ST'chgdate
            Interpret "ddcard="#config"('util_slm')"
        End
        When p1_3='LOA' Then Do
            syslmod=load_r'.ST'chgdate
/*
            If parm2 /= '' Then syslmod = $cstring(syslmod,'.reg.','.'parm2'.')
*/
            syslmod=$cstring(syslmod,'.reg.','.D&NNN..')
            Interpret "ddcard="#config"('load_slm')"
        End
        Otherwise Do
            syslmod=auth_o'.ST'chgdate
            Interpret "ddcard="#config"('auth_slm')"
        End
    End

Macro_1:
    Address ISREDIT
    noteline='NOTELINE'
    "RESET"
    Call build_message
    "F '"Word(ddcard,1)"' FIRST"
    If rc=0 Then Do
        "(line)=LINE .ZCSR"
        Parse VAR line . '(' memb ')'
        If memb/='' Then syslmod=syslmod'('memb')'
        Parse VAR line p1 'DSN=' p2
        Parse VAR p2 ',' p2
        If p2/='' Then p2=','p2
        ddcard=p1'DSN='syslmod || p2
        If Length(ddcard)>71 Then Do
            Parse VAR ddcard ddcard ',' ddcard2
            ddcard=ddcard',';ddcard2=Substr('//',1,15)ddcard2
        End
        Else ddcard2=
        "LINE_BEFORE .ZCSR=&NOTELINE (ddcard)"
        If ddcard2/='' Then "LINE_BEFORE .ZCSR=&NOTELINE (ddcard2)"
        Signal exi1
    End
    term=Substr('//',1,72)
    ddcard=ddcard || syslmod
    "F '"term"' FIRST"
    If rc=0 Then "LINE_BEFORE .ZCSR=&NOTELINE (ddcard)"
    Else "LINE_AFTER .ZLAST=&NOTELINE (ddcard)"

exi1:
    Exit

/*--------------------------------------------------------------------*/
/*  Self extracting NOTELINE processor. (Not used at this stage.)     */
/*--------------------------------------------------------------------*/
build_message:
    Trace o
    n_st=mark(2)                            /* Mark next line         */
/*

   Hello &CNAME..

   I have altered the SYSLMOD dataset to:
      '&SYSLMOD.'

   This was based on "env=&CHGENVT." and "change_day=&chgdate.".
   Verify that this is correct before submitting the JCL. IF it is not
   correct, amend the parameters in the "CSGCH" routine and edit the
   source using option "O" against the appropriate "staging" matrix.

   If you are happy with the SYSLMOD generated convert it to data with
   a "MD" line command and delete any superseded SYSLMOD line(s).

   Alternatively, you may re-invoke this macro using the following
   destination identifiers:
     AUTHlib - Destination is authorised library.
     LOADlib reg
             - Destination region specific load library. If you do
               not specify a region, ".reg." will be in dataset name
               which will cause a JCL error.
     TABlib  - Destination table library.
     UTILlib - Destination Utility lbrary.

                            -****-

   Remember, a wise man will always check his JCL before submitting
   the job.
   -Confucius...

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */

    Call put_message
    Trace
    Return 0

/*--------------------------------------------------------------------*/
/*  Process self-extracted data. Tries to identify user using routine */
/*  '$WHOAMI'. If routine not available will just say 'Hello there..' */
/*--------------------------------------------------------------------*/
put_message:
    chgchar='&'
    cname='there'
    Signal on Syntax Name error_off_1
    cname=$whoami('C')
error_off_1:
    Signal Off Syntax

    "(caps)=CAPS";"CAPS=OFF"

    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1 || 'var' || p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    "CAPS=(caps)";Address

    Return 0

nl_h:Parse Arg n#;"LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Interpret syntaxact;Signal Value retlab
