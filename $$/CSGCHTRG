/******************************** REXX ********************************/
    maintver   = 'V1.01'
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/*  CSGCHTRG:                                                         */
/*  Routine to create the maintenance trigger files. Can be invoked   */
/*  stand alone or from the CSGCH system using the TRIGGER command.   */
/*                                                                    */
/*  Members required to package this routine. Those marked with 'o'   */
/*  are optional:                                                     */
/*  REXX:                                                             */
/*    CSGCHTRG - Driver.                                              */
/*    CSGCH$   - Sub-routine to return dataset names. Must be         */
/*               tailored for each site.                              */
/*                                                                    */
/*  Panels:                                                           */
/*    CSGCHTRP - Display/entry panel.                                 */
/*                                                                    */
/*  Messages:                                                         */
/*    GC00     - Generic messages member.                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Parse Upper Arg parm#
    Address ISPEXEC
    im_a_macro = 0
    If parm# /= '' Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1
    im_a_macro = 1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    busuff = '$#@O'

    Parse VAR parm# chgjcl mntenvt sid .
    Parse SOURCE . . xcmd .
    If im_a_macro  Then Do
        "VGET (csgchmac) SHARED"
        xx = csgchmac
        csgchmac =
        "VPUT (csgchmac) SHARED"
        Interpret "Signal" xx
    End

    "VGET (ZAPPLID) ASIS"
    tapplid = 'CSG'
    If zapplid /= tapplid Then Do
        "SELECT CMD(%"xcmd parm#") NEWAPPL("tapplid")"
        Return 0
    End

    Parse VAR parm# parm1 parm2 parm3

    panel = 'CSGCHTRP'
Call_set_vars_1:
    x=set_vars_1();If x/=0 Then Exit
    x = get_cics_regions()

/*--------------------------------------------------------------------*/
/*  Display screen for changed parameters.                            */
/*--------------------------------------------------------------------*/
    csr1='ZCMD';csrp1=
scr1:
    zcmd=
scr1a:
    #mntenvt=mntenvt;viewod=;viewop=;
    "DISPLAY PANEL(&PANEL) CURSOR(&CSR1) CSRPOS(&CSRP1)"
    If rc /= 0 Then Do
        "VPUT ("vars") PROFILE"
        Exit
    End

    csr1='ZCMD';csrp1=;ret_scr=0
    "ISPEXEC VGET (zverb)"

    If Word(zcmd,1) = 'TRACE' Then Do
        If Word(zcmd,2) = 'OFF' Then Do;trace=;Trace o;End
        Else Do;trace='Y';Trace r;End
        Signal scr1
    End
    If zcmd = '?' Then Do
        x=helpdrvr(helpdrvr '/OPEN');helpused='Y'
        Signal scr1
    End
    If viewod/='' Then Do
        "VIEW DATASET('&PROCOD')"
        ret_scr=1
    End
    If viewop/='' Then Do
        "VIEW DATASET('&PROCOP')"
        ret_scr=1
    End
    If ret_scr Then Signal scr1

    If #mntenvt/=mntenvt | zcmd = 'REFRESH' Then Signal call_set_vars_1

    If zcmd='MERGE' Then Do
        membl = Translate(Strip(membl),' ',',')
        regions = Translate(regions,' ',',') membl
        regn=
        If regions /= '' Then x = Sort_regions(regions)
        If regn /= '' Then regions = Substr(regn,1,Length(regn)-1)
        Else               regions =
        membl = ''
        Signal scr1
    End

    adr@ = Address()
    Address TSO
    "NEWSTACK"
    jid='$TRIGGER'
    Queue "//"jid"  JOB ("chgacct"),'MAINT TRIGGER',MSGLEVEL=1,"
    Queue '//        MSGCLASS='chgmsgc',CLASS='chgjobc',NOTIFY=&SYSUID'
    Queue '//*'
    Queue '//ALLOC EXEC PGM=IEFBR14'
    xxx=Translate(regions,' ',',')
    seq=1
    Do While xxx /= ''
        Parse VAR xxx xx xxx
        If Substr(xx,1,4) = 'CMAS' Then,
            dsn = chghlq'P.MAINT.'xx'.TRIGGER'
        Else Do
            yy = Csgch$('REGION' xx 'T')
            If yy = '' Then Iterate
            If yy = 8 Then Do
                gc009 = "Invalid region '"xx"' entered. Please correct",
                        "and re-execute."
                "ISPEXEC SETMSG MSG(GC009)"
                Leave
            End
            dsn = chghlq||Substr(yy,1,1)'.MAINT.'yy'.TRIGGER'
        End
        x=queu_dsn()
    End
    If yy = 8 Then Signal scr1
    Queue ''

    y = Msg('Off')
    ddj = 'CH'Time('s')
    If Sysdsn("'"chgjcl"'") = 'OK' Then ofile = chgjcl"("jid")"
    Else Do;"ISPEXEC VGET ZTEMPF";ofile=ztempf;tempf='Y';End
    "ALLOC DD("ddj") DS('"ofile"') SHR REU"
    y = Msg(y)
    "EXECIO * DISKW" ddj "(FINIS"
    'DELSTACK'
    If tempf='Y' Then Do
        "ISPEXEC LMINIT DATAID(DATAID) DDNAME("ddj")"
        "ISPEXEC EDIT DATAID(&DATAID)"
        "ISPEXEC LMFREE DATAID(&DATAID)"
    End
    Else "ISPEXEC EDIT DATASET('&OFILE')"
    "FREE DD("ddj")"
    Address (adr@)
    Signal scr1

queu_dsn:
    Queue '//DD'Right(seq,6,'0') 'DD DSN='dsn','
    Queue '//            SPACE=(0,(0,0)),DISP=(MOD,CATLG),UNIT=SYSALLDA'
    Queue '//*'
    seq=seq+1
    Return 0
/*--------------------------------------------------------------------*/
/*  Set up variables.                                                 */
/*--------------------------------------------------------------------*/
set_vars_0:
    table=
    Return 0

set_vars_1:
    If chgjcl='' & mntenvt='' & sid='' Then Do
        vars = 'MNTENVT'
        "ISPEXEC VGET ("vars") PROFILE"
        If mntenvt = '' Then Do
            Parse Value Csgch$(siteenvt) With mntenvt ',' .
            "ISPEXEC VPUT (mntenvt) PROFILE"
        End
        If Index(parm#,'SYSID=') > 0 Then Parse VAR parm# 'SYSID=' sid .
        Else sid = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    End
    "ISPEXEC VPUT (sid) SHARED"
    v1 = 'chghlq',
         'chgjobc chgmsgc chgacct',
         ''
    v2 = Csgch$(v1)
    Interpret "Parse var v2" v1

    Return 0

/*--------------------------------------------------------------------*/
/* On first creation of the change dataset:                           */
/*  This section will do an 'ASVT/ESVTE' MVS control block navigation */
/*  to check which CICS region is executing. It will identify         */
/*  production and development regions using 'CPRD' and 'CDEV' prefix */
/*  respectively. It then sorts them numerically and present them     */
/*  in one field in the format of Pnnn,Pnnn,....                      */
/*  Any valid non executing CICS names will have to be manually       */
/*  entered.                                                          */
/* On subsequent entry:                                               */
/*  The region list will be built from any $LP* members for the first */
/*  region only.                                                      */
/*--------------------------------------------------------------------*/
get_cics_regions:
    membl=;regn=;filel=
    Do i=1 To 2
       chgenvt=Substr('DP',i,1)
       "VPUT (chgenvt) SHARED"
       filel=filel Csgch$('proc_o')
    End
    Parse VAR filel procod procop
    regnmask= Csgch$('regnmask')
    regnignr= ' 'Csgch$('regnignr')' '
    Do While regnmask /= ''
        Parse VAR regnmask mask regnmask
        aster1 = Index(mask,'*')
        If aster1 > 0 Then aster2 = Index(mask,'*',aster1+1)
        Else               aster2 = 0
        Select
            When (aster1 = 0) Then m_type = 4
            When (aster2 = 0) Then Do
                If aster1 = 1 Then Do
                    m_type=3
                    mask = Substr(mask,2)
                End
                Else Do
                    m_type=1
                    mask = Substr(mask,1,Length(mask)-1)
                End
            End
            Otherwise Do
                m_type=2
                Parse VAR mask '*' mask '*' .
            End
        End
        maskl = Length(mask)
        jbnm=
        Do i=1 To 2
            file=Word(filel,i)
            "LMINIT DATAID(DATA1) DATASET('&file') "
            "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
            Do While rc = 0
                "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(JBNM) "||,
                        "STATS(NO)"

                If rc /= 0 Then Leave
                jbnm = Strip(jbnm)
                lc = Substr(jbnm,Length(jbnm),1)
                If Verify(lc,busuff) = 0 Then Iterate
                xx = match_reg_mask()
                If xx /= '' Then membl = membl jbnm
            End
            "LMMLIST DATAID(&DATA1) OPTION(FREE)"
            "LMCLOSE DATAID(&DATA1)"
            "LMFREE  DATAID(&DATA1)"
        End
    End
    If membl /= '' Then x = Sort_regions(membl)

    cvt     =  Storage(10,4)
    asvt    =  Storage(d2x(c2d(cvt) + x2d(22c)),4)
    ascbmax =  c2d(Storage(d2x(c2d(asvt) + x2d(204)),4))
    xf7     = '7F'X                         /* Active @ mask          */
    regnmask= Csgch$('regnmask') 'CMAS*'
    regnignr= ' 'Csgch$('regnignr')' '
    regn  =
    r_list=
    Do While regnmask /= ''
        asve@ = d2x(c2d(asvt) + x2d(210))
        asve  = Storage(asve@,4)
        Parse VAR regnmask mask regnmask
        aster1 = Index(mask,'*')
        If aster1 > 0 Then aster2 = Index(mask,'*',aster1+1)
        Else               aster2 = 0
        Select
            When (aster1 = 0) Then m_type = 4
            When (aster2 = 0) Then Do
                If aster1 = 1 Then Do
                    m_type=3
                    mask = Substr(mask,2)
                End
                Else Do
                    m_type=1
                    mask = Substr(mask,1,Length(mask)-1)
                End
            End
            Otherwise Do
                m_type=2
                Parse VAR mask '*' mask '*' .
            End
        End
        maskl = Length(mask)
        Do i=1 To ascbmax
            If Bitor(Substr(asve,1,1),xf7) = xf7 Then Do
                jbn = c2x(Storage(d2x(c2d(asve) + x2d(0AC)),4))
                If jbn = 0 Then
                    jbn = c2x(Storage(d2x(c2d(asve) + x2d(0B0)),4))
                jbnm = Storage(jbn,8)
                If jbnm = 'INIT    ' | jbn = 0 |,
                   jbnm = 'ASCHINT ' Then Do
                    asve@ = d2x(x2d(asve@) + (4))
                    asve  = Storage(asve@,4)
                    Iterate
                End
                xx = match_reg_mask()
                If xx /= '' Then r_list = r_list xx
            End
            asve@ = d2x(x2d(asve@) + (4))
            asve  = Storage(asve@,4)
        End
    End
    If r_list  /= '' Then x = Sort_regions(r_list)

    If regn /= '' Then regions = Substr(regn,1,Length(regn)-1)
    Else               regions = ''
    membl = del_match(membl,Translate(regions,' ',','))
    membl = Translate(Strip(membl),',',' ')

    Return 0


match_reg_mask:
    rjn  =
    jbnm = Strip(jbnm)
    Select
        When m_type = 1 Then,               /* Pattern CICS*          */
            If Substr(Strip(jbnm),1,maskl) = mask Then rjn = jbnm
        When m_type = 2 Then,               /* Pattern *CICS*         */
            If Index(jbnm,mask) > 0 Then rjn = jbnm
        When m_type = 3 Then,               /* Pattern *CICS          */
            If Substr(Strip(jbnm),Length(jbnm)-maskl+1) = mask Then,
                 rjn = jbnm
        Otherwise,                          /* Pattern CICS           */
            If Strip(jbnm) = mask Then rjn = jbnm
    End
    If rjn /= '' & Index(regnignr,' 'rjn' ') > 0 Then rjn=
    Return Strip(rjn)

/*--------------------------------------------------------------------*/
/*  Sort regions using a simple bubble sort process.                  */
/*--------------------------------------------------------------------*/
Sort_REGIONS: Arg xxx
    Do i=1 To 9999
        Parse VAR xxx v.i xxx
        If xxx = '' Then Leave
    End
    Do l=1 to i-1
        swap = 0
        Do j=1 to i-l
            k = j+1
            If v.j > v.k Then Do
                swap = 1
                x = v.j
                v.j = v.k
                v.k = x
            End
        End
        If swap = 0 Then Leave
    End
    Do l=1 to i
        regn = regn || v.l','
    End

    Return yyy

Validate_regions: Arg xxx xx
    Do While xxx /= ''
        Parse VAR xxx xx ',' xxx
        If Sysdsn("'"proc_o"("xx")'") /= 'OK' Then,
            Return Index(regionp',',xx',')
    End
    Return 0

del_match:Arg set1,set2
    xxx=set2
    Do While xxx /= ''
        Parse VAR xxx xx xxx
        x=Wordpos(xx,set1)
        If x>0 Then set1=Delword(set1,x,1)
    End
    Return set1
