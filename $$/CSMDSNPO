/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* CSMDSNPO: PDSEDIT On-line for Multi-procs.                         */
/*                                                                    */
/* The following is required to package this routine. Modules with    */
/* 'o' instead of '-' are optional, however, will inhibit             */
/* availability of many feature and may crash the application when    */
/* any if these features are invoked.                                 */
/*                                                                    */
/* REXX:                                                              */
/*    $ALKHLQO o Site customised hlq for other users.                 */
/*    $ALKJC   o Site customised JOB card parameters.                 */
/*    $ALKLOAD o Site customised routine to return home of loadmod    */
/*               "PDSEDIT".                                           */
/*    $ALKUVOL o Site customised UNIT() VOLUME() setting for output   */
/*               files.                                               */
/*    $DDALLOC o Routine to find DD help can be found in.             */
/*    BATCHISP o Routine to create batch ISPF JCL for batch process.  */
/*    CSMDSNPO - Driver (can exist outside Multi-Procs)               */
/*    CSMDSNPT o Dynamic tutorial                                     */
/*    HELPDRVR o Dynamic tutorial driver (refer to member for it's    */
/*               packaging details).                                  */
/*    JC       o Required for batch processing.                       */
/* Panels:                                                            */
/*    $MEMBDEL o Delete confirmation panel                            */
/*    $MEMBREN o Newname entry panel for rename operation             */
/*    CSMDPDSE o Table display panel (obsolete - refer CSMDSNPD)      */
/*    CSMDSPPD - Dynamic panel to display table details in colour     */
/*    CSMDSPPL - Parameter entry panel (Model 4)                      */
/*    CSMDSPPO - Parameter entry panel                                */
/*    CSMDSPP1 - Field delimiter entry panel                          */
/*    CSMDSPP2 - Field delimiter entry panel (MOdel 4)                */
/*    DYNAMIC$ o Dynamic panel for C(copy) option.                    */
/* Skeletons:                                                         */
/* LMODs:                                                             */
/*    PDSEDIT  - Main program                                         */
/*    PRINTOFF o For member list prints.                              */
/*                                                                    */
/*--------------------------------------------------------------------*/
CSMDSNPO: pover='V2.09'
    Parse Source . . xcmd .
    Address "ISPEXEC";"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    batchisp='BATCHISP';zedsmsg=
/*
    def_ex='A'                              /* Default execution class*/
    def_hd='X'                              /* Default hold class     */
    def_ac='(ACCOUNT)'
*/
    v1='def_ex def_hd def_ac'
    Interpret "Parse Value $alkjc(v1) With" v1

    #tr=Trace()
    #ztempf=
    Parse Upper VAR parm# parm1 parm2 parm3
    chgchar='&';userid=Userid();hlq=$alkhlqo();spref=Sysvar(syspref)
    "VGET (pomacro) SHARED"
    If pomacro/='' Then Do
        seq=Substr(pomacro,2,1)
        pomacro=;"VPUT (pomacro) SHARED"
        Interpret 'Signal Macro_'seq
    End


    "VGET ZSYSID"
    hlqs=hlq'.'zsysid;llq='.TEMP';hlqm=userid
    sms='N'
    If sms='Y' Then mgmtclas='MGMTCLAS(DEL1DAY)';Else mgmtclas=
    "VGET (zscreend)"
    If zscreend=43 Then Do
        paneln='CSMDSPPL';panel1='CSMDSPP2'
        xtra="CHANGE11 CHANGE12 CHANGE13 CHANGE14 CHANGE15",
             "CHANGE16 CHANGE17 CHANGE18 CHANGE19 CHANGE20"
        cmd#=20
    End
    Else Do
        paneln='CSMDSPPO';panel1='CSMDSPP1'
        xtra=;cmd#=10
    End
    paneld='CSMDSPPD';panel=paneln;in1='INPUT';x_macro=;
    jobparm=;id='P'
    v1='def_ex def_hd def_bb def_vm def_ac'
    Parse Value $alkjc(v1) With xcl lcl bitbuckt .
    msgcl=bitbuckt                          /* Message class          */
    hcl=bitbuckt                            /* HITS output class      */
    unit='SYSALLDA';unit1='SYSALLDA';unit2='SYSALLDA';work='SYSDA'
    steplib=$alkload()
    polist=hlqs'.PDSEDITL'llq
    pohits=hlqs'.PDSEDITH'llq
    polist#=polist;pohits#=pohits
    show_me='N'
    iebcopy='SYS1.LINKLIB(IEBCOPY)'
    volume=;unit=
    profvars="DSNDSOS CHANGE1 CHANGE2 CHANGE3 CHANGE4 CHANGE5",
              "CHANGE6 CHANGE7 CHANGE8 CHANGE9 CHANGE10",
              "EDSNAME PDSEDPF PDSEDL POCAPS PDSHORMB PDSEDLIM",
              "PDSUCASE PDSEKEEP",
              xtra
    vgetvars="DSNAME MEMBER PARMS UNIT ALKVOL",
             "zedlmsg",
             ""

    If parm#='' Then "VGET ("vgetvars") SHARED"
    Else Do
        Interpret "Parse Value '' With" vgetvars
        Parse VAR parm# dsname v1 v2 v3
        If Substr(dsname,1,1)/="'" Then dsname="'"spref"."dsname"'"
        Select
            When Substr(v1,1,2)='V=' Then Do;alkvol=v1;v1=v2;v2=v3;v3=;End
            When Substr(v2,1,2)='V=' Then Do;alkvol=v2;v2=v3;v3=;End
            When Substr(v3,1,2)='V=' Then Do;alkvol=v3;v3=;End
            Otherwise alkvol
        End
        Select
            When Substr(v1,1,2)='O=' Then Do;parms=v1;v1=v2;v2=v3;v3=;End
            When Substr(v2,1,2)='O=' Then Do;parms=v2;v2=v3;v3=;End
            When Substr(v3,1,2)='O=' Then Do;parms=v3;v3=;End
            Otherwise parms=
        End
    End
    If Substr(alkvol,1,2)='V=' Then Do
        alkvol=Substr(alkvol,3);If unit='' Then unit='SYSALLDA'
    End
    If Substr(parms,1,2)='O=' Then Do
        parms=Substr(parms,3)
        If Substr(parms,1,1)/="'" Then parms="'"spref"."parms"'"
    End
    "VGET ("profvars") PROFILE"
    l=pdshormb;volser=alkvol

    dsndsos="'"hlqm".$$'"
    If Sysdsn(dsndsos)/="OK" Then Do
        xx=Listdsi('ISPPROF FILE')
        If xx<5 | sysreason=9 | sysreason=25 Then dsndsos=sysdsname
        Else Do
            zedlmsg="Cannot find table dataset "dsndsos"."
            "SETMSG MSG(ISRZ001)"
            Exit
        End
    End
    If Sysdsn("'"steplib"(PDSEDIT)'") /= "OK" Then Do
        zedlmsg="Module 'PDSEDIT' not found."
        "SETMSG MSG(ISRZ001)"
        Exit
    End

    "VPUT (dsndsos) PROFILE"
    idsname=dsname
    If parms='PARMS' Then parms=

    If Index(parms,'*')=0 Then odsname=parms;Else odsname=
    If member='' Then member='*'
    If pocaps='' Then pocaps='ON'

test0:
    savetbl='N';curs='CHANGE1';csrpos=2;msg='ISRZ001';emflag='N/A'
    If pdsedlim/='' Then d=pdsedlim;Else d='/'
    If zedlmsg='' Then,
        zedlmsg="Fields with "d"'s must be entered. Enter ""?"" on the",
                "on the command line for help."
    msg='ISRZ001'
    dsosmem=odsname
    If odsname='' Then Do
        dsosmem='$$'Time('s')
        Signal init0
    End

    If Length(odsname)<9 Then Do
        "TBOPEN &DSOSMEM"
        If rc=0 Then Do
            pdsname=Substr(idsname,2,Length(idsname)-2)
            savetbl='Y';curs='CHANGE1';csrpos=2
            Signal bypassz
        End
        Else Do
            curs='ODSNAME';csrpos=1
            msg='ISRZ001';zedlmsg="Table "dsosmem" not found."
        End
    End

init0:
    table=dsosmem
    Call set_sore
    o=Z;so=Z;fieldr=
    s0=;s1=;s2=;s3=;s4=;s5=;s6=;s7=;s8=;s9=;s10=
    e0=;e1=;e2=;e3=;e4=;e5=;e6=;e7=;e8=;e9=;e10=
    If zscreend=43 Then Do
        s11=;s12=;s13=;s14=;s15=;s16=;s17=;s18=;s19=;s20=
        e11=;e12=;e13=;e14=;e15=;e16=;e17=;e18=;e19=;e20=
    End
    If change1='' Then change1=d"find-string"d

init:
    sidsname=;sodsname=;batchsub='N'

again:
    proces1=;proces2=;proces3=;proces4=;proces5=;proces6=
    proces7=;proces8=;proces9=;proces10=
    If zscreend=43 Then Do
        proces11=;proces12=;proces13=;proces14=;proces15=;proces16=
        proces17=;proces18=;proces19=;proces20=
    End

scr1:
    zcmd=;btchexec='N'
    If batchsub='Y' Then Do
        batchsub='N';polist=polist#;pohits=pohits#
        msg='ISRZ001';zedlmsg="Default output datasets reset."
    End
scr1a:
    #pdsucas=pdsucase

    "DISPLAY PANEL(&PANEL) MSG(&MSG) CURSOR(&CURS) CSRPOS(&CSRPOS)"
    If rc/=0 Then Do
        If savetbl='N' Then "TBERASE &DSOSMEM"
        pdshormb=l;pdsedlim=d
        "VPUT ("profvars")PROFILE"
        x=Msg('Off')
        Address TSO
        "FREE FILE(SYSUT1 SYSUT2 SYSOUT SYSPRINT SYSIN)"
        If pdsedpf/='' Then Do
            Interpret "ZPF"pdsedpf" = "spfkval
            Address ISPEXEC "VPUT (ZPF&PDSEDPF) PROFILE"
        End
        If ddaloc='Y' & pdsekeep/='Y' Then Do
            "DELETE '"pohits"'";"DELETE '"polist"'"
        End
        If #ztempf/='' Then x=del_tempf()
        If altlib_a='Y' Then "ALTLIB DEACTIVATE APPLICATION(EXEC)"
        Exit
    End
    If sore='' Then Drop sore1

/*--------------------------------------------------------------------*/
/* Process...                                                         */
/*--------------------------------------------------------------------*/
    msg=
    Parse VAR zcmd cmd parm1 parm2 parm3,
                   1 cmd1 +1 1 cmd2 +2 1 cmd3 +3 1 cmd4 +4 1 cmd5 +5
    If Wordpos(cmd,'? POHELP')>0 Then Do
        ddd='HELPDRVR SYSEXEC SYSPROC';tutememb='CSMDSNPT'
        Do While ddd/=''
            Parse Var ddd dd ddd
            xxx=$ddalloc(dd)
            Do While xxx/=''
                Parse Var xxx xx xxx
                If Sysdsn("'"xx"("tutememb")'")='OK' Then Do
                    ddd=;Leave
                End
            End
        End
        x=helpdrvr(dd'='tutememb parm1);Signal scr1
    End

    If cmd='TRACE' Then Do
        trace=parm1
        Select
            When parm1='OFF' Then #tr='R'
            When parm1='ON' Then #tr='N'
            Otherwise Nop
        End
        If Datatype(trace)='CHAR' Then If #tr='N' Then #tr=Trace('R')
                                       Else #tr=Trace('O')
        Signal scr1
    End
    If Substr(cmd,1,3)='BOT' Then Do
        If zscreend=43 Then k=20;Else k=10
        Do i=k By -1 Until i=1
            If Value('change'i)='' Then Iterate
            Interpret 'change'k'=change'i
            k=k-1
        End
        Do i=k By -1 Until i=1
            Interpret 'change'i'='
        End
        zedlmsg='Moved to the bottom.';msg='ISRZ001'
        Signal scr1
    End
    If Substr(cmd,1,3)='TOP' Then Do
        If zscreend=43 Then k=20;Else k=10
        j=1
        Do i=1 To k
            If Value('change'i)='' Then Iterate
            Interpret 'change'j'=change'i
            j=j+1
        End
        Do i=j To k
            Interpret 'change'i'='
        End
        zedlmsg='Moved to the top.';msg='ISRZ001'
        Signal scr1
    End

    If pdsucase/=#pdsucas Then Do
        zedlmsg='Upper case changed to "'pocaps'".'
        msg='ISRZ001'
        Signal scr1
    End
    If cmd='ALL' Then Do
        sore=;Drop sore1
        zedlmsg='Selection/Exclusion options initialised. All members',
                'will be processed.'
        msg='ISRZ001'
        Signal scr1
    End

    msg=;csrpos=1;retlab1='scr1'
/*--------------------------------------------------------------------*/
/* Test for scrolling                                                 */
/*--------------------------------------------------------------------*/
    "VGET (zverb)"
    If zverb='LEFT' Then Do
        panel=paneln;curs=;Signal scr1
    End
    If zverb='RIGHT' Then Do
        panel=panel1;curs='S0';Signal scr1
    End

    If cmd = 'HITS'  | Substr(cmd,1,2) = '/H' Then Signal brow_hits
    If cmd = 'LISTO' | Substr(cmd,1,2) = '/L' Then Signal brow_listo

/*--------------------------------------------------------------------*/
    If Substr(zcmd,1,3) = '/B=' Then Do
        If Substr(zcmd,4,2) = '* ' Then Do
            polist = polist#
            pohits = pohits#
            zedlmsg = "Default output datasets reset."
            msg   = 'ISRZ001'
            Signal scr1
        End
        If Substr(zcmd,4,2) = 'O ' Then,
            zcmd = "/B='"pohits"'"
        ds = Substr(zcmd,4)
        If Substr(ds,1,1) /= "'" Then ds = hlq'.'ds
        Else ds = Substr(ds,2,Length(ds)-2)
        x = LISTDSI("'"ds"'")
        If x /= 0 Then Do
            curs  = 'ZCMD'
            zedlmsg = "Dataset '"ds"' not found."
            msg   = 'ISRZ001'
            Signal scr1
        End
        batchsub = 'Y'
        polist   =
        pohits   = ds
        pdsname  = Substr(idsname,2,Length(idsname)-2)
        Signal batch_bypass
    End

/*--------------------------------------------------------------------*/
    If Substr(zcmd,1,3) = '/D=' Then Do
        nd = Substr(zcmd,4,1)
        Do i=1 To cmd#
            xx = Value('change'i)
            If xx = '' Then Iterate
            xx = Translate(xx,nd,d)
            data = 'change'i ' = xx'
            Interpret data
        End
        zedlmsg = "Delimiter changed from '"d"' to '"nd"'."
        msg   = 'ISRZ001'
        d = nd
        Signal scr1
    End

/*--------------------------------------------------------------------*/
    If Substr(zcmd,1,3)='/M=' Then Do
        member=Substr(zcmd,4)
        If member/='' Then Call set_sore;Else sore=
        Signal scr1
    End

/*--------------------------------------------------------------------*/

    If cmd = 'ISORE' | cmd = '/ISORE' Then Do
        If sore = '' Then Do
            zedlmsg = "No SorE set."
            msg   = 'ISRZ001'
            Signal scr1
        End
        p = Substr(sore,1,1)
        If p = 'I' Then sore = Substr(sore,2)
        Else            sore = 'I'sore
        Signal scr1
    End
    If cmd = 'AND' | cmd = '/AND' Then Do
        If dst /= 'Y' Then Do
            zedlmsg = "You need to issue a find before you use the 'AND'",
                    "command."
            msg   = 'ISRZ001'
            Signal scr1
        End
        Call and_sore
        Signal scr1
    End
    If cmd = 'EXCLUDE' | cmd = '/EXCLUDE' Then Do
        If dst /= 'Y' Then Do
            zedlmsg = "You need to issue a find before you use the",
                    "EXCLUDE command."
            msg   = 'ISRZ001'
            Signal scr1
        End
        Call and_sore
        sore = 'E'Substr(sore,2)
        Signal scr1
    End
    If Translate(change1) = '/CL' Then Do
        change1 = d'-----\|/--------------------<=====---------------'d
        Signal scr1
    End

    If Substr(idsname,1,1) = '?' Then Do
        Address TSO "%XE "idsname
        If rc /= 0 Then Exit
        "VGET xedsname SHARED"
        idsname = "'"xedsname"'"
        Signal scr1
    End

    delim=d
tstvolid:
    If alkvol='' | alkvol='******' Then Do
        avolume=;volume=
    End
    Else Do
        x=Listdsi("'SYS1.LINKLIB' VOLUME("alkvol")")
        If sysreason=22 Then Do
            msg="Volume '"volume"' not mounted or defined to the",
                "system."
            curs='ALKVOL'
            Signal err1
        End
        volume='VOLUME('alkvol')';avolume=volume 'UNIT('unit1')'
    End
findinpt:
    If Substr(idsname,1,1)="'" Then sidsname=idsname
    Else sidsname="'"spref"."idsname"'"
    x=Listdsi(sidsname volume)
    If rc/=0 Then Do
        curs='IDSNAME';msg=sidsname" not found."
        Signal err1
    End
    #members=sysmembers
    If Index(idsname,'(')>0 Then Do
        member=
        Call set_sore
        Signal scr1
    End
    userx=sidsname

test4edt:
    retlab1='FINDOUTP';nond=
    If Substr(cmd,1,1) = 'V' | Substr(cmd,1,3) = '/VI' |,
       Substr(cmd,1,1) = 'E' | Substr(cmd,1,3) = '/ED' |,
       Substr(cmd,1,1) = 'B' | Substr(cmd,1,3) = '/BR' Then Do
        Select
            When (Substr(cmd,1,1) = 'E' | Substr(cmd,1,3) = '/ED') Then,
                 actionx = 'EDIT'
            When (Substr(cmd,1,1) = 'V' | Substr(cmd,1,3) = '/VI') Then,
                 actionx = 'VIEW'
            Otherwise actionx = 'BROWSE'
        End
        Call On Error Name errb
        adsn = Substr(sidsname,2,Length(sidsname)-2)
        If parm1 /= '' Then adsn = adsn'('parm1')'
        adsn = "'"adsn"'"
        "&ACTIONX DATASET(&ADSN) &VOLUME"
        Call Off Error
        Signal scr1
    End

findoutp:
    If odsname/='' Then Do
        If Substr(odsname,1,1)="'" Then sodsname=odsname
        Else sodsname="'"spref"."odsname"'"
        If pdsncre='Y' Then Do
            If Sysdsn(sodsname)='OK' Then Address TSO "DELETE" sodsname
            xx=Listdsi(sidsname volume "DIRECTORY SMSINFO")
            If Datatype(sysused,'w') Then Do
                If sysused<sysprimary Then sysprimary=sysused
                dirblk='DIR('sysudirblk')'
            End
            Else dirblk='DSNTYPE(LIBRARY)'
            Parse VAR sysrecfm rf1 +1 rf2 +1 rf3 +1 .;recfm=Space(rf1 rf2 rf3)
            Address TSO 'ALLOC DSN('sodsname')' sysunits 'NEW CATALOG',
                'VOLUME('sysvolume') UNIT('sysunit') RECFM('recfm')',
                'SPACE('sysprimary','sysseconds')',
                dirblk 'DSORG(PO)',
                'LRECL('syslrecl') BLKSIZE('sysblksize')'
            Address TSO 'FREE DSN('sodsname')'
        End
        If Sysdsn(sodsname)/='OK' Then Do
            curs='ODSNAME'
            zedlmsg=sodsname" not found."
            Signal err1
        End
        userx=sodsname
    End
    userx=Substr(userx,2,Index(userx,'.')-2)

findemac:
    macro=;emac=
    If edsname='' | Substr(edsname,1,2)='I'd Then Signal setctr
    cg009 = "Building edit-macro."
    "SETMSG MSG(ISRZ001)"
    "CONTROL DISPLAY LOCK"
    "CONTROL DISPLAY REFRESH"
    "DISPLAY PANEL(&PANEL) CURSOR(ZCMD)"
    If Substr(edsname,1,1) = "'" Then sedsname = edsname
    Else sedsname = "'"spref"."edsname"'"
    lb = Index(sedsname,'(')
    If lb = 0 Then Signal nomemb
    len = Length(sedsname)
    If Substr(sedsname,len-1,1) /= ')' Then Signal nomemb
    Parse Value Strip(sedsname,,"'") With x_dsn '(' x_macro ')'
    If Sysdsn("'"x_dsn"'")/='OK' Then Do
        curs='EDSNAME'
        zedlmsg=Sysdsn("'"x_dsn"'")"."
        Signal err1
    End
    macro=x_macro

    If pdsedpf /= '' Then Do
        pdsedpf = Right(pdsedpf,2,'0')
        "VGET ZPF&PDSEDPF PROFILE"
        data = 'SZPF'pdsedpf' = ZPF'pdsedpf
        Interpret data
        data = 'ZPF'pdsedpf' = macro'
        Interpret data
        "VPUT ZPF&PDSEDPF PROFILE"
    End
    macro = 'MACRO('macro')'
/*--------------------------------------------------------------------*/
/* Macro build the macro from the change/find commands.               */
/*--------------------------------------------------------------------*/
    Address TSO "ALLOC F(SEDSNAME) DA("sedsname") SHR REU"
    Address TSO "NEWSTACK"
    Queue '/*  REXX  */'
    Queue '    "ISREDIT MACRO"'
    Queue '    "ISREDIT X ALL"'
    #tr=Trace('Off')
    Do i=1 To cmd#
        Interpret 'xxx=CHANGE'i;If xxx='' Then Iterate
        If Translate(Substr(xxx,1,1))='I' Then Iterate
        xxx=Strip(xxx,,d)
        Interpret "Parse Var xxx p1 '"d"' p2"
        Queue '    "ISREDIT F '''p1''' ALL"'
        If p2/='' Then Queue '    "ISREDIT F '''p2''' ALL"'
    End
    x=Trace(#tr)
    Queue '    "ISREDIT MEND"'
    Queue ''
    Address TSO "EXECIO * DISKW SEDSNAME (FINIS"
    Address TSO "FREE F(SEDSNAME)"
    Address TSO "DELSTACK"
/*--------------------------------------------------------------------*/
    emflag = 'OFF'
    Signal setctr

nomemb:
    curs  = 'EDSNAME'
    zedlmsg = Member missing from dataset.
    Signal err1

setctr:
    If zcmd /= '' Then Do
        Parse VAR zcmd v1 dsn rest
        If Index(' 'zcmd' ',' FORCE ') > 0 |,
           Index(' 'zcmd,' /BA') > 0  |,
           Index(' 'zcmd,' /ES') > 0  Then  Signal gethashi
        If Substr(zcmd,1,3) = '/C='  Then Signal nosore
        Else Do
            zedlmsg = "'"zcmd"' command not recognised."
            Signal err1
        End
    End

gethashi:
    no=0
    subx=1;ctype='F'
    x=Trace('O')
    rethash='EXECIT'

gethashl:
    move_top=0
    Do subx=1 To cmd#
        change=Value('CHANGE'subx)
        If change='' Then Iterate
        fc=Substr(change,1,1)
        If fc='I' | fc='i' Then Iterate
        If fc='T' | fc='t' Then Do;move_top=1;Leave;End
        If Value('S'subx)/='' Then,
            range='('Strip(Value('S'subx) Value('E'subx))')'
        Else range=
        curs="CHANGE"subx
        Call calchash
        Interpret 'PROCES'subx'=change'
    End
    If move_top Then Signal Move_to_top
    Interpret "Signal" rethash

Move_to_top:
    top=1
    Do subx=subx To cmd#
        If Value('CHANGE'subx)='' Then Iterate
        Interpret 'fc=Substr(change'subx',1,1)'
        If fc='T' | fc='t' Then Nop;Else Iterate
        Interpret 'xxx="?"Substr(change'subx',2)';Interpret 'CHANGE'subx'='
        Do ii=top To subx
            Interpret 'yyy=change'ii
            Interpret 'CHANGE'ii'=xxx'
            If yyy='' Then Leave
            xxx=yyy
        End
        top=top+1
    End
    Signal scr1

calchash:
    If Substr(change,1,1)='R' | Substr(change,1,1)='"' Then Do
        Interpret 'CHANGE'subx'=saverp'
        rethash='SCR1'
        Return
    End
    If Substr(change,1,1)='r' Then Do
        Interpret 'CHANGE'subx'=$U2lower(saverp,3)'
        Interpret 'CHANGE'subx+1'=$U2lower(saverp)'
        rethash='SCR1'
        Return
    End
    If Substr(change,1,1) /= delim Then Do
        zedlmsg = "No preceeding delimiter '"delim"'."
        csrpos = 1
        Signal err1
    End
    len = Length(change)
    If Substr(change,len,1) /= delim Then Do
        zedlmsg = "No ending delimiter '"delim"'."
        csrpos = len + 1
        Signal err1
    End

testmid#:
    #p=1;##=1
    Do While #p < len
        csrpos = #p
        #p = Index(change,delim,#p+1)
        ## = ## + 1
    End
    If  ## > 3 then do
        zedlmsg = "Too many ("##") delimiters '"delim"' found."
        Signal err1
    End
    saverp = change
    change = range change
    If ## = 3 Then Do
        ctype='C'
        change='C' change
    End
    Else change='F' change
    Return 0

execit:
    x=Trace(#tr)
    If s0/='' Then fieldr='FIELD('s0 e0')';Else fieldr=
    csrpos=1;curs='ZCMD'
    If Wordpos('FORCE',zcmd)>0 |,
        Index(' 'zcmd,' /BA')>0  Then Signal bypas1
    If ctype='C' & odsname='' & userx/=hlq Then Do
        zedlmsg="As changes to other than "own" PDS,",
                "'copy to' PDS required."
        curs='ODSNAME'
        Signal err1
    End

bypas1:
    If sore = '' Then Signal nosore
    pref = Substr(sore,1,2)
    If pref = 'S(' | pref = 'E(' Then Call parse_sore
    Else Do
        If Substr(pref,1,1) = 'I' Then Signal nosore
        zedlmsg = "Invalid format. Must start with 'S(' or 'E('."
        curs  = 'SORE'
        Signal err1
    End

nosore:
/*--------------------------------------------------------------------*/
    If sore /= '' | sore1 /= 'SORE1' Then Call parse_sore
    If Index(' 'zcmd,' /BA') > 0 Then Do
        btchexec = 'Y'
        ztempf1=$ztempf()
        Call build_pdsedons
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf1"') OLD REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        Address TSO "DELSTACK"
        tempsub=ztempf1
        Parse VAR zcmd . edjcl .
        edjcl='EDIT'
        If Wordpos('EDIT',Translate(zcmd))>0 |,
           Wordpos('/ED',Translate(zcmd))>0 |,
           Wordpos('/E',Translate(zcmd))>0 Then Do
            Address ISPEXEC
            "LMINIT DATAID(DATAID) DDNAME(ztempf)"
            umodel="UMODEL_ZED";pomacro='M3'
            "VPUT (pomacro,umodel) SHARED"
            "EDIT DATAID(&DATAID) MACRO("xcmd")"
            "LMFREE DATAID(&DATAID)"
            pomacro=;"VPUT (pomacro) SHARED"    /* 2 be sure          */
            Address ISPEXEC
        End
        Address TSO "FREE DD(ZTEMPF)"
        "VPUT (TEMPSUB) SHARED"
        x=MSG('On');Address TSO "%TEMPSUB";rc1=rc;x=MSG('Off')
        x=$ztempf(ztempf1,'/D')
        Address ISPEXEC
        "VGET (JOBNUMB JOBNAME MESSAGE) SHARED"
        zedlmsg=message;btchexec='N'
        Signal err1
    End

/*--------------------------------------------------------------------*/
    Signal Off Error
/*  "VGET ZTEMPF"                                                     */
    ztempf=$ztempf();#ztempf=#ztempf ztempf
    Call build_pdsedons
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    Address TSO "DELSTACK"
    If Substr(zcmd,1,3) = '/C=' Then Do
        dsn=Substr(zcmd,4)
        If Substr(dsn,1,1)="'" Then dsn=Strip(dsn,,"'");Else dsn=hlq'.'dsn
        rc1=$copymem("'"dsn"'","+'"ztempf"'")
        x#=Msg('Off');Address TSO "DELETE '"pohits"'";x=Msg(x#)
        If rc1/=0 Then Do
            "VGET (MESSAGE) SHARED";zedlmsg=message
            Signal err1a
        End
        ctype='C'
    End
    If ctype ='C' | zcmd='/ES' Then Do
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        operact = 'PDSEDIT'
        umodel = 'UMODEL_ES'
        pomacro = 'M3'
        "VPUT (pomacro,umodel,operact) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd")"
        Address TSO "EXECIO * DISKR ZTEMPF (STEM line. FINIS)"
        "LMFREE DATAID(&DATAID)"
        If line.0=0 Then Do
            zedlmsg="Edit session was cancelled."
            Signal err1a
        End
        Address TSO "FREE DD(ZTEMPF)"
    End

/*-----\|/--------------------<=====----------------------------------*/

batch_bypass:
    msg=;zedlmsg=;dst='Y'
    Call constant_vars;Call variable_vars

/********* \|/ ********* Customise here ********* \|/ *****************/
/*--------------------------------------------------------------------*/
/* Insert front end parameter entry.                                  */
/*--------------------------------------------------------------------*/
/********* /|\ ********* Customise here ********* /|\ *****************/

    Call build_table

    "VGET (zscrmaxd)"
    Numeric digits(15)
    x=b_o_mac_msg()

scr2_a:
    If show_me='Y' Then Call Show_hits
    Call build_field

scr2:
    mainhead=oyellow"PDSEDIT '"pdsname"' ("mhit"/"count" Members :",
             hits "- Hits) ---------------------------------------"
    If show_me/='Y' Then Do
        subhead1=hl0"|Sel | Member   | Action   | Operands |",
                 "Hits  |"o_mac_msg
        subhead2=hl0"+----+----------+----------+----------+" ||,
                 "-------+--------------------------------"oblue
    End
    Else Do
        subhead1=hl0"|Sel | Member   | Hits  |"o_mac_msg
        subhead2=hl0"+----+----------+-------+--------------" ||,
                 "----------------------------------------"oblue
    End

    dispstat=owhite'Row' tabptr+1 'of' rownum
    headline=Substr(mainhead,1,79-Length(dispstat)) || dispstat

    zcmd=;oper=;parms=;sel=
    "DISPLAY PANEL(&PANELD) CURSOR(&CSR) CSRPOS(&CSRP)",
        "MSG(&MSG)"
    If rc/=0 Then Do
        "TBCLOSE &DSOSMEM"
        msg=
        Signal again
    End
    msg=;zedlmsg=;nmember=;csr=;csrp=

    Parse VAR zcmd cmd parm1 parm2 parm3 .

    If Wordpos(cmd,'? POHELP')>0 Then Do
        ddd='HELPDRVR SYSEXEC SYSPROC';tutememb='CSMDSNPT'
        Do While ddd/=''
            Parse Var ddd dd ddd
            xxx=$ddalloc(dd,U)
            Do While xxx/=''
                Parse Var xxx xx xxx
                If Sysdsn("'"xx"("tutememb")'")='OK' Then Do
                    ddd=;Leave
                End
            End
        End
        x=helpdrvr(dd'='tutememb parm1);Signal scr2
    End
    retlab1='scr2'

    If Word(zcmd,1)='TRACE' Then Do
        Select
            When Word(zcmd,2)='OFF' Then #tr='R'
            When Word(zcmd,2)='ON'  Then #tr='N'
            Otherwise NOP
        End
        If #tr='R' Then #tr=Trace('O');Else #tr=Trace('R')
        Signal scr2
    End

/*--------------------------------------------------------------------*/
/* Test for scrolling                                                 */
/*--------------------------------------------------------------------*/
    "VGET (zscrolla zscrolln zverb)"
    If zverb  = 'UP' | zverb = 'DOWN' Then Do
        Call scroll_data_ud
        Signal bld2
    End
    If zverb='LEFT' Then Do;cmd='SHOW';parm1='OFF';zcmd='SHOW';End
    Else If zverb='RIGHT' Then Do;cmd='SHOW';parm1='ON';zcmd='SHOW';End

/*--------------------------------------------------------------------*/
/* Test for command entry. If the format is a valid selection command */
/* with member (and parameter) process it and reposition table.       */
/* Note commands 'C D' are not available for individual members.      */
/*--------------------------------------------------------------------*/
    cmdsel='N'
    If zcmd='' Then Signal testsel

    If Length(cmd)=1 & Wordpos(cmd,'SS ST S E B V')>0 Then Do
        cmdsel='Y'
        "TBVCLEAR &TABLE";"TBTOP &TABLE"
        Parse VAR ap xx ',' .
        aster=Index(parm1,'*')
        If aster>1 Then parm1=Substr(parm1,1,aster-1)
        Interpret xx"=parm1"
        "TBSARG &TABLE NAMECOND(&AP)";"TBSCAN &TABLE"
        If rc/=0 Then finds=
        sel=cmd;member=Strip(parm1)
        Call call_exit
        cmd=locatec                         /* Set cmd to reposition  */
    End

    Select
        When cmd=locatec                        Then ex_cmd=Locate_command_sel
        When cmd=sortc                          Then ex_cmd=sortc_command_sel
        When cmd=exitind                        Then ex_cmd=exitind_command_sel
        When cmd='HITS' | Substr(cmd,1,2)='/H'  Then ex_cmd=brow_hits
        When cmd='LISTO' | Substr(cmd,1,2)='/L' Then ex_cmd=brow_listo
        When cmd='SHOW'                         Then ex_cmd=cmd_SHOW
        When cmd='MLIST'                        Then ex_cmd=cmd_MLIST
        When cmd='O' | cmd='X'                  Then ex_cmd=cmd_O_X
        When cmd='MON'                          Then ex_cmd=cmd_M_ON
        When Substr(cmd,1,3)='MOF'              Then ex_cmd=cmd_M_OFF
        When Substr(cmd,1,4) = 'MON='           Then ex_cmd=cmd_M_ON_set
        When cmd='MED'                          Then ex_cmd=cmd_MED
        When cmd='$'                            Then ex_cmd=cmd_Dollar
        When cmd='REFRESH'                      Then ex_cmd=cmd_Refresh
        When Substr(cmd,1,2)='ST'               Then ex_cmd=cmd_STATS
        When Substr(cmd,1,3)='UST'              Then ex_cmd=cmd_USTATS
        Otherwise ex_cmd=cmd_more_#1
    End
    Interpret 'Signal' ex_cmd

cmd_more_#1:
    If Length(zcmd)<3 Then Do
         zedlmsg="Invalid command.";Signal err3
    End

    Parse VAR zcmd v1 v2 v3 v4
    Select
        When v1='C'             Then ex_cmd=copy_command
        When v1='D'             Then ex_cmd=delete_command
        When v1='PRNT'          Then ex_cmd=print_command
        When v1='SAVE' & v2/='' Then ex_cmd=save_command
        Otherwise ex_cmd=cmd_more_#2
    End
    Interpret 'Signal' ex_cmd

cmd_more_#2:
    zedlmsg="Invalid command '"v1"'.";msg='ISRZ001'
    Signal scr2

Locate_command_sel:
    "TBVCLEAR &TABLE";"TBTOP &TABLE"
    Parse VAR ap xx ',' .
    aster=Index(parm1,'*')
    If aster>1 Then parm1=Substr(parm1,1,aster-1)
    Interpret xx"=parm1"
    "TBSARG &TABLE NAMECOND(&AP)";"TBSCAN &TABLE"
    Interpret "yy=Index("xx",parm1)"
    If yy>0 Then Do
        If cmdsel='N' Then Do
            csr='DA1';csrp=4
            zedlmsg="Locate field '"parm1"' found."
        End
        "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
    End
    Else Do
        "TBSKIP &TABLE NUMBER(-2) POSITION(TABPTR)"
        zedlmsg="Locate field '"parm1"' NOT found."
    End
    "SETMSG MSG(ISRZ001)"
    scrolln=0
    Signal bld2

sortc_command_sel:
    "TBSORT &TABLE FIELDS(&SP)"
    tabptr=0;scrolln=0
    Signal bld2

exitind_command_sel:
    Call call_exit
    Signal scr2


cmd_SHOW:
    Select
        When parm1='ON' Then show_me='N'
        When parm1='OFF' Then show_me='Y'
        Otherwise NOP
    End
    If show_me='N' Then show_me='Y';Else show_me='N'
    Signal scr2_a

cmd_MLIST:
    x=build_pdsedonm()
    "VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    Address TSO "DELSTACK"
    "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    umodel="UMODEL_MLIST"
    pomacro='M3'
    "VPUT (pomacro,umodel) SHARED"
    "EDIT DATAID(&DATAID) MACRO("xcmd")"
    pomacro=;"VPUT (pomacro) SHARED"        /* 2 be sure              */
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD(ZTEMPF)"
    Signal scr2

cmd_O_X:
    Parse Upper VAR zcmd . 'HITS' h_oper
    If h_oper='' Then Parse Upper VAR zcmd . h_oper
    h_oper=Space(h_oper,0)
    If h_oper='' Then Do
        zedlmsg="Missing operation command, eg. =1, <5"
        msg='ISRZ001';Signal scr2
    End
    If Datatype(h_oper,'w') Then h_oper='='h_oper
    If Index('<>=',Substr(h_oper,1,1))=0 Then Do
        zedlmsg="Invalid operation indicator. Must be '<', '>' or '='."
        msg='ISRZ001';Signal scr2
    End
    "TBTOP &TABLE";#mhit=mhit
    Do While rc=0
        "TBSKIP &TABLE";If rc/=0 Then Leave
        Interpret "If finds"h_oper "Then tru=1;Else tru=0"
        Select
            When cmd='X' & \tru Then Iterate
            When cmd='O' & tru  Then Iterate
            Otherwise Nop
        End
        "TBDELETE &TABLE";mhit=mhit-1
        If Datatype(finds,'w') Then hits=hits-finds
    End
    "TBTOP &TABLE"
    If #mhit/=mhit Then Signal bld2
    Signal scr2

cmd_STATS:
    "TBTOP &TABLE"
    retlab2=cmd_STATS_retlab
cmd_STATS_retlab:
    Do While rc=0
        "TBSKIP &TABLE";If rc/=0 Then Leave
        v1=member;x=ST_sel_l1()
    End
    "TBTOP &TABLE";scrolln=0
    Signal bld2

cmd_USTATS:
    "TBTOP &TABLE"
    retlab2=cmd_USTATS_retlab
cmd_USTATS_retlab:
    Do While rc=0
        "TBSKIP &TABLE";If rc/=0 Then Leave
        If finds='' Then Iterate
        v1=member;x=US_sel()
    End
    "TBTOP &TABLE";scrolln=0
    Signal bld2

cmd_M_ON_set:
      Parse VAR zcmd . '=' x_macro .
      If x_macro='' Then Do;macro=;emflag='OFF';End
      Else macro='MACRO('x_macro')'
      emac=macro
      zedlmsg="Edit macro '"x_macro"' set."
      'ISRZ001';x=b_o_mac_msg()
      Signal scr2

cmd_M_ON:
    If emflag /= 'N/A' Then Do
        zedlmsg=
        xx=$ddalloc('SYSPROC,SYSEXEC',,x_macro)
        If xx/=x_dsn Then Do
            Address TSO "ALTLIB ACTIVATE APPLICATION(EXEC) DA('"x_dsn"')"
            If rc=0 Then Do
                altlib_a='Y'
                zedlmsg="Dataset '"x_dsn"' ALTLIB allocated. "
            End
            Else Do
                altlib_a='N'
                zedlmsg="Dataset '"x_dsn"' ALTLIB allocation failed.",
                        "Edit macro not set. Use 'MON=...' first."
            End
        End
        Else altlib_a='N'
        If altlib_a='Y' Then Do
            emflag='ON';emac=macro
            zedlmsg=zedlmsg"Edit macro set ON."
        End
    End
    Else zedlmsg="Edit macro not set. Use 'MON=...' first."
    msg='ISRZ001';x=b_o_mac_msg()
    Signal scr2

cmd_M_OFF:
    If emflag /= 'N/A' Then Do
        emflag='OFF'
        zedlmsg="Edit macro set OFF."
    End
    Else zedlmsg="Edit macro not set. Use 'MON=...' first."
    msg='ISRZ001';x=b_o_mac_msg()
    Signal scr2

cmd_MED:
    If edsname='' | Substr(edsname,1,2)='I'd Then Do
        zedlmsg="No edit macro specified."
        msg='ISRZ001'
    End
    Else "EDIT DATASET(&SEDSNAME)"
    Signal scr2

cmd_Dollar:
    in1='OUTPUT';zedlmsg='Display of screen 1.'
    "DISPLAY PANEL(&PANEL) MSG(ISRZ001) CURSOR(ZCMD)"
    in1='INPUT'
    Signal scr2

cmd_Refresh:
    Call rebuild_table
    zedlmsg="Table refreshed only.";"SETMSG MSG(ISRZ001)"
    Signal scr2_a

copy_command:
    If Wordpos(v2,'ALL HITS MISS')>0 Then Do
        lineh=Centre(' Copy to destination ',79,'-')
        line5="{Enter destination dataset below:"
        If line6='LINE6' Then line6="{        DSNAME}===>~'"pdsname"'"
        line7="{        Volume}===>~"
        If line16='LINE16' Then,
            line16="{Enter}EDIT{on the command line to edit the",
                   "member list for the copy."
        dynline=6;dyncol=22
dynscr1:
        "DISPLAY PANEL(DYNAMIC$)"
        If rc/=0 Then Do
            zedlmsg="Copy all abandoned.";"SETMSG MSG(ISRZ001)"
            Signal scr2
        End
        todsn=Strip(Substr(line6,22))
        If todsn='' Then Do
            zedlmsg=&str(dataset name must be entered.)
            "SETMSG MSG(ISRZ001)"
            dynline=6
            Signal dynscr1
        End
        If Substr(todsn,1,1)/="'" Then todsn="'"spref"."todsn"'"
        tovol=Strip(Substr(line7,22))
        If tovol/='' Then Do
            x=Listdsi("'SYS1.LINKLIB' VOLUME("volume")")
            If sysreason=22 Then Do
                zedlmsg="Volume '"volume"' not mounted or defined",
                        "to the  system."
                "SETMSG MSG(ISRZ001)"
                dynline=7;dyncol=22
                Signal dynscr1
            End
            tovol='VOLUME('tovol')';tounit='UNIT('unit')'
        End
        Else Do
            tounit=;tovol=
        End
        "LMINIT DATAID(DATA1) DATASET(&TODSN) &TOVOL"
        If rc/=0 Then Do
            If tovol='' Then dynline=6;Else dynline=7
            zedlmsg="Dataset "todsn" not found."
            "SETMSG MSG(ISRZ001)"
            Signal dynscr1
        End
        "LMFREE DATAID(&DATA1)"
        If volume/='' Then Do
            frvol=volume;frunit='UNIT('unit')'
        End
        Else Do
            frvol=;frunit=
        End
        If Wordpos(v2,'HITS(*) H(*) MISS(*) M(*)')>0 |,
           Wordpos(v3,'HITS(*) H(*) MISS(*) M(*)')>0 Then Do
            copy_opt='IEBCOPYS'
            v2c1=Substr(v2,1,1);v3c1=Substr(v3,1,1)
            Select
                When v2c1='H' Then v3='HITS'
                When v2c1='M' Then v3='MISS'
                When v3c1='H' Then v3='HITS'
                When v3c1='M' Then v3='MISS'
                Otherwise NOP
            End
        End
        Else copy_opt='IEBCOPY'
        Call build_iebcopy
        "VGET ZTEMPF"
        Address TSO "ALLOC DD(SYSIN) DS('"ztempf"') OLD REU"
        Address TSO "EXECIO * DISKW SYSIN (FINIS"
        Address TSO "DELSTACK"
        zcmd=Strip(Substr(linec,15))
edjcl='Y'
        If edjcl='Y' | zcmd='EDIT' | Substr(zcmd,1,2)='/E' Then Do
            "LMINIT DATAID(DATAID) DDNAME(SYSIN)"
            umodel='UMODEL_ES';pomacro='M3';operact='IEBCOPY'
            "VPUT (pomacro,umodel,operact) SHARED"
            "EDIT DATAID(&DATAID) MACRO("xcmd")"
            pomacro=;"VPUT (pomacro) SHARED"     /* 2 be sure         */
            Address TSO "EXECIO * DISKR SYSIN (STEM line. FINIS)"
            "LMFREE DATAID(&DATAID)"
            If line.0=0 Then Do
                Address TSO "FREE DD(SYSIN)"
                zedlmsg="Copy statements deleted."
                "SETMSG MSG(ISRZ001)"
                Signal scr2
            End
        End
        Address TSO
        "ALLOC DD(INDD)  DS('"pdsname"') SHR REU" frvol frunit
        "ALLOC DD(OUTDD) DS("todsn")     SHR REU" tovol tounit
        "ATTRIB XXXATR RECFM(F B A) LRECL(132) BLKSIZE(1320)"
        "ALLOC F(SYSPRINT) DA('"hlqs".SYSPRINT.LIST') NEW",
            "SPACE(10,10)" mgmtclas,
            "TRACKS UNIT("work") DELETE USING(XXXATR) REUSE"
        "TSOEXEC CALL '"IEBCOPY"'"
        rc1=rc
        Address ISPEXEC
        If rc1=0 Then zedlmsg="Copy ALL completed sucessfully."
        Else Do
           zedlmsg="Copy all finished with rc="rc1"."
           "SETMSG MSG(ISRZ001)"
           "LMINIT DATAID(DATAID) DDNAME(SYSPRINT)"
           "BROWSE DATAID(&DATAID)"
           zedlmsg=
        End
        Address TSO "FREE F(INDD,OUTDD,SYSPRINT,SYSIN)"
        Signal scr2
    End
    Else Do
        If Sysdsn("'"pdsname"("v2")'")/='OK' Then Do
            zedlmsg=Sysdsn("'"pdsname"("v2")'")
            Signal reposit
        End
        sel='C';member=v2
        Signal C_sel
    End

print_command:
    x=build_pdsedonm('C')
    "VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    Address ISPEXEC "EDIT DATAID(&DATAID)"
    Address ISPEXEC "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD(ZTEMPF)"
    ms#=Msg('Off');Address TSO "DELETE '"ztempf"'";x=Msg(ms#)
/*  If v2/='' Then dest='DEST('v2')';Else dest=                       */
/*  Address TSO "PRINTOFF '"ztempf"'" dest                            */
    Signal scr2

save_command:
    "TBSAVE &DSOSMEM NAME(&V2)"
    Signal scr2

delete_command:
    If Wordpos('FORCE',v3 v4)=0 Then Do
        If hlq/=userx Then Do
            zedlmsg="Can only issue 'D "v2"' on your own datasets",
                    "or use 'FORCE'."
            msg='ISRZ001'
            Signal scr2
        End
    End
    If Wordpos(v2,'HITS(*) H(*) MISS(*) M(*)')>0 Then Do
        v2c1=Substr(v2,1,1)
        Select
            When v2c1='H' Then v2='HITS'
            When v2c1='M' Then v2='MISS'
            Otherwise NOP
        End
    End
    If v2='MISS' Then Signal delmiss
    If v2='HITS' Then Signal delhits
    If v2='ALL'  Then Signal delall
    If v2='' Then Do
        zedlmsg = "Missing member name to go with command '"v1"'."
        Signal err3
    End
    sel=v1;member=v2;dsname="'"pdsname"("member")'"
    Signal test_selections

/*--------------------------------------------------------------------*/
/* This is the logic for processing selections. It also caters for    */
/* eXclusion of lines from the table.                                 */
/*--------------------------------------------------------------------*/
testsel:
    changed=Index(da1,altered)
    Do While changed > 0
        scrolln  = 0
        "TBVCLEAR &TABLE"
        "TBTOP &TABLE"
        member = Substr(da1,changed+6,8)
        "TBSARG &TABLE NAMECOND(MEMBER,EQ)"
        "TBSCAN &TABLE"
        sel = Translate(Substr(da1,changed+1,2),' ','_')
        If sel = 'X' Then Do
            da1 = Substr(da1,1,changed-1) ||,
                  Substr(da1,changed+(ll+1))
            "TBDELETE &TABLE"
            "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
            rownum=rownum-1;mhit=mhit-1
            If Datatype(finds,'w') Then hits=hits-finds
        End
        Else Do
            Call call_exit
            changed = changed + 1
        End
        "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
        changed = Index(da1,altered,changed)
        If changed = 0 Then Signal bld2
    End

    If lenchg = 'Y' Then Call build_table

/*--------------------------------------------------------------------*/
/* Rebuild screen                                                     */
/*--------------------------------------------------------------------*/
bld2:
    Call build_field
    Signal scr2

ext1:
    "TBEND &TABLE"
    "LIBDEF ISPPLIB"
    "LIBDEF ISPSLIB"
    "LIBDEF ISPLLIB"
    If #ztempf/='' Then x=del_tempf()
    Exit

/*--------------------------------------------------------------------*/
/* This section builds the display field 'DA1' from the table from    */
/* the NEXT row to that poinetd to by variable TABPTR. This allows    */
/* for TBTOP (which is row 0).                                        */
/*--------------------------------------------------------------------*/
build_field:
    Call scroll_table
    x=Trace('o')

    da1=;#m=
    Do zscrmaxd
        "TBSKIP &TABLE"
        If rc /= 0 Then Do
            da1 = da1 || Substr(hl0||ztdmark,1,ll)||ogreen
            Leave
        End
        If #m = '' Then #m = member
        Select
            When (cerror/='') Then hl1 = ored
            When (finds > 10) Then hl1 = oyellow
            When (finds > 1)  Then hl1 = ogreen
            When (finds = 1)  Then hl1 = oturq
            When (finds = 0)  Then hl1 = ored
            Otherwise              hl1 = owhite
        End
/********* \|/ ********* Customise here ********* \|/ *****************/

        If cerror/='' Then hl2=ored;Else hl2=oyellow
        If show_me/='Y' Then dax=,
              hl0   || '|' ||,
              iredu || '  ' ||,
              hl0   || '|' ||,
              hl1   || Substr(member,1,8) ||,
              hl0   || '|' ||,
              hl2   || Substr(oper,1,8) ||,
              hl0   || '|' ||,
              hl3   || Substr(parms,1,8) ||,
              hl0   || '|' ||,
              hl1   || Right(finds,5,' ') ||,
              hl0   || '|' || odesc
        Else dax=,
              hl0   || '|' ||,
              iredu || '  ' ||,
              hl0   || '|' ||,
              hl1   || Substr(member,1,8) ||,
              hl0   || '|' ||,
              hl1   || Right(finds,5,' ') ||,
              hl0   || '|' || ogreen || changes

/********* /|\ ********* Customise here ********* /|\ *****************/
        da1 = da1 || Substr(dax,1,ll+1)
    End

    x=Trace(#tr)
    Return 0

/*--------------------------------------------------------------------*/
/* This section re-positions the table to the appropriate row         */
/* according to the scroll parameters returned from ISPF.             */
/*--------------------------------------------------------------------*/
scroll_table:
    If tabptr + (qual*scrolln) > rownum Then tabptr = rownum
    Else tabptr = tabptr + (qual*scrolln)
    If tabptr < 0 Then tabptr = 0
   "TBTOP &TABLE"
   "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen to selected line after an UP/DOWN command.       */
/*--------------------------------------------------------------------*/
scroll_data_ud:
    If zscrolla = 'MAX' Then Do
        If zverb  = 'UP' Then tabptr  = 0
        Else                  tabptr  = rownum - (zscrolln-1)
        scrolln = 0
    End
    Else Do
        scrolln  = zscrolln
    End
    If zverb  = 'UP' Then qual = -1
    Else                  qual = +1

    Return 0

scroll_data_lr:
    zedlmsg = "'"zverb"' is not active."
    "SETMSG MSG(ISRZ001)"

    Return 4

/*--------------------------------------------------------------------*/
/* To following are constant variables and should not change.         */
/*--------------------------------------------------------------------*/
constant_vars:
    ztdmark = Centre(' Rsend ',79,'*')
    #colors = 7                             /* Number of colors       */

    reverse = X2C('10')                     /* Reverse mask           */
    uscore  = X2C('20')                     /* Underscore mask        */
    blink   = X2C('30')                     /* Blink Mask. Note - this*/
                                            /* may not work on some   */
                                            /* terminals...           */

    ired    = X2C('01')                     /* Input RED etc...       */
    iblue   = X2C('02')
    iyellow = X2C('03')
    igreen  = X2C('04')
    iturq   = X2C('05')
    ipink   = X2C('06')
    iwhite  = X2C('07')

    ored    = D2C(#colors+C2D(ired))        /* Output RED etc...      */
    oblue   = D2C(#colors+C2D(iblue))
    oyellow = D2C(#colors+C2D(iyellow))
    ogreen  = D2C(#colors+C2D(igreen))
    oturq   = D2C(#colors+C2D(iturq))
    opink   = D2C(#colors+C2D(ipink))
    owhite  = D2C(#colors+C2D(iwhite))

    altered = x2c('AA')                     /* Altered field indicator*/

    locatec = '/L'                          /* Locate command         */
    sortc   = '/SORT'                       /* Sort command           */
    exitind = '/'                           /* Exit required indicator*/
    csr     = ''                            /* Cursor field           */
    csrp    = ''                            /* Cursor position        */
    ll      = 79                            /* Line length (ex attrib)*/
    qual    = 1
    scrolln = 0
    sp      = 'xxx,C,A'                     /* Sort Parameter         */
    ap      = 'xxx,GE'                      /* scan Argument parameter*/

    Return 0

/*========================= Variable =================================*/
/********* \|/ ********* Customise here ********* \|/ *****************/

/*--------------------------------------------------------------------*/
/* To following are variables dependant on the application.           */
/*--------------------------------------------------------------------*/
variable_vars:
    mainhead = oyellow ||,
               "Enter your headline here",
               Copies('-',70)
    sp       = 'MEMBER,C,A'                 /* Sort Parameter         */
    ap       = 'MEMBER,GE'                  /* scan Argument parameter*/
    locatec  = 'L'                          /* Disable Locate cmd     */
    sortc    = '/Not_utilised_here'         /* Disable SORT cmd       */
    exitind  = '/Not_utilised_here'         /* Disable EXIT invocation*/

    hl2 = oyellow
    hl3 = igreen
    hl4 = oblue
    iredu   = Bitor(ired,uscore)
    ogreenr = Bitor(ogreen,reverse)

    hl0     = ogreenr
hl0=oturq
    subhead2 = ogreenr"+----+----------+----------+----------+" ||,
               "-------+--------------------------------"oblue
/*------------- The above are required to be customised --------------*/

    Return 0

/*--------------------------------------------------------------------*/
/* This section calls the common exit DSEXIT. Invoked by the setting  */
/* of variable 'EXITIND'.                                             */
/*--------------------------------------------------------------------*/
call_exit:
    retlab1='scr2';retlab2='err2'

    dsname="'"pdsname"("member")'"
    If sel='S' Then Do
       If hlq=userx Then sel='E';Else sel='V'
    End

test_selections:
    Select
        When sel='B' | sel='V' Then Signal B_V_sel
        When sel='E'           Then Signal E_sel
        When sel='CE'          Then Signal CE_sel
        When sel='ST'          Then Signal ST_sel
        When sel='US'          Then Signal US_sel
        When sel='SS'          Then Signal ST_sel
        When sel='D'           Then Signal D_sel
        When sel='C'           Then Signal C_sel
        When sel='R'           Then Signal R_sel
        When sel='L'           Then Signal L_sel
        When sel='X'           Then Signal X_sel
        When sel='P'           Then Signal P_sel
        Otherwise                   Signal other
    End

B_V_sel:
    Call On Error Name errb
    If sel='B' Then Do
        oper='*Browsed';actn='BROWSE';retlab1=B_err_ret
        xxx=
    End
    Else Do
        oper='*Viewed';actn='VIEW'
        xxx=emac
    End
    "&ACTN DATASET(&DSNAME) &XXX &VOLUME"
    Call Off Error
B_err_ret:
    If Index(member,'*')=0 Then "TBMOD &DSOSMEM ORDER"
    Signal nxt2

E_sel:
    oper='*Edited'
    If member='*' Then "EDIT DATASET('&PDSNAME') &EMAC &VOLUME"
    Else "EDIT DATASET(&DSNAME) &EMAC &VOLUME"
    rc1=rc
    If rc1=0 Then Do
        zedlmsg="Member "member" modified.";oper='*Modifd'
    End
    Else zedlmsg = "Member "member" not modified."
    rc=0;If Index(member,'*')=0 Then "TBMOD &DSOSMEM ORDER"
    If rc/=0 Then Do
        oper='*Added'
        finds='?';changes=;changed=1;mhit=mhit+1
        "TBMOD &DSOSMEM ORDER"
        "TBSORT &DSOSMEM FIELDS(&SP)"
        zedlmsg=zedlmsg "Member previously missing from table has",
                "been added."
    End
    Signal err2

CE_sel:
    odesc=cerror
    If Index(member,'*')=0 Then "TBMOD &DSOSMEM ORDER"
    odesc=
    Return 0

US_sel:
    pomacro='M5';"VPUT (pomacro) SHARED"
    "EDIT DATASET('&PDSNAME(&MEMBER)') MACRO("xcmd")"
    pomacro=;"VPUT (pomacro) SHARED"        /* 2 be sure              */
    oper='*UStat'
    Signal ST_sel_US

ST_sel:
    oper='*Status'
ST_sel_US:
    Parse VAR dsname . '(' v1 ')'
ST_sel_l1:
    "LMINIT DATAID(DATAID) DATASET('"pdsname"') &VOLUME"
    "LMOPEN DATAID(&DATAID) OPTION(INPUT)"
    "LMMLIST DATAID(&DATAID) OPTION(LIST) MEMBER(V1)  STATS(YES)"
    rc1=rc
    "LMCLOSE DATAID(&DATAID)";"LMFREE DATAID(&DATAID)"
    If rc1=0 Then Do
      If zlmdate/='' Then Do
        zedlmsg='Cdate:'ZLCDATE 'Lmdate:'ZLMDATE ZLMTIME 'Size:'ZLCNORC,
                'Lev:'zlvers'.'zlmod 'id:'ZLUSER
        odesc=owhite||ZLMDATE||oblue||ZLMTIME 'by'||oyellow||ZLUSER
      End
      Else Do
        zedlmsg='Stats unavailable.'
        odesc=ored||'Unavailable'
      End
    End
    Else zedlmsg='Error getting stats for member "'v1'".'
    "TBMOD &DSOSMEM ORDER";odesc=
    Return 0

UST_sel:
    oper='*U_Stat'
UST_sel_US:
    Parse VAR dsname . '(' v1 ')'
UST_sel_l1:
"CONTROL ERRORS CANCEL"
    datem=$DATEMAN(REV,,4)
    "LMINIT DATAID(DATAID) DATASET('"pdsname"') &VOLUME"
    "LMOPEN DATAID(&DATAID) OPTION(INPUT)"
    "LMMSTATS DATAID(&DATAID) MEMBER("V1")",
            "MODDATE4("datem") MODDATE("Substr(datem,3)")",
            "MODTIME("Substr(Time(),1,5)")",
            "USER("Userid()")"
    rc1=rc
    "LMCLOSE DATAID(&DATAID)";"LMFREE DATAID(&DATAID)"
    If rc1=0 Then Do
        zedlmsg='Stats updated...'
        odesc=owhite||'Stats updated...'
    End
    Else Do
        zedlmsg='Stats update failed...'
        odesc=ored||'Stats update failed...'
      End
    "TBMOD &DSOSMEM ORDER";odesc=
    Return 0

D_sel:
    If Sysdsn(dsname)/='OK' Then Do
        zedlmsg=Sysdsn(dsname)"."
        Signal reposit
    End
    qdsname="'"pdsname"'"
    l#=$dat@csr('/L#');zwinttl='CSMDSNPO Process';#popr=l#-2;#popc=17
    zedsmsg=;zedlmsg=;"SETMSG MSG(ISRZ001)"
    "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
    zcmd=
    "DISPLAY PANEL($MEMBDEL)";rc2=rc;"REMPOP"
    If rc2/=0 Then Do
        zedlmsg="Delete of member "member" abandoned."
        Signal reposit
    End
    "LMINIT DATAID(DATAID) DATASET('"pdsname"') ENQ(SHRW) &VOLUME"
    "LMOPEN DATAID(&DATAID) OPTION(OUTPUT)"
    "LMMDEL DATAID(&DATAID) MEMBER(&MEMBER)"
    rc1=rc
    "LMCLOSE DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    x=Trace(#tr)
    If rc1=0 Then Do
        zedlmsg="Memeber '"member"' deleted."
        oper='*Deleted'
        count=count-1;mhit=mhit-1
        If finds/='' Then If Datatype(finds,'w') Then hits=hits-finds
        finds=
        "TBMOD &DSOSMEM"
    End
    Else zedlmsg='Memeber not deleted, RC='rc1'.'
    "SETMSG MSG(ISRZ001)"
    Signal reposit

C_sel:
    f00=sel;csdsn00=dsname
    If volume/='' Then Do
        Parse VAR volume 'VOLUME(' volp ')';parms="V="volp
    End
    Call csmdsn
    oper='*CopiedX';"TBMOD &DSOSMEM"
    Signal nxt2

X_sel:
    zedlmsg="Member '"member"' excluded."
    "TBDELETE &DSOSMEM"
    If finds/='' Then;hits=hits-finds
    mhit=mhit-1;count=count-1
    Signal reposit

R_sel:
    If volume/='' Then Do
        x=Listdsi("'"pdsname"'")
        If alkvol/=sysvolume Then Signal errvol
    End
    If cmdsel='N' Then Do
        zludata=Strip(Substr(da1,changed+28,8))
        zlmember=member
        changed=changed+27
    End
    Else Do
        zludata=parm2
        zlmember=parm1
/*      changed='N'                                                   */
    End
    rn_e='N'
redirnam:
    If zludata='' | rn_e='Y' Then Do
        If rn_e='N' Then zedlmsg="Enter new name."
        "SETMSG MSG(ISRZ001)"
        zcmd=
/*      "DISPLAY PANEL(CSMDSNRM)"                                     */
        l#=$dat@csr('/L#');zwinttl='LMPRMEMB Process';#popr=l#-2;#popc=17
        If newmemb='' Then Do
            newmemb=member;csrp1=Length(newmemb)+1;If csrp1>8 Then csrp1=8
        End
        "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
        "DISPLAY PANEL($MEMBREN)";rc1=rc;"REMPOP"
        If rc1/=0 Then Do
            zedlmsg="Rename abandoned."
            "SETMSG MSG(ISRZ001)"
            Signal reposit
        End
    End
    zludata=newmemb
    newm="'"pdsname"("Strip(zludata)")'"
    If Sysdsn(newm)='OK' Then Do
        zedlmsg="Member "zludata" already exists."
        rn_e='Y'
        Signal redirnam
    End
    x=Msg('On');x=Outtrap('lineo.',5,'NOCONCAT')
    Address TSO "RENAME" dsname newm
    rc1=rc
    If rc1=0 Then Do
        zedlmsg="Member '"zlmember"' renamed to '"zludata"'."
        oper='*Renamed'
        sfinds=finds;finds=
        "TBMOD &DSOSMEM ORDER"
        member=zludata;finds=sfinds;parms=;oper=zlmember
        "TBMOD &DSOSMEM ORDER"
    End
    Else zedlmsg=lineo.1"."
    Signal reposit

P_sel:
    If volume/='' Then Signal errvol
    If parms/='' Then dest='DEST('parms')';Else dest=
    #m1=Msg('On');x=Outtrap('lineo.',5,'NOCONCAT')
    Address TSO "PRINTOFF" dsname dest
    rc1=rc
    x=Msg(#m1)
    If rc1=0 Then Do
        Address TSO "FREE" dsname
        zedlmsg=Strip(lineo.2);oper='*Printed'
        "TBMOD &DSOSMEM ORDER"
    End
    Else zedlmsg="Member "member" not printed."
    Signal reposit

L_sel:
    pomacro='M2'
    "VPUT (pomacro,member) SHARED"
    "VIEW DATASET('&POLIST') MACRO("xcmd")"
    If rc1=0 Then Do
        oper='*Listed'
        "TBMOD &DSOSMEM ORDER"
    End
    pomacro=;"VPUT (pomacro) SHARED"        /* 2 be sure              */
    Signal reposit

other:
csmdsn:
    parm1 = '%MDS'
    parm2 = '?'
    parm3 = sel
    parm4 = dsname
    parm5 = Strip(parms)
    parm6 = ''
    parm7 = ''
    parm8 = ''
    "SELECT CMD(%CSMDSN" parm1 parm2 parm3,
        parm4 parm5 parm6 parm7 parm8")"
    If sel = 'C' Then Return
    Signal nxt2

delall:
delmiss:
delhits:
    xmsg=
    "TBTOP &DSOSMEM"
    If Substr(v3,1,1)='B' Then Do
        "VGET ZTEMPF"
        xx=build_csmdsndb()
        If xx/=0 Then Do
            xmsg='Batch JCL generation routine "'batchisp'" not found.',
                 'Substituting on-line processing. '
            Signal del_online
        End
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        Address TSO "DELSTACK"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        umodel="UMODEL_SUBE";pomacro='M3';m3rc=0
        "VPUT (pomacro,umodel,m3rc) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd")"
        pomacro=;"VPUT (pomacro) SHARED"    /* 2 be sure              */
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Signal scr2
    End
del_online:
    x=Msg('Off')
    xmsg=xmsg ||,
         'Each of the "'v2'" members will be presented in sequence.',
         'Press [ENTER] to process it, END PF key to bypass it,"NP"',
         'to no longer prompt for confirmation or "QUIT" on the',
         'command line to exit loop. Please note that members already',
         'processed are comitted and will have to be manually reversed.'
    qdsname="'"pdsname"'"
    l#=$dat@csr('/L#');zwinttl='CSMDSNPO Process';#popr=l#-2;#popc=17
    zedsmsg=;zedlmsg=;"SETMSG MSG(ISRZ001)"
    Do Forever
        "TBSKIP &DSOSMEM"
        If rc/=0 Then Leave
        Select
            When (v2='MISS' & finds/='') Then Iterate
            When (v2='HITS' & finds='')  Then Iterate
            Otherwise Nop
        End
        dsname="'"pdsname"("member")'"
        zcmd=
        If v3='NP' Then "CONTROL NONDISPL ENTER"
        zedlmsg=xmsg;zedsmsg=;"SETMSG MSG(ISRZ001)"
        "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
        zcmd=
        "DISPLAY PANEL($MEMBDEL)";rc1=rc;"REMPOP"
        If rc1=0  Then Do
            If Substr(zcmd,1,1)='Q' Then Do
                zedlmsg=v1 v2 "terminated by 'QUIT' command."
                "SETMSG MSG(ISRZ001)"
                Leave
            End
            If zcmd='NP' Then v3='NP'
            Address TSO "DELETE" dsname
            If rc=0 Then Do
                oper='Del'
                "TBMOD &DSOSMEM"
            End
        End
        If v3='NP' Then Do
            zedlmsg=;zedsmsh=
            "SETMSG MSG(ISRZ001)"
        End
    End
    Call build_field
    Signal scr2


reposit:
    "SETMSG MSG(ISRZ001)"
nxt2:
    Return 0

/*--------------------------------------------------------------------*/
/* This section calls the program to build the table. Variable KEEPTB */
/* is set to Yes to indicate return of table to this routine without  */
/* program processing.                                                */
/*--------------------------------------------------------------------*/
build_table:
    If batchsub = 'Y' Then Signal cretbl
    If trace='1' Then x=TRace('R')
    zedlmsg = "Online PDSEDIT in proces. Stage - 1 of 3 be patient."
    "SETMSG MSG(ISRZ001)"
    "CONTROL DISPLAY LOCK"
    "CONTROL DISPLAY REFRESH"
    "DISPLAY PANEL(&PANEL) CURSOR(ZCMD)"
    If sodsname /= '' Then pdsname = sodsname
    Else                   pdsname = sidsname
    pdsname = Substr(pdsname,2,Length(pdsname)-2)
    x = LISTDSI("'"pdsname"' NORECALL")
    If sysdsorg /= 'PO' Then Do
        zedlmsg = "Can only process PDS not sequential datasets."
        Signal err1
    End
    ddaloc = 'Y'
/*  If Sysdsn("'"pohits"'") = 'OK' &,                                 */
/*     Sysdsn("'"polist"'") = 'OK' Then Signal bypass                 */
    "LIBDEF ISPTLIB DATASET ID(&DSNDSOS)"
    "LIBDEF ISPTABL DATASET ID(&DSNDSOS)"
    #m=Msg('Off')
    Address TSO
    "FREE ATTRLIST(XXXATR) FILE(SYSUT1 SYSUT2 SYSOUT SYSPRINT)"
    "FREE FILE(SYSDUMP SYSUDUMP)"
    "ATTRIB XXXATR RECFM(F B A) LRECL(121) BLKSIZE(121)"
    "DELETE '"pohits"'"
    "DELETE '"polist"'"
    Signal on Syntax Name error_off_$ALKUVOL
    unit="UNIT("unit2")"
    unit=$alkuvol()
error_off_$ALKUVOL:Signal off Syntax
x=Msg('On')
    "ALLOC F(SYSPRINT) DA('"pohits"') NEW SPACE(10,10)",
                mgmtclas,
                "TRACKS" unit "CATALOG USING(XXXATR) REUSE",
                "RELEASE"
    "ALLOC F(SYSOUT) DA('"polist"') NEW SPACE(30,15)",
                mgmtclas,
                "TRACKS" unit "CATALOG USING(XXXATR) REUSE",
                "RELEASE"
    Address

bypass:
    If trace='2' Then x=TRace('R')
    zedlmsg="Stage - 2 of 3. be patient.";"SETMSG MSG(ISRZ001)"
    "CONTROL DISPLAY REFRESH"
    "CONTROL DISPLAY LOCK";"DISPLAY PANEL(&PANEL) CURSOR(ZCMD)"
    maxcc=0
    Address TSO "ALLOC F(SYSUT1) DS("idsname") "avolume" SHR REUSE"
    rcode=rc
    If sodsname /= '' Then,
        Address TSO "ALLOC F(SYSUT2) DS('"pdsname"') SHR REUSE"
    Address TSO "ALLOC F(SYSOUT) DA('"polist"') SHR REUSE"
    Address TSO "ALLOC F(SYSPRINT) DA('"pohits"') SHR REUSE"
    Address TSO "ALLOC F(SYSIN) DS('"ztempf"') SHR REUSE"
    "TBERASE &DSOSMEM"
    Address TSO "CALL '"steplib"(PDSEDIT)'"
    If Index(maxcc,'37')>0 Then Do
        Address TSO "FREE ATTRLIST(XXXATR) FILE(SYSUT1 SYSUT2 SYSOUT SYSPRINT)"
        odsname="'"pdsname"'"
        msg='ISRZ001'
        zedlmsg=maxcc "- "odsname" needs to be compressed prior to continuing."
        Signal scr2
    End
    Address TSO "FREE ATTRLIST(XXXATR)"
/*  "BROWSE DATASET('&POLIST')"                                       */

cretbl:
    If trace='3' Then x=TRace('R')
    zedlmsg="Stage - 3 of 3. be patient.";"SETMSG MSG(ISRZ001)"
    "CONTROL DISPLAY LOCK";"DISPLAY PANEL(&PANEL) CURSOR(ZCMD)"

rebuild_table:
/*  dsosmem = 'PO'Substr(time(),1,2)||,                               */
/*                Substr(time(),4,2)||,                               */
/*                Substr(time(),7,2)                                  */

/*  "VPUT (L,DSOSMEM) SHARED"                                         */
/*  "EDIT DATASET('&POHITS') MACRO(EDITPDS)"                          */
    pomacro='M1'
    "VPUT (l,dsosmem,pomacro,ctype) SHARED"
    "EDIT DATASET('&POHITS') MACRO("xcmd")"
    pomacro=;"VPUT (pomacro) SHARED"        /* 2 be sure              */
    "VGET (count,hits,mhit,lerrors) SHARED"
    count=count+0;hits=hits+0
    x=MSG('Off')
    Address TSO "FREE F(SYS010)"
    "TBOPEN &DSOSMEM"
    If lerrors/='' Then Do
        msg='ISRZ001';zedlmsg="Following PDSEDIT error messages found -",
        "'"Space(lerrors)"'. Change(s) may be incomplete.",
        'Enter "HITS" on the command line to view output and correct manually.'
    End

bypassz:
    "TBSKIP &DSOSMEM"
    If rc/=0 Then Do
        "TBCLOSE &DSOSMEM"
        If savetbl='N' Then "TBERASE &DSOSMEM"
        msg='ISRZ001';zedlmsg="No members selected from "pdsname"."
        Signal again
    End
    Else Do
        "TBSORT &DSOSMEM FIELDS(MEMBER,C,A)"

        "TBTOP &TABLE"
        "TBQUERY &TABLE ROWNUM(rownum) POSITION(tabptr)"
        rownum = rownum + 0
    End

    Return 0

Show_hits:
    If count = 0 Then Return 0
    show_bl = 'Y'
    pomacro = 'M4'
    "VPUT (pomacro) SHARED"
    "EDIT DATASET('&POLIST') MACRO("xcmd")"
    pomacro=;"VPUT (pomacro) SHARED"        /* 2 be sure              */

    Return 0

/********* /|\ ********* Customise here ********* /|\ *****************/
/*-----/|\--------------------<=====----------------------------------*/

/*--------------------------------------------------------------------*/
/* Set up variable 'SORE' for member inclusion exclusion list         */
/*--------------------------------------------------------------------*/
set_sore:
    If member='' Then Do
        Parse VAR idsname idsname '(' member ')'
        If Substr(idsname,1,1)="'" Then idsname=idsname"'"
    End
    sore=
    If member='' Then Signal end_sore
    xxx=Translate(member,' ',',')
    Do While xxx/=''
        Parse VAR xxx member xxx
        ap=Index(member,'*')
        If ap=1 Then Do
            ap1=Index(member,'*',ap+1)
            If ap1=0 Then Signal end_sore
            member=Substr(member,ap+1,ap1-(ap+1))
            mw='Y'
        End
        If ap>1 Then Do
            member=Substr(member,1,ap-1)
            mw='N'
        End
        mask=member
        If mw='Y' Then member=
        If Substr(idsname,1,1)="'" Then dsn=idsname
        Else dsn="'"spref"."idsname"'"
        If alkvol='' Then "LMINIT DATAID(dataid2) DATASET(&DSN)"
        Else "LMINIT DATAID(dataid2) DATASET(&DSN) VOLUME(&ALKVOL)"
        "LMOPEN DATAID(&dataid2) OPTION(INPUT)"
        Do Forever
            "LMMLIST DATAID(&dataid2) OPTION(LIST) MEMBER(MEMBER)  STATS(NO)"
            If rc/=0 Then Leave
            If mw='N' Then Do
                If ap>0 Then,
                    If Substr(member,1,length(mask))/=mask Then Leave;Else Nop
                Else If member/=mask Then Leave;Else Nop
                sore=sore','Strip(member)
            End
            Else Do
                If Index(member,mask)=0 Then Iterate
                sore=sore','Strip(member)
            End
        End
        "LMMLIST DATAID(&dataid2) OPTION(FREE)"
        "LMCLOSE DATAID(&dataid2)"
    End
    If sore/='' Then Do
        sore='S('Substr(sore,2,Length(sore)-1)')'
        zedlmsg='Member selection list generated below.'
    End
    Else zedlmsg="No match found for member list '"mask"'."
    "SETMSG MSG(ISRZ001)"
    sore#=sore
    Call parse_sore
end_sore:
    Return

/*--------------------------------------------------------------------*/
/* Parse sore to get the right value                                  */
/*--------------------------------------------------------------------*/
parse_sore:
    sorel = Length(sore)
    If sore = '' Then Return
    If Substr(sore,sorel,1) = '>' Then Do
        pref  = Substr(sore,1,2)
        pref1 = Substr(sore1,1,2)
        If pref = pref1 Then Return
        Do i=1 To 50
            x = Value('sore'i)
            If x = '' Then Return
            data = "sore"i" = '"pref||Substr(x,3)"'"
            Interpret data
        End
        Return
    End
    pref  = Substr(sore,1,2)
    ww    = Substr(sore,3,sorel-3)
    Do i=1 To 50
        Parse VAR ww xx 56 yy ',' ww
        If xx /= '' Then data = "sore"i" = pref||xx||yy')'"
        Else             data = "sore"i" = ''"
        Interpret data
    End
    If sorel > 148 Then sore = Substr(sore,1,147)'>'
    Return

/*--------------------------------------------------------------------*/
/* Set up variable 'SORE' to ''AND' with last display of HITS....     */
/*--------------------------------------------------------------------*/
and_sore:
    "TBOPEN &DSOSMEM NOWRITE"
    If rc /= 0 Then Do
        zedlmsg = "Cannot 'AND' as table could not be opened."
        "SETMSG MSG(ISRZ001)"
        Return
    End
    "TBTOP &DSOSMEM"
    sore   = ''
    Do Forever
        "TBSKIP &DSOSMEM"
        If rc /= 0 Then Leave
        Select
            When (Substr(parm1,1,1) =  'M' & finds /= '') Then Iterate
            When (Substr(parm1,1,1) /= 'M' & finds =  '') Then Iterate
            Otherwise NOP
        End
        sore = sore','Strip(member)
    End
    "TBEND &DSOSMEM"
    If sore /= '' Then Do
        sore = 'S('Substr(sore,2,Length(sore)-1)')'
        Call parse_sore
    End
    Return

/*--------------------------------------------------------------------*/
/* Error routine for browse/edit operations                           */
/*--------------------------------------------------------------------*/
errb:
    rc1=rc
    Call Off Error
    If rc1>4 Then Do
        "SETMSG MSG(&ZERRMSG)"
        If nond='ON' Then "DISPLAY PANEL(&PANEL)"
        If alkvol/='' Then curs='ALKVOL';Else curs='IDSNAME'
        oper='*Error'
        Interpret "Signal "retlab1
    End
    Return rc1

err1a:
    Address TSO "FREE DD(ZTEMPF)"
err1:
    msg = 'ISRZ001'
    Signal scr1

err2:
    msg = 'ISRZ001'
    Signal nxt2

err3:
    msg = 'ISRZ001'
    Signal scr2

errvol:
    zedlmsg = "Cannot rename when usin volume '"alkvol"'."
    Signal reposit

brow_hits:
    If parm1 = '/V' | Substr(parm1,1,1) = 'V' Then actionx = 'VIEW'
    Else                                           actionx = 'BROWSE'
    Call On Error Name errb
    "&ACTIONX DATASET('&POHITS')"
    Signal return_lab

brow_listo:
    If parm1 = '/V' | Substr(parm1,1,1) = 'V' Then actionx = 'VIEW'
    Else                                           actionx = 'BROWSE'
    Call On Error Name errb
    "&ACTIONX DATASET('&POLIST')"
    curs=;csr=
/*  Signal return_lab                                                 */

return_lab:
    Call Off Error
    Interpret "Signal "retlab1

b_o_mac_msg:
    o_mac_msg=" (Edit-macro:"ored||x_macro||oturq"- "emflag")"
    Return 0

/*--------------------------------------------------------------------*/
/* Delete any residual temp files created using $ztempf and left lying*/
/* around.                                                            */
/*--------------------------------------------------------------------*/
del_tempf:
    If #ztempf/='' Then Do
        m#=Msg('Off');Address TSO "DELETE '"tempf"'";x=Msg(m#)
        Do While #ztempf/=''
            Parse VAR #ztempf tempf #ztempf
            If Index(tempf,'-')>0 Then Do
                Say 'tempf='tempf
                Parse VAR tempf '-' tempf
            End
            Address TSO "DELETE '"tempf"'"
        End
        m#=Msg('Off');Address TSO "DELETE '"tempf"'";x=Msg(m#)
    End
    Return 0

/*--------------------------------------------------------------------*/
/* This part is executed as a macro and is intended to list the hits  */
/* for the selected member.                                           */
/*--------------------------------------------------------------------*/
Macro_2:
    "VGET (member) SHARED"
    "ISREDIT (status) = USER_STATE"
    "ISREDIT RESET"
    "ISREDIT FIND 'MEMBER &MEMBER ' 2 LAST"
    "ISREDIT X ALL .zCSR .ZLAST"
    "ISREDIT FIND 'DETAIL REPORT FOR MEMBER &MEMBER' 2 PREV"
    "ISREDIT X ALL .ZFIRST .ZCSR"

    zedlmsg = "Hits for member '"member"'."
    "SETMSG MSG(ISRZ001)"

    "ISREDIT USER_STATE = (status)"
    Exit

/*--------------------------------------------------------------------*/
/* This part is executed as a macro and is intended to extract all    */
/* finds from the PDSEDIT report dataset.                             */
/*--------------------------------------------------------------------*/
Macro_1:
    "VGET (l,dsosmem,ctype) SHARED"
    table=dsosmem
    "TBEND &TABLE"
    "TBCREATE &TABLE KEYS(MEMBER) NAMES(",
           "PARMS OPER FINDS CHANGES ODESC CERROR",
           ") REPLACE"
    "ISREDIT X ALL"
    "ISREDIT F 'MEMBER ' 2 ALL"
    If ctype='C' Then "ISREDIT F 'PDE' 2 ALL"
    "ISREDIT DEL ALL X"
    If l='Y' Then Do
        "ISREDIT X ' 0 FINDS' 24 31 ALL"
        "ISREDIT DEL ALL X"
    End
    "ISREDIT (last)=LINENUM .ZLAST"

    Parse Value '0 0 0' With count hits mhit parms oper lerrors
    parms=;oper=;count=0;hits=0;mhit=0
    Do i=1 To last
        "ISREDIT (xstat) = XSTATUS "i
        If xstat='X' Then Do
            If l='Y' Then Iterate
            mhit=mhit+1
        End
        "ISREDIT (line)=LINE" i
        Parse VAR line w1 member finds . chgs . ins . dels .
        If ctype='C' & finds /= chgs Then Do
            If Substr(w1,1,3)='PDE' Then Iterate
            "ISREDIT (linee)=LINE" i-1
            Parse VAR linee cerror +50 1 e1 .
            oper='CH-Error'
            If Wordpos(e1,lerrors)=0 Then lerrors=lerrors e1
        End;Else Do;Parse Value '' With cerror oper;End
        count=count+1
        If Datatype(finds,'w') Then hits=hits+finds
        If finds=0 Then finds=
        "TBMOD &TABLE"
    End
    mhit=count-mhit

    "TBCLOSE &TABLE"
    "VPUT (hits,count,mhit,lerrors) SHARED"
    "ISREDIT CANCEL"
    Exit

/*--------------------------------------------------------------------*/
/* This is used to insert NOTELINES into Edited members.              */
/*--------------------------------------------------------------------*/
Macro_3:
    "VGET (umodel) SHARED"
    "ISREDIT RESET"

    Signal On Syntax Name ret_syntax_1
    cname='there'
    cname=$Whoami('C')
ret_syntax_1:
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End

    Interpret 'Call' umodel

    "CONTROL ERRORS RETURN"
    Address ISREDIT
    "(caps)=CAPS";"CAPS=OFF"
    ntype='NOTELINE'
    x=nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1||'var'||p2'
        End
        x=nl('*'Substr(line,1,70)'*')
    End
    x=nl('*'Copies('-',70)'*')
    "CAPS=(caps)"
    Address
    Return 0

/*--------------------------------------------------------------------*/
/* This part is executed if requested to show the hits in the table.  */
/*--------------------------------------------------------------------*/
Macro_4:
    pomacro=
    "VPUT (pomacro) SHARED"
    "VGET (dsosmem) SHARED"
    table=dsosmem
    Do Forever
        "ISREDIT F 'DETAIL REPORT FOR MEMBER' 2"
        If rc/=0 Then Leave
        "ISREDIT (lin#)=LINENUM .ZCSR";"ISREDIT (line)=LINE .ZCSR"
        member=Word(line,5)
        "TBSCAN &TABLE ARGLIST(MEMBER)";"ISREDIT (line)=LINE" lin#+2
        "ISREDIT F '*FOUND****' 2"
        "ISREDIT (line)=LINE .ZCSR"
        Parse VAR line . #changes;changes=Strip(#changes)
        "TBMOD  &TABLE"
    End

    "ISREDIT CANCEL"
    Exit

/*--------------------------------------------------------------------*/
/* Save and exit.                                                     */
/*--------------------------------------------------------------------*/
Macro_5:
    "ISREDIT SAVE";"ISREDIT END"
    Exit

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
nl: Parse Arg noteline
    If ima_macro Then "LINE_BEFORE .ZFIRST=&NTYPE (noteline)"
    Else Say noteline
    Return 0

/*--------------------------------------------------------------------*/
/* The following are the various NOTELINE that are created            */
/*--------------------------------------------------------------------*/
umodel_zed:
    n_st=mark(2)                            /* Mark next line         */
/*

    Good &TOD. &CNAME..

    This is the JCL that has been generated from the parameters you
    have supplied. Use END PF Key to submit job
            - OR -
    delete all the lines or enter DONTSUB/KS to abandon submission.

                            *****

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    Return 0

/*--------------------------------------------------------------------*/
umodel_es:
    "VGET (operact) SHARED"
    n_st=mark(2)                            /* Mark next line         */
/*

    Good &TOD. &CNAME..

    This is the SYSIN parameter that will be passed to the &OPERACT.
    session. If you DO NOT wish to continue, delete ALL lines out of
    this member and then use your END PF key to terminate the edit
    session.

    NOTE - You may manually change this member, however, be sure you
           know what you are doing as you could create irreversable
           damage if you use the CHANGE and/or DELETE commands.

                            *****

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    Return 0

/*--------------------------------------------------------------------*/
umodel_sube:
    n_st=mark(2)                            /* Mark next line         */
/*

    Good &TOD. &CNAME..

    This is the JCL that has been generated from the parameters you
    have supplied. Enter 'SUB' on the command line to to process
    job or copy it into a permanent PDS(member) for later use.

                            *****

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    Return 0

/*--------------------------------------------------------------------*/
umodel_mlist:
    n_st=mark(2)                            /* Mark next line         */
/*

    Good &TOD. &CNAME..

    This is a member list of the table details. You can copy them to
    your favourite destination er end out and loose it for good.
    If you just need the member names enter the following on the
    command line:
           C P'¬' ' ' 10 80 ALL


                            *****

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    Return 0

build_pdsedons:
    Address TSO
    "NEWSTACK"
    If btchexec = 'Y' Then Do
        x=JC(id '/Q /9 /BB')
        Queue "//"Copies('*',68)
        Queue "//*"
        Queue "//* Find all occurences of a character string(s) in a",
              "PDS"
        Queue "//*"
        Queue "//"Copies('*',68)
        Queue "//*"
        If pdsekeep='Y' Then Do
            Queue "//VARS SET  HITS="pohits".BATCH"
            Queue "//     SET LISTO="polist".BATCH"
            Queue "//*"
        Queue "//"Copies('*',68)
        Queue "//*"
            Queue "//DELETE   EXEC PGM=IEFBR14"
            Queue "//SYSPRINT DD DSN=&HITS,"
            Queue "//            DISP=(MOD,DELETE),SPACE=(TRK,(0,0)),"
            Queue "//            UNIT="unit2
            Queue "//SYSOUT   DD DSN=&LISTO,"
            Queue "//            DISP=(MOD,DELETE),SPACE=(TRK,(0,0)),"
            Queue "//            UNIT="unit2
            Queue "//*"
        End
        Queue "//UPDTEPRC EXEC PGM=PDSEDIT,REGION=2048K"
        Queue "//STEPLIB  DD DISP=SHR,DSN="steplib
        If pdsekeep='Y' Then Do
            Queue "//SYSPRINT DD DSN=&HITS,"
            Queue "//            DISP=(NEW,CATLG),SPACE=(TRK,(30,15),RLSE),"
            Queue "//            UNIT="unit2",DCB=(RECFM=FBA,LRECL=121," ||,
                  "BLKSIZE=0)"
            Queue "//SYSOUT   DD DSN=&LISTO,"
            Queue "//            DISP=(NEW,CATLG),SPACE=(TRK,(30,15),RLSE),"
            Queue "//            UNIT="unit2",DCB=(RECFM=FBA,LRECL=121," ||,
                  "BLKSIZE=0)"
        End
        Else Do
            Queue "//SYSPRINT DD SYSOUT="lcl
            Queue "//SYSOUT   DD SYSOUT="lcl
        End
        Queue "//*SYSOUT   DD SYSOUT="hcl
        If alkvol /= '' Then Do
            Queue "//SYSUT1   DD DISP=SHR,DSN="sidsname","
            Queue "//            VOL=SER="alkvol", <- If uncataloged"
            Queue "//            UNIT=SYSALLDA"
        End
        Else,
            Queue "//SYSUT1   DD DISP=SHR,DSN="sidsname
        If sodsname /= '' Then,
            Queue "//SYSUT2   DD DISP=SHR,DSN="sodsname
        Queue "//SYSIN    DD DATA,DLM=$$"
    End
    Queue "PDS IN(SYSUT1)" fieldr
    If sedsname/='' Then Do
        Parse Value Strip(sedsname,,"'") with xxx '(' yyy ')' .
        If "'"xxx"'"=sidsname Then Queue 'E('yyy')'
    End
    If sodsname /= '' Then Do
        Queue "OUT(SYSUT2)"
        If l = 'Y' Then Queue "NOCOPY"
    End
    If sore1/='SORE1' Then Do i=1 To 30
        v=Value("SORE"i);If v/='' Then Queue v
    End
    Do i=1 To 20
        v=Value("PROCES"i);If v/='' Then Queue v
    End
    If btchexec='Y' Then Queue "$$"
    Queue ''

    Address ISPEXEC
    Return 0

build_pdsedonm: Arg p_type
    "TBTOP &TABLE"
    Address TSO
    "NEWSTACK"
    Queue "Member   Hits"
    Queue "-------- ----"
    Do Forever
        Address ISPEXEC "TBSKIP &TABLE"
        If rc /= 0 Then Leave
        If p_type/='C' Then chanbges=
        Queue Substr(member,1,8) Right(finds,4) changes
    End
    Queue ''

    Address ISPEXEC
    "TBTOP &TABLE"
    "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Return 0

build_iebcopy:
    Address TSO
    "NEWSTACK"

    Queue "  COPY   INDD=INDD,OUTDD=OUTDD"

    If copy_opt='IEBCOPYS' Then Do
        Address ISPEXEC "TBTOP &TABLE"
        Do Forever
            Address ISPEXEC "TBSKIP &TABLE"
            If rc/=0 Then Leave
            If v3='MISS' & finds='' Then,
                Queue "     SELECT MEMBER=(("member",,R))"
            If v3='HITS' & finds/='' Then,
                Queue "     SELECT MEMBER=(("member",,R))"
        End
        Address ISPEXEC
        "TBTOP &TABLE"
        "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    End

    Queue ''
    Return 0

build_csmdsndb:

    Signal On Syntax Name ret_syntax_2
    Interpret "xxx="batchisp"('RETURN')"
ret_syntax_2:Signal Off Syntax
    Address TSO;"NEWSTACK"
    If id='' Then id='B'
    x=JC(id '/Q /9 /BB')
Queue "//**************************************************************"
Queue "//*"
Queue "//*  Batch delete function of CSMDSNPO."
Queue "//*"
Queue "//*  JCL to execute batch REXX to delete multiple members out"
Queue "//*  of PDS's even if they er enq'd under ISPF."
Queue "//*"
Queue "//**************************************************************"
Queue "//**************************************************************"
Queue "//*"
Queue "//*  Create a temp dataset to hold the REXX executable."
Queue "//*"
Queue "//**************************************************************"
Queue "//STEP1 EXEC PGM=IEBUPDTE,PARM=NEW"
Queue "//SYSPRINT DD SYSOUT=*"
Queue "//SYSUT2   DD DSN=&&CLISTS,"
Queue "//       DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(TRK,(2,1,1)),"
Queue "//       DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)"
Queue "//SYSIN  DD DATA,DLM=$$"
Queue "./ ADD NAME=DELETE"
Queue "/* REXX     */"
Queue "/* Trace r  */"
Queue " "
Queue "    pdsname='"pdsname"';volume='"volume"'"
Queue "    el=9                                     /* Entry length  */"
Queue "    string=,"
    Address ISPEXEC "TBTOP &TABLE"
    Do Forever
        Address ISPEXEC "TBSKIP &TABLE";If rc/=0 Then Leave
        Select
            When (v2='ALL')              Then qit=1
            When (v2='MISS' & finds='')  Then qit=1
            When (v2='HITS' & finds/='') Then qit=1
            Otherwise qit=0
        End
        If qit Then Queue "          '"Substr(member,1,8)"',"
    End
Queue "          ''"
    Address ISPEXEC
    "TBTOP &TABLE"
    "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
Queue " "
Queue "    lim=(Length(string) % el)"
Queue " "
Queue "    Address ISPEXEC;'CONTROL ERRORS RETURN'"
Queue "    Say ""Processing dataset'""pdsname""'."""
Queue "    ""LMINIT DATAID(DATAID) DATASET('&PDSNAME') ENQ(SHRW) &VOLUME"""
Queue "    'LMOPEN DATAID(&DATAID) OPTION(OUTPUT)'"
Queue " "
Queue "    Do i=1 To lim"
Queue "        member=Substr(string,((i-1)*el)+1,el)"
Queue "        'LMMDEL DATAID(&DATAID) MEMBER(&MEMBER)'"
Queue "        If rc=0 Then Say '    Member 'member' deleted.'"
Queue "        Else Say ' ** Member 'member' NOT deleted.'"
Queue "    End"
Queue " "
Queue "    'LMCLOSE DATAID(&DATAID)';'LMFREE DATAID(&DATAID)'"
Queue " "
Queue "    Exit"
Queue "./ ENDUP"
Queue "$$"
Queue "//*-------------------------------------------------------------"
Queue "//STEP2    EXEC PGM=IKJEFT01,DYNAMNBR=65,REGION=4096K"
Queue "//SYSPROC  DD DISP=(OLD,DELETE),DSN=&&CLISTS"

/*  Address TSO "ALLOC F(ISPFSITE) DA('"ispfsite"') SHR REU"            */
/*  Address TSO "EXECIO * DISKR ISPFSITE (STEM linei. FINIS)"         */
/*  Address TSO "FREE  F(ISPFSITE)"                                   */
/*  Do i=1 To linei.0                                                 */
/*      Queue linei.i                                                 */
/*  End                                                               */
/******************************** REXX ********************************/
    Do While xxx/=''
        Parse Var xxx yyy ':' xxx
        Parse Var yyy dd '=' dsn1 dsnl
        dd=Strip(dd)
        If Wordpos(dd,'SYSPROC SYSEXEC')>0 Then Iterate
        If dsn1='' Then x=Substr('//'Strip(dd),1,10) 'DD DUMMY'
        Else x=Substr('//'dd,1,10) 'DD DISP=SHR,DSN='Strip(dsn1)
        Queue x
        Do While dsnl/=''
            Parse Var dsnl dsn1 dsnl
            x=Substr('//',1,10) 'DD DISP=SHR,DSN='Strip(dsn1)
            Queue x
        End
    End

Queue "//ISPPROF  DD DSN=&&ISPPROF,SPACE=(TRK,(10,,10)),UNIT=SYSDA,"
Queue "//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)"
Queue "//ISPLOG   DD DUMMY"
Queue "//ISPLIST  DD DUMMY"
Queue "//SYSTSPRT DD SYSOUT=X"
Queue "//SYSTSIN  DD *"
Queue " PROFILE PREFIX(&USERID)"
Queue " ISPSTART CMD(%DELETE)"
Queue "/*"
    Queue ''
    Return 0
ret_syntax_2:
    Signal Off Syntax
    Return 4

