/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* CSMDSNTR:                                                          */
/*                                                                    */
/* Routine to TRIM unused space off either a sequential or partitioned*/
/* dataset.                                                           */
/* Enter parameter '?' for tutorial or browse bottom of this member.  */
/*                                                                    */
/*--------------------------------------------------------------------*/
CSMDSNTR:csmdsntr_ver='1.06'
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse SOURCE . . xcmd .
    If Wordpos(Word(parm#,1),'??')>0 Then Signal Help_me
    If Wordpos(Word(parm#,1),'?')>0 Then Do
        x=$BR(xcmd '??');Exit
    End
    zedsmsg=
    Parse Upper VAR parm# parm1 parm2 parm3 trace
    loadlib=$alkload()
    trcmd='N';first_time='Y'
    skel='CSMDSNTS';panel='CSMDSNTP'

    "VGET (JDSNAME VOLUME TRPARM TRCMD TRPCT) SHARED"
    xx='def_ex def_hd def_ac'
    Interpret "Parse Value $alkjc(xx) With" xx
    mcl=def_hd;xcl=def_ex;acct=def_ac;jid='T';alkvol=volume

    If trace="TRACE" Then xtra=1;Else xtra=0
    If volume/='' Then volume=' VOLUME('volume')'
    Else Do;volume=;unit=;End

    x= Msg('On')
    rc1=Listdsi("'"jdsname"'"volume DIRECTORY NORECALL)
    If rc1/=0 Then Do
        PARSE VAR sysmsglvl2 zedlmsg
        Signal ext1
    End
    If Datatype(sysused)/='NUM' Then Do
        zedlmsg='Cannot TRIM a PDS/E.'
        Signal ext1
    End

    If volume/='' Then unit=' UNIT('sysunit')'
    alvol=sysvolume;alspc=sysunits;al1ex=sysprimary;al2ex=sysseconds
    aldir=sysseconds;alloc=sysalloc;alxtnt=sysextents;alusd=sysused;
    unusd=alloc-alusd

    track='N';leave=;tota=;fru=;csr1=;
    talspc=;tal1ex=;tal2ex=;talloc=;talusd=;batch='N';sysuid=Userid()
    If Datatype(trpct,'w') & trpct<100 Then Do
        fp=trpct;byp_scr1=1
    End
    Else Do;fp=;byp_scr1=0;End

prm1:
    If trparm='Y' Then Do
        trparm=;"VPUT TRPARM SHARED";trparm='Y'
        "VGET (PARMS PARMS1) SHARED"
        If Substr(parms,1,2)="TR" Then Do
            track="Y";parms=parms1;parms1=
        End
        If Substr(parms1,1,2)="TR" Then Do
            track="Y";parms1=
        End
        If track="Y" Then Do
            tal1ex="("sysprimary")"
            tal2ex="("sysseconds")"
            talloc="("sysalloc")"
            talusd="("sysused")"

            Select
                When Substr(alspc,1,1)='C' Then Do
                    al1ex=sysprimary*systrkscyl
                    al2ex=sysseconds*systrkscyl
                    alloc=sysalloc*systrkscyl
                    alusd=sysused*systrkscyl
                    unusd=alloc-alusd;talspc="(CYL)"
                End
                When Substr(alspc,1,1)="B" Then Do
                    #blk=Trunc(47476/sysblksize)
                    al1ex=TRUNC(sysprimary/#blk)
                    rem=sysprimary//#blk;If rem>0 Then al1ex=al1ex+1
                    al2ex=Trunc(sysseconds/#blk)
                    rem=sysseconds//#blk;If rem>0 Then al2ex=al2ex+1
                    alloc=Trunc(sysalloc/#blk)
                    rem=sysalloc//#blk;If rem>0 Then alloc=alloc+1
                    alusd=Trunc(sysused/#blk)
                    rem=sysused//#blk;If rem>0 Then alusd=alusd+1
                    unusd=alloc-alusd;talspc="(BLK)"
                End
                Otherwise talspc="(TRK)"
            End
            alspc="TRK"
        End

        Select
            When Substr(parms,1,2)="T(" Then Do
                tota=Substr(parms,3,LENGTH(parms)-3);Signal con1
            End
            When Substr(parms,1,2)="L(" Then Do
                fru=Substr(parms,3,LENGTH(parms)-3);Signal con1
            End
            When Substr(parms,1,2)="P(" Then Do
                fp=Substr(parms,3,LENGTH(parms)-3);Signal con1
            End
            When Substr(parms,1,2)="ALL" Then Signal con1
            Otherwise Nop
        End
    End


    If byp_scr1 Then Signal con1
scr1:
    If first_time='Y' Then Call Build_panel

    zcmd=
    "CONTROL DISPLAY REFRESH"
    "DISPLAY PANEL(&PANEL) CURSOR("csr1")"
    If rc/=0 Then Do
        zedlmsg="Space trimming abandoned."
        Signal ext1
    End
    If zcmd='TRACE' Then Do
        Trace r;Signal scr1
    End
    If Wordpos(Word(zcmd,1),'?')>0 Then Do
        x=$BR(xcmd '??');Signal scr1
    End
    If Substr(zcmd,1,2)="TR" Then Do
        parms="TR";parms1=;trparm="Y"
        "VPUT (PARMS PARMS1) SHARED"
        Signal prm1
    End

con1:
    byp_scr1=0
    Select
        When tota/='' Then Do
           If tota>=alloc Then Do
               zedlmsg="Cannot be greater than total current allocation."
               csr1="TOTA";"SETMSG MSG(ISRZ001)";Signal scr1
           End
           free=tota-alusd
        End
        When fru/='' Then Do
           If fru>unusd Then Do
               zedlmsg="Cannot leave more than is available."
               "SETMSG MSG(ISRZ001)";csr1="FRU";Signal scr1
           End
           free=fru
        End
        When fp/='' Then Do
           If (fp*alusd)/100>unusd Then Do
               zedlmsg='Cannot leave more than is available.',
                       'To squeeze those few tracks, use "TRIM" in its',
                       'native form.'
               "SETMSG MSG(ISRZ001)";csr1="FP";Signal scr1
           End
           free=Format((fp*alusd)/100,,0)
        End
        Otherwise Nop
    End

    If free>0 Then Do
        If track/="Y" Then Do
            If Substr(alspc,1,1)="C" Then free=free*systrkscyl
            If Substr(alspc,1,1)="B" Then,
                free=TRUNC(free/TRUNC(47476/sysblksize))
       End
       leave=" LEAVE("free")"
    End

    If batch="Y" Then Call batch_JCL
    Else Do
/*--------------------------------------------------------------------*/
/* Test If dataset allocated to a user. If it is, it cannot be        */
/* trimmed..                                                          */
/*--------------------------------------------------------------------*/
        usedby=$enqdsn(jdsname)
        If usedby/='' Then Do
            zedlmsg="Dataset '"jdsname"' currently allocated to",
                  '"'Strip(usedby,,',')'". Cannot be trimmed until fully freed.'
            "SETMSG MSG(ISRZ001)"
            csr1="BATCH"
            Signal scr1
        End

        x=Outtrap('line.',5,'NOCONCAT')
        If trcmd="Y" Then Do
            Say "In test mode:"
            Say "TRIM '"jdsname"'"volume||unit||leave
        End
        Address TSO "TRIM '"jdsname"'"volume||unit||leave
        x=Outtrap(OFF)
        If trace="TRACE" Then zedlmsg=line.2;Else zedlmsg=line.1
    End

ext1:
    "LIBDEF ISPPLIB"
    x=Msg('Off')
    Address TSO "DELETE '"panlib"'"
    "CONTROL DISPLAY REFRESH";"SETMSG MSG(ISRZ001)"
    Return 0

/*--------------------------------------------------------------------*/
/* Create a panel PDS for LIBDEF'ing.                                 */
/*--------------------------------------------------------------------*/
Build_panel:
    first_time='N'
    panlib=$Ztempf('/PO')
    Call make_mem_1
    Call build_queue
    "LIBDEF ISPPLIB DATASET ID('&PANLIB') STACK"
    Return 0

/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    Address TSO
    "NEWSTACK"

    #i_backup=i;#j_backup=j
    #tr=Trace('O')
    Do i=n_st To n_en;Queue Sourceline(i);End
    x=Trace(#tr)
    Queue ''
    i=#i_backup;j=#j_backup

    "ALLOC F("dd") DA('"panlib"("panel")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE F("dd")"
    "DELSTACK"
    Address
    Return 0

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1:n_st=mark(2)
/*
)ATTR DEFAULT($+_)
  _ TYPE(INPUT) HILITE(USCORE)
  ! TYPE(INPUT) HILITE(USCORE) COLOR(TURQ)
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
  # TYPE(TEXT) INTENS(HIGH) COLOR(GREEN)
  ` TYPE(OUTPUT) INTENS(HIGH) COLOR(GREEN) JUST(RIGHT)
  ~ TYPE(OUTPUT) INTENS(HIGH) COLOR(TURQ)  JUST(RIGHT)
  ¬ TYPE(OUTPUT) INTENS(HIGH) COLOR(GREEN) JUST(LEFT)
)BODY EXPAND(\\)
@&TOUT\-\ Trim Free Space \-\-----
$&SID ===>_ZCMD                                                                +
$
+Dataset name:@&FILE
+
+Select one of the following@or+leave all blank to free all space:
#   Total . . . . . . .!TOTA # Total allocation to retain
#   Leave . . . . . . .!FRU  # Number of unused unit allocations to leave
#   Expansion . . . . .!FP #   % of used space to leave for expansion
+General Data:                 &MESSAGE
#   Space units . . . .`ALSPC ¬TALSPC
#   Allocated . . . . .`ALLOC ¬TALLOC
#   Used. . . . . . . .~ALUSD ¬TALUSD
#   Extents . . . . . .`ALXTNT+
#   Primary quantity. .`AL1EX ¬TAL1EX
#   Secondary quantity.`AL2EX ¬TAL2EX
#   Directory blocks. .`ALDIR +
#   Volume serial . . .`ALVOL +
+Execution:
#   Batch . . . . . . .!Z#@Y#or@N# Account. .!ACCT                   #
#
+Use@END+PF key to abandon screen.
+Enter@?+on the command line for help.
)INIT
 &TOUT=&ZTIME
 &SID=&ZSYSID
 .ZVARS = '(BATCH)'
 IF (&TRACK = 'N') &MESSAGE = 'In tracks:'
 ELSE              &MESSAGE = ''
 &GC001 = 'Only one selection is permitted.'
 &GC002 = 'At least one selection must be made.'
 &FILE  = '''&JDSNAME'''
 &ALSPC = TRANS(TRUNC(&ALSPC,1) B,BLK C,CYL T,TRK)
)PROC
     IF (&TOTA ¬= &Z)
       IF (&FRU ¬= &Z)
         VER (&FRU,LIST,X&FRU,MSG=GC001)
       IF (&FP ¬= &Z)
         VER (&FP,LIST,X&FP,MSG=GC001)
     IF (&FRU ¬= &Z)
       IF (&FP ¬= &Z)
         VER (&FP,LIST,X&FP,MSG=GC001)
     VER(&TOTA,NUM)
     VER(&FRU,NUM)
     VER(&FP,NUM)
     VER(&BATCH,NB,LIST,Y,N)
     IF (&BATCH = 'Y')
        VER(&ACCT,NB)

)END

*/
    n_en=mark(-2);Return 0

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
help_me:
    make_mem_1:n_st=mark(2)
/*

 Good &TOD. &CNAME..

 CSMDSNTR:
 Routine to TRIM unused space off either a sequential or partitioned
 dataset.

 This facility permits releasing of unused space from a partitioned or
 sequential datasets.  Without any parameters all unused space will be
 released from the dataset.

 The volume and unit specifications for uncatalogued datasets are
 required.  These are automatically inserted by the routine.

 Alternatively you may specify three options for retaining part of the
 previous allocation:

 1. Total.
    Specify the total space that is to remain after the TRIM operation.
    This value will be interpreted in the allocation units originaly
    specified for the dataset (unless TRack is requested).

 2. Leave.
    Specify the amount of space to leave out of the unused allocation.
    This value will be interpreted in the allocation units originaly
    specified for the dataset (unless TRack is requested).


 3. Expansion %.
    Specify the amount of space to leave over and above that used, as a
    percentage of space currently used (NOT the space allocated).
    This option may be automatically affected by setting variable
    "TRPCT" to the percent to leave and place it into the SHARED ISPF
    profile prior to invoking 'CSMDSNTR'.

 You can display the format of the native "TRIM" command prior to
 execution by setting variable "TRCMD" to the 'Y' and placing it in the
 SHARED profile prior to invoking 'CSMDSNTR'.

 You may enter TRack on the command line to display the allocation
 details in tracks. If you process in tracks when that is not the
 original allocation units, rounding down in the original unit will
 occur. Eg. With cylinders, a request of total 100 tracks will result in
 90 tracks (6 cylinders).
 Using this feature will create unpredictable results for "BLK" (block)
 allocation.

 Enter parameter '?' for tutorial or browse bottom of this member.
 You may specify the amount of space to trim in 4 ways:
 1. Without parameters:
    Removes all unused space.
 2. Total required:
    Removes enough unused space to to leave this request.
 3. Leave space:
    Removes enough unused space to to leave this request.
 4. Percentage:
    Leave this amount of space free as a percentage of the space
    used (not allocated).

 Associated members:
    REXX:
     $WHOAMI  o Greeting personaliser.
     CSMDSN   o MULTI-PROCS driver. Invokes this member.
     CSMDSNTR - This member
     TR       - REXX to be invoked from ISPF 3.4, which front
                ends onto this member. (Alternative to Multi-Procs.)

    Panel:
     CSMDSNTP - Space (2 leave) parameter entry panel (self
                extracted).

    Loadmod:
     TRIM     - Program taken off CBT file 096.

                                *****

*/
    n_en=mark(-2)

    chgchar='&';cname='there'
    Signal on Syntax Name error_off_$WHOAMI
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_$WHOAMI: Signal Off Syntax
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End

    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If \Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(Substr(line,1,79))
    End
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Generate JCL for submission or later use.                          */
/*--------------------------------------------------------------------*/
batch_JCL:
    prog='TRIM'
    Signal on Syntax Name error_off_$ALKJCPG
    x=$Alkjcpg(prog);If x/='' Then prog=x
error_off_$ALKJCPG:Signal off Syntax
    Address TSO;"NEWSTACK"
    Queue "//"Userid()||jid "JOB "acct",'"prog"',"
    Queue '//   MSGCLASS='mcl',NOTIFY=&SYSUID,'
    Queue '//   CLASS='xcl',MSGLEVEL=(1,1),TIME=1440,REGION=4096K'
    Queue '/*JOBPARM ROOM=ZTS,LINES=9999'
    Queue '//*'
    Queue '//* JCL is self extracted from REXX command "'xcmd'".'
    Queue '//*'
    Queue '//'Copies('*',69)
    Queue Substr('//*',1,70)'*'
    x='//* JCL will NOT auto-submit and MUST be submitted manually..'
    Queue Substr(x,1,70)'*'
    Queue Substr('//*',1,70)'*'
    Queue '//'Copies('*',69)
    Queue '//*'
    Queue '//STEP1    EXEC PGM=IKJEFT01,DYNAMNBR=65,REGION=4096K'
    Queue '//STEPLIB  DD DISP=SHR,DSN='loadlib
    Queue '//RESERVE  DD DISP=OLD,DSN='jdsname','
    Queue '//            UNIT=SYSALLDA,VOL=SER='alkvol
    Queue '//SYSTSPRT DD SYSOUT=X'
    Queue '//SYSTSIN  DD *'
    Queue "    TRIM '"jdsname"'" volume unit leave
    Queue '/*'
    Queue ''
    dd='TR'Time('s');ztempf=$ztempf()
    Address TSO "ALLOC F("dd") DSN('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "dd" (FINIS"
    Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd")"
    Address ISPEXEC "VIEW DATAID(&DATAID)"
    Address ISPEXEC "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dd")";xx=$ztempf(ztempf,'D')
    Return 0
