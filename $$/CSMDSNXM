/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* CSMDSNXM:- XMit data across nodes.                                 */
/*                                                                    */
/* The following members are required to package this function:       */
/* REXX:                                                              */
/*  $KMTRSID - Generic routine to return list of valid destination    */
/*             nodes.                                                 */
/*  $WILD    - Copied in-stream to bolster efficiency.                */
/*  $WORDAT  - Generic routine to return word at a particular position*/
/*             in a string.                                           */
/*  CSMDSN   - Multi-Procs driver                                     */
/*  CSMDSNXM - This program called by CSMDSN                          */
/*  CSMDSNXH - Dynamic help using HELPDRVR.                           */
/*  HELPDRVR - Dynamic help tutorial driver (and all it's components).*/
/*             Refer to HELPDRVR for packaging.                       */
/*  TT       - Terse Toggle, if tersing option is selected.           */
/*                                                                    */
/* Panels:                                                            */
/*  CSMDSPXM - Front end panel                                        */
/*  MEM4LIST - Member selection list                                  */
/*                                                                    */
/*--------------------------------------------------------------------*/
xm_ver='1.11'
    Address ISPEXEC;"CONTROL ERRORS RETURN"

ini1:
    If Wordpos(Arg(1),'? HELPXM')>0 Then Do
        Call Help_me;Exit
    End
    Parse SOURCE . xenv xcmd xdd xdsn .
    "VGET (JDSNAME MEMBER XCINVOKE ALKVOL) SHARED"
    vars="RECVID XMITNODE XMITMEMB XMITODSN XMNOFY XMBATCH XMTERSE",
         "XMPREV XMSORTCH"
    "VGET (ZPF01) PROFILE";#zpf01=zpf01;zpf01='HELPXM';"VPUT (ZPF01) PROFILE"
    "VGET ("vars") PROFILE"
    "VGET (zsysid)"
    If xcinvoke/='' Then Do
        Parse VAR xcinvoke recvid xmitnode xmitodsn
        xmrepeat='N';xmbatch='N';xmnofy='N';vput_it='N'
        xcinvoke=;"VPUT (XCINVOKE) SHARED";xcinvoke='Y'
        "ISPEXEC CONTROL NONDISPL ENTER"
    End

    userid=Userid();panel='MEM4LIST';xmrepeat='N'
    If recvid='' Then recvid=userid
    If member/='' Then xmitmemb=member
    x_rc=8

    xmlist#='$XMIT/'
    xmlist#s='gggggw'
    Signal On Syntax Name ret_syntax_1
    xmlist#=xmlist# || $kmtrsid(zsysid)
    xmlist#s=xmlist#s || Copies('g',Length($kmtrsid(zsysid)))
ret_syntax_1:Signal Off Syntax

scr1:
    xcurs='XMITNODE';type1='INPUT';cp=1
    rc1=4
    Do While rc1/=0
        zcmd=
        "DISPLAY PANEL(CSMDSPXM) CURSOR(&XCURS) CSRPOS(&CP)"
        If rc/=0  Then Do
            xmrepeat='N'
            zedlmsg="XMIT "dsname" abandoned."
            Signal errorfnd
        End
        If Wordpos(zcmd,'? HELPXM')>0 Then Do;Call Help_me;Iterate;End
        Parse Upper VAR zcmd cmd parm1 . 1 cmd1 +1 1 cmd2 +2 1 cmd3 +3 1 cmd4 +4
        If cmd2='TR' Then Do
            If parm1='OFF' Then Trace Off;Else Trace r
            Iterate
        End
        If cmd2='RE' Then Do                /* Refresh                */
            xmitmemb=xmprev
            Iterate
        End

        If cursor='XMLIST#' Then Do
            xx=$wordat(Translate(xmlist#,' ','/'),csrpos)
            If xx='$XMIT' Then Do
                If jdsname='' Then jdsname=userid'.'userid
                llq=Strip(Substr(jdsname,Lastpos('.',jdsname)+1))
                mlq=Strip(Substr(jdsname,1,Lastpos('.',jdsname)-1))
                llq=Strip(Substr(llq,1,7))
                xmitodsn="'"mlq'.'llq".XMI'"
            End
            Else xmitnode=xx
            Iterate
        End

        nohit=0
        If xmitodsn='' Then Do
            If cmd/='FORCE' &,
               Wordpos(xmitnode,Translate(xmlist#,' ','/'))=0 Then Do
                zedlmsg="Node '"xmitnode"' not permitted from '"zsysid"'."
                "SETMSG MSG(ISRZ001)"
                xcurs='XMITNODE';nohit=1
                Iterate
            End
        End
        If nohit Then Iterate

        If Wordpos(cmd1,'B E V')>0 Then Do
            act=$Ttrunc(cmd1,,'E,EDIT V,VIEW B,BROWSE *,BROWSE')
            act "DATASET('&JDSNAME')"
            Iterate
        End
        "VPUT (XMITMEMB) PROFILE"
        xcurs='XMITMEMB'
        cp=1
        Select
            When xmitmemb='*' Then Do
                rc1=0;memblist=
                Leave
            End
            When Index(xmitmemb,'*')>0 | xmitmemb='' Then Do
                If xmitmemb='' Then membl='*';Else membl=xmitmemb
                Call memb_list
            End
            Otherwise Do
                rc1=0;memblist='MEMBERS('xmitmemb')'
            End
        End
        If rc1=0 Then Leave
    End
    If Sysdsn("'"jdsname"'")='OK' Then xm_source="DA('"jdsname"')"
    Else Do
        xm_source="DD(#MYXMIT#)"
        Address TSO "ALLOC F(#MYXMIT#) DA('"jdsname"') VOLUME("alkvol")"
    ENd
    If xmnofy='N' Then nfy='NONOTIFY';Else nfy='NOTIFY'
    If xmitodsn/='' Then Do
        If Substr(xmitodsn,1,1)/="'" Then
            xmitodsn="'"userid"."xmitodsn"'"
        m#=Msg('Off');Address TSO "DELETE" xmitodsn;x=Msg(m#)
        If cmd='SHOW' Then Say,
            Address TSO "XMIT" xmitnode"."recvid xm_source,
                memblist "OUTDSN("xmitodsn")" nfy "NOLOG"
        Else,
            Address TSO "XMIT" xmitnode"."recvid xm_source,
                memblist "OUTDSN("xmitodsn")" nfy "NOLOG"
        If xmterse/='N' Then Do
            tersedsn=Strip(xmitodsn,,"'")'.TERSED'
            Say "*"
            Say "TERSING dataset" xmitodsn "to '"tersedsn"'."
            Say "*"
            If xmterse='#' Then rc=TT(xmitodsn tersedsn '/S /#')
            Else                rc=TT(xmitodsn tersedsn '/S')
            If rc=0 Then Do
                zedlmsg="XMITed dataset TERSED to '"tersedsn"'."
                "SETMSG MSG(ISRZ001)"
            End
        End
    End
    Else
        If cmd='SHOW' Then Say,
           Address TSO "XMIT" nodex'.'recvid xm_source memblist,
                       nfy "NOLOG"
        Else,
           Address TSO "XMIT" nodex'.'recvid xm_source memblist,
                       nfy "NOLOG"

    x_rc=0
    #m=Msg('Off');Address TSO "FREE F(#MYXMIT#)";x=Msg(#m)
    If xmrepeat='Y' Then Do
        x=xmitmemb
        Parse VAR memblist '(' xmitmemb ')'
        If xmitmemb='' Then xmitmemb=x
        Signal scr1
    End
    Parse VAR memblist '(' xx ')'
    If xx/='' Then Do;xmprev=xx;"VPUT (xmprev) PROFILE";End
    If vputit/='N' Then "VPUT ("vars") PROFILE"
    Signal ext1

errorfnd:
    "SETMSG MSG(ISRZ001)"

ext1:
    If xcinvoke/='' Then "VPUT (memblist) SHARED"
    zpf01=#zpf01;"VPUT (ZPF01) PROFILE"
    If xenv='FUNCTION' Then Return x_rc;Else Exit

/*--------------------------------------------------------------------*/
/* Subroutine to process member list selection and set up MEMBERS     */
/* list accordingly.                                                  */
/*--------------------------------------------------------------------*/
memb_list:
    table="$M"Time('s')
    dsn=jdsname

    Address "ISPEXEC"
    "TBCREATE &TABLE KEYS(MEMBER) NAMES(",
         "LMDATE LMTIME ZLCDATE ZLMDATE ZLMTIME SELCTD",
         "ZLC4DATE ZLM4DATE VERSMOD ZLCNORC ZLINORC ZLMNORC ZLUSER",
         ") REPLACE NOWRITE"

    If alkvol/='' Then vol='VOLUME('alkvol')';Else vol=
    xx=Listdsi("'"dsn"'" vol "DIRECTORY SMSINFO")
    If sysrecfm='U' & sysadirblk/='NO_LIM' Then Signal process_loadlib
FV_member_process:
#tr=Trace('o')
    "LMINIT DATAID(DATA1) DATASET('&DSN')";"LMOPEN DATAID(&DATA1)",
        "OPTION(INPUT)"
    lmrc=rc
    #tr=Trace('Off')
    member=;selctd=;tp1='0';tp2='0'
    Do While lmrc=0
        "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) STATS(YES)"
        lmrc=rc;If lmrc/=0 Then Leave
        member=STRIP(member)
        If zlvers/='' Then versmod=zlvers'.'zlmod;Else versmod=
        "TBADD &TABLE"
    End
    #tr=Trace(#tr)
    "LMMLIST DATAID(&DATA1) OPTION(FREE)";"LMCLOSE DATAID(&DATA1)"
    "LMFREE  DATAID(&DATA1)"
End_member_process:

    If xmsortch='Y' & membl='*' Then Do
        sp='ZLM4DATE,C,D,ZLMTIME,C,D'
        "TBSORT &TABLE FIELDS(&SP)"
    End
    "TBTOP &TABLE"
    If membl/='*' Then Do
        cmd='SEL';parm1=membl
        Signal mls2
    End

dis2:
    sel=;rc1=4
    Address "ISPEXEC"
    "TBDISPL &TABLE PANEL(&PANEL)"
    If rc>4 Then Signal pskel
    If Wordpos(zcmd,'? HELPXM')>0 Then Do;Call Help_me;Signal dis2;End
    Parse Upper VAR zcmd cmd parm1 parm2 parm3 1 cmd1 +1
    If cmd='TRACE' Then Do
        If parm1='OFF' Then Trace Off;Else Trace r
        Signal dis2
    End
    If cmd='RESET' Then Do
        tp1=0;tp2=0
        Signal dis2
    End
    If SUBSTR(cmd,1,3)="CAN" Then Signal ext2

mls2:
    If Wordpos(cmd,'SEL USEL')>0 Then Do
        If parm1='*' Then parm1=
        mask=parm1
        If cmd='SEL' Then oper='<===';Else oper=
        "TBTOP &TABLE"
        tt=1
        Do Forever
            "TBSKIP &TABLE"
            If rc/=0 Then Leave
            If parm1/='' & $wild(mask,member,1)/='OK' Then Iterate
            selctd=oper
            "TBMOD &TABLE"
            tt=tt+1
        End
        "TBTOP &TABLE"
        zedsmsg=;zedlmsg=tt-1 'members processed.'
        "SETMSG MSG(ISRZ001)"
        Signal dis2
    End

    If cmd='L' Then Do
        If parm1='' Then Do
            zedlmsg='Missing Locate parameter.'
            "SETMSG MSG(ISRZ001)"
            Signal dis2
        End
        "TBTOP &TABLE"
        If Index(parm1,'*')>0 Then member=Substr(parm1,1,Index(parm1,'*')-1)
        member=parm1'*'
        "TBSCAN &TABLE ARGLIST(MEMBER) CONDLIST(GE)"
        Signal dis2
    End

    If cmd='SORT' Then Do
        Parse VAR parm1 1 p11 +1 1 p12 +2 1 p13 +3
        Select
           When (p13='CHA') Then sp='ZLM4DATE,C,D,ZLMTIME,C,D'
           When (p12='ID')  Then sp='ZLUSER,C,A'
           Otherwise sp='MEMBER,C,A'
        End
        "TBSORT &TABLE FIELDS(&SP)"
        Signal dis2
    End

    If Wordpos(cmd1,'U D')>0 Then Do
        cmd=Space(zcmd,0);Parse Upper VAR cmd cmd12 +2 parmz
    End
    If cmd12="U=" Then Do
        "TBTOP &TABLE"
        Do Forever
            "TBSKIP &TABLE"
            If rc/=0 Then Leave
            If zluser='' Then Iterate
            If zluser/=parmz Then Iterate
            selctd="<==="
            "TBMOD &TABLE"
        End
        Signal dis2
    End
    If cmd12="U>" Then Do
        "TBTOP &TABLE"
        Do Forever
            "TBSKIP &TABLE"
            If rc/=0 Then Leave
            If zluser=parmz Then Iterate
            selctd="<==="
            "TBMOD &TABLE"
        End
        Signal dis2
    End
    If cmd1='D' Then Do
        date=$DATEMAN('REV',$DATEMAN('VER',parmz,4))
        If Word(date,1)='Error' Then Do
            zedlmsg=date 'Format required is dd/mm/yyyy.'
            "SETMSG MSG(ISRZ001)"
            Signal dis2
        End
        "TBTOP &TABLE"
        Select
            When cmd12="D=" Then Do Forever
                "TBSKIP &TABLE"
                If rc/=0 Then Leave
                If zlm4date/=date Then Iterate
                selctd="<===";"TBMOD &TABLE"
            End
            When cmd12="D>" Then Do Forever
                "TBSKIP &TABLE"
                If rc/=0 Then Leave
                If zlm4date='' Then Iterate
                If zlm4date<=date Then Iterate
                selctd="<===";"TBMOD &TABLE"
            End
            When cmd12="D<" Then Do Forever
                "TBSKIP &TABLE"
                If rc/=0 Then Leave
                If zlm4date='' Then Iterate
                If zlm4date>=date Then Iterate
                selctd="<===";"TBMOD &TABLE"
            End
            Otherwise Do
                zedlmsg='Invalid command "'cmd12'". Please correct and'
                        're-enter.'
                "SETMSG MSG(ISRZ001)"
            End
        End
        Signal dis2
    End

    If sel='' Then Signal dis2

    msub=ztdsels
    Signal con2

mus2:
    "TBDISPL &TABLE"

con2:
    Select
/*  Put block commands first                                          */
        When (sel='SS') Then Do
            If msub=2 Then Do
                "TBQUERY &TABLE ROWNUM(rownum) POSITION(tp1)"
                "TBDISPL &TABLE"
                "TBQUERY &TABLE ROWNUM(rownum) POSITION(tp2)"
            End
            Else Do
                "TBQUERY &TABLE ROWNUM(rownum) POSITION(tpx)"
                If tp1=0 Then Do
                    tp1=tpx
                    zedlmsg="Incomplete '"sel"' block command",
                          "from member '"Strip(member)"'."
                    zedlmsg#=zedlmsg
                    "SETMSG MSG(ISRZ001)"
                    Signal dis2
                End
                Else Do
                    tp2=tpx
                    If tp1>tp2 Then Do
                        tp2=tp1;tp1=tpx
                    End
                End
            End
            tpd=(Tp2-tp1)+1
            tp3=tp1-1
            "TBTOP &TABLE"
            "TBSKIP &TABLE NUMBER(&TP3) POSITION(TABPTR)"
            Do tpd
                "TBSKIP &TABLE"
                selctd="<===";ro="<==="
                "TBMOD &TABLE"
            End
            tp1=0;tp2=0
            Signal dis2
        End
        When (tp1>0) Then Do
              zedlmsg=zedlmsg#
              "SETMSG MSG(ISRZ001)"
              Signal dis2
        End
        When (sel="S") Then Do
            selctd="<===";ro="<==="
            "TBMOD &TABLE"
            If Substr(cmd,1,1) = '.' Then Call repeat_oper
        End
        When Wordpos(sel,'B E V')>0 Then Do
            act=$Ttrunc(cmd1,,'E,EDIT V,VIEW B,BROWSE *,BROWSE')
            "CONTROL DISPLAY SAVE"
            act "DATASET('&DSN(&MEMBER)')"
            "CONTROL DISPLAY RESTORE"
        End
        When (sel="X") Then "TBDELETE &TABLE"
        When (sel="U") Then Do
            selctd=;ro=
            "TBMOD &TABLE"
            If Substr(cmd,1,1)='.' Then Call repeat_oper
        End
        Otherwise Do
            zedlmsg="Invalid selection '"sel"'."
            "SETMSG MSG(ISRZ001)"
            Signal dis2
        End
    End

gnx2:msub=msub-1;If msub<1 Then Signal dis2;Else Signal mus2

repeat_oper:
    j=Substr(cmd,2)-1
    Do i=1 To j
        "TBSKIP &TABLE";If rc/=0 Then Leave
        selctd=ro
        "TBMOD &TABLE"
    End
    Return 0

pskel:
    "TBSORT &TABLE FIELDS(MEMBER,C,A)"
    memblist=
    "TBTOP &TABLE"
    #tr=Trace('Off')
    Do Forever
        "TBSKIP &TABLE"
        If rc /= 0 Then Leave
        If selctd  /= "<===" Then Iterate
        memblist = memblist member
    End
    #tr=Trace(#tr)
    xm## = xmitmemb
    memblist = Strip(memblist)
    If Length(memblist) > 956 Then
         xmitmemb = Substr(memblist,1,955)'+'
    Else xmitmemb = memblist
    memblist = 'MEMBERS('memblist')'
    type1 = 'OUTPUT'
    zedlmsg = "Hit <ENTER> to process, * to return to table",
            "or END PF key to abandon."
    "SETMSG MSG(ISRZ001)"
    "DISPLAY PANEL(CSMDSPXM)"
    If rc = 0 Then rc1 = 0
    Else Do
        zedlmsg = "Selection list processing abandoned."
        "SETMSG MSG(ISRZ001)"
    End
    type1 = 'INPUT'
    If zcmd = '*' Then Signal dis2
    If xmrepeat/='Y' Then xmitmemb=xm##

ext2:
    "TBEND &TABLE"
    Return 0

Help_me:
    ddd='HELPDRVR SYSEXEC SYSPROC';tutememb='CSMDSNXH'
    Do While ddd/=''
        Parse Var ddd dd ddd
        xxx=$ddalloc(dd)
        Do While xxx/=''
            Parse Var xxx xx xxx
            If Sysdsn("'"xx"("tutememb")'")='OK' Then Do
                ddd=;Leave
            End
        End
    End
    x=helpdrvr(dd'='tutememb)
    Return 0
/*--------------------------------------------------------------------*/
/* Process load libraries.                                            */
/*--------------------------------------------------------------------*/
process_loadlib:
    zedlmsg='Routine "$ALKLOAD" not found to process RECFM=U dataset',
            "'"dsn"'."
    Signal on Syntax Name error_on_loadmod
    alklmdat="'"$alkload()"(ALKLMDAT)'";Signal Off Syntax
    If Sysdsn(alklmdat)/='OK' Then Do
        zedlmsg=alklmdat "not found to process RECFM=U dataset '"dsn"'."
        Signal error_on_loadmod
    End;Else zedlmsg=
    ztempf=$ztempf();since="'010175'"
    Address TSO
    "ALLOC F(LMODLIST) DA ('"ztempf"') SHR REU"
    If vol='' Then unitx=;Else unitx='UNIT(SYSALLDA)'
    "ALLOC F(LMODLIB) SHR REU DA('"dsn"')" vol unitx
    "CALL" alklmdat since
    "EXECIO * DISKR LMODLIST (STEM linei. FINIS)"
    "FREE F(LMODLIST)";ztempf=$ztempf(ztempf,'/D')
    Address ISPEXEC
    "LMINIT DATAID(DATA1) DDNAME(LMODLIB)"
    "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    zlcnorc=;zluser=
    Do i=5 To linei.0
        Parse VAR linei.i member . zlmdate zlmtime
        Parse VAR zlmdate dd '/' mm '/' yy;Parse VAR zlmtime zlmtime +5
        If yy<75 Then zlmdate='20'yy'/'mm'/'dd;Else zlmdate='19'yy'/'mm'/'dd;
/*--------------------------------------------------------------------*/
        "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) "||,
                "STATS(YES)"
        zlsize=Strip(zlsize,'l','0')
        If Length(zlsize)>6 Then zlsize=Substr(zlsize,1,5)'>'
        Else zlsize=Right(zlsize,6,'0')
        zlcnorc=zlsize
        zlm4date=zlmdate
        zlm4time=zlmtime
/*--------------------------------------------------------------------*/
        "TBADD &TABLE"
    End
    "LMMLIST DATAID(&DATA1) OPTION(FREE)"
    "LMCLOSE DATAID(&DATA1)"
    "LMFREE  DATAID(&DATA1)"
    Address TSO "FREE F(LMODLIB)"
    Signal end_member_process
error_on_loadmod:Signal off Syntax
    "SETMSG MSG(ISRZ001)"
    "LMCLOSE DATAID(&DATA1)"
    Signal FV_member_process

/*--------------------------ooo00 REXX 00ooo--------------------------*/
$Wild:$wild_ver='1.04'
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*  $WILD:                                                            */
/*                                                                    */
/*  Function to check each word in a list against a mask. The list    */
/*  can be:                                                           */
/*    - List of dataset names                                         */
/*    - List of member names                                          */
/*    - String of text/code etc.                                      */
/*                                                                    */
/*  Parameters (positional):                                          */
/*  1. mask   - Dataset mask wildcarded by interspacings of '*' for   */
/*              any string mask or '%' for any single character mask. */
/*              Note: Mask is not validated but parsed into matching  */
/*                    components based on the locations of '%' and    */
/*                    '*'.                                            */
/*  2. list   - List of dataset names. Should be unquoted and space   */
/*              seperated, however, any quotes (no                    */
/*              prefix added) and comma seperators will be removed.   */
/*              If no list is provided 'NO-DATA' is returned.         */
/*              The returnde data will be en entry for each dataset   */
/*              with one of the following values:                     */
/*                NO-MATCH                                            */
/*                OK                                                  */
/*  3. 1 | ASIS                                                       */
/*            - Numeric "1" to indicate that the list is 1 record     */
/*              containing embeded blanks (eg. text or code) rather   */
/*              than space seperated entities.                        */
/*              If using this feature you must perform upper case     */
/*              translation if required before invoking the function. */
/*                          - or -                                    */
/*            - Any (other than 1) non blank character (eg. 'ASIS')   */
/*              To prevent upper case translation to both the mask    */
/*              and list.                                             */
/*                                                                    */
/*  Examples:                                                         */
/*                                                                    */
/*  1.Check a list of datasets against a mask:-                       */
/*      list='dataset1 dataset 2 .... datasetn'                       */
/*      mask='hlq%.ISP%LIST.*.TEMP*'                                  */
/*      match=$wild(mask,list)                                        */
/*      Do WHile match/=''                                            */
/*          Parse VAR list dsn list;Parse VAR match rcm match         */
/*          Say Left(dsn,44) rcm                                      */
/*      End                                                           */
/*                                                                    */
/*  2.Check line(s) against a string mask:-                           */
/*      mask='*STR%NG% #%%% *'                                        */
/*      Do i=first to last                                            */
/*          "(line)=LINE" i;lineu=Tranlate(line)                      */
/*          If $wild(mask,lineu,1)='OK' Then Say 'line' i 'matched'   */
/*      End                                                           */
/*                                                                    */
/*  Gotcha(s):                                                        */
/*  1. Each time the function is called, the mask is parsed. If you   */
/*     are execution cycle constrained and your need is to check for  */
/*     many single 'texts' at a time using complex masks, copy        */
/*     "$WILD" into your routine and invoke the 'De_Mask' option once */
/*     and then the '$Wild_Match' for each dataset, eg. (assuming     */
/*     this resides snugly at to end of your REXX),                   */
/*        x=De_Mask(mask)                                             */
/*        Do While dsn_list/=''                                       */
/*            ....                                                    */
/*            rcm=$wild_match(dsn)                                    */
/*            ....                                                    */
/*        End                                                         */
/*  2. Needs acces to routine '$CSTRING'.                             */
/*  3. '*' and '**' are treated the same. A single '*' will cross     */
/*     qualifier boundaries (dots) like '**'.                         */
/*                                                                    */
/*--------------------------------------------------------------------*/
     Parse Arg mask,dsn_list,asis
     If asis='' Then Do;mask=Translate(mask);dsn_list=Translate(dsn_list);End
     If dsn_list='' Then Do
         Parse VAR mask mask ',' dsn_list
         If dsn_list='' Then Parse VAR mask mask dsn_list
         dsn_list=Translate(dsn_list,' ',',')
     End
     x=De_Mask(mask);If dsn_list='' Then Return 'NO-DATA'
     If asis=1 Then Return $wild_match(dsn_list)
     hit_list=
     Do While dsn_list/=''
         Parse VAR dsn_list dsn dsn_list;dsn=Strip(dsn,,"'")
         hit_list=hit_list $wild_match(dsn)
     End
     Return Space(hit_list)

/*--------------------------------------------------------------------*/
/* Break the mask up into each of its 'components' for later use.     */
/*--------------------------------------------------------------------*/
De_Mask: Parse Arg mask
    pmask=$cstring(mask,'.*','*',1,'*');optr=1;j=0
    Do Forever
        nptr=Verify(pmask,'*%','M',optr);If nptr=0 Then Leave
        j=j+1
        If optr/=nptr Then,
            Interpret "Parse VAR pmask" optr "mv.j +"nptr-optr" mc.j +1 rest"
        Else Do
            Interpret "Parse VAR pmask" optr ". +"nptr-optr" mc.j +1 rest"
            mv.j=
        End
        optr=nptr+1
        If mv.j||mc.j='.*' Then j=j-1
    End
    mv.0=j
    Return pmask

$wild_match: Parse Arg line
        optr=1;match=1;prevc='%'
        If mv.0=0 Then Do
            Interpret "Parse VAR line p1 +"Length(pmask)
            If pmask/=p1 Then Return 'NO-MATCH'
            Else Return 'OK'
            Iterate
        End
        Do j=1 To mv.0
            If mv.j/='' Then Do
                ll=Length(mv.j)
                If prevc='%' Then Do
                    Interpret "Parse VAR line" optr "p1 +"ll
                    If mv.j/=p1 Then Do;match=0;Leave;End
                    optr=optr+ll
                End
                Else Do
                    nptr=Index(line,mv.j,optr)
                    If nptr=0 Then Do;match=0;Leave;End
                    optr=nptr+ll
                End
            End
            prevc=mc.j;If prevc='%' Then optr=optr+1
        End
        If \match Then Return 'NO-MATCH'
        If rest/='' Then Do
            If prevc='%' Then Do
                Interpret "Parse VAR line" optr "p1 +"Length(rest)
                If rest/=p1 Then Return 'NO-MATCH'
            End
            Else Do
                nptr=Index(line,rest,optr)
                If nptr=0 Then Return 'NO-MATCH'
            End
        End
        Return 'OK'

$Wild_End:
