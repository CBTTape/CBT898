/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* DASDSUM1: DASD SUMmary                                             */
/*                                                                    */
/* Totals the output list from a set of ISPF 3.4 print option against */
/* combination of qualifiers.                                         */
/*                                                                    */
/* To prepare dataset for summary, either supply parameter of "/P" or */
/* just let it determine if it has been pre-processed.                */
/*                                                                    */
/* Requires acces to macro "XD" to delete any duplicates. (For those  */
/* occassions where you get carried away and double up in listings.)  */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Address ISREDIT;"RESET"
    "(status)=USER_STATE";"(caps)=CAPS";"CAPS=OFF"
    "F '1 Listing of' ALL"
    If rc=0 | Wordpos(Word(Translate(parm#),1),'/P')>0 Then Do
        "X '1 Listing of' ALL"
        "X '        ' 3 10 ALL"
        "DEL ALL X"
        "XD"
        "DEL ALL X"
        Do i=1 To 2
            "(line)=LINE" i;line=Overlay('*',line,1);"LINE" i"=(line)"
        End
        zedlmsg='Dataset has been doctored for processing. Cancel out',
                'if you wish to preserve original format.'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
    End
#tr=Trace('o')
    "(last)=LINENUM .ZLAST"

    hlq.=0;pchlq.=0;vol.=0;pcused.=0;vol_list=;hlq_list=
    Signal on Syntax Name error_off_00
    Signal on Error  Name error_off_00
    Do i=1 To last
        "(line)=LINE" i;If Word(line,1)='*' Then Iterate
        Parse VAR line dsn vol . 89 trks used xt
        If Wordpos(vol,'*VSAM* *ALIAS')>0 Then Iterate
        If \Datatype(trks,'w') Then Do
            linex='*' Left(dsn,44) vol
            "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
            Iterate
        End
        Parse VAR vol vp +4;Parse VAR dsn hq '.' .
        If Wordpos(vp,vol_list)=0 Then vol_list=vol_list vp
        If Wordpos(hq,hlq_list)=0 Then hlq_list=hlq_list hq
        vol.vp=vol.vp+trks
        hlq.hq=hlq.hq+trks
        If used/='?' Then Do
            xx=Format(trks*(used/100),5,0);pcused.vp=pcused.vp+xx
            pchlq.hq=pchlq.hq+xx
        End
        Else Do
            pcused.vp=pcused.vp+trks
            pchlq.hq=pchlq.hq+trks
        End
    End
    Signal Off Syntax
    Signal Off Error
    tot=0;totu=0
    linex='*'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='*'Copies('-',70)'*'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='* By 1st. 4 bytes of VOLUME:'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='*'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='*              Allocated/used          Allocated/used'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='*              ---------/---------     ---------/--------'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    vol_list=$sort(vol_list)
    Do While vol_list/=''
        Parse VAR vol_list vp vol_list
        tot=tot+vol.vp;totu=totu+pcused.vp
        linex='*' Left(vp,8),
              'TRK('Right(vol.vp,9)'/'Right(pcused.vp,9)')',
              'Cyl('Format(vol.vp/15,8,0)'/'Format(pcused.vp/15,8,0)')'
        "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    End
    linex='* Total   ',
              'TRK('Right(tot,9)'/'Right(totu,9)')',
              'Cyl('Format(tot/15,8,0)'/'Format(totu/15,8,0)')'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='*'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='* By hlq:'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    linex='*'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    hlq_list=$sort(hlq_list)
    Do While hlq_list/=''
        Parse VAR hlq_list hq hlq_list
        linex='*' Left(hq,8),
              'TRK('Right(hlq.hq,9)'/'Right(pchlq.hq,9)')',
              'Cyl('Format(hlq.hq/15,8,0)'/'Format(pchlq.hq/15,8,0)')'
        "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    End
    linex='*'
    "LINE_BEFORE .ZFIRST=NOTELINE (linex)"

Signal get_out

error_off_00:
Say 'vol.vp=>'vol.vp'< trks=>'trks'<'
Say 'Line#='i Datatype(trks,'w')
Say line
Signal get_out

Get_out:
    "USER_STATE=(status)"
    Exit

nl: Parse Arg nl1
    "LINE_BEFORE .ZCSR= NOTELINE (nl1)";Return 0

