/******************************** REXX ********************************/
date_ver='1.08'                             /* Version mumber         */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* DATE: Routine to return the DATE in the ISPF message line.         */
/*                                                                    */
/* Enter 'HOL' on command line to get DATEHOL entries in date display.*/
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     $DATEMAN - Date Manipulator.                                   */
/*     DATE     - Driver                                              */
/*     DATECALC o Calculates dates for "DATEHOL".                     */
/*                                                                    */
/*   Panels:                                                          */
/*     DATEP    o Dynamic panel permitting dynamic building.          */
/*     DATEPH   o Dynamic panel permitting holiday highlights.        */
/*                                                                    */
/*   Data:                                                            */
/*     DATEHOL  o Holidays. Ensure variable "holddsn" points to the   */
/*                correct memberr.                                    */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    holdsn= $alkhlq()'.$$(DATEHOL)';#holdsn=holdsn
    Parse SOURCE . o_m xcmd .

Test_4_help:
    If Wordpos(Word(parm#,1),'? HELP /? /H ??')>0 Then Do
        If Word(parm#,1)='??' Then Signal Help_me
        #msg=Msg('Off');Signal on Syntax Name Help_me
        x=$BR();x=$BR('%'xcmd '??');Signal off Syntax;Return 0
    End
    If Wordpos(word(parm#,1),'? HELP /? /H')>0 Then Do
        datehelp='DATEH100'
        Signal helpme
    End
    If Wordpos('/R',Translate(parm#))>0 Then Do
        r_d=1;parm#=Delword(parm#,Wordpos('/R',Translate(parm#)),1)
    End;Else r_d=0

    "VGET (datemac) SHARED"
    If datemac = '1' Then Signal macro_1

    pos = '1,15'                            /* Row, Col for window    */
    Parse VAR pos prow ',' pcol
    at.g = '}'                              /* Green attribute        */
    at.b = '{'                              /* Blue attrib            */
    at.y = '¢'                              /* Yellow attrib          */
    at.p = '!'                              /* Pink attrib            */
    at.r = '~'                              /* Red attrib             */
    at.w = '#'                              /* White attrib           */
    at.t = '@'                              /* Turq attrib            */
    at.1 = '01'x                            /* Green attribute reverse*/
    at.2 = '02'x                            /* Blue attrib reverse    */
    at.3 = '03'x                            /* Yellow attrib reverse  */
    at.4 = '04'x                            /* Pink attrib reverse    */
    at.5 = '05'x                            /* Red attrib reverse     */
    at.6 = '06'x                            /* White attrib reverse   */
    at.7 = '07'x                            /* Turq attrib reverse    */
    at.yb= '08'x                            /* Yellow/blink           */
    dc1  = 'GREEN'                          /* Color for }            */
    dc2  = 'BLUE'                           /* Color for {            */
    dc3  = 'YELLOW'                         /* Color for ¢ (day)      */
    dc4  = 'PINK'                           /* Color for {            */
    dc5  = 'RED'                            /* Color for {            */
    dc6  = 'WHITE'                          /* Color for {            */
    dc7  = 'TURQ'                           /* Color for {            */

    Parse Upper VAR parm# parm1 parm2 parm3
    If parm1 = "HELP" | parm1 = "?" Then Signal helpme

    basey = 50            /* Base year. If yy < basey then Y2K date   */
    difd  = +1                              /* Difference sign DD     */
    difm  = +1                              /* Difference sign MM     */
    dify  = +1                              /* Difference sign YY     */
    mark# = ''                              /* Marked day saver       */
    panel = 'DATEP'                         /* Marked day saver       */

    If Wordpos('HOL',Translate(parm#))>0 Then Do
        panel='DATEPH';parm#=Delword(parm#,Wordpos('HOL',Translate(parm#)),1)
    End
    Call parse_parms
    If trace='Y' Then Trace r

new_date:
    Parse Value Date('e') with dd '/' mm '/' yy
    If Index(date,'.') > 0 Then Signal julian_calc
    If Index(date,'/') = 0 & Length(date) = 3 Then Signal julian_calc
    If Index(date,'/') = 0 & Length(date) = 5 Then Signal julian_calc
    If Index(date,'/') = 0 & Length(date) = 7 Then Signal julian_calc

    If date = '' | date = '.' Then date = Date('e')
    Select
        When (Index(date,'/') > 0) Then Do
            Parse VAR date dd '/' mm '/' y1
            If y1 /= '' Then yy = y1
        End
        When (Length(date) = 8) Then Parse VAR date dd 3 mm 5 yy
        When (Length(date) = 6) Then Parse VAR date dd 3 mm 5 yy
        When (Length(date) = 4) Then Parse VAR date dd 3 mm
        When (Length(date) = 2) Then dd = date
        Otherwise NOP
    End
    If Length(yy)<4 Then Do
        If yy-basey>=0 Then yy=1900+yy;Else yy=2000+yy
    End
    date=$DATEMAN('VER',dd'/'mm'/'yy)
    If Word(date,1)='Error' Then Do
        zedlmsg=date
        Signal erx1
    End
    Signal con1

Julian_calc:
    If Length(date)=3 Then date=yy'.'date
    date=$DATEMAN('J2E',date)

con1:
    If dif/='' Then Do
        date=$DATEMAN('E-N',dd'/'mm'/'yy,,dif)
        dd=Substr(date,1,2)
        mm=Substr(date,4,2)
        yy=Substr(date,9,2)
    End

    dow=$DATEMAN('E2D',date)
    ddd=$DATEMAN('E2J',date,4);yy=Substr(ddd,1,4);ddd=Substr(ddd,6)
    datemsg='Date - 'date', Julian('yy'.'ddd') is a 'dow'.'
    "VPUT DATEMSG SHARED"
    zedlmsg=datemsg
    "SETMSG MSG(ISRZ001)"
    omm=mm

get_cal:
    Do 4
        ddd = $DATEMAN('E2J',date,4)
        If Word(ddd,1) /= 'Error' Then Leave
        dd   = dd-1
        date = dd || Substr(date,3)
    End
    If Word(ddd,1) = 'Error' Then Do
        zedlmsg = 'Cannot evaluate date from "'date'". Please contact',
                'your DATE dialogue supporter.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    ddd = Substr(ddd,6)
    cal = $DATEMAN('EMC',date,'R')
    line1 = at.g
    Do i=1 To 11
        xx = Substr(cal,(i-1)*30+2,28)||at.g
        If i > 4 & Substr(xx,1,1) /= '-' Then Do
            xx = Overlay(at.p,xx,1)
            xx = Overlay(at.g,xx,5)
            xx = Overlay(at.p,xx,Length(xx)-4)
        End
        line1 = line1 xx
    End
    xx = Index(line1,' S ')
    line1 = Overlay(at.r,line1,xx)
    line1 = Overlay(at.b,line1,xx+2)
    xx = Index(line1,' S ',xx+1)
    line1 = Overlay(at.r,line1,xx-1)
    line1 = Overlay(at.p,line1,31)
    pos = Index(line1,'*')
    If pos > 0 Then Do
        line1 = Overlay(at.g,line1,pos)
        line1 = Overlay(at.yb,line1,pos-3)
    End
    If addpop/='Y' Then Do
        addpop='Y';"ADDPOP ROW(&PROW) COLUMN(&PCOL)"
    End
    zwinttl='Date';"VPUT (ZWINTTL)"
    line#=line1

scr1:
    zcmd=
    If panel='DATEPH' Then Call Build_holidays
    "DISPLAY PANEL(&PANEL)"
    If rc/=0 Then Do;"REMPOP";Signal ext1;End
    Parse VAR zcmd

    If Substr(zcmd,1,3)='TRA' Then Do
        #tr=Trace()
        If #tr='R' Then Trace o;Else Trace r
        Signal scr1
    End
    If zcmd='?' Then Do
        parm#='?';If addpop='Y' Then "REMPOP"
        x=Test_4_help();If addpop='Y' Then "ADDPOP ROW(&PROW) COLUMN(&PCOL)"
        Signal scr1
    End
    Parse VAR zcmd cmd parm1 parm2 parm3 parm4 parm5 .,
              1 cmd11 +1 1 cmd12 +2 1 cmd13 +3 1 cmd14 +4 1 cmd15 +5 .
    If cmd11='Q' Then Do
        If o_m='COMMAND' Then Exit 8
        Else Return 'QUIT'
    End
    If zcmd='*' | Substr(zcmd,1,3)='TOD' Then Do
        date=;dif=;Signal new_date
    End

    If Substr(zcmd,1,3)='HOL' Then Do
        panel='DATEPH'
        Parse VAR zcmd . '=' nhldsn;If nhldsn='' Then Signal scr1
        If Substr(nhldsn,1,1)="*" Then Do
            holdsn=#holdsn;Signal scr1
        End
        If Substr(nhldsn,1,1)/="'" Then nhldsn=Sysvar(Syspref)"."nhldsn
        Else nhldsn=Strip(nhldsn,,"'")
        If Sysdsn("'"nhldsn"'")='OK' Then holdsn=nhldsn
        Signal scr1
    End
    If Word(zcmd,1) = 'MARK' Then Do
        mark_ret=1
        Select
            When Word(zcmd,2) = '?' Then Do
                zedlmsg = "Date marked at" date"."
                zcmd=mark#;mark_ret=0
            End
            When Word(zcmd,2) = '*' Then Do
                zedlmsg = "Date marked at" date"."
                mark#=date
            End
            When mark#/='' Then,
                zedlmsg="Days difference between" mark# "and" date "is  ",
                        $DATEMAN('E-E',date,mark#) "days."
            Otherwise Do
                zedlmsg = "Date marked at" date"."
                mark# = date
            End
        End
        "SETMSG MSG(ISRZ001)"
        If mark_ret Then Signal scr1
    End
    If Index(zcmd,'/')>0 Then Do
        date=zcmd;dif=;Signal new_date
    End
    "VGET (zscrolla zscrolln zverb)"
    If Datatype(zscrolla) /= 'NUM' Then dif = 1
    Else dif = zscrolla
    Parse VAR date dd '/' mm '/' yy .
    Select
        When (zverb = 'LEFT')  Then Do
            If abs(dif) /= 1 Then dify = dif
            dify = Abs(dify) * -1
        End
        When (zverb = 'RIGHT') Then,
            If dif /= 1 Then dify = dif
            Else             dify = 1
        When (zverb = 'DOWN')  Then,
            difm = dif
        When (zverb = 'UP')    Then Do
            If abs(dif) /= 1 Then difm = dif
            difm = Abs(difm) * -1
        End
        Otherwise
            If Datatype(zcmd) = 'NUM' Then difd = zcmd
    End
    If csr = 'LINE1' Then Do
        Interpret "xx =" csr
        If Datatype(Substr(xx,csp,1)) = 'NUM' Then csp = csp -1
        xx = Strip(Substr(xx,csp))
        csp = verify(xx,'1234567890','m')
        dx = Substr(xx,csp,2)
        csp = verify(dx,'1234567890','n')
        If csp > 0 Then dx = Substr(dx,1,csp-1)
        If Datatype(dx) = 'NUM' Then Do
            difd = dx - dd
        End
        Else difd = 1
    End
    Select
        When (zverb = 'LEFT' | zverb = 'RIGHT') Then
            yy = yy + dify
        When (zverb = 'UP'   | zverb = 'DOWN' ) Then Do
             mm = mm + difm
             If mm < 1 Then Do
                 mm = mm +12
                 yy = yy -1
             End
             If mm > 12 Then Do
                 mm = mm -12
                 yy = yy +1
             End
        End
        Otherwise Do
            date = $DATEMAN('E-N',date,,difd)
            Parse VAR date dd '/' mm '/' yy
        End
    End

    If mm = 2 & dd > 28 Then dd = 28
    date = dd'/'mm'/'yy
    Signal get_cal

erx1:
    "SETMSG MSG(ISRZ001)"
ext1:
    If r_d Then Return date
    Exit

Build_holidays:
    If y#/=yy | holdsn/=lholdsn Then Do
        datemac=1;"VPUT (datemac,yy) SHARED"
        "VIEW DATASET('&HOLDSN') MACRO("xcmd")";"VGET (holdate) SHARED"
    End
    y#=yy;lholdsn=lholdsn
    If holdate='' Then Do
        panel='DATEP'
        zedlmsg="No holidays marked for" yy"."
        "SETMSG MSG(ISRZ001)"
        Return 0
    End
    xxx=holdate
    line1=Strip(line#)
    Do While xxx/=''
        Parse VAR xxx d1 '/' m1 type msg ':' xxx
        If Wordpos(type,'G B Y P R W T')>0 Then,
            type=Translate(type,'1234567','GBYPRWT')
        If m1>mm Then Leave
        If m1/=mm Then Iterate
        d1=Right(d1+0,2)
        If type='-' Then type=w
        Interpret 'at.x = at.'type
        If Index(msg,' (US)')>0 Then Do
            at_c=at.t;msg=Overlay('#(US)',msg,Index(msg,' (US)'))
        End
        Else at_c=at.b
        line1=line1 || at.x || d1 || at_c || Substr(msg,1,26)
        xx=Index(line1,d1,84)
        line1=Overlay(at.x,line1,xx-1)
        ch=Substr(line1,xx+2,1)
        If ch=' ' Then line1=Overlay(at.g,line1,xx+2)
    End

    Return 0

macro_1:
    datemac=;"VPUT (datemac) SHARED"
    "VGET (yy) SHARED"
    holdate=
    Address ISREDIT
    "FIND '-" yy "-' FIRST";rc1=rc;"(l#)=LINENUM .ZCSR"
    If rc1=0 Then Do Forever
        l#=l#+1;"(line)=LINE" l#
        If Substr(line,1,2) = '*-' Then Leave
        holdate=holdate || Strip(line)':'
    End
    Address
    "VPUT (holdate) SHARED"
    "ISREDIT CANCEL"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    zedsmsg=
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    dif=parse_varb('-','?','NUM')
    If dif='?' Then dif=parse_varb('+','?','NUM');Else dif=0-dif
    If dif='?' Then dif=;Else dif=0+dif

    Parse VAR parm# date .;If date='' Then date=Date('e')

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Tutorial setup                                                     */
/*--------------------------------------------------------------------*/
Help_me:
zedlmsg=;zedsmsg=;Address ISPEXEC "SETMSG MSG(ISRZ001)"
n_st=mark(2)                                /* Mark Start             */
/*

 The DATE command will tell you the date in European format, Julian format, the
 Day-Of-Week and pops up the month's calendar.  The default is todays date.

 European dates in the following formats:
     DD            - the current MM and YY will be inserted.
     DDMM or DD/MM - the current YY will be inserted.
     DDMMYY, DD/MM/YY or DD/MM/YYYY.
 Julian dates in the following format:
     YY.DDD, YYYY.DDD, YYDDD or@YYYYDDD
 Ddisplacement in the following format:
     ddd or -ddd  - the default origin date is today. You may pass this
                    parameter with either of the above date formats.
                    Displacement may be an expression, eg.
                       (365*2)+10
 If you do not use the "." or "/" delimiters, leading zeros must be entered.
 Return to todays date using "*".  Use this option if you have digressed and
 started surfing the calendar.

 Date advance:
   <ENTER>   - One day at a time (forward direction). Direction may be toggled
               with +1/-1 on the command line (and will stay that directional
               until next invocation or a reversal 'toggle').
   PF7/PF8   - One month at a time.
   PF10/PF11 - One year at a time.

 Valid commands:
   HOL{=dataset | *}
             - Display holidays. Variable "holdsn" must point to a valid date
               holiday formatted member.
               You may change you holiday calendar on the fly by entering
               "HOL=dataset" on the command line (if you have room otherwise
               pass an unqualified short PS org dataset name.
               Restore to original using "HOL=*"
   MARK xxx  - Mark the current date.  The following are values for xxx:
               ?     - Display last marked date and return to that date.
               *     - Mark the current date.
               blank - If a date has not bee previously marked then the
                       current date will be marked. Alternatively, use the
                       "mark *' feature.
                       If a date has been marked, the number of days between
                       the marked date and the current date will be displayed.
                     - Anything else will also mark the current date.
   QUIT      - Exit function. However, it returns the literal "QUIT" to the
               calling routine.
   TODAY | * - Set today as the current date.

                                    *****

*/
n_en=mark(-2)                               /* Mark End               */
    Do i=n_st To n_en;Say Substr(Sourceline(i),1,79);End
    Address TSO "%DATECALC ??"
    Exit
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
