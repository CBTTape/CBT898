/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Generate a calendar for a year or range of years.                  */
/* Parameter format yyyy or yyyy-yyyy (two digit year is acceptable). */
/*                                                                    */
/* Valid 2nd. or more parameters:                                     */
/*  /A  - to append to current member being edited. Used to build a   */
/*        calender for a number of non-consequtive years.             */
/*  /M  - Mark today's day on calendar.                               */
/*  /S  - Return dates in single column.                              */
/*                                                                    */
/* For parsing examples, refer to bottom of EXEC.                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Arg parm#
    Address ISPEXEC
    "ISREDIT MACRO (parm#) NOPROCESS"

    cactn="RETURN"
/*  cactn="CANCEL"                                                    */
    "CONTROL ERRORS" cactn

ini1:
    zedsmsg=
    Address ISREDIT
    If Wordpos('? /? HELP /H',parm#)>0 Then Do
        #msg=Msg('On')
        x=Outtrap('line.',5000,'NOCONCAT')
        x=$DATEMAN('??','/NC')
        x=MSG(#msg)
        "(status)=USER_STATE";"RESET"
        Do i=1 To line.0
            linex=line.i;"LINE_BEFORE .ZFIRST=NOTELINE (linex)"
        End
        "CURSOR=1 0";"USER_STATE = (status)"
        Exit
    End
    Call parse_parms
    x=Trace(#tr)

    "(status) = USER_STATE"

    If datef='' Then datef=Substr(Date('e'),7,2)
    datef=$DATEMAN('VER','01/01/'datef,4)
    If Word(datef,1)='Error' Then Signal err1
    If datet/='' Then Do
        datet=$DATEMAN('VER','01/01/'datet,4)
        If Word(datet,1)='Error' Then Signal err1
    End
    Else datet=datef

    "RESET"
    If append/='Y' Then "DEL ALL NX"

    yyf=Substr(datef,7);yyt=Substr(datet,7)
    If single='Y' Then col=1;Else col=
    Do i=yyf To yyt
        cal=$DATEMAN('CAL',Right(i,4,'0'),'R',mark,col)
        Do Forever
            If single='Y' Then Parse VAR cal line 31 cal
            Else               Parse VAR cal line 60 cal
            "LINE_AFTER .ZLAST=(line)"
            If cal='' Then Leave
        End
    End

    "USER_STATE = (status)"
    Exit

err1:
    zedlmsg='Invalid date (range) entered.'
    Address ISPEXEC 'SETMSG MSG(ISRZ001)'
    Exit

/*--------------------------------------------------------------------*/
/* Parse each line and seperate into daily components ranging from    */
/* Sunday to Saturday.                                                */
/*--------------------------------------------------------------------*/
    Parse VAR line d1 +4 d2 +4 d3 +4 d4 +4 d5 +4 d6 +4 d7 +4 .
    Do Forever
        Parse VAR line d1 +4 line
        Say '>'d1'<'
        If line='' Then Leave
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    Parse Upper VAR parm# parm#

    #tr=parse_cons('TRACE','R','N')

    mark   = parse_cons('/M','M','NULL')
    append = parse_cons('/A','Y','NULL')
    Single = parse_cons('/S','Y','NULL')

    Parse VAR parm# datef '-' datet .
    datef = Strip(datef)
    dattt = Strip(datet)

    Return 0


/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
