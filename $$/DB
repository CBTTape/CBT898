/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* This routine presents a table of DASD utilisation according to     */
/* records' blocking factors. It also reports on the level of         */
/* blocking efficiency.                                               */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     DASDBLDH - Dynamic tutorial.                                   */
/*     DB       - Driver (alias of 'DASDBLKG')                        */
/*                                                                    */
/*   Panels:                                                          */
/*     DASDBLKG - DASD blocking primary parameter entry panel.        */
/*     DASDBLDY - DASD blocking dynamic display panel.                */
/*     DASDBLH1 - DASD blocking tutorial panel.                       */
/*     DASDBLH2 - DASD blocking tutorial panel.                       */
/*                                                                    */
/*   Source:                                                          */
/*     DASDBLKG - DASD blocking source.                               */
/*     @MACROS  - Commonly used macros.                               */
/*                                                                    */
/*   Loadmod:                                                         */
/*     DASDBLKG - self explanitory.                                   */
/*                                                                    */
/*   The following variables are defined in the table:                */
/*     Keys:                                                          */
/*        ENTRY  - No. Records per block                              */
/*     Names:                                                         */
/*        BLKSZ  - Block size                                         */
/*        BPT90  - Blocks/track for 3390                              */
/*        BPT80  - Blocks/track for SYSALLDA                          */
/*        BPT50  - Blocks/track for 3350                              */
/*        PCT90  - Percent efficiency for 3390                        */
/*        PCT80  - Percent efficiency for SYSALLDA                    */
/*        PCT50  - Percent efficiency for 3350                        */
/*        EFFIC  - Efficiency indicator between 3390 and SYSALLDA     */
/*        EFFIC2 - Efficiency indicator between SYSALLDA and 3350     */
/*                                                                    */
/*--------------------------------------------------------------------*/
DB:db_ver='1.05'
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm1,parm2,parm3)"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

init:
    Parse Upper VAR parm# parm1 parm2 parm3
    zedsmsg=
    If Wordpos(parm1,'? HELPDB')>0 Then Do
        x=Helpdrvr('HELPDRVR=dasdbldh');Signal ext1
    End
/*  If parm1="?" Then Do                                              */
/*      "SELECT PGM(ISPTUTOR) PARM(DASDSH10)"                         */
/*      Signal ext1                                                   */
/*  End                                                               */

    trace='O'
    hlq=$alkhlq()
/*  Call $alklibd('IN')                                               */

    Call constant_vars;Call variable_vars

/********* \|/ ********* Customise here ********* \|/ *****************/
    #parm1=parm1
    If Datatype(parm1,'w') Then Do
        lrecl=Strip(Substr(parm1,1,5))
        If parm2/='' Then eonly=parm2
        Signal con1
    End
    Else lrecl=

/*--------------------------------------------------------------------*/
/* Prompt for RECL parameter if none supplied on invocation           */
/*--------------------------------------------------------------------*/
scr1:
    zcmd=
    "DISPLAY PANEL(DASDBLKG)"
    If rc/=0 Then Do
        dbeonly=eonly;"VPUT (dbeonly) PROFILE"
        Exit
    End

con1:
    If Wordpos(zcmd,'? HELPDB')>0 Then Do
        x=Helpdrvr('HELPDRVR=dasdbldh');Signal scr1
    End

    zedlmsg=
    If sbstart='' Then bstart=0;Else bstart=sbstart
    If sbend='' Then bend=32768;Else bend=sbend
    result=(bend-bstart)%lrecl
    If result>1500 Then Do
        zedlmsg="Input paramaters would cause "result,
                "entries. Use help PF key for more info."
        zerrhm='DASDBLH3';dasderro='Y'
        "VPUT (zedlmsg DASDERRO RESULT) SHARED"
        "SETMSG MSG(ISRZ001)"
        Signal scr1
    End
/********* /|\ ********* Customise here ********* /|\ *****************/

    table = 'DB'Time('s')
    Call build_table

    "VGET (zscrmaxd)"
    Numeric digits(15)

    Call build_field

scr2:
    zcmd=
    dispstat = owhite'Row' tabptr+1 'of' rownum
    headline = Substr(mainhead,1,79-Length(dispstat)) || dispstat

    "DISPLAY PANEL(&PANEL) CURSOR(&CSR) CSRPOS(&CSRP)"
    If rc Â¬= 0 Then Do
        If Datatype(#parm1) = 'NUM' Then Signal ext1
        Else Signal scr1
    End
    Parse Value '' With csr csrp

    Parse VAR zcmd cmd parm1 parm2 parm3 .

    If Wordpos(cmd,'? HELPDB')>0 Then Do
        x=Helpdrvr('HELPDRVR=dasdbldh');Signal scr2
    End
    If cmd='TRACE' Then Do
        Select
            When parm1='OFF' Then trace='O'
            When parm1='ON'  Then trace='R'
            Otherwise,
                If Trace()='R' Then trace='O';Else trace='R'
        End
        x=Trace(trace)
        Signal scr2
    End

    If Wordpos(cmd,'ALL /A')>0 Then Do
        lenchg='Y';eonly='N'Substr(eonly,2)
        Signal Test_4_uild_table
    End

/*--------------------------------------------------------------------*/
/* Test for scrolling                                                 */
/*--------------------------------------------------------------------*/
    "VGET (zscrolla zscrolln zverb)"
    If zverb  = 'UP' | zverb = 'DOWN' Then Do
        Call scroll_data_ud
        Signal bld2
    End
    If zverb  = 'LEFT' | zverb = 'RIGHT' Then Do
        Call scroll_data_lr
        If result = 0 Then Signal bld2
        Else               Signal scr2
    End

/*--------------------------------------------------------------------*/
/* Test for command entry                                             */
/*--------------------------------------------------------------------*/
    If cmd = locatec Then Do
        "TBTOP &TABLE"
        "TBVCLEAR &TABLE"
        Parse VAR ap xx ',' .
        aster = Index(parm1,'*')
        If aster > 1 Then parm1 = Substr(parm1,1,aster-1)
        data = xx " = Right(parm1,5,'0')"
        Interpret data
        entry = '*'
        "TBSARG &TABLE NAMECOND("ap")"
        "TBSCAN &TABLE"
        data = "yy = Index("xx",parm1)"
        Interpret data
        zedsmsg = ""
        If yy > 0 Then Do
/*          csr  = 'DA1'                                              */
/*          csrp = 2                                                  */
            "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
            zedlmsg = "Locate field '"parm1"' found."
        End
        Else Do
            "TBSKIP &TABLE NUMBER(-2) POSITION(TABPTR)"
            zedlmsg = "Locate field '"parm1"' NOT found."
        End
        "SETMSG MSG(ISRZ001)"
        scrolln  = 0
        Signal bld2
    End

    If cmd = sortc Then Do
        "TBSORT &TABLE FIELDS(&SP)"
        tabptr  = 0
        scrolln = 0
        Signal bld2
    End

    If Substr(cmd,1,1) = exitind Then Do
        Call call_exit
        Signal scr2
    End

/*--------------------------------------------------------------------*/
/* This is the logic for processing selections. It also caters for    */
/* eXclusion of lines from the table.                                 */
/*--------------------------------------------------------------------*/
    changed = Index(da1,altered)
    #tabptr = tabptr
    Do While changed > 0
        scrolln  = 0
        "TBTOP &TABLE"
        scrlx = (changed//ll)
        "TBSKIP &TABLE NUMBER("#tabptr+scrlx") POSITION(TABPTR)"
        sel = Translate(Substr(da1,changed+1,2),' ','_')
        If sel = 'X' Then Do
            da1 = Substr(da1,1,changed-1) ||,
                  Substr(da1,changed+(ll+1))
            "TBDELETE &TABLE"
            "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
            rownum  = rownum - 1
            scrolln = 1
        End
        Else Do
            Call call_exit
            changed = changed + 1
        End
        "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
        changed = Index(da1,altered,changed)
        If changed = 0 Then Signal bld2
    End

Test_4_uild_table:
    If lenchg = 'Y' Then Call build_table

/*--------------------------------------------------------------------*/
/* Rebuild screen                                                     */
/*--------------------------------------------------------------------*/
bld2:
    Call build_field
    Signal scr2

ext1:
    "TBEND &TABLE"
/*  Call $alklibd('OUT')                                              */
    Exit

/*--------------------------------------------------------------------*/
/* This section builds the display field 'DA1' from the table from    */
/* the NEXT row to that poinetd to by variable TABPTR. This allows    */
/* for TBTOP (which is row 0).                                        */
/*--------------------------------------------------------------------*/
build_field:
    Call scroll_table
    #tr=Trace(o)

    da1=
    Do zscrmaxd
        "TBSKIP &TABLE"
        If rc/=0 Then Do
            da1 = da1 || Substr(ogreenr||ztdmark,1,ll)||ogreen
            Leave
        End
        pct = Substr(pct90,1,Length(pct90)-1)
        Select
            When (pct > 94) Then hl = ogreen
            When (pct > 84) Then hl = oyellow
            Otherwise            hl = ored
        End
        hl4 = hl
        pct = Substr(pct80,1,Length(pct80)-1)
        Select
            When (pct > 94) Then hl = ogreen
            When (pct > 84) Then hl = oyellow
            Otherwise            hl = ored
        End
        hl6 = hl
        Parse VAR bpt50 bpt50 .
        If Datatype(bpt50) = 'NUM' Then Do
            pct = Substr(pct50,1,Length(pct50)-1)
            Select
                When (pct > 94) Then hl = ogreen
                When (pct > 84) Then hl = oyellow
                Otherwise            hl = ored
            End
            hl8 = hl
            bpt50 =  hl7   || ' 'Right(bpt50,3) ||,
                     hl8   || '   'Right(pct50,3)
        End
        Else Do
            bpt50 =  ored  || 'Not Possible'
        End
/********* \|/ ********* Customise here ********* \|/ *****************/

        dax = hl1     || ' 'entry ||,
              hl2     || '  'blksz ||,
              ogreenr || ' ' ||,
              hl3     || ' 'Right(bpt90,3) ||,
              hl4     || '   'Right(pct90,3) ||,
              ogreenr || ' ' ||,
              hl5     || ' 'Right(bpt80,3) ||,
              hl6     || '   'Right(pct80,3) ||,
              ogreenr || ' ' ||,
              Substr(bpt50,1,13) ||,
              ogreenr || ' ' || ogreen,
              hl2     || blksz ||,
              hl1     || '  'entry ||,
              ''

/********* /|\ ********* Customise here ********* /|\ *****************/
        da1 = da1 || Substr(dax,1,ll+1)
    End

    x=Trace(trace)
    Return 0

/*--------------------------------------------------------------------*/
/* This section re-positions the table to the appropriate row         */
/* according to the scroll parameters returned from ISPF.             */
/*--------------------------------------------------------------------*/
scroll_table:
    If tabptr + (qual*scrolln) > rownum Then tabptr = rownum
    Else tabptr = tabptr + (qual*scrolln)
    If tabptr < 0 Then tabptr = 0
   "TBTOP &TABLE"
   "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen to selected line after an UP/DOWN command.       */
/*--------------------------------------------------------------------*/
scroll_data_ud:
    If zscrolla = 'MAX' Then Do
        If zverb  = 'UP' Then tabptr  = 0
        Else                  tabptr  = rownum - (zscrolln-1)
        scrolln = 0
    End
    Else Do
        scrolln  = zscrolln
    End
    If zverb  = 'UP' Then qual = -1
    Else                  qual = +1

    Return 0

scroll_data_lr:
    zedlmsg = "'"zverb"' is not active."
    "SETMSG MSG(ISRZ001)"

    Return 4

/*--------------------------------------------------------------------*/
/* To following are constant variables and should not change.         */
/*--------------------------------------------------------------------*/
constant_vars:
    ztdmark = Centre(' Rsend ',79,'*')
    #colors = 7                             /* Number of colors       */

    reverse = X2C('10')                     /* Reverse mask           */
    uscore  = X2C('20')                     /* Underscore mask        */
    blink   = X2C('30')                     /* Blink Mask. Note - this*/
                                            /* may not work on some   */
                                            /* terminals...           */

    ired    = X2C('01')                     /* Input RED etc...       */
    iblue   = X2C('02')
    iyellow = X2C('03')
    igreen  = X2C('04')
    iturq   = X2C('05')
    ipink   = X2C('06')
    iwhite  = X2C('07')

    ored    = D2C(#colors+C2D(ired))        /* Output RED etc...      */
    oblue   = D2C(#colors+C2D(iblue))
    oyellow = D2C(#colors+C2D(iyellow))
    ogreen  = D2C(#colors+C2D(igreen))
    oturq   = D2C(#colors+C2D(iturq))
    opink   = D2C(#colors+C2D(ipink))
    owhite  = D2C(#colors+C2D(iwhite))

    altered = x2c('AA')                     /* Altered field indicator*/

    locatec = '/L'                          /* Locate command         */
    sortc   = '/SORT'                       /* Sort command           */
    exitind = '/'                           /* Exit required indicator*/

    Return 0

/*========================= Variable =================================*/
/********* \|/ ********* Customise here ********* \|/ *****************/

/*--------------------------------------------------------------------*/
/* To following are variables dependant on the application.           */
/*--------------------------------------------------------------------*/
/*--------------------------------------------------------------------*/
variable_vars:
    mainhead = oyellow"DASD Track Utilisation Utility" ||,
               oyellow||Copies('-',50)

    hl1     = oblue
    hl2     = oturq
    hl3     = oblue
    hl4     = ''
    hl5     = oblue
    hl6     = ''
    hl7     = oblue
    hl8     = ''
    ogreenr = Bitor(ogreen,reverse)
    ll      = 79                            /* Line length (ex attrib)*/
    qual    = 1
    scrolln = 0
    panel   = 'DASDBLDY'
    sp      = 'BLKSZ,C,A'                   /* Sort Parameter         */
    ap      = 'BLKSZ,GE'                    /* scan Argument parameter*/
    csr     = ''                            /* Cursor field           */
    csrp    = ''                            /* Cursor position        */
    sortc   = '/Not_utilised_here'          /* Disable SORT cmd       */
    exitind = '/Not_utilised_here'          /* Disable EXIT invocation*/
    blksz   = ''
    sbstart = 6000
    sbend   = 23476
    sbend   = 27999
    "VGET (dbeonly) PROFILE"
    eonly   = dbeonly
    If eonly = '' Then eonly = 'Y*  '

    Return 0

/*--------------------------------------------------------------------*/
/* This section calls the common exit DSEXIT. For further details,    */
/* refer to tutorial or doco in DSEXIT.                               */
/*--------------------------------------------------------------------*/
call_exit:
    "VPUT (ZCMD SEL DSTABLE) SHARED"
    "SELECT CMD(%DSEXIT)"

    Return 0

/*--------------------------------------------------------------------*/
/* This section calls the program to build the table. Variable KEEPTB */
/* is set to Yes to indicate return of table to this routine without  */
/* program processing.                                                */
/*--------------------------------------------------------------------*/
build_table:
   "TBEND &TABLE"
    keeptb  = "Y"
    dasderro = 'N'
    "VPUT (",
        "KEEPTB TABLE",
        "EONLY DASDERRO LRECL LRECL BSTART BEND",
        ") SHARED"
    "SELECT PGM(DASDBLKG)"

    "TBTOP &TABLE"
    "TBQUERY &TABLE ROWNUM(rownum) POSITION(tabptr)"
    rownum = rownum + 0
    Return 0

/********* /|\ ********* Customise here ********* /|\ *****************/
