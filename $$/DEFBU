/*            REXX             */
ARG parm#
/*  Trace r                                                           */
/**********************************************************************/
/*                                                                    */
/*  Macro to save member being editted.                               */
/*  Refer tutorial for permissable parameters.                        */
/*                                                                    */
/*  Associated members:                                               */
/*     EXEC     - BU (alias)                                          */
/*                BKDN (converse)                                     */
/*                BD (alias of BKDN)                                  */
/*     PANELS   - BUP                                                 */
/*     TUTORIAL - BKUPH000                                            */
/*                BKUPH010                                            */
/*                BKUPH020                                            */
/*                                                                    */
/**********************************************************************/
    Address ISPEXEC
    "ISREDIT MACRO (PARM#)"
    "ISREDIT (DATASET) = DATASET"
    "ISREDIT (MEMBER) = MEMBER"
    ISPEXEC 'CONTROL ERRORS RETURN'
/*  ISPEXEC 'CONTROL ERRORS CANCEL'                                   */
    ISPEXEC 'VGET (BKUPDEFT BKUPWHER) PROFILE'
    Parse Upper VAR parm# parm#
    Parse VAR parm# parm1 parm2 parm3

/**********************************************************************/
/*  Branch if macro being stacked                                     */
/**********************************************************************/
    "ISPEXEC VGET BUSTACK SHARED"
    If bustack = "Y" Then Signal stack1

/*********************************************************************/
/*  Display tutorial...                                              */
/*********************************************************************/
    If Substr(parm1,1,2) = '/H' | parm1 = '/?' | parm1 = '?' Then Do
        Signal help
        "ISPEXEC SELECT PGM(ISPTUTOR) PARM(BKUPH000)"
        Return 0
    End

/*********************************************************************/
/*  Test defaults update required...                                 */
/*********************************************************************/
    If bkupdeft = '' | bkupwher = '' | bkupdeft = "BKUPDEFT" |,
       bkupwher = "BKUPWHER" Then Do
        parm1 = '/DEF'
        gc009 = "Change defaults as required and hit <ENTER> to",
                  "accept."
        ISPEXEC 'SETMSG MSG(gc009)'
    End

    If parm1 = '/DEF' Then Do
scr1:
        zcmd = ''
        ISPEXEC 'DISPLAY PANEL(BUP)'
        If RC = 0 Then Do
            ISPEXEC 'VPUT (BKUPDEFT BKUPWHER) PROFILE'
            gc009 = 'Defaults have been set to designated values.'
            ISPEXEC 'SETMSG MSG(gc009)'
            Signal scr1
        End
        EXIT
    End

    buid = bkupdeft                   /* <=== Change for site */
    wher = bkupwher                   /* <=== Change for site */
    Call parse_parms

/*********************************************************************/
/*  Process data/parameters...                                       */
/*********************************************************************/
    If backup = '' Then Do
        If parm# ¬= '' Then buid = parm#
        If Length(buid) > 8 Then Do
            gc009 = 'Cannot pass character string > 8 characters.'
            ISPEXEC 'SETMSG MSG(gc009)'
            EXIT
        End
        If Length(buid) = 8 Then member = ''
        lc = Length(member||buid)
        lm = Length(member)
        If lc > 8 Then Do
            s = lc - 7
            e = lm + 8 - lc
        End
        backup = member
        If wher = 'P' Then Do
            If lc > 8 Then backup = SUBSTR(member,s,lm+1-s)
            backup = buid||backup
        End
        Else Do
            If lc > 8 Then backup = SUBSTR(member,1,e)
            backup = backup||buid
        End
        If meml < Length(backup) Then
            backup = SUBSTR(backup,1,meml)
    End

    backup = STRIP(backup)
    If DATATYPE(backup) = 'NUM' Then Do
        gc009 = 'Member name '''backup''' not valid for',
                'partitioned dataset.'
        Signal errx
    End

    If edit = 'EDIT' Then Do
        "ISREDIT EDIT "backup
        EXIT
    End

    If del  = 'DEL'  Then Do
        If SYSDSN(''''dataset'('backup')''') ¬= 'OK' Then
            gc009 = "Member '"backup"' does not exists."
        Else Do
            x = OUTTRAP('line',10,'NOCONCAT')
            Address TSO "DELETE '"dataset"("backup")'"
            x = OUTTRAP('OFF')
            gc009 = VALUE('line1')'.'
            Address ISPEXEC
        End
        Signal errx
    End

    If exist = 'EXIST' Then Do
        If SYSDSN(''''dataset'('backup')''') = 'OK' Then
            gc009 = 'member "'backup'" exists.'
        Else
            gc009 = 'member "'backup'" does not exists.'
        Signal errx
    End

    If prev = 'Y' Then Do
        bustack = "Y"
        "ISPEXEC VPUT (BUSTACK MEMBER BACKUP) SHARED"
        "ISPEXEC EDIT DATASET('&DATASET(&BACKUP)') MACRO(BU)"

    End
    Else Do
        "ISREDIT REPLACE "backup" .ZFIRST .ZLAST"
        If RC ¬= 0 Then Do
            "ISPEXEC SETMSG MSG("zerrmsg")"
            Return 8
        End
        Else Do
            gc009 = 'Member saved under "'backup'".'
            ISPEXEC 'SETMSG MSG(gc009)'
        End
    End
    Return 0

/*********************************************************************/
/*  Stacked processing...                                            */
/*********************************************************************/
stack1:
    bustack = ""
    "ISPEXEC VPUT BUSTACK SHARED"
    "ISPEXEC VGET (MEMBER BACKUP) SHARED"
    "ISREDIT DELETE ALL NX"
    "ISREDIT COPY &MEMBER AFTER .ZFIRST"
    If rc ¬= 0 Then
         gc009 = 'Saved copy of member doesn''t exist.'
    Else gc009 = 'Member saved under "'backup'" without changes.'
    "ISPEXEC SETMSG MSG(gc009)"
    "ISREDIT END"
    Return 0

err1:
    gc009 = 'Invalid length parameter of "'meml'" passed.'
errx:
    "ISPEXEC SETMSG MSG(gc009)"
    Return 0

/*********************************************************************/
/*  Parse  parameters...                                             */
/*********************************************************************/
parse_parms:
    del    = 'N'
    prev   = parse_cons('/NC')
    edit   = parse_cons('/ED','EDIT',,3)
    exist  = parse_cons('/EX','EXIST',,3)
    keep   = parse_cons('/KE','KEEP',,3)
    action = parse_cons('/DEL','MOVE','COPY',3)

    wher   = parse_cons('/S','S',,3)
    If wher = 'N' Then wher   = parse_cons('/P','P',bkupwher,3)

    meml   = parse_varb('/L=',8)
    If meml = 'ML' Then meml = Length(member)
    If Datatype(meml) /= 'NUM' Then Signal err1
    If meml < 1 | meml > 8 Then Signal err1

    backup = parse_varb('/M=','?')
    If backup = '?' Then backup = ''

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Help routine.                                                      */
/*--------------------------------------------------------------------*/
help:
    'ISPEXEC CONTROL ERRORS RETURN'
    n_st = mark(2)                          /* Mark next line         */
/*

   The two edit macros to backup and restore the PDS member
   currently being edited are called BKUP and BKDN respectively with
   aliases of BU and BD .

   By default, BKUP backs up the member being edited into member
   prefixed by a # unless the member name is 8 bytes, in which case
   the first byte is dropped off and replaced by the prefix
   character. BKDN restores using the same principle.

   Permissable parameters:
      char/string
          - You may pass your own prefix/suffix from #, @, $ or any
            alpha/numeric character string combination provided that
            they form valid member names (eg. numeric prefix will
            produce an invalid member name). Do not use any of the
            valid parameters listed below as the character string.
            The character string may be up to eight characters long.
            The member name will be decreased in accordance with the
            length of the character string if the combination is
            greater than 8 characters. (NOTE - The character string
            takes precedence over member name.)

    /DEF  - Change the default settings for character string and
            position.

    /DEL  - TO delete the backup version during a BKDN operation in
            one move.

    /EDit - To edit the backed up member as created by your previous
            supplied or default parameters.

    /EX   - Test if the proposed backup member already exists.

    /KEep - To append the backup version to the bottom of your
            current edit member without deleting existing lines.

    /L=l  - You may restrict the length of the member name in either
            backup or backdown by the /L=l parameter where l must be
            numeric and between 1 and 8.

            Alternatively you may set l to "ML" and let the routine
            establish the original Member's (name) Length and use
            it.

    /M=mn - Member name to backup into.

    /NC   - Backup without changes. Usefull for when changes are
            made before the backup is taken.

    /P    - Prefix identifier, indicating the position of the
            character string.

    /S    - Suffix identifier, indicating the position of the
            character string.

   It is recommended that you practice with a test member to ensure
   you do not accidently overwrite legitimate members as no
   existance checking is made.

*/
    n_en = mark(-2)                         /* Mark prev 1 line       */

    "ISREDIT UP MAX"
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"
    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
nl: Parse Arg ntl;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)";Return 0
