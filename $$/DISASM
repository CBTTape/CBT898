/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Macro to process substitute labels for register equates for        */
/* source code created from a load module using the DISASM dis-       */
/* assebler.                                                          */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     DISASM   - Driver                                              */
/*                                                                    */
/*   Panels:                                                          */
/*     DISASMH0 - Tutorial panel.                                     */
/*     DISASMH2 - Tutorial panel.                                     */
/*     DISASMH4 - Tutorial panel.                                     */
/*     DASMH000 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH100 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH110 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH200 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH300 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH310 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH320 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH330 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH340 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH350 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH355 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH400 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH500 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH505 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH507 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH600 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH610 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH620 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH630 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH640 - DISAM (dis-assembler program) tutorial panel.       */
/*     DASMH650 - DISAM (dis-assembler program) tutorial panel.       */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    If parm# ¬= "" Then Signal byp1
    ADDRESS ISPEXEC
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1
    macro = 'Y'

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    Parse Upper VAR parm# parm1 parm2 parm3
    If Substr(parm1,1,2) = '/H' | parm1 = '/?' | parm1 = '?' Then
        Signal help

    base  = '12'                            /* Base regiister         */
    mic   = 41                              /* Macro indicator column */
    mic   = 40                              /* Macro indicator column */
    mica  = mic -1                          /*     */
    micb  = mic +1
    micc  = mic +10
    micd  = mic +3
    mice  = mic +73

    "ISREDIT (status) = USER_STATE"

    Call Parse_parms
    If trace = 'Y' Then Trace r

    If dbase /= 'N' & bbase /= 'N' Then Do
        gc009 = "The 'B=..' and 'D=..' parameters are mutually",
                "exclusive."
        Signal erx1
    End

    If seplab = "Y" Then Do
        Call seperate_label
        Signal ext1
    End

    If origd ¬= "Y" Then Do
        "ISREDIT F 'LOC  OBJECT CODE    ADDR1' FIRST"
        If rc = 0 Then "ISREDIT DEL ALL NX .ZFIRST .ZCSR"

        "ISREDIT X 'LOC  OBJECT CODE    ADDR1' ALL"
        "ISREDIT X '  Active Usings:' 2 ALL"
/*      "ISREDIT X P' ' 40 40 ALL"                                    */
        "ISREDIT X '"Substr(' ',1,70)"' 2 ALL"
        "ISREDIT F '          END ' &MIC LAST"
        "ISREDIT DEL ALL X"
        "ISREDIT C P'¬' ' ' 1 1 ALL"
        "ISREDIT F 'NO STATEMENTS FLAGGED IN THIS ASSEMBLY' LAST"
        If rc = 0 Then "ISREDIT DEL ALL NX .ZCSR .ZLAST"
        "ISREDIT F 'DIAGNOSTIC CROSS REFERENCE AND ASSEMBLER' LAST"
        If rc = 0 Then "ISREDIT DEL ALL NX .ZCSR .ZLAST"
        "ISREDIT F '          END ' &MIC LAST"
        If rc = 0 Then Do
            "ISREDIT (lin#) = CURSOR"
            "ISREDIT (last) = LINENUM .ZLAST"
            If last > lin# Then Do
                "ISREDIT CURSOR = "lin# +1
                "ISREDIT DEL ALL NX .ZCSR .ZLAST"
            End
        End

        "ISREDIT PROCESS RANGE C M"
        "ISREDIT (cmd) = RANGE_CMD"
        If cmd = 'C' | cmd = 'M' Then Do
            If cmd = 'M' Then del = "Y"
            "ISREDIT (flab) = LINENUM .ZFRANGE"
            "ISREDIT (tlab) = LINENUM .ZLRANGE"
        End
        Else Do
            "ISREDIT (flab) = LINENUM .ZFIRST"
            "ISREDIT (tlab) = LINENUM .ZLAST"
        End
        "ISREDIT LABEL &FLAB = .FLAB"
        "ISREDIT LABEL &TLAB = .TLAB"
    End
    Else Do
        "ISREDIT F ' CSECT ' LAST"
        "ISREDIT (lin#) = CURSOR"
        "ISREDIT CURSOR =" lin#-1 0
        "ISREDIT DEL ALL NX .ZFIRST .ZCSR"
        "ISREDIT C P'¬' ' ' 1 1 ALL"
        "ISREDIT C ' ' '' 1 1 ALL"
        "ISREDIT C ' REQU ' ' YREGS ' LAST"
        Signal ext1
    End
    "ISREDIT RESET"

    If asmlst = "Y" Then Signal ext1

    If srcly = "Y" Then Do
        Call source_extract
        If seplab = "Y" Then Call seperate_label
        Signal ext1
    End

    If labit = "Y" Then Do
        "ISREDIT CURSOR = "flab 0
        Do Forever
            "ISREDIT F ' DC ' 50 .FLAB .TLAB"
            If rc ¬= 0 Then Leave
            "ISREDIT (line) = LINE .ZCSR"
            If Substr(line,42,1) = ' ' Then Do
                If ltype = 'X' Then labt = 'LAB'Substr(line,3,5)
                Else labt = 'LAB'Right(Substr(line,35,6),5,'0')
               line = ,
                   Substr(line,1,40) Substr(labt,1,8) Substr(line,51)
               "ISREDIT LINE .ZCSR = (line)"
            End
        End
        "ISREDIT CURSOR = "flab 0
        Do Forever
            "ISREDIT F ' DS ' 50 .FLAB .TLAB"
            If rc ¬= 0 Then Leave
            "ISREDIT (line) = LINE .ZCSR"
            If Substr(line,42,1) = ' ' Then Do
                If ltype = 'X' Then labt = 'LAB'Substr(line,3,5)
                Else labt = 'LAB'Right(Substr(line,35,6),5,'0')
               line = ,
                   Substr(line,1,40) Substr(labt,1,8) Substr(line,51)
               "ISREDIT LINE .ZCSR = (line)"
            End
        End
        Signal ext1
    End

    dsect = 'N'
    If dbase /= 'N' Then Call dsect_exp

    b. = ''
    If bbase = 'N' Then b.1 = base
    Else Do
        base = bbase
        Parse VAR base b.1 ',' b.2 ',' b.3 .
    End

dislab_repeat:
    bdisp = 0
    Do b#=1 To 3
        If b.b# = '' Then Leave
        If Datatype(b.b#) ¬= 'NUM' | Index(b.b#,'.') > 0 Then Do
            gc009 = "Base addressability register must be numeric.",
                    "Format 'B=r1{,r2{,r3}}'."
            Signal erx1
        End
        base = b.b#
        If nocoma = 'N' Then basep = ',R'base')'
        Else                 basep = 'R'base')'
        Call base_exp
        Call base_exp                       /* Double parse to b sure */
        bdisp = bdisp + 4096
    End

    If hexs /= 'HEXS' Then,
        If hexo = 'Y' & dislab = 'Y' Then Do
            hexo = 'N'
            Signal dislab_repeat
        End

    Signal ext1

/*--------------------------------------------------------------------*/
/* Extract source and remove macro expansion.                         */
/*--------------------------------------------------------------------*/
source_extract:
    If macexp = 'Y' Then Do
        "ISREDIT (last) = LINENUM .ZLAST"
        inmac = 'N'
        Do i=1 To last
            "ISREDIT (line) = LINE" i
            If Substr(line,41,1) ¬= '+' Then Do
                inmac = 'N'
                Iterate
            End
            If inmac = 'Y' Then Iterate
            inmac = 'Y'
            "ISREDIT (line) = LINE" i-1
            line = Substr(line,1,41)'*'Substr(line,44,71)||,
                   Substr(line,114)
            "ISREDIT LINE "i-1" = (line)"
            Do j=i-2 By -1 To 1
                "ISREDIT (line) = LINE" j
                If Substr(line,113,1) = ' ' Then Leave
                line = Substr(line,1,41)'*'Substr(line,44,71)||,
                       Substr(line,114)
                "ISREDIT LINE "j" = (line)"
            End
        End
    End
    Else Do
        "ISREDIT X '+' &MIC &MIC ALL"
        "ISREDIT DEL ALL X"
    End
    "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 To last
        "ISREDIT SHIfT ( &I &MIC"
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Expand the body of the program using the base                      */
/*--------------------------------------------------------------------*/
dsect_exp:
    base = dbase
    If Datatype(base) ¬= 'NUM' | Index(base,'.') > 0 Then Do
        gc009 = "DSECT addressability register must be numeric.",
                "Format 'D=r'."
        Signal erx1
    End

    If flab = '' Then Do
        gc009 = "DSECT addressability processing must have a range",
                "delimited by block 'CC' line commands."
        Signal erx1
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Expand the body of the program using the base                      */
/*--------------------------------------------------------------------*/
base_exp:
    lin# = 1
    lbr  = Length(basep)
    Do Forever
        "ISREDIT CURSOR = "lin#+1 0
        If dsect = 'Y' Then ,
            "ISREDIT F '"basep"'"
        Else,
            "ISREDIT F '"basep"' .FLAB .TLAB"
        If rc ¬= 0 Then Leave
        "ISREDIT (linex) = LINE .ZCSR"
Say Substr(linex,1,79)
        "ISREDIT (lin#) = LINENUM .ZCSR"
        line = Substr(linex,50)
        Parse VAR line cmd oper .
        oper = Strip(oper)
        x = 1 - lbr
        Do Forever
            x = Index(oper,basep,x+lbr)
            If x = 0 Then Leave
            c = 0
            Do j=x By -1
               If Substr(oper,j,1) = '(' Then Leave
               If Substr(oper,j,1) = ',' Then c = j
            End
            Do k=j By -1
               If Substr(oper,k,1) = ',' | k = 1 Then Leave
            End
            If Substr(oper,k,1) = ',' Then k = k + 1
            disp  = Substr(oper,k,j-k)
            If c = 0 Then len = ''
            Else len = Substr(oper,j+1,c-(j+1))
            labf  = Strip(Substr(oper,k,x+Length(basep)-k))
            If hexo = 'Y' Then Do
                If Substr(disp,1,1) = 'X' Then Iterate
                hexs  = "X'"D2X(disp)"'"
                "ISREDIT CURSOR = &LIN# 0"
                'ISREDIT C "'disp'" "'hexs'"' 50+k 132
                msg1 = "*                     ",
                       "Disp changed from * '"disp"' to '"hexs"'."
                linex = '*'Substr(linex,2)
                "ISREDIT LINE_BEFORE .ZCSR = NOTELINE (linex)"
                "ISREDIT LINE_BEFORE .ZCSR = NOTELINE (msg1)"
            End
            Else Do
                If Substr(disp,1,1) = 'X' Then Do
                    disp = Substr(disp,3,Length(disp)-3)
                    disp = X2D(disp)
                End
                hex    = Right(D2X(disp+bdisp),6,'0')
                offset = ''
                "ISREDIT CURSOR = 1 0"
                "ISREDIT F '"hex"' 1 10 FIRST .FLAB .TLAB"
                hexd = X2D(hex)
                If rc ¬= 0 Then Do
                    If dislab = 'Y' Then Do
                        "ISREDIT (i) = LINENUM .TLAB"
                        "ISREDIT (j) = LINENUM .FLAB"
                        Do i=i By -1 To j
                            "ISREDIT (line) = LINE" i
                            If Substr(line,2,1) = ' ' Then Iterate
                            Parse VAR line hexn .
                            hexnd = X2D(hexn)
                            If hexnd > hexd Then Iterate
                            offset = '+'hexd-hexnd
                            Leave
                        End
                    End
                    If offset = '' Then Do
                        err1 = ' *** Label' hex 'not found for line below.',
                               '***'
                        "ISREDIT LINE_BEFORE &LIN# = NOTELINE (err1)"
                        err1 = ' *** Label' hex 'not found for line',
                        Strip(Substr(linex,35,6))'. ***'
                        "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (err1)"
                        Iterate
                    End
                    Else "ISREDIT CURSOR = " i 0
                End
                Else hexn = hex
                "ISREDIT (line) = LINE .ZCSR"
                "ISREDIT (lin@) = LINENUM .ZCSR"
                labt = Strip(Substr(line,42,8))
                If labt = ' ' Then Do
                    If ltype = 'X' Then labt = 'LAB'Right(hexn,5,'0')
                    Else                labt = 'LAB'Right(lin@,5,'0')
                End
                line = Substr(line,1,40) Substr(labt,1,8) Substr(line,51)
                "ISREDIT LINE .ZCSR = (line)"
                If len = '' Then labtc = labt||offset
                Else             labtc = labt||offset'('len')'
                "ISREDIT CURSOR = 1 0"
                Do forever
                    "ISREDIT F ' "labf"'"
                    If rc ¬= 0 Then Leave
                    "ISREDIT (linec) = LINE .ZCSR"
                    "ISREDIT C ' "labf"' ' "labtc"'"
                    msg1 = "*                    ",
                           "Label changed from * '"labf"' to '"labtc"'."
                    linec = '*'Substr(linec,2)

                    "ISREDIT LINE_BEFORE .ZCSR = NOTELINE (linec)"
                    "ISREDIT LINE_BEFORE .ZCSR = NOTELINE (msg1)"
                End
                "ISREDIT CURSOR = 1 0"
                Do forever
                    "ISREDIT F ',"labf"'"
                    If rc ¬= 0 Then Leave
                    "ISREDIT (linec) = LINE .ZCSR"
                    "ISREDIT C ',"labf"' ',"labtc"'"
                    msg1 = "*                    ",
                           "Label changed from * '"labf"' to '"labtc"'."
                    linec = '*'Substr(linec,2)
                    "ISREDIT LINE_BEFORE .ZCSR = NOTELINE (linec)"
                    "ISREDIT LINE_BEFORE .ZCSR = NOTELINE (msg1)"
                End
            End
        End
        If trace = 'Y' Then Say lin# hex labt right(len,2,'0') disp oper
    End

    Return 0
/*--------------------------------------------------------------------*/
/* Seperate labels form commands. (Leave data alone.)                 */
/*--------------------------------------------------------------------*/
seperate_label:
    "ISREDIT X '*' 1 1 ALL"
    "ISREDIT X '.' 1 1 ALL"
    "ISREDIT X P'¬' 72 72 ALL"
    "ISREDIT CURSOR = 1 0"
    If trace = 'Y' Then Trace Off
    Do Forever
        "ISREDIT F P'¬' 1 1 NEXT NX"
        If rc ¬= 0 Then Leave
        "ISREDIT (linex) = LINE .ZCSR"
        Parse VAR linex label cmd rest
        If cmd = 'DS'    | cmd = 'DC'    |,
           cmd = 'EQU'   | cmd = 'COPY'  |,
           cmd = 'DSECT' | cmd = 'CSECT' |,
           cmd = 'USING' | cmd = 'DROP'             Then Iterate
        Parse VAR linex label rest
        "ISREDIT (lin#) = LINENUM .ZCSR"
        "ISREDIT LINE .ZCSR = '"Substr(label,1,9)||seplab#"'"
        "ISREDIT LINE_AFTER .ZCSR = ""         "Strip(rest)""""
        If trace = 'Y' Then Say linex
    End
    If trace = 'Y' Then Trace r

    Return 0
/*--------------------------------------------------------------------*/

erx1:
    "ISPEXEC SETMSG MSG(GC009)"

ext1:
    "ISREDIT USER_STATE = (status)"
    Exit


/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    Parse Upper VAR parm# parm#

/*  trace  = 'N'                                                      */
/*  origd  = 'N'   /O                                                 */
/*  srcly  = 'N'   /S                                                 */
/*  seplab = 'N'   /SL                                                */
/*  asmlst = 'N'   /A                                                 */
/*  labit  = 'N'   /L                                                 */
/*  hexo   = 'N'   /X                                                 */
/*  dislab = 'N'   /D                                                 */
/*  macexp = 'N'   /M                                                 */
/*  nocoma = 'N'   /NC                                                */
/*  ltype  = 'X'   /LTx    x = L  Label on line number                */
/*                         x = X  Label on hex address                */

    trace  = parse_cons('TRACE')

    macexp = parse_cons('/M')

    nocoma = parse_cons('/NC')

    srcly  = parse_cons('/S')

    asmlst = parse_cons('/A')

    labit  = parse_cons('/L')

    hexo   = parse_cons('/X')

    dislab = parse_cons('/D')

    origd  = parse_cons('/O')

    seplab = parse_varb('/SL','N')
    If seplab /= 'N' Then Do
        If result = '' Then Do
            seplab# = "DS    0H"
            l       = 3
        End
        Else Do
            seplab# = "EQU   *"
            l       = 4
        End
        seplab = 'Y'
    End

    ltype = parse_varb('/LT','N')
    If ltype /= 'L' Then ltype = 'X'

    bbase = parse_varb('B=','N')
    If bbase = '' Then bbase = base

    dbase = parse_varb('D=','N')
    If dbase = '' Then dbase = 'RX'

    parm# = Strip(parm#)

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/*--------------------------------------------------------------------*/
parse_cons:
    Arg mask,posr,negr
    If posr = '' Then posr = 'Y'
    If negr = '' Then negr = 'N'
    y# = Wordpos(mask,parm#)
    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass negative result substitution as the 2 parameter.          */
/*--------------------------------------------------------------------*/
parse_varb:
    Arg mask,negr
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        Return px
    End
    Return negr
/*--------------------------------------------------------------------*/
/* Help instructions.                                                 */
/*--------------------------------------------------------------------*/
help:
    last = Sourceline() -1
    Do i=last By -1
        line = Sourceline(i)
        If i = 1 Then Exit
        If Substr(line,1,2) /= '/*' Then Iterate
        first = i +1
        Leave
    End
    If macro = 'Y' Then Address TSO "NEWSTACK"
    Else                Address TSO "CLEAR"
    Do i=first To last
        If i=first Then Do
            If macro /= 'Y' Then,
                Say   Centre(' ooo000OOOO000ooo ',79,'*')
            Else,
                Queue Centre(' ooo000OOOO000ooo ',79,'*')
        End
        If macro /= 'Y' Then,
            Say   '*'Substr(Sourceline(i),1,77)'*'
        Else,
            Queue '*'Substr(Sourceline(i),1,77)'*'
        If i=last  Then Do
            If macro /= 'Y' Then,
                Say   Centre(' End ',79,'*')
            Else,
                Queue Centre(' End ',79,'*')
        End
    End
    If macro = 'Y' Then Do
        umodel.0 = Queued()
        Do i=1 To umodel.0
            PARSE PULL umodel.i
        End
        "ISREDIT (caps) = CAPS"
        "ISREDIT CAPS = OFF"
        "ISREDIT (last) = LINENUM .ZLAST"
        If last = 0 Then "ISREDIT LINE_AFTER 0 = ' '"
        Do i=1 To umodel.0
            nl = VALUE('umodel.'i)
            "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (nl)"
        End
        "ISREDIT CAPS = &CAPS"
    End

    Exit

Start_self_doco:
/*
 Macro to process substitute labels for register equates for
 source code created from a load module using the DISASM dis-
 assebler.

    1. Process the load module by the DISASM program.
    2. Edit the SDSF output and hit it with this macro using
       parameter '/O'. This will remove all the JCL and shift the
       source left 1 column.
    3. Copy the result of step 2 into an LRECL=80 PDS and re-assemble
       it.
    4. Edit the SDSF output and hit it with this macro with parameter
       'B=r1/r2/r3' where r1, r2 and r3 are the first, second and
       third base registers respectively. If this parameter is
       omitted, 12 is assumed.
    5. Repeat step 3 above. Include any known DSECTS into the source.
    6. To establish addresability to DSECTS process them individually
       as follows.
       Place a block 'CC' line command around the target DSECT. Pass
       the parameter 'D=r1' where r1 will be the base register to
       try to associate with the DSECT.

 Parameters:
    B=r1{,r2{,r3}}
      Use r1, r2 and r3 ase base registers respectively. If
      omitted, 12 is used (use ',' as seperator).  The registers must
      be numeric (omit the 'R').
    D=r1
      Use r1 as the base to establish addresability to a specific
      DSECT delimited by 'CC' block line command.
    /A
      Display the assembly (expanded) listing only.
    /C
      Comment only (not yet developed)
    /D
      Use displacement if label not found, eg. LABEL+10
    /L
      Place labels on non labelled 'DC/DS' lines.
    /LTx
      Label Type, where: x = L  Label on line number
                         x = X  Label on hex address
    /M
      Leave macro expansion in.
    /NC
      No comma. Normally the disassembler generates code of format
      nnn(,Rx). You may be using code of fromat nnn(Rx) therefore
      you will need this switch. Usually used with switches /X.
    /O
      Original disassembly output processing.
      Leaves the source after processing output of disassembly.
    /S
      Display the source only (shift left 42 columns)
    /SL
      Seperate Label. If a label is on a command line then it
      will be set up preceeding the line with a 'DS 0H' value.
      Append an 'E' (/SLE) if you prefer equates instead,
         ie. 'EQU *'.
      (This should be done on original source.)
    /X
      Change register offsets from decimal to X'xx' format. This
      parameter will use either the default or supplied base
      register. If you use this option you may need to use the /NC
      switch.
      (Note with this option 'B=' is not restricted to
      base registers only.)

*/
