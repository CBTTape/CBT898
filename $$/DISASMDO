/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
n_st = mark(2)                              /* Mark next 2 line       */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Disassemble dump output.                                           */
/* This routine will take the specified lines (identified by a block  */
/* CC or Cnnn line commands), build them into one contiguous string   */
/* and pass it on to routine SHOWDASM to disassemble.                 */
/*                                                                    */
/* Assumes starts in Col 2 and has the following format:              */
/*    Word 1  - Address or offset in block. Only word 1 of the first  */
/*              line will be processed and it will be ignored on      */
/*              subsequent lines. (Use this feature to fudge starting */
/*              displacement.                                         */
/*    Word 2 to Word 9                                                */
/*            - 8 blocks of 4 bytes in 8 character HEX representation */
/*    Word 10 onwards                                                 */
/*            - who cares                                             */
/*                                                                    */
/* Any non HEX values found in cols 2 onwards in word 1 of the line   */
/* will make the line be ignored.                                     */
/*                                                                    */
/* If you want to disasemble from somewhere within the line pass a    */
/* parameter of SHIFT(xx) where X'xx' is the HEX offset in the line.  */
/* Naturally the default is SHIFT(00).                                */
/*                                                                    */
/* The shift command will change the base address. Use parameter of   */
/* BASE(ard) to change the base address to X'adr'.                    */
/* Naturally the default is BASE(00).                                 */
/*                                                                    */
/* Members required to package this product:                          */
/*   REXX:                                                            */
/*     DISASMDO - This driver                                         */
/*     SHOWDASM - REXX disassembler. Must have access to SHOWDA#C.    */
/*                                                                    */
/*   Miscellaneous:                                                   */
/*     SHOWDA#C - Disassembler code table matrix.                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
n_en = mark(-2)                             /* Mark prev 2 line       */

    Address ISPEXEC
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    zedsmsg=
    Parse Upper VAR parm# parm#
    Parse VAR parm# parm1 parm2 parm3 parm4

    If parm1 = '?' Then Signal Help_me

    If parm1 = 'CICS' Then Do
        "ISREDIT X 'CICS TRANSACTION DUMP' ALL"
        "ISREDIT DEL ALL X"
    End
    Parse Upper VAR parm# . 'SHIFT(' shiftx ')' .
    If shiftx = '' Then shiftx = 0

    "ISREDIT (status) = USER_STATE"

    If Index(parm#,'ALL') > 0 Then Do
        "ISREDIT (labf) = LINENUM .ZFIRST"
        "ISREDIT (labt) = LINENUM .ZLAST"
    End
    Else Do
        "ISREDIT PROCESS RANGE C M"
        "ISREDIT (cmd) = RANGE_CMD"
        If cmd = 'C' Then Do
            "ISREDIT (labf) = LINENUM .ZFRANGE"
            "ISREDIT (labt) = LINENUM .ZLRANGE"
        End
        Else Do
            zedlmsg = "Missing range block command 'CC/Cnnn'. Please",
                    "re-enter."
            Signal msg_exit
        End
    End

    code = ''

    "ISREDIT (line) = LINE" labf
    offs_x = ''
    Do i=labf To labt
        "ISREDIT (line) = LINE" i
        Parse VAR line w1 p1 p2 p3 p4 p5 p6 p7 p8 .
        If Verify(Substr(w1,2),'0123456789ABCDEF') > 0 Then Iterate
        If offs_x = '' Then Parse VAR line 2 offs_x .
        code = code || p1 || p2 || p3 || p4 || p5 || p6 || p7 || p8
    End

    shiftd = x2d(shiftx)
    Parse Upper VAR parm# . 'BASE(' base ')' .
    shiftd = X2d(shiftx)
    code   = Substr(code,(shiftd*2)+1)
    If base = '' Then offs_d = x2d(offs_x) + shiftd
    Else              offs_d = x2d(base)
/*  "ISREDIT RESET"                                                   */
    linen = " *** Starting with The next line at offset",
            "X'"Right(shiftx,2,'0')"' ***"
    "ISREDIT LINE_BEFORE &LABF = NOTELINE (linen)"
    linen = ' *** To the above line ***'
    labtn = labt +1
    "ISREDIT LINE_BEFORE &LABTN = NOTELINE (linen)"
    disasm = Showdasm('HEX('offs_d')','*',code)
    Do Forever
        Parse VAR disasm line +80 disasm
        Parse VAR line offs source codeo
        linen = ' 'Substr(line,2)
        "ISREDIT LINE_BEFORE &LABTN = NOTELINE (linen)"
        If disasm = '' Then Leave
    End

msg_exit:
    "SETMSG MSG(ISRZ001)"
    "ISREDIT USER_STATE = (status)"

    Exit

Help_me:
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    msgt = 'NOTELINE'
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line = Sourceline(i)
        If Index(line,'/*') >0 Then Parse Value line With '/*' line '*/'
        x = nl('*'Substr(line,1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"

    Exit

nl:Parse Arg n#;"ISREDIT LINE_BEFORE .ZFIRST = &MSGT (n#)";Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
