/*--------------------------ooo00 REXX 00ooo--------------------------*/
DSS1:dss1_ver='1.07'
n_st=mark(2) /* Mark Start

   Good &TOD. &CNAME..

   DSS1: DASD Summary #1.

   Totals the output list from a set of ISPF 3.4 PRINT option against
   dataset qualifiers (or acombination there of).

   Summaries are made by DASD group used, basede on the first 4 bytes
   of each volume. Can be altered using parameter "/V(n)".

   Summaries are also made by hlq.  Default is the 1st hlq.  You can
   change this by using "/Q(n)" parameter.  Default is the first
   qualifier.

   For VSAM datasets where usage is unknown and reported as '?', 100%
   usage is assumed (eg. VSAM datasets).

   To prepare dataset for summary, either supply parameter of "/P" or
   just let it determine if it has been pre-processed.

   Parameters:
   -----------
     /A       - Append to a previous output (do not issue an ISPF
                reset command).
     /M       - Summarise migrated datasets. They can esily be lost
                track of and this is used as a reminder (if you
                remember).  Must be combined with the "/Q" option and
                will be ignored without it.
     /P       - Prepare dataset for summary. Either supply this
                parameter or let the function determine if required.
                (Obsolete.)
     /Q(n)    - Change qualifier, where 'n' can be any or a
                combination of 1, 2, 3 or 4 qualifiers. Default is 1.
                If any qualifier is requested, all required must be
                used.  Eg. If you want 1 and 2 qualifiers, you must
                request both.  Also note if 1 and 2 are chosen, totals
                for each 2 will be included in 1 totals.
                    Eg, /Q(2,4.
                If 'n' is not numeric, it will be interpreted as a
                dataset qualifier and only that qualifier(s) will be
                processed. The qualifier level will be adjusted
                according to the number of qualifiers in the parameter.
                This parameter is required to permit processing of the
                "/M" option.
     /V(n)    - Volume name summary where 'n' is the nymber of prefix
                bytes of volume name to use.  Default is 4.
     /WQ      - Include a summary of wasteage per qualifier breakdown.
                (Seperate option as requires an extra line of output as
                1 line is not enough.) Default is no wastage summary for
                dataset qualifiers.

   Packaging:
   ----------
     $CSTRING - To tally the number of qualifiers when using the
                "/Q(q1.qn)" option.
     DSS1     - This driver.
     XD       - Macro to delete any duplicates. (For those occassions
                where you get carried away and double up in listings.)

                                *****
*/
    n_en=mark(-2)                           /* Mark End               */
/*--------------------------------------------------------------------*/
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Address ISREDIT
    "(status)=USER_STATE";"(caps)=CAPS";"CAPS=OFF"
    If Wordpos(Word(parm#,1),'? /H HELP ??')>0 Then Signal Help_me
    x=Parse_parms()

    migvols='MIGRAT1 MIGRAT2'

    If \append Then "RESET"
    "F '1 Listing of' ALL"
    If rc=0 | pre_process Then Do
        "X '1 Listing of' ALL"
        "X ' VOLUME -'     ALL"
        "X '        ' 3 10 ALL"
        "X '                    ' 50 80 ALL"
        If listmig Then Do
            xxx=migvols
            Do While xxx/=''
                Parse VAR xxx xx xxx
                "F ' "xx" ' 49 ALL"
            End
        End
        "DEL ALL X"
        "XD 1-128"
        "DEL ALL X"
        "F '------------------------------' FIRST"
        "(lin#)=LINENUM .ZCSR"
        Do i=1 To lin#
            "(line)=LINE" i;line=Overlay('*',line,1);"LINE" i"=(line)"
        End
        zedlmsg='Dataset has been doctored for processing. Cancel out',
                'if you wish to preserve original format.'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
    End
    If hlq/='' Then Do
        "F '------------------------------' FIRST"
        "(lin#)=LINENUM .ZCSR";"CURSOR="lin#+1 0
        "X ALL .ZCSR .ZLAST";"F ' "hlq"' 1 30 ALL"
/*      "DEL ALL X"                                                   */
    End

    "(last)=LINENUM .ZLAST"
    hlq.=0;pchlq.=0;vol.=0;pcused.=0;vol_list=;hlq_list=;mig_list=
    Signal on Syntax Name error_off_00;Signal on Error  Name error_off_00
    Do i=1 To last
        "(line)=LINE" i;If Word(line,1)='*' Then Iterate
        Parse VAR line dsn vol . 89 trks used xt
        If listmig & trks='' Then Do
           If Wordpos(vol,migvols)>0 Then Do
           migvols='MIGRAT1 MIGRAT2'
                Parse VAR line dsn vol .
                dsn=Translate(dsn,' ','.')
                dsn=Subword(dsn,1,q#)
                dsn=Space(dsn,1,'.')
                If Index(mig_list,dsn)=0 Then mig_list=mig_list dsn
                Iterate
           End
        End
        If hlq/='' Then Do
            "(xs)=XSTATUS" i;If xs='X' Then Iterate
        End
        If Wordpos(vol,'*VSAM* *ALIAS')>0 Then Iterate
        If \Datatype(trks,'w') Then Do
            x=nl('*' Left(dsn,44) vol)
            Iterate
        End
        Parse VAR dsn hq1 '.' hq2 '.' hq3 '.' hq4 '.'
        Interpret "Parse VAR vol vp +"vollen
        If Wordpos(vp,vol_list)=0 Then vol_list=vol_list vp
        If q1 Then If Wordpos(hq1,hlq_list)=0 Then hlq_list=hlq_list hq1
        vol.vp=vol.vp+trks;hlq.hq1=hlq.hq1+trks
        If used='?' Then used=100
        xx=Format(trks*(used/100),8,0);pcused.vp=pcused.vp+xx
        pchlq.hq1=pchlq.hq1+xx
        If q2 Then Do
            hq2=hq1'.'hq2
            If Wordpos(hq2,hlq_list)=0 Then hlq_list=hlq_list hq2
            hlq.hq2=hlq.hq2+trks
            pchlq.hq2=pchlq.hq2+xx
        End
        If q3 Then Do
            hq3=hq1'.'hq2'.'hq3
            If Wordpos(hq3,hlq_list)=0 Then hlq_list=hlq_list hq3
            hlq.hq3=hlq.hq3+trks
            pchlq.hq3=pchlq.hq3+xx
        End
        If q4 Then Do
            hq4=hq1'.'hq2'.'hq3'.'hq4
            If Wordpos(hq4,hlq_list)=0 Then hlq_list=hlq_list hq4
            hlq.hq4=hlq.hq4+trks
            pchlq.hq4=pchlq.hq4+xx
        End
    End
    Signal Off Syntax;Signal Off Error
    tot=0;totu=0
    x=nl('*')
    x=nl('*'Copies('-',70)'*')
    x=nl('* By 1st.' vollen 'bytes of VOLUME:')
    x=nl('*')
    x=nl('*     Allocated/used          Allocated/used      Vol(s)',
         ' Wastage(Cyl)')
    x=nl('* -------------/---------- ------------/--------- ------',
         '--------------')
    vol_list=$sort(vol_list)
    Do While vol_list/=''
        Parse VAR vol_list vp vol_list
        tot=tot+vol.vp;totu=totu+pcused.vp
        cvol=Format(vol.vp/15,8,0);cpcused=Format(pcused.vp/15,8,0)
        If cvol>0 & cpcused=0 Then xtra='?';Else xtra=
        x=nl('*',
             'Trk('Right(vol.vp,9)'/'Right(pcused.vp,9)')',
             'Cyl('cvol'/'cpcused')',
             Left(vp,6),
             Right(cvol-cpcused,5)'('Format(100-cpcused/cvol*100,3,2)'%)'xtra)
    End
    ctot=Format(tot/15,8,0);ctotu=Format(totu/15,8,0)
    x=nl('*'Right('======',55))
    If ctot=0 Then Signal get_out
    x=nl('*',
         'Trk('Right(tot,9)'/'Right(totu,9)')',
         'Cyl('ctot'/'ctotu')',
         'Total ',
         Right(ctot-ctotu,5)'('Format(100-ctotu/ctot*100,3,2)'%)')
    x=nl('*')
    x=nl('*'Copies('-',70)'*')
    x=nl('* By hlq:                                         Qualifier(s)')
    x=nl('*                                                ',
         '---------------------')
    hlq_list=$sort(hlq_list)
    Do While hlq_list/=''
        Parse VAR hlq_list hq hlq_list
        x=nl('*',
             'Trk('Right(hlq.hq,9)'/'Right(pchlq.hq,9)')',
             'Cyl('Format(hlq.hq/15,8,0)'/'Format(pchlq.hq/15,8,0)')',
             hq)
             If w_q Then Do
                  cvol=Format(hlq.hq/15,8,0);cpcused=Format(pchlq.hq/15,8,0)
                  If cvol>0 & cpcused=0 Then xtra='?';Else xtra=
                  x=Right('Wastage('Format(100-cpcused/cvol*100,3,2)'%)'xtra,69)
                  x=nl('*' x)
             End
    End
    x=nl('*')
    x=nl('*'Copies('-',70)'*')

    If \listmig Then Signal get_out

    x=nl('* Migrated datasets (1st. 'q#' qualifiers):')
    x=nl(Substr('* -----------------------------------------',1,71)'*')
    Do While mig_list/=''
        Parse VAR mig_list hq mig_list;x=nl('*' hq)
    End
    x=nl('*')
    x=nl('*'Copies('-',70)'*')

    Signal get_out

error_off_00:
    Say '*** Error at line ->' sigl
    Say 'vol.vp=>'vol.vp'< trks=>'trks'<'
    Say 'Line#='i Datatype(trks,'w')
    Say 'trks=>'trks'< used=>'used'< pcused.vp=>'pcused.vp'< xx=>'xx'<'
    Say line
    Signal get_out

Get_out:"CAPS=(caps)";"USER_STATE=(status)";Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:#tr=Trace('o')
    Parse Upper VAR parm# parm#

    pre_process=Parse_cons('/P',1,0)

    append=Parse_cons('/A',1,0)

    w_q=Parse_cons('/WQ',1,0)

    Parse VALUE '0 0 0 0 4 .' With q1 q2 q3 q4 vollen .
    hlq=parse_varb('/Q(','?')
    If hlq/='?' Then Do
       hlq=Strip(Translate(hlq,'  ',',)'));q#=hlq
       If Datatype(Word(hlq,1))='CHAR' Then Do
           xx=$CSTRING(hlq,'.',,,,)+1
           Interpret 'Q'xx'=1'
       End
       Else Do While hlq/=''
           Parse VAR hlq xx hlq
           Interpret 'Q'xx'=1'
       End
    End;Else Do;hlq=;q#=0;End

    If q1+q2+q3+q4=0 Then q1=1

    If q#>0 Then listmig=Parse_cons('/M',1,0);Else listmig=0

    vollen=parse_varb('/V(','4')
    If vollen/=4 Then Do
       vollen=Strip(Translate(vollen,' ',')'))
       If Datatype(vollen,'W') & vollen<7 Then Nop;Else vollen=4
    End

    x=Trace(#tr)
    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

Help_me:
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End
    chgchar='&';cname='there'
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_1: Signal Off Syntax

    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    Signal Get_out

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff
Dont_help_me:    /* Move this to the appropriate place */
nl:Parse Arg nl1;"LINE_BEFORE .ZCSR= NOTELINE (nl1)";Return 0
