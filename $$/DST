/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* DS: DASD Space                                                     */
/*                                                                    */
/* This routine displays the spcace utilisation of all online DASD,   */
/* along with some additional usefull information presented in an     */
/* ISPF table. A basic tutorial is available by use of the 'HELP' PF  */
/* key.                                                               */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     DS       - Driver                                              */
/*     DSVTOC   - Issue the 'VTOC' command. (The VTOC command needs   */
/*                to be available. Refer to it's packaging routines.) */
/*     DSEXIT   - Control user exit to provide additional             */
/*                global functionality and invoke DSUSERXT user exit. */
/*     DSUSERXT - User exit to process selections not covered by      */
/*                program or control user exit.                       */
/*                Default copy in system contenation display invalid  */
/*                selection message.                                  */
/*     DSUSERXD - User exit default example. To be copied into        */
/*                system library as 'DSUSEREXT'.                      */
/*     DSTABLET - User table processing template/example.             */
/*                                                                    */
/*   Panels:                                                          */
/*     DASDEDTP - DASD EDT display panel.                             */
/*     DASDSP@M - DASD space primary parameter entry panel.           */
/*     DASDSP@W - Pop up window format of DASDSP@M.                   */
/*     DASDSPTB - DASD space table display panel.                     */
/*     DASDSPTW - Pop up window format of DASDSPTB.                   */
/*     DASDSH10 - DASD space tutorial panel.                          */
/*     DASDSH20 - DASD space tutorial panel.                          */
/*     DASDSH30 - DASD space tutorial panel.                          */
/*     DASDSH50 - DASD space tutorial panel.                          */
/*     DASDSH60 - DASD space tutorial panel.                          */
/*     DASDSH70 - DASD space tutorial panel.                          */
/*     DASDSH80 - DASD space tutorial panel.                          */
/*     DASDSH90 - DASD space tutorial panel.                          */
/*     DASDSH92 - DASD space tutorial panel.                          */
/*     DASDSPUX - DASD space User exit help panel.                    */
/*     DASDSPU2 - DASD space User exit help panel.                    */
/*                                                                    */
/* --> ISRUDLP  - Customised version of IBM supplied panels to permit */
/* --> ISRUDSL0     bypassing of ISPF 3.4 panel for entry of VOLSER.  */
/*                                                                    */
/*   Source:                                                          */
/*     DASDSPCE - DASD free space program.                            */
/*                                                                    */
/*   LoadMOD:                                                         */
/*     DASDSPCE - Self explanitory.                                   */
/*                                                                    */
/*--------------------------------------------------------------------*/
DS:ds_ver='2.02'
Trace r
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

init:
    Parse Upper ARG parm1,parm2,parm3
    If parm2='' Then Do
        Parse Upper VAR parm# parm1 parm2 parm3
        If parm2='' Then Parse Upper VAR parm# parm1 ',' parm2 ',' parm3
    End
    hlq=$alkhlq()

    zedsmsg=
    If parm1="?" Then Do
        x=Helpdrvr('HELPDRVR=dsdh');Signal ext1
    End

    #tr=Trace('o')
/*  Call $alklibd('IN')                                               */

    dasdspcw='N';pvolser ='*'
    mpanel='DASDSP@M';tpanel='DASDSPTB'

/*--------------------------------------------------------------------*/
/* Prompt for DASD parameter if none supplied on invocation           */
/*--------------------------------------------------------------------*/
scr1:
    IF parm1/='' Then Do
        pvolser=parm1
        len=Index(pvolser,'*')
        If len>1 Then pvolser=Substr(pvolser,1,len-1)
        If pvolser="ALL" Then pvolser="*"
    End
    Else Do
        "DISPLAY PANEL(&MPANEL)"
        IF rc/=0 Then Exit
    End

    If pvolser = "/EDT" Then Do
       "SELECT PGM(DASDEDTP)"
        parm1=;volser='*'
        Signal scr1
    End

    Call constant_vars
    Call variable_vars

    dstable='DS'Time('s');table=dstable
    Call build_table
    If Wordpos(parm2,'RETURNIT /R')>0 Then Do
        Address ISPEXEC "VPUT (dstable) SHARED"
        Parse SOURCE . op_mode .
        If op_mode='FUNCTION' Then Return table;Else Exit 0
    End

    "VGET (zscrmaxd)"
    Numeric digits(15)

    Call build_field

scr2:
    dispstat = owhite'Row' tabptr+1 'of' rownum
    headline = SUBSTR(oyellow"Available space on on-line DASD"||,
               ogreen||Strip(SPFPARM)||,
               oyellow||Copies('-',35),1,79-Length(dispstat)) ||,
               dispstat

    "DISPLAY PANEL(&PANEL) CURSOR(&CSR) CSRPOS(&CSRP)"
    If rc/=0 Then Signal ext1
    If zcmd="?" Then Do
        x=Helpdrvr('HELPDRVR=dsdh');Signal scr2
    End
    csr=;csrp=

    Parse VAR zcmd cmd parm1 parm2 parm3 .

    If cmd='TRACE' Then Do
        If parm1='OFF'     Then Trace o
        Else If parm1='ON' Then Trace r
        Else If Index('NO',#tr)>0 Then #tr=Trace('R');Else #tr=Trace('O')
        #tr=Trace()
        Signal scr2
    End

/*--------------------------------------------------------------------*/
/* Test for scrolling                                                 */
/*--------------------------------------------------------------------*/
    "VGET (zscrolla zscrolln zverb)"
    If zverb  = 'UP' | zverb = 'DOWN' Then Do
        Call scroll_data_ud
        Call scroll_table
        Signal bld2
    End
    If zverb  = 'LEFT' | zverb = 'RIGHT' Then Do
        Call scroll_data_lr
        If result = 0 Then Signal bld2
        Else               Signal scr2
    End

/*--------------------------------------------------------------------*/
/* Test for command entry                                             */
/*--------------------------------------------------------------------*/
    If cmd = locatec Then Do
        "TBVCLEAR &TABLE"
        "TBTOP &TABLE"
        Parse VAR ap xx ',' .
        aster = Index(parm1,'*')
        If aster > 1 Then parm1 = Substr(parm1,1,aster-1)
        If xx = 'UCB#' Then parmx = x2c(Substr(parm1,1,4,'0'))
        Else                parmx = parm1
        data = xx " = parmx"
        Interpret data
        "TBSARG &TABLE NAMECOND(&AP)"
        "TBSCAN &TABLE"
        data = "yy = Index("xx",parmx)"
        Interpret data
        zedsmsg = ''
        If yy > 0 Then Do
            csr  = 'DA1'
            csrp = 2
            "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
            zedlmsg = "Locate field '"parm1"' found."
        End
        Else Do
            "TBSKIP &TABLE NUMBER(-2) POSITION(TABPTR)"
            zedlmsg = "Locate field '"parm1"' NOT found."
        End
        "SETMSG MSG(ISRZ001)"
        scrolln  = 0
        Signal bld2
    End

    If cmd = sortc Then Do
        "TBSORT &TABLE FIELDS(&SP)"
        tabptr  = 0
        scrolln = 0
        Signal bld2
    End

    If Substr(cmd,1,1) = exitind Then Do
        Call call_exit
        Signal scr2
    End

/*--------------------------------------------------------------------*/
/* This is the logic for processing selections. It also caters for    */
/* eXclusion of lines from the table.                                 */
/*--------------------------------------------------------------------*/
    changed = Index(da1,altered)
    Do While changed > 0
        scrolln  = 0
        "TBVCLEAR &TABLE"
        "TBTOP &TABLE"
        vol = Substr(da1,changed+4,6)
        "TBSARG &TABLE NAMECOND(VOL,EQ)"
        "TBSCAN &TABLE"
        sel = Translate(Substr(da1,changed+1,2),' ','_')
        If sel = 'X' Then Do
            da1 = Substr(da1,1,changed-1) ||,
                  Substr(da1,changed+(ll+1))
            "TBDELETE &TABLE"
            "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
            rownum = rownum - 1
        End
        Else Do
            Call call_exit
            changed = changed + 1
        End
        "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
        changed = Index(da1,altered,changed)
        If changed = 0 Then Signal bld2
    End

    If cmd /= '' Then pvolser = cmd
    Call build_table

/*--------------------------------------------------------------------*/
/* Rebuild screen                                                     */
/*--------------------------------------------------------------------*/
bld2:
    Call build_field
    Signal scr2

ext1:
   "TBEND &TABLE"
/*  Call $alklibd('OUT')                                              */
    Exit

/*--------------------------------------------------------------------*/
/* This section builds the display field 'DA1' from the table from    */
/* the NEXT row to that poinetd to by variable TABPTR. This allows    */
/* for TBTOP (which is row 0).                                        */
/*--------------------------------------------------------------------*/
build_field:
    If fpcb1 = '' | fpcb1 = 'FPCB1' Then Do
        fpcb1 = 100                         /* Free/Total % 1st per   */
        fpcb2 = 30                          /* Free/Total % 2nd per   */
        fpcb3 = 10                          /* Free/Total % 3rd per   */
        lpcb1 = 100                         /* Largest/free % 1st per */
        lpcb2 = 50                          /* Largest/free % 2nd per */
        lpcb3 = 10                          /* Largest/free % 3rd per */
        nexb1 = 100                         /* Free over extt 1st per */
        nexb2 = 20                          /* Free over extt 2nd per */
        nexb3 = 10                          /* Free over extt 3rd per */
        hl4c3  = ored
        hl4c2  = oyellow
        hl4c1  = ogreen
        hl41c3 = ored
        hl41c2 = ored
        hl41c1 = oyellow
        hl5c3  = ored
        hl5c2  = oyellow
        hl5c1  = ogreen
    End
    Trace Off

    da1=
    Do zscrmaxd
        "TBSKIP &TABLE"
        If rc/=0 Then Do
            da1 = da1 || Substr(oblue||ztdmark,1,ll+1)
            Leave
        End
/********* \|/ ********* Customise here ********* \|/ *****************/
        xx = Index(string1,dt)              /* Colourise device type s*/
        If xx > 0 Then Do
            xx = SUBSTR(string1,xx,string1l)
    /*      Parse VAR xx . cyl hl6 hl2 .                              */
    /*      hl3 = hl2                                                 */
            Parse VAR xx . cyl hl6 .
            hl2 = hl6
            hl3 = hl6
            If fs /= '' Then Do
                Parse VAR fs #cyl '/' #trk .
                Parse VAR le @cyl '/' @trk .
                free = #cyl*15 + #trk
                frel = @cyl*15 + @trk
                pc = 100*(free)/(cyl*15)
                If free > 0 Then pl = 100*(frel/free)
                Else             pl = 0
                Select
                    When (pc < fpcb3) Then hl4 = hl4c3
                    When (pc < fpcb2) Then hl4 = hl4c3
                    Otherwise              hl4 = hl4c1
                End
                Select
                    When (pl < lpcb3) Then hl41 = hl41c3
                    When (pl < lpcb2) Then Do
                        If hl4 = hl4c1   Then hl41 = hl41c1
                        If hl4 = hl4c2   Then hl41 = hl41c2
                        If hl4 = hl4c3   Then hl41 = hl41c3
                    End
                    Otherwise hl41 = hl4
                End
                If ex = 0 Then cpe = 0
                Else           cpe = #cyl/ex
                Select
                    When (cpe < nexb3) Then hl5 = hl5c3
                    When (cpe < nexb2) Then hl5 = hl5c2
                    Otherwise               hl5 = hl5c1
                End
            End
            Else Do
                hl41 = ored
                hl4  = ored
                fs   = '** Error **'
                hl5  = ored
            End
            Select
                When (ma = 'PUBLIC')  Then hl7 = ogreen
                When (ma = 'STORAGE') Then hl7 = owhite
                Otherwise                  HL7 = oblue
            End

            xx = Index(string2,ds)          /* Colourise device status*/
            xx = SUBSTR(string2,xx+1,string2l)
            Parse VAR xx . hl8 .
        End
        Else Do
            hl2  = ored
            hl3  = ored
            hl4  = ored
            hl41 = ored
            hl5  = ored
            hl6  = ored
            hl7  = ored
            hl8  = ored
            vol  = ' '
            as   = ' '
            ma   = ' '
            ds   = ' '
        End

        Parse VAR fs fs1 '/' fs2
        If Substr(fs1,1,1) = '*' Then Do
            fs1 = 0
            fs2 = 0
        End
        If fs1 /= '' Then Do
            fs1 = fs1 +0
            fs2 = fs2 +0
        End
        Parse VAR le le1 '/' le2
        If le1 /= '' Then Do
            le1 = le1 +0
            le2 = le2 +0
        End
        If ex /= '' Then ex1 = ex  +0
        Else             ex1 = ''
        fs1 = Right(fs1,5)
        fs2 = Right(fs2,4)
        le1 = Right(le1,5)
        le2 = Right(le2,3)
        ex1 = Right(ex1,4)
        dax = hl1     || '  '                          ||,
              hl2     || Substr(vol,1,6)               ||,
              hl3     || ucb                           ||,
              oblue   || Left(smsfl,2)                 ||,
              oblue   || Substr(ix,1,2)                ||,
              hl4     || fs1 fs2                       ||,
              hl5     || ex1                           ||,
              hl41    || le1 le2                       ||,
              hl6     || Substr(dt,1,7)                ||,
              oblue   || Substr(as,1,7)                ||,
              hl7     || Substr(ma,1,9)                ||,
              hl8     || ds

/********* /|\ ********* Customise here ********* /|\ *****************/
        da1 = da1 || Substr(dax,1,ll+1)
    End

    If Verify(#tr,'NO')>0 Then x=Trace('r')
    Return 0

/*--------------------------------------------------------------------*/
/* This section re-positions the table to the appropriate row         */
/* according to the scroll parameters returned from ISPF.             */
/*--------------------------------------------------------------------*/
scroll_table:
    If tabptr + (qual*scrolln) > rownum Then tabptr = rownum
    Else tabptr = tabptr + (qual*scrolln)
    If tabptr < 0 Then tabptr = 0
   "TBTOP &TABLE"
   "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen to selected line after an UP/DOWN command.       */
/*--------------------------------------------------------------------*/
scroll_data_ud:
    If zscrolla = 'MAX' Then Do
        If zverb  = 'UP' Then tabptr  = 0
        Else                  tabptr  = rownum - (zscrolln-1)
        scrolln = 0
    End
    Else Do
        scrolln  = zscrolln
    End
    If zverb  = 'UP' Then qual = -1
    Else                  qual = +1

    Return 0

scroll_data_lr:
    zedlmsg = "'"zverb"' is not active."
    "SETMSG MSG(ISRZ001)"

    Return 4

/*--------------------------------------------------------------------*/
/* To following are constant variables and should not change.         */
/*--------------------------------------------------------------------*/
constant_vars:
    ztdmark = Centre(' Rsend ',79,'*')
    #colors = 7                             /* Number of colors       */

    reverse = X2C('10')                     /* Reverse mask           */
    uscore  = X2C('20')                     /* Underscore mask        */
    blink   = X2C('30')                     /* Blink Mask. Note - this*/
                                            /* may not work on some   */
                                            /* terminals...           */

    ired    = X2C('01')                     /* Input RED etc...       */
    iblue   = X2C('02')
    iyellow = X2C('03')
    igreen  = X2C('04')
    iturq   = X2C('05')
    ipink   = X2C('06')
    iwhite  = X2C('07')

    ored    = D2C(#colors+C2D(ired))        /* Output RED etc...      */
    oblue   = D2C(#colors+C2D(iblue))
    oyellow = D2C(#colors+C2D(iyellow))
    ogreen  = D2C(#colors+C2D(igreen))
    oturq   = D2C(#colors+C2D(iturq))
    opink   = D2C(#colors+C2D(ipink))
    owhite  = D2C(#colors+C2D(iwhite))

    altered = X2C('AA')                     /* Altered field indicator*/

    locatec = '/L'                          /* Locate command         */
    sortc   = '/SORT'                       /* Sort command           */
    exitind = '/'                           /* Exit required indicator*/

    Return 0

/*========================= Variable =================================*/
/********* \|/ ********* Customise here ********* \|/ *****************/

/*--------------------------------------------------------------------*/
/* To following are variables dependant on the application.           */
/*--------------------------------------------------------------------*/
variable_vars:
/*              Dev typ #cyl  Dt color        Vol color               */
/*              ------- ----  --------        ---------               */
    string1  = "Other   0000 "ored    ||" "|| ogreen ||" "||,
               "3380/S  0885 "opink   ||" "|| oturq  ||" "||,
               "3380/D  1770 "opink   ||" "|| oturq  ||" "||,
               "3380/T  2655 "opink   ||" "|| oturq  ||" "||,
               "3390/S  1113 "oblue   ||" "|| oturq  ||" "||,
               "3390/D  2226 "owhite  ||" "|| oturq  ||" "||,
               "3390/T  3339 "ogreen  ||" "|| oturq  ||" "||,
               "3390/5  5565 "oyellow ||" "|| oturq  ||" "||,
               "3390/9 10017 "oyellow ||" "|| oturq  ||" "
    string1l = Length("3390/T  3339 "oturq   ||" "|| oturq  ||" ")
    oredr    = Bitor(ored,reverse)
    oyellowb = Bitor(oyellow,blink)
    string2  = ".Other  "ored    ||" "||,
               ".RESRVD "oredr   ||" "||,
               ".¬READY "oredr   ||" "||,
               ".PAGING "opink   ||" "||,
               ".ONLINE "oblue   ||" "||,
               ".SYSRES "oyellow ||" "||,
               ".ALLOC  "ogreen  ||" "
    string2l = Length(".Other  "oblue   ||" ")

    mainhead = oyellow"Available space on on-line DASD"||,
               ogreen||Strip(SPFPARM)||,
               oyellow||Copies('-',35)
    subhead1 = oturq'               S      Free spce # of Lgst ext ',
               'Device  Alloc     Mount   Device'
    oturqu   = Bitor(oturq,uscore)
    subhead2 = oturqu'S',
               oturqu'Volser'       ||,
               oturqu'UCB '         ||,
               oturqu'M'            ||,
               oturqu'VTOC'         ||,
               oturqu'Cyls/Trks'    ||,
               oturqu'Exts'         ||,
               oturqu'Cyls/Trks'    ||,
               oturqu' Type  '      ||,
               oturqu'Status '      ||,
               oturqu'Attribute'    ||,
               oturqu'Status'

    hl1     = Bitor(ired,uscore)
    hl2     = oblue
    hl3     = oblue
    hl4     = oblue
    hl5     = oblue
    hl6     = oblue
    hl8     = oblue
    ll      = 79                            /* Line length (ex attrib)*/
    qual    = 1
    scrolln = 0
    panel   = 'DASDSPDY'
    sp      = 'VOL,C,A'                     /* Sort Parameter         */
    ap      = 'VOL,GE'                      /* scan Argument parameter*/
    csr     = ''                            /* Cursor field           */
    csrp    = ''                            /* Cursor position        */

    Return 0

/*--------------------------------------------------------------------*/
/* This section calls the common exit DSEXIT. For further details,    */
/* refer to tutorial or doco in DSEXIT.                               */
/*--------------------------------------------------------------------*/
call_exit:
    "VPUT (ZCMD SEL DSTABLE) SHARED"
    "SELECT CMD(%DSEXIT)"

    Return 0

/*--------------------------------------------------------------------*/
/* This section calls the program to build the table. Variable KEEPTB */
/* is set to Yes to indicate return of table to this routine without  */
/* program processing.                                                */
/*--------------------------------------------------------------------*/
build_table:
   "TBEND &TABLE"
    keeptb="Y"
    "VPUT (KEEPTB dasdspcw DSTABLE) SHARED"
    "SELECT PGM(DASDSPCE) PARM("pvolser")"
    "VGET (SPFPARM) SHARED"

/*  Call doctor_table                                                 */

    "TBTOP &TABLE"
    "TBQUERY &TABLE ROWNUM(rownum) POSITION(tabptr)"
    rownum=rownum+0
    Return 0

/*--------------------------------------------------------------------*/
/* This section modifies the table so that various option and color   */
/* combinations that do not often happen, can be tested.              */
/*--------------------------------------------------------------------*/
doctor_table:
    "TBTOP &TABLE"
    Do i=1 To 99999
        "TBSKIP &TABLE"
        If rc /= 0 Then Leave
        dt = Substr(string1,(i//7)*string1l+1,string1l)
        Parse VAR dt dt .
        If dt = 'Other' Then Do
            fs = ' '
            dt = '3270/S'
        End
        "TBMOD &TABLE"
    End

    Return 0

/********* /|\ ********* Customise here ********* /|\ *****************/

