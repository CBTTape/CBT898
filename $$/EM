/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* EM: Edit Member.                                                   */
/*                                                                    */
/* This routine is designed to be issued from the command line of a   */
/* PDS(member) being browsed.                                         */
/* For further details invoke it with a "?" parameter or scroll to    */
/* the bottom of this member.                                         */
/*                                                                    */
/*--------------------------------------------------------------------*/
em_ver='2.02'
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    parm@=parm#
    If parm# /= '' Then Signal byp1
    "ISREDIT MACRO (parm#)";IF rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini0:
    Parse Upper VAR parm# parm# 1 parm1 . 1 p12 +2;Parse Source . . xcmd .
    If Wordpos(parm1,'? /? HELP BR-??')>0 | p12='/H' Then Do
        If ima_macro Then Signal Help_me
        If parm1/='BR-??' | Sysvar(SYSISPF)/='ACTIVE' Then Do
            Parse SOURCE . . xcmd .
            Address TSO "%BR" xcmd "BR-??"
            Exit
        End
        Signal Help_me
    End


ini1:
/*--------------------------------------------------------------------*/
/* Test if self invoked as a macro.                                   */
/*--------------------------------------------------------------------*/
    "VGET (EMMACRO) SHARED"
    If emmacro='TEMPEDIT' Then Do
        emmacro=;"VPUT (EMMACRO) SHARED"
        Call em_macro1;Return 0
    End

    If parm#/='' Then Call parse_parms
    Else Do
        nemmacro=;nemparm=;editor='VIEW'
    End

ini2:
    hlq=Sysvar(Syspref);If hlq='' Then hlq=Userid()
    "VGET (zscreeni)";screeni=zscreeni
    #msg=Msg('Off');dataset=
    Do i=1 To 50
        xx=Strip(Word(screeni,i),,"'")
        If Index(xx,'.')=0 Then xx=hlq'.'xx
        Parse Var xx yy '('
        If Sysdsn("'"yy"'")/='OK' Then Iterate
        dataset=xx;Leave
    End
    If dataset='' Then Do
        gc009="Could not extract a valid dataset name from screen."
        Signal ext1
    End
    If Index(dataset,'(')>0 & Index(dataset,')')=0 Then Do
        gc009="Incomplete dataset(member) combination in headline."
        Signal ext1
    End

/*--------------------------------------------------------------------*/
/* Create a temporary copy if requested                               */
/*--------------------------------------------------------------------*/
    macro=;volume=
    If tempf="Y" Then Do
        parm1=
        ztempf=$ztempf();ztempdd='$Z'Time('s')
        x=$copymem(dataset,ztempf,'NOTRACE')
        If x/=0 Then Do
            gc009="Copy to a temporary dataset failed."
            Signal err1
        End
        Address TSO "ALLOC DD("ztempdd") DS('"ztempf"') SHR REU"
        "LMINIT DATAID(DATA1) DDNAME("ztempdd")"
        If nemmacro='' Then Do
            macro='MACRO('xcmd')';emmacro='TEMPEDIT'
            "VPUT (EMMACRO EMDSN) SHARED"
            "&EDITOR DATAID(&DATA1) MACRO("xcmd")"
        End
        Else "&EDITOR DATAID(&DATA1) &NEMMACRO &NEMPARM"
        "LMFREE DATAID(&DATA1)"
        Address TSO "FREE DD("ztempdd")"
        x=$ztempf(ztempf,'/D')
        Exit
    End

/*--------------------------------------------------------------------*/
/* Edit the original or copy of it                                    */
/*--------------------------------------------------------------------*/
    Signal ON ERROR NAME err1
    If parm1/='' & sysdsorg='PO' Then Do
        If Index(dataset,'(')>0 Then
            dataset=Substr(dataset,1,Index(dataset,'(')-1)
        dataset=dataset"("Strip(parm1)")"
    End
    "&EDITOR DATASET('&DATASET') &VOLUME &NEMMACRO &NEMPARM"
    Return 0

err1:
    Signal OFF ERROR
    If rc>4 Then "SETMSG MSG(&ZERRMSG)"
    Exit

ext1:
    "SETMSG MSG(GC009)"
    Exit

/*--------------------------------------------------------------------*/
/* Self invoked as macro use to place a cute little note in the       */
/* temporary edit file.                                               */
/*--------------------------------------------------------------------*/
em_macro1:
    Address ISREDIT
    'RESET'
    '(caps)=CAPS';'CAPS=OFF'
    Address ISPEXEC "VGET (EMDSN) SHARED"
    x=nb(Substr('*',1,72,'*'))
    x=nb("*"Centre(" ",70," ")"*")
    x=nb("*"Substr("  Copy of dataset "emdsn".",1,70,' ')"*")
    x=nb("*"Centre(" ",70," ")"*")
    x=nb(Substr('*',1,72,'*'))
    'CAPS=(caps)'
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    #tr1=Trace('o')
    Parse Upper VAR parm# parm#

    notrace=parse_cons('/NOTRACE')
    If notrace='N' Then Do
        trace=parse_cons('TRACE')
        If trace='N' Then trace=parse_cons('/TR',,,3)
    End
    tempf=parse_cons('/TE',,,3)
    editor=parse_cons('/B','BROWSE','?????',2)
    If editor='?????' Then editor=parse_cons('/V','VIEW','?????',2)
    If editor='?????' Then editor=parse_cons('/E','EDIT','VIEW',2)
    If Length(Word(parm#,1))<9 Then Do
        Parse VAR parm# xx yy;nat='ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$'
        If Verify(Substr(xx,1,1),nat)=0 &,
           Verify(Substr(xx,2),nat'0123456789')=0 Then Do
            nemmacro='MACRO('xx')';nemparmv=yy ;nemparm='PARM(nemparmv)'
            parm#=
        End
    End
    Else Do;nemmacro=;nemparm=;End

    If Verify(#tr1,'NO')>0 Then x=Trace('r')
    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Build built in help details                                        */
/*--------------------------------------------------------------------*/
Help_me:

    n_st=mark(2)                            /* Mark Start             */
/*

 Hello &CNAME..

 EM: Edit Member.

 This routine is designed to be issued from the command line of a
 PDS(member) or sequential dataset being browsed.

 It will convert a browse session to an edit/view session.  It can be
 used with the ISPF browser.  The command may be invoked by issuing
 command,
     TSO &XCMD.
 or alternatively placing it into your tailored command table (ISPF
 option 3.9) and invoking it direct (without the TSO prefix).

 If you are browsing a dataset, a view session will be presented
 provided it meets all view criteria. Ie. member not explicitly enqueued
 and is a viewable dataset/member (editable LRECL, NON-VSAM, RECFM=U
 etc..)

 If the member is in use (refer to error messages) you may pass a
 parameter of "/TEmp" to create and edit a copy of the member. This
 temporary copy will be deleted at the end of the edit session.

 Permissable parameters are:
   /Browse- Browse member.  Usually used from a edit/view session when
            you want cols 73-80 displayed on the screen without having
            to scroll right/left.
   /Edit  - Edit member.
   /NOTRACE
          - No tracing to be performed. Any "/TR" parameter detected is
            to be passed on to any potential subsequent edit-macro.
   /TEmp  - Edit after copying into a temporary file.
   /TRace - Trace processing. Used for debugging.
   /View  - View member (default).
   macro  - Any valid edit macro (and associated parameters) to be
            executed on entering the edit/view session.

 Parameters:
   Take care with conflict of permissable parameters and any similar
   parameters to be passed onto the next level edit-macro.
   To overcome this, double up on your required option.
   For example, if a macro to be executed requires a perameter of "/TE",
   to permit &XCMD. from pilfering it and not passing it on use the
   following format:
       &XCMD. /TE macro /TE
   Another twist to this may be the next macro wants an "/E" and for
   some reason you want a view session. Rather than double up on the
   "/E" to force a view session,
       &XCMD. /V macro /TE /E
   For this purpose the "/NOTRACE" is provided so you are not forced
   into a double up and have to bear the overheads of the trace in the
   execution of the "&XCMD." macro. Invoke by, eg.
       &XCMD. /NOTRACE /V macro /TR /TE /T dataset(member)

   The following members are required to package this routine. Those
   marked with the 'o' seperator are optional and only required to
   exploit full functionality:
     REXX:
       &XCMD(8). - Driver. (Includes in-built help panel(s).)
       $ZTEMPF  o Temporary file allocator. Only required if using the
                  "/TEMP" parameter.

*/
    n_en=mark(-2)                           /* Mark End               */

    chgchar='&';cname='there'
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_1: Signal Off Syntax

    today=Date('e')
    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If \Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(substr(line,1,79))
    End
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0

Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff
nb:Parse Arg arg1;'LINE_BEFORE 1=NOTELINE (arg1)';Return 0
