/* ----------------------------- REXX ------------------------------- *
 * Name:      EMAIL                                                   *
 *                                                                    *
 * Function:  Send e-mail(s) to a user(s) via TCP/IP using the SMTP   *
 *            protocol                                                *
 *                                                                    *
 * Syntax:    %EMAIL user@node   option......                         *
 *                                                                    *
 *            where:                                                  *
 *                                                                    *
 *            user@node                                               *
 *              e-mail address of the recipient                       *
 *            or                                                      *
 *            (user@node user2@node ...)                              *
 *            or                                                      *
 *            *list-id*  (not an address but used in the TO           *
 *            tag in the envelope with BCC for addressing.            *
 *            List-id need only start with an *                       *
 *                                                                    *
 *            CC user@node                                            *
 *               or                                                   *
 *            CC (user1@node user2@node ...)                          *
 *              specifies 'carbon copy' recipients                    *
 *              (note the space after CC)                             *
 *                                                                    *
 *            BCC user@node                                           *
 *               or                                                   *
 *            BCC (user1@node user2@node ...)                         *
 *              specifies 'blind carbon copy' recipients              *
 *              (note the space after BCC)                            *
 *              These addresses will NOT be in the message            *
 *              envelope.                                             *
 *                                                                    *
 *            ASA                                                     *
 *              Converts some ASA carriage controls to Form Feed      *
 *                etc. as are used on ASCII printers.                 *
 *              (should only be used for files with ASA               *
 *               carriage control ie. reports)                        *
 *                                                                    *
 *            FILE dataset.to.be.attached or                          *
 *            FILE (dsn1 dsn2 ....)                                   *
 *              a sequential dataset to be sent as an attachment      *
 *                                                                    *
 *            FILEDD ddname or                                        *
 *            FILEDD (ddn1 ddn2 ...)                                  *
 *              a ddname(s) used in stead of or in addition to        *
 *              the FILE keyword to reference datasets via            *
 *              a JCL //xx DD statement.                              *
 *                                                                    *
 *            FROM return.mail.address@node                           *
 *              specifies the return mail address                     *
 *                                                                    *
 *            MSGDS data-set-name                                     *
 *              specifies the data set that contains the              *
 *              message                                               *
 *              If the data-set-name is '*' and this is under         *
 *              ISPF then the ISPF Editor will be invoked to          *
 *              create the message text.                              *
 *                                                                    *
 *            MSGDD ddname                                            *
 *              specifies the DDname that contains the                *
 *              message                                               *
 *                                                                    *
 *            NOMSG                                                   *
 *              indicates that no message is being sent,              *
 *              only a file transmit is to occur.                     *
 *                                                                    *
 *            NOCONFIRM                                               *
 *              indicates that no 'confirmation' message will         *
 *              be generated out of this command.                     *
 *                                                                    *
 *            SUBJECT 'subject for message'                           *
 *              specifies the subject for the message                 *
 * ------------------------------------------------------------------ */

/* ------------------------------------------------------------------ *
 *                                                                    *
 * History:                                                           *
 *            07/05/99:  Add DSN from DD extract for use with         *
 *                       FILEDD support                               *
 *            06/24/99:  Changed file attachments to use a '.doc'     *
 *                       suffix to allow MS-WORD to open the document *
 *                       by default. This will allow anydocuments     *
 *                       with a new-page to be recognisedwhen used    *
 *                       with the ASA option                          *
 *            06/01/99:  Add ANZ 'center' support                     *
 *            01/18/99:  Add edit macro if MSGDS * used               *
 *            01/12/99:  Add MSGDS * support                          *
 *            01/11/99:  Add BCC keyword and support *list* in TO     *
 *            01/07/99:  Add ASA keyword                              *
 *            01/06/99:  add record count to confirm msg              *
 *                       fix free of msgdd (don't free)               *
 *            01/04/99:  move SUBJECT parse first fix CC in subj.     *
 *                       add FILEDD support                           *
 *            12/24/98:  test rc for ALLOC and more comments          *
 *            12/23/98:  make multiple files work                     *
 *            12/22/98:  add multiple address support and cc          *
 *            12/22/98:  clean up and add more doc                    *
 *            12/21/98:  multiple fixes                               *
 *            12/18/98:  now make it work                             *
 *            12/11/98:  add FILE option                              *
 *            12/10/98:  change to sysout class a (from b)            *
 *            10/14/98:  add From keyword                             *
 *            06/26/98:  add socket routine for domain                *
 *            11/03/97:  clean up for sharing                         *
 *            06/14/93:  support for lrecl>80                         *
 *            04/15/93:  redone for EMAIL                             *
 *            09/21/90:  creation of exec as xmitvm                   *
 *                                                                    *
 * ------------------------------------------------------------------ */

ver = "1.33"

parse arg opt
if left(opt,1) = "(" then
   parse arg "(" address ")" options
else
   parse arg address options

msgid = sysvar(sysicmd)":"

if address = "?" then signal exit16
if length(address) = 0 then signal exit16

/*----------------------*
 *  Time-Zone Setup     *
 *----------------------*/
zone   = "GMT -10"


/*--ANZ---ANZ---ANZ---ANZ---ANZ---ANZ---ANZ---ANZ---ANZ--*
 *                                                       *
 * The following code allows the same code to run on     *
 * multiple nodes. Where, the variable Center is used    *
 * to define the node where the SMTP server runs.        *
 * TCPSMTP is the started task name for the SMTP server. *
 *                                                       *
 *------------------------------------------------------*/

sys_id = mvsvar('SYMDEF',SYSCLONE)
center = mvsvar('SYMDEF',SYSNAME);smtp   = 'TCPSMTP'
/*
if verify(sys_id,'DFGHLSYZ')=0 then do
  center = 'ANZ'sys_id
  smtp   = 'TCPSMTP'
  end
else do
  say 'EMAIL not setup for ANZ'sys_id', exiting.'
  exit
  end
*/


/* -------------------------- *
 * set up defaults            *
 * -------------------------- */
parse value "" with dsn ddn subject nomsg confirm header. file ,
                    from null mult cc filedd msgdd asa bcc
workdd = "XMDD"random()
indd   = "XMDD"random()
eddd   = "XMDD"random()

smtp_address = center"."smtp
Say smtp_address

/* -------------------------- *
 * Get current IP Domain      *
 * -------------------------- */
res= Socket('Initialize','ANYNAME')
host=      Socket('GetHostId')
name=      Socket('GetHostname')
domain = word(Socket('GetDomainName'),2)
res= Socket('Terminate')

/* -------------------------- *
 * Test validity of the       *
 * provided address           *
 * -------------------------- */
if words(address) > 1 then
   mult = "on"

if left(address,1) <> "*" then
   do
   if mult <> "on" then do
      call test_address address
      end
   else do i = 1 to words(address)
           call test_address word(address,i)
           end
   end

/* ----------------------------- *
 * get uppercase copy of options *
 * ----------------------------- */
upper_options = options
upper upper_options

/* ----------------------------------------------------- *
 * Now process the keywords                              *
 * ----------------------------------------------------- */

/* -------------------------- *
 * SUBJECT Keyword first.     *
 * -------------------------- */
if wordpos("SUBJECT",upper_options) > 0 then do
   pw = wordpos("SUBJECT",upper_options)
   pc = wordindex(upper_options,pw)
   /* make the word subject upper case */
   options = overlay("SUBJECT",options,pc,7)
   parse value options with x "SUBJECT" "'" subject "'" more
   /* now remove subject from options */
   lq = pos("'",options,pc)
   options = overlay(" ",options,lq,1)
   rq = pos("'",options,pc)
   options = delstr(options,pc,rq-pc+1)
   upper_options = delstr(upper_options,pc,rq-pc+1)
   end

/* -------------------------- *
 * CC Keyword.                *
 * 'Carbon Copy' recipients   *
 *  CC id@node  or            *
 *  CC (id1@node id2@node ..) *
 * -------------------------- */
if wordpos("CC",upper_options) > 0 then do
   pw = wordpos("CC",upper_options)
   pc = wordindex(upper_options,pw)
   /* make the word CC upper case */
   options = overlay("CC",options,pc,2)
   if pos("(",word(options,pw+1)) > 0 then do
      parse value options with x "CC" "(" CC ")" more
      /* now remove CC from options */
      lq = pos("(",options,pc)
      options = overlay(" ",options,lq,1)
      rq = pos(")",options,pc)
      options = delstr(options,pc,rq-pc+1)
      upper_options = delstr(upper_options,pc,rq-pc+1)
      end
   else do
        cc = word(options,pw+1)
        options = delword(options,pw,2)
        upper_options = delword(upper_options,pw,2)
        end
   end

/* -------------------------- *
 * BCC Keyword.               *
 * 'Blind Carbon Copy'        *
 *  BCC id@node or            *
 *  BCC (id1@node id2@node ..) *
 * -------------------------- */
if wordpos("BCC",upper_options) > 0 then do
   pw = wordpos("BCC",upper_options)
   pc = wordindex(upper_options,pw)
   /* make the word BCC upper case */
   options = overlay("BCC",options,pc,3)
   if pos("(",word(options,pw+1)) > 0 then do
      parse value options with x "BCC" "(" BCC ")" more
      /* now remove BCC from options */
      lq = pos("(",options,pc)
      options = overlay(" ",options,lq,1)
      rq = pos(")",options,pc)
      options = delstr(options,pc,rq-pc+1)
      upper_options = delstr(upper_options,pc,rq-pc+1)
      end
   else do
        BCC = word(options,pw+1)
        options = delword(options,pw,2)
        upper_options = delword(upper_options,pw,2)
        end
   end

/* -------------------------- *
 * MSGDS Keyword.             *
 * Dataset containing the     *
 * message to be sent.        *
 * -------------------------- */
if wordpos("MSGDS",upper_options) > 0 then do
   pw = wordpos("MSGDS",upper_options)
   if ddn = null then do
                    dsn = word(upper_options,pw+1)
                    upper_options = delword(upper_options,pw,2)
                    options = delword(options,pw,2)
                    end
               else do
               say msgid "Both MSGDS and MSGDD were specified,"
               say msgid "please correct your options and try again."
               exit 8
               end
   end

/* -------------------------- *
 * MSGDD Keyword.             *
 * DDname for message text    *
 * to be sent.                *
 * -------------------------- */
if wordpos("MSGDD",upper_options) > 0 then do
   pw = wordpos("MSGDD",upper_options)
   if dsn = null then do
                    ddn = word(upper_options,pw+1)
                    upper_options = delword(upper_options,pw,2)
                    options = delword(options,pw,2)
                    msgdd = 1
                    end
               else do
               say msgid "Both MSGDS and MSGDD were specified,"
               say msgid "please correct your options and try again."
               exit 8
               end
   end

/* -------------------------- *
 * NOMSG Keyword.             *
 * Indicates that no MSGDS    *
 * or MSGDD is specified.     *
 * -------------------------- */
if wordpos("NOMSG",upper_options) > 0 then do
   pw = wordpos("NOMSG",upper_options)
   upper_options = delword(upper_options,pw,1)
   options = delword(options,pw,1)
   nomsg = "off"
   end

/* -------------------------- *
 * NOCONFIRM Keyword.         *
 * Turn off the confirmation  *
 * message from this exec.    *
 * -------------------------- */
if wordpos("NOCONFIRM",upper_options) > 0 then do
   pw = wordpos("NOCONFIRM",upper_options)
   upper_options = delword(upper_options,pw,1)
   options = delword(options,pw,1)
   confirm = "off"
   end

/* -------------------------- *
 * ASA Keyword.               *
 * (affects attachments only  *
 * -------------------------- */
if wordpos("ASA",upper_options) > 0 then do
   pw = wordpos("ASA",upper_options)
   upper_options = delword(upper_options,pw,1)
   options = delword(options,pw,1)
   asa = "on"
   ff     = x2c('0c')   /* Form Feed */
   lf     = x2c('0a')   /* Line Feed */
   end

/* -------------------------- *
 * FROM Keyword.              *
 * Optional reply e-mail      *
 * address.                   *
 * -------------------------- */
if wordpos("FROM",upper_options) > 0 then do
   pw = wordpos("FROM",upper_options)
   From = word(options,pw+1)
   upper_options = delword(upper_options,pw,2)
   options = delword(options,pw,2)
   end

/* -------------------------- *
 * FILE Keyword.              *
 * Dsname for file to be      *
 * sent as an attachment.     *
 * (Text Only)                *
 * -------------------------- */
if wordpos("FILE",upper_options) > 0 then do
   pw = wordpos("FILE",upper_options)
   options = strip(delword(options,pw,1))
   upper_options = strip(delword(upper_options,pw,1))
   if left(word(options,pw),1) <> "(" then do
      fdsn = word(options,pw)
      options = strip(delword(options,pw,1))
      upper_options = strip(delword(upper_options,pw,1))
      file = fdsn
      end
    else do forever
        lp = 1
         fdsn = word(options,pw)
         options = strip(delword(options,pw,1))
         upper_options = strip(delword(upper_options,pw,1))
         if right(fdsn,1) = ")" then do
            if right(fdsn,2) = "))" then do
               fdsn = substr(fdsn,1,length(fdsn)-1)
               lp = null
               end
            if right(fdsn,3) = ")')" then do
               fdsn = substr(fdsn,1,length(fdsn)-1)
               lp = null
               end
            end
         if left(fdsn,1) = "(" then
            fdsn = substr(fdsn,2,length(fdsn)-1)
         file = strip(file fdsn)
         if length(options) = 0 then leave
         end
      if lp = 1 then
            file = substr(file,1,length(file)-1)
 do i = 1 to words(file)
    if "OK" <> sysdsn(word(file,i)) then do
        ng = 1
        say msgid "DSN:" word(file,i) '-' sysdsn(word(file,i))
        end
    if ng = 1 then do
       Say msgid "Ending because of invalid dsnames."
       exit 16
       end
    end
 end

/* -------------------------- *
 * FILEDD Keyword.            *
 * -------------------------- */
if wordpos("FILEDD",upper_options) > 0 then do
   pw = wordpos("FILEDD",upper_options)
   pc = wordindex(upper_options,pw)
   /* make the word FILEDD upper case */
   options = overlay("FILEDD",options,pc,6)
   if pos("(",word(options,pw+1)) > 0 then do
      parse value options with x "FILEDD" "(" FILEDD ")" more
      /* now remove FILEDD from options */
      lq = pos("(",options,pc)
      options = overlay(" ",options,lq,1)
      rq = pos(")",options,pc)
      options = delstr(options,pc,rq-pc+1)
      upper_options = delstr(upper_options,pc,rq-pc+1)
      end
   else do
        FILEDD = word(options,pw+1)
        options = delword(options,pw,2)
        upper_options = delword(upper_options,pw,2)
        end
   end

/* -------------------------- *
 * Test for MSGDS or MSGDD    *
 * unless nomsg specified.    *
 * -------------------------- */
if nomsg = null then do
if length(dsn) + length(ddn) = 0 then
   do
   say msgid "Neither the MSGDS or MSGDD were specified."
   say msgid "Command terminating - try again."
   signal exit16
   end

/* ----------------------------------------------------- *
 * If MSGDS is * then check for ISPF environment and     *
 * create dsn....                                        *
 * ----------------------------------------------------- */
 if dsn = "*" then do
    if sysvar('sysispf') <> "ACTIVE" then do
       say msgid "MSGDS of * specified but ISPF is not active."
       say msgid "Try again when under ISPF."
       exit 16
       end
    else do
         "Alloc f("eddd") spa(15,15) tr dsorg(ps)" ,
               "recfm(f b) lrecl(80) new reuse blksize(0)"
         "Alloc f("eddd"m) spa(1,1) tr dir(1)" ,
               "dsname("eddd")" ,
               "recfm(f b) lrecl(80) new reuse blksize(0)"
         "Alloc f("eddd"x) shr" ,
               "dsname("eddd"(EMAILm))"
         em.1 = "/* rexx */"
         em.2 = "Address ISREdit"
         em.3 = "Macro"
         em.4 = "Caps Off"
         em.5 = "Number Off"
         em.6 = "Reset"
         em.7 = "TEnter .zl"
         "Execio * diskw" eddd"x (finis stem em."
         "Free f("eddd"x)"
         "Altlib Activate Application(Exec) File("eddd"m)"
         Address ISPExec
         "LMInit dataid(xmited)   ddname("eddd")"
         "Edit   dataid("xmited") profile(EMAIL) macro(EMAILm)"
         e_rc = rc
         ddn  = eddd
         indd = ddn
         Address TSO
         "Altlib DeActivate Application(Exec)"
         "Free f("eddd"m) Delete"
         if e_rc > 3 then do
            "Free f("eddd")"
            say msgid "Ending per your request."
            exit e_rc
            end
         end
    end

/* -------------------------- *
 * If nomsg not specified     *
 * process MSGDS or MSGDD     *
 * -------------------------- */

   if dsn = null then do
      indd = ddn
      call listdsi(ddn "FILE")
      dsn = sysdsname
      end

   if ddn = null then
      "ALLOC F("indd") DS("dsn") SHR"

   "EXECIO * DISKR" indd "(FINIS STEM in."
   if msgdd = null then "FREE F("indd")"
   if msgds = "*" then
      Address ISPExec "LMFree dataid("xmited")"
   end

/* ----------------------------------------------------- *
 * Test if to=*list-id* then must have cc or bcc         *
 * ----------------------------------------------------- */
   if left(address,1) = "*" then
      if words(cc) + words(bcc) = 0 then do
         say msgid "A *list-id* address must have a CC or" ,
                   "BCC list of addresses."
         say msgid "Process ending."
         signal exit16
         end

/* ------------------- *
 * reset indd          *
 * ------------------- */
indd   = "XMDD"random()

/* ------------------------------------------------------------- *
 * Fix up the header records............                         *
 * ------------------------------------------------------------- */

if from = null then from = sysvar(sysuid)"@"center"."domain

/* -------------------------- *
 * Fix SUBJECT.               *
 * -------------------------- */
if length(subject) = 0 then
   Select
   When file <> null then
        if words(file) = 1 then subject = "File:" file
           else subject = "Multiple Files"
   When nomsg = null then subject = "File:" dsn
   When nomsg = "off" then subject = "Message from" from
   otherwise subject = "Note from" from
   end

/* -------------------------- *
 * Build e-mail header        *
 * -------------------------- */
header.1 = "helo" center
header.2 = "mail from:<"from">"
h = 2
if left(address,1) <> "*" then
   do i = 1 to words(address)
      h = h + 1
      header.h = "rcpt to:<"word(address,i)">"
      end
if length(cc) > 0 then
do i = 1 to words(cc)
   h = h + 1
   header.h = "rcpt to:<"word(cc,i)">"
   end
if length(bcc) > 0 then
do i = 1 to words(bcc)
   h = h + 1
   header.h = "rcpt to:<"word(bcc,i)">"
   end
h = h + 1
header.h = "data"

ww       = date('W')
mm       = date('M')
yy       = left(date('S'),4)
dd       = left(date('E'),2)
tt       = time('C')
h = h + 1
header.h    = "X-Mailer:  EMAIL" ver " Rexx Exec on OS/390"
h = h + 1
header.h    = "Date:    " ww dd mm yy tt
h = h + 1
header.h = "From:    " from
h = h + 1
header.h    = "To:      " address
h = h + 1
if length(cc) > 0 then
do i = 1 to words(cc)
       header.h    = "Cc:      " word(cc,i)
       h = h + 1
       end
header.h    = "Subject: " subject
header.0 = h
out.  = null
out.0 = 0

/* -------------------------- *
 * If FILE used then setup    *
 * appropriate controls.      *
 * -------------------------- */
if length(file) + length(filedd) > 0 then do
   bnd = '"Mime.Part.EMAIL.24jul65lrhg.0x0zax1d"'
   mh.1 = "Mime-Version: 1.0"
   mh.2 = "Content-type: multipart/mixed;"
   mh.3 = "              boundary=  "bnd
   mh.4 = " "
   mh.5 = "This message is in MIME format"
   bnd = "Mime.Part.EMAIL.24jul65lrhg.0x0zax1d"
   mh.6 = "--"bnd
   mh.7 = "Content-Type: text/plain"
   mh.8 = " "
   do i = 1 to 8
      out.0 = out.0 + 1
      n = out.0
      out.n = mh.i
      end
   end

/* -------------------------- *
 * Write out message.         *
 * -------------------------- */
n     = out.0 + 1
out.n = " "
out.0 = n
if nomsg = null then
   do i = 1 to in.0
      out.0 = out.0 + 1
      n = out.0
      out.n = in.i
      end
else do
     n     = out.0 + 1
     out.n = "No message text - file transfer only"
     out.0 = n
     end

/* -------------------------- *
 * Write out FILE attachment  *
 * -------------------------- */
if length(file) > 0 then
do f = 1 to words(file)
      file_dsn = word(file,f)
      drop mh.
      mh.1 = " "
      mh.2 = " "
      mh.3 = "--"bnd
      mh.4 = "Content-Type: text/plain;"
      char = '"US-ASCII";'
      mh.5 = "              charset=  "char
      if left(file_dsn,1) = "'" then
         name = '"'substr(file_dsn,2,length(file_dsn)-2)'.doc"'
      else name = '"'file_dsn'.doc"'
      mh.6 = "              name=  "name
      mh.7 = "Content-Transfer-Encoding: 7bit"
      mh.8 = " "
      do i = 1 to 8
         out.0 = out.0 + 1
         n = out.0
         out.n = mh.i
         end
      drop in.
      if pos("(",file_dsn) > 0 then
         parse value file_dsn with . "(" member ")" .
      else member = null
      "ALLOC F("indd") DS("file_dsn") SHR Reuse"
      "EXECIO * DISKR" indd "(FINIS STEM in."
      "Free f("indd")"
      do i = 1 to in.0
         out.0 = out.0 + 1
         n = out.0
         if asa = "on" then call do_asa
         out.n = in.i
         end
      end

/* -------------------------- *
 * Write out FILEDD attachment*
 * -------------------------- */
if length(filedd) > 0 then
do f = 1 to words(filedd)
      file_ddn = word(filedd,f)
      drop mh.
      mh.1 = " "
      mh.2 = " "
      mh.3 = "--"bnd
      mh.4 = "Content-Type: text/plain;"
      char = '"US-ASCII";'
      mh.5 = "              charset=  "char
      call Get_DSN_from_DD file_ddn
      if zname <> '' then
         name = '"'dsn_from_dd'.doc"'
      else
         name = '"ddname='file_ddn'.doc"'
      mh.6 = "              name=  "name
      mh.7 = "Content-Transfer-Encoding: 7bit"
      mh.8 = " "
      do i = 1 to 8
         out.0 = out.0 + 1
         n = out.0
         out.n = mh.i
         end
      drop in.
      "EXECIO * DISKR" file_ddn "(FINIS STEM in."
      do i = 1 to in.0
         out.0 = out.0 + 1
         n = out.0
         if asa = "on" then call do_asa
         out.n = in.i
         end
      end

if length(file) + length(filedd) > 0 then do
   i = out.0 + 1
   out.i = "--"bnd"--"
   out.0 = i
   end

/* ----------------------------------------------------- *
 * Allocate output to smtp server address dest           *
 * ----------------------------------------------------- */
Say "ALLOC F("workdd") SYSOUT(A) DEST("smtp_address")"
/*"ALLOC F("workdd") SYSOUT(A) DEST("smtp_address")",                 */
/* "recfm(v b) lrecl(255) blksize(0)"                                 */
"ALLOC F("workdd") SYSOUT(B) WRITE(SMTP)"
 if rc > 0 then do
    say sysvar('sysicmd')": allocation failed to" smtp_address
    say sysvar('sysicmd')": contact your sysprog to fix this"
    exit 16
    end

"EXECIO * DISKW" workdd "(STEM header."
"EXECIO * DISKW" workdd "(FINIS STEM out."
"FREE F("workdd")"

/* -------------------------- *
 * Issue confirmation msg     *
 * -------------------------- */
if confirm <> "off" then do
   say "Message successfully transmitted to:" address
   say "Subject:" subject
   say "From:   " from
   if length(file) > 0 then
       say "Sending file(s):" file
   if length(filedd) > 0 then
       say "Sending dd(s):" filedd
   say "Sent" out.0+header.0 "records as text, attachments," ,
       "and control information."
   end

exit 0

/* ----------------------------------------------------- *
 * Test validity (as much as we can) of e-mail address   *
 * ----------------------------------------------------- */
Test_Address:
arg test_address
if pos("@",test_address) = 0 then do
   say msgid "Invalid address ("test_address") was specified"
   say msgid "The address must be of the format",
              "userid@lan.internet.address"
   say msgid "for example:" sysvar('sysuid')"@"domain
   signal exit16
   end
 Return

/* ----------------------------------------------------- *
 * Do_ASA routine.                                       *
 * Update output line in attachments for printing on     *
 * ascii printers.  Converts ASA carriage control in     *
 * column 1 thus:                                        *
 *                                                       *
 * Convert 1 in column 1 to Form Feed (ff)               *
 * Convert 0 in column 1 to 2 Line Feeds (lf)            *
 * Shifts data left 1 column                             *
 * ----------------------------------------------------- */
 Do_ASA:
 Select
    when left(in.i,1) = " " then
       in.i = substr(in.i,2,length(in.i))
    when left(in.i,1) = "1" then
       in.i = ff""substr(in.i,2,length(in.i))
    when left(in.i,1) = "0" then
       in.i = lf""lf""substr(in.i,2,length(in.i))
    otherwise in.i = substr(in.i,2,length(in.i))
    end
  return


/* ----------------------------------------------------- *
 * Get_DSN_from_DD routine                               *
 *                                                       *
 * This routine is used when a FILEDD option is used. It *
 * will extract the DSN for the DD statment, this will   *
 * then be used to create the name for the attachment.   *
 * ----------------------------------------------------- */
 Get_DSN_from_DD:
 arg ddname
      call outtrap 'xdd.'
      'listalc status'
      call outtrap 'off'

      do i=2 to xdd.0
         parse upper var xdd.i xdsname xddname
         if xddname = '' then
         do
            i=i+1
            parse upper var xdd.i 3 xddname 11 .
         end
         if xddname = ddname then
            dsn_from_dd = strip(xdsname);
      end
  return


/* ----------------------------------------------------- *
 * Exit message if an error.                             *
 * ----------------------------------------------------- */
exit16:
   say msgid "Syntax is: "
   say msgid "%EMAIL user@address"
   say msgid "     or (u1@address u2@address..) "
   say msgid "     or *list-id* "
   say msgid "        BCC user@address       or"
   say msgid "        BCC (u1@add1 u2@add2 ..)"
   say msgid "        CC user@address       or"
   say msgid "        CC (u1@add1 u2@add2 ..)"
   say msgid "        FILE data-set-name    or"
   say msgid "        FILE (dsn1 dsn2 ...)  "
   say msgid "        FILEDD ddn1             or"
   say msgid "        FILEDD (ddn1 ddn2 ...)  "
   say msgid "        FROM reply@address"
   say msgid "        MSGDS data-set-name   or"
   if sysvar('sysispf') = "ACTIVE" then
      say msgid "        MSGDS *               or"
   say msgid "        MSGDD ddname          or"
   say msgid "        NOMSG (if no MSGDS or MSGDD)"
   say msgid "        NOConfirm"
   say msgid "        SUBJECT 'subject text' "
   exit 16
