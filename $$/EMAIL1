/*--------------------------ooo00 REXX 00ooo--------------------------*/
n_st=mark(2)    /* Mark Start */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* EMAIL1:  [ V2.02 ]                                                 */
/*                                                                    */
/* Macro to E-mail the  output being edited/viewed or browsed.        */
/*                                                                    */
/* Permissable parameters:                                            */
/*  Keyword:                                                          */
/*   SUBMIT | /S      : Submit JCL generated.                         */
/*   T(to) | T=to     : Recipient's email details.  Fully qualifie    */
/*                      email address, eg.                            */
/*                         fred_nurks@NETSCAPE.NET.AU                 */
/*                      If this format parameter is not supplied a    */
/*                      self-extracted panel will be displayed of     */
/*                      all past recipients used. Cursor select the   */
/*                      desired recipient. (Sticky fields are ISPF    */
/*                      "applid" dependant.)                          */
/*  Positional:                                                       */
/*   dataset          : Unqualified dataset(member) name. Taken as    */
/*                      1st. positional parameter after above         */
/*                      evaluations. The default is the dataset being */
/*                      edited/viewed. You can selectively email      */
/*                      lines by using the line or block "C" line     */
/*                      commands.                                     */
/*                                                                    */
/* Mebers required to package this function.                          */
/*    EMAIL    - The driver to process parameters passed by JCL       */
/*               submitted by EMAIL1. (This is a black box so do not  */
/*               modify.)                                             */
/*    EMAIL1   - This driver. Not to be confused with member EMAIL in */
/*               SYSPROC/SYSEXEC concatenation, which is the EXEC to  */
/*               process the parameters established, in batch.        */
/*    SCREENC  o Routine to capture the current screen and extract    */
/*               dataset(member). If routine not available then       */
/*               invoke EMAIL from an edit/view session or pass       */
/*               the dataset name as the 1st. non keyword parameter.  */
/*               (Only required for browse sessions.)                 */
/*                                                                    */
/*--------------------------------------------------------------------*/
n_en=mark(-2)   /* Mark End   */
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
    "CONTROL ERRORS CANCEL"

ini1:
    zedsmsg=
    Parse SOURCE . . xcmd .

    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    If parm#='?' Then Do
        Signal On Syntax Name staxroc
        retsyn=help_me
        X=$Br(xcmd "??")
        Return 0
    End
    If parm#='??' Then Signal help_me

    zt_created=0
    If ima_macro Then Do
        "ISREDIT PROCESS RANGE C"
        "ISREDIT (cmd)=RANGE_CMD"
        If cmd='C' Then Do
            "ISREDIT (zf)=LINENUM .ZFRANGE";"ISREDIT (zl)=LINENUM .ZLRANGE"
            idsn=$ztempf()
            Address TSO "NEWSTACK"
            Do i=zf To zl
                "ISREDIT (line)=LINE" i;Queue line
            End
            Queue ''
            dd='EI'Time('s')
            Address TSO "ALLOC F("dd") DSN('"idsn"') SHR REU"
            Address TSO "EXECIO * DISKW "dd" (FINIS"
/*          Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd")"      */
/*          Address ISPEXEC "VIEW DATAID(&DATAID)"                    */
/*          Address ISPEXEC "LMFREE DATAID(&DATAID)"                  */
            Address TSO "FREE F("dd")"
            zt_created=1
        End
        Else Do
            "ISREDIT (idsn)=DATASET";"ISREDIT (memb)=MEMBER"
            If memb/='' Then idsn=idsn'('strip(memb)')'
        End
        "ISREDIT (last) = LINENUM .ZLAST"
    End
    v1='systcpd sender';userid=
    Interpret "Parse Value $alktcip(v1,sysid,userid) With" v1
    sysexec=$alkhlq()'.$$';userid=Userid()
    #tr=Trace('o')
    Call parse_parms
    If Verify(#tr,'NO')>0 Then x=Trace('r')

    If who='' Then Do
        vars='EMAILU1 EMAILU2 EMAILU3 EMAILU4 EMAILU5 EMAILU6 EMAILU7',
             'EMAILU8 EMAILU9 EMAILU0 EMAILCSR'
        "VGET ("vars") PROFILE"
        If emailcsr='' Then emailcsr='EMAILU1'
        Call build_panel
        "DISPLAY PANEL("xcmd"P)"
        If rc=0 Then Interpret "who="emailcsr
        "VPUT ("vars") PROFILE"
        Address ISPEXEC "LIBDEF ISPPLIB"
        #m=Msg('Off');Address TSO "DELETE '"em_dsn"'";x=Msg(#m)
        If who='' Then Do
            zedlmsg='Missing recepient.  Enter patameter "T=recepient"',
                    'or "T(recepient)" where recepient is in the format',
                    'of "username@ISP_name".'
            Signal exi1
        End
    End

    If idsn='' Then idsn=parm#
    If idsn='' Then Do
        Signal On Syntax Name staxroc
        retsyn=screenc_not_found
        screeni=screenc()
        Signal Off Syntax
        headline=Substr(screeni,161,80)
        Parse VAR headline . idsn .
    End

have_name:
    If sysdsn("'"idsn"'")/='OK' Then Do
        zedlmsg = "Cannot extract valid dataset name from headline.",
                "'"idsn"' cannot be found. You may need to pass it",
                "as a 'IN=...' parameter. Enter",
                'TSO EXT ?" for more details.'
        Signal exi1
    End

    "ISREDIT (changed)=DATA_CHANGED"
    If changed="YES" & \zt_created Then "ISREDIT SAVE"

/*--------------------------------------------------------------------*/
/* Build JCL according to LPAR on.                                    */
/*--------------------------------------------------------------------*/
build_jcl:
sep='//*'Copies('-',67)'*';sepp='//*'Copies('=',67)'*';id='E'

/*--------------------------------------------------------------------*/
    Address TSO 'NEWSTACK'
    Signal on Syntax Name error_on_JC
    pgmn=xcmd;pgmn=$alkjcpg(xcmd)
    x=JC(id '/Q /9');Signal error_off_JC
error_on_JC:
    Queue "//"userid()||id "JOB (2567,ALK),'"pgmn"',"
    Queue '//             CLASS=A,COND=(4,LT),'
    Queue '//             MSGCLASS=X,TIME=1440,REGION=0M,'
/*  Queue '//             NOTIFY=&SYSUID,LINES=9999'                  */
    Queue '//             NOTIFY=,LINES=9999'
error_off_JC:Signal off Syntax
Queue sep
Queue sepp
Queue '//* FTP for mailing (manually submit)...                              *'
Queue sep
Queue '//JS010    EXEC PGM=IKJEFT1A'
Queue '//SYSEXEC  DD DISP=SHR,DSN='sysexec
Queue '//SYSPRINT DD SYSOUT=*'
Queue '//SYSTSPRT DD SYSOUT=*'
Queue '//DD1      DD DUMMY'
Queue sep
/*--------------------------------------------------------------------*/
/* //SYSTCPD  - Eyecatcher                                            */
/* Keep this matrix up to date if you want to use this REXX to        */
/* generate JCL. Amend the Select;End block to reflect updates.       */
/*--------------------------------------------------------------------*/
Queue '//* The SYSTCPD DD needs to change for each system as follows:-       *'
Queue '//*       CPU1 - SYS1.TCPPARMS(CPU1PRO9)                              *'
Queue '//*       ANZD - SYS3.TCPIP.PARMLIB(TCPDAT09)                         *'
Queue '//*       ANZU - SYS3.TCPIP.PARMLIB(TCPDAT18)                         *'
Queue '//*       ANZP - SYS3.TCPIP.PARMLIB(TCPDAT04)                         *'
Queue '//*       ANZF - SYS3.TCPIP.PARMLIB(TCPDAT10)                         *'
Queue '//*       ANZH - SYS3.TCPIP.DATA                                      *'
Queue '//*       ANZC - SYS3.TCPIP.DATA                                      *'
Queue '//*       ANZI - SYS3.TCPIP.DATA                                      *'
Queue '//*       A01, A02, A03, NIQ,                                         *'
Queue '//*            - SYS1.TCPPARMS(TCPDATA)                               *'
Queue '//*       ???? - Missing.to.give.jcl.error                            *'
Queue sep
Select
    When (sysid = 'PS04') Then systcpd = 'TCPIP.TCPIP.DATA'
    When (sysid = 'ANZD') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT09)'
    When (sysid = 'ANZU') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT18)'
    When (sysid = 'ANZP') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT04)'
    When (sysid = 'ANZF') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT10)'
    When (sysid = 'ANZH') Then systcpd = 'SYS3.TCPIP.DATA'
    When (sysid = 'ANZC') Then systcpd = 'SYS3.TCPIP.DATA'
    When (sysid = 'ANZI') Then systcpd = 'SYS3.TCPIP.DATA'
    When (sysid = 'A01')  Then systcpd = 'SYS1.TCPPARMS(TCPDATA)'
    When (sysid = 'A02')  Then systcpd = 'SYS1.TCPPARMS(TCPDATA)'
    When (sysid = 'A03')  Then systcpd = 'SYS1.TCPPARMS(TCPDATA)'
    When (sysid = 'NIQ')  Then systcpd = 'SYS1.TCPPARMS(TCPDATA)'
    Otherwise Nop
End
If zt_created Then Queue '//TEMPIN   DD DISP=(OLD,DELETE,DELETE),DSN='idsn
Queue '//SYSTCPD  DD DISP=SHR,DSN='systcpd
/*--------------------------------------------------------------------*/
Queue "//SYSTSIN  DD *                                    Manual Mail"
Queue "%EMAIL" who "-"
Queue "  FROM "sender" -"
Queue "  MSGDD DD1 -"
Queue "  FILE '"idsn"' -"
Queue "  SUBJECT '"idsn" from" sysid "via E-Mail.'"
Queue ''
"VGET ZTEMPF"
dd='EM'Time('s')
Address TSO "ALLOC DD("dd") DS('"ztempf"') SHR REU"
Address TSO "EXECIO * DISKW "dd" (FINIS"
Address TSO 'DELSTACK'
If subit Then Do
    x=Msg('On')
    x=Outtrap('line.',10,'NOCONCAT')
    Address TSO "SUBMIT '"ztempf"'"
    x=Msg('Off')

    Address TSO 'DELSTACK'

    Do i=1 To line.0
        If Index(line.i,'SUBMITTED')>0 Then Do
            line=' 'line.i
            Parse VAR line ' JOB ' rest
            zedlmsg='JOB' rest
            zedsmsg=
            Signal exi1
        End
    End
    Signal exi1
End
Address ISPEXEC
"LMINIT DATAID(DATAID) DDNAME("dd")"
"VIEW DATAID(&DATAID)"
If rc>4 Then Do
    zedlmsg='RC='rc' received trying to edit JCL generated.',
            'Are you already procesing a "ZTEMPF" dataset?'
    "SETMSG MSG(ISRZ001)"
End
"LMFREE DATAID(&DATAID)"
Address TSO "FREE DD("dd")"

Exit


exi1:
    "SETMSG MSG(ISRZ001)"
    Exit

screenc_not_found:
    zedlmsg="Routine SCREENC not found. Make it available or pass",
            "dataset name on 'IN=...' parameter."
    Signal exi1

whois_not_found:
    zedlmsg="Routine WHOIS not found. Make it available or pass",
            "recipient's name 'To()' parameter."
    Signal exi1

staxroc:Interpret Signal retsyn

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#
    Parse Value '' With who

    trace=parse_cons('TRACE')
    If trace='N' Then trace=parse_cons('/TR',,,3)

    subit=parse_cons('SUBMIT',1,0,2)
    If \subit Then subit=parse_cons('/SUBMIT',1,0,2)

    who=parse_varb('T(','?')
    If who='?'  Then who=parse_varb('T=','?')
    If who='?'  Then who=
    Else Do
        who=Strip(Translate(who,'   ','()='))
        uc='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        lc='abcdefghijklmnopqrstuvwxyz'
        who=Translate(who,lc,uc)
    End

    If idsn='' Then Do
        Parse VAR parm# idsn parm#
        idsn=Strip(idsn,,"'")
        If idsn/='' Then Do
            If Sysdsn("'"idsn"'")/='OK' Then Do
                zedlmsg = "'"idsn"'" Sysdsn("'"idsn"'")
                Signal exi1
            End
        End
    End

    Return 0


/*--------------------------------------------------------------------*/
/* Parse variable 'parm#' for a constant 'mask'.                      */
/* Parameters:                                                        */
/*   1. Mask to search for. (May be truncated, refer parameter 4).    */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Positive return value. Value to return if mask found. Default */
/*      is 'Y'.                                                       */
/*   3. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   4. Mask qualifier with one of the following values:              */
/*      - Numeric length of the mask prefix.                          */
/*      - Literal 'W' to return the word that contain that mask (note */
/*        the word does not need to start with mask).                 */
/*      - Literal 'W#' to return the word numb that contain that mask */
/*        (note the word does not need to start with mask).           */
/* Notes:                                                             */
/*   1. For parameters 2 and 3:                                       */
/*      - Set to literal 'NULL' to return null values.                */
/*      - Set to '*' to return the mask as the negative/positive      */
/*        condition.  (Suggest using 'NULL' for the other value.)     */
/*                                                                    */
/*   2. Comma delimit to pad out if prior parameters are not          */
/*      supplied.                                                     */
/*   3. Use command "$RU $PARMS" ($Routine Upgrade) to update with    */
/*      the latest infrastructure copy of $PARMS. Use command         */
/*      "$RU $PARMS ?" to display latest infrastructure version.      */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=    ;If negr='NULL' Then negr=
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (Substr(maskl,1,1)='W') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do
        parm#=Delword(parm#,y#,1);If maskl='W#' Then posr=y#;Return posr
    End
    If maskl='W#' Then Return 0;Else Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' for a variable 'mask'.                        */
/* Parameters:                                                        */
/*   1. Mask to search for prefixing the word.                        */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   3. Literal 'NUM' to check for numerics and return negative       */
/*      result if not numeric.                                        */
/* Notes:                                                             */
/*   1. For parameters 2:                                             */
/*      - If the prefix is found, the returned value is the full      */
/*        word less the prefix.                                       */
/*      - NULLs is a valid returned value.                            */
/*      - pass a unique negative result substitution to ensure mask   */
/*        missing (eg.  '?????').                                     */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
Parse_parms_End:
$Parms_End:

/*--------------------------------------------------------------------*/
/* Help details...                                                    */
/*--------------------------------------------------------------------*/
Help_me:
    Do i=n_st-1 To n_en+1
        Say Center(Strip(Sourceline(i),'t'),79)
    End

    Exit

errproc:Call Off Error;Return Sigl

Mark:Arg n#;If Datatype(n#)/='NUM' Then n#=1;Return sigl+n#

/*--------------------------------------------------------------------*/
/* Allocate panel                                                     */
/*--------------------------------------------------------------------*/
build_panel:
    Signal on Syntax Name error_off_$ALKUVOL
    uvol_to="UNIT(SYSDA)"
    uvol_to=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
    u=Sysvar(Sysuid);p=Sysvar(Syspref);If u/=p&p/='' Then u=p'.'u;hlq=u
    em_dsn=hlq'.$$$TEMP.EMAIL1'
    Address TSO;#msg=Msg('Off');"DELETE '"em_dsn"'"
x=Msg('On')
    "ALLOC DA('"em_dsn"') NEW CATALOG TRACK SPACE(1,1) DSORG(PO) LRECL(80)",
       "BLKSIZE(0)" uvol_to "DIR(1) RECFM(F B) REU"
    "FREE DA('"em_dsn"')";"NEWSTACK";Call make_mem_1;#tr=Trace('o')
    Do i=n_st To n_en;Queue Sourceline(i);End;Queue '';x=Trace(#tr)
    "ALLOC F("dd") DA('"em_dsn"("xcmd"P)') SHR REU"
    "EXECIO * DISKW "dd" (FINIS";"FREE  F("dd")"
    Address
    Address ISPEXEC "LIBDEF ISPPLIB DATASET ID('"em_dsn"') STACK"
    x=Msg(#msg)
    Return 0


/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_1:
    n_st = mark(2)                          /* Mark start of data     */
/*
)ATTR DEFAULT(%`_)
 _ TYPE(INPUT)   INTENS(HIGH) COLOR(RED)    HILITE(USCORE)
 $ TYPE(INPUT)   INTENS(HIGH) COLOR(RED)    HILITE(USCORE) CAPS(OFF)
 @ TYPE(TEXT)    INTENS(HIGH) COLOR(YELLOW)
 + TYPE(TEXT)    INTENS(LOW)  COLOR(GREEN)
 ! AREA(DYNAMIC)
)BODY EXPAND(\\) WINDOW(60,23)
%&SID%=>_ZCMD
%
+Either cursor select recipient from past values or enter
+a new one an leave the cursor on that line:
+ #1. .$EMAILU1                                            +
+ #2. .$EMAILU2                                            +
+ #3. .$EMAILU3                                            +
+ #4. .$EMAILU4                                            +
+ #5. .$EMAILU5                                            +
+ #6. .$EMAILU6                                            +
+ #7. .$EMAILU7                                            +
+ #8. .$EMAILU8                                            +
+ #9. .$EMAILU9                                            +
+ #10 .$EMAILU10                                           +
@ENTER+-process,@END/CANCEL+-abandon,@?+-tutorial.
)INIT
 &SID=&ZSYSID
 .CURSOR=&EMAILCSR
)PROC
 &EMAILCSR=.CURSOR
 &CSP=.CSRPOS
)END
    n_en = mark(-2)                         /* Mark end of data       */
    Return 0
*/
    n_en = mark(-2)                         /* Mark end of data       */
    Return 0

