/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
    Trace o;msg=Msg();x=Msg('Off')
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Macro to E-mail the  output being edited/viewed or browsed.        */
/*                                                                    */
/* Permissable parameters:                                            */
/*   To(to) / To=to   : Recipient's email name. (Defult is userid. See*/
/*                      Userid parameter below.)                      */
/*   @(isp) / @=isp   : Recipient's Internet service provider's       */
/*                      address. (Defult ist "ANZ.COM".)              */
/*   Userid(uid) / Userid=uid                                         */
/*                    : TSO userid of the recipient. (If the "TO"     */
/*                      parameter and this parameter are not provided,*/
/*                      the default is the senders TSO userid.        */
/*   Email@(ema) / Email@=ema                                         */
/*                    : Fully qualified email address, eg.            */
/*                        fred_nurks@NETSCAPE.NET.AU                  */
/*   dataset          : Unqualified dataset(member) name. Taken as    */
/*                      1st. positional parameter aftre above         */
/*                      evaluations.                                  */
/*                                                                    */
/* Mebers required to package this function.                          */
/*    $SCREENC o Routine to capture the current screen and extract    */
/*               dataset(member). If routine not available then       */
/*               invoke EMAIL from an edit/view session or pass       */
/*               the dataset name as the 1st. non keyword parameter.  */
/*    EMAIL    - This driver. Not to be confused with member EMAIL in */
/*               dataset 'SYS4.ANZ.CLIST' which is the EXEC to        */
/*               process the parameters established, in batch.        */
/*    WHOIS    o Routine to evaluate name from TSO userid. It will    */
/*               return christian and surnames which will be          */
/*               combined as surname truncated to 7 bytes (if         */
/*               required) with the 1st initial. If routine is not    */
/*               found a syntax error is returned and you will be     */
/*               required to provide a valid "TO" parameter.          */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    x=Msg(msg)

    Address ISPEXEC
    ARG parm#
    Parse SOURCE . . xcmd .
    If parm# Â¬= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1
    ima_macro = 'Y'
    "ISREDIT (idsn) = DATASET"
    "ISREDIT (memb) = MEMBER"
    If memb /= '' Then idsn = idsn'('strip(memb)')'

byp1:
    cactn = "RETURN"
    cactn = "CANCEL"
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    If parm# = '?' Then Do
        Signal On Syntax Name staxroc
        retsyn = help_me
        X = $BR(xcmd "??")
        Return 0
    End
    If parm# = '??' Then Signal help_me

    #where = 'ANZ.COM'
    If idsn = 'IDSN' Then idsn = ''
    userid = Userid()
    Call parse_parms

    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    If who = '' Then Do
        Signal On Syntax Name staxroc
        retsyn = whois_not_found
        name = Whois(user,'/R')
        Signal Off Syntax
        If Word(name,1) = 4 Then Do
            Parse var name . gc009
            gc009 = gc009'. Provide a valid "To" formatted parameter.'
            Signal ext1
        End
        Parse var name cname sname .
        If Length(sname) > 7 Then sname = Substr(sname,1,7)
        who = Translate(sname || Substr(cname,1,1))
    End
    to_who = who'@'where' -'

    If idsn = '' Then Do
        Signal On Syntax Name staxroc
        retsyn = screenc_not_found
        screeni = $Screenc()
        Signal Off Syntax
        headline = Substr(screeni,161,80)
        Parse VAR headline . idsn .
    End

have_name:
    Parse VAR idsn idsn '(' .
    If sysdsn("'"idsn"'") /= 'OK' Then Do
        gc009 = "Cannot extract valid dataset name from headline.",
                "'"idsn"' cannot be found. You may need to pass it",
                "as a 'IN=...' parameter. Enter",
                'TSO EXT ?" for more details.'
        Signal ext1
    End

    "ISREDIT (changed) = DATA_CHANGED"
    If changed = "YES" Then "ISREDIT SAVE"

    Call build_jcl

ext1:
    "SETMSG MSG(GC009)"
    Exit

screenc_not_found:
    gc009 = "Routine SCREENC not found. Make it available or pass",
             "dataset name on 'IN=...' parameter."
    Signal ext1

whois_not_found:
    gc009 = "Routine WHOIS not found. Make it available or pass",
             "recipient's name 'To()' parameter."
    Signal ext1

staxroc:Interpret Signal retsyn

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    subit = parse_cons('SUBMIT',,,2)

    xxx = parse_varb('T')
    If xxx /= 'N' Then Do
        Parse VAR xxx '(' who ')' .
        If who = '' Then Parse VAR xxx '=' who .
    End
    Else who = ''

    If who = '' Then Do
        xxx = parse_varb('U')
        If xxx /= 'N' Then Do
            Parse VAR xxx '(' user ')' .
            If user = '' Then Parse VAR xxx '=' user .
        End
        Else user = userid
    End
    Else user = userid

    xxx = parse_varb('@')
    If xxx /= 'N' Then Do
        Parse VAR xxx '(' where ')' .
        If where = '' Then Parse VAR xxx '=' where .
        If where = '' Then where = #where
    End
    Else where = #where

    xxx = parse_varb('E')
    If xxx /= 'N' Then Do
        Parse VAR xxx '(' xxx ')' .
        If xxx = '' Then Parse VAR xxx '=' xxx .
        If xxx /= '' Then Parse VAR xxx who '@' where .
    End

    Do Forever
        Parse VAR parm# dsn parm#
        If dsn = '' Then Leave
        If Substr(dsn,1,1) = "'" Then ,
            dsn = Substr(dsn,2,Length(dsn)-2)
        If Sysdsn("'"dsn"'") = 'OK' Then Do
            idsn = dsn
            Leave
        End
        If Sysdsn("'"dsn"'") = 'MEMBER NOT FOUND' Then Do
            gc009 = "'"dsn"' member not found. Correct and re-invoke."
            Signal ext1
        End
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Build JCL according to LPAR on.                                    */
/*--------------------------------------------------------------------*/
build_jcl:
sep    = '//*'Copies('-',67)'*'
sepp   = '//*'Copies('=',67)'*'
If Verify(Substr(sysid,4,1),'CHI') = 0 Then prod = ''
Else                                        prod = 'P'

Address TSO "NEWSTACK"
Queue "//"userid"EML JOB ,'EMAIL-TO',MSGCLASS=V,CLASS=E,"
Queue '//   NOTIFY=&SYSUID'
Queue '//*'
Queue '//*MAIN SYSTEM='sysid
Queue sep
Queue sepp
Queue '//* FTP for mailing                                                   *'
Queue sep
Queue '//JS010    EXEC PGM=IKJEFT1A'
Queue '//SYSEXEC  DD DISP=SHR,DSN=SYS4.ANZ.CLIST'
Queue '//SYSPRINT DD SYSOUT=*'
Queue '//SYSTSPRT DD SYSOUT=*'
Queue '//DD1      DD DUMMY'
Queue sep
/*--------------------------------------------------------------------*/
/* //SYSTCPD  - Eyecatcher                                            */
/* Keep this matrix up to date if you want to use this REXX to        */
/* generate JCL. Amend the Select;End block to reflect updates.       */
/*--------------------------------------------------------------------*/
Queue '//* The SYSTCPD DD needs to change for each system as follows:-       *'
Queue '//*       ANZD - SYS3.TCPIP.PARMLIB(TCPDAT09)                         *'
Queue '//*       ANZU - SYS3.TCPIP.PARMLIB(TCPDAT18)                         *'
Queue '//*       ANZP - SYS3.TCPIP.PARMLIB(TCPDAT04)                         *'
Queue '//*       ANZF - SYS3.TCPIP.PARMLIB(TCPDAT10)                         *'
Queue '//*       ANZH - SYS3.TCPIP.DATA                                      *'
Queue '//*       ANZC - SYS3.TCPIP.DATA                                      *'
Queue '//*       ANZI - SYS3.TCPIP.DATA                                      *'
Queue '//*       ???? - Missing.to.give.jcl.error                            *'
Queue sep
Select
    When (sysid = 'ANZD') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT09)'
    When (sysid = 'ANZU') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT18)'
    When (sysid = 'ANZP') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT04)'
    When (sysid = 'ANZF') Then systcpd = 'SYS3.TCPIP.PARMLIB(TCPDAT10)'
    When (sysid = 'ANZH') Then systcpd = 'SYS3.TCPIP.DATA'
    When (sysid = 'ANZC') Then systcpd = 'SYS3.TCPIP.DATA'
    When (sysid = 'ANZI') Then systcpd = 'SYS3.TCPIP.DATA'
    Otherwise systcpd = 'Missing.to.give.jcl.error'
End
Queue '//SYSTCPD  DD DISP=SHR,DSN='systcpd
/*--------------------------------------------------------------------*/
/*--------------------------------------------------------------------*/
Queue "//SYSTSIN  DD *                                    Manual Mail"
Call dd_all_members
Queue '/*'
Queue ''
"VGET ZTEMPF"
Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
Address TSO 'DELSTACK'
If subit = 'Y' Then Do
    x = Msg('On')
    x = Outtrap('line.',10,'NOCONCAT')
    Address TSO "SUBMIT '"ztempf"'"
    x = Msg('Off')

    Address TSO 'DELSTACK'

    Do i=1 To line.0
        If Index(line.i,'SUBMITTED') > 0 Then Do
            line = ' 'line.i
            Parse VAR line ' JOB ' rest
            gc009 = 'JOB' rest
            zerrsm = ''
            Return 0
        End
    End
    Signal ext1
End
"LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
"EDIT DATAID(&DATAID)"
"LMFREE DATAID(&DATAID)"
Address TSO "FREE DD(ZTEMPF)"

Exit

/*--------------------------------------------------------------------*/
/* Queue the JCL from the source lines                                */
/*--------------------------------------------------------------------*/
Help_me:
    Do i=n_st-1 To n_en+1
        Say Center(Strip(Sourceline(i),'t'),79)
    End

    Exit

errproc:Call Off Error;Return Sigl

dd_all_members:
    #m  = 1
    #dd = ''
    member = ''
    "LMINIT DATAID(DATA1) DATASET('&IDSN')"
    "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    Do Forever
        "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) "||,
                "STATS(NO)"
        If rc /= 0 Then Leave
member = idsn'('Strip(member)')'
Queue "%EMAIL" to_who
Queue "  FROM "userid"@"sysid".HOST.AU.ANZ -"
Queue "  MSGDD DD1 -"
Queue "  FILE '"member"' -"
Queue "  SUBJECT '"member" via E-Mail.'"
    End
    "LMMLIST DATAID(&DATA1) OPTION(FREE)"
    "LMCLOSE DATAID(&DATA1)"

    Return 0

