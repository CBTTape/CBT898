/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* EXECIOVD:                                                          */
/* ---------                                                          */
/* Routine to provide help details for EXECIOVS.                      */
/* If confronted by a "surname" greeting and you take offense, toggle */
/* "cname1st" for correct Christian name.                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
    cname1st=1                           /* 1=ChrisSurn, 0=SurnChris  */

    Arg cmd;Parse Source . xenv xcmd xdd xdsn .
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    "ISREDIT MACRO (cmd)"
    Signal On Error Name errbybr;x=Msg('Off')
    If rc=0 Then ima_macro=1
    Else If cmd="?" Then Do;Address TSO "%BR %"xcmd" ??";Exit;End
/*--------------------------------------------------------------------*/

    If \ima_macro Then Address TSO "CLEAR"
errbybr:
    Signal Off Error
    If ima_macro Then Address ISREDIT

help_doco:
    n_st=mark(2)                            /* Mark next line         */
/*

   Good &TOD. &CNAME..

   EXECIOVS:
   ---------

   EXECIOVS performs similar I/O functions to VSAM dataset as EXECIO to
   NONVSAM.
   EXECIOVS is an API between user's REXX programs and RXVSAM (available off
   the CBT tape, file #268).
   It attempts to emulate the EXECIO format to make it's use easier,
   however, it does use a REXX engine and without compilation there may be
   performance issues when processing large amounts of data.

   Stem variable usage is unavailable in EXECIOVS and data returned to the
   user must be pulled from the stack.  This applies equally to both data
   and errors.

   Format:

   +----------------------------------------------------------------------+
   ¦                                                                      ¦
   ¦ >>--EXECIOVS--lines------------------------------------------- --->  ¦
   ¦             +-*-----+                                                ¦
   ¦ >----oper---ddname----------------------------------------------><-  ¦
   ¦           +-dsname--+                                                ¦
   ¦                     +-linenum------+   +-(--cntl_parms--+  +-)-+     ¦
   ¦                     +-KEY(key)-+  +-LEN(len)--+                      ¦
   ¦                                                                      ¦
   +----------------------------------------------------------------------+

   Eg.
     EXECIOVS lines oper ddname linenum (cntl_parms) KEY(key) LEN(len)

   Please note the order of KEY() and LEN(). These must follow the
   control parameters.

   (Samples provided at bottom of tutorial.)

   Operands are as follows:

     lines | *
       Number of lines to read. You may specify '*' to indicate to end
       of file.

     oper
       Operation required and must be of the format 'vvvvoo' where
         vvvv - identifies the type of VSAM dataset and must be the
                literal KSDS, ESDS or RRDS
         oo   - is the operation identifier and must be one of the
                following (operations marked with a '¥' seperator DO require a
                key):
           R  ¥ Read
           RN - Read Next
           RP ¥ Read Previous
           RL - Read Last
           RF - Read First
           RG ¥ Read Generic
           W  - Write
           RW ¥ Re-write
           D  ¥ Delete
           SF ¥ Start Forward
           SB ¥ Start Backward
           KL - Key Length (see special format for this function)
                Only valid for KSDS datasets. Returns key length and
                key position seperated by a space.
           LL - Record Length (see special format for this function).
                Returns average record length and maximum length
                seperated by a space.

     ddname
       DD name that VSAM file is pre-allocated to.
       Note :- If the operation is KSDSKL, this operand must be the
               fully qualified quoted dataset name.

     dsname
       Fully qualified and quoted VSAM dataset name if the 'oper' is
       KSDSKL (KSDS key length) or vvvvLL (record length).  Dataset name
       used with any other operator commands will cause an execution
       syntax error.

     linenum
       Record number to start reading at. If omitted the default is
       record number 1.

     (cntl_parms)
       These are keyword parameters to control processing. The
       following are valid parameters:

       OPEN       - Open file. By default the file is automatically
                    opened with each invocation of EXECIOVS. Use lines
                    0 witht this parameter to only open the file and
                    return control without further processing.
                    To solely open the file, any valid 'oper' value
                    may be used, however, it has to be consistent with
                    the VSAM dataset type. It is recommended that you
                    use %%DSRF (read first) format.
       OPENFail   - Normally an open failure due to file already open
                    will not stop subsequent processing. Use this
                    parameter to intercept an open failure due to file
                    already open and return control to the caller.
                    (P.S. It was a toss up between using "OPENFAIL" and
                          "STOPIFFILEOPEN". I chose the fewer key-
                          strokes.)
       NOOpen     - Do not attempt to open file. Use this with the
                    explicit open to minimise overheads in large loop
                    processing.
       FINis      - Close file on exit. Use lines 0 to explicitly
                    close the file without further processing.
                    By default, the file is not closed and must be
                    explicitly requested.
       LOG        - Log errors to the stack (LIFO method). Use this
                    feature with non-zero return codes to determine
                    action in case or errors.
       NOTify     - Notify errors. Display all errors as they occur.
                    May be intercepted by the OUTTRAP command and
                    leaves the stack alone.
       CONt       - Continue processing even if an error occurs. By
                    default any errors will stop processing. Types of
                    errors that may be continued are like missing
                    attempted deletion records, multiple key reads etc.
                    This command will stop error logging to the stack
                    if data is still being retrieved from the stack.
       SKIp       - Skip placing returned data onto the stack.
       TRAce      - Trace the REXX statement. Should only be used for
                    debugging.

       Parameters not in this list are ignored.  Exploit this feature
       when developing your dialog by placing a 'dummy' character at
       the start or end of the parameter and include it in the REXX
       command. Then during debuging blank out the character to activate
       the option and retype it to deactivate the option.  This way you
       can toggle options with the minimum of typing.
         eg. to toggle logging of errors alternate between the following
             two variants of the command,
               "EXECIOVS 0 KSDSRF" dd "(OPEN NLOG NCONT NTRACE NOPENF)"
               "EXECIOVS 0 KSDSRF" dd "(OPEN  LOG NCONT NTRACE NOPENF)"

     KEY(key)
       Record key, if the request is a keyed access. Alternatively the
       key may be passed via the command stack using the NEWSTACK/QUEUE
       commands. (THis latter method must be used for multiple keyed
       processing. Eg. Multiple reads, writes, deletes and rewrites.)
       If a KEY() parameter is passed, a new stack is created and any
       data passed explicitly on a stack is ignored.
       Note - This parameter MUST follow the "(cntl_parms)" parameters.

     LEN(len)
       Specify the length of rewrite record. The value "len" may be
       determined by the "LL" operation identifier. Use LEN(ASIS) to
       use the length of the read record for the rewrite operation.
       Note - This parameter MUST follow the "(cntl_parms)" parameters.

   Requirements/features:
     To RP (read previuos), you must issue a STARTBWD command. If you
     supply a key to the RP command, EXECIOVS will issue a STARTBWD
     automatically. Similar for RN commands.

     RF will set the key to X'00' and issue a RG command.

     For RW opperations, you MUST pass paired data using the stack. The
     first record must be the key with the next record the replacement
     data. The replacement data must include the key as part of itself.

     Multiple R, W, D and RW actions may be performed in one EXECIOVS
     command by queuing/pushing data to the stack.

     Multiple R will return the following formatted message for not
     found records:
       "0016W   Record not found - KEY'kkkk'"
     where 'kkkk' is the supplied read key.

     For key length and/or record length return for a dataset, the
     ddname operand must be replaced with the fully qualified
     dataset name. All other parameters are ignored. Note that this
     is a positional operand and must be the 3rd.  operand following
     the lines (0) and the KSDSKL/vvvvLL operands.

     KSDSKL will return two values. The first is the key length while
     the second is the key position. Note the relative key position
     has been incremented by 1 to give the actual column position.
     Both valued will be zero for non KSDS datasets.

     vvvvLL will return two values. The first is the average record
     length while the second is the maximum record length.

   GOTCHA's:
     1. RG (Read Generic) will always return 1 record regardless of the
        the value of the "lines" parameter (whether 0, 1 or *).
     2. Further to point 1. Logic is as VSAM processing logic not
        necessarily your logig. Eg. RN or RP will only return meaningful
        data if the prior record was logically established, eg by a
        keyed read or RG read.
     3. Watch the use of LEN(ASIS) parameter for rewrites. REXX will
        remove trailing spaces off a read record and with this
        parameter, unwanted truncation may occur.
     4. Watch your processing logic for large volumes of data. Unless you
        explicitly processing 1 record at a time, it is recommended that
        the the following processing logic is used:
        1. Get key and lengths (KL and LL) once at the start of your
           routine's invocation, as it has overheads each time used
           (especially when implicitly used).
        2. Open the VSAM file.
        3. Perform all your processing in a loop.
        4. Close the VSAM file.
        3. Exit the routine.

   Return Codes: After the EXECIOVS command runs, it sets the REXX special
   variable RC to one of the following return codes:
   +--------------+-------------------------------------------------------+
   | Return Code  | Meaning                                               |
   +--------------+-------------------------------------------------------+
   | 0            | Normal completion of requested operation              |
   +--------------+-------------------------------------------------------+
   | 1            | Data was truncated during DISKW operation             |
   +--------------+-------------------------------------------------------+
   | 2            | End-of-file reached before the specified number of    |
   |              | line were processed.  Ie. RXVSAM terminated with a    |
   |              | "4W End of file" error which was then translated to a |
   |              | RC=2 by EXECIOVS. This feature is provided to prevent |
   |              | log data from interfering with legitimat data.        |
   +--------------+-------------------------------------------------------+
   | 8            | Controlled error returned.  Process the stack for     |
   |              | details of the error.                                 |
   +--------------+-------------------------------------------------------+
   | 12           | Uncontrolled error returned.  Process the stack for   |
   |              | details of the error.                                 |
   |              | Types of errors:                                      |
   |              |  "ERROR - file was OPEN, however, RXVSAM variables    |
   |              |           unavailable, file now CLOSED (RC=12)."      |
   |              |  - Environmental error.                               |
   +--------------+-------------------------------------------------------+

                               *******

   Following is a list of all RXVASM messages:
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    0000I Request successfully processed
            No further action necessary

    0001E Invalid argument passed
            A keyword or request is probably misspelled

    0002E Open failed
            RXVSAM could not generate an ACB - check
            RXVSAM_VSAMERRORMSG for a return code from VSAM and check
            to see the DDNAME is correct

    0003E Close failed
            Check RXVSAM_VSAMERRORMSG for the VSAM return code and
            check to see the DDNAME is correct

    0004W End of File
            perform end of file logic in your REXX program

    0005E File is already open
            A previous OPEN was done for this DDNAME - ensure the
            DDNAME is correct

    0007E REXX record variable could not be accessed or was undefined
            This error can occur on a WRITE or REWRITE request and
            usually indicates the variable that contains record data
            is an undefined variable.

    0008E Duplicate record
            VSAM indicates this is a duplicate record

    0010E Unable to save VSAM error data
            This is an internal RXVSAM error

    0011E Unable to set return message text
            This is an internal RXVSAM error

    0012E ACB was not available to perform CLOSE request - file may
          not be open.
            No ACB could be found for the DDNAME you specified
            - ensure the DDNAME is for the correct file, and that
            the file has been opened

    0014E ACB was not available to perform request - file may not be
          open.
            No ACB could be found for the DDNAME you specified -
            ensure the DDNAME is for  the correct file, and that the
            file has been opened

    0015E Unable to obtain max record length for this file
            This is probably an internal RXVSAM error (a SHOWCB
            macro failed), check RXVSAM_VSAMERRORMSG for the VSAM
            return code

    0016W Record not found
            Perform not found logic in your REXX program

    0016E Record not found - a FULL KEY must be specified when
          issuing a STARTBWD request.
            For STARTBWD only: if you specified a full key, perform
            not found logic in your REXX program.  You cannot
            specify a partial (generic) key for a STARTBWD request.

    0017E Cannot determine length of record
            This is probably an internal RXVSAM error (a SHOWCB
            macro failed), check RXVSAM_VSAMERRORMSG for the VSAM
            return code

    0018E Unable to modify RPL for "UPDate"
            This is probably an internal RXVSAM error (a MODCB macro
            failed), check RXVSAM_VSAMERRORMSG for the VSAM return
            code

    0019E Function failed
            This is probably an internal RXVSAM error,
            RXVSAM_VSAMERRORMSG may give additional information

    0020E Unable to update RECORD variable
            This may indicate a storage constraint if you are
            running in a TSO or ISPF session, or an internal error
            in RXVSAM

    0021E File is not open for INPUT
            You are trying to perform a READ function, but the file
            is only open for output

    0022E File is not open for OUTPUT
            You are trying to perform a WRITE, REWRITE or DELETE
            function, but the file is only open for input

    0023E Unable to switch to DIR processing
            This is probably an internal RXVSAM error,
            RXVSAM_VSAMERRORMSG may give additional information

    0024E READGENERIC only allowed for KSDS
            You are attempting a READGENERIC function on an ESDS or
            RRDS

    0025E Non-numeric key specified for an RRDS
            The key you passed for an RRDS is not numeric.  If you
            are passing a REXX variable, ensure the variable
            contains a valid numeric string, and not a binary or
            packed number

    0026E This function is not allowed for an ESDS
            START, REWRITE and DELETE are not allowed for an ESDS

    0088E READPREV attempted without a previous STARTBWD
            You must first issue a STARTBWD for positioning before
            READPREV request

    0092E REWRITE or DELETE attempted without a previous READ
            You must first read a record before attempting to
            rewrite or delete it

    0108E Record length = 0, > max, < key length (KSDS) or not equal
          to slot size (fixed length RRDS).
            This is a catchall record length error.  For a KSDS, a
            record must be at least the size of the key, and may not
            be greater than the maximum record size defined for the
            file when it was created.  For a fixed-length RRDS, all
            records must be equal to the record slot size.  In all
            cases, ensure the record variable you pass RXVSAM is not
            set to a null string as this will be a "zero length"
            record.

                               *******

   Several sample dialogs have been provided to assist in getting started.

   Example #1- Miscellaneous operations (without the infrastructure logic
               of file allocation/deallocation and data processing):-
       - "EXECIOVS 0 KSDSKL '"vsamdsn"'"
         Pull keylen keystart

       - "EXECIOVS 0 KSDSLL '"vsamdsn"'"
         Pull avglen maxlen

       - "EXECIOVS 1 KSDSR"  dd "(LOG) KEY("key")"
         "EXECIOVS 1 KSDSRW" dd "(LOG) LEN(ASIS)

       - "EXECIOVS 0 KSDSRF" dd "(OPEN LOG NCONT)"
         "EXECIOVS 5 KSDSRN" dd "(NOO NLOG CONT)"
         "EXECIOVS 0 KSDSRF" dd "(FINIS NOTIFY NLOG)"

                               -------

   Example #2- open, read and close VSAM file in 1 operation key length 22
               with permissable HEX values:-
     Start_processing:
       Address TSO
       vsamdsn='CICS.$.DNDCICS.TEST.DFHCSD'
     Alloc_file:
       "ALLOC F("dd") DSN('"vsamdsn"') SHR REU"
     Open_process_close_file:  /* Assumes allocation worked */
       key='ALKNEW  'x2c('000000000384')Left('DFHLOG',8)  /* Direct read */
       "EXECIOVS 1 KSDSR" dd "(FINIS NOTIFY NLOG NCONT NTRACE) KEY("key")"
       If rc/=0 Then Do
         Call Process_Error
         Return rc
       End
       Else Call Process_Data
     Free_file:"FREE F("dd")";Return rc
     Process_Data:  /* Using same generic code to display error and data */
     Process_Error:
       Do Queued()
         Parse PULL line
         Say Substr(line,1,79)
       End
       Return 0

                               -------

   Example #3- open file (using read first with 0 records), set a key for
               generic generic read, get the next 10 records and then close the
               file:-
     Start_processing:
       Address TSO
       vsamdsn='CICS.$.DNDCICS.TEST.DFHCSD'
     Alloc_file:
       "ALLOC F("dd") DSN('"vsamdsn"') SHR REU"
       If rc/=0 Then Do
         Say 'Allocation error, RC='rc'.'
         Return rc
       End
     Open_file:
       "EXECIOVS 0 KSDSRF" dd "(OPEN LOG NCONT NTRACE)"
       If rc/=0 Then Do
         Call Process_Error
         Signal Close_file     /* Where else if no 1st. record */
       End
       Else Call Process_Data
     Set_pointer_get_1st_data: /* Assumes must get a hit */
       key='ALKNEW'            /* Set key for generic read     */
       "EXECIOVS 1 KSDSRG" dd "(NOO LOG NCONT NTRACE) KEY("key")"
       If rc/=0 Then Do
         Call Process_Error
         Return rc
       End
       Call Process_Data
     get_next_10_records_and_process:
       If rc=0 Then Do
         "EXECIOVS 10 KSDSRN" dd "(NOO NLOG NCONT NTRACE)"
         If rc=0 Then Call Process_Data
       End
     Close_file:
       "EXECIOVS 0 KSDSRN" dd "(FINIS NOTIFY NLOG NCONT NTRACE)"
       If rc/=0 Then Call Process_Error
     Free_file:"FREE F("dd")";Return rc
     Process_Data:  /* Using same generic code to display error and data */
     Process_Error:
       Do Queued()
         Parse PULL line
         Say Substr(line,1,79)
       End
       Return 0

                               *******

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    chgchar='&'
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End

/*--------------------------------------------------------------------*/
/* Make the user feel important.                                      */
/*--------------------------------------------------------------------*/
    ascb=Storage('224',4)
    asxb=Storage(d2x(c2d(ascb)+x2d('6c')),4)
    acee=Storage(d2x(c2d(asxb)+x2d('c8')),4)
    nam@=Storage(d2x(c2d(acee)+x2d('64')),4)
    name=Storage(c2x(nam@),30);len=c2d(Substr(name,1,1))
    name=Translate(Strip(Substr(name,2,len-1)),' ','.')
    name=Translate(name,' ',',')
    uc='ABCDEFGHIJKLMNOPQRSTUVWXYZ';lc='abcdefghijklmnopqrstuvwxyz'
    If cname1st Then Parse var name cname sname .
    Else Parse var name sname cname .
    cname=Substr(cname,1,1)Translate(Substr(cname,2),lc,uc)
/*--------------------------------------------------------------------*/

    If ima_macro Then Do
        Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";a_d=
        "(dl1,dl2)=DISPLAY_LINES";If rc/=0 Then dl1=0
        If \Datatype(dl1,'w') Then "(dl1)=LINE .ZFIRST"
        If dl1=0 Then Do;dl1='.ZFIRST';"LINE_AFTER" dl1"=' '";End
        Else If dl1>1 Then dl1=dl1+1
    End
/*  x=nl_h(Centre(' ooo000OOOO000ooo ',79,'*'))                       */

    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If \Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
/*      x=nl_h('*'Substr(line,1,77)'*')                               */
        x=nl_h(' 'Substr(line,1,78))
    End
/*  x=nl_h(Centre(' End ',79,'*'))                                    */
    If ima_macro Then Do
        If dl1='.ZFIRST' Then "DELETE .ZFIRST .ZFIRST";"CAPS=(caps)";Address
    End
    Return 0

Mark:Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
nl_h:Parse Arg 4 n#
    If ima_macro Then "LINE_BEFORE" dl1"=NOTELINE (n#)";Else Say n#;Return 0
