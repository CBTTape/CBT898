/*--------------------------ooo00 REXX 00ooo--------------------------*/
EXECIOVS:execiovs_ver='1.06'
Parse ARG parm#
    If parm#='?' Then Do;Address TSO "%EXECIOVD ?";Exit;End

    log#=1;log.=                                 /* log record number */
/*        Oper I/O   Key_req'd                                        */
/*        ---- ----- ---------                                        */
    val_op=,                                     /* Valid operations  */
           'R  INPUT  Y',                        /* Read              */
           'RN INPUT  N',                        /* Read Next         */
           'RP INPUT  Y',                        /* Read Previous     */
           'RL INPUT  N',                        /* Read Last         */
           'RF INPUT  N',                        /* Read First        */
           'RG INPUT  Y',                        /* Read Generic      */
           'W  OUTPUT N',                        /* Write             */
           'WE OUTPUT Y',                        /* Write             */
           'RW IO     Y',                        /* Re-write          */
           'D  IO     Y',                        /* Delete            */
           'SF INPUT  Y',                        /* Start Forward     */
           'SB INPUT  Y',                        /* Start Backward    */
           'KL INPUT  N',                        /* Key Length        */
           'LL INPUT  N',                        /* Record length     */
           ''
    eof='0004W'                             /* End Of File            */
    fop='0005E'                             /* File OPen              */
    dup='0008E'                             /* DUPlicate record       */
    nfd='0016W'                             /* Not FounD              */
    noi='0021E'                             /* Not Open for Input     */
    noo='0022E'                             /* Not Open for Output    */
    xrc=0                                   /* eXit Return Code       */

/*--------------------------------------------------------------------*/
/* Parse parameters.                                                  */
/*--------------------------------------------------------------------*/
    If Index(parm#,' TRA')>0 Then Trace r
    If Index(parm#,' KEY(')>0 Then Do
        Parse VAR parm# p1 'KEY(' ikey ')' p2;parm#=Space(p1 p2)
    End;Else ikey=
    If Index(parm#,' LEN(')>0 Then Do
        Parse VAR parm# p1 'LEN(' recl ')' p2;parm#=Space(p1 p2)
    End;Else recl=
    Parse VAR parm# #rec oper vsamdd #sat .;Parse VAR parm# '(' rest ')'
    rest=' 'rest' '
    Parse VAR oper vstype +4 oper

    If Index(rest,' LOG')>0 Then logit='Y'
    If Index(rest,' NOT')>0 Then notify='Y'
    If Index(rest,' CON')>0 Then cntu='Y'

    If Wordpos(vstype,'KSDS ESDS RRDS')=0 Then Do
        log.log#='SYNTAX - Invalid file type passed'
        If logit='Y' Then Push log.log#
        xrc=20;Signal write_log_and_exit
    End
    vp=Wordpos(oper,val_op)
    If vp=0 Then Do
        log.log#='SYNTAX - Invalid read/write indicator passed'
        If logit='Y' Then Push log.log#
        xrc=20;Signal write_log_and_exit
    End

    If oper='KL' | oper='LL' Then Do
        vsamdd="'"Strip(vsamdd,,"'")"'"
        If Sysdsn(vsamdd)/='OK' Then Do
            log.log#="ERROR - Dataset "vsamdd" not found"
            If logit='Y' Then Push log.log#
            xrc=20;Signal write_log_and_exit
        End
        Call get_key_length
        Exit 0
    End

    Parse Value Subword(val_op,vp+1,2) With otype key_req .
    otype=Strip(otype)

    If Index(rest,' FIN')>0 Then close_it='Y'
    If Index(rest,' OPENF')>0 Then Do;open_it='Y';fop=;End
    If Index(rest,' NOO')>0 Then open_it='N'
    If Index(rest,' OPEN ')>0 Then open_it='Y'
    If Index(rest,' SKI')>0 Then skip_it='Y'
    If Index(rest,' STE')>0 Then Do
        log.log#="WARNING - STEM variables not supported.",
                 "Return data placed on stack."
        log#=log#+1
    End
/*--------------------------------------------------------------------*/

    If #rec=0 & close_it='Y' Then Signal close_file

open_file:
    If open_it/='N' Then Do;error_ok=fop;Call open(otype);End
    If open_it='Y' & #rec=0 Then Signal exi1

proces:
    If key_req='Y' Then Do
        If ikey/='' Then Do
            "NEWSTACK";Queue ikey
        End
    End
    Else If Datatype(#sat)='NUM' & #sat>2 Then Do
       error_ok=
       #rec#=#rec;#rec=#sat-1;#sk#=skip_it;skip_it='Y'
       x=nk_proc_i('READNEXT',#rec)
       #rec=#rec#;skip_it=#sk#
    End

    Select
        When oper='R' Then Do
           If #rec='*' Then #rec=Queued()
           error_ok=;i=0
           Do #rec
               Parse PULL key
               xrc=0
               i=i+1;line.i=k_proc_i('READ',key)
               If xrc/=0 Then line.i=rxvsam_returnmsg "- KEY'"key"'"
           End
           "DELSTACK";"NEWSTACK"
           Do j=1 To i;Queue line.j;End
        End
        When oper='RG' Then Do
           "DELSTACK";error_ok=
           x=k_proc_i('READGENERIC',ikey)
           "NEWSTACK";Queue x
        End
        When oper='RN' Then Do
           If Queued()>0 Then Do
               Parse PULL key
               error_ok=;x=k_proc_i('STARTFWD',key)
               "DELSTACK"
           End
           cntu='N';error_ok=eof;x=nk_proc_i('READNEXT',#rec)
        End
        When oper='RP' Then Do
           If Queued()>0 Then Do
               Parse PULL key
               error_ok=;x=k_proc_i('STARTBWD',key)
               "DELSTACK"
           End
           cntu='N';error_ok=eof;x=nk_proc_i('READPREV',#rec)
        End
        When oper='RL' Then Do
           error_ok=;#rec=1;X=nk_proc_i('READLAST',#rec)
        End
        When oper='RF' Then Do
           "DELSTACK";error_ok=
           key='00'x;x=k_proc_i('READGENERIC',key)
           "NEWSTACK";Queue x
        End
        When oper='D' Then Do
           error_ok=;If #rec='*' Then #rec=Queued()
           Do #rec
               Parse PULL key
               error_ok=;x=k_proc_i('READ',key)
               If xrc=0 Then x=k_proc_i('DELETE')
           End
           "DELSTACK"
        End
        When oper='W' Then Do
            x=nk_proc_o('WRITE',#rec);"DELSTACK"
        End
        When oper='RW' & vstype='ESDS' Then Do
           Parse PULL #rec;Parse PULL new_rec
           error_ok=;cntu='N';x=k_proc_i('READ',#rec-1)
           my_rec=new_rec
           If xrc=0 Then Do
               my_rec=Substr(my_rec,1,length(x))
               x=k_proc_i('REWRITE',(#rec-1)*80)
           End
        End
        When oper='RW' Then Do
           error_ok=;If #rec='*' Then #rec=Queued()
           Do #rec%2
               Parse PULL key
               error_ok=;x=k_proc_i('READ',key)
               Parse PULL my_rec
               If xrc=0 Then Do
                   If recl/='' Then Do
                       If recl='ASIS' Then my_rec=Substr(my_rec,1,length(x))
                       Else If Datatype(recl) = 'NUM' Then,
                                my_rec=Substr(my_rec,1,recl)
                   End
                   x=k_proc_i('REWRITE',key)
               End
            End
            "DELSTACK"
        End
        When oper='SF' | oper='SB' Then Do
           Parse PULL key
           "DELSTACK";error_ok=
           If oper='SF' Then action='STARTFWD';Else action='STARTBWD'
           x=k_proc_i(action,key)
           "NEWSTACK";Queue x
        End
        Otherwise Do
            log.log#='SYNTAX - Operation "'oper'" unavailable'
            If logit='Y' Then Push log.log#
            xrc=20;Signal write_log_and_exit
        End
    End

    If log#>1 Then Do;cntu='N';Signal write_log_and_exit;End

close_file:
    If close_it='Y' Then Do
        close_it='N'                 /* Stop recursion if close fails */
        Call close
    End

exi1: Return xrc

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Open file:                                                         */
/* Valid opennings are OUTPUT, INPUT, IO                              */
/* Open is always attempted unless an explicit close is requested,    */
/* ie. No. of records = 0 and FINIS passed.                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
open: Arg otype
    rxvsam_result=RXVSAM('OPEN'otype,vsamdd,vstype)
    If rxvsam_result/=0 Then Do
        If Index(error_ok,Word(rxvsam_returnmsg,1))>0 |,
           error_ok='*' Then Return 0
        If rxvsam_returnmsg='RXVSAM_RETURNMSG' Then Do
            log.log#='ERROR - file was OPEN, however, RXVSAM variables',
                     'unavailable, file now CLOSED (RC=12).'
            rxvsam_returnmsg=log.log#
            Queue rxvsam_returnmsg
            Call log_errors;xrc=12;close_it='Y'
        End
        Else Do
            log.log#='ERROR - OPEN'otype' failed: '
            Call log_errors;xrc=8;close_it='N'
        End
        cntu='N'
        Signal write_log_and_exit
    End
    Return 0

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Close File:                                                        */
/*                                                                    */
/*--------------------------------------------------------------------*/
close:
    rxvsam_result=RXVSAM('CLOSE',vsamdd)
    If rxvsam_result/=0 Then Do
        If Index(error_ok,Word(rxvsam_returnmsg,1))>0 |,
           error_ok='*' Then Return 0
        x=wlax8('ERROR - CLOSE failed:')
    End
    Return 0

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Non-keyed process input (source off stack):                        */
/* Valid processes are  READNEXT, READPREV, READLAST.                 */
/*                                                                    */
/*--------------------------------------------------------------------*/
nk_proc_i: Parse Arg action,my_rec
    "NEWSTACK"
    If #rec='*' Then #rec=999999
    Do #rec
        rxvsam_result=RXVSAM(action,vsamdd,,'MY_REC')
        If rxvsam_result/=0 Then Do
            If Word(rxvsam_returnmsg,1)=eof Then xrc=2
            If Index(error_ok,Word(rxvsam_returnmsg,1))>0 |,
               error_ok='*' Then Return 0
            x=wlax8('ERROR -' action 'failed:')
        End
        If skip_it/='Y' Then Queue my_rec
    End
    Return 0

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Non-keyed process output (source to stack):                        */
/* Valid processes are  WRITE.                                        */
/*                                                                    */
/*--------------------------------------------------------------------*/
nk_proc_o: Arg action,#rec
    If #rec='*' Then #rec=Queued()
    Do #rec
        Parse PULL my_rec
        rxvsam_result=RXVSAM(action,vsamdd,,'MY_REC')
        If rxvsam_result/=0 Then Do
            If Index(error_ok,Word(rxvsam_returnmsg,1))>0 |,
               error_ok='*' Then Return 0
            x=wlax8('ERROR -' action 'failed:')
        End
    End
    Return 0

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Keyed process input:                                               */
/* Valid processes are STARTBWD, STARTFWD, READ, DELETE, WRITE,       */
/*                     REWRITE.                                       */
/*                                                                    */
/*--------------------------------------------------------------------*/
K_proc_i: Parse Arg action,key
    rxvsam_result=RXVSAM(action,vsamdd,key,'MY_REC')
    If rxvsam_result=0 Then Return my_rec
    Else Do
        If Index(error_ok,Word(rxvsam_returnmsg,1))>0 |,
           error_ok='*' Then Return 0
        x=wlax8('ERROR -' action 'for "'key'" failed:')
    End
    Return 0

wlax8:log.log#=Arg(1);Call log_errors;xrc=8;Call write_log_and_exit
/*--------------------------------------------------------------------*/
/*                                                                    */
/* Write End of log and replay it if LOG parameter passed.            */
/*                                                                    */
/*--------------------------------------------------------------------*/
write_log_and_exit: NOP
    If cntu='Y' Then Return xrc
    log#=log#+1;log.log#='... End of LOG'
    #tr=Trace('o');If notify='Y' Then Do i=1 To log#;Say log.i;End
    If close_it='Y' Then Call close
    Exit xrc

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Log the error and return to calling paragraph.                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
log_errors: nop
    log#=log#+1
    log.log#='  Return msg -->  ' rxvsam_returnmsg;log#=log#+1
    log.log#='  Error msg -->   ' rxvsam_vsamerrormsg;log#=log#+1
    If cntu='Y' Then Return 0
    If logit='Y' Then Push rxvsam_returnmsg
    Return 0

get_key_length:
    x=Outtrap('line.',500,'NOCONCAT');#msg=MSG('On')
    Address TSO "LISTC ENT("vsamdd") ALL"
    x=Outtrap('Off');x=MSG(#msg)
    keyl=
    If oper='KL' Then Do i=1 To line.0
        If Index(line.i,'KEYLEN-')=0 Then Iterate
        Parse VAR line.i key .
        lp=Lastpos('-',key);keyl=Substr(key,lp+1)
        i=i+1;Parse VAR line.i key .
        lp=Lastpos('-',key);keyl=keyl Substr(key,lp+1)+1
        Leave
    End
    Else Do i=1 To line.0
        If Index(line.i,'AVGLRECL-')=0 Then Iterate
        Parse VAR line.i . key .
        lp=Lastpos('-',key);keyl=Substr(key,lp+1)
        i=i+1;Parse VAR line.i . key .
        lp=Lastpos('-',key);keyl=keyl Substr(key,lp+1)
        Leave
    End
    Push keyl
    Return 0
