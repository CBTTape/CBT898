/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* EXP: EXPort                                                        */
/* Routine to export the member or part there of to either another    */
/* PDS(member) or to 'userid.$(member)' from the command line.        */
/* Without parameters, data will be exported to member                */
/*   'userid.$($$$EXIMP)'....                                         */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     EXP      - EXPort driver                                       */
/*     IMP      - IMPort driver                                       */
/*   Panels:                                                          */
/*     CSMDSPMD o Member delete confirmation panel (required for "IMP"*/
/*                with the '/M' parameter).                           */
/*--------------------------------------------------------------------*/
EXP:exp_ver='2.04'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=;parm#=Translate(parm#);Parse VAR parm# parm1 .
    If Wordpos(parm1,'HELP ?')>0 Then Do
        Parse Source . . xcmd .
        Signal On Syntax Name TSO_help
        x=$BR('%'xcmd '??')
        Exit
    End
/*  If parm1="??" Then Signal TSO_help                                */

    Address ISREDIT
    "(lev)=MACRO_LEVEL"
    If lev>1 Then Do
        Parse VAR parm# labf ',' labt ',' lcmd del parm#
        If lcmd='EXM' | lcmd='EXPM' Then del=1
    End
    Parse Upper VAR parm# parm#

/*--------------------------------------------------------------------*/
nohelp:
/*--------------------------------------------------------------------*/
    userid=Userid();hlq=$alkhlqo()
    "ISREDIT (lrecl)=LRECL"
    lrecl=Parse_cons('/80',80,lrecl)
    If lrecl>80 Then trdsn='$256';Else trdsn='$'
    If Wordpos('/256',parm#)>0 Then Do
        trdsn='$256';parm#=Delword(parm#,Wordpos('/256',parm#),1)
    End
    If Wordpos('/2',parm#)>0 Then Do
        eximp="$$$EXIM2";parm#=Delword(parm#,Wordpos('/2',parm#),1)
    End;Else eximp="$$$EXIMP"
    deffile=hlq"."trdsn

    If parm1="??" Then Signal TSO_help
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL()
error_off_$ALKUVOL:Signal off Syntax

    If Sysdsn("'"deffile"'")/='OK' Then Do
        If lrecl/=80 Then lrecl=256
        Address TSO "ALLOC DA('"deffile"') NEW CATALOG TRACKS",
            unitvol "DSORG(PO) SPACE(60,15) DSNTYPE(LIBRARY)",
            "RECFM(F B) LRECL("lrecl") BLKSIZE(0)"
    End

#tr=Trace('o')
    If Wordpos(Word(parm#,1),'/E /B /V')>0 Then Do
        action=$Ttrunc(parm1,2,'/E,EDIT /V,VIEW /B,BROWSE *,BROWSE')
        Signal look_at_clipboard
    End

    "(member)=MEMBER"
    Trace o
    Call parsparm
    x=Trace(#tr)

/*--------------------------------------------------------------------*/
/* If operating as an Edit Macro get dataset name (member) or call    */
/* program GETDSN to extract the dataset name (member) from the screen*/
/* headline (edit/browse panels)....                                  */
/*--------------------------------------------------------------------*/
    Address ISPEXEC "VGET (zscreeni)";screeni=zscreeni
    If \ima_macro Then Do
        #msg=Msg('Off');dataset=
        Do i=1 To 50
            xx=Strip(Word(screeni,i),,"'")
            If Index(xx,'.')=0 Then xx=hlq'.'xx
            Parse Var xx yy '('
            If Sysdsn("'"yy"'")/='OK' Then Iterate
            dataset=xx;Leave
        End
        If dataset='' Then Do
            zedlmsg="Could not extract a valid dataset name from screen."
            Signal ext1
        End
        If Index(dataset,'(')>0 & Index(dataset,')')=0 Then Do
            zedlmsg="Incomplete dataset(member) combination in headline."
            Signal ext1
        End
        x=$copymem(dataset,procfile)
        If x=0 Then zedlmsg="Data exported to '"procfile"'."
        Else zedlmsg="Export failed."
        Signal ext1
    End

    "(status)=USER_STATE";"(dataset)=DATASET";"(changed)=DATA_CHANGED"
    If save='N' Then labelr='Y'
    If member='' Then var='DATASET'
    Else Do
        var="MEMBER"
        dataset = dataset"("member")"
    End

    If lev>1 Then Nop
    Else Do
        "PROCESS RANGE C M";"(cmd)=RANGE_CMD"
        If cmd='C' | cmd='M' Then Do
            If cmd = 'M' Then del=1
            "(labf)=LINENUM .ZFRANGE";"(labt)=LINENUM .ZLRANGE"
        End
        Else Do
            "(labf)=LINENUM .F"
            If rc=0 Then Do
                "(labt)=LINENUM .T"
                If rc/=0 Then "(labt)=LINENUM .ZLAST"
            End
            Else Do
                "(labf)=LINENUM .ZFIRST";"(labt)=LINENUM .ZLAST"
            End
        End
    End

    Call qdata
    Queue ''                                /* Dummy last             */
    dd='$D'Time('s');#msh=Msg('Off')
    Address TSO "ALLOC F("dd") DA('"procfile"') REU SHR"
    If rc/=0 Then Do
        Address TSO "DELSTACK"
        zedlmsg="Allocation of '"procfile"' failed, rc="rc1".";Signal ext1
    End

    If disp='MOD' Then Do
        Address TSO "EXECIO * DISKR "dd" (STEM line. FINIS)"
        If front Then Do
            Address TSO "EXECIO * DISKW "dd" (OPEN"
            Address TSO "EXECIO * DISKW "dd" (STEM line. FINIS)"
        End
        Else Do
            Address TSO "EXECIO * DISKW "dd" (STEM line. OPEN)"
            Address TSO "EXECIO * DISKW "dd" (FINIS"
        End
    End
    Else Address TSO "EXECIO * DISKW "dd" (FINIS"
    Address TSO "DELSTACK"
    Address TSO "FREE F("dd")"

    If del Then Do
        "LABEL &LABF=.LABF"
        "LABEL &LABT=.LABT"
        "DELETE .LABF .LABT"
    End
    "USER_STATE=(status)"

    If action/='' Then Signal look_at_clipboard

/*--------------------------------------------------------------------*/
/* Set up message line...                                             */
/*--------------------------------------------------------------------*/
    If \impmsg Then zedlmsg="Data exported to '"procfile"'."
    Else zedlmsg="Data ready to be imported into other dataset."
ext1:
    Parse VAR procfile expdsn01 '(' .
    Address ISPEXEC "VPUT (expdsn01) PROFILE"
erx1:
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Exit

look_at_clipboard:
    Address ISPEXEC "&ACTION DATASET('&deffile(&EXIMP)')"
    Exit

parsparm:
    If parm1="*" Then Do
        "ISPEXEC VGET (expdsn01) PROFILE";parm1=expdsn01
    End

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    del=0
    #tr=Parse_cons('TRACE','R','N')
    If #tr='N' Then #tr=Parse_cons('/TRACE','R','N',2)
    If Parse_cons('/2',1,0) Then eximp="$$$EXIM2"
    all=Parse_cons('/X','X','ALL')
    If all='ALL' Then all=Parse_cons('/NX','NX','ALL')
    If lev<2 Then Do
        If all='X' | all='NX' Then Nop;Else del=Parse_cons('/M',1,0)
    End
    If del=0 Then del=Parse_cons('/M',1,0)
    sepr=Parse_cons('/S',1,0)
    idnt=Parse_cons('/I',1,0)
    If idnt Then sepr=0
    disp=Parse_cons('/A','MOD','SHR')
    asis=Parse_cons('/AS',1,0,3)
    screen_dump=Parse_cons('/SD',1,0,3)
    n_line_mix=Parse_cons('/NLM',1,0,4)
    n_line=Parse_cons('/NL',1,0,3)
    If n_line_mix Then n_line=1
    If n_line_mix Then screen_dump=1
    If n_line Then screen_dump=1
    If asis Then all='NX'
    front=Parse_cons('/F',1,0);If front Then disp='MOD'
    fdsn=Parse_cons('/D',1,0)

    action=parse_cons('/EA','EDIT','NULL')
    If action='' Then action=parse_cons('/VA','VIEW','NULL')
    If action='' Then action=parse_cons('/BA','BROWSE','NULL')

    Parse VAR parm# parm1 parm2 parm#_rest

/*--------------------------------------------------------------------*/
/* Last paramater assumed member or DSN(member)                       */
/*--------------------------------------------------------------------*/
    If parm1/='' Then Do
        If Substr(parm1,1,1)='?' Then Do
            Parse VAR parm1 '(' membern ')' .
            "XE "parm1                      /* Call "XE" as a macro   */
            If rc/=0 Then Do
                zedlmsg='"XE" is not available. Processing terminated.'
                Signal erx1
            End
            Address ISPEXEC "VGET (xedsname) PROFILE"
            If xedsname='' Then Do
                zedlmsg="Alias not found or not executing under 'XE'",
                        "umbrella."
                Signal erx1
            End
            If parm2/='' Then parm1="'"xedsname"("parm2")'"
            Else Do
                If membern/='' Then parm1="'"xedsname"("membern")'"
                Else parm1="'"xedsname"'"
            End
            If Index(xedsname,'*')>0 Then Do
                zedlmsg="Cannot query alias on wildcard name '"||,
                        xedsname"'."
                Signal erx1
            End
        End
        If Substr(parm1,1,1)/="'" Then parm1="'"hlq"."parm1"'"
        lb=Index(parm1,'(')
        Select
            When fdsn Then Call process_dsn
            When lb>0 Then Call process_dsn
            When Index(parm1,'.')>8 Then Call process_dsn
            When Length(parm1)>8 Then Call process_dsn
            Otherwise Do
                x=$vername(parm1)
                If x/=0 Then Do
                    zedlmsg='Invalid member name.';Signal ext1
                End
                If Listdsi(parm1)/=0 Then procfile=deffile'('parm1')    '
                Else Do
                    Parse VAR parm1 "'" procfile "'"
                    If procfile='' Then procfile=hlq"."parm1
                    If parm2 /= '' Then procfile=procfile"("parm2")"
                    Else procfile=procfile"("member")"
                End
            End
        End
        impmsg=0
    End
    Else Do
        procfile=deffile"("eximp")";impmsg=1
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Process parameter as DSNAME (member).                              */
/*--------------------------------------------------------------------*/
process_dsn:
    Parse VAR parm1 parm1 '(' newmemb ')'
    procfile=Strip(parm1,,"'")
    If procfile='' Then Do
        If parm1/='' Then procfile=hlq'.'parm1;Else procfile=deffile
    End
    If newmemb='' Then Do
        Select
            When parm2/=''  Then newmemb=parm2
            When member/='' Then newmemb=member
            Otherwise newmemb=eximp
        ENd
    End
    x=Listdsi("'"procfile"'")
    If rc/=0 Then Do
        Parse VAR sysmsglvl2 . zedlmsg;Signal ext1
    End
    If sysdsorg="PO" Then procfile=procfile'('newmemb')'
    Return 0

/*--------------------------------------------------------------------*/
/* Build data in the REXX Q                                           */
/*--------------------------------------------------------------------*/
qdata:
    Address TSO "NEWSTACK"
    #tr=Trace('O')
    If sepr & \front Then Do
        sep='*'Copies('-',69)'*';Queue '*';Queue sep;Queue '*'
    End
    If idnt Then Do
        "(pds)=DATASET";"(mmm)=MEMBER"
        Queue '*'
        Queue '*'Copies('-',70)'*'
        If mmm/='' Then xx="*  From '"Strip(pds)"("Strip(mmm)")'"
        ELse xx="*  From '"Strip(pds)"'"
        Queue Substr(xx,1,71)'*'
        Queue '*'Copies('-',70)'*'
        Queue '*'
    End
    If screen_dump Then Do
        Do While screeni/=''
            xx=Substr(screeni,1,80);screeni=Substr(screeni,81)
            If n_line | n_line_mix Then Do
                Parse VAR xx 2 pref +6 2 ch1 +1 2 ch2 +2 8 yy
                If ch2='. ' Then Iterate
                If Wordpos(ch1,'= - .')>0 | Datatype(pref,'w') Then Nop
                Else Iterate
                If \n_line_mix & Wordpos(ch1,'= -')=0 Then Iterate
                xx=yy
            End
            Queue Substr(Translate(xx,' ','00'x),2)
        End
        zedlmsg="Screen dumped."
        Return 0
    End
    qx=0
    sepl=Copies('- ',36);suff='Line(s) not Displayed'
    Do i=labf to labt
        "(line)=LINE &I"
        If all/='ALL' Then Do
            "(xstat)=XSTATUS &I"
            If xstat/=all Then Do
                If asis Then qx=qx+1
                Iterate
            End
        End
        If qx>0 Then Do
            olay=' 'qx suff
            Queue Overlay(olay,sepl,73-Length(olay))
            qx=0
        End
        Queue line
    End
    If sepr & front Then Do
        sep='*'Copies('-',69)'*';Queue '*';Queue sep;Queue '*'
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

TSO_help:
    Signal Off Syntax;#tr=Trace('o')
    chgchar='&'                              /* Variable substitute   */
    n_st=mark(2)                            /* Mark next line         */
/*

  Good &TOD. &CNAME..

  The EXP and IMP commands are used to copy members or part there
  of to another member or to dataset the 'CLIPBOARD', which by default
  is '&DEFFILE.(&EXIMP.)', for subsequent processing.
  Note - The name of the clipboard is determined by the LRECL of the
         dataset/member being edited and will be either
         '&HLQ..$' or '&HLQ..$256'

  You may select lines for EXPort by using a Cnnn or block CC line
  command or .F (from) .T (to) labels. By default, all lines will
  be copied.  You may select the destination for the IMPort by
  using either the A (After) or B (Before) line commands. By
  default, the destination will be after the last line.

  Permissable EXP parameters:
  /A       - Append to exported file/member.

  /ASis    - Exports NX lines and notate the excluded lines in the
             exported member with the data line representing the
             excluded message line. This will invalidate valid
             programming code (but probably so would export non-excluded
             lines only).
             This will force a '/NX' parameter (and would revers '/X'
             parameter if supplied).

  /B       - Browse the clipboard member.

  /BA      - Browse the clipboard member after the export action.

  /D       - Force last parameter to be interpreted as a DSname.
             Used in instances when length of unqualified, single
             qualifier's length < 9 characters and would be
             mis-interprteted as a member name.

  /E       - Edit the clipboard member.

  /EA      - Edit the clipboard member after the export action.

  /F       - "Append" to exported file/member (to the Front).

  /I       - Identify source. This parameter will indicate where the
             source came from.  Use of this parameter will turn the
             '/S' parameter off.

  /M       - Move lines. All lines exported will be deleted from
             source. This is an alternative to using the Mnnn or
             block MM line commands. If this parameter is combined with
             '/X' or /NX' line will NOT be deleted.

  /NL      - NoteLines only.
             This option will also process MSG, INFO, DATA and
             excluded lines as well.
             (This will process the entire screen, cannot line select.)

  /NLM     - NoteLines mixed with data lines.  This is the same as
             '/SD' (screen Dump) without the headers and sequence line
             data.
             (This will process the entire screen, cannot line select.)

  /NX      - Non-eXclude lines only. ('/AS' will force this value.)

  /S       - Place a seperator line between the original data and
             appended data.  Usually used with the '/A' parameter.
             This parameter will automatically set the append
             feature.

  /SD      - Screen dump. Full screen dump inluding headers and line
             numver data (which includes noteline, messageline and label
             indicators).
             (This will process the entire screen, cannot line select
             and there will be data loss of last 8 bytes.)

  /V       - View the clipboard member.

  /VA      - View the clipboard member after the export action.

  /X       - eXclude lines only.

  /2       - Use clipboard member "$$$EXIM2".

  /256     - Force output from 'CLIPBOARD' defined as LRECL=256
             regardless of the length of the source.

  /80      - Force output to 'CLIPBOARD' defined as LRECL=80 regardless
             of the length of the source.

  Permissable IMP parameters:
  /D       - Force last parameter to be interpreted as a DSname.
             Used in instances when length of unqualified, single
             qualifier's length < 9 characters and would be
             mis-interprteted as a member name.

  /M       - Move from source. This copies the source and then
             deletes it.

  /R       - Replace the member being edited. (Deletes all lines
             before the copy.)

  /SW      - Swap contents of current member with imported
             source.

  /2       - Use clipboard member "$$$EXIM2".

  /256     - Force input from 'CLIPBOARD' defined as LRECL=256
             regardless of the length of the source.
  /80      - Force input from 'CLIPBOARD' defined as LRECL=80 regardless
             of the length of the source.

  The first remaining parameter (after processing permissable
  parameters) will be considered as the source/destination which
  can be specified as follows:

   no parameter
     Member '&DEFFILE.(&EXIMP.)'. Dataset will need to be
     pre-defined. This is refered to as the 'CLIPBOARD'.

   member_name or (member_name) or ()
     Member 'userid.$(member_name)'. Dataset 'userid.$' will need
     to be pre-defined with DCB=(FECFM=FB,LRECL=80,BLKSIZE=0)
     attributes.  () by itself will copy using the same member name
     as that being edited.

   dataset_name
     Uses the same name as member being edited in the supplied
     dataset name.  The dataset must exist. Use /D parameter if
     unqualified length < 9 bytes.

   *
     Uses the last dataset_name used in the previous EXP/IMP
     command. Use this feature if the command line is not long
     enough to accept all parameters after you have entered the
     dataset on a 'dummy' execute.

   dataset_name(member_name)
     As the parameter indicates.  The dataset must exist.

   ?alias {member}
     Interfaces with XE (if available to you) and returns the
     dsname associated with the alias. If you pass a second
     parameter, it will be treated as a member name and combined
     accordingly with the returned dsname.

  You may use the IMP macro in batch (another macro) by issuing the
  macro command followed by a label where the file is to be
  imported to:
      eg. "ISREDIT IMP 'T66KKK.JCL.CNTL(IEFBR14)' .ALAB"

  You can do multiple imports as follows:
          "ISREDIT IMP 'T66KKK.JCL.CNTL(JOB1)' .ALAB"
          "ISREDIT IMP 'T66KKK.JCL.CNTL(JOB2)' .BLAB"
          "ISREDIT IMP 'T66KKK.JCL.CNTL(JOB3)' .CLAB"
          "ISREDIT IMP 'T66KKK.JCL.CNTL(JOB4)' .ZCSR"

  NOTE - You must set up the labels yourself either
         explicitly/implicitly by the batch macro.
       - Have not road-tested the EXP in batch. Use at your own
         risk.

*/

    n_en=mark(-2)                           /* Mark prev 2 line       */

    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End
    Signal On Syntax Name ret_syntax_$WHOAMI
    cname='there';cname=$Whoami('C')
ret_syntax_$WHOAMI:Signal Off Syntax
    If parm2/='/NC' Then Address TSO "CLEAR"
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1 || 'var' || p2'
        End
        Say ' 'Substr(line,1,78)
    End
    Exit 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
