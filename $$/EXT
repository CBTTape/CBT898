/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* Member : EXT                                                       */
/*                                                                    */
/* EXRract data from a browsed dataset that is too big to view/edit.  */
/*                                                                    */
/* Execute with a parameter of '?' or browse below for more details.  */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     EXT      - Driver                                              */
/*     $ALKACCT o Routine to set account code.                        */
/*     $ALKJC   o Routine to set job classes.                         */
/*     $CSTRING o Routine to verify auto generated output name.       */
/*     $VERNAME o Routine to verify auto generated output name.       */
/*     $WHOAMI  o Routine to personalise greeting.                    */
/*     BATCHISP o Routine to generate batch ISPF JCL for batch        */
/*                processing.                                         */
/*                                                                    */
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
EXT:ext_ver='1.06'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#
    Parse SOURCE . . xcmd .
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Test APPLID and if not the default edit environment, reinvoke this */
/* routine using the appropriate edit environment thus ensuring       */
/* normal PF Key settings.                                            */
/*                                                                    */
/*--------------------------------------------------------------------*/
ini0:
    u=Sysvar(Sysuid);p=Sysvar(Syspref);If u/=p&p/='' Then u=p'.'u;hlq=u
    zedsmsg=;spref=Sysvar(syspref)
    If parm#='??' Then Signal help_me
    If Wordpos(Word(parm#,1),'? HELP')>0 Then Do
        Signal on Syntax Name Help_me
        x=$BR(xcmd "??");Exit
    End

/*--------------------------------------------------------------------*/
/* Test if self invoked as a macro.                                   */
/*--------------------------------------------------------------------*/
    "VGET (extmacro) SHARED"
    If extmacro='Y' Then Do
        extmacro=;"VPUT (extmacro) SHARED"
        Call ext_macro1
        Return 0
    End

    If Wordpos('/#',Translate(parm#))>0 Then Do
        addpop=1;parm#=Delword(parm#,Wordpos('/#',Translate(parm#)),1)
    End;Else addpop=0
    Parse VALUE 'Y 99999999' With batch maxr sc ec rr imem
    #tr=Trace('o')
    Call parse_parms
    x=Trace(#tr)
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL()
error_off_$ALKUVOL:Signal off Syntax

redo_parms:
    If stringss & sc||ec||rr='' Then Signal find_string
    If imem/='' Then Do
        zedlmsg="Not on a PDS member you don't whacker."
        Signal ext1
    End
/*--------------------------------------------------------------------*/
/* Evaluate numbers                                                   */
/*--------------------------------------------------------------------*/
eval_extract_lines:
    If \Datatype(sc,'W') | sc=1 Then sc=0
    If  Datatype(rr,'w') Then ec=sc+rr;Else rr=0
    If \Datatype(ec,'w') Then ec=0
    If ec='' Then ec=0
    If sc>1 Then skip='SKIP('sc-1') -';Else skip=
    Select
        When (rr>0) Then count='COUNT('rr')'
        When (ec>0) Then Do
            If sc=0 Then count='COUNT('ec-sc')'
            Else count='COUNT('ec-sc+1')'
        End
        Otherwise count=
    End

/*--------------------------------------------------------------------*/
/* Create output dataset name                                         */
/*--------------------------------------------------------------------*/
    If sc=0 Then sc=1
    If ec=0 Then ec=maxr
    Else If rr>0 Then ec=sc+rr
    If idsn='' Then Do
        "VGET (zscreeni)";screeni=zscreeni
        #msg=Msg('Off');idsn=
        Do i=1 To 50
            xx=Strip(Word(screeni,i),,"'")
            If Index(xx,'.')=0 Then xx=hlq'.'xx
            Parse Var xx yy '(' imem
            If Sysdsn("'"yy"'")/='OK' Then Iterate
            idsn=xx;Leave
        End
        If idsn='' Then Do
            zedlmsg="Could not extract a valid idsn name from screen."
            Signal erx1
        End
        If Index(idsn,'(')>0 & Index(idsn,')')=0 Then Do
            zedlmsg="Incomplete idsn(member) combination in headline."
            Signal erx1
        End
    End
    Parse VAR idsn idsn '(' imem  ')' .
    x=eval_odsn();rr=
scr1:
    If addpop Then Do
        If first_time/='N' Then Do
            Call build_panel
            first_time='N';zwinttl='EXTract Data';#popr=6;#popc=12
        End
        Address ISPEXEC
        zcmd=;"SETMSG MSG(ISRZ001)"
        "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
        "DISPLAY PANEL(EXTP) CURSOR(&CSR1)";rc1=rc;"REMPOP"
        If rc1/=0 Then Do
            zedlmsg="Parameter entry screen abandoned."
            "SETMSG MSG(ISRZ001)"
            Signal ext1
        End
        Address
        If zcmd='?' Then Do;"%"xcmd "?";Signal scr1;End
        If findstr/='' & sc||ec||rr='' Then Signal find_string
        If findstr/='' & sc+0||ec+0=1||maxr Then Signal find_string
        addpop=0
        Signal redo_parms
    End
    addpop=1

    If sc=1 & ec=maxr Then Do
        zedlmsg="You do not seem to be making an extract as starting",
                "record is 1 and ending is processing limit of" maxr".",
                "please change and try again. If you are making a scan",
                "extrct clear the record no fields and ensure you",
                "enter a find string."
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Signal scr1
    End
    x=eval_odsn()
    If odsn=idsn Then Do
        zedlmsg="Cannot extract to same named dataset. Has output",
                "name been truncated ?????"
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Signal scr1
    End

batch_job:
    Call create_jobc
    If sc+0||ec+0/=1||maxr Then Call create_EXT_jcl
    If findstr/='' Then Call create_find_jcl
    Queue ''
    Call process_jcl
    "SETMSG MSG(ISRZ001)"

    Signal ext1

/*--------------------------------------------------------------------*/
/* Tell that SCREENC is missing                                       */
/*--------------------------------------------------------------------*/
screenc_not_found:
    zedlmsg = "Routine SCREENC not found. Make it available or pass",
             "dataset name on 'IN=...' parameter."
    Signal ext1

/*--------------------------------------------------------------------*/
/* Create JCL                                                         */
/*--------------------------------------------------------------------*/
create_jobc:
    Parse VAR odsn '.' odsn;odsn=spref'.'odsn
    Signal on Syntax Name no_account
    acct=;xcl='A';mcl='X'
    v1='def_ex def_hd def_bb def_vm def_ac'
    Interpret "Parse Value $alkjc(v1) With" v1
    acct=def_ac;xcl=def_ex;mcl=def_hd
no_account:
    If acct='' Then Do
        zedlmsg="Account # not available. Please enter manually."
        "SETMSG MSG(ISRZ001)"
    End

    dcb='DCB=(RECFM='sysrecfm ||,
        ',LRECL='syslrecl     ||,
        ',BLKSIZE=0)'
    jobid=Substr(Userid()'EXT',1,8)
    sep1='//*'Copies('-',67)'*'
    sep2='//*'Copies(' ',67)'*'
    Address TSO "NEWSTACK"

    prog='EXTRACT-LINES'
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(prog);If x/='' Then prog=x
error_off_alkjcpg:Signal off Syntax
    Queue "//"jobid" JOB "acct",'"prog"',"
    Queue '//         CLASS='xcl',COND=(4,LT),'
    Queue '//         MSGCLASS='mcl','
    Queue '//         NOTIFY=&SYSUID'
    Queue sep1
    Return 0

create_EXT_jcl:
    Queue sep2
    If extract Then Do
    Queue Substr('//* Extracting lines:' sc 'to' ec'.',1,70)'*'
    Queue Substr("//* Fr: '"idsn"'.",1,70)'*'
    Queue Substr("//* To: '"odsn"'"odsnm,1,70)'*'
    Queue sep2
    Queue sep1
    If odis='NEW' Then Do
        Queue '//DELETEIT EXEC PGM=IDCAMS,REGION=5120K'
        Queue '//*'
        Queue '//SYSPRINT DD SYSOUT=*'
        Queue '//SYSIN    DD  *'
        Queue ' DELETE' odsn
        Queue ' '
        Queue ' IF MAXCC < 9 THEN SET MAXCC = 0'
        Queue '/*'
        Queue sep1
    End
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL(,,'J')
error_off_$ALKUVOL:Signal off Syntax
    Queue '//COPYDATA EXEC PGM=IDCAMS,REGION=5120K'
    Queue '//*'
    Queue '//INPUT    DD DISP=SHR,DSN='idsn
    Queue '//OUTPUT   DD DSN='odsn','
    If Wordpos(odis,'NEW MOD')>0 Then Do
        Queue '//            DISP=('odis',CATLG),'
        Queue '//            'unitvol','
        Queue '//            SPACE=(TRK,(150,150),RLSE),'
        Queue '//            'dcb
    End
    Else Queue '//            DISP='odis
    Queue '//*'
    Queue '//SYSPRINT DD SYSOUT=*'
    Queue '//SYSUDUMP DD SYSOUT=*'
    Queue '//SYSIN    DD  *'
    Queue ' REPRO INFILE(INPUT) OUTFILE(OUTPUT)  -'
    If skip/='' Then Queue ' 'skip
    If count/='' Then Queue ' 'count
    Queue ' '
    Queue ' IF MAXCC > 0 THEN DELETE -'
    Queue '   ' odsn
    Queue '/*'

    Return 0

/*--------------------------------------------------------------------*/
/* Create JCL                                                         */
/*--------------------------------------------------------------------*/
create_find_jcl:
    Call batchisp 'NJ NS NU QUEUE CONC(SYSEXEC,SYSPROC) BSS(2)'
    Queue ' ISPSTART CMD(%'xcmd' +'
    Queue "   IN='"odsn"' +"
    Queue '   F='findstr'('fcs','fce')'
    Queue '/*';Queue '//*';Queue sep1

    Return 0

/*--------------------------------------------------------------------*/
/* Process JCL                                                        */
/*--------------------------------------------------------------------*/
process_jcl:
    If subit/='Y' Then Do
        Queue ''
        "VGET ZTEMPF"
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        extmacro='Y';"VPUT (extmacro) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd")"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Address TSO 'DELSTACK'
        Signal hkp1
    End

    Queue "ZZ"
    #msg=Msg('On')
    x=Outtrap('line.',10,'NOCONCAT')
    Address TSO "SUBMIT * END(ZZ)"
    x=Msg(#msg)

    Address TSO 'DELSTACK'

    Do i=1 To line.0
        If Index(line.i,'SUBMITTED')>0 Then Do
            line=' 'line.i
            Parse VAR line ' JOB ' rest
            zedsmsg=;zedlmsg='JOB' rest
            Return 0
        End
    End

    Return 0

err1:
    rc1=rc
    Signal Off Error
    If rc >4Then "SETMSG MSG(&ZERRMSG)"
    Signal hkp1

erx1:
    zedlmsg=zedlmsg 'You may need to pass it as a "IN=dsname" parameter.',
           'Enter "TSO EXT ?" for more details.'
ext1:
    x=Msg('Off')
    "SETMSG MSG(ISRZ001)"
hkp1:
    Address ISPEXEC "LIBDEF ISPPLIB";Address TSO "DELETE '"pdsn"'"
    Exit

/*--------------------------------------------------------------------*/
/* Build notes for sub display                                        */
/*--------------------------------------------------------------------*/
find_string:
    If findstr='' Then Do
scr2:
        If first_time/='N' Then Do
            Call build_panel
            first_time='N';zwinttl='EXTract Data';#popr=6;#popc=12
        End
        Address ISPEXEC
        zcmd=;"SETMSG MSG(ISRZ001)"
        "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
        "DISPLAY PANEL(EXTP) CURSOR(&CSR1)";rc1=rc;"REMPOP"
        If rc1/=0 Then Do
            zedlmsg="Parameter entry screen abandoned."
            "SETMSG MSG(ISRZ001)"
            Signal ext1
        End
        Address
        If zcmd='?' Then Do;"%"xcmd "?";Signal scr2;End
        If batch='Y' Then Signal batch_job

    If odsn='' Then Do
        suff=Strip(Substr(Space(findstr,0),1,8))
        If $Vername(suff,'N')/='OK' Then suff='TEMPEXT'
        sl=Length(suff);il=Length(idsn)
        If il+sl+1>44 Then Do
            odsn=Substr(idsn,1,il-(sl+1))'.'suff
            odsn=$cstring(odsn,'..','.')
        End
        Else odsn=idsn'.'suff
    End
    sl=Length(findstr)-1
    msz=4*(1024*1024)                       /* Memory for read        */
    x=Listdsi("'"idsn"'")                   /* To return file's LRECL */
    #pr=msz%syslrecl                        /* No. records per read   */
    If \Datatype(fcs,'w') | fcs>fce Then fcs=1
    If \Datatype(fce,'w') | fcs<fce | fce>syslrecl Then fce=syslrecl
    Address TSO;"NEWSTACK"
    di='XI'Time('s');"ALLOC F("di") DSN('"idsn"') SHR REU"
    do='XO'Time('s')
    Parse VAR sysrecfm rf1 +1 rf2 +1 rf3;rfm=Space(rf1 rf2 rf3)
    lrecl=syslrecl;blksize=sysblksize
    pri=sysprimary%10;sec=sysseconds%4;typ=sysunits;dir=sysadirblk
    If typ='BLOCK' Then typ='BLOCK('pri')'
    "DELETE '"odsn"'"
    "ALLOC F("do") DSN('"odsn"')" typ "SPACE("pri","sec") DSORG(PS)",
           "RECFM("rfm") LRECL("lrecl") BLKSIZE("blksize")" unitvol
    eof=0                                   /* Enf of file (no)       */
    totr=0;outc=0;outl=maxr                 /* Total records accum    */
    #tr=Trace('o')
    Do Forever Until eof                    /* End of file test       */
        "EXECIO "#pr" DISKR "di" (STEM linei. OPEN)"
        If rc/=0 Then eof=1;totr=totr+linei.0
        Do i=1 To linei.0
            outc=outc+1;linex=linei.i
            If outc>outl Then Do;eof=1;leave;end
/*          Say Right(outc,5,'0') Substr(linex,1,72)                  */
            mc=Index(linex,findstr,fcs)
            If mc>0 Then If fce >= mc+sl Then Queue linex
        End
        Say '*'Centre(' Bufferred ',77,'-')'*'
        Address TSO "EXECIO * DISKW "do
    End
    "EXECIO 0 DISKR "di" (FINIS)";"EXECIO 0 DISKR "do" (FINIS)"
    "FREE F("di do")"

    Signal hkp1

eval_odsn:Trace o
    If odsn/='' Then rc1=Sysdsn("'"odsn"'");Else rc1='MISSING'
    If rc1/='OK' | odis='NEW' Then Do
        x=Listdsi("'"idsn"'");odis='NEW'
    End
    Else Do
        If odis='MOD' Then odsnm=' (appended).'
        Else odsnm=' (overwritten).'
    End
    Select
        When (odsn/='') Then NOP
        When (llq/='') Then odsn=idsn'.'llq
        Otherwise odsn=idsn'.F'Right(sc,7,'0')'.T'Right(ec,7,'0')
    End
    Parse VAR odsn odsn '(' .
    If Length(odsn) > 44 Then Do
        odsn = Substr(odsn,1,44)
        If Substr(odsn,44,1) = '.' Then odsn = Substr(odsn,1,43)
        odsnm = ' (truncated).'
    End
    Else odsnm='.'
    Return 0
/*--------------------------------------------------------------------*/
/* Build notes for sub display                                        */
/*--------------------------------------------------------------------*/
ext_macro1:
    n_st=mark(2)                            /* Mark next line         */
/*

    Hello &CNAME..

    This is the JCL to EXTract lines from the datest specified below.
    You may fine tune your parameters before submitting the job.
    Enter "SUB" on the command line or copy it into another dataset
    for later use.

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    Call process_source

    Return 0

/*--------------------------------------------------------------------*/
/* Help tutorial extracted from instream data                         */
/*--------------------------------------------------------------------*/
help_me:
    n_st=mark(2)                            /* Mark next line         */
/*

    Hello &CNAME..

    EXT is a processing routine to extract a specific number of
    contiguous lines from a browsed dataset. (Use this feature for
    datasets that cannot be viewed/edited.)

    A feature has been added to permit a string search based extract for
    large datasets outside the scope of view/edit. This can be appended
    onto a record number based extract or stand alone on thye full
    dataset.  The 'F=..' parameter will create a record extraction logic
    JCL.

    Record extraction is identified by the supply of a starting and/or
    ending record (or a record number counter) who are inside the scope
    of the full image of start=1 and end=&MAXR..

    Using parameter '/#' a user friendly input screen will be displayed
    where you can customise parameters on the fly (with the exception of
    the dataset).

    If you have SCREENC routine available, the source dataset will be
    extracted from the browse session, otherwise you will need to pass
    it as a "IN=dsn" parameter.

    This process is designed to execute in batch as it has been designed
    for datasets too big to view/edit.  On-line processing would be an
    oxi you moron.  However, if you do a full string scan the option is
    there to execute online (BATCH=N) but you would be a morom to do
    even that you ox.

    Permissable parameters:
      sl-el   : where 'sl' is start line and "el" is end line.
                Defaults are: sl - 1
                              el - &MAXR.

      sl.rl   : where "sl" is start line and "rl" is the number of
                lines to copy from there.
                Defaults are as above.

      HLQ=*   : Leave hlq ASIS.  By default, if no "OUT=dsn"
                parameter is used your syspref '&SPREF.' will be
                used.
      LLQ=ccc : Low level qualifier to append to the dataset name
                for output file.
      OUT=dsn : Fully qualified (unquoted) name of the output
                dataset.
      IN=dsn  : Fully qualified (unquoted) name of the input
                dataset if not to be extracted from a browse
                session.
      MOD     : Append onto the output dataset. For this feature
                you will need to control the output dataset name
                and not let it default. (Refer GOTCHA #1 below.)
      NEW     : Build JCL to delete output dataset as first step.
      SHR     : Default.
      SUB     : Submit JCL without viewing it.
      /#      : Display a parameter entry screen.
      /F=string(scol,ecol)
              : Find 'string' bounded by 'scol' and 'ecol', default is
                1 and "LRECL". Unless an 'OUT=..' parameter is passed,
                "string" less spaces (truncated to first 8 bytes) is
                appended to input name. If string contains illegal
                valid name characters, '.TEMPEXT' is appended.
                Imbedded spaces in the 'string' is NOT permitted and
                will produce unpredictable results.

    GOTCHAS:
    ~~~~~~~~
      1. By default if no output dataset name qualifiers are
         supplied like "OUT=.." or "LLQ=.." then the input dataset
         name with qualifiers "F000sl" and "T000el" paded out with
         zeros will be appended. This may cause name overflow of 44
         characters and truncation WILL occur. This truncation may
         cause overwrite of existing datasets.

      2. ISPF browse panel has a capacity of displaying only 42
         bytes. So if your dataset name is > 42 bytes, you will need
         to pass it manualy on an "IN=dsn" parameter.

      3. Certain parameter combinations starting from record 1 may
         result in the entire file being copied. If this is what you
         actually want, you may be better off using DFDSS or
         something else for efficiency.
         Formats that may cause this condition:
            1-         : Missing "el"
            1-99999999 : Very large "el"
            1.99999999 : Very large "rl"
                       : Missing "sl" defaults to 1 causing above
                         situation.

                              *****

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */
    Call process_source

    Exit

process_source:
    chgchar='&'
    cname='there'
    Signal on Syntax Name error_off_1
    cname=$Whoami('C')
error_off_1:
    Call Off Error

    today=Date('e')
    If ima_macro Then Do;Address ISREDIT;"RESET";"(caps)=CAPS";"CAPS=OFF";End
    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0 Then Do Forever
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1||'var'||p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    If ima_macro Then Do;"CAPS=(caps)";Address;End

    Return 0

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)"
    Else Say n#;Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Interpret syntaxact;Signal Value retlab

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    extract=1
    #tr=parse_cons('TRACE','R','O',2)
    If #tr='O' Then trace = parse_cons('/TR','R','O',3)

    subit=parse_cons('SUB',,,2)
    odis=parse_cons('NEW',,'?')
    If odis='?' Then odis=parse_cons('MOD',,'?')
    If odis='?' Then odis=parse_cons('OLD',,'?')
    If odis='?' Then odis='SHR'

    llq=parse_varb('LLQ=','?');If llq='?' Then llq=
    odsn=parse_varb('OUT=','?');If odsn='?' Then odsn=
    If Substr(odsn,1,1)="'" Then odsn=Strip(odsn,,"'")
    idsn=parse_varb('IN=','?');If idsn='?' Then idsn=
    If Substr(idsn,1,1)="'" Then idsn=Strip(idsn,,"'")


    findstr=parse_varb('F=','?')
    If findstr='?' Then findstr=parse_varb('/F=','?')
    If findstr/='?' Then Do
        findstr=Translate(findstr,' ',',')
        Parse VAR findstr findstr '(' fcs  fce ')'
        stringss=1
    End
    Else Do;stringss=0;findstr=;End

    If Lastpos('-',parm#) > 0 Then Do
        Parse VAR parm# sc '-' ec .
        If sc /= '' Then sc = Word(sc,words(sc))
    End
    If Datatype(sc) = 'CHAR' & Datatype(ec) = 'CHAR' Then Do
        If Lastpos('.',parm#) > 0 Then Do
            Parse VAR parm# sc '.' rr .
            If sc /= '' Then sc = Word(sc,words(sc))
        End
    End
    If Datatype(sc) = 'CHAR' & Datatype(ec) = 'CHAR' &,
       Datatype(rr) = 'CHAR' Then Do
       #parm#=parm#;parm#=
       Do Forever
           Parse VAR #parm# xxx #parm#
           If Datatype(xxx) = 'NUM' & Index(xxx,'.') = 0 Then Do
               sc = xxx
               Leave
           End
           parm#=parm# xxx
           If #parm# = '' Then Leave
       End
       parm#=parm# #parm#
    End
    If idsn='' & parm#/='' Then Do
        Parse Var parm# dsn .
        If Substr(dsn,1,1)/="'" Then dsn="'"Sysvar(syspref)"."dsn"'"
        xx=Listdsi(dsn)
        If xx<5 | sysreason=9 | sysreason=25 Then idsn=Strip(dsn,,"'")
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
/*--------------------------------------------------------------------*/
/* Allocate panel                                                     */
/*--------------------------------------------------------------------*/
build_panel:
    #tr1=Trace('o')
    pdsn= hlq'.$$$TEMP.EXTPANEL'
    #msg=Msg('Off')
    Address TSO
    "DELETE '"pdsn"'"
    "ALLOC DA('"pdsn"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0)" unitvol "DIR(1)",
       "RECFM(F B) REU"
    "FREE DA('"pdsn"')"
    "NEWSTACK"
    Call make_mem_1;#tr=Trace('o')
    Do i=n_st To n_en;Queue Sourceline(i);End;Queue ''
    x=Trace(#tr);dd='TT'Time('s')
    "ALLOC F("dd") DA('"pdsn"(EXTP)') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    Address
    Address ISPEXEC "LIBDEF ISPPLIB DATASET ID('&PDSN') STACK"
    x=Msg(#msg)
    x=Trace(#tr1)
    Return 0

 Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_1:
    n_st = mark(2)                          /* Mark start of data     */
/*
)ATTR DEFAULT(%+_)
    _ TYPE(INPUT)   INTENS(HIGH) COLOR(RED)    HILITE(USCORE)
    @ TYPE(TEXT)    INTENS(HIGH) COLOR(YELLOW)
    + TYPE(TEXT)    INTENS(LOW)  COLOR(GREEN)
    $ TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)
    ~ TYPE(TEXT)    INTENS(LOW)  COLOR(BLUE)
)BODY EXPAND(\\) WINDOW(60,19)
%&SID%=>_ZCMD
+
+Enter parameters below:
+Infile....$&IDSN
+Outfile..._ODSN                                          +
+Disp......_Z  +     Mod, New, Old or Shr
+Start rec._SC      +Starting record #
+End rec..._EC      +Ending record #
+Find parameters:
+String...._FINDSTR                                       +
+Start col._FCS +    Starting column for search
+End col..._FCE +    Ending column for search
+Batch....._Z+       Yes or No
+
+Press@ENTER+to use above parameters
+or@END/CANCEL+to abandon.
+Enter@?+for tutorial.
)INIT
 &SID=&ZSYSID
 .ZVARS='(ODIS,BATCH)'
 &GC001='String must be entered if a column delimiter is used.'
)END
 VER(&ODSN,DSNAMEQ)
 &ODIS=TRANS(TRUNC(&ODIS,1) M,MOD N,NEW O,OLD *,SHR)
 VER(&SC,NUM)
 VER(&EC,NUM)
 IF (&FCS ¬= &Z)
    VER(&FINDSTR,NB,MSG=GC001)
 IF (&FCE ¬= &Z)
    VER(&FINDSTR,NB,MSG=GC001)
 &BATCH=TRANS(TRUNC(&BATCH,1) N,N *,Y)
)END
*/
    n_en = mark(-2)                         /* Mark end of data       */
    Return 0
