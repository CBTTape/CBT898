/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* FLIPH - FLIP H(orizontally):                                       */
/*                                                                    */
/* Swaps text around by column positions.                             */
/* Needs a start middle and end parameter.                            */
/* For 2 parameters, the end is assumed to be the end of record.      */
/*                                                                    */
/* Format:   PLIPH 10 35 72                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    If parm# /= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    Call parse_parms

    Parse VAR parm# sc mc ec .
    If Datatype(sc) /= 'NUM' | Index(sc,'.') > 0 Then Do
        gc009 = "Start column '"sc"' must be numeric."
        Signal msg1
    End
    If Datatype(mc) /= 'NUM' | Index(mc,'.') > 0 Then Do
        gc009 = "Middle column '"mc"' must be numeric."
        Signal msg1
    End
    If ec = '' Then "ISREDIT (ec) = LRECL"
    If Datatype(ec) /= 'NUM' | Index(ec,'.') > 0 Then Do
        gc009 = "End column '"ec"' must be numeric."
        Signal msg1
    End

    zfrange = ''
    "ISREDIT (last) = LINENUM .ZLAST"
    If trace = 'Y' Then Trace r

    If all = 'Y' Then Do
        zfrange = 1
        "ISREDIT (zlrange) = LINENUM .ZLAST"
    End
    Else Do
        "ISREDIT PROCESS RANGE C"
        "ISREDIT (cmd) = RANGE_CMD"
        If cmd = 'C' Then Do
            "ISREDIT (zfrange) = LINENUM .ZFRANGE"
            "ISREDIT (zlrange) = LINENUM .ZLRANGE"
        End
        Else Do
            GC009 = 'No line numbers selected.'
            "ISPEXEC SETMSG MSG(GC009)"
            Exit
        End
    End
    "ISREDIT (status) = USER_STATE"
    "ISREDIT (last) = LINENUM .ZLAST"

    c1 = (mc-sc)
    c2 = (ec-mc)+1

    Do i=zfrange To zlrange
        "ISREDIT (line) = LINE" i
        If sc > 1 Then Do
            Interpret "Parse VAR line p1 "sc" p2 +"c1" p3 +"c2" p4"
            line = p1 || p3 || p2 || p4
        End
        Else Do
            Interpret "Parse VAR line "sc" p1 +"c1" p2 +"c2" p3"
            line = p2 || p1 || p3
        End
        "ISREDIT LINE" i "= (line)"
    End
    gc009 = "Columns" sc'-'mc-1 "flipped with" mc'-'ec'.'
msg1:
   "ISPEXEC SETMSG MSG(GC009)"
ext1:
    "ISREDIT USER_STATE = (status)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    all = parse_cons('ALL',,,1)

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
