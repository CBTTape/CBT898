/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* FX: FiX PDS members.                                               */
/*                                                                    */
/* This routine permits recovery of deleted/changed members of a PDS by*/
/* front-ending onto Bob Weinstein's SPFPDS program using ISPF and was*/
/* found on CBT Tape file 036.                                        */
/*                                                                    */
/* Requires the following load modules:                               */
/*   PANELINC - Panel exit to keep track of fast skips.               */
/*   SPFPDS   - DSN entry and skip panel (off CBT tape 036).          */
/*   SPFPDS#  o Version of SPFPDS permitting bypass of browsing       */
/*              recovered members during fast tracking.               */
/*                                                                    */
/* For further details invoke using parameter '?' or browse bottom of */
/* member.                                                            */
/*                                                                    */
/*--------------------------------------------------------------------*/
FX:fx_ver='2.05'
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    u=Userid();p=Sysvar(syspref);If u/=p&p/='' Then u=p'.'u;hlq0=u
    fpds0001="'"p".FPDS0001.CNTL'"

    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm# 1 parm1 parm2 parm3
    If parm1='??' Then Signal Help_me
    If Wordpos(parm1,'? /? HELP /HELP /H')>0 Then Do
        Signal on Syntax Name Help_me
        x=$BR('%'xcmd '??');Exit
    End

    zedsmsg=;prog='SPFPDS#'
    "VGET (ZAPPLID) ASIS"
    If zapplid/='CSM' Then Do
        "SELECT CMD(%"xcmd parm#") NEWAPPL(CSM)"
        Return 0
    End

    If Wordpos('/E',parm#)>0 | Wordpos('E',parm#)>0 |,
       parm#='' Then Signal Edit_it
    If Wordpos('/R',parm#)>0 | Wordpos('R',parm#)>0 Then Signal Restore
    If Wordpos('/C',parm#)>0 | Wordpos('C',parm#)>0 Then Signal Compare
    If Wordpos('/Q',parm#)>0 | Wordpos('Q',parm#)>0 Then Signal Quit_loop

    Parse Upper VAR parm# CSDSN00 .
    If Substr(csdsn00,1,1)/="'" Then csdsn00= "'"p"."csdsn00"'"
    dataset=csdsn00
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax

    Call build_panel

    fxmsg=
List_deleted:
    zcmd=
    "DISPLAY PANEL(FPDSP1) MSG(&FXMSG)"; rc1=rc
    If rc1>4 Then Do
        If rc1>8 Then Do
            zedlmsg='Severe error displaying panel "FPDSP1".'
            "SETMSG MSG(ISRZ001)"
        End
        Signal housekeep_exit
    End
    If Wordpos(zcmd,'? /? HELP /HELP /H')>0 Then Do
        Signal on Syntax Name Help_me
        x=$BR('%'xcmd '??');Signal List_deleted
    End

    x=Msg('Off');fxmsg=
    xx=Listdsi(dataset)
    If sysusedpages/='' Then Do
        zedlmsg='Cannot FiX a PDS/E.'
        fxmsg='ISRZ001';Signal List_deleted
    End

alloc:
    Address TSO
    "FREE FI(FPDS0000 FPDS0001)"
    "DELETE" fpds0001
    "ALLOC FI(FPDS0000) DA("dataset") SHR REU"
    If rc/=0 Then Do
        fxmsg='FPDS003I';Signal List_deleted
    End
    "ALLOC FI(FPDS0001) DA("fpds0001") SP(2 2) CYL",
        "RECFM(F B) LRECL(80) BLKSIZE(6160) DSORG(PS)"
    If rc/=0 Then Do
        fxmsg='FPDS004I';Signal List_deleted
    End
    zcmd=
    Address ISPEXEC
    "VPUT ZCMD ASIS"
    "SELECT PGM("prog")"
    rc1=rc
    If rc1=4 Then Signal List_deleted
    If rc1=8 Then Do
        fxmsg='FPDS001I';Signal List_deleted
    End
    dataset=
    fxmsg='FPDS000I';Signal List_deleted

housekeep_exit:
    "LIBDEF ISPPLIB";"LIBDEF ISPMLIB"
    m#=Msg('Off')
    Address TSO
    "FREE FI(FPDS0000 FPDS0001)"
    "DELETE" fpds0001
    "DELETE '"dsnfx"'"
    Exit

Edit_it:
    x=vds()
    "VIEW DATASET(&FPDS0001)"
    Return 0

restore:
    x=vds()
    Address ISREDIT
    "(status)=USER_STATE"
    dd='FX'Time('s')
    Address TSO "ALLOC F("dd") DSN("fpds0001") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    "RESET";"DEL ALL NX"
    #tr=Trace('o')
    Do i=1 To linei.0
        linex=linei.i;"LINE_AFTER .ZLAST=(linex)"
    End
    "USER_STATE=(status)"
    Return 0

compare:
    x=vds()
    "VGET (csdsn00) PROFILE"
    If Wordpos('/C',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/C',Translate(parm#)),1)
    End
    Else If Wordpos('C',Translate(parm#))>0 Then Do
             parm#=Delword(parm#,Wordpos('C',Translate(parm#)),1)
         End
    member=Strip(csdsn00,,"'")"("Word(parm#,1)")";#m=Msg('Off')
    If Sysdsn("'"member"'")/="OK" Then Do
        zedlmsg="Member '"member"' not found.";Signal err1
    End
    x=$compare(member,Strip(fpds0001,,"'"))
    Return 0

Quit_loop:
    "VGET (PANELINC,SKIPVALU,DISPVALU,SKIP)"
    If parm2='?' Then Do
        zedlmsg="At" dispvalu"/"skipvalu"."
        "ISPEXEC SETMSG MSG (ISRZ001)"
        Exit
    End
    zedlmsg="FX operations interrupted with the 'QUIT' command."
    "SETMSG MSG (ISRZ001)"
    skip='QUIT';"VPUT (SKIP)";"CONTROL NONDISPL END"
    Return 0

vds:
    If Sysdsn(fpds0001)="OK" Then Return 0
    zedlmsg="Dataset "fpds0001" not found."
err1:
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Return 4

/*--------------------------------------------------------------------*/
/* Invoke SuperC.                                                     */
/*--------------------------------------------------------------------*/
$compare:
SuperC:
    Arg ds1,ds2
    #adr=Address();#m1=Msg('Off')
    Parse VAR ds1 ds1 '=' v1
    If v1/='' Then Do
        x=Listdsi("'SYS1.LINKLIB' VOLUME("v1")")
        If sysreason=22 Then Do
           zedlmsg="Volume '"v1"' not mounted or "||,
                   "defined to the system."
           "ISPEXEC SETMSG MSG(ISRZ001)"
           Return 12
        End
        Else v1='VOLUME('v1')'
    End
    Parse VAR ds2 ds2 '=' v2
    If v2/='' Then Do
        x=Listdsi("'SYS1.LINKLIB' VOLUME("v2")")
        If sysreason=22 Then Do
           zedlmsg="Volume '"v2"' not mounted or "||,
                   "defined to the system."
           "ISPEXEC SETMSG MSG(ISRZ001)"
           Return 12
        End
        Else v2='VOLUME('v2')'
    End
    Address TSO
    "ALLOC F(NEWDD) DSN('"ds1"') SHR REU UNIT(SYSALLDA)" v1
    "ALLOC F(OLDDD) DSN('"ds2"') SHR REU UNIT(SYSALLDA)" v2
    "ISPEXEC VGET ZTEMPF"
    If Sysdsn("'"ztempf"'")/='OK' Then Do
        ztempf = Sysvar(Syspref)'.SHOWMVS.EXTCOMP.OUTLIST'
        If Sysdsn(ztempf)/='OK' Then,
            Address TSO "ALLOC DA('"ztempf"') NEW CATALOG TRACKS",
                        unitvol "SPACE(15,15)"
    End
    "ALLOC F(OUTDD) DSN('"ztempf"') SHR REU"
    sysin = Sysvar(Syspref)'.'userid'.CHANGE.TEMP.SYSIN'
    "ALLOC F(SYSIN) DSN('"sysin"') NEW CATALOG TRACKS",
                        unitvol "SPACE(1,0) REU"
    x=Outtrap('ll.',5,'NOCONCAT');#m2=Msg('On')
    Address TSO PROFILE
    x=Outtrap('Off');x=Msg(#m2)
    If Substr(ll.1,1,3)='IKJ' Then wt=Word(ll.1,9);Else wt=Word(ll.1,8)
    Address TSO PROFILE 'NOWTPMSG'
    "CALL *(ISRSUPC) 'DELTAL,LINECMP'"               /* Call Supre-CE */
    Address TSO PROFILE wt
    "ISPEXEC LMINIT DATAID(DATAID) DDNAME(OUTDD)"
    "ISPEXEC VIEW DATAID(&DATAID)"
    "ISPEXEC LMFREE DATAID(&DATAID)"
    "FREE  F(NEWDD,OLDDD,OUTDD,SYSIN)"
    "DELETE '"ZTEMPF"'"
    "DELETE '"sysin"'"
    x=Msg(#m1)
    Address(#adr)

    Return 0

Help_me:
    Signal off Syntax;#tr=Trace('o')
    n_st=mark(2)                            /* Mark Start             */
/*

   Hello &CNAME..

   &XCMDC.: FiX PDS members.

   This routine permits recovery of deleted/changed members of a PDS by
   front-ending onto Bob Weinstein's SPFPDS program using ISPF (found on
   CBT Tape file 036).

   The SPFPDS program restores deleted members of a PDS with a backward
   search, starting from the end of the dataset and browsing each
   member (deleted or not) with ISPF browse.  After ending each browse,
   you have an opportunity to STOW a name in the directory for that
   member.  The program proceeds backwards, member by member, until you
   exit, or until you reach the beginning of the library.

   Two features distinguish this program from others of this type,
   (unlike other such utilities, for example PDSGAS from CBT Tape file
   316, or the 'restore' operand of the PDS program (file 182)):
   1. The member search goes backwards, starting from the end of the
      dataset and going back, one member at a time.  This allows you to
      look at the most recent activity first.
   2. Each member is ISPF browsed.  It can be examined in its entirety,
      and in detail, before you decide whether to STOW a directory entry
      for it or not.  You can invoke the FXD routine to supply an
      existing member from the PDS to perform a SuperC compare with the
      browsed data.

   If you do STOW a directory entry, it doesn't matter if one already
   exists for that member.  The new one is created also.  If an old
   entry was there too, under a different name, an "apparent alias" is
   created.  Using the "PDS" program (in CBT Tape file 182), all the
   apparent aliases created can be flagged in a jiffy, using the
   "verify" subcommand of "PDS".

   The dataset that is created and browsed will be:-
     &FPDS0001..

   Parameters (positional):
     1. Fully qualified quoted PDS that is to be processed for deleted
        members.

          - or -

        Existing member of the PDS being processed it keyword "C" or
        "/C" is used.

        Without any parameters (including keyword parameters), this
        routine will view dataset,
          &FPDS0001.
        if it exists and you can do with it whatever you like.

   Parameters (keyword):
     /C - Compare browsed dataset with a member (member name must be
          supplied as a parameter) of the PDS.
          To invoke, issue command,
             TSO %&XCMD. member /C
     /Q - Quit fast track looping.  Without this parameter the number
          entered in the "Fast move to" field would need to be exhausted
          and I wouldn't like to be you if you entered 500 in there.
          After breaking loop the prompt for save name panel will be
          dispayed after each browse. You can get back into the fast
          track loop by updating the field.
          To invoke, issue macro
             TSO %&XCMD. /Q { ? }
          Pass 2nd. parameter of '?' to set message of your progress in
          the loop.
     /R - Copy into current edit/view session the contents of,
          &FPDS0001..
          To invoke, issue macro
             &XCMD. /R
     C  - Same as "/C" and use it if "C" is a valid member name.
     Q  - Same as "/Q" and use it if "Q" is a valid member name.
     R  - Same as "/R" and use it if "R" is a valid member name.

   Packaging:
   REXX:
     &XCMD(8). - Front end driver routine to perform fix housekeeping.
     QUIT     o Routine to break fast track looping.

   Panels:
     FPDSP1   - DSN entry and skip panel (self extracted).
     FPDSP0   - Member save and skip panel (self extracted).

   Messages:
     FPDS00   - Messages used by SPFPDS (self extracted).

   Loadmod:
     PANELINC - Panel exit to keep track of fast skips
     SPFPDS   - DSN entry and skip panel
     SPFPDS#  o Version of SPFPDS permitting bypass of browsing
                recovered members during fast tracking.

                                 *****

*/
    n_en=mark(-2)                           /* Mark End               */

    chgchar='&';cname='there'
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_1: Signal Off Syntax

    today=Date('e')
    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(Substr(line,1,79))
    End
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff
/*--------------------------------------------------------------------*/
/* Allocate panel                                                     */
/*--------------------------------------------------------------------*/
build_panel:
    dsnfx= hlq0'.$$$TEMP.FX#DSN'
    #msg=Msg('Off')
    Address TSO
    "DELETE '"dsnfx"'"
    "ALLOC DA('"dsnfx"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0)" unitvol "DIR(1)",
       "RECFM(F B) REU"
    "FREE DA('"dsnfx"')"
    members='FPDSP0 FPDSP1 FPDS00'
    dd='TT'Time('s')
    Do While members/=''
        Parse VAR members memb members
        #tr=Trace('o')
        Interpret "Call make_mem_"memb
        "NEWSTACK"
        Do i=n_st To n_en;Queue Sourceline(i);End;Queue ''
        x=Trace(#tr)
        "ALLOC F("dd") DA('"dsnfx"("memb")') SHR REU"
        "EXECIO * DISKW "dd" (FINIS"
        If rc/=0 Then Do
            Say "Error outputing to datadset '"dsnfx"("memb")', rc="rc"."
            Exit
        End
    End
    Address
    Address ISPEXEC "LIBDEF ISPPLIB DATASET ID('&dsnfx') STACK"
    Address ISPEXEC "LIBDEF ISPMLIB DATASET ID('&dsnfx') STACK"
    x=Msg(#msg)
    Return 0

/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_FPDSP0:n_st = mark(2)
/*
)ATTR
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
  # TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
  ~ TYPE(TEXT) INTENS(HIGH) SKIP(ON)
)BODY EXPAND(\\)
@\-\ FIXPDS - SELECT PANEL \-\
%&SID ===>_ZCMD
%
+     Enter member name desired for the member just browsed:
%                       ===>_SPFMEMB ~<=>#Z    @&GC001
+     Fast move to                    %=>_Z    ~<=
+     Browse fast moves               %=>_Z~<=
%
@              BLANK  +will not perform STOW and will
                            proceed to previous member
%
@              END key+will terminate processing
%
%
)INIT
 &SID=&ZSYSID
 .ZVARS = '(DISPVALU,SKIPVALU,DISPBROW)'
 &SPFMEMB = ' '
 &DISPVALU = '12345678'                     /* Required to define var */
 IF (&PANELINC = &Z) &PANELINC = '00000000'
 IF (&PANELINC = 0)  &PANELINC = '00000000'
 IF (&SKIPVALU = &Z,1) &SKIPVALU = 1
 VGET (DISPBROW,SKIP)
 &SKIPV = &SKIP
 &SKIP = 'N'
 PANEXIT((PANELINC,DISPVALU,SKIPVALU,SKIP),LOAD,PANELINC)
 VPUT (PANELINC,SKIPVALU,DISPVALU,SKIP)
 If (&SKIPV = 'QUIT') &SKIP = 'N'
 IF (&SKIP = 'Y')
    VPUT (DISPBROW)
    .RESP = 'ENTER'
 ELSE
    IF (&DISPBROW = 'N')
       VPUT (DISPBROW)
       .RESP = 'ENTER'
    &DISPBROW = 'Y'
 IF (&#SKIP = 'Y')
    &GC001 = '<-- Next display is your target.'
 ELSE
    &GC001 = ''
)PROC
 &#SKIP = &SKIP
 VER (&SPFMEMB,NAME)
 IF (.RESP = 'END') &DISPBROW = 'Y'
 VPUT (DISPBROW)
 VER (&SKIPVALU,NUM)
 VER (&DISPBROW,NB,LIST,Y,N)
)END
*/
    n_en = mark(-2);Return 0

make_mem_FPDSP1:n_st = mark(2)
/*
)ATTR
    @  TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
    ~  TYPE(TEXT) INTENS(HIGH) COLOR(WHITE) SKIP(ON)
)BODY EXPAND(\\)
@&TIMX \-\ FIXPDS - Entry Panel \-\------
%&SID ===>_ZCMD
%
%
+   Enter DATASET name%===>_DATASET                                     +
+   Fast move to        %=>_Z    ~<=+(Bypasses save screen prompt)
+   Browse fast moves   %=>_Z~<=
%
%
%
+   Physical members from specified dataset will be browsed in
+   reverse order (newest member first)
+
+   If using the@Fast move+feature, use@TSO FX /Q+to halt/break into the Fast
+   track. Without this command you will need to exhaust your list.
%
%
%
)INIT
 &SID   = &ZSYSID
 &TIMX  = &ZTIME
 .ZVARS = '(SKIPVALU DISPBROW)'
 &SKIPVALU = 1
 &DISPBROW = 'Y'
)PROC
  &PANELINC = '00000000'
  VPUT (PANELINC,SKIPVALU,DISPBROW)
  VER (&DATASET,NB,DSNAME)
  VER (&SKIPVALU,NUM)
  VER (&DISPBROW,NB,LIST,Y,N)
)END
*/
    n_en = mark(-2);Return 0

make_mem_FPDS00:n_st = mark(2)
/*
FPDS000I 'MEMBER &OLDMEM STOWED'
'A DIRECTORY ENTRY HAS BEEN ADDED IDENTIFYING THIS MEMBER AS &OLDMEM'
FPDS001I 'END OF LIBRARY'  .ALARM=YES
'ALL PHYSICAL MEMBERS WERE BROWSED AND NONE WERE SELECTED'
FPDS003I 'ALLOCATION FAILED' .ALARM=YES
'SPECIFIED DATASET COULD NOT BE ALLOCATED - RETURN CODE &ALLOCCC'
FPDS004I 'ALLOCATION FAILED' .ALARM=YES
'CONTROL FILE COULD NOT BE ALLOCATED - RETURN CODE &ALLOCCC'
*/
    n_en = mark(-2);Return 0

