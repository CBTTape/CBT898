/*--------------------------ooo00 REXX 00ooo--------------------------*/
    n_st=mark(2)                                        /* Mark Start

    GDGALTER:
    This macro is used to change the GDG limit on selective GDGs used
    for CICS support purposes.

    This routine will permit the following operations:
    1. Selection of a GDG base that can then be tered on-line.

       The options currently available are:
       1.  TMON/CICS TSG (Trouble Shooting Gdg).  These are the full
           detailed TMON/CICS log archives.  The normal base is 3
           generations, however, this is often increased to 10 to permit
           a larger range of stats retention in case of prolonged
           requirements.
       2.  TMON/CICS_Weekly. These are the weekly accumulation summaries
           used to provide trends etc.
           The normal base is 55, but may be extended for those odd
           occasions.
       3.  (That's all folks for now. - Test GDG)

    2. Confirmation of GDG base generated or manually entered.
    3. Evaluation of current GDG limit (for valid #2 above input) and
       new limit entry screen.
    4. Confirmation of new limit and GOTO step 3 above.

    Parameters (positional):
       1. GDG_base.  A valid fully qualified GDG base.  Without this
          parameter a GDG usage entry screen is presented.

    The following members are required to package this function.
    REXX:
      $ALKCICS - Return the 'canned' GDG bases we control/manipulate.
      BR       o BR to browse help instructions from this routine.
      GDGALTER - This driver.

    Panel:
      DYNAMIC$ - Dynamic display/data entry panel.

*/;n_en=mark(-2)                                        /* Mark End   */
GDGALTER:ver='1.01'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse VAR parm# gdg_base olimit nlimit . 1 w1 .
    Parse Source . . xcmd .
    If w1='??' Then Signal help
    If w1='?' Then Do
        x=BR(xcmd "??");Exit
    End
    If Sysdsn(gdg_base)='VOLUME NOT ON SYSTEM' Then,
        Signal Fast_track_GDG_limit
    rc=0;
    x=build_screen_1();dynline=3;dyncol=8
sel_appl:
    "SETMSG MSG(ISRZ001)"
    "DISPLAY PANEL(DYNAMIC$)"
    If rc/=0 Then Do
        zedlmsg='Previous function terminated.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    w1= Strip(Substr(linec,11))
    If w1='?' Then Do
        x=BR(xcmd "??")
        linec=
        Signal sel_appl
    End
    appl=Strip(Substr(line3,8,1))
    Select
       When appl=1 Then what='TMON01_TSG'
       When appl=2 Then what='TMON01_Weekly'
       When appl=3 Then what='?'
       Otherwise what='?'
    End
If what='?' Then what="'T32AZK.GDG.TMON01'"
    If what='?' Then Do
        zedlmsg='Invalid selection.'
        Signal sel_appl
    End

    gdg_base="'"Strip($alkcics(what))"'"

    #m1=Msg('On');x=Outtrap('linei.',0,'NOCONCAT')
    valid_gdg=Sysdsn(gdg_Base)
    x=Outtrap('Off');x=Msg(#m1)
    zedlmsg='Verify GDG base name (or enter GDG base if blank).'
Input_GDG:
    x=build_screen_2()
    dynline=3;dyncol=21
    "SETMSG MSG(ISRZ001)"
    "DISPLAY PANEL(DYNAMIC$)"
    If rc/=0 Then Do
        zedlmsg='Previous function terminated.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    w1=Strip(Substr(linec,11))
    If w1='?' Then Do
        x=BR(xcmd "??")
        linec=
        Signal input_gdg
    End
    gdg_base=Strip(Substr(line3,21,46))
    olimit=0;rc=0

Fast_track_GDG_limit:
    If Substr(gdg_base,1,1)="'" Then gdg_base="'"Strip(gdg_base,,"'")"'"
    Else gdg_base="'"Userid()'.'Strip(gdg_base)"'"
    olimit=Get_limit()
    If olimit=0 Then Do
        zedlmsg=gdg_base 'Does not seem to be a GDG base.'
        "SETMSG MSG(ISRZ001)"
        Signal Input_GDG
    End
    x=build_screen_2()
    zedlmsg='Enter new limit'
New_limit:
    dynline=5;dyncol=21
    line3=Overlay('}',line3,20)
    "SETMSG MSG(ISRZ001)"
    "DISPLAY PANEL(DYNAMIC$)"
    If rc/=0 Then Do
        zedlmsg='Previous function terminated'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    w1=Strip(Substr(linec,11))
    If w1='?' Then Do
        x=BR(xcmd "??")
        linec=
        Signal New_limit
    End
    nlimit=Strip(Substr(line5,21,4))
    If \Datatype(nlimit,'W') Then Do
        zedlmsg='Invalid new limit value. Please correct and try again.'
        Signal New_limit
    End
    #m1=Msg('On');x=Outtrap('linei.',5000,'NOCONCAT')
    Address TSO "ALTER" gdg_base "LIMIT("nlimit")"
    x=Outtrap('Off');x=Msg(#m1)
    zedlmsg=linei.1
    "SETMSG MSG(ISRZ001)"
    olimit=Get_limit();nlimit=;x=build_screen_2()
    Signal New_limit

    Exit

build_screen_1:
    lineh='¢'Centre(' Dynamic GDG limit change ',78,'-')
    linec =
    line1 =
    line2 ="{ Select from the following applications:"
    line3 ='¢}===>~' '{'
    line4 ="¢ 1.{TMON/CICS TSG."
    line5 ="¢ 2.{TMON/CICS Weekly archives"
    line6 ='¢ 3.{To.be.announced.'
    line14='{ Enter¢?{on the command line for HELP.'
    line15='{Use}END{PF key to terminate'
    Return 0

build_screen_2:
    line6 =
    lineh='¢'Centre(' Dynamic GDG limit change ',78,'-')
    linec =
    line1 =
    line2 ="{ Enter parameters below:"
    line3 ='{    GDG Base }===>~'Substr(gdg_base,1,46)'}<='
    line4 ="{    Old limit}===>¢"Right(olimit,4)"}<= {(Current value)"
    line5 ="{    New limit}===>~"Right(nlimit,4)'}<= {Numeric'
    line14='{ Enter¢?{on the command line for HELP.'
    line15='{ Use¢END{PF key to abandon processing.'
    Return 0

Get_limit:
    line6 =
    #m1=Msg('On');x=Outtrap('linei.',5000,'NOCONCAT')
    Address TSO "LISTCAT ENT("gdg_base") ALL"
    x=Outtrap('Off');x=Msg(#m1)
    If rc/=0 Then Do
        zedlmsg=linei.1;rc=8;Signal Input_GDG
    End
    Do i=1 To linei.0
        line=Translate(linei.i,' ','-')
        If Word(line,1)='LIMIT' Then Do
            olimit=Word(line,2);Leave
        End
    End
    Return olimit
Mark:Arg n#;If Datatype(n#)/='NUM' Then n#=1;Return sigl+n#

Help:
    Do i=n_st To n_en;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0
