/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*  GOAK:                                                             */
/*                                                                    */
/*  This macro will PErform the following according to the type of    */
/*  member being edited:                                              */
/*     CLIST  - Executes it.                                          */
/*     REXX   - Executes it.                                          */
/*     JCL    - Submit job if line 1 contains ' JOB ' or suffix is    */
/*              'CNTL'.                                               */
/*     ASSEM  - Assemble/link-edit using 'ASMCL' routine if line 1    */
/*              contains ' CSECT ' or suffix is 'ASM' or 'SOURCE'.    */
/*     COBOL  - Compile/link-edit if suffix is 'COBOL'.               */
/*     PANEL  - Invoke 'TP1' (test panel) routine. (Should be in ISPF */
/*              'TEST' mode.                                          */
/*                                                                    */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN"
    ima_macro=0;sess='BROWSE'
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc>0 Then Signal byp1
    ima_macro=1;"ISREDIT (sess)=SESSION"
    "ISREDIT (changed)=DATA_CHANGED"

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    t1=Userid();t2='SPFTEMP';t3='CNTL'
    zerrhm='*';zerralrm='NO';zerrsm=
    Parse Upper VAR parm# parm#
    If Wordpos(Word(parm#,1),'? /? HELP /H')>0 Then Signal help
    rcode=0
    userid=Userid();hlq=$alkhlq()
    If ima_macro Then Do;Address ISREDIT;"(STATUS) = USER_STATE";End

/*--------------------------------------------------------------------*/
/* Test if invoked from 'GOB' or GO'ed direct...                      */
/*--------------------------------------------------------------------*/
    gobed="N"
    Address ISPEXEC "VGET (GOBFLAG) SHARED"
    If gobflag='Y' Then Do
        Address ISPEXEC 'VGET (PDSNAME,MEMBER,W1,W2,V1,',
             'PARM1,PARM2,PARM3,PARM4) SHARED'
        parm#=parm1 parm2 parm3 parm4
        gobflag="N";Address ISPEXEC 'VPUT (GOBFLAG) SHARED'
        gobed="Y"
    End
    Else Do
        "(PDSNAME)=DATASET";"(MEMBER)=MEMBER";"(V1)=PROFILE"
        "CURSOR=1 0";"(LINE1)=LINE 1"
        Parse Upper VAR line1 w1 w2 rest
    End
    Call parse_parms
    Parse VAR parm# parm1 parm2 parm3 parm4 .

Tcindx:
    If member="$$$INDEX" Then Do
        If gobed='Y' Then Do
            zerrlm="$$$INDEX cannot be GOB'ed."
            Signal Erx1
        End
        "INDEX &PARM1 &PARM2 &PARM3"
        Return 0
    End

tclist:
    "FIND 'REXX' .ZFIRST .ZFIRST"
    If rc/=0 Then Signal isclist
    If Wordpos(v1,'CLIST REXX EXEC')>0 | Wordpos(w2,'REXX PROC')>0 Then Do
        If force/='Y' Then If w2="JOB" Then Signal Tjcl
Isclist:
        If w1="ISREDIT" Then Do
            v1="EDIT-MACRO";Signal Error1
        End
        If gobed='N' Then Do
            If changed="YES" Then Do
                If sess='EDIT' Then "SAVE";Else "VS"
            End
            "FIND 'ISREDIT MACRO ' 4"
        End
        Else rc=4
        If rc=0 Then Address TSO member
        Else Do
            If parm#/='' Then parmx=" '"parm# parm#_rest"'";Else parmx=
            Address TSO "EXEC '"pdsname"("member")'"parmx
        End
        rcode=rc
        Signal Exi1
    End
Tjcl:
    Parse VAR pdsname q1 '.' q2 '.' q3;q2=Substr(q2,1,Length(t2))
    If v1="CNTL" | (q1=t1 & q2=t2 & q3=t3) | w2='JOB' Then Do
        x=Msg('On')
        If gobed='N' Then "SUBMIT"
        Else Address TSO "SUBMIT '"pdsname"("member")'"
        Signal sdsfparm
    End
Tcobol:
    If v1="COBOL" Then Do
        If gobed='N' Then Do
            If changed="YES" Then Do
                If sess='EDIT' Then "SAVE";Else "VS"
            End
        End
        x=Process_as('CLG')
    End

T3270:
/*  "(line)=LINE 4"                                                   */
/*  Parse VAR line . wccdc .                                          */
/*  If wccdc="WCCDC" Then v1=3270                                     */
/*  If v1='3270' Then Do                                              */
/*      buffenv="GOAK";buffispf='MACRO1'                              */
/*      Address ISPEXEC "VPUT (BUFFISPF BUFFENV) SHARED"              */
/*      "BUFFISPF"                                                    */
/*      Signal Exi1                                                   */
/*  End                                                               */

tassemb:
    If Wordpos(v1,'SOURCE ASM ASSEM ASSEMBLE MACLIB')>0 | w2='CSECT' Then Do
        If gobed='N' Then Do
            If changed="YES" Then Do
                If sess='EDIT' Then "SAVE";Else "VS"
            End
        End
        x=Process_as('ASMCL')
    End

Tpanel:
    If Wordpos(v1,'ISPPLIB PANELS PANEL PAN')>0 |,
       Wordpos(w1,')ATTR )BODY')>0 Then Do
        If changed="YES" Then Do
            If sess='EDIT' Then "SAVE";Else "VS"
        End
        If gobed = 'N' Then "TP &PARM1 &PARM2"
        Else Do
            "FIND ' &ZSEL ' FIRST"
            If rc=0 then panact='SELECT';Else panact='DISPLAY'
            Address ISPEXEC "&PANACT PANEL(&MEMBER)"
        End
        Signal Exi1
    End

Error1:
    zedsmsg=v1" cannot be goed."
    zerrlm="Member not in CLIST/CNTL PDS."
Erx1:
    Address ISPEXEC "SETMSG MSG(ISRZ002)"
    Signal Exi1

Process_as:
    parm=parm1;edit='N'
    If parm1='EDIT' Then edit='Y'
    If parm2='EDIT' Then edit='Y'
    Address ISPEXEC "VPUT (PDSNAME MEMBER PARM EDIT) SHARED"
    Call ldon;Address TSO '%'Arg(1);Call ldoff;rcode=rc
    Signal Exi1

Sdsfparm:
    If parm1='' Then Signal Exi1
    If parm1='H' Then Do
        Address TSO "SDSF H"
        Signal Exitref
    End
    If parm1='D' Then Do
        Address TSO "SDSF DA OJOB"
        Signal Exitref
    End
    If parm1='I' Then Do
        Address TSO "SDSF IA"
        Signal Exitref
    End
    Signal Exi1

Exi1:
    If gobed='N' Then Do
        "USER_STATE = (STATUS)"
    End
    Return 0

ldon:
    If userid=hlq Then Return
    isprlib="'"hlq".$$'"
    ispclib="'"hlq".$$'"
    ispplib="'"hlq".$$','"hlq".$$'"
    ispslib="'"hlq".$$'"
    Address TSO "ALTLIB ACTIVATE APPLICATION(EXEC) DA("isprlib")"
/*  Address TSO "ALTLIB ACTIVATE APPLICATION(CLIST) DA("ispclib")"    */
    Address ISPEXEC
    "LIBDEF ISPPLIB DATASET ID(&ISPPLIB) STACK"
    "LIBDEF ISPSLIB DATASET ID(&ISPSLIB) STACK"
    Return

ldoff:
    If userid=hlq Then Return
    Address TSO "ALTLIB DEACTIVATE APPLICATION(EXEC)"
/*  Address TSO "ALTLIB DEACTIVATE APPLICATION(CLIST)"                */
    Address ISPEXEC "CONTROL ERRORS RETURN"
    Address ISPEXEC "LIBDEF ISPPLIB
    Address ISPEXEC "LIBDEF ISPSLIB
    Return

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
parse_parms:
    #tr=parse_cons('TRACE','R',,2)
    If #tr='N' Then #tr=parse_cons('/TRACE','R',,2)

    force=parse_varb('//')
    If force/='N' Then Do
        If force='' Then force='N'
        Else Do
            v1=force
            w2=v1
            w1=v1
            force='Y'
        End
    End

    Parse VAR parm# parm# parm#_rest

    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Help instructions.                                                 */
/* The variable 'depth' is used to control help. Update it (use the   */
/* 'XX' exclude block command to establish it's value) whenever the   */
/* instructions are updated.                                          */
/*--------------------------------------------------------------------*/
help:
    last = Sourceline() -1
    Do i=last By -1
        line = Sourceline(i)
        If i = 1 Then Exit
        If Substr(line,1,2) /= '/*' Then Iterate
        first = i +1
        Leave
    End
    Address TSO "CLEAR"
    Do i=first To last
        If i=first Then Say Centre(' ooo000OOOO000ooo ',79,'*')
        Say '*  'Substr(Sourceline(i),1,75)'*'
        If i=last  Then Say Centre(' End ',79,'*')
    End
    Exit


/*
 'GO' is an edit-macro that will perform the following executions on the
 edited PDS(member) according to it's Profile type. Any runtime
 parameters may be passed with the GO command.

 1. If the type of PDS is 'REXX' or 'CLIST' it will save the member if
    it has been modified and then execute it. 'CLIST' edit-macros will
    not be excuted.

 2. If the member being edited is '$$$INDEX', the 'INDEX' command will
    be issued to generate the Index.

 3. If the type of PDS is 'CNTL' or 'JCL' it will submit the member.
    NOTE - JCL will not be saved.

 4. If the type of PDS is 'ASM' or 'SOURCE', it will save the member if
    it has been changed and then invoke routine 'ASMCL' to generate the
    job deck to assemble/link-edit the dataset.  You may pass it
    parameters of A(Assemble), L(Link-edit) or AL(Assemble and Link-edit
    If assemble step has rc=<4).  If you pass one of the above
    parameters, the standard 'ASMCL' parameter entry screen is bypassed,
    unless one of the veri- fications fail. For more details, use your
    help PF key after invocation.

    NOTE - This feature issues LIBDEF and ALTLIB commands to set up
           environment. You may loose and active LIBDEFs in your current
           dialog.


 5. If the type of PDS is 'COBOL', it will save the meber and invoke the
    routine 'CLGO' (similar processing to ASM above).

 6. If none of the above, it will scan the dataset and perform the
    following tests:
    a) Finds 'PROC ' in col 1 of line 1, treats as a CLIST.
    a) Finds ' REXX ' word 2 of line 1, treats as a REXX.
    b) Finds ' JOB ' as word 2 on line 1, treats as CNTL.
    c) Finds ' CSECT ' as word 2 on line 1, treats as ASM.

 7. If none of the above are true you will be advised the the member
    cannot be 'GOED'. You can force a 'GO' by entering a '/' in front of
    the 'PDStype', where PDStype can be one of the following: ASM,
    CLIST, CNTL, COBOL or REXX.  (eg. /ASM).

*/
ext1:
    Exit
