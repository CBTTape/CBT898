/******************************** REXX ********************************/
/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*  HEAD:                                                             */
/*                                                                    */
/*  This macro readies a new "REXX"/"CLIST"/"Assem" with the major    */
/*  headings, etc... Default is REXX.                                 */
/*                                                                    */
/*--------------------------------------------------------------------*/
    n_s1=mark(2)                            /* Mark start             */
/*
/******************************** REXX ********************************/
    n_st=mark(2)    /* Mark Start */
/*
  --------------------------ooo00 REXX 00ooo--------------------------
    &MEMBER.:
    This macro ..(use MD block command to convert NOTELINES->data)..

    Parameters:
    1. /x   - ...............................

    The following members are required to package this function.
    Those marked with an 'o' seperator are optional and enhance the
    available fetures:
    REXX:
      &MEMBER(8). - This driver.
      BR       o BR to browse help instructions from this routine.
                 (If "&XCMD." is available then so is "BR".)

    (Member "$PARMS" has been copied to the bottom as NOTELINES. Make
     sure you either don't make them data unintentionally and if you
     do suggest you tidy it up and customise the parameter
     identification.)
  --------------------------------------------------------------------
*/ */
    n_e1=mark(-2)                           /* Mark End               */
    n_s2=mark(1)                            /* Mark start */ /*
*/
n_en=mark(-2)   /* Mark End   */
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1
    If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc
    If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me
    Parse Source . . xcmd .;x=$BR(xcmd "??");Return
    Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
    Help_me:Signal Off Syntax;#tr=Trace("o")
    Do i=n_s1 To n_e1;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

No_help_#1:
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm1,parm2,parm3,parm4,parm5,parm6,parm7
    If Word(parm2,2)/='' Then,
         Parse Upper VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7
    If Wordpos(parm1,'? ?? /? HELP /HELP /H')>0 Then Signal Help_me

    #tr=Trace('O')
    Call parse_parms
    x=Trace(#tr)

    Address ISREDIT;"(status)=USER_STATE"

    n_e2=mark(-1)                           /* Mark End               */

    "(member)=MEMBER";"(last)=LINENUM .ZLAST"
    Select
        When type='R' Then Signal REXX_head
        When type='C' Then Signal CLIST_head
        When type='M' Then Signal Macro_head
        When type='A' Then Signal Assm_head
        Otherwise Signal unknown_head
    End
    "USER_STATE=(status)"
    Exit

REXX_head:
    "(#ll)=LINENUM .ZLAST";If #ll=0 Then "LINE_AFTER .ZFIRST=' '"
    x=qit(n_s1,n_s1+2,'B','N',,'M')
    maskline="<1,'/*' 71,'*/'>"
    "MASKLINE=&MASKLINE"
    x=qit(n_s1+3,n_e1,'B','N',,'M')
    "MASKLINE=''"
    x=qit(n_s2,n_e2,'B','N')
    x="Mark:Arg n#;If Datatype(n#)/='NUM' Then n#=1;Return sigl+n#"
    "LINE_AFTER .ZLAST=NOTELINE (x)"
    "F 'parse_parms:' 1 LAST"
    If rc=0 Then Signal ext1
    dslist=$ddalloc('SYSEXEC SYSPROC')
    Do While dslist/=''
        Parse VAR dslist dsn dslist
        dsn="'"dsn"($PARMS)'"
        If Sysdsn(dsn)='OK' Then Do
            dd='HD'Time('s')
            Address TSO "ALLOC F("dd") DSN("dsn") SHR REU"
            Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
            Address TSO "FREE F("dd")"
            Do i=linei.0 By -1 To 1
                lineo=linei.i
                "LINE_AFTER .ZLAST=NOTELINE (lineo)"
            End
            lineo=' ';"LINE_AFTER .ZLAST=NOTELINE (lineo)"
            lineo='Exit_before_parameter_parsing: Exit'
            "LINE_AFTER .ZLAST=NOTELINE (lineo)"
            lineo=' ';"LINE_AFTER .ZLAST=NOTELINE (lineo)"
        End
    End
    If #ll=0 Then "DELETE .ZLAST"
    Signal ext1

CLIST_head:
    n_st=mark(1);Signal CLIST_End           /* Mark End               */
PROC 0 TRACE TEST
    CONTROL NOFLUSH NOMSG END(DEND)
    IF &TRACE = TRACE THEN CONTROL CONLIST SYMLIST LIST MSG
    SET &CNTLACTN = RETURN
/*  SET &CNTLACTN = CANCEL */
    ISPEXEC CONTROL ERRORS &CNTLACTN
INI1: +
    IF &TEST = TEST THEN DO
        SET &HLQ = &SYSUID
    DEND
    ELSE DO
        SET &HLQ = &SYSUID
    DEND
CLIST_End:n_en=mark(-1)                     /* Mark End               */
    x=qit(n_st,n_en,'B','N');Signal ext1

Assm_head:
    maskline="<1,'*' 71,'*'>"
    "MASKLINE=&MASKLINE"

    cname='Unknown'
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname
    author=Substr(cname,1,1)'.' sname
error_off_1: Signal Off Syntax
    today=$DATEMAN('VER')
    n_st=mark(1);Signal Assm_End            /* Mark End               */
 *********************************************************************

   Title   : .....................
             .....................
   System  : .....................
   Module  : &MEMBER.
   Program : &MEMBER.
   Function: .....................
             .....................
   Company : ASYSTS Pty. Ltd.
   Author  : &AUTHOR.
   Date    : &TODAY.

 *********************************************************************
Assm_End:n_en=mark(-1)                      /* Mark End               */
    x=qit(n_st,n_en,'B','N',,'M');Signal ext1
Macro_head:
unknown_head:
    Say '"'type'" - Not yet developed'

ext1:"MASKLINE=''";"USER_STATE=(status)";Exit

qit: Arg s_l,e_l,oper,q_type,where,mask
    If oper='A' Then oper='LINE_AFTER';Else oper='LINE_BEFORE'
    If q_type='E' Then noteline=;Else Drop noteline
    If where='' Then where='.ZFIRST'
    If mask='' Then mask=;Else mask=' + MASKLINE'
    Select
        When e_l>s_l Then inc=1
        When e_l=s_l Then inc=0
        Otherwise inc=-1
    End
    #noteline=noteline
    chgchar='&'
    #tr=Trace('o')
    Do i=s_l By inc To e_l
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If \Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        noteline=#noteline
        x=nl_h(line)
        If inc=0 Then Leave
    End
    Return 0

nl_h:Parse Arg n#;"&OPER &WHERE=&NOTELINE (n#) + MASKLINE";Return 0
Mark:Arg n#;If Datatype(n#)/='NUM' Then n#=1;Return sigl+n#
/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    If #tr/='R' Then Do
        #tr=parse_cons('TRACE','R','O')
        If #tr='O' Then #tr=parse_cons('/TR','R','O',3)
    End
    If Wordpos(Word(parm#,1),'A M R C')>0 Then type=Word(parm#,1)
    Else type='R'
/*  Else type=Word(parm#,1)                                           */

    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
