%headline=' Dynamic Tutorial Sample "HELPTT" '
%tutever='V1.15'
%hyper_link=23
*)SKIP TESTING
.1. Features:
!G
    This facility permits the building of dynamic panels in a "free form text"
    conscept as opposed to static panels.
!                                                              g
    Pros:
!   G   !
     1. All tutorials in 1 member.  Readily expandable without having to
!g      !
        concider panel sizes. Is easy to include sub-topics without the need for
        re-organisation.
     2. Free form text that is dynamically modifiable/expandable without
!g      !
        restriction. Removes the need to keep track of panel sizes and the need
        for re-organisation when sub-topics are inserted.
     3. Can issue find commands in tutorial.
!g      !
     4. Option to colourise extensively, minimally or not at all. The latter
!g      !
        option makes this feature a childs play.
     5. Dynamically build pointers to key poinst(word) or paragraphs (index
!g      !
        numbers). Both words and index numbers make up a keyword list that can
        be used for fast tracking to that part or the tutorial.
     6. No restricted by static panel sizes and different terminal model types.
!g      !
     7. Can dynamically link related tutorials and readily interface with
!g      !
        "traditional" existing static tutorials (including ISPF).
     8. You can link (execute) existing REXX routines from the tutorial.
!g      !
     9. Print the entire tutorial in one action rather than individual screen
!g      !
        dumps.
    10. Attribute characters are not interspersed with data.
!g      !

    Cons:
!   e    !
     1. All tutorials in 1 big member. Kill 1 and you've killed them all. (We do
!e      !                                                                  t
        do backups. Don't we.)
!t                  r        !
     2. If exploited with extensive colourisation the tutorial source may look
!e      !
        congested.
     3. Requires it's own external infrastructure. (Refer below.)
!e      !                          2             !


?Infrastructure
    Infrastructure:
!g
=y            w !
     HELPDRVR - REXX generic driver (note that truncation is NOT accepted).
                Parameters accepted (variables set):
                  1. helpmemb - Dynamic text member name (defaults to HELPTT).
!g                   y        w!                                      y       !
                  2. fastrack - Tag to fast track to on entry (defaults to
!g                   y        w!
                                Index if present or 0(top of tutorial).
!                               y!                  y!
                                (This variable can be doctored during testing,
                                refer to topic Testing.)
!                                              2      !
=g                   y        w!
                  3. /BUILD   - Build tutorial without display and keep tables.
                  4. /CLOSE   - Close and delete tables without a display.
                  5. /CREATE { DSN('dataset.name') }
!g                   y
                              - Creates the tutorial into permanent ISPF tables
!g                            w!
                                based on the original source member's name as
                                follows:
                                  membname - Member name containing the text.
!y                                         w!
                                  membnam# - Member name (override if name is 8
!y                                         w!
                                             chars) with '#' suffix containing
!                                                         y!
                                             the colourisation masks.
                                  membnam@ - Member name (override if name is 8
!y                                         w!
                                             chars) with '@' suffix to keep all
!                                                         y!
                                             the special variables set in build
                                             process.
                                DSN() is the table destination if it is not in
                                the ISPTABL concatenation.
                  6. /DC(c | Lc)
                              - Change the default color.  Enter the character
                                for the color.
                                Notes:
!                               w
                                1. As parameters get translated to upper case,
!                               w !
                                   to enter t (lower case turquoise), enter LT
!                                           y!                              y
                                   with the capital 'L' prefix infering lower
!                                                    y!
                                   case. t by itself will be treated a T.
!                                        t!                            T!
                                2. To use this feature, default indicator of '!'
!                               w !                                           y!
                                   must be used in the attribute lines for
                                   default colours (instead of 'b' for blue).
!                                                               y!     b   !
                                3. You cannot use this feature if the tutorial
!                               w !
                                   is placed in a table using the /CREATE
!                                                                 y
                                   command.  However, you can use this parameter
                                   to change the default color from blue during
                                   the table creation.
                  7. /F( fastrack )
!g                   y
                              - Tag to fast track to on entry. This explicitly
                                fast tracks as oposed to the non-keyword fast
                                track option defined above.
                                You can use this feature to fast track to text
                                not defined as a keyword by using the "find"
                                option. Amongs other chosen parameters, pass,
                                   F(/F 'find text')
!y                                       g        y
                                Notes:
!w
                                - Use quotes if imbeded spaces.
!w                                !
                                - Text split over two lines will NOT be 'found'.
!w                                !
                  8. /OPEN { DSN('dataset.name') }
!g                   y
                              - Build tutorial, display it and keep tables.
                                DSN() is the table source if it is not in the
                                ISPTLIB concatenation.
                  9. /Q       - Tutorial is to be extracted Quickly out of the
!g                   y        w!                            yt     !
                                edit session and present it in /QUEUE format
!                                                              y     !
                                removing the need to save the member and risking
                                a B37/D37 abend.
                 10. /QUEUE   - Tutorial is supplied in the queue and not from
                                a member.  Main use this parameter from builtin
                                tutorials.  This parameter should NOT be used
                                with any other parameter other than the debug
                                /TRACE parameter.
                                "headline" is supplied by setting the variable
                                and issueing a VPUT in the calling REXX.
                                For a sample, look at member HELPBI (if
!                                                            y     !
                                available).
                 11. /REFRESH - Closes tutorial (if open) and rebuilds tables
                                bypassing saving them. Will close on exit.
                 12. /RETURN  - Displays the help text but returns the first
=
                                command entered. This is usefull when displaying
                                an Index for entry and then passing the value
                                back for processing (feeding into another
                                tutorial).
                 13. /TRACE   - Trace progress (for debuging).
!g                   y        w!
                 14. /1       - Data starts in column 1. This will imply it is a
!g                   y        w!
                                non tutorial member and column 1 DOES not
                                contain control characters.  (This way you can
                                use HELPDRVR as a pseudo-browser.
                                Note:  Using as a browser may be timely as it
!                               w    !
                                will still process large members as an
                                interpreted tutorial without the pretty
                                colours.)

                Note - Parameters 1 and 2 are positional while 3 to 14 are
!w                    !
                       keywords.
                     - /CLOSE will close and exit without parsing for any other
!w                     y     !
                       commands.
                     - /CREATE and /OPEN may have the following keyword as the
!w                     y      !    y    !
                       next word to specify destination or source table library
                       respectively if output/input are not to ISPTLIB/ISPTABLE
!                                                              g      !g       !
                       concatenation. Format is:
                         HELPDD=member /CREATE DSN('my.dataset.quoted')
!                        y                          g                 y
                     - Creating a permanent table may not achieve the desired
!w                     !
                       results if the dynamic variable substitution feature is
                       to be exploited. However if you still wish to proceed
                       ensure the appropriate variables are set and VPUT in the
                       dialog issuing the /CREATE command to make them available
                       in the tutorial VGET during the build.
=y            w !
     HELPDRVP - Dynamic display panel. Can be customised and changed using the
                %#panel1=mypanel REXX command.
!               y                !
     HELPDRVS - Skeleton used to generate printable text
     HELPQR   - Dynamic tutorial's tutorial QuickRef.
     HELPTBD1 - Keyword display panel (for debugging).
     HELPTN   - Dynamic tutorial's tutorial navigaton text.
     HELPTT   - This tutorial text for tutorial on this feature and can be used
                as a sample template for user customisation.
!!
=
     Sample(s):
!g
     HELPBI   - Built in help sample that uses the /QUEUE parameter.
!y            w !                                  y     !


.1a.Tutorial driver commands.
!g  2                        g
    The following is a brief summary of the commands that are available once a
    tutorial is displayed.  For frther details refer to the generic TN
!                                                                   2 !
    hyper_link or specifics behind the command.

=y           w!
     /Asis xx- Display the tutorial with/without all the colourisation.
     /F cccc - Find string cccc, where cccc is any character string.
     /FN     - Find next occurance of string from previous find command.
     /H      - Display hyper_links in table format.
     /In1 cc - Include all hidden/sub-divided tutorial components in main set.
     /Line nn- Place display in line mode (line number at top righyt corner).
     /LC     - List closed paragraph ids.
     /LV     - List Variables passed by the main application for substitution.
     /Mark xx- Mark position in tutorial for fast track then use on demand.
     /Print  - Presents without colourisation for printing.
     /QR     - Tutorial Quick Ref. Subset of the full tutorial.
     /R      - Rebuild tutorial display while developing tute w/o exiting.
     /RF     - Refind. Same as the /FN command.
     /TN | ? - Tutorial Navigator.
!y       ! y w!
     /TRACE  - Trace process. Used for debugging purposes. Pass ON/OFF or it
               will be toggled.
!
     /TT     - Tutorial's Tutorial.
     /VB     - Show Version of both /VD and /VT.
     /VD     - Show Version of Dynamic Tutorial driver.
     /VT     - Show Version of User Tutorial driver.
     X       - Exit.
=


.1b.Defining tutorial text:
!g  2                      g
    Type free format text leaving column 1 free for control characters.  At any
    stage this free for text can be fed into the driver to test progress.

    Note - Column 1 is reserved for a control character and will be removed.
!   w     !
           Also note, that column 1 would normally be taken up by an attribute
           byte in an ISPF panel.

.1c.Defining colors(attribute characters):
!g  2                                     g
    Once you have finished your freeform text, build attribute lines only after
!                                                    wpybrgwpy!      y
    lines that are to have text colour highlighted.

    These attribute lines are identified by a ! in column 1 and one of the
!   WPYBRGwpybrgwpy 63714!                    y!
    following characters representing the character attribute immediately below
    the free from text character. Each attribute character will be replicated
    until the next non-blank character. Leading spaces will default to the
    default character (which is 'b').  This may be altered using the builtin
    REXX command feature. In the tutorial, have a line starting in column 1
    %defcol=g (for green).
!   y       g!     g    !
    The following are valid attribute characters:

        Color  Normal  Reverse  Uscore  Blink
!       6     w6      w6       w6      w6     w
        blue     b        B        1      a
!       b        b        B!       1!     a
        green    g        G        2      c
!       g        g        G!       2!     c
        pink     p        P        3      d
!       p        p        P!       3!     d
        red      r        R        4      e
!       r        r        R!       4!     e
        turq     t        T        5      f
!       t        t        T!       5!     f
        white    w        W        6      h
!       w        w        W!       6!     h
        yellow   y        Y        7      i
!       y        y        Y!       7!     i
        default  !       n/a      n/a    n/a
!       !        !

    Any other character will result in the following highlight ("v" was used).
!                                      v             !           y!
    The limitation of the alphabet restricted characters for uscore and blink
!                                                            7     !    d
    representation. However, number used are in sorted color order for uscore
!                                                                      7     !
    and the characters not used in normal color in alphabetic order for blink.
!                                                                       d    !

.1d.Sample text line and attribute line entry:
!g  2                                         g

    You would enter a line as follows (the grid is provided for column placing):
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
                This is an input line with character colors bgprtwy giving:
!   g
           !g                                               bgprtwyg
!   g

    This is an input line with character colors bgprtwy giving:
!   g                                           bgprtwyg
    Note - After the "y" the continued text's color "g" has to be re-directed
!   w     !           y!                             g!
           otherwise the following will be displayed:

    This is an input line with character colors bgprtwy missing the "g: giving:
!   g                                           bgprtwy

.1e.Instream REXX commands:
!g  2                      g
    You can execute REXX commands built into the tutorial text from lines
    identified by a % in column 1. That line will be INTERPRETed.
!                   y!                               y        !

    You can "stack" REXX commands as follows to permit quite extensive logic.
    The initial REXX line must start with a % while the continuations lines may
!                                           y!
    start with a % or a space. To indicate a continuation line ensure the last
!                y!     y    !
    character is a +. The lines are then concatenated together after removing
!                  y!
    any % in column 1 and last char + and STRIPped.  Ensure you have sufficient
!       y!                          y!    y    !
    command seperators (;) to ensure the final string is syntactically correct.
!                       y!
    Refer to hyper_link stack_REXX for example.
!                       2         !

    The following are common uses of this feature (again the grid is provided
    for clarity only):
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
=   y      g
    #1     %headline=' Dynamic Tutorial Sample "HELPTT" '
    #2     %hyper_link=2
    #3     %"ISPEXEC VGET (var1,var2,var3,..,varn) SHARED"
    #4     &Using &VAR1. in building runtime customisations.


    The above explained:
!
=   y  !
    #1 Sets the variable headline to the text you wish to be displayed in the
       heading.
!
    #2 Sets the hyperlink identifier to underscore green.
    #3 Gets some variables set up in the main calling dialog.
    #4 Uses one of the variables when building the tutorial.
=

    Word of warning. If exploited, this REXX feature can be a very powerful
!r                  !
    control tool but it has the potential to cream REXX variables used by the
    driver which could produce unpredictable results. Consequenlty the
    following is a list of internal variables that should be avoided when using
    the REXX % comamnds (and paragraph/tag names):
!            y!
      Hardcoded:
=y              t  wt g
        #defcol = 'b' /* Default color 'blue'                  */
        #chgchr = '&' /* Variable substitution identifier      */
        #rexchr = '%' /* REXX command identifier               */
        #cntchr = '+' /* REXX continuation identifier          */
        #atrchr = '!' /* Attribute line identifier             */
        #ignch1 = '*' /* Ignore line identifier #1             */
        #ignch2 = '/' /* Ignore line identifier #2             */
        #parchr = '.' /* Open paragraph identifier             */
?#parsep
        #parsep ="'.'"/* Open paragraph identifier seperator   */
!y              t w  tg
        #hidchr = '#' /* Closed paragraph identifier           */
?#hidsep
        #hidsep ="'.'"/* Closed paragraph identifier seperator */
!y              t w  tg
        #tagchr = '?' /* Link tutorial  identifier             */
        #patchr = '=' /* Change Pattern identifier             */
        hyper_link
!y
                = '2' /* Hyper link character identifier for   */
                      /* cursor placement fast tracks          */
        #panel1       /* Dynamic display panel                 */
        #helpdver     /* Dynamic Tutorial Driver's version     */
!y                    g

      Runtime defaults:
!
        Cname         /* Users Christian name                  */
        Cname1st      /* Users Christian name first indicator  */
        Sname         /* Users Surname                         */
        #headlin      /* Set to user "headline" or "#member"   */
        #member       /* Tutorial member name                  */
        #tim          /* Time (format hh:mm)                   */
        #tod          /* Time Of Day (actually the day "zone", */
                      /*   eg. morning, afternoon or evening). */
        #sid          /* System Id                             */
        #uid          /* Userid                                */

      Use these variable names for runtime tutorial line adds. Use hyper_link
!
      HB to see usage:
!     2 !
        #table        /* Table name used to build/store tute   */
                      /* (usually the tutorial member name).   */
        #line         /* Text line                             */
        #linea        /* Attribute line                        */
        #vsub         /* Subject line to variable substitution */
                      /* using format "&varname."              */
      User runtime supplied:
!
        headline      /* User set tutorial headline.           */
        tutever       /* Tutorial version.                     */
        helpvars      /* User's set of runtime variables.      */
                      /* 1. Set your runtime variables.        */
                      /* 2. Set variable "helvars" to list of  */
                      /*    all variables, eg.                 */
                      /*     helpvars='var1 var2 var3'         */
                      /* 3. Issue the following commands,      */
                      /*    "ISPEXEC VPUT (helpvars) SHARED"   */
                      /*    "ISPEXEC VPUT ("helpvars") SHARED" */
=

    Also:
        rc, up, down, left and right.
!       R !y  !y    !y    !    y    !
    Also avoid names starting with # which has been extensively used for driver
!                                  y!
    variables.
    Eg. Do not have paragraphs like below to tag as paragraphs (. in col 1):
!                                                               y!
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
=     y    g
           .   UP.  Urban Population Survey.
           . DOWN - How to get down off a duck.
           # RC.    Revenue collection.
           # #I.    Example Number I.
          /|\
!         y
=



.1f.Instream documentation:
!g  2                      g
    You can also include instream documentation in the text by a * or / in
!                                                                y!   y!
    in column 1. These lines will be ignored. With these and clever tag
    manipulation, you can call an executable REXX routine as a linked tutorial.


.2. Scrolling:
!G
    Sample dialogue $HELPDYN demonstrates scrolling control for a dynamic panel
!                   y       !
    making it usable on all model (screen size) terminals.
    Under Customisation Option 1(CO1) the scrolling is transparent.
!         y!            y!     y!y  !
    This feature is not recommended or supported any more.

.3. Invocation.
!G
    There are basically 2 ways of invoking this dialog using a REXX command when
    the HELP PF key is entered. The method used is governed by the type of panel
!       y    !
    design used. There is a 3rd. method for invoking direct.  The following are
    the designs and appropriate code:

.3a.Panels using action bars (with Help action):
!g  2                                           g
    Use an action bar definition as per the following example. Our contribution
    is the yellow entry:
      )ABC DESC('Help') MNEM(1)
!     g
      PDC DESC('Dynamic Help') MNEM(1) ACTION
!     y
          RUN(ISRROUTE) PARM('SELECT CMD(%xxxx)')
!     y                                   w   y
      PDC DESC('General') MNEM(1) ACTION RUN(TUTOR) PARM(...
!     g
      )ABCINIT
!     g
      .ZVARS=....
!     g

.3b.Panels NOT using action bars:
!g  2                            g
    The invoking dialogue must be initiated by a REXX routine displaying a
    panel.
    Code the following in the REXX:
=y
      fkeys = 'ZPF01,zpf13'
      "VGET (&FKEYS) PROFILE"
      szpf01 = zpf01
      szpf13 = zpf13
&     zpf01  = '&#XCMD.'
      zpf13  = zpf01
      "VPUT (&FKEYS) PROFILE"
&     Address TSO "ALLOC F(MYHELP) DA('&CNAME..&SNAME..TUTES') SHR REU"
!y                         g     y
=g
      .....
      Scr1: "DISPLAY PANEL(&PANEL)"
      If rc /= 0 Then Signal exit1
=y
&     If zcmd = '&#XCMD.' Then Do
        "SELECT CMD(%xxxx)"
!y                   w   y
        Signal scr1
      End
      ....
      exit1:
!g
      zpf01 = szpf01
      zpf13 = szpf13
      "VPUT (&FKEYS) PROFILE"
      Address TSO "FREE F(MYHELP)"
!y                        g     y
      Exit
!g
=

.3c.Explicit invocation:
!g  2                   !                       g
    On any command line Enter:
        TSO %HELPDRVR xxxx
!y


    In all cases above xxxx can have the following formats:
!                      w   !
&     HELPDRVR yyyy
!     y        w   y!
&     HELPDRVR SYSHELP=yyyy
!     y        g      yw    y!
&     HELPDRVR MYHELP=yyyy
!     y        g     yw   y!
&     HELPDRVR yyyy=
!     y        g   y
    where yyyy is the name of your dynamic tutorial member. You may append a
!         w    !
    fast track value with the yyyy.
!                             w   !
    You can allocate your own DD for either method.
    If you use the last option (yyyy=, without a member name) it will search
!                               g   y!
    the yyyy DD allocation for member yyyy.
!       w   !                         w   !

    Now for the complex type.
!g
    Each time the tutorial is invoked, it loads the source and builds the table
    and pointers that will be used to display the tutorial and then deletes it
    on exit. This is done each time the tutorial ais called. This can be timely
    for large tutorials.
    This can be minimised with the following 'keyword' control parameters:
!                                             g      !
      /BUILD - Builds the tutorial and exits without any displays but leaves all
!y           w!
               tables and pointers active.
      /OPEN  - If the tutorial is NOT open, opens and builds it and displays it
!y           w!
               depending on the parameters (fast track) passed. It will exit
               without closing the tables and will store pointers for
               re-invocation.  On next invocation it will bypass the build and
               display direct.
      /CLOSE - Closes all the tables opened for the tutorial sessions, (no
!y           w!
               display). This is a mandatory requirement if a previous /OPEN or
!                                                                      y    !
               /BUILD was requested.
!              y     !
    Notes - The /BUILD and /OPEN parameters will create tables and leave them
!w         !    y     !    y    !
            open until the next explicit /CLOSE. Any subsequent invocation
!                                        y     !
            without these parameters will STILL keep the tables and pointers
            open.
          - You may encounter ISPF errors if you exit the master dialog without
!w         !
            /CLOSEing the tutorial.
!           y     !
          - Suggested scenario #1 (usin REXX):
!w         !
=y
              Address TSO "ALLOC F(helpddrvr)DA('help_dataset') SHR REU"
              x=HELPDRVR(HELPDRVR=helpmemb /BUILD)
              ...
!g
              x=HELPDRVR(helpdrvr=helpmemb f-track-1)
              ...
!g
              x=HELPDRVR(helpdrvr=helpmemb f-track-2)
              ...
!g
              x=HELPDRVR(helpdrvr=helpmemb /CLOSE)
              Address TSO "FREE  F(helpddrvr)"
=
            Alternatively it is highly recommended that all invocations are with
            an /OPEN parameter for keeping it open as the first open will do
!              y    !
            exactly that and subsequent opens will be ignored. A final
            invocation with a /CLOSE should be made just prior to exiting the
!                             y     !
            main routine.

.4.Index usage:
!G
    The Index conscept is an feature that can be exploited by this facility.
    The index is realy part of the text with an identity (fast track) to
    paragraphs.  It is recommended that the Index be the last part of the text
    and tagged using the "hidden text" feature so that it does not become part
    of the normal scrollable text (refer to discussion on hidden text).  This
    "indexing" feature automatically records pointers to specifically identified
    paragraphs/lines.  You then text an Index to let the user know of these fast
    path codes.
    There are two types of paragraphs:
    OP - Upen paragraphs identified by a . (dot) in column 1.
!   y  w!                                y!
    CP - Closed or topic specific paragraph identified by a # (hash) in column
!   y  w!                                                   y!
         1. These types of paragraphs may be referred to as hidden text. (For
         further details hyper_link to or enter H on the command line.)
!                                               2!
    Paragraphs will be automaticaly detected and recorded by the use of these
    paragraph identifier character in column 1.
    It is recommended that the CP paragraph format be used for at least the
    Index.
    If detected (fast track to I available), the Index will be the first display
    unless a fast track parameter was used on entry.

    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
=g
           .cc. Paragraph header.... (OP type)
            ......
           #TN. Tutorial navigation. (CP type)
            ......
           # I. Index.               (CP type)
           )END
=
    where cc is any paragraph number/1st. word (trailing dot is optional but a
!         y  !
    space before the description which IS required.
    Do not forget to manually update the Index text. (Auto update with next
    release.) cc does not need to start in column 2.
!             y !

    Individual lines can be manually Indexed (tagged) as follows:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           ?N1
!          g
?N1
            This is a special line that is not a paragraph but should be
!          g
            indexed.
!          g
    The above line will now be fast trackable using N1 on the command line. It
!                                                   2 !
    is recommended that some reference to this be made somewhere to let the user
    know of it. Hence the Index. Go ahead, try N1 on the command line (after
!                                y             2 y
    scrolling up a few lines).
!y
    Note - Index entry of 0 should not be used as it is the default top of
!   w     !               y!
           tutorial as set by this routine.

    It is recommended that the following entry be added to an Index to include a
    predefined Tutorial Navigation text:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
=g
           ?TN (HELPTN) *
                TN - Tutorial Navigation.
           !y      b
=
    Here it is:
?TN (HELPTN) *
     TN - Tutorial Navigation.
!y      !
    Try it using TN.
!                2 !

.4a.Paragraph identifier extraction for Index/fast track.
!g  2                                                     g
 By default OP and CP lines identified by ./# in column 1 will be parse to
 create a keyword to fast track to it.  By default the line is parsed to the
 first full stop and that preceeding it will be used as the keyword for the
 paragraph.  However, you may wish to include "." in keywords as in chapter
 numbers, eg. 1.3.5.  To permit you to change the delimiter, varables #parsep
 and #hidsep are provided for you to customise using the REXX function feature.
 For example you wish to use space as the delimiter, code at the start of the
 tutorial member;
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           %#parsep="' '";#hidsep=#parsep
!g
 Remember to double up on the quotes as the variable is used in an INTERPRET
 instruction. They do not both have to be the same. It basically depends on your
 design logic.

?KW
?..
 All the labels tagged from ., # or ? will be added to the keyword list that can
!                           y! y!   y!
 be displayed by the /KEYWord command. Therefore any tags not presented in the
!                    y    !
 Index may be identified from the keyword list. (The Tutorial Navigator
 addresses this feature.) KW will place you at this paragraph.
!                         2 !
 Note - The keyword list is not sorted but presented in an as processed order.
!w      !
      - Most combibation of characters can be used as keywords. However, all
!w      !
        alphabetic characters will be translated to upper case. (Test B4 U
        publish.)
      - A line can be marked with many keywords. Keyword ..(2 dots)
!w      !                                                2 !
        has been setup to get to this paragraph as well as KW.
!                                                          3 !
      - Suggest devise a methodology for keyword fastrack, eg. hilite
!w      !
?UNDERSCORE
        with underscore and bring that to the user's attention in the
!            3         !
        tutorial.
?HYPER_LINKS
        You can use the underscore hyper_links and placement of the cursor on
!                       1         !3          !
        these lines will fast track to that part of the tutorial. The attribute
        byte should be set to that defined implicitly by variable hyper_link
!                                                                 y
        (default 3) or set explicitly by REXX command %hyper_link=2.
!                3!                                   y           2!
        Note - If the cursor is placed on an underscored text withing the
!w             !
               tutorial body, a search will be made in the keyword list and if a
               match is found it will fast track to it (even if the tutorial
               designed did not explicitly wish it).

.5. Special characters (in column 1):
!G
    The following is a list of the special characters for use in column 1 and
    their affect:
          Blank. Normal text line that will be displayed after color mods.
!       Y!
        . Dot. Paragraph identifier. Record the line number (actually the
!       y!
          previous line - 'last line before') and parse the line to extract the
          "indexing" value (between the two dots/space) and permit fast path
!          g       !
          using this indexing value. Indexing value is added to the keyword
          list.
        # Hash. Hidden paragraph identifier. Same as for the paragraph
!       y!
          identifier but the lines are tagged with the "indexing" value to
          permit display of only those lines belonging to that particular
          paragraph. Refer further to "hidden paragraphs.  Indexing value is
          added to the keyword list.
        ? At. Tag the line with word 1 as the keyword following the identifier.
!       y!
          This tag is added to the keyword list. If word 2 is present, it will
          be treated as a linked turial (refer to Linked Tutorials below).
!                                                 3     33        !
          Note - The tag indicator MUST be set BEFORE the line it it tagging.
!         w     !                  y   !       y     !
               - Do NOT use = in the tag label. Ie. D=xx is invalid.
!               !           r!                      yry !   r      !
        ! Exclamation. Used to identify colouring masks. Should immediately
!       y!
          follow the line it is to mask with the appropriate color below the
          characters.
        = Equal. Used to set/change the default colouring mask. Has the same
!       y!
          affect as a ! mask without the need to repeat after each line. This
!                     y!
          will stay in affect and applied to all text without a following ! mask
!                                                                         y!
          until a = (with the rest of the line blank) is encountered.
!                 y!
          Note - This mask MUST be set BEFORE the text to be affected as apposed
!         w     !          y    !      y      !
                 to the ! which must be after the text.
!                       y!
        % Percent. String of syntactically correct REXX command(s) to be
!       y!
          interpreted.  Usually commands to set variables and record positions
          for lines/paragraphs and their end.
?VS
        & Ampersand. Perform variable substitution on the #line. Replaces all
!       y!
          occurences of &VARNAME. with the value of varname.
!                       y        !                  y      !
          Note - To identify a substitutable variable, it must start with an &
!         w     !                                                            y
                 and terminate with a ..  If you actually need a dot at the end
!                                     y!
                 after substitution double up, eg &ENDTEXT...
!                                                 y         !
               - Watch color masking. Variable substitution may change mask
!         w     !                                                            y
                 column alignment. Suggest making the length of &xx. the length
                 of substituted value (if possible) or don't colourise.
               - Before invoking the tutorial, the dialog must VPUT the
                 variables into the shared pool and the text must contain the
                 following to make them available for substitution. Before the
                 text (usually at the top) code this formatted REXX directive:
                    %"VGET (var_list) SHARED"
!y
                 If there are a lot of variables, set up a variable in your
                 dialog to contain all the variables require and process as
                 follows:
                    REXX dialog:
!g
=y
                        vars = 'VAR1 VAR2 VAR3 .. VARn'
                        "ISPEXEC VPUT (vars" vars") SHARED"
                    Tutorial text (already in ISPEXEC addressing mode):
!g
                        %"VGET (vars) SHARED"
                        %"VGET ("vars") SHARED"
=
        * Asterisk. Instream documentation. Permits the interrnal documentation
!       y!
          of the REXX driver. All lines with * in col 1 will be ignored.
!                                            y!
        / Slash. Same as * above.
!       y!               y!
        ) Right bracket. Fixed processing directive. For further details refer
!       y!
          to option T (Testing).
!                   y! 2      !

    Any other character in column 1 will be ignored and truncated.
!   R                                                             !


?Linked
?Tutorials
.6. Linked Tutorials:
!G
    One tutorial may need to reference another tutorial.
    (You can use this feature to present non-tutorial format data by appending a
    parameter of /1 which infers that datastarts in column 1 and no'control
!                y !
?HELPDRVR_browsed (HELPDRVR=HELPDRVR /1)
    characters are present. Eg., use this hyperlink HELPDRVR_browsed.)
!                                                   2               !

    This can be achieved as follows:
    1. Notate the line using the tag feature ?xx in column 1. The 2nd. word
!                                            y  !                 w   !
       should identify the link and the link type. Without this it would just be
       a fast track tag.  You can pass an optional * as the 3rd. word to
!                                                  y!       w   !
       indicate stay where I am on return from the link. Without this * the
!                                                                     y!
       display will be repositioned to where the tag was defined.

    2. Precede the above line with the following one of the following:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           ?XX1 (SYSEXEC=HELPXX1) *  (for CO1    -or-   )
!g              yg              yg   !           w      !
           ?XX2 HELPXX2              (for CO2           )
!g                                   !
           .         XX1 - Invoke Sample tutorial #1 (using CO1) and stay.
!g
           .         XX2 - Invoke Sample tutorial #2 (using CO2) and reposition.
!g
       where XXx is the name of another dynamic tutorial.
!            y   !
       Note - CO1 is identified by the brackets (.). What is between the
!      w     !                                  ygy!
              brackets indicates alternative member source.
?XX1 (HELPXX1) *
           XX1 - Invoke Sample tutorial #1 (using CO1) and stay.
!          Y  !
?XX2  HELPXX2
           XX2 - Invoke Sample tutorial #2 (using CO2) and reposition.
!          Y  !
?XX3 (HELPXX3) *
           XX3 - Invoke a non-existant tutorial #3 (using CO1) and stay.
!          Y  !

       Go ahead go to the Index and enter XX1 or XX2 on the command line.
!                                         y   !  y   !

    You can link to other dialogues by a reserved 3rd. word.  If you wish to
!                                                 w    !
    return to the same spot, you will need the * as the 4th. word:
!                                              y!       w    !
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           ?IB1 xxxxxxxx yyyy
!g              p        w
           .         IB1 - Invoke Linked Dialog (scroll)
!g
           ?IB2 xxxxxxxx yyyy *   (note use of * return to stay)
!g              p        w    g   !
           .         IB2 - Invoke Linked Dialog (stay)
!g
    where yyyy can have one of the following values:
!         w    !
       ISPF - Invoke a static ISPF panel (including IBM supplied panels).
!      y    !
              xxxxxxxx would represent a panel name.
!             p        !
       REXX - Invoke a REXX routine.
!      y    !
              xxxxxxxx would represent a REXX module name in the SYSEXEC
!             p        !
                       concatenation.
       CMD  - Invoke a program.
!      y    !
              xxxxxxxx would represent either a load module in the linklist,
!             p        !
                       LIBDEF'd or REXX routine followin normal command
                       processing rules.
       To both the REXX and CMD you may pass parameters using xxxxxxxx(parms)
!                  y    !   y   !                             p
       between brackets. Seperators, if applicable, must comply to dialog
       specifications.
    Here are some examples to try:
!g
?IB1 ISR10000 ISPF
       IB1   - Invoke ISPF View Tutorial (scroll)
!      y     !
?IB2 ISR10002 ISPF *
       IB2   - Invoke ISPF Browse-Introduction Tutorial (stay)
!      y     !
?AGAIN HELPDRVR(HELPTT 3) REXX *
       AGAIN - Reinvoke this tutorial at topic 3 (Stay)
!      y     !
               used ?AGAIN HELPDRVR(HELPTT 3) REXX * in text
!              !    y                                  !
?IALC  ISRDDN CMD *
       IALC  - Command ISRDDN, ISPF allocation (Stay)
!y           !


.C. Customisation Option (CO) - Building User defined tutorials:
!G
    This can be achieved by one of two ways:
    1. CO1.
!g     2  g
?M01
       Take a copy of member HELPTT and customise it with your desired text.
!                            y        !
&      The customisation need to be a unique member in the &DEF#DD.
!                                                          g
       concatenation (first hit).
       Set the headline using the %headline=' My details ' REXX command or
!                                 y                       !
       alternatively clone panel HELPDRVP and issue %panel1=mypanel REXX
!                                y       !          y              !
       command to use it instead.
       Invocation REXX code:

           "SELECT CMD(%HELPDRVR p1 p2)" or x=Helpdrvr("p1 p2")
!y                                       !  y
       where,
&          p1 - Name of your tutorial member in &DEF#DD.. Alternatively
!y            !                                 g      !
                it can be in any DD concatenation but then it must be
                coded as follows: DDname=p1.
!                                 y        !
?C16
                Note - To use this feature there MUST not be more than 16
!               w     !                          y        !            r
                       members in the DD concatenation. ISPPLIB tends to be more
&                      than &DEF#DD. so it became the dafault. Prior to invoking
!                           g       !
                       the tutorial you may allocate any DD either temporarily
                       in the invoking dialog or permanently at logon.
                       LIBDEFs are not recognised.
           p2 - First tagged line to be displayed (optional). Default is top or
!y            !
                Index if present.

       You can pre allocate the tutorial dataset in your processing dialogue as
       follows:
=y
&          Address TSO "ALLOC F(MYHELP) DA('&CNAME..&#SNAME..TUTES') SHR REU"
!y                              g     y
           Address ISPEXEC
           .......
           "SELECT CMD(%HELPDRVR MYHELP=TUTE#1)" or x=helpdrvr('MYHELP=TUTE#1')
!y                               g     y         !  y           g     y
           .......
           Address TSO "FREE  F(MYHELP)"
!y                              g     y
           Exit
=
    2. CO2.(Obsolete)
!g     2  !R
       Customise member $HELPDYN. Look for the eyecatchers Customise here \|/
!                       y       !                          y                 !
       and /|\ flags. All other code should be left ASIS with the exception of
!          y   !                                    r    !
       The REXX code. Note this member is self contained and contains all the
       processing infrastructure to execute the tutorial asis.
       Note - Member $HELPDYN is no longer supported and will not containg the
!w            !      y       !
              the latest enhancements.

    Watch the following:
!g
    Ca.For CO1, include a REXX set headline statement as follows:
!   g  !   2  !
?HL
          %headline=' Your desired tutorial headline. '
!         y           g                              y
    Cb.For CO1, speed up subsequent tutorial procesing by using the /OPEN|/CLOSE
!   g  !   2  !                                                     y    !y
       option.
    Cc.Use the ., # or ? features only if you need an Index or fast path.
!   g  !       y! y!   y!
       Note - The ? statement should be BEFORE the actual line.
!      w     !    y!                    y      !
    Cd.Closed paragraphs (CP) should be contiguous and at the end of the
!   g  !                  y !
       tutorial with the Index being the last CP.
!                        g    !               y !
    Ce.You can change the default color dynamically by %defcol=g. Don't forget
!  g   !                                               y       g!
       to set it back. (Easier to use the = in col 1 option.)
!                                         y!

)TESTING
?Testing
?RF
?/R
.T. Testing:
!G
    For CO2, modify and execute.
!       2  !
    For CO1, modify your member, save it and in split screen mode enter command
!       2  !
&   TSO &#XCMD. library=yyyy on the command line where library is either your
!y               g      yw    !                         g       !
    defined DD (or defaulted) and yyyy is your member name.  Modify your member
!                                 w    !
    and enter /REFRESH t on the command line to refresh without exiting. t can
!             y         !                                                y!
    be an optional fast path to text being tested. t could be tagged with the ?t
!                                                  y!                         y
    command.
    Enter /ASIS on the command line to display the tutorial in a non colorised
!         y     !
    display.

    During development you can fast track to your developing text by tagging the
    spot, eg. ?QM1 and at the top of the text insert a temporary REXX code
!             y   !
    %fastrack='QM1' which will fast track to tag identified by variable
!   y               !
    fastrack or use the )SKIP directive.
!                       y     !

    Debugging directives.
!g
    There are a number of fixed processing directives that may be used for quick
    controls for debugging/testing purposes. These directives are
    defined using ) in col 1 as follows:
!                 y!
       )SKIP xxx - Skip to label )xxx. During testing, you may only wish to
!y           w   !               y   !
                   process a subset of the text and rather than create a test
                   copy use this directive bypass processing until the label is
                   reached.
                   Use this feature to skip to instream tutorials in executable
                   REXX code. Eg.,
             Member MYREXX contains:
        =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+
!       r      w
=g
               ....
               /*
               )SKIP TUTE
               */
               .....
               /*
               ...
               )TUTE
               ...
=
             Invoked by:
               x=Helpdrvr('MYREXX')
!y
       )xxx      - Label to skip to using the )SKIP xxx directive.  If label not
!y               !                            y         !
                   found, no text will be processed from the last )SKIP.
!                                                                 y    !

       )END      - Exit. Stop further processing and display what has been
!y               !
                   built.
       )TRACE    - Turn trace on for processing of following lines. (Issues the
!y               !
                   equivalent of the %trace='Y';Trace r REXX command.
!                                    y                  !
       )TRACEOFF - Turn trace off.
!y               !
       )INI      - Index not I.  Indexes should be tagged I which has special
!y               ! y!    y!  y!                           y!
                   processing options. Sometimes you may finish up with an I
!                                                                          !
                   label that is required for other reasons. Use this option to
                   indicate that index is not I. If you need an index tag it
!                                             y!
                   different (eg. .IX) and explicitly invoke it on entry with
!                                 y  !
                   command:
                      CMD(%HELPDRVR helpmem IX)
!y

    Note - These only control lines to be processed. The final presentation will
!w        !
           still depend on the contents of what was processed and parameters
           passed.
         - Don't forget to remove these directives from the final draft.
!w        !
           Skip to labels can remain.

    GOTCHA:
!g
    Ta.It is recommended that closed paragraphs (CP) be places at the end so as
!  g   !                      y!     y!          y !
       not to interfere with OP text. This includes any End-off text.
!                            y !                        y      !
       (For details on hidden text, enter H on the command line or refer to
!                                         2!
       Index).
!      y!
    Tb.Mixing OP and CP paragraphs will cause unpredictable results when
!  g   !      y !    y !
       scrolling.


&                     (End of instructions.) Bye &CNAME..
!G
*
#H. Hidden text (closed paragraphs - CP):
!G
    For the purposes of this tutorial, hidden text is the name given to closed
    paragraphs identified by # in column 1. These MUST be explicitly refered to
    by it's code. Text is not protected but rather a method of selective display
    as prompted/identified through the Index.

    This feature is redundant if Indexes are not used and may cause
    unpredictable results.

    Note - Hidden text end is identified by the start of the next hidden text
!   w     !
           and is used to stop scrolling at the end of that topic.
         - With hidden text, the next topic is not shown if the hidden topic
!   w     !
           does not fill the entire screen as in normal text where the full
           screen is filled with the following topic(s).

    Another method of hiding text is to tag a line passing a ? (tag but hide
!                                                            y!
    text) identifier as the 2nd. word.
!                           w   !
    This is useful when a paragraph needs to be tagged at the preamble
    preceeding it. Eg. creating an index:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           #I ?  This will tag as Index but leave line blank.
!g            yg
=          g
           !G
           &  Hello &CNAME..
            The following is the index which can be used to fast track
            through this tutorial.
              I. Index
           !G
=
    This way the index paragraph conscept is maintained but I will display the
!                                                           y!
    greeting preamble.

    Some tutorial designers may prefer self contained topics, (eg. when calling
    help from a dialog and don't want to present "unrelated" text). You can tag
    all paragraphs with the # tag. Individual user's that prefer contiguous
!                           y!
    display may select it with option IN1 (refer to the TN - Tutorial Navigation
!                                     y  !              2 !
    topic).
    Hidden text topics can be navigated using the LEFT or RIGHT PF keys.
!                                                 y   !   y    !


                              (End of Hidden text)
!G
*
#HB. Hidden text (Big):
!G
    The following text comprises of 80 more lines to demonstrate > 1 screen
    handling. All set up using the the following REXX command feature.
 %Do y=1 to 80;#line=' HB line.'y;#linea='!'Copies('t',8)WW;"TBMOD" #table;End
!g             p    g             p     g                           p     g
%Do y=1 to 80;#line=' HB line.'y;#linea='!'Copies('t',8)WW;"TBMOD" #table;End

    Notes - While this is a handy dynamic feature, it may be impractical in a
!w          !
            permanent ISPF table of the tutorial.
          - Variable used (recognised by HELPDRVR routine):
!w          !
              #table   - Table name this tutorial was built into
!             p        w!
                         (permanent/temporary).
              #line    - Variable containg the text line and is a field in
!             p        w!
                         #TABLE.
              #linea   - Variable containg the attrbutes line and is a field in
!             p        w!
                         #TABLE.

?stack_REXX
    The following is an example of REXX stacked commands and the subsequent
    output. Note the lack of confusion to the above example but observe trailing
    ; and +:
!   y!    y!
     Alternative greeting (starting col 1 and column alligned):
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           %Do y=10 To 20;                                             +
!          yg            y
           %#line= ' Continuation of REXX command over 1 line...'y;    +
!          yg                                                     y
           %#linea='!ttttttttttttttttgggggttttttttttttttttttttttwwww'; +
!          yg                                                        y
           %"TBMOD" #table;End
!          yg

              - or -
!t

           %Do y=10 To 20;+
!          yg            y
                #line= ' Continuation of REXX command over 1 line...'y;+
!g                                                                    y
                #linea='!ttttttttttttttttgggggttttttttttttttttttttttwwww';+
!g                                                                       y
                "TBMOD" #table;+
!g                            y
            End
!g
%Do y=10 To 20;+
     #line= ' Continuation of REXX command over 1 line...'y;+
     #linea='!ttttttttttttttttgggggttttttttttttttttttttttwwww';+
     "TBMOD" #table;+
 End


#IA. Interesting alternative:
!G
?XX

     Traditional greeting (starting col 1):
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
!   r      w
           &  Hello &CNAME..
           !  b     idchaeidchaeidchae
!g
     would generate (note trailing dots' colour is governed by fixed mask):
&  Hello &CNAME.......
!t       idchaeidchaeidchae

     Alternative greeting (starting col 1 and column alligned):
=g
           %#line='  Hello 'cname'.';+
            #linea='bbtttttt'Substr('idchaeidchaeidchae',1,Length(cname))'t';+
            "TBMOD" #table

=
     would generate (note that the trailing dots restored to original colour):
%#line='  Hello 'cname'.';+
 #linea='bbtttttt'Substr('idchaeidchaeidchae',1,Length(cname))'t';+
 "TBMOD" #table


 Using varible substitution while building lines at runtime:
=g
           %Do y=10 To 20;+
                line=' Sample for' #uid;+
                #line= ' &LINE. of REXX command over 1 line...'Right(y,2,'0');+
                #linea='!ttttttttttttttttgggggttttttttttttttttttttttwwww';+
                #vsub=1;+
                "TBMOD" #table;+
            End;+
            #vsub=0
=

%line=' Sample for' #uid;ll=1
%Do y=1 To 30;+
     #line= ' &LINE. of REXX command over 1 line...'Right(y,2,'0');+
     #linea='!'Copies('p',ll)'gggggttttttttttttttttttttttwwww';+
     #vsub=1;ll=ll+1;+
     "TBMOD" #table;+
 End;+
 #vsub=0


&                            (End of Hide Big.)
!G


*
* This should be the last entry.
*
* Note the index is not paragraphed but manually positioned as the
* start of the Index is before the "I.".
*
=G!                                                                            G
#I ?  This will tag as Index but leave line blank.
!G
&  Hello &CNAME..
!G!      idchaeidchaeidchae                                                    G

                                   I. Index:
!G!                                yg                                          G

   The following topics are presented in sequence or may be fast tracked by
   selecting from the codes below to demonstrate "index" control. Enter I to
!G!                                               y    !                y!     G
   return to the Index:

=Gy 2 w  !                                                                     G
    1   - Features.
!Gy 2w   !                                                                     G
    1a  - Tutorial driver commands.
    1b  - Defining tutorial text.
    1c  - Defining colors(attribute characters).
    1d  - Sample text line and attribute line entry.
    1e  - Instream REXX commands.
    1f  - Instream documentation:
=Gy 2w   !                                                                     G
    2   - Scroling.
    3   - Invocation.
=Gy 2 w  !                                                                     G
    3a  - Panels using action bars (with Help action).
    3b  - Panels NOT using action bars.
    3c  - Explicit invocation.
=Gy 2 w  !                                                                     G
    4   - Index usage.
    4a  - Paragraph identifier extraction for Index/fast track.
    5   - Special characters (in column 1).
    6   - Linked Tutorials.
    C   - Customisation Option (CO) - Building User defined tutorials.
    T   - Testing.
=G!                                                                            G

   The following topics will not be presented in sequence but can be fast
   tracked by selcting from the codes below:

=Gy 2w   !                                                                     G
    I   - This Index.
    H   - Hidden text.
=Gy 2 w  !                                                                     G
    HB  - Hidden text(Big).
    IA  - Interesting greeting alternative eaxample.
?QR (HELPQR) *
    QR  - QuickRef.
?TN (HELPTN) *
    TN  - Tutorial Navigation. (Linked tutorial 'HELPTN'.)
=G!                                              y     !                       G

   Marked text (incomplete list):
=Gy 2 w  !                                                                     G
    KW  - Keywords for topics missing from Index.
    HL  - How to set tutorial headline.
    RF  - /REFRESH command.
    VS  - Variable substitution.
=Gy 2  w !                                                                     G
    C16 - Text to display if DD Concatenations is > 16.
!Gy 2  w !                      y!                  y !                        G
    M01 - Text to display if tutorial member is not found and this defaulted.
    XX1 - Invoke sample CO1 tutorial. (Linked tutorial 'XX1'.)
    XX2 - Invoke sample CO2 tutorial. (Linked tutorial 'XX2'.)
    N1  - Marked to notate important line
!Gy 2 w  !                                                                     G
=G!                                                                            G

                               (End of Index.)
!G
