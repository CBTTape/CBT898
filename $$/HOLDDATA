/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* HOLDDATA: V1.07                                                    */
/*                                                                    */
/* Macro to process HOLDDATA from SDSF held output. It will create an */
/* ISPF table of all the hold data which can be selectively browsed.  */
/* Alternatively you may pass a parameter of '/B' to browse all the   */
/* held PTFs in a browse loop. To break the browse loop, enter        */
/* 'TSO QUIT *' on the command line and end the last browse session.  */
/*                                                                    */
/* Members required to package this product. Missing members may      */
/* cause errors but will not stop basic function use.                 */
/*  REXX:                                                             */
/*    $ALKUVOL o Site customised UNIT() VOLUME() definitions.         */
/*               Required if UNIT(SYSALLDA) is not sufficient to      */
/*               allocate a dataset at site.                          */
/*    HOLDDATA - This macro driver                                    */
/*    QUIT     o Command to break browsing loop                       */
/*    SFHS     o Macro to summarise hold data by category (reasons).  */
/*               (CSC Software/Factory only specific - required for   */
/*               the SUMIT command.)                                  */
/*  Panels:                                                           */
/*    HOLDDAPF - Table display (Fmid)                                 */
/*    HOLDDAPC - Table display (Causer)                               */
/*    HOLDDAP* o Tutorial panel(s)                                    */
/*  Skeletons:                                                        */
/*    HOLDDATS o Table summariser (required for PSUM command)         */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=
    Parse SOURCE . xenv xcmd xdd xdsn .
    spref=Sysvar(Syspref);userid=Userid()
    If spref=userid Then hlq=userid;Else hlq=spref'.'userid
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL()
error_off_$ALKUVOL:Signal off Syntax

    "VGET (holdmac1) SHARED"
    If holdmac1='1' Then Signal macro_1

    Parse Upper Var parm# parm#
    #smppts='SMPEG11.OS390.SMPPTS'

    #tr=Trace('o')
    Call parse_parms
    If trace=Y Then Trace r

ini1:
    "ISREDIT (status)=USER_STATE"
/*
    "ISREDIT F '1PAGE' 1 FIRST"
    If rc /= 0 Then Do
        zedlmsg = "Not processing a FBA dataset. Offsets are out and",
                "would be difficult to compensate for during parsing.",
                "Suggest offload to a FBA dataset and re-execute.",
                "Common cause is 'T' option under 'FLASHER'."
        Signal erx1
    End
*/

    Call get_pts
    dsn   = "System Hold PTS members"
    #find = "ACTION"                        /* Default find CAUSER    */
    h#s   = '++ HOLD'
    h#o   = '++HOLD'
    h#f   = h#s
    h#t   = 'S'
    holdvars = 'table,holdtype,holddsn,holddisp,h#f,h#t,h#s,h#o,excldoc'
    panel='HOLDDAPF';skel='HOLDDATS'
/*  hdpfk = 'ZPF10,ZPF11'                                             */
/*  "VGET (&HDPFK)"                                                   */
/*  szpf10 = zpf10                                                    */
/*  szpf11 = zpf11                                                    */
/*  zpf10  = '/LEFT'                                                  */
/*  zpf11  = '/RIGHT'                                                 */
/*  "VPUT (&HDPFK)"                                                   */
    quit=
    missing_msg='GIM35904I'
    holddisp = "MOD"
    holdreas = '',
               'ACTION AO DB2BIND DDDEF DELETE DEP DOC DOWNLD EC',
               'ENHANCED EXIT EXRF FULLGEN IOGEN IPL MSGSKEL MULTSYS',
               'MVSCP RESTART',
               ''
    If parm1='' Then Signal con1
    If Index(holdreas,' 'parm1' ') > 0 Then Signal con1
    If parm1 = "LIST" Then list = "Y"
    parm1=

con1:
    "ISREDIT FIND ' CAUSER ' FIRST"
    If rc ¬= 0 Then Do
        zedlmsg = "'CAUSER' not found. Is this a proper report???"
        Signal erx1
    End
    "ISREDIT FIND ' ZONE ' PREV"
    "ISREDIT (line) = LINE .ZCSR"
    Parse VAR line . ' ZONE ' zone .
    zone = Strip(zone)

    table = "$T"Time('s')
/*  holddsn = "'"hlq".$"Date('J')".HOLD."zone"'"                      */
    "TBEND &TABLE"
    "TBCREATE &TABLE KEYS(MEMBER)",
        "NAMES(REASON,FMID,HOLDERR,HOLDSYS,BROWSED,CAUSER",
        ") NOWRITE"
    #tr=Trace('o')
    holderr=;browsed=
    find=' CAUSER SYSMOD SUMMARY '
    "ISREDIT FIND '"find"' FIRST"
    If rc=0 Then Do
        missing_s=;missing_o=
        Do Forever
            "ISREDIT FIND '"missing_msg"'";If rc/=0 Then Leave
            "ISREDIT (line)=LINE .ZCSR";"ISREDIT (lin@)=CURSOR"
            Parse VAR line ptf . 'PREREQUISITE SYSMOD' missing .
            Do While Substr(line,2,7)=''
                lin@=lin@-1;"ISREDIT (line)=LINE" lin@
                Parse VAR line ptf .
            End
            If Wordpos(ptf,missing_s)>0 Then Do
                w#=Wordpos(ptf,missing_s);xxx=missing_o;missing_o=
                Do i=1 To Words(xxx)
                    Parse VAR xxx xx xxx;If i=w# Then xx=xx','missing
                    missing_o=missing_o xx
                End
            End
            Else Do
                missing_s=missing_s ptf;missing_o=missing_o missing
            End
        End
    End
    "ISREDIT (lin#)=CURSOR"
    "ISREDIT LABEL" lin#+1 "= .MARKF"
    find=' SYSMOD   STATUS    TYPE'
    xtra_msg='If it is positively output from an SMP/E job, my initial',
             'suggestion is to exclude all lines ( "X ALL" ) and',
             'issue a shift right ( ")1 " ) line command on the',
             'excluded lines (only because you can do it more',
             'efficiently than I on large output) and then execute',
             '"HOLDDATA" again.'
    "ISREDIT FIND '"find"' FIRST"
    If rc/=0 Then Do
        zedlmsg="Does not conform to 'HOLDDATA' processable format.",
                'Could not find "'find'" in session.' xtra_msg
        Signal erx1
    End
    "ISREDIT (lin#)=CURSOR"
    "ISREDIT LABEL" lin#+1 "= .MARKF"
    "ISREDIT FIND '"find"' LAST"
    "ISREDIT FIND 'PAGE ' 1 7 NEXT"
    If rc=0 Then "ISREDIT LABEL .ZCSR=.MARKT"
    Else "ISREDIT LABEL .ZLAST=.MARKT"
    "ISREDIT CURSOR = .MARKF"
    "ISREDIT (markt)=LINENUM .MARKT"
    #tr=Trace(o)
    Do Forever
        "ISREDIT FIND P'¬¬' 2  .MARKF .MARKT"
        If rc /= 0 Then Leave
        "ISREDIT (lines) = LINE .ZCSR"
        If nondata(lines) Then Iterate
        "ISREDIT (lin#) = LINENUM .ZCSR"
        Do Forever
            lin#=lin#+1;If lin#>markt Then Leave
            "ISREDIT (linen) = LINE" lin#
            If rc/=0 Then Leave
            If nondata(linen) Then Iterate
            If Substr(linen,2,2)/='' Then Leave
            lines = lines linen
        End
        "ISREDIT CURSOR=" lin# 0
        lines=Space(lines)
        member=Word(lines,1);fmid=Word(lines,4)
        Parse VAR lines lines 'CAUSER' causer
        Parse VAR lines lines 'HOLDS' holdsys
        Parse VAR lines .     'HOLDE' holderr
        If holderr='' & holdsys='' Then Iterate
        causer=Translate(Space(causer),',',' ')
        holderr=Translate(Space(holderr),',',' ')
        If holderr='' Then reason=''
        Else               reason='ERR'
        If Wordpos(member,missing_s)>0 Then Do
            missing=Subword(missing_o,Wordpos(member,missing_s),1)
            reason=Space(reason 'Missing('missing')')
        End
        xXx=holdsys
        Do while xXx/=''
            Parse VAR xXx xx xXx
            Parse VAR xx reas '(' ptf ')'
/*          reas=Substr(reas,1,Verify(reas,'*-#')+2)                  */
            If Wordpos(reas,reason)=0 Then reason=reason reas
/*          reas=Strip(Translate(reas,'','-*'))                       */
        End
        reason=Translate(Space(reason),',',' ')
        "TBMOD &TABLE"
    End

    "TBSORT &TABLE FIELDS(MEMBER)"
    "TBTOP &TABLE"

    x=Trace(#tr)
    If browloop /= 'Y' Then Signal scr1

extract_errors:
    #tr=Trace('o')
    Do Forever
        "TBSKIP &TABLE"
        If rc /= 0 Then Do
            zedlmsg = "End of data....."
            "SETMSG MSG(ISRZ001)"
            Leave
        End
        zedlmsg = "System hold '"reason"'....."
        "SETMSG MSG(ISRZ001)"
/*      "BROWSE DATASET('&PTS(&MEMBER)')"                             */
        x_x=find_member('BROWSE',member)
        If x_x/='0' Then Do
            zedlmsg=zedlmsg 'Browse loop prematurely terminated.'
            "SETMSG MSG(ISRZ001)";Leave
        End
        "VGET multquit"
        xx = multquit
        multquit = ''
        "VPUT multquit"
        If xx = "*" Then Leave
    End
    If Verify(Trace(),'NO')>0 Then #tr=Trace('R');Else #tr=Trace('o')
    "TBTOP &TABLE"

scr1:
    sel=;zcmd=;s#='('Substr(panel,Length(panel),1)')'
    "TBDISPL &TABLE PANEL(&PANEL) CURSOR(&CSR1)"
    If rc > 4 Then Do
        "TBEND &TABLE"
        Signal ext1
    End

    Parse VAR zcmd cmd parm1 parm2 .
    excldoc=0

    If cmd='TRACE' Then Do
        If parm1="OFF" Then Do
            #tr=Trace('O')
        End
        Else Do
            If Verify(Trace(),'NO')>0 Then #tr=Trace('R');Else #tr=Trace('o')
        End
        Signal scr1
    End

    "VGET ZVERB"
    If zcmd='DT' | zcmd='D' Then Do
        If panel='HOLDDAPC' Then panel='HOLDDAPF';Else panel='HOLDDAPC'
        Signal scr1
    End
/*  If Wordpos(zcmd,'LEFT RIGHT')>0 Then Do                           */
/*      If zcmd='LEFT' Then panel='HOLDDAPF';Else panel='HOLDDAPC'    */
/*      Signal scr1                                                   */
/*  End                                                               */

    If cmd = 'L' Then Do
        "TBTOP &TABLE"
        "TBVCLEAR &TABLE"
        member = Strip(parm1)
        "TBSARG &TABLE NAMECOND(MEMBER,GE)"
        "TBSCAN &TABLE"
        If member = parm1 Then Do
            "TBSKIP &TABLE NUMBER(0) POSITION(TABPTR)"
            zedlmsg = "Locate field '"parm1"' found."
        End
        Else Do
            "TBSKIP &TABLE NUMBER(-1) POSITION(TABPTR)"
            zedlmsg = "Locate field '"parm1"' NOT found."
        End
        "SETMSG MSG(ISRZ001)"
        Signal scr1
    End
    If cmd = 'HF' Then Do
        Parse VAR zcmd . parm1
        If parm1 /= '' Then h#f = Strip(parm1)
        Else Do
            If h#t = 'S' Then Do
                h#f = h#o
                h#t = 'O'
            End
            Else Do
                h#f = h#s
                h#t = 'S'
            End
        End
        zedlmsg = "HOLD find is set to '"h#f"'."
        "SETMSG MSG(ISRZ001)"
        Signal scr1
    End
    If Wordpos(cmd,'PRINT PRNT PALL')>0 Then Do
        "TBTOP &TABLE"
        pcount = 0
        If Wordpos(parm1,holdreas)>0 Then holdtype=parm1;Else holdtype=
        If parm1='XD' Then excldoc=1
        holddsn=Set_holddsn()
        Do Forever
            "TBSKIP &TABLE"
            If rc/=0 Then Leave
            Call view_get_data
            pcount=pcount+1
            browsed='P'
            "TBMOD &TABLE ORDER"
        End
        zedlmsg = pcount "PTF holddata output to dataset",
                holddsn"."
        "SETMSG MSG(ISRZ001)"
        Signal scr1
    End
    If Wordpos(cmd,'R REFRESH')>0 Then Signal con1
    If Wordpos(cmd,'XO X OO O OF XF')>0 Then Do
        Call exclude_opt
        Signal scr1
    End
    If cmd='BHOLD' Then Do
        If holddsn='HOLDDSN' Then holddsn=Set_holddsn()
        Select
            When (Sysdsn(holddsn) /= 'OK') Then Do
                zedlmsg = "Print some HOLDdata first."
                "SETMSG MSG(ISRZ001)"
            End
            When (parm1 = 'CLEAR') Then Do
                x = Msg('Off')
                Address TSO "DELETE" holddsn
                Address TSO "ALLOC DA("holddsn") NEW",
                    "RECFM(F B) SPACE(10,5) CYLINDERS" unitvol,
                    "LRECL(80) BLKSIZE(0) DSORG(PS)"
                Address TSO "FREE DA("holddsn")"
            End
            Otherwise Do
                Select
                  When (Substr(parm1,1,1) = 'E') Then bhold_a = 'EDIT'
                  When (Substr(parm1,1,1) = 'V') Then bhold_a = 'VIEW'
                  Otherwise bhold_a = 'BROWSE'
                End
                Call ON ERROR NAME err1
                bhold_a "DATASET(&HOLDDSN)"
                Call OFF ERROR
            End
        End
        Signal scr1
    End

    If cmd = 'SUMIT' Then Do
        "ISREDIT SFHS TABLE("table"),"holdreas
        Signal scr1
    End

    If cmd = 'PSUM' Then Do
        "FTOPEN TEMP"
        "FTINCL" skel
        "FTCLOSE"
        "VGET ZTEMPF"
        tempsub=ztempf
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        zedlmsg="Use your favourite save facility or lose it on exit."
        "SETMSG MSG(ISRZ001)"
        "VIEW DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Signal scr1
    End

    If sel = '' Then Do
        "ISPEXEC TBTOP &TABLE"
        "ISPEXEC TBSKIP &TABLE NUMBER(&ZTDTOP)"
        Signal scr1
    End

    msub = ztdsels
    Signal con2

mlt1:
    "TBDISPL &TABLE"

con2:
    "ISPEXEC TBQUERY &TABLE POSITION(tabptr)"
    "CONTROL DISPLAY SAVE"
    If sel = 'P' Then Do
        If reason = 'ERR' Then Signal not_on_helderr
        Call get_holdtype
        holddsn = Set_holddsn()
        Call view_get_data
        browsed = 'P'
        "TBMOD &TABLE ORDER"
        Signal nxt1
    End

    If sel = 'H' Then Do
        If reason = 'ERR' Then Signal not_on_helderr
        Call get_holdtype
        #holdsn = holddsn
        holddsn = "'"hlq".HOLDDATA.DS"time('s')"'"
        Address TSO "ALLOC DS("holddsn") NEW CATALOG REU TRACKS",
            "SPACE(10 10) DSORG(PS)" unitvol "RECFM(F B)",
            "LRECL(80) BLKSIZE(0)"
        disp# = holddisp
        holddisp = "SHR"
        Call view_get_data
        holddisp = disp#
        browsed = 'H'
        "TBMOD &TABLE ORDER"
        Call ON ERROR NAME err1
        zedlmsg="Holddata: Error="holderr", System="holdsys",",
            "Causer="causer"."
        "SETMSG MSG(ISRZ001)"
        "BROWSE DATASET(&HOLDDSN)"
        x = Msg('Off')
        Address TSO "DELETE" holddsn
        x = Msg('On')
        Call OFF ERROR
        holddsn = #holdsn
        Signal nxt1
    End

    If sel = 'X' Then Do
        "TBDELETE &TABLE"
        Signal nxt1
    End

    If sel = 'R' Then Do
        zedlmsg='System:' holdsys
        "SETMSG MSG(ISRZ001)"
        msub=1
        Signal nxt1
    End
    If sel = 'E' Then Do
        zedlmsg='Error:' holderr
        "SETMSG MSG(ISRZ001)"
        msub=1
        Signal nxt1
    End
    If sel = 'C' Then Do
        zedlmsg='Causer:' causer
        "SETMSG MSG(ISRZ001)"
        msub=1
        Signal nxt1
    End

    viewer = 'BROWSE'
    If sel = 'V' Then viewer = 'VIEW'
    If sel = 'E' Then Do
        If Substr(holderr,1,1) = '-' Then memb = Substr(holderr,2)
        Else                              memb = holderr
    End
    Else memb = member
/*  If trace = 'y' Then,                                              */
/*      Say VIEWER "DATASET('"PTS"("MEMB")')"                         */
/*  "&VIEWER DATASET('&PTS(&MEMB)')"                                  */
    browsed='B'
    x_x=find_member(viewer,memb,,trace)
    "TBMOD &TABLE ORDER"

nxt1:
    "CONTROL DISPLAY RESTORE"
    msub = msub - 1
    If msub < 1 Then Signal scr1
    Else Signal mlt1
/*--------------------------------------------------------------------*/
erx1:
    "SETMSG MSG(ISRZ001)"
ext1:
    "ISREDIT USER_STATE = (status)"
    holdmac1=;table=;holdtype=;holddsn =
    "VPUT (holdmac1,table,holdtype,holddsn) SHARED"
/*  zpf10 = szpf10                                                    */
/*  zpf11 = szpf11                                                    */
/*  "VPUT (&HDPFK)"                                                   */
    Return

err1:
    rc1 = rc
    Signal OFF ERROR
    If rc > 4 Then ,
        "SETMSG MSG(&ZERRMSG)"
    Return 0

nondata:Arg iline
    If Word(iline,1)='SYSMOD' & Word(iline,2)='STATUS' Then Return 1
    If Substr(iline,1,5)='1PAGE' Then Return 1
    If Wordpos(Substr(iline,11,3),"'-' '*' '#'")>0 Then Return 1
    If Strip(iline)='' Then Return 1
    Return 0
/*--------------------------------------------------------------------*/
/* Process sintax error                                               */
/*--------------------------------------------------------------------*/
staxrtn_1:
    Interpret Signal retsyn

/*--------------------------------------------------------------------*/
/* Get dsname of dataset SMPPTS. Fake it if not found                 */
/*--------------------------------------------------------------------*/
get_pts:
    "ISREDIT FIND ' SMPPTS ' LAST"
    If rc/=0 Then Do
        x=Listdsi("'"#smppts"'")
        If x/=0 Then Do
            zedlmsg="Cannot find 'SMPPTS' dsname reference."
            "SETMSG MSG(ISRZ001)"
            Exit
        End
        Else Do
            zedlmsg="Default 'SMPPTS' dataset '"#smppts"' used."
            "SETMSG MSG(ISRZ001)"
            line='. . .' #smppts '.'
        End
        lin#=0
    End
    Else Do
        "ISREDIT (line)=LINE .ZCSR";"ISREDIT (lin#)=LINENUM .ZCSR"
        lin#=lin#+1
    End
    line=Substr(line,30)
    Parse VAR line . pts .
    target='SMPPTS';tl=Length(target)
    Do While lin#>0
        "ISREDIT (line)=LINE" lin#
        w1=Word(Substr(line,2),1)
        If Substr(w1,1,tl)=target Then Do
            line=Substr(line,30);Parse VAR line . xx .
            If Wordpos(xx,pts)=0 Then pts=pts xx
            lin#=lin#+1
        End
        Else lin#=0
    End
    "ISREDIT CURSOR = 1 0"

    Return 0

/*--------------------------------------------------------------------*/
/* Exclude or display 'Only' specified HOLDdata.                      */
/*--------------------------------------------------------------------*/
exclude_opt:
    If parm1='' Then Do
        zedlmsg='Missing exclude parameter'
        "SETMSG MSG(ISRZ001)"
        Return 4
    End
    @parm=Space(Translate(parm1,'   ','*-,'))
    "TBTOP &TABLE"
    Do Forever
        "TBSKIP &TABLE";If rc/=0 Then Leave
/*      @reas=Translate(reason,'   ','*-,')                           */
        @reas=Translate(reason,'     ','*-,()')
        Select
            When (cmd='XO') Then Do
                If Strip(@reas)=@parm Then "TBDELETE &TABLE"
                Else If @parm='DOC' &,
                        Substr(Copies('DOC ',10),1,Length(@reas))=@reas Then,
                        "TBDELETE &TABLE"
            End
            When (cmd='OO') Then,
                If Strip(@reas)/=@parm Then "TBDELETE &TABLE"
            When (cmd='X') Then,
                If Wordpos(@parm,@reas)>0 Then "TBDELETE &TABLE"
            When (cmd='OF') Then,
                If Strip(fmid)/=@parm Then "TBDELETE &TABLE"
            When (cmd='XF') Then,
                If Strip(fmid)=@parm Then "TBDELETE &TABLE"
            Otherwise,
                If Wordpos(@parm,@reas)=0 Then "TBDELETE &TABLE"
        End
    End
    If cmd='X' | cmd='XO' | cmd='XF' Then,
        zedlmsg = "All '"parm1"' removed."
    Else,
        zedlmsg = "Only '"parm1"' retained."
    "SETMSG MSG(ISRZ001)"

    Return 0

/*--------------------------------------------------------------------*/
/* Parse cursor positioning and try to see if particular hold type    */
/*           a flat file.                                             */
/*--------------------------------------------------------------------*/
get_holdtype:
    If csrf = 'REASON' Then Do
        char = Substr(reason,csrp,1)
        If char = ',' Then Do
            zedlmsg = "Not on a comma you don't."
            "SETMSG MSG(ISRZ001)"
            Signal scr1
        End
        ep = Index(reason,',',csrp)
        If ep = 0 Then ep = Length(reason) +1
        xx = Substr(reason,1,ep-1)
        sp = Lastpos(',',xx)
        If sp = 0 Then sp = 1
        Else           sp = sp +1
        holdtype = Substr(xx,sp,ep-sp)
    End
    Else Do
        If Index(holdreas,' 'cmd' ') > 0 Then holdtype = cmd
        Else                                  holdtype = ''
    End
    Parse VAR holdtype c1 +1 cx
    If Wordpos(c1,'* -')>0 Then holdtype=cx

    Return 0

/*--------------------------------------------------------------------*/
/* Go VIEW member and extract data into 'holddsn' dataset.            */
/*--------------------------------------------------------------------*/
view_get_data:
    holdmac1='1';"VPUT ("holdvars",holdvars,holdmac1) SHARED"
/*  zedlmsg = "Processing '"pts"("member")'."                         */
/*  "SETMSG MSG(ISRZ001)"                                             */
/*  "CONTROL DISPLAY LOCK"                                            */
/*  "CONTROL DISPLAY SAVE"                                            */
/*  "TBDISPL &TABLE PANEL(&PANEL)"                                    */
/*  "VIEW DATASET('&PTS(&MEMBER)') MACRO(HOLDDATA)"                   */
    x_x=find_member('VIEW',member,'MACRO('xcmd')')
/*  "CONTROL DISPLAY RESTORE"                                         */

    Return 0

/*--------------------------------------------------------------------*/
/* Set and return variable 'holddsn'.                                 */
/*--------------------------------------------------------------------*/
Set_holddsn:
    holddsn = "'"hlq".$"Date('J')"."zone".HOLD.ALL'"
    If Index(holdreas,' 'parm1' ') > 0 Then ,
        holddsn = "'"hlq".$"Date('J')"."zone".HOLD."parm1"'"
    Else,
        If Index(holdreas,' 'parm2' ') > 0 Then ,
           holddsn = "'"hlq".$"Date('J')"."zone".HOLD."parm2"'"

    Return holddsn

not_on_helderr:
    zedlmsg = "Cannot '"sel"'" member". It is held in ERROR without",
            "'++HOLD' data."
    "SETMSG MSG(ISRZ001)"

    Signal scr1

/*--------------------------------------------------------------------*/
/* Macro #1: Extracts HOLDdata, may use selective/ALL extraction into */
/*           a flat file.                                             */
/*--------------------------------------------------------------------*/
macro_1:
    holdmac1 = ''
    "VPUT (holdmac1) SHARED"
    "VGET (holdvars) SHARED"
    "VGET ("holdvars") SHARED"

    hfl = Length(h#f)

    "ISREDIT (member) = MEMBER"
    "ISREDIT F '"h#f"' 1"
    If rc /= 0 Then Do
        If h#t = 'S' Then h#f = h#o
        Else              h#f = h#s
        "VPUT (h#f,h#t) SHARED"
    End
    "ISREDIT CURSOR =" 1 0
    Do Forever
        "ISREDIT F '"h#f"' 1"
        If rc /= 0 Then Leave
        If holdtype /= '' Then Do
            "ISREDIT F 'REASON("holdtype")' .ZCSR .ZCSR"
            If rc/=0 Then Iterate
        End
        Else If excldoc Then Do
                "ISREDIT (linex)=LINE .ZCSR"
                If Index(linex,'REASON(DOC)')>0 Then Iterate
             End
        "ISREDIT LABEL .ZCSR = .HOLDS"
        Do Forever
            "ISREDIT F '++' 1"
            rc1 = rc
            If rc1 /= 0 Then Do
                "ISREDIT X ALL .HOLDS .ZLAST"
                Leave
            End
            "ISREDIT (line) = LINE .ZCSR"
            If Substr(line,1,hfl) = h#f &,
               holdtype = '' Then Iterat  e
            Leave
        End
        If rc1 /= 0 Then Leave
        "ISREDIT (csr) = LINENUM .ZCSR"
        csr = csr -1
        "ISREDIT CURSOR =" csr 1
        "ISREDIT X ALL .HOLDS .ZCSR"
    End

    "ISREDIT DEL ALL NX"

    "ISREDIT (last) = LINENUM .ZLAST"
    If last = 0 Then signal exit_1

    If Sysdsn(holddsn) = 'OK' Then,
        Address TSO "ALLOC F("table") DA("holddsn") REU" holddisp
    Else rc = 4
    If rc ¬= 0 Then,
        Address TSO "ALLOC F("table") DA("holddsn") NEW",
                    "RECFM(F B) SPACE(10,5) CYLINDERS" unitvol,
                    "LRECL(80) BLKSIZE(0) DSORG(PS)"
    Address TSO "NEWSTACK"
    Queue 'PTF('member')'
    Queue ' '
    Do i=1 To last
        "ISREDIT (line) = LINE &I"
        Queue line
    End
    Queue ' '
    Queue '*'Copies('-',78)'*'
    Queue ''
/*  Address TSO "EXECIO * DISKR "table" (STEM modl. FINIS)"           */
/*  Address TSO "EXECIO * DISKW "table" (STEM modl. OPEN)"            */
    Address TSO "EXECIO * DISKW "table" (FINIS"
    Address TSO "FREE F("table")"
    Address TSO "DELSTACK"

exit_1:
    "ISREDIT CANCEL"
    Exit

/*--------------------------------------------------------------------*/
/* Establish which dataset in the SMPPTS concatenation the member is  */
/* found in first.                                                    */
/*--------------------------------------------------------------------*/
find_member:Arg f_act,f_memb,f_xtra,f_tr
    xxx=pts
    Do While xxx/=''
        Parse VAR xxx f_dsn xxx
        If Sysdsn("'"f_dsn"("f_memb")'")='OK' Then Leave
        If xxx='' Then f_dsn=Word(pts,1)
    End
    If f_tr='Y' Then,
        Say f_act "DATASET('"f_dsn"("f_memb")')" f_xtra
    Call On Error Name err1
    If Sysdsn("'"f_dsn"("f_memb")'")='OK' Then Do
        f_act "DATASET('"f_dsn"("f_memb")')" f_xtra
        f_rc=0;browsed=Substr(f_act,1,1)
    End
    Else Do
        zedlmsg='Member "'f_memb'" not found in concatenation "'pts'".'
        "SETMSG MSG(ISRZ001)"
        f_rc=8;browsed='?'
    End
    Return f_rc

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    Parse Upper Var parm# parm#
    If #tr/='R' Then #tr=parse_cons('TRACE','R','O')

    browloop=parse_cons('/B')
    noerr=parse_cons('/NE')

    Parse VAR parm# parm1 parm#_rest

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
