/*=== REXX / ISPF ==================================================*/
/*                                                                  */
/* Edit macro for Horizontal Prefix commands.                       */
/*                                                                  */
/* Arguments: first_line   last_line                                */
/*        or  number_of_lines_from_top_of_screen                    */
/*        or  *  (all lines from top of screen)                     */
/*                                                                  */
/* Prefix commands:                                                 */
/* Repeat          RR RR  or  RR RRn  or  Rnn  or  R                */
/* Delete          DD DD  or  Dnn  or  D                            */
/* Move            MM MM  or  Mnn  or  M                            */
/* Copy            CC CC  or  Cnn  or  C                            */
/* Before          B  (Move/Copy destination inserting columns)     */
/* After           A  (Move/Copy destination inserting columns)     */
/* Upon            U  (Move/Copy destination replacing columns)     */
/* Insert          I  or  Inn  (Insert blank columns)               */
/* Enter text      Exxx (Insert text xxx. Text may contain spaces)  */
/* Substitute text Sxxx (Replaces columns with text xxx)            */
/*                                                                  */
/* To execute a command, press the END PFkey (PF3)                  */
/* A question mark (?) retrieves the last command                   */
/* To exit HPRE, press the END PFkey without entering commands.     */
/* Only one command is executed at a time.                          */
/* Invalid or incomplete commands are ignored.                      */
/* Requires macro HPREMAC (profile macro for the temporary file).   */
/*                                                                  */
/*==================================================================*/

 temp_file = "'"userid()"."userid()"8'"

address ispexec
 'isredit macro (arg)'
 'isredit reset'
 'VGET (macname) Shared'
 If rc=0 Then Signal macro_1;Else Parse SOURCE . . macname .
 'isredit (lib) = dataset'
 'isredit (mem) = member'
 'isredit (lastline) = linenum .zlast'
 'isredit (line1, line2) = display_lines'
address tso

upper arg
arg1=word(arg,1);arg2=word(arg,2);If arg1='' Then arg1='*'
select
   when arg1 = "*" then do
      line2 = lastline
   end
   when datatype(arg1,"W") & datatype(arg2,"W") then do
      line1 = arg1
      line2 = arg2
   end
   when datatype(arg1,"W") & arg2="*" then do
      line1 = arg1
      line2 = lastline
   end
   when datatype(arg1,"W") & arg2="" then do
      line2 = line1+arg1-1
   end
   otherwise do
      say"Format: HPRE "
      say"     or HPRE *  for all lines from first line on screen"
      say"     or HPRE  "
      exit
   end
end
if line2 > lastline then line2 = lastline
if line1 > line2 then do
   say "Invalid argument - First line greater than last"
   exit
end

/*===================== File allocations ===========================*/

 if mem = "" then old_file = "'"lib"'"
 else old_file = "'"lib"("mem")'"

 yy = msg(off)
 "free dd(outfile)"
 "free dd(infile)"
 "alloc da("old_file") dd(outfile) shr"
 if rc<>0 then do
    say "Error "rc" allocating "old_file
    signal exit
 end
 "delete ("temp_file")"
 yy = msg(on)

 x = listdsi(old_file)
 if lastcc<>0 & lastcc<>" " then do
    say "Error "lastcc" on listdsi for "old_file
    signal exit
 end

 if sysrecfm = "V" then syslrecl = syslrecl - 4
 "alloc da("temp_file") dd(infile) lrecl("syslrecl") dsorg(ps),
        recfm(f) space(2 2) cyl catalog reuse unit(sysda)"
 if rc<>0 then do
    say "Error "rc" allocating "temp_file
    signal exit
 end

/*==================== Write work file  ============================*/

 title1a = "M move  C copy   A after  B before"
 title1b = "  U upon    R repeat    D del    I ins"
 title2a = "Eaa enter text aa    Saa substitute text aa"
 title2b = "  ? retrieve  F3/15 Execute"
 title1  = title1a || title1b
 title2  = title2a || title2b
 scale = "....+....1....+....2....+....3....+....4....+....5"
 scale = scale"....+....6....+....7....+....8....+....9....+....0"
 nsc = syslrecl%100+1
 scale = copies(scale,nsc)
 scale = left(scale,syslrecl)
 cmdlin = copies("_",syslrecl)
 line_prv = cmdlin
 dropbuf
 queue title1
 queue title2
 queue scale
 queue cmdlin
 execio queued() diskw infile
 if rc<>0 & rc<>1 then signal write_error
 do x = line1 to line2
    address ISPEXEC 'ISREDIT (LIN) = line' x
    queue lin
    execio 1 diskw infile
    if rc<>0 &rc<>1 then signal write_error
 end
 queue cmdlin
 execio 1 diskw infile  "(finis"
 if rc<>0 & rc<>1 then signal write_error
 execio 0 diskr outfile "(finis"

/*===== Work file edit loop until no more commands are entered =====*/

 do forever
   'ISPEXEC VPUT (macname) SHARED'
   'ISPEXEC EDIT DATASET('temp_file')  MACRO('macname')'
    execio 1 diskr infile 4
    if rc<>0 then leave
    parse pull line_in
    execio 0 diskr infile "(finis"
    if space(line_in,0) = cmdlin then leave
    call reset_variables
    call verify_input
    if result = 0 then call select_actions
    dropbuf
    execio 0 diskr infile "(finis"
    execio 4 diskru infile
    dropbuf
    if retrie = 0 then queue cmdlin
    else queue line_prv
    execio 1 diskw infile "(finis"
    if rc<>0 & rc<>1 then signal write_error
    line_prv = line_in
 end

/*======= Rebuild original file with lines from work file ==========*/

 execio 4 diskr infile
 pull; pull; pull; pull
 do y = line1 to line2
    execio 1 diskr infile
    if rc<> 0 then leave y
    parse pull lin
    apost = index(lin,"'")
    if apost > 0 then lin = '"'lin'"'
    else lin = "'"lin"'"
    "ISREDIT LINE " y " = " lin
 end

/*========================  Exit  ==================================*/

exit:
 yy = msg(off)
 execio 0 diskr infile  "(finis"
 execio 0 diskr outfile "(finis"
 "free dd(outfile)"
 "free dd(infile)"
 "delete ("temp_file")"
 yy = msg(on)
exit

/*== Prepare input line for analysis and reset working variables ===*/

reset_variables:
 li     = translate(line_in," ","_")
 li_low = li                                 /* lower case line     */
 upper li                                    /* upper case line     */
 retrie = 0                                  /* Retrieve flag       */
 aft    = 0                                  /* After position      */
 bef    = 0                                  /* Before position     */
 upon   = 0                                  /* Upon position       */
 move1  = 0                                  /* Move position block */
 move2  = 0
 copy1  = 0                                  /* Copy position block */
 copy2  = 0
 del1   = 0                                  /* Delete position blk */
 del2   = 0
 rep1   = 0                                  /* Repeat position blk */
 rep2   = 0
 repf   = 0                                  /* Repeat factor       */
 ins    = 0                                  /* Insert position     */
 sub    = 0                                  /* Substitute position */
 ent    = 0                                  /* Enter position      */
return

/*===== Check commands entered; invalid combinations return 99 =====*/

verify_input:
 do x = 1 to words(li)
    wor = word(li,x)
    select
       when x = 1 & wor = "?" then do
          retrie = 1
          leave x
       end
       when x = 1 & left(wor,1) = "S" then do
            sub = pos("S",li) + 1
            stri = substr(strip(li_low),2)
            leave x
       end
       when x = 1 & left(wor,1) = "I" then do
          ins = pos("I",li)
          if datatype(substr(wor,2),"W") then,
               insnum = substr(wor,2)
          else insnum = 1
          stri = copies(" ",insnum)
          leave x
       end
       when x = 1 & left(wor,1) = "E" then do
          ins = pos("E",li)
          stri = substr(strip(li_low),2)
          leave x
       end
       when wor = "DDDD" | wor = "D" then do
          del1 = pos(wor,li)
          del2 = del1 + length(wor) - 1
       end
       when wor = "DD" then do
          if del1 = 0 then del1 = pos(wor,li)
          else,
          if del2 = 0 then del2 = pos(wor,li,del1+2) + 1
       end
       when left(wor,1)="D" & datatype(substr(wor,2),"W") then do
          del1 = pos("D",li)
          del2 = del1 + substr(wor,2) - 1
       end
       when wor = "MMMMA" then do
          move1 = pos(wor,li)
          move2 = move1 + 3
          aft   = move1 + 4
       end
       when wor = "MMA" then do
          if move1 = 0 then do
             move1 = pos(wor,li)
             move2 = move1 + 1
          end
          else do
             move2 = pos(wor,li) + 1
          end
          aft = move2 + 1
       end
       when wor = "MA" then do
          move1 = pos(wor,li)
          move2 = move1
          aft = move2 + 1
       end
       when wor = "MMMMU" then do
          move1 = pos(wor,li)
          move2 = move1 + 3
          upon  = move2 + 1
       end
       when wor = "MMU" then do
          if move1 = 0 then do
             move1 = pos(wor,li)
             move2 = move1 + 1
          end
          else do
             move2 = pos(wor,li) + 1
          end
          upon  = move2 + 1
       end
       when wor = "MU" then do
          move1 = pos(wor,li)
          move2 = move1
          upon  = move2 + 1
       end
       when wor = "MMMM" | wor = "M" then do
          move1 = pos(wor,li,)
          move2 = move1 + length(wor) - 1
       end
       when wor = "MM" then do
          if move1 = 0 then move1 = pos(wor,li)
          else,
          if move2 = 0 then move2 = pos(wor,li,move1+2) + 1
       end
       when left(wor,1)="M" & datatype(substr(wor,2),"W") then do
          move1 = pos("M",li)
          yy = substr(wor,2)
          move2 = move1 + yy - 1
       end
       when wor = "CCCCA" then do
          copy1 = pos(wor,li)
          copy2 = copy1 + 3
          aft   = copy2 + 1
       end
       when wor = "CCA" then do
          if copy1 = 0 then do
             copy1 = pos(wor,li)
             copy2 = copy1 + 1
          end
          else do
             copy2 = pos(wor,li) + 1
          end
          aft = copy2 + 1
       end
       when wor = "CA" then do
          copy1 = pos(wor,li) + 1
          copy2 = copy1
          aft = copy2 + 1
       end
       when wor = "CCCCU" then do
          copy1 = pos(wor,li)
          copy2 = copy1 + 3
          upon  = copy2 + 1
       end
       when wor = "CCU" then do
          if copy1 = 0 then do
             copy1 = pos(wor,li)
             copy2 = copy1 + 1
          end
          else do
             copy2 = pos(wor,li) + 1
          end
          upon  = copy2 + 1
       end
       when wor = "CU" then do
          copy2 = pos(wor,li)
          copy1 = copy2
          upon  = copy2 + 1
       end
       when wor = "CCCC" | wor = "C" then do
          copy1 = pos(wor,li)
          copy2 = copy1 + length(wor) - 1
       end
       when wor = "CC" then do
          if copy1 = 0 then copy1 = pos(wor,li)
          else,
          if copy2 = 0 then copy2 = pos(wor,li,copy1+2) + 1
       end
       when left(wor,1)="C" & datatype(substr(wor,2),"W") then do
          copy1 = pos(wor,li)
          yy = substr(wor,2)
          copy2 = copy1 + yy - 1
       end
       when left(wor,4) = "RRRR" then do
          rep1 = pos(wor,li)
          rep2 = rep1+3
          repf = 1
          if datatype(substr(wor,5),"W") then repf = substr(wor,5)
       end
       when left(wor,2) = "RR" then do
          if rep1 = 0 then do
             rep1 = pos(wor,li)
             rep2 = rep1+1
          end
          else do
             rep2 = pos(wor,li,rep1+2) + 1
          end
          repf = 1
          if datatype(substr(wor,3),"W") then repf = substr(wor,3)
       end
       when left(wor,1) = "R" then do
          rep1 = pos(wor,li)
          rep2 = rep1
          repf = 1
          if datatype(substr(wor,2),"W") then repf = substr(wor,2)
       end
       when wor = "A" then do
          str_tmp = "A "
          aft = pos(str_tmp,li)
       end
       when wor = "B" then do
          str_tmp = "B "
          bef = pos(str_tmp,li)
       end
       when wor = "U" then do
          str_tmp = "U "
          upon = pos(str_tmp,li)
       end
       otherwise nop
    end
 end x

 if aft   > 0 & bef   > 0 then return 99
 if upon  > 0 & aft   > 0 then return 99
 if upon  > 0 & bef   > 0 then return 99
 if move1 > 0 & copy1 > 0 then return 99
 if move1 > 0 & bef  = 0 & aft = 0 & upon = 0 then return 99
 if copy1 > 0 & bef  = 0 & aft = 0 & upon = 0 then return 99
return 0

/*================= Select actions to perform ======================*/

select_actions:
 select
   when del2  > 0 then call perform_delete
   when ent   > 0 then call perform_enter
   when ins   > 0 then call perform_insert
   when rep1  > 0 then call perform_repeat
   when sub   > 0 then call perform_substitute
   when move2 > 0 then call perform_move
   when copy2 > 0 then call perform_copy
   otherwise nop
 end
return

/*================  Perform requested actions ======================*/

perform_insert:
 execio 4 diskru infile
 pull; pull; pull; pull
 do forever
    execio 1 diskru infile
    if rc<>0 then leave
    parse pull zz
    if space(zz,0) = cmdlin then leave
    zz = insert(stri,zz,ins)
    queue zz
    execio 1 diskw infile
    if rc<>0 & rc<>1 then signal write_error
 end
return

perform_repeat:
 execio 4 diskru infile
 pull; pull; pull; pull
 do forever
    execio 1 diskru infile
    if rc<>0 then leave
    parse pull zz
    if space(zz,0) = cmdlin then leave
    x1 = substr(zz,rep1,rep2-rep1+1)
    x1 = copies(x1,repf)
    zz = insert(x1,zz,rep2)
    queue zz
    execio 1 diskw infile
    if rc<>0 & rc<>1 then signal write_error
 end
return

perform_enter:
 execio 4 diskru infile
 pull; pull; pull; pull
 do forever
    execio 1 diskru infile
    if rc<>0 then leave
    parse pull zz
    if space(zz,0) = cmdlin then leave
    zz = insert(stri,zz,ent)
    queue zz
    execio 1 diskw infile
    if rc<>0 & rc<>1 then signal write_error
 end
return

perform_substitute:
 execio 4 diskru infile
 pull; pull; pull; pull
 do forever
    execio 1 diskru infile
    if rc<>0 then leave
    parse pull zz
    if space(zz,0) = cmdlin then leave
    zz = overlay(stri,zz,sub)
    queue zz
    execio 1 diskw infile
    if rc<>0 & rc<>1 then signal write_error
 end
return

perform_delete:
 execio 4 diskru infile
 pull; pull; pull; pull
 del2 = del2 - del1 + 1
 do forever
    execio 1 diskru infile
    if rc<>0 then leave
    parse pull zz
    if space(zz,0) = cmdlin then leave
    zz = delstr(zz,del1,del2)
    queue zz
    execio 1 diskw infile
    if rc<>0 & rc<>1 then signal write_error
 end
return

perform_move:
 execio 4 diskru infile
 pull; pull; pull; pull
 do forever
    execio 1 diskru infile
    if rc<>0 then leave
    parse pull zz
    if space(zz,0) = cmdlin then leave
    x1 = substr(zz,move1,move2-move1+1)
    if aft > move2 | bef > move2 | upon > move2 then do
       if upon> 0 then zz = overlay(x1,zz,upon)
       if aft > 0 then zz = insert(x1,zz,aft)
       if bef > 1 then zz = insert(x1,zz,bef-1)
       if bef = 1 then zz = x1||zz
       zz = delstr(zz,move1,move2-move1+1)
    end
    else do
       zz = delstr(zz,move1,move2-move1+1)
       if upon> 0 then zz = overlay(x1,zz,upon)
       if aft > 0 then zz = insert(x1,zz,aft)
       if bef > 1 then zz = insert(x1,zz,bef-1)
       if bef = 1 then zz = x1||zz
    end
    queue zz
    execio 1 diskw infile
    if rc<>0 & rc<>1 then signal write_error
 end
return

perform_copy:
 execio 4 diskru infile
 pull; pull; pull; pull
 do forever
    execio 1 diskru infile
    if rc<>0 then leave
    parse pull zz
    if space(zz,0) = cmdlin then leave
    x1 = substr(zz,copy1,copy2-copy1+1)
    if upon> 0 then zz = overlay(x1,zz,upon)
    if aft > 0 then zz = insert(x1,zz,aft)
    if bef > 1 then zz = insert(x1,zz,bef-1)
    if bef = 1 then zz = x1||zz
    queue zz
    execio 1 diskw infile
    if rc<>0 & rc<>1 then signal write_error
 end
return

/*======================  Write - Error  ===========================*/

write_error:
 say "Error "rc" writing "temp_file
 dropbuf
signal exit


Macro_1:
/*=== REXX / ISPF ==================================================*/
/*                                                                  */
/*  HPREMAC - Initial edit macro for HPRE temporary file            */
/*                                                                  */
/*==================================================================*/
 macname=;'VPUT (macname) SHARED'

 'isredit caps off'            /* caps setting belongs to base file */
 'isredit cursor = 4 1'        /* position cursor in "command line" */

