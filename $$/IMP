/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* IMP: IMPort.                                                       */
/*                                                                    */
/* Routine to import a member from another PDS(member) or to          */
/* 'userid.$(member)' from the command line.                          */
/* Without parameters, data will be imported from member              */
/*   'userid.$($$$EXIMP)'....                                         */
/*                                                                    */
/* For further details, refer member 'EXP'....                        */
/*                                                                    */
/*--------------------------------------------------------------------*/
IMP:imp_ver='2.01'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=;"ISREDIT (lev)=MACRO_LEVEL"
    If lev>1 Then Parse VAR parm# labf ',' labt ',' lcmd parm#

    zedsmsg=;parm#=Translate(parm#);Parse VAR parm# parm1 .
    If Wordpos(parm1,'HELP ?')>0 Then Do
        Address TSO '%EXP ?';Exit
    End
    If \ima_macro Then Do
        zedlmsg="Can only import into an edit/view session."
        Signal erx1
    End

    userid=Userid();hlq=$alkhlqo()

    Address ISREDIT;"(lrecl) = LRECL"
    lrecl=Parse_cons('/80',80,lrecl)
    If lrecl>80 Then trdsn='$256';Else trdsn='$'
    If Wordpos('/256',parm#)>0 Then Do
        trdsn='$256';parm#=Delword(parm#,Wordpos('/256',parm#),1)
    End
    If Wordpos('/2',parm#)>0 Then Do
        eximp="$$$EXIM2";parm#=Delword(parm#,Wordpos('/2',parm#),1)
    End;Else eximp="$$$EXIMP"
    deffile=hlq"."trdsn
    "(member)=MEMBER"
    Call parse_parms

    dd='$D'Time('s')
    If Sysdsn("'"procfile"'")/="OK" Then Do
        zedlmsg="Import file '"procfile"' not found.";Signal ext1
    End
    #msg=Msg('Off')
    Address TSO "ALLOC F("dd") DA('"procfile"') SHR REU"
    If rc/=0 Then Do
        zedlmsg="Allocation of '"procfile"' failed, rc="rc1".";Signal ext1
    End

    Address TSO "NEWSTACK"
    Address TSO "EXECIO * DISKR "dd" (STEM line. FINIS)"
    If rc=0 Then Call read_stack
    If \swap Then Address TSO "FREE F("dd")"
    delext='.'
    If delor Then Do
        Parse Value Strip(procfile,,"'") With qdsname '(' member ')'
        qdsname="'"qdsname"'"
        Do Forever
            l#=$dat@csr('/L#');zwinttl='IMPort Process'
            #popr=l#-2;#popc=17;zcmd=
            Address ISPEXEC
            zedsmsg=;zedlmsg='Confirm imported deletion.'
            "SETMSG MSG(ISRZ001)"
            "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
            "DISPLAY PANEL($MEMBDEL)";rc1=rc;"REMPOP"
            Address
            If rc1/=0 Then Leave
            If zcmd='BROWSE' Then Do
                Address ISPEXEC "BROWSE DATASET('&PROCFILE')"
                Iterate
            End
            Select
                When zcmd='' Then Do
                    delext=' and delete.'
                    Address TSO "DELETE '"procfile"'";Leave
                End
                Otherwise Do
                    zedlmsg='Function unavailable under this facility.'
                    Address ISPEXEC "SETMSG MSG(ISRZ001)"
                End
            End
        End
    End


/*--------------------------------------------------------------------*/
/* Set up message line...                                             */
/*--------------------------------------------------------------------*/
    If impmsg Then zedlmsg="Data imported from '"procfile"'" || delext
    Else zedlmsg="Data imported."
    If swap Then zedlmsg = zedlmsg '(Swapped.)'

ext1:
    Parse VAR procfile expdsn01 '(' .
    Address ISPEXEC "VPUT (expdsn01) PROFILE"
erx1:
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    #tr=Parse_cons('TRACE','R','N')
    If #tr='N' Then #tr=Parse_cons('/TR','R','N',3)
    If Parse_cons('/2',1,0) Then eximp="$$$EXIM2"
    delor=Parse_cons('/M',1,0)
    clear=Parse_cons('/R',1,0)
    If \clear Then clear = Parse_cons('R',1,0)
    swap=Parse_cons('/SW',1,0)
    fdsn=Parse_cons('/D',1,0)
    Call Parse_varb('.')
    If result/='N' Then label='.'result;Else label='N'

    Parse VAR parm# parm1 parm2 parm#_rest

/*--------------------------------------------------------------------*/
/* Last paramater assumed member or DSN(member)                       */
/*--------------------------------------------------------------------*/
    If parm1/='' Then Do
        If Substr(parm1,1,1)='?' Then Do
            Parse VAR parm1 '(' membern ')' .
            "XE "parm1                      /* Call "XE" as a macro   */
            If rc/=0 Then Do
                zedlmsg='"XE" is not available. Processing terminated.'
                Signal erx1
            End
            Address ISPEXEC "VGET (xedsname) PROFILE"
            If xedsname='' Then Do
                zedlmsg="Alias not found or not executing under 'XE'",
                        "umbrella."
                Signal erx1
            End
            If parm2/='' Then parm1="'"xedsname"("parm2")'"
            Else Do
                If membern/='' Then parm1="'"xedsname"("membern")'"
                Else parm1="'"xedsname"'"
            End
            If Index(xedsname,'*')>0 Then Do
                zedlmsg="Cannot query alias on wildcard name '"||,
                        xedsname"'."
                Signal erx1
            End
        End
        If Substr(parm1,1,1)/="'" Then parm1="'"hlq"."parm1"'"
        lb=Index(parm1,'(')
        Select
            When fdsn Then Call process_dsn
            When lb>0 Then Call process_dsn
            When Index(parm1,'.')>8 Then Call process_dsn
            When Length(parm1)>8 Then Call process_dsn
            Otherwise Do
                x=$vername(parm1)
                If x/=0 Then Do
                    zedlmsg='Invalid member name.';Signal ext1
                End
                If Listdsi(parm1)/=0 Then procfile=deffile'('parm1')    '
                Else Do
                    Parse VAR parm1 "'" procfile "'"
                    If procfile='' Then procfile=hlq"."parm1
                    If parm2 /= '' Then procfile=procfile"("parm2")"
                    Else procfile=procfile"("member")"
                End
            End
        End
        impmsg=0
    End
    Else Do
        procfile=deffile"("eximp")";impmsg=1
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Process parameter as DSNAME (member).                              */
/*--------------------------------------------------------------------*/
process_dsn:
    Parse VAR parm1 parm1 '(' newmemb ')'
    procfile=Strip(parm1,,"'")
    If procfile='' Then Do
        If parm1/='' Then procfile=hlq'.'parm1;Else procfile=deffile
    End
    If newmemb='' Then Do
        Select
            When parm2/=''  Then newmemb=parm2
            When member/='' Then newmemb=member
            Otherwise newmemb=eximp
        ENd
    End
    x=Listdsi("'"procfile"'")
    If rc/=0 Then Do
        Parse VAR sysmsglvl2 . zedlmsg;Signal ext1
    End
    If sysdsorg="PO" Then procfile=procfile'('newmemb')'
    Return 0

/*--------------------------------------------------------------------*/
/* build data in the REXX Q                                           */
/*--------------------------------------------------------------------*/
read_stack:
    "(status)=USER_STATE";"(caps)=CAPS";"CAPS=OFF"
    If clear Then Do;"X ALL";"DEL ALL X";End
    If swap Then Do;"(olast)=LINENUM .ZLAST";"X ALL";End
/*  Address TSO "NEWSTACK"                                            */
    "(lev)=MACRO_LEVEL"
    If lev>1 Then dest=labf
    Else Do
        If label='N' Then Do
            "PROCESS DEST";"(dest)=LINENUM .ZDEST"
        End
        Else "(dest)=LINENUM" label
    End
    #tr=Trace('Off')
    Do i=1 To line.0
        linex=line.i
         "LINE_AFTER "dest+i-1"=(linex)"
    End
/*  Address TSO "DELSTACK"                                            */
    If swap Then Do
        Address TSO "NEWSTACK"
        Address TSO "ALLOC F("dd") DA('"procfile"') REU SHR"
        Do i=1 To olast
            "(line)=LINE &I"
            Queue line
        End
        Address TSO "EXECIO * DISKW "dd" (FINIS"
        Address TSO "FREE F("dd")"
        "DEL ALL X"
    End
    "CAPS=(caps)";"USER_STATE=(status)"
    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
