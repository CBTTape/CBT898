/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/*  Macro to populate the member '$$$INDEX' with all the members in   */
/*  the PDS thereby creating/maintating an up to date index. It will  */
/*  add new members and remove deleted members. You may only enter a  */
/*  1 line description.                                               */
/*                                                                    */
/*  Enter "INDEX ?" to invoke tutorial and further documentation.     */
/*  (Only applicable if Tutorial members marked with 'o' are in       */
/*  appropriate concatenations.)                                      */
/*                                                                    */
/* The following members are required to package this routine.        */
/* (Members marked with a 'o' seperator are optional):                */
/*   REXX:                                                            */
/*     INDEX    - Macro driver (invoked as a command during edit).    */
/*     INDEXU   o Macro driver (invoked for datasets with RECFM=U).   */
/*                (Refer to this macro for aditional requirements)    */
/*     IB       o Browse member                                       */
/*     IE       o Edit member                                         */
/*     ID       o Delete member                                       */
/*     IS       o Exclude all members that do not match the section   */
/*                parameters for statistics values                    */
/*     IU       o Advise of last changed userid                       */
/*     IW       o Member list for edit/browse (wildcarded)            */
/*     LINEMAC  o Permits member browse/edit/view and delete from     */
/*                index. (Refer to "LINEMAC" for its associated       */
/*                packaging.)                                         */
/*   Load modules:                                                    */
/*     INDEXUFM o Program to permit "edit" if RECFM=U member          */
/*                $$$INDEX.                                           */
/*--------------------------------------------------------------------*/
Index_ver='2.11'
    cname1st=1                           /* 1=ChrisSurn, 0=SurnChris  */
    Parse Arg parm#l
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=;parm#l=parm#
    Parse Upper VAR parm# parm#;Parse       VAR parm# parm1 .
    Parse SOURCE . . xcmd .

    name=$Whoami();name=Translate(name,' ','.');name=Translate(name,' ',',')
    If cname1st Then cname=Word(name,1);Else cname=Word(name,2)
    cname=$U2Lower(cname,2)
    userid=Userid()

    If Wordpos(parm1,'HELP /H ? /?')>0 Then Signal Help_TSO

nohelp:
    "VGET (indexub,dsname) SHARED";"ISREDIT (status)=USER_STATE"

    #tr='O';dlin#=1;build='N';new='N';ld='N';rd='N';nd='N';bu='N';
    caps=0;force='N';sort_it='Y';id_bu='N';tabon=0;cust=0;custa=0
    show_c=0;added=0;deleted=0;u_sep='¦';d_sep='¦'
    If parm#/='' Then Call parse_parms
    x=Trace(#tr)

    Address ISREDIT
    If build="Y" & indexub="Y" Then Do
        zedlmsg="Cannot build index for RECFM=U datasets.";Signal ext1
    End

    If indexub="Y" Then Do
        indexub='N'
        Address ISPEXEC "VGET (INDEXUB VOLUME) SHARED"
        dataset=dsname;member="$$$INDEX"
        Address ISPEXEC,
            "LMINIT DATAID(DATA1) DATASET('&DSNAME') VOLUME(&VOLUME)"
    End
    Else Do
        "(DATASET)=DATASET"
        "(MEMBER) = MEMBER"
        "(DATA1) = DATAID"
    End

    curmbr=member
    If Index(curmbr,"$INDEX")=0 & force='N' Then Do
        zedlmsg="Must be in member '*$INDEX' to issue "||,
                "'"xcmd"' command. Enter """xcmd" ?""."
        Signal ext1
    End

    If caps Then "CAPS=ON";Else "CAPS=OFF"
    "UNNUMBER"
    If Sysdsn("'"dataset"("curmbr")'") = "OK" Then Do
        bum='#'Substr(curmbr,2)
        If bu="Y" Then "REPLACE "bum" .ZFIRST .ZLAST"
    End
    "(last)=LINENUM .ZLAST"
/*--------------------------------------------------------------------*/
    If cust Then Do
        If last=0 Then Do
            zedlmsg='Give me a break! Cannot even attempt to customise',
                    'an empty member.'
            Signal ext1
        End
        nat='ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$';ext='0123456789*'
        If custa Then "RESET"
        Do i=1 To last
            "(line)=LINE" i
            mems=Verify(line,nat,'M');If mems=0 Then mems=1
            meme=Verify(line,nat||ext,'N',mems+1)
            Interpret "Parse VAR line w1 +"mems-1 "member +"meme-mems " w3 w4"
            If Strip(w1)=Strip(w3) Then w3=
            Else Do
                Parse VAR w3 c31 +1 c4on
                If Strip(w1)=Strip(c31) Then w3=c4on
            End
            linex="¦"Substr(member,1,9)"¦"Space(w3 w4)
            If custa Then "LINE_AFTER .ZLAST=(linex)"
            Else          "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
        End
        If custa Then Do
            zedlmsg='Index customised. You can now apply the "INDEX" command',
                    'with your choice of parameters.'
            "CURSOR="last 0;"DELETE ALL NX .ZFIRST .ZCSR"
        End
        Else,
            zedlmsg='These NOTELINES reflect what your customisations will',
                    'look like. Reivoke with "INDEX /CUST /Apply" to make',
                    'it permanent.'
        Signal ext1
    End
/*--------------------------------------------------------------------*/
    If last=0 Then Signal bypass
    If ld="Y" Then NOP;Else "CHANGE '       ' '  ?????' 12 ALL"
    If u_sep/=d_sep Then Do
        "(line)=LINE 1";ch1=Substr(line,1,1)
        If u_sep='R' Then u_sep=d_sep
        If ch1/=d_sep Then Do
            "CHANGE '"ch1"' '"d_sep"' 1 1 ALL"
            "CHANGE '"ch1"' '"d_sep"' 11 11 ALL"
        End
    End
    "CHANGE ' ' '¦' 1 1 ALL"
    "CHANGE ' ' '¦' 11 11 ALL"
    "CHANGE ""'"" ""`"" ALL"

bypass:
    member="$"
    Address ISPEXEC
    If build/='N' Then Do
        "LMINIT DATAID(DATA2) DATASET('&DATASET') ENQ(SHR)"
        "LMOPEN DATAID(&DATA2) OPTION(INPUT)"
    End
    "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    Do While rc=0
        "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) STATS(NO)"
        If rc/=0 Then Leave
        If build/='N' Then Do
            "LMMFIND DATAID(&DATA2) MEMBER(&MEMBER) STATS(NO)"
            Do i=1 to dlin#
                desc=
                "LMGET DATAID(&DATA2) MODE(INVAR) "||,
                        "DATALOC(DESC) DATALEN(LEN) MAXLEN(70)"
                If rc/=0 Then Leave
                If i/=dlin# Then Iterate
                Parse VAR desc . desc
                Leave
            End
        End
        If new='N' Then Do
            ISREDIT "FIND '&MEMBER ' 2 ALL"
            If rc/=0 Then Do
                added=added+1
                "ISREDIT MASKLINE = '<         ¦'"
                linei="<"member;where="LINE_AFTER .ZLAST"
            End
            Else Do
                ISREDIT "(LIN,COL)=CURSOR"
                ISREDIT "(LINEI)=LINE &LIN"
                e=LENGTH(linei)
                "ISREDIT MASKLINE = '*         ¦'"
                linei="*"SUBSTR(linei,2,e-1);where="LINE "lin
            End
        End
        Else Do
            added=added+1
            "ISREDIT MASKLINE = '<         ¦'"
            linei="<"member;where="LINE_AFTER .ZLAST"
        End
        If build/='N' Then Do
            com=Strip(Substr(linei,12))
            If com='' | com='  ?????' Then Do
                If Word(desc,1)='/*' Then,
                    desc=Subword(desc,2,Words(desc)-2)
                linei=Substr(linei,1,11)Strip(desc)
            End
        End
        If Substr(linei,2,1)='#' & id_bu='Y' Then Do
            If Strip(Substr(linei,12))='' Then,
                linei=Substr(linei,1,11) || '..... Backup .....'
        End
        ISREDIT "&WHERE=MASKLINE + (linei)"
    End
    "LMMLIST DATAID(&DATA1) OPTION(FREE)";"LMCLOSE DATAID(&DATA1)"
    If build="Y" Then Do
        "LMCLOSE DATAID(&DATA2)";"LMFREE DATAID(&DATA2)"
    End


tidyup:
    Address ISREDIT
    "X '¦ Member  ¦ Description    ' 1 FIRST"
    "X '¦"curmbr" ' 1 FIRST"
    "DELETE X ALL"

    If rd="Y" Then "CHANGE '  ?????' '       ' 12 ALL"
    If nd="Y" Then Do
        "FIND '>' 1 1 ALL";"(DEL#)=FIND_COUNTS"
        del1=del#
        "CHANGE '¦' '>' 1 1 ALL";"(DEL#) = CHANGE_COUNTS"
        del1=del1+del#
    End
    Else Do
        "EXCLUDE '¦' 1 1 ALL";"(DEL1) = EXCLUDE_COUNTS"
        del1=del1
    End
    If dm='Y' Then Do
        "EXCLUDE '>' 1 1 ALL";"(DEL#) = EXCLUDE_COUNTS"
        del1=del1+del#
    End
    "EXCLUDE '+' 1 1 ALL"
    "SEEK '<' 1 1 ALL";"(sct)=SEEK_COUNTS"
    deleted=del1+deleted
    "DELETE X ALL"
    "CHANGE ""`"" ""'"" ALL"
    "CHANGE '*' '¦' 1 1 ALL"
    "FIND '¦"Substr(curmbr,1,8)"' ALL"
    If rc=0 Then Do
        "(LIN#) = CURSOR";oper="LINE "lin#;"(LIN#) = CURSOR"
    End
    Else oper="LINE_BEFORE .ZFIRST"
    linei="¦"curmbr
    today=Date('n');If Length(Word(today,1))=1 Then today='0'today
    If cname='there' Then cid='('userid')';Else cid=cname '('userid')'
    cid=cid 'at' Substr(Time(),1,5) 'on' today'..'
    "MASKLINE = ""¦         ¦Index gen'd by &CID"""
/*       Regen by entering '"xcmd"' on cmd line."                     */
    "&OPER = '&LINEI' + MASKLINE"
    "FIND '#$$INDEX ' 2 ALL"
    If rc=0 Then Do
        "(LIN#) = CURSOR"
        linei="¦#$$INDEX";"MASKLINE = '¦         ¦INDEX BACKUP .....'"
        "LINE &LIN# = '&LINEI' + MASKLINE"
    End
    "FIND '$$$EXIMP ' 2 ALL"
    If rc=0 Then Do
        "(LIN#) = CURSOR"
        linei="¦$$$EXIMP"
        ml="¦         ¦Alex's EXP/IMP routines' clipboard....."
        "MASKLINE = (ml)"
        "LINE &LIN# = '&LINEI' + MASKLINE"
        "MASKLINE =' '"
    End
    If sort_it='Y' Then "SORT 2 10"
    If indexub="Y" Then ,
        line="+---------+---------------------------"||,
             "--------------------------------------------------"
    Else ,
        line="+---------+---------------------------"||,
             "------------------------------------------"
    "LINE_BEFORE .ZFIRST = (LINE)"
    "LINE_BEFORE .ZFIRST = '¦ Member  ¦ Description         "||,
                    "(Enter """xcmd" ?"" command for more info.)'"
    If u_sep/=d_sep Then Do
        "CHANGE '"d_sep"' '"u_sep"' 1 1 ALL"
        "CHANGE '"d_sep"' '"u_sep"' 11 11 ALL"
    End
    "RESET";"MASKLINE=' '";"CURSOR=3 12";"USER_STATE=(STATUS)"
    "NULLS ON"
    zedlmsg=added" members added, "deleted" members deleted."
    If tabon Then Do
        zedlmsg=zedlmsg "Don't forget ==> ""TABS OFF"" at End."
        "TABSLINE=<1,'*',11,'*'>";"TABS ON ALL"
    End
    If show_c Then Do
        "X ALL"
        "F '>' 1 1 ALL"
        "C '<' '"u_sep"' 1 1 ALL"
        zedlmsg=zedlmsg 'Only changes are displayed. ">" in column 1',
                'are deleted members and the rest are new additions.'
    End
    Else "C '<' '"u_sep"' 1 1 ALL"
    "FIND '     ' 12 FIRST"

ext1:"USER_STATE=(status)"
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    #tr=parse_cons('/TRACE','R','O')
    If #tr='O' Then #tr=parse_cons('TRACE','R','O',3)

    ld=parse_cons('/LD');If ld='N' Then ld=parse_cons('LD')
    rd=parse_cons('/RD');If rd='N' Then rd=parse_cons('RD')
    nd=parse_cons('/ND');If nd='N' Then nd=parse_cons('ND')
    dm=parse_cons('/DM');If dm='N' Then dm=parse_cons('DM')
    bu=parse_cons('/B') ;If bu='N' Then bu=parse_cons('B')
    tabon=parse_cons('/TO',1,0);If \tabon Then tabon=parse_cons('TO',1,0)
    caps=parse_cons('/CAPS',1,0);If \caps Then caps=parse_cons('CAPS',1,0)
    cust=parse_cons('/CUST',1,0);If \cust Then cust=parse_cons('CUST',1,0)
    custA=parse_cons('/CUSTA',1,0);If \custA Then custA=parse_cons('CUSTA',1,0)
    If custA Then cust=1
    new=parse_cons('/NEW');If new='N' Then new=parse_cons('NEW')
    force=parse_cons('/F');If force='N' Then force=parse_cons('FORCE')
    id_bu=parse_cons('/IB');If id_bu='N' Then id_bu=parse_cons('IB')
    show_c=parse_cons('/SH',1,0,3)
    If \show_c Then show_c=parse_cons('SH',1,0,2)
    sort_it=parse_cons('/NS','N','Y')
    If Sort_it='Y' Then sort_it=parse_cons('NS','N','Y')
    u_sep=parse_varb('/S=','  ?????')
    If u_sep='  ?????' Then u_sep=parse_varb('S=','  ?????')
    If u_sep='  ?????' Then u_sep=d_sep
    Else Do
        If u_sep='' | Length(u_sep)>1 Then Do
            zedlmsg="User supplied seperator must be a non-blank single",
                    "character. '"u_sep"' is unacceptable. Try again."
            Address ISPEXEC "SETMSG MSG(ISRZ001)"
            Exit
        End
        If u_sep/='R' Then,
            u_sep=Substr(parm#l,Index(Translate(parm#l),'S=')+2,1)
    End
    dlin#=parse_varb('/BUILD=','N')
    If dlin#='N' Then dlin#=parse_varb('BUILD=','N')
    If dlin#/='N' Then Do
        build='Y'
        If \Datatype(dlin#,'W') Then Do
            zedlmsg="Inval line number suffix '"dlin#"' on ",
                    "/BUILD= parameter."
            Signal ext1
        End
    End
    Else Do
        dlin#=parse_varb('/RBUILD=','N')
        If dlin#='N' Then dlin#=parse_varb('RBUILD=','N')
        If dlin#='N' Then build='N'
        Else Do
            build='R'
            If \Datatype(dlin#,'W') Then Do
                zedlmsg="Inval line number suffix '"dlin#"' on ",
                        "/RBUILD= parameter."
                Signal ext1
            End
        End
    End

    Return 0

Parse_parms_ver='2.01'
/*--------------------------------------------------------------------*/
/* Parse variable 'parm#' for a constant 'mask'.                      */
/* Parameters:                                                        */
/*   1. Mask to search for. (May be truncated, refer parameter 4).    */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Positive return value. Value to return if mask found. Default */
/*      is 'Y'.                                                       */
/*   3. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   4. Mask qualifier with one of the following values:              */
/*      - Numeric length of the mask prefix.                          */
/*      - Literal 'W' to return the word that contain that mask (note */
/*        the word does not need to start with mask).                 */
/*      - Literal 'W#' to return the word numb that contain that mask */
/*        (note the word does not need to start with mask).           */
/* Notes:                                                             */
/*   1. For parameters 2 and 3:                                       */
/*      - set to literal 'NULL' to return null values.                */
/*      - set '*' to return the full word that                        */
/*        matches the mask (suggest using 'NULL' for the other value).*/
/*                                                                    */
/*   2. Comma delimit to pad out if prior parameters are not          */
/*      supplied.                                                     */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (Substr(maskl,1,1)='W') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do
        parm#=Delword(parm#,y#,1);If maskl='W#' Then posr=y#;Return posr
    End
    If maskl='W#' Then Return 0;Else Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' for a variable 'mask'.                        */
/* Parameters:                                                        */
/*   1. Mask to search for prefixing the word.                        */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   3. Literal 'NUM' to check for numerics and return negative       */
/*      result if not numeric.                                        */
/* Notes:                                                             */
/*   1. For parameters 2:                                             */
/*      - If the prefix is found, the returned value is the full      */
/*        word less the prefix.                                       */
/*      - NULLs is a valid returned value.                            */
/*      - pass a unique negative result substitution to ensure mask   */
/*        missing (eg.  '  ?????').                                   */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
/*--------------------------------------------------------------------*/
/* Use TF70 to prepare docofor NOTELINE output.                       */
/*--------------------------------------------------------------------*/
Help_TSO:
n_st=mark(2)                                /* Mark next line         */
/*

  Good &TOD. &CNAME..

  The &XCMD. macro is to be invoked out of a PDS member matching mask
  *$INDEX* to update it with all member activity within the PDS,
  however, this tutorial may be invoked from any PDS member.
  It will maintain a one line entry, with user entered member
  description, for ALL members.

  If unfamiliar with the INDEX function, a quick starter is to enter
  command:
    INDEX /LD
  in a viewed session of member $$$INDEX to build/re-build the index
  member and leave description ASIS ('/LD' parameter).

  Sample format:
 Col 1
 v
 ¦ Member  ¦ Description         (Enter "&XCMD. ?" command for more info
 +---------+------------------------------------------------------------
 ¦$$$INDEX ¦Index gen'd by &CNAME. (&USERID.) at &TIME. on &FDATE...
 ¦$$README ¦d) Read me splurge
 ¦$ADPOP   ¦R) ADDPOP generic routine
 ¦........ ¦.............................

  The following are the functions of this edit-macro:
     1. Create/regenerate the index containing a list of all current
        members within the PDS by:
         - adding new members,
         - removing deleted members (unless a parameter of "/ND" is
           used, in which case a '>' will be placed in column 1
           instead of '¦'),
         - notating the date the index is (re)generated.

     2. Confirm that the command is invoked from an appropriately
        masked member. (Will advise otherwise with an appropriate
        message.)

     3. By default, caps will be turned off. You may keep them on by
        passing a parameter of "/CAPS".

     4. Using a parameter, you can automatically set TABS on columns 1
        and 10 for tabbing between member and description fields. DO
        NOT forget to turn TABS Off if you use this feature else your
        data may look weird on subsequent edit/view sessions.

     5. If an already existing member does not have a description
        against it, '  ?????' will be inserted unless a parameter of
        "/LD" (Leave Description) is passed. If a parameter of "/RD"
        (Remove Description) is passed, all '  ?????' in the
        description is removed.

     6. Cursor will be placed on the first blank description field.

     7. You may backup previously created index into index member
        name prefixed by a '#' by passing a parameter of "/B".

     8. For INDEX entries without a description or new members, you
        may build the index description from a specific line in the
        members of the PDS by passing a parameter of "/BUILD=n" where
        'n' is the line number in each member.  If the number is
        greater than the number of lines in a member, the description
        is left blank. The default is 1.  You may rebuild the
        description by using the "RBUILD=n" parameter.  This parameter
        will replace even the existing descriptions.
        (Caution - May take a long time for large datasets and may be
        useless unless standards are adhered to.)

     9. Identify members prefixed with a '#' as backups and
        automatically tagged it with '..... Backup .....' in the
        description.  This feature is activated with the "/IB'
        parameter.  (Other backup methodologies will need to be manually
        identified.)

    10. Combining the Index generated by the "&XCMD." command and
        "LINEMAC"s' commands you can use the index as a selection menu
        with the assistance of the description.  If this feature is
        exploited, suggest you view the index to prevent oopsies and
        if you use "LINEMAC" commands that update the index, save it
        on exit once you have ensured you have not corrupted it,
        otherwise, cancel out and regen the index.

  Permissable parameters:
   ?    - Help. But you already know about this, don't you?

   /B  | B
        - Backup index. Will backup the index into member with index
          name prefixed by a '#' (right justified if > 7 bytes).

   /BUILD=nn | BUILD=nn
        - Build index description from the 'nn'th. line number in
          the member. Note that the description will start from the
          second word of the description thus permiting the first
          word to be used as the 'language' comment indicator.
          Only new members will be processed.
          This feature is useless if you dont follow established
          standards (eg. n'th line number of member is a meaningfull
          "doco" line).

   /CAPS | CAPS
        - Turn caps on. By default caps is turned off to make for
          a more pleasing index. However you may not want a lower
          case index.

   /CUST | CUST
        - Customise a "foreign" index to the format processable by
          this routine.  The new format will be placed as NOTELINES at
          the top of the member.  You can make them permanent by
          either usig the "MD" line/block commands or using parameter
          '/CUSTA'.

   /CUSTA | CUSTA
        - Customise a "foreign" index to the same format as
          processable by this routine.  Be prepared to  either cancel
          out or make fine tunnings depending on the original
          "foreign" format.

   /DM | DM
        - Delete missing. If the "/ND" feature is used, deleted
          members, marked with a '>' will stay in the index.  They can
          be permanently removed using this parameter.  Alternatively,
          they will have to be manually deleted.

   /F | FORCE
        - Force index generation. The inedex name must fit the
          *INDEX* template or an error message will be generated.
          This parameter will permit an index in any member name.

   /IB | IB
        - Identify backups. Mark members prefixed with a '#' as a
          backup member.
          This feature is useless if you dont follow established
          standards (eg. use '#' as a backup prefix for PDS members).

   /LD | LD
        - Leave description. This parameter will leave missing
          descriptions ASIS. Without this parameter any previously
          existing member will have '  ?????' put in the description
          indicating that it has not been described in previous index
          builds.

   /NEW | NEW
        - New index. This will delete and re-create the index. Watch
          this parameter as you will loose all your existing
          descriptions.

   /ND | ND
        - No delete. Rather than removing deleted members out of the
          index, it will mark deleted members with a '>' in column
          1 and leave the entry in tact. (Useful for audit purposes.)

   /NS | NS
        - No Sort. By default, the index is sorted in member name
          sequence. However, you may wish to present the index in a
          non-sorted structured format. Use this parameter to leave
          index member list as is.

   /RBUILD=nn | RBUILD=nn
        - Re-build index for all members of the PDS. (Same process
          as /BUILD=nn.)  This option may cream meaningfull indexes
          if standards are not adhered to. You cannot do this
          selectively (all or nothing).
          This feature is useless if you dont follow established
          standards (eg. n'th line number of member is a meaningfull
          "doco" line).

   /RD | RD
        - Remove description. This parameter will remove any '  ?????'
          (missing description indicators) in case you forgot the
          '/LD' parameter and didn't want '  ?????'s.

   /S=s | S=s
        - Change default column seperator "¦" to 's'.  This must be a
          non-blank single character. Use "R" to Reset to the default
          "¦".  It is highly recommended not to use alphabetic
          characters (unless you chose to use 'meaningfull' lower case
          like "o").
          If you DO decide to change the seperator you will need to
          supply it every time you issue the INDEX command (other than
          when invoking with '?' for help).

   /SHowc |SHow
        - Show changes.  All lines will be excluded and only new
          members will be displayed.  If at any stage "/ND" (No
          Delete) was used and deleted members are marked with a '>'
          in column 1, they will also be displayed.
          If no members have been added, this command is an
          alternative for excluding all lines and finding '>' in
          column 1 (however, may be a timely command for large
          indexes).  '?').

   /TO | TO
        - Tabs On.  Set TABS on columns 1 and 10 for tabbing between
          member and description fields. DO NOT forget to manually
          turn tabs off before exiting edit (simply enter command,
             TABS OFF
          ).

  Additional features (if options available):
   During the edit session of the index generation you may enter the
   following LINEMAC line commands:
     BM | EM | BM
         - Browse, Edit or View Member.
     CM  - Copy Member. Will be presented with a pop up screen.
     CMU - Copy Member and Update index (adds member if new).
     DM  - Delete Member. Will be presented with a pop up screen.
     DMU - Delete Member and Update index (removes index entry).
     JM  - submit member (JCL).
     KM  - SuperC member (enter with member in presented screen).
     RM  - Rename Member. Will be presented with a pop up screen.
     RMU - Rename Member and Update index (changes index entry).
     ST  - Display STatistics above line in NOTELINE format.
     XM  - eXecute Member (for REXX members)

   (Obsolete with the availability of LINEMAC.)
   Alternatively if LINEMAC is not available, you may enter the
   following commands followed by either the line number, member
   name of cursor position on the line. Note, these commands are
   actual commands and NOT line commands:

   IB - Browse the appropriate member. This command permits you to
        browse the member in order to establish it's function and
        devise an appropriate index description.

   ID - Deletes the member from the PDS and removes the entry from the
        index. You may specify a range of line numbers, eg. ID 15-18.
        You may specify a start and repetition, eg. ID 15.3.  You may
        prematurely exit a multi-delete loop by entering QUIT on the
        command line of the confirmation panel.

   IE - Similar to IB except the member is edited. This option will
        turn TABS off for the edited member.

   IS - Select on stats. Does not exclude members that meet specified
        stats criteria. The permissable parameters are:
        C>date     - Members created after specified date (may be
                     trunc).
        C<date     - Members created before specified date (may be
                     trunc).
        M>date     - Members modified after specified date (may be
                     trunc).
        M<date     - Members modified before specified date (may be
                     trunc).
        U=userid   - Mmembers created by specified userid
        U¬=userid  - Members not created by specified userid

   IU - Display last changed Userid and date.

   IW - Wildcarding. Similar to IB with the exception that the member
        returned is wildcarded providing a member list of all
        matches. You may force edit instead of the default browse by
        passing a parameter of EDIT .

  If you combine all the ISPF environment component members into the one
  member (eg. for ease of distribution and cross system
  synchronisation), suggest using the following format for the
  description
     ¦$$README ¦x) Read me splurge
  where 'x' can have one of the following values for the dataset llq:
     A - ASM
     C - CLIST
     D - DOCO/DATA
     I - ISPPLIB.IBM (customised IBM panels)
     J - JCL.CNTL
     H - ISPPLIB.TUTORIAL (help panels)
     L - LOADLIB (load module XMITed as 80 byte length member)
     M - ISPMLIB
     P - ISPPLIB
     R - REXX
     S - ISPSLIB
     T - ISPTLIB
  then you can use macro 'POPINDEX' to build JCL to distribute members
  from dataset in accordance with the 'x)' identifier. Type 'x' in
  lower case to stop distribution.  (For further details see the
  'POPINDEX' macro.)

  Index for RECFM=U datasets (if INDEXU available):
    You may generate an index for an unformatted dataset by issuing the
    following TSO command (which uses load module INDEXUFM):
        TSO  INDEXU 'dataset' {volser}
    where the volser is an optional parameter
    This will build/create member $$$INDEX and you may use the &XCMD.
    command to update it.

    For obvious reasons, only command IB and ID is available under
    this function.

    Known bug in INDEXU:
     If you inadvertantly encounter a 0C1 abend message during
     saving/exiting member, copy the member into an editable
     PDS(member) and CANCEL out of the current INDEXU session.
     Re-enter the session and copy/move in copy of PDS(member) and
     exit. It should save succesfully. You now have a legible index of
     a load library.
     (If you can't live with this occasional occurance, dont't use the
     function.)

  The following members are required to package this routine.
  (Members marked with a 'o' seperator are optional):
    REXX:
      INDEX    - Macro driver (invoked as a command during edit).
      INDEXU   o Function driver (invoked for datasets with RECFM=U).
                 (Refer to this macro for aditional requirements.)
      IB       o Browse member
      IE       o Edit member
      ID       o Delete member
      IS       o Exclude all members that do not match the section
                 parameters for statistics values
      IU       o Advise of last changed userid
      IW       o Member list for edit/browse (wildcarded)
      LINEMAC  o Permits member browse/edit/view and delete from
                 index. (Refer to "LINEMAC" for its associated
                 packaging.)
    Load modules:
      INDEXUFM o Program to permit "edit" if RECFM=U member
                 $$$INDEX.

                                     *****

*/
n_en=mark(-2)                               /* Mark prev 2 line       */
    chgchar='&'
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End
    fdate=Date('n');time=Substr(Time(),1,5)
    Address ISREDIT;"(last)=LINENUM .ZLAST";If last=0 Then "LINE_AFTER 0=' '"
    "(caps)=CAPS";"CAPS=OFF"
    "(dl1,dl2)=DISPLAY_LINES";If rc/=0 Then dl1=0
    If \Datatype(dl1,'w') Then "(dl1)=LINE .ZFIRST"
    If dl1=0 Then Do;dl1='.ZFIRST';"LINE_AFTER" dl1"=' '";End
    Else If dl1>1 Then dl1=dl1+1
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1 || 'var' || p2'
        End
        x=nl_h(Substr(line,1,72))
    End
    "CAPS=(caps)";If last=0 Then "DEL ALL .ZLAST .ZLAST"
    Address
    Exit

/*--------------------------------------------------------------------*/
/* Get name from ACEE control block.                                  */
/*--------------------------------------------------------------------*/
$Whoami:
    ascb=Storage('224',4)
    asxb=Storage(d2x(c2d(ascb)+x2d('6c')),4)
    acee=Storage(d2x(c2d(asxb)+x2d('c8')),4)
    nam@=Storage(d2x(c2d(acee)+x2d('64')),4)
    name=Storage(c2x(nam@),30);len=c2d(Substr(name,1,1))
    Return Substr(name,2,len-1)
/*--------------------------------------------------------------------*/
/* Convert upper to lower (imported from REXX routine '$U2LOWER" for  */
/* self containment).                                                 */
/*--------------------------------------------------------------------*/
$U2lower:ARG text,pos,rep;rname=
   lc='abcdefghijklmnopqrstuvwxyz';uc='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
   If Datatype(rep,'W') Then Nop;Else rep=99999
   If Datatype(pos,'W') Then Nop;Else pos=2
   Do i=rep by -1 To 1
       Parse VAR text name text
       If pos>1 Then Do
           pref=Substr(name,1,pos-1);suff=Substr(name,pos);End
       Else Do;pref=;suff=name;End
       rname=rname pref||Translate(suff,lc,uc)
       If text='' Then Leave
   End
   Return Strip(rname text)
nl_h:Parse Arg n#
   If ima_macro Then "LINE_BEFORE" dl1"=NOTELINE (n#)";Else Say Center(n#,79)
   Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
