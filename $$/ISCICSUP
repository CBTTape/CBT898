/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
    Trace o;msg=Msg();x=Msg('Off')
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* This routine will read in members pointed to by variable REGDSN and*/
/* issue a series or TSO STATUS commands to establish if the CICS     */
/* region is executing. Assumes member names are in the format        */
/* '@cccc' and will get the first line of each valid member and parse */
/* it for the jobname.                                                */
/* Order the datasets in variable REGDSN in order of priority as      */
/* duplicate names will be associated (reported) agains first hit.    */
/* (Ie. If a member is found in two datasets, it will be reported as  */
/* "executing" from the first even if submitted from the second.      */
/* This is usually the case of a migrated region being backed out     */
/* but promoted JCL member not deleted.)                              */
/*                                                                    */
/* By default regions that are NOT UP are reported.                   */
/*                                                                    */
/* Permissabble parameters:                                           */
/*    ALL    - Reports status of all regions (must be 1st. parameter) */
/*    UP     - Report regions UP (must be 1st. parameter)             */
/*    NP     - No Panel display.                                      */
/* If both "ALL" and "UP" parameters are used, the 1ts. parameter     */
/* will be honoured.                                                  */
/*                                                                    */
/* The following members are required to package this routine.        */
/* members marked with a 'o' are optional:                            */
/*   REXX:                                                            */
/*     ISCICSUP - Driver                                              */
/*                                                                    */
/*   Panels:                                                          */
/*     DANAMIC1 o Dynamically buildable panel. (Without this member   */
/*                all messages will be output using a 'SAY' command   */
/*                and can be trapped by the %BR command if so desired.*/
/*     HNOHELP  o Help panel to say 'no help' available.              */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    x=Msg(msg)

    ARG parm#
    Parse SOURCE . . xcmd .
    Address ISPEXEC
    If parm# Â¬= "" Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    If Verify(Substr(sysid,4,1),'CHI') = 0 Then prod = ''
    Else                                        prod = 'P'
/*--------------------------------------------------------------------*/
/* Update variable 'regdsn' with ALL the datasets that the cics       */
/* regions may be started from.                                       */
/*--------------------------------------------------------------------*/
    regdsn= ,
            'SYS4.TS13.RUNTIME.CNTL',
            prod'CIX.R410.RUNTIME.CNTL',
            ''

    zerrhm   = '*'
    zerralrm = 'NO'
    zerrsm   = ''

    If parm# = '?' Then Do
        Signal On Syntax Name staxroc
        retsyn = help_me
        X = $BR(xcmd "??")
        Return 0
    End
    If parm# = '??' Then Signal help_me

    env   = ''

    Parse Upper VAR parm# parm1 parm2 .
    If parm1 = 'NP' | parm2 = 'NP' Then,
        panel = ''                          /* TSO test               */
    Else panel = 'DYNAMIC1'

    Call set_vars_1
    Call set_vars_2

    #regs = 0
    Do j=1 to #r
        #regs = #regs + Words(regs.j)
    End
    @regs = #regs
    tickover = #regs % 10
    If parm1 = 'UP' Then Do
        Showit = "If msg1 /= '' Then go=1;Else go=0"
        stat   = "UP"
    End
    Else Do
        Showit = "If msg1  = '' Then go=1;Else go=0"
        stat   = "NOT UP"
    End
    If parm1 = 'ALL' Then showit = 'go=1'
    line1 = oblue ||,
      Substr(Centre(" Regions' status ",79,'*'),1,79)

    "VGET (zscrmaxd)"
    x = MSG('On')
    cntr = 0
    If panel /= '' Then Do
        "VGET (zscreend) SHARED"
        Call progress_panel
        If rc > 0 Then Do
            panel = ''
            Say Substr(Centre(" Regions' status ",79,'*'),1,79)
            Say ' '
        End
    End
    Else Do
        Say Substr(Centre(" Regions' status ",79,'*'),1,79)
        Say ' '
    End

    Do l#=1 To #r
        xx = Substr('*--' dsn.l#' ',1,78,'-')'*'
        If panel /= '' Then line1 = line1 || ogreen || xx
        Else Say xx
        Do Forever
            Parse VAR regs.l# reg1 regs.l#
            If reg1 = '' Then Leave
            x = OUTTRAP('line.',50,'NOCONCAT')
            Address TSO 'STATUS' reg1
            msg1 = '';hi1 = ored;stat = 'NOT UP'
            Do i=1 To line.0
                If Index(line.i,'EXECUTING') > 0 Then Do
                    msg1 = '- Executing';hi1 = ogreen;stat = 'Up    '
                    msg1 = '- Executing'
                    i = line.0
                End
            End
            @regs = @regs -1
            Interpret showit
            If go Then Do
                If panel /= '' Then Do
                    line  = Substr(reg1,1,8)oblue'****',
                            stat '**** ('ver.l#')'
                    line1 = line1 || Substr(hi1'  'line,1,80)
                    Call progress_panel
                End
                Else Say '  'env Substr(reg1,1,8) '****' stat '****',
                         '('ver.l#')'
            End
        End
    End
    If panel = '' Then Say Centre(' End of data ',79,'*')
    Else Do
        linem = ogreen'Press ANY key to leave panel.'
        Call set_head_1
        linem = ogreenr'Press ANY key to leave panel.'
        line = Centre(' Bottom of data ',79,'*')
        line1 = line1 || Substr(oblue || line,1,80)
        call display_panel
    End
    Exit

test_4_notify:
    If panel = '' Then Return 0
    #lr = #lr +1
    If #lr - #done < tickover Then Return
    Call progress_panel

    Return 0

/*--------------------------------------------------------------------*/
/* Display progress screen if available                               */
/*--------------------------------------------------------------------*/
progress_panel:
    tl = Length(line1) % 80
    Call set_head_1
    line1# = line1
    fl = Length(line1#)%(zscreend*80)*(zscreend*80) +1
    line1 = Substr(line1#,fl,zscreend*80)
    "ISPEXEC CONTROL DISPLAY LOCK"
    "ISPEXEC DISPLAY PANEL(&PANEL)"
    If rc = 0 Then line1 = line1#

    Return 0

/*--------------------------------------------------------------------*/
/* Display the screen                                                 */
/*--------------------------------------------------------------------*/
display_panel:
    tl = Length(line1) % 80
    fl = 1
    line# = line1
    Do Forever
        line1 = Substr(line#,80*(fl-1)+1,zscreend*80)
        Call set_head_1
        "DISPLAY PANEL(&PANEL)"
        If rc /= 0 Then Return 0
        Call scroll_data_ud
    End

scroll_data_ud:
    "VGET (zscrolla zscrolln zverb)"
    If zverb  = 'UP' Then qual = -1
    Else                  qual = +1
    If zscrolla = 'MAX' Then Do
        If zverb  = 'UP' Then fl = 1
        Else                  fl = Length(line#)%80 - (zscrolln-1)
    End
    Else Do
        fl  = fl + qual * zscrolln
    End
    If fl < 1 Then fl = 1
    If fl > tl Then fl = tl

    Return 0


set_head_1:
    time = Time()
    xx = Centre(' CICS regions'ored || stat || oyellow'started ',55,'-')
    rowcol = owhite || 'Row' Right(fl,3) 'of' Right(tl,3)
    lineh  = oyellow || time xx || rowcol
    #done  = #regs - @regs
    #lr    = #done
    #donep = (100*(#done)) % #regs
    #2dop  = 100 - #donep
    linem  = ''
    lineml = 80
    If #donep > 0 Then Do
        xx = (#donep*lineml) % 100
        xx = Substr(#donep,1,xx)
        linem  = ogreenr || xx
    End
    If #2dop > 0 Then Do
        xx = (#2dop*lineml) % 100
        xx = Substr(#2dop,1,xx)
        linem  = linem || oredr || xx
    End

    Return 0

set_vars_1:
    #r = 1
    Do Forever
        Parse VAR regdsn dsn regdsn
        "LMINIT DATAID(DATA1) DATASET('&DSN')"
        If rc /= 0 Then Do
            zerrsm   = ''
            zerrlm = "Cannot process dataset '"dsn"'. Is it valid?",
                    "May need to upgrade routine '"xcmd"' with",
                    "correct dataset names."
            "SETMSG MSG(ISRZ002)"
            Exit
        End
        Parse var dsn . '.' ver '.' .
        member  = "@"
        ver.#r  = ver
        dsn.#r  = dsn
        regs.#r = ''
        "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
        Do Forever
            "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) "||,
                    "STATS(NO)"
            If rc /= 0 Then Leave
            If Substr(member,1,1) /= '@' Then Leave
            "LMMFIND DATAID(&DATA1) MEMBER(&MEMBER)"
            "LMGET DATAID(&DATA1) MODE(INVAR) DATALOC(line1)",
                  "DATALEN(linl) MAXLEN(80)"
            Parse VAR line1 '//' cicsname .
            cicsname = cicsname' '
            Do k=1 To #r-1
                If Index(' 'regs.k' ',' 'cicsname) = 0 Then Iterate
                cicsname = ''
                Leave
            End
            regs.#r = regs.#r || cicsname
        End
        "LMMLIST DATAID(&DATA1) OPTION(FREE)"
        "LMCLOSE DATAID(&DATA1)"
        If regdsn = '' Then Leave
        #r = #r +1
    End

    Return 0

set_vars_2:
    #colors = 7                             /* Number of colors       */

    reverse = X2C('10')                     /* Reverse mask           */
    uscore  = X2C('20')                     /* Underscore mask        */
    blink   = X2C('30')                     /* Blink Mask. Note - this*/
                                            /* may not work on some   */
                                            /* terminals...           */

    ired    = X2C('01')                     /* Input RED etc...       */
    iblue   = X2C('02')
    iyellow = X2C('03')
    igreen  = X2C('04')
    iturq   = X2C('05')
    ipink   = X2C('06')
    iwhite  = X2C('07')

    ored    = D2C(#colors+C2D(ired))        /* Output RED etc...      */
    oblue   = D2C(#colors+C2D(iblue))
    oyellow = D2C(#colors+C2D(iyellow))
    ogreen  = D2C(#colors+C2D(igreen))
    oturq   = D2C(#colors+C2D(iturq))
    opink   = D2C(#colors+C2D(ipink))
    owhite  = D2C(#colors+C2D(iwhite))

    oredr    = Bitor(ored,reverse)
    ogreenr  = Bitor(ogreen,reverse)

    Return 0

Olay:
    Parse Arg ol
    ol = olayc || ol || oblue
    ll = Length(ol)
    line1 = Overlay(ol,line1,st,ll)
    st = st +80

    Return 0

/*--------------------------------------------------------------------*/
/* Help details...                                                    */
/*--------------------------------------------------------------------*/
Help_me:
    Do i=n_st-1 To n_en+1
        Say Center(Strip(Sourceline(i),'t'),79)
    End

    Exit

errproc:Call Off Error;Return Sigl
