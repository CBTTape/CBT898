/*------------------------------- REXX -------------------------------*/
ISPFALOC_ver='2.03'
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/*  This routine formats the "output from the LISTA" command into an  */
/*  ISPF table. As a front end, this command invokes a program that   */
/*  processes the TIOT control blocks rather than trap and parse the  */
/*  output from the LISTA command.                                    */
/*                                                                    */
/*  Associated members:                                               */
/*     REXX:                                                          */
/*      ISPFALDH - Dinamic tutorial.                                  */
/*      ISPFALOC - Driver.                                            */
/*      ISPFALO1 - Display DD concatenation after selection.          */
/*      ISPFALUX - User exit thet gets control for non standard       */
/*                 selections.                                        */
/*      ISPFALUD - User exit (default template). Copy into systems    */
/*                 library as 'ISPFALUX'.                             */
/*                                                                    */
/*     Panel:                                                         */
/*      ISPFALC1 - Table display of 1st. DD in concatenation.         */
/*      ISPFALC2 - Table display of concatenations for individual     */
/*      ISPFALC3 - Pop-up panel for search progress display.          */
/*                                                                    */
/*     Tutorial (obsolete replaced by ISPFALDH):                      */
/*      ISPFALH1 - Tutorial panel                                     */
/*      ISPFALH3 - Tutorial panel                                     */
/*      ISPFALH5 - Tutorial panel                                     */
/*      ISPFALH7 - Tutorial panel (user exit processing)              */
/*      ISPFALHU - Tutorial panel user exit anchor                    */
/*                                                                    */
/*     Skeleton:                                                      */
/*      ISPFANO1 - Model used to display informative message for      */
/*                 'BC' option.                                       */
/*                                                                    */
/*     Load modules:                                                  */
/*      DSNALLOC - Program to navigate through the TIOT and build the */
/*                 ISPF table.                                        */
/*                                                                    */
/*  Associated routines:                                              */
/*      CONC     - Concatenate DSNames from DDnames in edited JCL     */
/*                 used as front End                                  */
/*      LINKL    - Link list REXX Exec used front End                 */
/*      LPAL     - LPA list REXX Exec used front End                  */
/*      MP       - Multi-Procs processing invoked using ISPFALOC as   */
/*                 it's front End                                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*  Listed below are the interface with the program DSNALLOC:         */
/*    The following parameters (variables) may be passed by the       */
/*    invoking dialog through the ISPF shared variable pool. The      */
/*    brackets contain max length:                                    */
/*                                                                    */
/*     DD       (08) - DDNAME If only the concatenations for a        */
/*                     particular ddname is req'd                     */
/*     PANELID  (08) - Panelid to display the table. the default      */
/*                     panelid is 'ISPFALC1'.                         */
/*     TABLE    (08) - Table name. This should be passed by the       */
/*                     calling dialog. Default value is '$Ttime' to   */
/*                     permit multiple invocation at the same time.   */
/*     ALL      (03) - Set to 'ALL' to indicate full display. Without */
/*                     this parameter setting, only the first dataset */
/*                     in each concatenation will be displayed.       */
/*     NULL     (03) - Set to 'NULL' to indicate that NULLFILEs are   */
/*                     to be displayed any other value will not       */
/*                     process them.                                  */
/*     KEEP     (03) - When set to 'Yes', indicates that the table is */
/*                     to be created, and passed back to the dialog   */
/*                     without displaying it. It is up to the dialog  */
/*                     to display and close the table. If this        */
/*                     parameter is set and the table parameter is    */
/*                     missing, this parameter will be turned off as  */
/*                     the dialog will not know the internally        */
/*                     generated table name.                          */
/*                     If this parameter is off, the table will be    */
/*                     displayed by this program using the default    */
/*                     panelid                                        */
/*    Output:                                                         */
/*                                                                    */
/*     zedlmsg  (79) - Error message If RC from program is ¬0.        */
/*                                                                    */
/*    The table will be created with the following fields:            */
/*                                                                    */
/*    Keys :                                                          */
/*     DD       (08) - DDname for 1st in concatenation and '"  "' for */
/*                     rest.                                          */
/*     DDNAME   (08) - DDNAME.                                        */
/*     DSN      (44) - Dataset name.                                  */
/*     IND      (04) - Indicator for marking.                         */
/*     NUM      (05) - Number of datasets in the concat.  For         */
/*                     ALL=ALL, this will be the datasets POsition in */
/*                     the concat followed by TOtal no in concat, ie. */
/*                     PO/TO                                          */
/*    Names:                                                          */
/*     VOLUME   (08) - Volume dataset allocated resides on.           */
/*     SNUM     (05) - Sort number. same format as the pp/tt format   */
/*                     of NUM.                                        */
/*                                                                    */
/*    Output - return code:                                           */
/*               0 - table created and ready to process               */
/*              ¬0 - error occured creating table                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
ARG parm#
    Address ISPEXEC;cactn='RETURN'

    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)"

byp1:
/*  cactn='CANCEL'                                                    */
    "CONTROL ERRORS" cactn

/**********************************************************************/
/*  Initialise fields                                                 */
/**********************************************************************/
ini0:
    If Word(parm#,1)='/T' Then Return 0

    Parse Upper VAR parm# parm#

    "VGET ZSYSID ASIS"
    sid=zsysid;userid=Userid()
    hlq=$alkhlq();llq=$alkllq()
    real_X='"EX '''hlq'.'llq'(REAL)''",'
    uexit='ISPFALUE'                        /* User exit module       */
    Parse Value 'N 0' With bc msub mssg all l #sel find ddname

    #tr1=Trace('o')
    Call parse_parms
    x=Trace(#tr1)

/**********************************************************************/
/*  Set up Multi-Procs interface If requested                         */
/**********************************************************************/
star:
    If mp Then Do
        xx=$alklibd('On')
        ispclib="'"hlq"."$alkllqc()"'"
        If xx=0 Then Do
            Address TSO "ALTLIB ACTIVATE APPLICATION(CLIST) DA("ispclib")"
            uexit="ISPFALMP"
        End
        Else Do
            mp=0
            zedlmsg="'MP' allocation failed. Extra options not available."
            "SETMSG MSG(ISRZ001)"
        End

    End
    Else Do
        Signal On Error Name bypass_E#1
        mp=0
        "CONTROL ERRORS RETURN";"CONTROL NONDISPL ENTER"
        "DISPLAY PANEL(CSMDSHX1)"
        mp=1
bypass_E#1:
        Signal OFF ERROR
        "CONTROL ERRORS" cactn
    End

/*--------------------------------------------------------------------*/
/* Set parameters to bermit premature exit for multi edit/browse      */
/*--------------------------------------------------------------------*/
    If mp Then Do
        epi='PANEL(EDLOOPI)'
        epm='PANEL(EDLOOPM)'
        bri='PANEL(BRLOOPI)'
        brm='PANEL(BRLOOPM)'
    End
    Else Parse Value '' With epi epm bri brm

ini1:
    panelid= 'ISPFALC1'
/*  panelp = 'POPMSG2'                                                */
    panelp = 'ISPFALC3'
    dddisp = 'DD'                           /* DD display (DD/DSNAME) */
    keep   = 'YES'
    timx   = Time('s')
    table1 = 'T$'timx
    table2 = 'T#'timx
    tp1    = 0
    tp2    = 0
    table  = table1
    ispprof = 'ISPF.ISPPROF'
    drow='ALL'


/**********************************************************************/
/*  Call the TIOT navigation program                                  */
/**********************************************************************/
ref1:
    If all="ALL" Then null='NULL';Else null=
    "VPUT (NULL TABLE KEEP PANELID ALL DDNAME) SHARED"
    "SELECT PGM(DSNALLOC)"
    If rc/=0 Then Signal fre1

inpt:
    If l/='' Then Do
        zcmdr=l;Signal wld1
    End

/* From 'CONC' <-- 'MPP' or 'FP'                                      */

    If all='ALL' & find/='' Then Do
        zcmd='F';zcmdr=find;Signal find_all
    End

    If wname/='' Then Do
        zcmdr=wname;ddname=
        Signal wld1
    End
    If ddname='' Then "VGET DDNAME SHARED"
    If ddname/='' Then Do
        zcmd='S';zcmdr=ddname;ddname=;temp='Y'
        "VPUT (DDNAME) SHARED"
        Signal wld1
    End

/**********************************************************************/
/*  Present screen of allocations                                     */
/**********************************************************************/
dis1:
    If bc='Y' Then Signal bldclist
    If bc='R' Then Signal bldreal
    zcmd=
    "TBDISPL "table1" PANEL("panelid") MSG("mssg")"
    If rc>4 Then Signal xxxx
    If zcmd='' Then Signal noz1
/*                                                                    */
    Parse VAR zcmd zcmd zcmdr
    If Index(zcmd,'*')>0 Then Do
        zcmdr=zcmd;zcmd='S';ddname=
        Signal wld1
    End

    If zcmd='*' Then Do
        drow='ALL';Signal dis1
    End
    If zcmd='?' Then Do
        ddd='HELPDRVR SYSEXEC SYSPROC';tutememb='ISPFALDH'
        Do While ddd/=''
            Parse Var ddd dd ddd
            xxx=$ddalloc(dd)
            Do While xxx/=''
                Parse Var xxx xx xxx
                If Sysdsn("'"xx"("tutememb")'")='OK' Then Do
                    ddd=;Leave
                End
            End
        End
        x=helpdrvr(dd'='tutememb zcmdr);Signal dis1
    End

    If zcmd='TRACE' Then Do
        Select
            When zcmdr='OFF' Then Trace('N')
            When zcmdr='ON' Then Trace('R')
            Otherwise Do                    /* Toggle                 */
                #tr=Trace()
                If Verify(#tr,'NO')=0 Then Trace('R');Else Trace('N')
            End
        End
        #tr=Trace();Signal dis1
    End
/*                                                                    */
    If Wordpos(zcmd,'SORT /R')>0 Then Do
        If zcmdr='DD' Then Do
          "TBSORT &TABLE1 FIELDS(DDNAME,C,A,SNUM,C,A)"
          dddisp='DD'
        End
        If zcmdr='DSN' Then Do
          "TBSORT &TABLE1 FIELDS(DSN,C,A,DD,C,A)"
          dddisp='DDNAME'
        End
        If zcmdr='VOL' Then Do
          "TBSORT &TABLE1 FIELDS(VOLUME,C,A,DSN,C,A)"
          dddisp='DDNAME'
        End
        Signal DIS1
    End
    mssg=
    If zcmd='TN' Then Do
        zedlmsg="Table name in use is '"table1"'."
        mssg='ISRZ001'
        Signal dis1
    End
    If zcmd='MP' Then Do
        If zcmdr='OFF' Then mp=0;Else mp=1
        Signal dis1
    End
    If Wordpos(zcmd,'REFRESH /R R')>0 Then Do
        If zcmdr='ALL' Then all='ALL';Else all=
        ddname=;drow='ALL';dddisp='DD'
        Signal ref1
    End
    If zcmd='HMP' Then Do
        If \mp Then Do
            zedlmsg = "Help not available for MULTI-PROCS. "||,
                    "Re-execute with parameter 'MP'."
            "SETMSG MSG(ISRZ001)"
            Signal dis1
        End
        "CONTROL ERRORS RETURN"
        "SELECT PGM(ISPTUTOR) PARM(CSMDSHX1)"
        "CONTROL ERRORS" cactn
        Signal dis1
    End
    If Wordpos(zcmd,'BC BX CLIST ALLOC REAL')>0 Then Do
        all#=all;nul#=null;all='ALL'
        If Wordpos(zcmd,'BX REAL')>0 Then bc='R';Else bc='Y'
        ddname=
        Signal ref1
    End

find_all:
    If Wordpos(zcmd,'F FM')>0 Then Do
        lfind=Strip(zcmdr)
        "TBTOP &TABLE1";"TBQUERY &TABLE1 ROWNUM(#row)"
        zwinttl='Member search progress meter'
        "VPUT (ZWINTTL)";"ADDPOP ROW(5) COLUMN(6)"
        nat='ABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890@#$.,'
        yyy=Copies('y',Length(nat))
        #row=#row+0;addpop=1;#dsn=
        Do While rc=0
            "TBSKIP &TABLE1 ROWID(row#)"
            If rc/=0 Then Iterate
            If drow='SCAN' Then,
                If Substr(ddname,1,wll)/=wnameu Then Iterate
            If dsn/='NULLFILE' & Index(dsn,'?')=0 Then Do
                "LMINIT DATAID(MS) DATASET('&DSN') ENQ(SHR) ORG(DSO)"
                If rc=0 Then Do
                    If dso/='PO' Then Do
                        "LMFREE DATAID(&MS)";Iterate
                    End
                    check=;ind=
                    "LMOPEN DATAID(&MS) OPTION(INPUT)"
                    If rc=0 Then
                        If pos('*',lfind)>0 | pos('%',lfind)>0 Then,
                            "LMMLIST DATAID(&MS) MEMBER(CHECK)",
                                     "PATTERN(&LFIND) OPTION(LIST)"
                        Else "LMMFIND DATAID(&MS) MEMBER(&LFIND)"
                    If rc=0 Then Do
                        ind='@'
                        If Wordpos(dsn,#dsn)=0 Then #dsn=#dsn || dsn'  '
                    End
                    If addpop Then Do
/*                    If row#//10=1 Then Do                           */
                        row#=row#+0
                        da1=#dsn
                        sh1=Translate(#dsn,yyy,nat)
                        "CONTROL DISPLAY LOCK"
                        "DISPLAY PANEL(&PANELP)"
                        If rc>8 Then addpop=0
/*                    End                                             */
                    End
                    "LMFREE DATAID(&MS)"
                End
                "TBMOD &TABLE1"
            End
        End
        If addpop Then "REMPOP"
        "TBTOP &TABLE1";"TBVCLEAR &TABLE1"
        drow='SCAN'
        ind='@'
        "TBSARG &TABLE1 NAMECOND(IND,EQ)"
        Signal dis1
    End

    If zcmd='FS' Then Do
        If zcmdr='ALL' Then Do
            drow='ALL';dddisp='DD'
        End
        Else Do
            dddisp='DDNAME'
            "TBTOP &TABLE1"
            Do While rc=0
                "TBSKIP &TABLE1"
                If rc/=0 Then Iterate
                If Index(dsn,zcmdr)>0 Then ind='*';Else ind=
                "TBMOD &TABLE1"
            End
            "TBTOP &TABLE1";"TBVCLEAR &TABLE1"
            drow='SCAN';ind=
            "TBSARG &TABLE1 NAMECOND(IND,NE)"
        End
        Signal dis1
    End
/*                                                                    */
    mssg=

    If zcmd='FS' & zcmdr/='' Then Do
        rc=0
        Do While rc=0
            "TBSKIP &TABLE1"
            If rc/=0 Then zedlmsg="String '"zcmdr"' NOT found."
            Else Do
                If Index(zcmdr,dsn)>0 Then Do
                    rc=4;zedlmsg="String '"zcmdr"' found."
                End
            End
        End
        "SETMSG MSG(ISRZ001)"
        Signal dis1
    End
    If zcmd/='S' & zcmdr/='' Then Do
        zedlmsg="Invalid command '"zcmd"' entered."
        "SETMSG MSG(ISRZ001)"
        Signal dis1
    End

wld1:
    Parse VAR wname wnameu '*';wll=Length(wnameu)
    "TBTOP &TABLE1"
    dd=zcmdr
    "TBSCAN &TABLE1 ARGLIST(DD) CONDLIST(EQ)"
    If rc/=0 Then Do
        zedlmsg="NO match found for DD '"zcmdr"'."
        "SETMSG MSG(ISRZ001)"
        Signal dis1
    End
    If Index(zcmdr,'*')=0 Then Signal dddO
    "TBTOP &TABLE1";"TBVCLEAR &TABLE1"
    drow='SCAN';ddname=zcmdr
    "TBSARG" TABLE1 "NAMECOND(DDNAME,EQ)"
    Signal dis1

noz1:
    If sel='' Then Signal gnx1
    msub=ztdsels
    Signal con1

mus1:
    "TBDISPL &TABLE1"

con1:
/*  Put block commands first                                          */
      If sel='XX' Then Do
          If msub=2 Then Do
              "TBQUERY &TABLE1 ROWNUM(rownum) POSITION(tp1)"
              "TBDISPL &TABLE1"
              "TBQUERY &TABLE1 ROWNUM(rownum) POSITION(tp2)"
          End
          Else Do
              "TBQUERY &TABLE1 ROWNUM(rownum) POSITION(tpx)"
              If tp1=0 Then Do
                  tp1=tpx
                  zedlmsg="Incomplete '"sel"' block command",
                        "from member '"Strip(member)"'."
                  zedlmsg#=zedlmsg
                  "SETMSG MSG(ISRZ001)"
                  Signal dis1
              End
              Else Do
                  tp2=tpx
                  If tp1>tp2 Then Do
                      tp2=tp1;tp1=tpx
                  End
              End
          End
          tpd=(tp2-tp1)+1
          tp3=tp1-1
          "TBTOP &TABLE1"
          "TBSKIP &TABLE1 NUMBER(&TP3) POSITION(TABPTR)"
          Do tpd
              "TBSKIP &TABLE1"
              "TBDELETE &TABLE1"
          End
          tp1=0;tp2=0
          Signal dis1
      End

    If sel='=' Then sel=#sel;Else #sel=sel

    If sel='S' Then Do
        If all='ALL' Then Do
            If Substr(dd,1,1)/=' ' Then Signal dddO
            sel='V'
        End
        Else Signal dddO
    End
    If sel='E' Then Do;action='EDIT';Signal prcs;End
    If sel='V' Then Do;action='VIEW';Signal prcs;End
    If sel='B' Then Do;action='BROWSE';Signal prcs;End
    If sel='F' Then Signal free
    If Wordpos(sel,'BD ED VD')>0 Then Do
        Address ISPEXEC
        "LMINIT DATAID(DATAID) DDNAME("dd")"
        If rc/=0 Then Do
            zedlmsg="DD("dd") could not be allocated. RC="rc"."
            mssg="ISRZ001"
            Signal dis1
        End
        act=$Ttrunc(sel,,'ED,EDIT VD,VIEW BD,BROWSE *,BROWSE')
        "BROWSE DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Signal gnx1
    End
    If sel='X' Then Do
        "TBDELETE &TABLE1"
        Signal gnx1
    End
    If all='ALL' Then Do
        If sel="EM" & lfind/='' Then Do
            act='EDIT'
            Signal editmemb
        End
        If sel='VM' & lfind/='' Then Do
            act='VIEW'
            Signal editmemb
        End
        If sel='BM' & lfind/='' Then Signal browmemb
    End

    "VPUT SEL SHARED"
    "SELECT CMD(%ISPFALUX &TABLE1)"
    rc1=rc
    If rc1=8 Then Do                        /* Error found in exit    */
        "CONTROL DISPLAY RESTORE"
        Signal dis1
    End
    If rc1=0 Then Signal gnx1               /* Hit in exit proc OK    */

    If \mp Then Signal gnx1

    If sel/='' Then Do
        If sel='S' Then sel='B'
        f00=sel
        zcmd=f00
        If LENGTH(zcmd)>1 Then ,
          If Wordpos(zcmd,'CE CB CL')>0 | Substr(zcmd,1,2)='CC' Then Do
              szcmd=zcmd
              "VPUT (SZCMD) SHARED"
          End
        csdsn00="'"dsn"'"
        "CONTROL DISPLAY SAVE"
        parm1 = '%MDS'
        parm2 = p0
        parm3 = f00
        parm4 = csdsn00
        parm5 = Strip(parms)
        parm6 =
        parm7 =
        parm8 = dd
        "SELECT CMD(%CSMDSN" parm1 parm2 parm3,
            parm4 parm5 parm6 parm7 parm8")"
        "CONTROL DISPLAY RESTORE"
        Signal gnx1
    End
    Signal gnx1

dddo:
    "CONTROL DISPLAY SAVE"
    If all='ALL' Then num=lim
    var1='EPI,EPM,BRI,BRM'
    "VPUT ("var1") SHARED"
    "VPUT (VAR1) SHARED"
    "SELECT CMD(%ISPFALO1 &DDNAME &TABLE2 &MP &FIND)"
    "CONTROL DISPLAY RESTORE"
    If temp='Y' Then Signal xxxx
    Signal gnx1

free:
    de=dd
    x=Outtrap('line.',5,'NOCONCAT')
    Address TSO "FREE DD("dd")"
    x=Outtrap('OFF')
    x=Trace(#tr)
    mssg="ISRZ001"
    If line.0>0 Then Do
        zedlmsg=line.1"."
        Signal dis1
    End
    zedlmsg="DD("dd") freed."
    "TBDELETE &TABLE1"
    Signal gnx1

prcs:
    If volume/='' Then volser="VOLUME("volume")";Else volser=
    "LMINIT DATAID(DATA1) DATASET('&DSN') &VOLSER"
/*  "LMINIT DATAID(DATA1) DDNAME("ddname") ENQ(SHR)" volser           */
    If rc/=0 Then Do
        zedlmsg="Data set '"dsn"' NOT found."
        "SETMSG MSG(ISRZ001)"
        Signal dis1
    End
    "CONTROL DISPLAY SAVE"
    "&ACTION DATAID(&DATA1)"
    "CONTROL DISPLAY RESTORE"
    "LMFREE DATAID(&DATA1)"
    Signal gnx1

editmemb:
    "&ACT DATASET('&DSN(&LFIND)') &VOL"
    If quit='YES' Then msub=0
    If rc>8 Then "SETMSG MSG(&ZERRMSG)"
    Signal gnx1

browmemb:
    "CONTROL ERRORS RETURN"
    "BROWSE DATASET('&DSN(&LFIND)') &VOL"
    If quit='YES' Then msub=0
    If rc>4 Then "SETMSG MSG(&ZERRMSG)"
    Signal gnx1

gnx1:
    msub=msub-1;If msub<1 Then Signal dis1;Else Signal mus1
    Signal gnx1

/*  Build CLIST of all allocations                                    */

bldclist:
    fst='Y'
    Address TSO "NEWSTACK"
    Queue "PROC 0 TRACE"
    Queue "    CONTROL NOFLUSH NOMSG"
    Queue "/*  CONTROL CONLIST SYMLIST LIST MSG"
    Queue " "

    #tr=Trace('o')
    "TBTOP &TABLE1"
    Do WHILE rc=0
        "TBSKIP &TABLE1"
        If rc/=0 Then Iterate
        If zcmdr/='ALL' Then ,
          If SUBSTR(dd,1,3) = "ISP" | SUBSTR(dd,1,3) = "SYS" Then ,
            If DATATYPE(SUBSTR(dd,4,5)) = "NUM" Then ,
               dsn = "NULLFILE"
        If dsn /= "NULLFILE" Then Do
          If dd /= '  "  "  ' Then Do
            If fst='N' Then Do
              line = SUBSTR(" ",1,25)") SHR REU"
                Queue line
                Queue " "
            End
            Else fst='N'
            line = "    ALLOC DD("dd")"
            line = SUBSTR(line,1,22)" DA("
            line = SUBSTR(line,1,70)" +"
            Queue line
          End
          line = SUBSTR(" ",1,26)"'"dsn"'"
          line = SUBSTR(line,1,70)" +"
          Queue line
          ldsn = dsn
        End
    End
    line = SUBSTR(" ",1,25)") SHR REU"
    Queue line
    Queue ''

    "VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    Address TSO "DELSTACK"

    "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    umodel="ISPFANO1"
    "VPUT UMODEL SHARED"
    "EDIT DATAID(&DATAID) MACRO(UMODEL)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F(ZTEMPF)"

    null=nul#;bc='N';all=all#;ddname=
    Signal ref1

bldreal:
    "TBTOP &TABLE1"
    fst='Y'
    Address TSO "NEWSTACK"
    Queue '/'Centre(' REXX ',70,'*')'/'
/*--------------------------------------------------------------------*/
    Queue "Parse Upper ARG parm@"
    Queue " "
    Queue "If Index(' 'parm@' ',' MINUS ') > 0 Then pos = 'POS(MINUS)'"
    Queue "Else                                     pos = ''"
    Queue "If Index(' 'parm@' ',' TRACE ') > 0 Then trc = 'TRACE'"
    Queue "Else                                     trc = 'NO-TRACE'"
    Queue " "
    Queue "PARSE UPPER ARG . 'NOTIFY(' notify ')' ."
    Queue "If notify = '' Then notify = 'AUDIT'"
    Queue "notify = 'NOTIFY('notify')'"
    Queue " "
/*--------------------------------------------------------------------*/
    Queue 'Address TSO'
    Queue ' '
    Queue real_X
    Queue '"''DATA('''''userid'.$($'userid')'''')",'
    Queue '"INSTREAM",'
    Queue "notify trc pos""'"""
    Queue ' '
    Queue 'ISPF'
    Queue 'If rc = 16 Then LOGOFF'
    Queue 'Exit'
    Queue ' '
    Queue 'Instream:'
    Queue '* Free all the current allocations'
    Queue ')FREE *'
    Queue ' '
    Queue '* Fresh allocations:'

    x=Trace('o')
    rc=0
    Do While rc=0
        "TBSKIP &TABLE1"
        If rc/=0 Then Leave
        If zcmdr/='ALL' Then ,
          If SUBSTR(dd,1,3) = "ISP" | SUBSTR(dd,1,3) = "SYS" Then ,
            If DATATYPE(SUBSTR(dd,4,5)) = "NUM" Then ,
               dsn="NULLFILE"
        If dsn/="NULLFILE" Then Do
          If dd = '  "  "  ' Then dd=
          Queue Substr(dd,1,9) "'"dsn"'"
          ldsn=dsn
        End
    End
    Queue ')END'
    Queue ''

    "VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    Address TSO "DELSTACK"
    Address TSO "NEWSTACK"
    Queue '/*'Centre('ooo000OOOO000ooo',68,'-')'*/'
    Queue '/*'Copies(' ',68)'*/'
    Queue '/' ||,
'* This is the REXX routine to reallocate your current allocations.   */'
    Queue '/' ||,
'* Copy it into one of you private datasets where it can be tailored  */'
    Queue '/' ||,
"* to change your allocations as required.                            */"
    Queue '/' ||,
"* Don't forget to modify line 16 to reflect the name of the dataset  */"
    Queue '/' ||,
'* member it has been copied to.                                      */'
    Queue '/*'Copies(' ',68)'*/'
    Queue '/' ||,
'* These instructions will self destruct on entry of the END PF key.  */'
    Queue '/*'Copies(' ',68)'*/'
    Queue '/*'Copies('-',68)'*/'

    "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    umodelds='*'
    "VPUT UMODELDS SHARED"
    "EDIT DATAID(&DATAID) MACRO(UMODEL)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F(ZTEMPF)"
    Address TSO "DELSTACK"

    null=nul#;bc='N';all=all#;ddname=
    Signal ref1

xxxx:
    "TBCLOSE &TABLE1"
fre1:
    If mp Then Do
        x=$alklibd('Off')
        Address TSO ,
        "ALTLIB DEACTIVATE APPLICATION(CLIST)"
    End
    EXIT

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    zedsmsg=;#parm#=parm#
    Parse Upper VAR parm# parm#

    #tr=parse_cons('TRACE','R','O')
    If #tr='O' Then #tr=parse_cons('/TR','R','O',3)

    all=parse_cons('ALL','*','NULL',2)
    mp=parse_cons('MP',1,0)

    ddname=parse_varb('DD(','?')
    If ddname='?' Then ddname=parse_varb('DDNAME(','?')
    If ddname/='?' Then Parse VAR ddname ddname ')';Else ddname=
/*  If Index(ddname,'*')>0 Then Do;wname=ddname;ddname=;End;Else wname=*/

    find=parse_varb('F(','?')
    If find='?' Then find=parse_varb('FIND(','?')
    If find/='?' Then Parse VAR find find ')';Else find=

    imsg=Parse_cons('/NM')
    If ddname='' & Length(Word(parm#,1))<9 Then ddname=Word(parm#,1)
    If Index(ddname,'*')>0 Then Do;wname=ddname;ddname=;End;Else wname=

    Return 0

Parse_parms_ver='2.01'
/*--------------------------------------------------------------------*/
/* Parse variable 'parm#' for a constant 'mask'.                      */
/* Parameters:                                                        */
/*   1. Mask to search for. (May be truncated, refer parameter 4).    */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Positive return value. Value to return if mask found. Default */
/*      is 'Y'.                                                       */
/*   3. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   4. Mask qualifier with one of the following values:              */
/*      - Numeric length of the mask prefix.                          */
/*      - Literal 'W' to return the word that contain that mask (note */
/*        the word does not need to start with mask).                 */
/*      - Literal 'W#' to return the word numb that contain that mask */
/*        (note the word does not need to start with mask).           */
/* Notes:                                                             */
/*   1. For parameters 2 and 3:                                       */
/*      - Set to literal 'NULL' to return null values.                */
/*      - Set to '*' to return the mask as the negative/positive      */
/*        condition.  (Suggest using 'NULL' for the other value.)     */
/*                                                                    */
/*   2. Comma delimit to pad out if prior parameters are not          */
/*      supplied.                                                     */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=    ;If negr='NULL' Then negr=
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (Substr(maskl,1,1)='W') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do
        parm#=Delword(parm#,y#,1);If maskl='W#' Then posr=y#;Return posr
    End
    If maskl='W#' Then Return 0;Else Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' for a variable 'mask'.                        */
/* Parameters:                                                        */
/*   1. Mask to search for prefixing the word.                        */
/*      If the mask is matched, it WILL be removed out of the "parm#" */
/*      variable.                                                     */
/*   2. Negative return value. Value to return if mask is NOT found.  */
/*      Default is 'N'.                                               */
/*   3. Literal 'NUM' to check for numerics and return negative       */
/*      result if not numeric.                                        */
/* Notes:                                                             */
/*   1. For parameters 2:                                             */
/*      - If the prefix is found, the returned value is the full      */
/*        word less the prefix.                                       */
/*      - NULLs is a valid returned value.                            */
/*      - pass a unique negative result substitution to ensure mask   */
/*        missing (eg.  '?????').                                     */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
Parse_parms_End:
