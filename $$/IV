/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* IV: Inquire Vsam                                                   */
/*                                                                    */
/* Provide formatted VSAM information from LISTC output.              */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    If parm# Â¬= "" Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    Parse Upper VAR parm#,parm1,parparm2,parm3,parm4,parm5,parm6,parm7
    If Word(action,2) /= '' Then,
         Parse Upper VAR parm# parm1 parm2 parm3 parm4,parm5 parm6 parm7

    userid = Userid()
    spref  = Sysvar(Syspref)
    If userid = spref Then hlq = userid
    Else                   hlq = spref'.'userid
    hlq = $alkhlq()
    Call parse_parms
    If trace = Y Then TRACE r

    If parm#='' Then  "VGET (DSNAME F00) SHARED"
    Else Do;Parse VAR parm# dsname .;dsname=Strip(dsname,,"'");End
    If Sysdsn("'"dsname"'") /= 'OK' Then Do
        gc009 = Sysdsn("'"dsname"'")
        "SETMSG MSG(GC009)"
        Return 4
    End

    x = Listdsi("'"dsname"'")
    If sysdsorg /= 'VS' Then Do
        gc009 = "Dataset not a VSAM dataset."
        "SETMSG MSG(GC009)"
        Return 4
    End

vsamproc:
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
    xx = Time('s')
    dd = 'DD'xx
    dataset = hlq".$L"xx".TEMP"
    If Sysdsn("'"dataset"'") = 'OK' Then,
        Address TSO "ALLOC F("dd") DA('"dataset"') SHR REUSE"
    Else,
        Address TSO "ALLOC F("dd") DA('"dataset"') NEW SPACE(5,5)",
             "TRACKS" unitvol "CATALOG RECFM(V B) LRECL(125)",
             "BLKSIZE(0)"

    sinonly = 'Y'
    x = MSG('On')
    x = OUTTRAP('line.',5,'NOCONCAT')
    Address TSO "LISTC ENT('"dsname"') OFILE("dd") ALL"
    rc1 = rc
    x = MSG('Off')
    x = OUTTRAP('Off')
    If rc1 /= 0 Then Do
        gc009 = line.1
        "SETMSG MSG(GC009)"
        Signal scr2a
    End
/*  ndevt  = ''                                                       */
    volume = ''
    "VPUT (NDEVT) SHARED"
    "EDIT DATASET('&DATASET') MACRO(VSAMCRM1)"

    "VGET (VSAMVAR) SHARED"
    "VGET (&VSAMVAR) SHARED"

    catname= catalog
    zal1ex = dprim + iprim
    zal2ex = dsec + isec
    zalspc = datype
    stype  = Substr(zalspc,1,1)
    sdshro = dshro
    sishro = ishro
    orecsz = '('darecl dmrecl')'
    okeys  = '('dkeyl dkeyp')'
    dfree  = '('dfreei dfreea')'
    dsplit = '('dcaspl'/'dcispl')'
    isplit = '('icaspl'/'icispl')'

dmc1:
    If volume = '' Then volume = ovolume
    Else                devt = ndevt
    dataname = "'"dsname".DATA'"
    otype2 = '(DATA)'
    dshro = sdshro
    If index = 'Y' Then Do
        ishro    = sishro
        indxname = "'"dsname".INDEX'"
        otype3   = '(INDX)'
    End
    Else Do
        indxname = ''
        otype3   = ''
        ishro    = ''
    End
    If ass1 /= '' Then asscnt = asscnt
    csr2 = ''
    prot1 = 'OUTPUT'

    dsname  = "'"dsname"'"
    catname = "'"catname"'"

scr2a:
    zcmd = ''
    "DISPLAY PANEL(VSAMCRE1) CURSOR(&CSR2)"
    If rc /= 0 Then Signal exi1
    If ass1 = '' Then Signal exi1

scr3a:
    If e_ass /= 'Y' Then Do
        Call build_ass
        e_ass = 'Y'
    End
    zcmd = ''
    "DISPLAY PANEL(VSAMCREA)"
    If rc /= 0 Then Signal exi1
    Signal scr2a

exi1:
    Address TSO "FREE F("dd")"
    Address TSO "DELETE '"dataset"'"
    Exit

build_ass:
    @_ass = ass1 ass2 ass3 ass4 ass5 ass6 ass7 ass8 ass9 ass10
    i = 1
    x = Msg('On')
    x = Outtrap('line.',500,'NOCONCAT')
    Do Forever
        Parse VAR @_ass ass @_ass
        Parse VAR ass 'AIX------' dsname .
        x = Listdsi("'"dsname"' NORECALL")
        x =  '00'x || Substr(ass,1,47) sysvolume,
             '      ' sysunit
        Interpret 'ass'i '= x'
        Address TSO "LISTC ENT('"dsname"')"
        Do j=1 To line.0
            Parse VAR line.j v1 .
            If v1 = 'PATH' Then Do
                i = i +1
                Parse VAR line.j . . path
                x = Listdsi("'"path"' NORECALL")
                x =  '00'x || Substr('PATH----'path,1,47) sysvolume,
                     '      ' sysunit
                Interpret 'ass'i '= x'
                Leave
            End
        End
        If @_ass = '' Then Leave
        i = i +1
    End
    x = Msg('Off')
    x = Outtrap('Off')
    asscnt = i

    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:

    trace = parse_cons('TRACE')

    px = parse_varb('/B','N')
    If px = '' Then px = default

    Parse VAR parm# parm# parm#_rest

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
