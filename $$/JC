/******************************** REXX ********************************/
JC_ver='1.14'
/*--------------------------ooo000OOOO000ooo--------------------------*/
ms=mark(1)  /*

    &TOD. &CNAME..

    JC: JobCard generator [ V&JC_VER. ].

    The purpose of this routine is to generate a jobcard to site
    standards.

    Parameters:
      Positional:
        1. Execution Class. Default is "&DEF_EX.".
        2. Held Class. Default is "&DEF_HD.".
        3. Jobname suffix. Default is "&DEF_ID.".
      To change these defaults, edit member '&XCMD.' to site standards.
      Keywords:
        /A(dd,member)  .....<- Not yet developed....
           - A member in "dd" concatenation to add after the jobcard.
             If only one parameter is passed, SYSEXEC is assumed as the
             DDNAME and the sole parameter will be the member.
             Handy for static comments. (This feature required REXX
             routine $DDALLOC.)
        /BB- MSGCLASS on the JOB card is to be set to the Bit Bucket
             class "&DEF_BB.".
        /CD- Contact details. For inclusion after 'JCL From:' extracted
             from member 'JC$' from userid. Update 'JC$' or take
             personalised copy.  Original details, if they exist, will
             not be automatically removed with the next invocation of
             this parameter.
        /F - Use macro 'JF' (if available) to format JCL. Refer to 'JF'
             doco following this (if available).
        /IJ{(jobcard)}
           - Import JOBcard from PDS being processed.  Will perform the
             "replace old" process befor copying member "jobcard".
             Default member name is "JOBCARD".
        /JF
           - Generate 'JCL from:' doco.  Similar to '/SF' option without
             looking to update the "LIB: dataset(member)" entry.  This
             will reverse any '/CD' request.
        /LR
           - Long Running task. Will use parameter returned from $ALKJC
             for "def_el".
        /M - Use the member name as the jobid. This will overrite all
             other jobid options.
        /MAIN
           - Use a //*MAIN card from $ALKJC routine.                          */
        /N - Generate job card statements as notelines and leave
             original details for manual processing.
        /NF | /NJF
           - Do NOT generate 'JCL from:' doco. (This is the default.)
        /NN- Do NOT generate 'NOTIFY=' jobcard parameter.
        /P - Program name of format '/P(prog-name)'. Imbedded spaces
             are not permitted and may distress the parsing process
             for other parameters
        /Q - Queue the basic JCL and return to caller with queued
             details. No 'JCL from:' doco created.
        /R - Update the JCL's doco "JCL From: 'dataset(member)' details
             only for moved/cloned JCL.
        /SF- Update the JCL's doco "LIB: dataset(member)". The original
             line will be inserted above in case this was not your
             desire and you can delete the new line and "MD" the
             noteline.  For software factory only. This option will
             prevent the "JCL From:" doco being created.
        /SLR
           - Super Long Running task. Will use parameter returned from $ALKJC
             for "def_es".
        /UC- Keep Upper Case ON. By default CAPS=OFF will be set to
             permit lower case for documentation.
        /9 - Set 'LINES=9999' parameter on the JOB card.
        /* - Ensure JCL is executed on the current system. Places a           */
                "/*JOBPARM SYSAFF=sysid"                                      */
             control card after the JOB card.

    Features:
      1. Insert a jobcard at the start of the member.
      2. Insert the following site default account details:
            &ACCT.
      3. Insert the JCL source as a comment.
      4. Remove any previous jobcard and details.
      5. Intercept and recreate (the first only) JES2 statement
         immediately following the last line of the jobcard.
      6. If a jobcard exists, and no jobname suffix is supplied the
         original id will be appended based on truncation of the length
         of the user's userid.

    Packaging. Those marked with an 'o' seperator are optional:
      REXX:
        $ALKACCT o Site account customiser.
        $ALKJC   o Site default jc details customiser.
        $ALKJCPG o Program name customiser called by $ALKJC.
        $DDALLOC o Additions.
        $WHOAMI  o Personaliser.
        JC       - This driver.
        JC$      o Member to provide customised personal info.
        JF       o JCL formatter.

*/;me=mark(-1)
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Parse Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

init:
    l9999=1                             /* LINES=9999 permitted (1/0) */
    chgchar='&'                             /* Change character       */
    parm@=parm#
    If Wordpos('TRACE',parm#)>0 Then Trace r
    zedsmsg=
    If ima_macro Then Address ISREDIT

    If l9999 Then l9prefix=;Else l9prefix=' '
    job_lines=l9prefix',LINES=9999';lines=

    def_ex='A'                              /* Default execution class*/
    def_hd='X'                              /* Default hold class     */
    def_id='A'                              /* Default job name suffix*/
    def_ti=1440                             /* Default time           */
    def_ac='(Account)'
    uid=Userid();memb=
    cname='there';sname=;type=;snamex=;pname=;lin#=1
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))

    v1='def_ex def_hd def_ac def_bb def_ti def_el'
    Signal On Syntax Name err_ret_1
    v2=$alkjc(v1);Interpret "Parse var v2" v1
err_ret_1:
/*  cond='COND=(0,LT)';time='TIME='def_ti','                          */
    cond='COND=(4,LT)';time='TIME='def_ti',';regnsz='REGION=0M,'
    Parse SOURCE . . xcmd .
    Signal On Syntax Name err_ret_2
    name=$Whoami();Parse Var name cname sname;snamex='-'sname
err_ret_2:
    Signal On Syntax Name err_ret_3
    acct=def_ac;acct=$alkacct()
err_ret_3:
    Signal Off Syntax

    Parse Upper VAR parm# parm#
    If Wordpos('?',parm#)>0 Then Signal help_me

    If Wordpos('/N',parm#)>0 Then Do
        nl=1;type='NOTELINE';parm#=Delword(parm#,Wordpos('/N',parm#),1)
    End;Else nl=0
    If Wordpos('/NN',parm#)>0 Then Do
        notify=0;parm#=Delword(parm#,Wordpos('/NN',parm#),1)
    End;Else notify=1
    If Wordpos('/*',parm#)>0 Then Do
        sysaff=1;parm#=Delword(parm#,Wordpos('/*',parm#),1)
    End;Else sysaff=0
    If Wordpos('/R',parm#)>0 Then Do
        cr=1;parm#=Delword(parm#,Wordpos('/R',parm#),1)
    End;Else cr=0
    If Wordpos('/MAIN',parm#)>0 Then Do
        main=1;parm#=Delword(parm#,Wordpos('/MAIN',parm#),1)
    End;Else main=0
    If Wordpos('/SF',parm#)>0 Then Do
        sf_doco=1;parm#=Delword(parm#,Wordpos('/SF',parm#),1)
    End;Else sf_doco=0
    If Wordpos('/F',parm#)>0 Then Do
        jf=1;parm#=Delword(parm#,Wordpos('/F',parm#),1)
    End;Else jf=0
    If Wordpos('/M',parm#)>0 Then Do
        umn=1;parm#=Delword(parm#,Wordpos('/M',parm#),1)
    End;Else umn=0
    If Wordpos('/Q',parm#)>0 Then Do
        quit=1;parm#=Delword(parm#,Wordpos('/Q',parm#),1)
    End;Else quit=0
    If Wordpos('/CD',parm#)>0 Then Do
        contact=1;parm#=Delword(parm#,Wordpos('/CD',parm#),1)
    End;Else contact=0
    If Wordpos('/9',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/9',parm#),1)
        job_lines=',LINES=9999'
    End
    If Wordpos('/BB',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/BB',parm#),1)
        def_hd=def_bb
    End
    If Wordpos('/LR',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/LR',parm#),1)
        def_ex=def_el
    End
    If Wordpos('/SLR',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/SLR',parm#),1)
        def_ex=def_es
    End
    If Wordpos('/JF',parm#)>0 Then Do       /* After "/CD" test       */
        JCLf=1;parm#=Delword(parm#,Wordpos('/NJ',parm#),1)
    End;Else Do;JCLf=1;contact=0;End
    If Wordpos('/NF',parm#)>0 Then Do       /* After "/CD" test       */
        JCLf=0;parm#=Delword(parm#,Wordpos('/NF',parm#),1)
        contact=0
    End
    Else If Wordpos('/NJF',parm#)>0 Then Do /* After "/CD" test       */
        JCLf=0;parm#=Delword(parm#,Wordpos('/NJF',parm#),1)
        contact=0
    End
    If Wordpos('/UC',parm#)>0 Then Do
        caps#='ON';parm#=Delword(parm#,Wordpos('/UC',parm#),1)
    End;Else caps#='OFF'
    If Index(parm#,'/P(')>0 Then Do
        Parse VAR parm@ . '/P(' pname ')'
        Parse VAR parm# p_1 '/P(' . ')' p_2
        parm#=Strip(p_1) Strip(p_2)
    End
    If Index(parm#,'/IJ(')>0 Then Do
        Parse VAR parm@ p_1 '/IJ(' job_card ')' p_2
        If job_card='' Then Parse VAR parm@ p_1 '/ij(' job_card ')' p_2
        If job_card='' Then Parse VAR parm@ p_1 '/Ij(' job_card ')' p_2
        If job_card='' Then Parse VAR parm@ p_1 '/iJ(' job_card ')' p_2
        parm#=Strip(p_1) Strip(p_2)
    End
    Else Do
        job_card=
        If Wordpos('/IJ',parm#)>0 Then Do
            parm#=Delword(parm#,Wordpos('/IJ',parm#),1)
            job_card='JOBCARD'
        End
    End
    "(DSN)=DATASET"
    If job_card/='' Then Do
        If Sysdsn("'"dsn"("job_card")'")/='OK' Then Do
            zedlmsg='Member "'job_card'" not found. Cannot use ''/I''',
                    'feature.'
            Address ISPEXEC "SETMSG MSG(ISRZ001)"
            Return 8
        End
    End
/*  Not yet developed.....                                            */
/*  If Index(parm#,'/A(')>0 Then Do                                   */
/*      xx=Index(parm#,'/A(');yy=$wordat(parm#,xx)                    */
/*      parm#=Delword(parm#,Wordpos(yy,parm#)                         */
/*      Parse VAR yy '(' imemb ')'                                    */
/*      am=1                                                          */
/*  End;Else am=0                                                     */

    Parse Upper VAR parm# id_s x_cl h_cl

    "(status)=USER_STATE";"(memb)=MEMBER";"CURSOR=1 0"
    "(last)=LINENUM .ZLAST"
    "F '/*JOBPARM' 1 FIRST"
    If rc=0 Then Do
        "(line)=LINE .ZCSR"
        If Index(line,'L=')>0 Then Nop
        Else If Index(line,'L=')>0 Then Nop
             Else lines=job_lines
    End
    Else lines=job_lines
    If last=0 Then Do
        where="LINE_AFTER";line1=
    End
    Else Do
        where="LINE_BEFORE";"(line1)=LINE 1"
    End
    If memb='' Then memb='0001';memx=memb
    If x_cl='' Then x_cl=def_ex
    If h_cl='' Then h_cl=def_hd
    If id_s='' Then Do
        If Word(line1,2)='JOB' Then Do
            Parse VAR line1 '//' ouid .
            id_s=Substr(ouid,Length(uid)+1)
        End
    End
    If id_s='' Then id_s=def_id
    If umn Then jobname=memb;Else jobname=Substr(uid||id_s,1,8)

    If pname='' Then pname=memb||snamex
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(pname);If x/='' Then pname=x
error_off_alkjcpg:Signal off Syntax

    j.1="//" || jobname "JOB" acct || ",'"pname"',"
    j.2="//             CLASS="x_cl","cond","
    j.3="//             MSGCLASS="h_cl","time||regnsz
    If notify Then j.4="//             NOTIFY=&SYSUID"lines
    Else j.4="//             NOTIFY="lines
    j.0=4
#tr=Trace('o')
    If main Then Do
         main=$alkjc('MAIN')
         j.5=main;j.0=j.0+1
    End
    Else If sysaff Then Do;j.5="/*JOBPARM SYSAFF="sysid;j.0=j.0+1;End
    ref#="//*  JCL from: '"
    ref$=dsn || "(" || memb || ")"
    refi=ref# || ref$
    If quit Then Do
        Do i=1 To j.0;Queue j.i;End;Queue '//*';Return 0
    End

    If cr Then Do
        "F '"ref#"' FIRST"
        If rc=0 Then Do
            "(line)=LINE .ZCSR"
            "LINE .ZCSR=(refi)"
            "LINE_BEFORE .ZCSR=NOTELINE (line)"
        End
        Signal exi1
    End
    refnfd=del_old_reference()
    If refnfd Then Call remove_old_jobcard
    y=j.0+1
    "(caps1)=CAPS"
    If ¬sf_doco Then Do
        If JCLf Then Do
            "CAPS="caps#;j.y="//*";y=y+1
            If caps#='ON' Then refi=Translate(refi)
            j.y=refi;y=y+1
        End
        If contact Then Do
            Parse Value JC$() With '//*' xxx;Do While xxx/=''
                Parse VAR xxx xx '//*' xxx
                If caps#='ON' Then xx=Translate(xx)
                j.y='//*'xx;y=y+1
            End
        End
    End
    Else Do
        "F ' LIB:' FIRST"
        If rc=0 Then Do
            "(line)=LINE .ZCSR"
            If Word(line,1)='//*' Then Do
                xx=Index(line,' LIB:')
                linex=Substr('//*',1,xx)'LIB:' ref$
                "LINE .ZCSR=(linex)"
                "LINE_BEFORE .ZCSR=NOTELINE (line)"
            End
        End
    End
    j.y="//*"
    If Word(line1,2)='JOB' Then,
       If nl Then Do;y=y+1;j.y=Substr('//*****\|/ Delete ',1,71,'*');End
    j.0=y
    "SCAN OFF"
    If job_card='' Then Do
        Do i=1 To j.0;x=l_d(j.i);End
    End
    Else "COPY" job_card "BEFORE 1"
    If \nl Then Do
        xx=Substr('//*****/|\ Changed ',1,71,'*')
        "LINE_AFTER" j.0"=NOTELINE (xx)"
        Do i=1 To linei.0
            xx=linei.i;"LINE_BEFORE 1=NOTELINE (xx)"
        End
        xx=Substr('//*****\|/ Changed ** from /|\ ',1,71,'*')
        "LINE_BEFORE 1 =NOTELINE (xx)"
    End
    "SCAN ON"
    If jf Then Do
        "(last)=LINENUM .ZLAST"
        "JF" 1','last+0
    End

exi1:
   "CAPS=(caps1)";"USER_STATE = (status)"
   "F 'egabrag_ton_dnuof' 1 FIRST"

   Exit

remove_old_jobcard:
    lin@=1;linei.0=0
    If Word(line1,2)/='JOB' Then,
        If Word(line1,2)/='JOBCARD' Then Return 0
    cont=0
    Do Forever
        lin@=lin@+1;"(line)=LINE" lin@
        If cont & Substr(line,1,3)='//*' Then Iterate
        If Lastpos(',',Word(line,2))/=Length(word(line,2)) Then Leave
    End
    "(line)=LINE" lin@+1
    If Substr(line,1,2)='/*' Then Do
        j.0=j.0+1;x=j.0;j.x=line;lin@=lin@+1
    End
    linei.0=lin@
    If ¬nl Then Do
        Do i=1 To lin@
            "(xx)=LINE" i;linei.i=xx
        End
        linei.0=i-1
        "CURSOR="lin@;"DEL ALL NX .ZFIRST .ZCSR"
        zedlmsg='Old jobcard found and removed.'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
    End
    Else Do
        xx=Substr('//*****/|\ Delete ',1,71,'*')
        "LINE_AFTER" lin@"=NOTELINE (xx)"
    End
    Return 0

del_old_reference:
    'F "'ref#'" 1 FIRST'
    If rc/=0 Then Return 1
    "(lin@)=LINENUM .ZCSR";lin@=lin@+1;"(line)=LINE" lin@
    If Strip(Substr(line,1,72)) = '//*' Then Do
        "LABEL" lin@"=.JCLAST"
        "F '/*' 1 .ZFIRST .JCLAST FIRST"
        If rc=0 Then Do
            "(line)=LINE .ZCSR"
            x=j.0+1;j.x=line;j.0=x
        End
        If \nl Then Do
            Do i=1 To lin@
                "(xx)=LINE" i;linei.i=xx
            End
            linei.0=i-1
            "DELETE ALL NX .ZFIRST .JCLAST"
        End
        Else Do
            xx=Substr('//*****/|\ Delete ',1,71,'*')
            "LINE_AFTER .JCLAST=NOTELINE (xx)"
        End
        Return 0
    End
    Return 1

Help_me:
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<3  Then tod='Hello night-owl'
        When hh<12 Then tod='Good morning'
        When hh<18 Then tod='Good afternoon'
        Otherwise tod='Good evening'
    End
    If ima_macro Then Do
        "ISREDIT (caps)=CAPS";"ISREDIT CAPS =OFF"
        "(dl1,dl2)=DISPLAY_LINES";If dl1>1 Then dl1=dl1+1
    End
    x=pit(Centre(' ooo000OOOO000ooo ',79,'*'))
    Do i=ms To me
        line=Strip(Sourceline(i),'t')
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1||'var'||p2'
        End
        x=pit(line)
    End
    x=pit(Centre(' End ',79,'*'));x=pit(' ')
    If ima_macro Then "CAPS=(caps)"
    "JF ?"
    Exit
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
pit:xx=Arg(1)
    If ima_macro Then "LINE_BEFORE" dl1"=NOTELINE (xx)";Else Say xx;Return 0
l_d:xx=Arg(1);If last>0 Then wherex=where lin#;Else wherex=where '.ZLAST'
    wherex"=&TYPE (xx)";If \nl Then lin#=lin#+1;Return 0
