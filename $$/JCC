/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Macro to convert more conventional condition code to the twisted   */
/* idiotic IBM format.                                                */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     JCC      - Macro driver.                                       */
/*                                                                    */
/*   Panels:                                                          */
/*     Instream.                                                      */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    hlq=$alkhlq()
    Parse Upper VAR parm# parm#
    If Wordpos(Word(parm#,1),'HELP ? /?')>0 Then Signal Help_me

    Call parse_parms
    x=Trace(#tr)

    Address ISREDIT;"(STATUS)=USER_STATE";"(caps)=CAPS";"CAPS=OFF"
    "(last)=LINENUM .ZLAST"

    "PROCESS RANGE C M";"(cmd)=RANGE_CMD"
    If cmd='C' Then Do
        range='.ZFRANGE .ZLRANGE';all='Y'
    End
    Else Do
        If all='Y' Then "CURSOR=1 0"
        "(zfrange)=LINENUM .ZFRANGE";"(zlrange)=LINENUM .ZLRANGE"
        range='.ZFIRST .ZLAST'
    End

    "X ALL"

    Do Forever
        "FIND 'COND='" range
        If rc/=0 Then Leave
        "(line)=LINE .ZCSR";"(cl#)=LINENUM .ZCSR"
        Select
            When (Substr(line,1,2)/='//') Then re_ex='Y'
            When (Substr(line,3,1)='*')   Then re_ex='Y'
            Otherwise                          re_ex='N'
        End
        If re_ex='Y' Then Do
            "XSTATUS" cl#"=X"
            Iterate
        End
        p3=
        Parse VAR line p1 'COND=' ocond p4
        ccl#=cl#
        If Substr(ocond,1,2) = '((' Then Do
            If Index(ocond,'))')=0 Then Call get_rest_of_cond
            Parse VAR ocond . '((' ocond '))' p3
        End
        Else Parse VAR ocond . '('  ocond ')'  p3
        ocond = '('ocond'),'

        #c=0;ncond=;errm=
        Do Forever
            Parse Var ocond '(' icond '),' ocond
            PARSE VAR icond step ',' cond ',' step_rc
            If Datatype(step_rc) = 'NUM' Then Do
                Select
                    When (cond='EQ') Then oper='NE'
                    When (cond='NE') Then oper='EQ'
                    When (cond='LT') Then oper='LE'
                    When (cond='GT') Then oper='GE'
                    When (cond='LE' | cond='EL' | cond='NG') Then oper='LT'
                    When (cond='GE' | cond='EQ' | cond='NL') Then oper='GT'

                    Otherwise Do
                       errm="  *** Invalid operator found. Already",
                            "converted perhaps ??? ***"
                       Leave
                    End
                End
                If step='*' Then icond=step_rc','oper
                Else icond=step_rc','oper','step
            End
            ncond=ncond || '('icond'),'
            If ocond='' Then Leave
            c#=1
        End
        ncond=Substr(ncond,1,Length(ncond)-1)
        If c#=1 Then ncond='('ncond')'
        nline=Strip(p1 || 'COND=' || ncond || p3 p4)

/*--------------------------------------------------------------------*/
/* Make change '/C' requested                                         */
/*--------------------------------------------------------------------*/
        If line_type='' Then Do
            Do i=cl# To ccl#
                "(linx)=LINE" i;linx = '//*'Substr(linx,4);"LINE" i"=(linx)"
            End
        End
        Else ccl#=cl#

/*--------------------------------------------------------------------*/
/* Place new values as comment lines                                  */
/*--------------------------------------------------------------------*/
        Do Forever
            If Length(nline)<72 Then Leave
            xx=Lastpos('),',nline,72) +1
            nlinex=Substr(nline,1,xx)
            nline=Substr('//',1,ccc-1)Substr(nline,xx+1)
            "ISREDIT" line_pos ccl#"="line_type "(nlinex)"
            last=last+1
            If line_type='' Then ccl#=ccl# +1
        End
        "ISREDIT" line_pos ccl#"="line_type "(nline)"
        last=last+1
        "CURSOR="ccl#+1 73

        If all/='Y' Then Leave
    End

    "CURSOR=1 0";"CAPS=(caps)";"USER_STATE=(sttus)"

ext1:Exit

/*--------------------------------------------------------------------*/
/* Get continuation lines to COND= statement                          */
/*--------------------------------------------------------------------*/
get_rest_of_cond:
    ccc=0                                   /* Cond continuation col  */
    Do ccl#=cl#+1 To last
        "(linx)=LINE" ccl#
        "XSTATUS" ccl#"=NX"
        If Substr(linx,1,2)/='//' Then Iterate
        If Substr(linx,3,1)='*'   Then Iterate
        Parse VAR linx . ccond .
        If ccc=0 Then ccc=Index(linx,ccond)
        ocond=ocond || ccond
        If Index(ocond,'))')>0 Then Leave
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    #tr=parse_cons('TRACE','R','O')

    all = parse_cons('ALL','Y','NULL')
    If all = '' Then all = parse_cons('/A')

    x = parse_cons('/C')
    If x = 'Y' Then Do
        line_pos  = 'LINE_AFTER'
        line_type = ''
    End
    Else Do
        all       = 'Y'
        line_pos  = 'LINE_BEFORE'
        line_type = 'NOTELINE'
    End

    Parse VAR parm# parm# parm#_rest

    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8
/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
/*--------------------------------------------------------------------*/
/* Generate tutorial on demand.                                       */
/*--------------------------------------------------------------------*/
Help_me:
    dsn = hlq'.TEMP1'

    forchar.0 = 2
    chgchar.0 = '`'
    forchar.1 = '`'
    subchar.1 = '/'
    forchar.2 = '~'
    subchar.2 = 'HJCC'
    #panel1   = 1                           /* First panel number     */
    #panels   = 5                           /* Number of panels       */

    x   = Msg('Off')
    Address TSO
    "DELETE '"dsn"'"
    dd  = 'IA'Time('s')
    "ALLOC DA('"dsn"') NEW CATALOG CYL SPACE(10,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(2)",
       "RECFM(F B) REU"
    "FREE  DA('"dsn"')"

    mempref = subchar.2
    Do i=#panel1 To #panels
        member = mempref||i
        Interpret "Call make_mem_"i
        Call build_queue
    End


    Address ISPEXEC
    "LIBDEF ISPPLIB DATASET ID('&DSN') STACK"
    "SELECT PGM(ISPTUTOR) PARM(&MEMPREF.1)"
    "LIBDEF ISPPLIB"

    Address TSO "DELETE '"dsn"'"

    Exit


/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    #i_backup = i
    #j_backup = j
    Do i=n_st To n_en
        If forchar.0 > 0 Then Do
            If Substr(Sourceline(i),1,1) = chgchar.0 Then Do
                line = Substr(Sourceline(i),2)
                DO j=1 To forchar.0
                    line = $cstring(line,forchar.j,subchar.j)
                End
                Queue line
            End
            Else Queue Sourceline(i)
        End
        Else Queue Sourceline(i)
    End
    Queue ''
    i = #i_backup
    j = #j_backup

    "ALLOC F("dd") DA('"dsn"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    "DELSTACK"

    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Change string                                                      */
/*--------------------------------------------------------------------*/
$cstring:
    PArse ARG string,fstrg,tstrg,start,rep
    Numeric Digits 10
    If rep = '*' Then rep = 9999999999
    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 1
    If Datatype(start) /= 'NUM' | Index(start,'.') > 0 Then start = 1
    fl = Length(fstrg)
    tl = Length(tstrg)
    Do While rep > 0
        start = Index(string,fstrg,start)
        If start = 0 Then Leave
        string = Delstr(string,start,fl)
        string = Insert(tstrg,string,start-1,tl)
        rep = rep -1
        start = start + tl
    End
    Return string

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(2)
/*
)ATTR
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND (\\)
@Tutorial\-\ JCL Condution Code Generation \-\Tutorial
%COMMAND ===>_ZCMD
%
+The@JCC+command is used to generate the idiotic IBM condition code tests from
+positive statements.
+
+IBM syntax requires the test to be false to execute.@JCC+will permit the user
+to specify the condition(s) under which the step IS to be executed.
+
+If compound tests are to be made, all conditions must be true for the execution
+of the step.
+
+Do not split condition commands over multiple lines.
+
+Ensure sufficient space on the line for expansion.
+
+
+\ \(Syntax next screen.)\ \
)INIT
)PROC
`   &ZCONT = ~2
`   &ZUP   = ~1
)END
*/
    n_en = mark(-2);Return 0
make_mem_2: n_st = mark(2)
/*
)ATTR
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND (\\)
@Tutorial\-\ JCL Condution Code Generation \-\Tutorial
%COMMAND ===>_ZCMD
%
+
+The syntax for the command is a follows:
+
@  COND=(cond1,cond2...condn)
+
+  where the format of@cond1+is as follows:
+
@    (step#|*,opcode,value)
+
+    where:
+
@      step# +- is the step to be tested or@*+indicating any step.
@      opcode+- which consists of one of the following operators@EQ, NE, LT, GT,
@               LE, GE.
@      value +- a 1 to 2 digit condition code value to test against.
+
+\ \(Continued next screen.)\ \
)INIT
)PROC
`   &ZCONT = ~3
`   &ZUP   = ~1
)END
*/
    n_en = mark(-2);Return 0
make_mem_3: n_st = mark(2)
/*
)ATTR
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND (\\)
@Tutorial\-\ JCL Condution Code Generation \-\Tutorial
%COMMAND ===>_ZCMD
%
+Any condition code statements with an@*+in column 3 will be ignored. Condition
+code statements not adhering to the@JCC+command's syntax will be flagged and
+ignored.
+
+IBM formatted COND statements will attemt to be translated. However, will
+probably fail and will be flagged as an error and ignored.
+
+Do not mix IBM format and@JCC+format on the same statement, as non@JCC+format
+codes will terminate translation for that line and flag it as an error.
+
@ONLY/EVEN+conditions will be ignored and cannot be included in@JCC+formats.
+
+Only the first condition code statement encountered will be processed unless a
+parameter of@/A+or@ALL+is used.
+
+\ \(Continued next screen.)\ \
)INIT
)PROC
`   &ZCONT = ~4
`   &ZUP   = ~2
)END
*/
    n_en = mark(-2);Return 0
make_mem_4: n_st = mark(2)
/*
)ATTR
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND (\\)
@Tutorial\-\ JCL Condution Code Generation \-\Tutorial
%COMMAND ===>_ZCMD
%
+
`+The original statement will be converted to a@NOTELINE+with a@/`*+and the
+expanded line will be inserted immediately after the original line.
+If you want the original line (commented) retained in the JCL rather than a
+temporary NOTELINE, pass a parameter of@/K+or@KEEP+.
+If you don't want to the original presented as a NOTELINE, pass a parameter of
@/R+or@REP+.
+
+If the expanded condition statement extends over column 71 you will be notified
+and no further translation will proceed.
+
+To test the outcome of JCC processing, use a parameter of@/T+or@TEST+.  This
+will display all conversions as NOTELINES only. The@/A+parameter is still
+required to process all COND statements.
+
+
+\ \(Examples next screen.)\ \
)INIT
)PROC
`   &ZCONT = ~5
`   &ZUP   = ~3
)END
*/
    n_en = mark(-2);Return 0
make_mem_5: n_st = mark(2)
/*
)ATTR
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
  # TYPE(TEXT) INTENS(HIGH) COLOR(GREEN)
)BODY EXPAND (\\)
@Tutorial\-\ JCL Condution Code Generation \-\Tutorial
%COMMAND ===>_ZCMD
%
+
+Examples:
+
+You wish to exeute step 2 only if step 1 teminated with a condition code of 4
+or less:
#  //STEP2 EXEC PGM=.....,COND=(STEP1,LE,4)
+
+This would be expanded to:
#  //STEP2 EXEC PGM=.....,COND=(4,GT,STEP1)
+
+You wish to exeute step 6 in some JCL only if steps 3 had a return code of 4
+and step 5 had a code of 8 or greater, then code the following JCL statement
+prior to executing the@JCC+command:
#  //STEP6 EXEC PGM=....,COND=((STEP3,EQ,4),(STEP5,GE,8)),REGION=4096K
+
+This would be expanded to:
#  //STEP6 EXEC PGM=....,COND=((4,NE,STEP3),(8,GT,STEP5)),REGION=4096K
+
+
+
+\ \(End of instructions.)\ \
)INIT
)PROC
`   &ZCONT = ~1
`   &ZUP   = ~4
)END
*/
    n_en = mark(-2);Return 0

