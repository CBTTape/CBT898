/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/*  JCL: JCL generator.                                               */
/*                                                                    */
/*  Macro to wrap JCL around member being edited.                     */
/*                                                                    */
/*  For available options issue command "JCL ?" in a view/edit        */
/*  session.                                                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
JCL:JCL_ver='1.08'
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    If ima_macro Then "ISREDIT (status)=USER_STATE"
    Else Do
        zedlmsg="This facility can only be used in an edit/view session.",
                "Do you know what you are doing, or just think you do?"
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    zedsmsg=
    Parse Upper VAR parm# parm1 .


    Drop vio
    vio='SYSDA'
    suff#='BACKUP';unit='SYSALLDA';userid=Userid();w_type='NOTELINE '
    volser=
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))

    If Wordpos(parm1,"HELP ?")>0 Then Signal Help_me
    Call parse_parms
    Call mark_dsn

    Signal On Syntax Name ret_syntax_1
    acct='MISSING';acct=$alkacct()
ret_syntax_1:
    Signal Off Syntax

    bll="//*"SUBSTR(' ',1,68,' ')"*"
    asl="//"SUBSTR('*',1,70,'*')

    Select
        When jcl="IEFBR14" Then Call iefbr14_JCL
        When jcl="IEBCOPY" Then Call iebcopy_JCL
        When jcl="SMPE"    Then Call smpe_JCL
        When jcl="DELETE"  Then Call IDCAMS_D
        When ren="Y"       Then Call rename_JCL
        When jcl="DFDSS"   Then Call dfdss_JCL
        When jcl="CLONE"   Then Call dfdss_JCL
        When jcl="ALIAS"   Then Call IDCAMS_ALIAS

        Otherwise Do
            zedlmsg="Missing parameter. (IEBCOPY, no others)"
            Signal erx1
        End

    End
    Signal ext1

erx1:
    "ISPEXEC SETMSG MSG(ISRZ001)"

ext1:
    If ima_macro Then "ISREDIT USER_STATE=(status)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    Parse Upper VAR parm# parm#
    smpea = "REJ"

    rename = parse_cons('/NR','N','Y')     /* For CLONE (def rename)  */

    rnVSAM = parse_cons('/VS',1,0)         /* For VSAM component renam*/
    rnNon_VSAM=parse_cons('/NVS',1,0)      /* For IDCAMS renam        */

    w_type = parse_cons('/NN','NULL','NOTELINE')

    dsnlst = parse_cons('/DL','Y','N')     /* For CLONE (meber list)  */

    ip=parse_cons('/IP',1,0,2)             /* IEHPROGM for rename     */

    enq=parse_cons('ENQ')

    trace=parse_cons('TRACE')

    ren=parse_cons('RENAME')
    If ren='N' Then ren=parse_cons('/R')

    suff=parse_varb('S=',suff#)
    If suff=suff# Then Do
        suff=parse_varb('S(',suff#)
        If suff/=suff# Then Parse VAR suff suff ')'
    End

    If parse_cons('LIST')='Y' Then smpea='LIS'
    Else Do
        mask='REC'
        If parse_cons() = 'Y' Then smpea = 'REC'
        Else Do
            mask = 'ACC'
            If parse_cons() = 'Y' Then smpea = 'ACC'
            Else Do
                mask = 'APP'
                If parse_cons() = 'Y' Then smpea = 'APP'
                Else Do
                    mask = 'REJ'
                    If parse_cons() = 'Y' Then smpea = 'REJ'
                    Else Do
                        mask = 'LIS'
                        If parse_cons() = 'Y' Then smpea = 'LIS'
                    End
                End
            End
        End
    End

/*--------------------------------------------------------------------*/
/* The last parameter must be the JCL required.                       */
/*--------------------------------------------------------------------*/
    Parse VAR parm# jcl parm#_rest

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
/*--------------------------------------------------------------------*/
/* Place IEBCOPY JCL around remaining members created by this         */
/* command.                                                           */
/*--------------------------------------------------------------------*/
jobcard_JCL:
    Address TSO
    "NEWSTACK"
    v1='def_ex def_hd def_ac'
    Interpret "Parse Value $alkjc(v1) With" v1
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(jcl);If x/='' Then jcl=x
error_off_alkjcpg:Signal off Syntax

    Queue "//"userid"C JOB "def_ac",'"jcl"',"
    Queue "//   MSGCLASS="def_hd",CLASS="def_ex","
    Queue "//   NOTIFY=&SYSUID,MSGLEVEL=(1,1)"
    If xeq_let='Y' Then Queue '/*XEQ' sysid
    Queue '/*JOBPARM SYSAFF='sysid
    Queue "//*"
    Return 0


/*--------------------------------------------------------------------*/
/* Place IEFBR14 JCL around remaining members created by this         */
/* command.                                                           */
/*--------------------------------------------------------------------*/
iefbr14_JCL:
    Call jobcard_JCL
    Queue "//WHATEVER EXEC PGM=IEFBR14"
    Queue "//*"
    "ISREDIT (last)=LINENUM .ZLAST"
    Do i=1 By 1 Until i>=last
         "ISREDIT (line)=LINE &I"
        Parse VAR line omem nmem .
        Queue line
    End
    Queue "/*"
    Queue "//"

    Call write_Q

    x = nl_h(asl)
    "ISREDIT (caps) = CAPS";"ISREDIT CAPS = OFF"
If w_type='' Then Do
    n_st=mark(2)
/*
//*                                                                   */
//*  Change the 'DSNAME' at the cursor to a valid destination dataset.*/
//*                                                                   */
//*  NOTE:                                                            */
//*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the   */
//*     prefered option.                                              */
//*                                                                   */
*/
    n_en=mark(-2)
End
Else Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Convert NOTELINEs to datalines using the MD line command and     */
//*  use the cut command to export data. Do not forget to cancel out  */
//*  as changes WILL HAVE BEEN made to this member.                   */
//*                       - or -                                      */
//*  Use the emulator CUT/PASTE facility.                             */
//*                       - or -                                      */
//*  Use the '/NN' make JCL permanent (will physically alter member). */
//*                                                                   */
//*  In either case, do not forget to verify validity of destination  */
//*  dataset and change if required.                                  */
//*                                                                   */
*/
    n_en = mark(-2)
End
    x=proc_sourcel('J')
    "ISREDIT CAPS = (caps)"
    x = nl_h(asl)

    If w_type = '' Then "ISREDIT CURSOR = 11" Length(dataset)+30

    Return 0

/*--------------------------------------------------------------------*/
/* Place IEBCOPY JCL around remaining members created by this         */
/* command.                                                           */
/*--------------------------------------------------------------------*/
iebcopy_JCL:
    cs = "A"                                /* JOB class              */

    Call jobcard_JCL

    Queue "//COPY1    EXEC PGM=IEBCOPY,PARM='SIZE=200K'"
    Queue "//*"
    If volser = '' Then,
        Queue "//IN1      DD  DISP=SHR,DSN="dataset
    Else Do
        Queue "//IN1      DD  DISP=SHR,DSN="dataset","
        Queue "//     UNIT="unit",VOL=SER="volser
    End
    Queue "//*"
    Queue "//OUT1     DD  DISP=SHR,DSN="dataset'.'suff
    Queue "//*"
    xx=Listdsi("'"dataset"' DIRECTORY NORECALL SMSINFO")
    If xx<5 | sysreason=9 | sysreason=25 Then Do
        Queue "//* Temporary dataset used in case copy/newname into self."
        Queue "//*"
        Queue "//TEMP1    DD  DISP=(NEW,DELETE),DSN=&&TEMPFIL1,"
        If Substr(sysunits,1,1)='T' Then sysunits='TRK'
        Else If Substr(sysunits,1,1)='C' Then sysunits='CYL'
        space="("sysunits",("sysused","sysseconds","sysmembers"))"
        Queue "//             SPACE="space",DSORG=PO,"
/*      Queue "//             UNIT=SYSALLDA,DCB="dataset              */
        Queue "//             UNIT=SYSALLDA,DCB=*.IN1"
        Queue "//*"
    End
    Queue "//SYSUT3   DD  UNIT="vio",SPACE=(80,(6000,2000))"
    Queue "//SYSUT4   DD  UNIT="vio",SPACE=(80,(6000,2000))"
    Queue "//SYSPRINT DD  SYSOUT=*"
    Queue "//SYSIN    DD  *"
    Queue "  COPY INDD=IN1,OUTDD=OUT1"
    Queue "  COPY INDD=IN1,OUTDD=TEMP1"

    "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 By 1 Until i>=last
        "ISREDIT (line)=LINE &I";If Substr(line,1,1)='*' Then Iterate
        Parse VAR line omem nmem .
        Queue "   SELECT MEMBER=(("omem","nmem",R))"
    End
    Queue "  COPY INDD=((TEMP1,R)),OUTDD=OUT1"
    Queue "/*"
    Queue "//"

    Call write_Q

    x=nl_h(asl)
    "ISREDIT (caps) = CAPS";"ISREDIT CAPS = OFF"
If w_type='' Then Do
    n_st=mark(2)
/*
//*                                                                   */
//*  Change the 'DSNAME' at the cursor to a valid destination dataset.*/
//*                                                                   */
//*  NOTE:                                                            */
//*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the   */
//*     prefered option.                                              */
//*                                                                   */
*/
    n_en=mark(-2)
End
Else Do
    n_st=mark(2)
/*
//*                                                                   */
//*  Convert NOTELINEs to datalines using the MD line command and     */
//*  use the cut command to export data. Do not forget to cancel out  */
//*  as changes WILL HAVE BEEN made to this member.                   */
//*                       - or -                                      */
//*  Use the emulator CUT/PASTE facility.                             */
//*                       - or -                                      */
//*  Use the '/NN' make JCL permanent (will physically alter member). */
//*                                                                   */
//*  In either case, do not forget to verify validity of destination  */
//*  dataset and change if required.                                  */
//*                                                                   */
*/
    n_en=mark(-2)
End
    x=proc_sourcel('J')
    "ISREDIT CAPS = (caps)"
    x=nl_h(asl)

    If w_type='' Then "ISREDIT CURSOR = 11" Length(dataset)+30

    Return 0

/*--------------------------------------------------------------------*/
/* Place SMP/E JCL around list of PTF's 1 per line.                   */
/*--------------------------------------------------------------------*/
smpe_JCL:
    Address TSO
    "NEWSTACK"
    cl = 11                                 /* Cursor line            */
    cc = 7                                  /* Cursor column          */
    cs = "C"                                /* JOB class              */

    Call jobcard_JCL

    Queue "//SMPE1    EXEC PGM=GIMSMP,REGION=4096K"
    Queue "//*"
    Queue "//SMPCSI   DD  DISP=SHR,DSN=SMPE.MVS.GLOBAL.CSI"
    Queue "//*MPCSI   DD  DISP=SHR,DSN=SMPEG11.DB2510.GLOBAL.CSI"
    Queue "//*MPCSI   DD  DISP=SHR,DSN=SMPEG11.OS390.GLOBAL.CSI"
    Queue "//*MPCSI   DD  DISP=SHR,DSN=SMPES03.OS390.GLOBAL.CSI"
    If smpea = "LIS" Then Do
        Queue "//SMPLOG   DD  DUMMY"
        Queue "//SMPLOGA  DD  DUMMY"
        cl = cl + 2
    End
    Queue "//SMPCNTL  DD  *"
    Select
        When smpea = "REC" Then Do
            Queue "  SET BDY(GLOBAL)."
            Queue "      RECEIVE SELECT ("
        End

        When smpea = "REJ" Then Do
            Queue "  SET BDY(GLOBAL)."
            Queue "      REJECT  SELECT ("
        End

        When smpea = "APP" Then Do
            Queue "  SET BDY(MVST0x)."
            Queue "      APPLY   SELECT ("
        End

        When smpea = "ACC" Then Do
            Queue "  SET BDY(MVSD00)."
            Queue "      ACCEPT  SELECT ("
        End

        When smpea = "LIS" Then Do
            Queue "  SET BDY("
            Queue "      /*  GLOBAL            /*            */"
            Queue "      /*  MVST09            /*            */"
            Queue "      /*  MVSD09            /*            */"
            Queue "      /*  DB2T14            /*            */"
            Queue "      /*  DB2D14            /*            */"
            Queue "         )."
            Queue "      LIST SYSMODS   ("
        End

        Otherwise Nop
    End

     "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 By 1 Until i>=last
        "ISREDIT (line) = LINE &I"
        Queue "              "STRIP(line)"       /*            */"
    End

    Queue "                     )"
    Select
        When smpea = "REC" Then Do
            Queue "      SYSMODS"
        End

        When smpea = "REJ" Then Do
            Queue "  /*  BYPASS(APPLYCHECK,ACCEPTCHECK)     /*       */"
        End

        When smpea = "APP" Then Do
            Queue "      CHECK       /*      */"
            Queue "   /* REDO        /*      */"
        End

        When smpea = "ACC" Then Do
            Queue "      CHECK       /*      */"
            Queue "   /* REDO        /*      */"
        End

        Otherwise Nop
    End
    Queue "          ."

    Queue "/*"
    Queue "//"

    Call write_Q

    x = nl_h(asl)
    "ISREDIT (caps) = CAPS";"ISREDIT CAPS = OFF"
If w_type = '' Then Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Uncomment the appropriate zone at or below the cursor position.  */
//*  If other than the GLOBAL zone is used, keep it consistant with   */
//*  the CSI dataset being used!!!!                                   */
//*                                                                   */
//*  Make sure that the dataset names are correct.                    */
//*                                                                   */
//*  NOTE:                                                            */
//*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the   */
//*     prefered option.                                              */
//*                                                                   */
*/
    n_en = mark(-2)
End
Else Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Convert NOTELINEs to datalines using the MD line command and     */
//*  use the cut command to export data. Do not forget to cancel out  */
//*  as changes WILL HAVE BEEN made to this member.                   */
//*                       - or -                                      */
//*  Use the emulator CUT/PASTE facility.                             */
//*                       - or -                                      */
//*  Use the '/NN' make JCL permanent (will physically alter member). */
//*                                                                   */
//*  In either case, do not forget to verify validity of destination  */
//*  dataset and change if required.                                  */
//*                                                                   */
*/
    n_en = mark(-2)
End
    x=proc_sourcel('J')
    "ISREDIT CAPS = (caps)"
    x = nl_h(asl)

    If w_type = '' Then "ISREDIT CURSOR = &CL &CC"

    Return 0

/*--------------------------------------------------------------------*/
/* Place IDCAMS JCL to delete each dataset                            */
/*--------------------------------------------------------------------*/
IDCAMS_D:
    cl = 11                                 /* Cursor line            */
    cc = 7                                  /* Cursor column          */
    cs = "A"                                /* JOB class              */

    Call jobcard_JCL

    If ip Then Do
        x = LIstdsi("'"dataset"'")
        Queue '//DELETES  EXEC PGM=IEHPROGM'
        Queue '//DD1      DD UNIT='sysunit',VOL=SER='sysvolume',DISP=SHR'
    End
    Else Do
        Queue "//DELETES  EXEC PGM=IDCAMS,REGION=1024K"
        If enq = 'Y' Then ,
            Queue "//ENQ      DD   DISP=OLD,DSN="dataset
    End
    Queue "//SYSPRINT DD   SYSOUT=*"
    Queue "//SYSIN    DD   *"

    "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 By 1 Until i>=last
        "ISREDIT (line) = LINE &I"
        If Substr(line,1,1)='*' Then Iterate
        member = Strip(Word(line,1))
        If ip Then Do
            Queue Substr('      SCRATCH DSNAME='dataset',',1,71)'+'
            Queue Substr('               VOL='sysunit'='sysvolume',',1,71)'+'
            Queue        '               MEMBER='member
        End
        Else Queue "  DELETE '"dataset"("member")'"
    End

    If \ip Then Do
        Queue " "
        Queue "  IF MAXCC < 9 THEN SET MAXCC = 0"
        Queue " "
    End
    Queue "/*"
    Queue "//"

    Call write_Q

    x = nl_h(asl)
    "ISREDIT (caps) = CAPS";"ISREDIT CAPS = OFF"
If w_type = '' Then Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Make sure that the dataset names are correct.                    */
//*                                                                   */
//*  NOTE:                                                            */
//*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the   */
//*     prefered option.                                              */
//*                                                                   */
*/
    n_en = mark(-2)
End
Else Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Convert NOTELINEs to datalines using the MD line command and     */
//*  use the cut command to export data. Do not forget to cancel out  */
//*  as changes WILL HAVE BEEN made to this member.                   */
//*                       - or -                                      */
//*  Use the emulator CUT/PASTE facility.                             */
//*                       - or -                                      */
//*  Use the '/NN' make JCL permanent (will physically alter member). */
//*                                                                   */
//*  In either case, do not forget to verify validity of destination  */
//*  dataset and change if required.                                  */
//*                                                                   */
*/
    n_en = mark(-2)
End
    x=proc_sourcel('J')
    "ISREDIT CAPS = (caps)"
    x = nl_h(asl)

    If w_type = '' Then "ISREDIT CURSOR = &CL &CC"

    Return 0

/*--------------------------------------------------------------------*/
/* Place IDCAMS JCL to define an alias for a dataset                  */
/*--------------------------------------------------------------------*/
IDCAMS_ALIAS:
    cl = 11                                 /* Cursor line            */
    cc = 7                                  /* Cursor column          */
    cs = "A"                                /* JOB class              */

    Call jobcard_JCL

    Queue "//DELETES  EXEC PGM=IDCAMS,REGION=1024K"
    Queue "//SYSPRINT DD   SYSOUT=*"
    Queue "//SYSIN    DD   *"

    "ISREDIT (last) = LINENUM .ZLAST"
    Do i=1 By 1 Until i>=last
        "ISREDIT (line)=LINE &I"
        Parse VAr line dsn alias . 1 ch1 +1
        If Wordpos(ch1,'/ *')>0 Then Iterate
        If Strip(line)='' Then Iterate
        Queue '  DELETE' alias '-'
        Queue '          ALIAS'
    End
    Queue ' '
    Queue '  IF MAXCC < 9 THEN SET MAXCC = 0'
    Queue ' '
    Do i=1 By 1 Until i>=last
        "ISREDIT (line)=LINE &I"
        Parse VAr line dsn alias . 1 ch1 +1
        If Wordpos(ch1,'/ *')>0 Then Iterate
        If Strip(line)='' Then Iterate
        Queue '  DEFINE ALIAS -'
        Queue '        (NAME('alias') -'
        Queue '        RELATE('dsn'))'
    End
    Queue "/*"
    Queue "//"

    Call write_Q

    x = nl_h(asl)
    "ISREDIT (caps) = CAPS";"ISREDIT CAPS = OFF"
If w_type = '' Then Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Make sure that the dataset names are correct.                    */
//*                                                                   */
//*  NOTE:                                                            */
//*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the   */
//*     prefered option.                                              */
//*                                                                   */
*/
    n_en = mark(-2)
End
Else Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Convert NOTELINEs to datalines using the MD line command and     */
//*  use the cut command to export data. Do not forget to cancel out  */
//*  as changes WILL HAVE BEEN made to this member.                   */
//*                       - or -                                      */
//*  Use the emulator CUT/PASTE facility.                             */
//*                       - or -                                      */
//*  Use the '/NN' make JCL permanent (will physically alter member). */
//*                                                                   */
//*  In either case, do not forget to verify validity of destination  */
//*  dataset and change if required.                                  */
//*                                                                   */
*/
    n_en = mark(-2)
End
    x=proc_sourcel('J')
    "ISREDIT CAPS = (caps)"
    x = nl_h(asl)

    If w_type = '' Then "ISREDIT CURSOR = &CL &CC"

    Return 0

/*--------------------------------------------------------------------*/
/* Place DFDSS JCL to clone each dataset                              */
/*--------------------------------------------------------------------*/
dfdss_JCL:
    cs = "A"                                /* JOB class              */

    If dsnlst = 'Y' Then Do
        "ISREDIT (last) = LINENUM .ZLAST"
        i = 0
        Do j=1 To last
            "ISREDIT (line) = LINE &J"
            If line = '' Then Iterate
            If Substr(line,1,1) = '*' Then Iterate
            i = i +1
            Parse VAR line odsn.i ndsn.i .
            If ndsn.i = '' Then Do
                Parse VAR odsn.i . '.' ndsn
                ndsn.i = ndsn'.'suff
                x_hlq = 'Y'
            End
        End
    End
    Else Do
        odsn.1 = dataset
        ndsn.1 = dataset'.'suff
        i = 1
    End
    line.0 = i

    Call jobcard_JCL

    If rename = 'Y' Then Do
        Queue "//DELETE   EXEC PGM=IDCAMS,REGION=1024K"
        Queue "//SYSPRINT DD   SYSOUT=*"
        Queue "//SYSIN    DD   *"

        Do i=1 To line.0
            Queue "  DELETE '"ndsn.i"'"
        End

        Queue " "
        Queue "  IF MAXCC < 9 THEN SET MAXCC = 0"
        Queue " "
        Queue "/*"
    End

    Queue "//CLONEDSN EXEC PGM=ADRDSSU PARM='TYPRUN=NORUN'"
    Queue "//SYSPRINT DD   SYSOUT=*"
    Queue "//SYSIN    DD   *"
    Queue " COPY -"
    Queue "  DATASET(INC( -"

    Do i=1 To line.0
        Queue "              "odsn.i "-"
    End

    Queue "              ) -"
    Queue "          ) -"

    If rename = 'Y' Then Do
        Queue "   RENUNC ( -"
        Do i=1 To line.0
            Queue "   ("odsn.i","ndsn.i"), -"
        End
        Queue "          ), -"
    End

    Queue "   CATALOG ALLDATA(*) -"
    Queue "   BYPASSACS(**) TOL(ENQF)"
    Queue "/*"
    Queue "//"

    Call write_Q
    "NEWSTACK"

    x = nl_h(asl)

    "ISREDIT (caps) = CAPS";"ISREDIT CAPS = OFF"
If w_type = '' Then Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Make sure that the dataset names are correct.                    */
//*                                                                   */
//*  NOTE:                                                            */
//*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the   */
//*     prefered option.                                              */
//*                                                                   */
*/
    n_en = mark(-2)
End
Else Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Convert NOTELINEs to datalines using the MD line command and     */
//*  use the cut command to export data. Do not forget to cancel out  */
//*  as changes WILL HAVE BEEN made to this member.                   */
//*                       - or -                                      */
//*  Use the emulator CUT/PASTE facility.                             */
//*                       - or -                                      */
//*  Use the '/NN' make JCL permanent (will physically alter member). */
//*                                                                   */
//*  In either case, do not forget to verify validity of destination  */
//*  dataset and change if required.                                  */
//*                                                                   */
*/
    n_en = mark(-2)
End
    x=proc_sourcel('J')
    "ISREDIT CAPS = (caps)"
    x = nl_h(asl)

    If rename = 'Y' Then Do
        cl = 10                             /* Cursor line            */
        cc = Length(dataset)+12             /* Cursor column          */
        "ISREDIT CURSOR = &CL &CC"
    End
/*
    Else Do
        cl = 13                             /* Cursor line            */
        cc = Length("               ")      /* Cursor column          */
    End
*/

    Return 0

/*--------------------------------------------------------------------*/
/* Place IKJEFT01 statements to rename member                         */
/*--------------------------------------------------------------------*/
rename_JCL:
    If dataset = '' Then dataset = 'XXXXXXXX'
    If INDEX(dataset,'(') > 0 Then dataset = ,
        SUBSTR(dataset,1,INDEX(dataset,'(')-1)
    cl = 11                                 /* Cursor line            */
    cc = 7                                  /* Cursor column          */
    cs = "A"                                /* JOB class              */

    jcl='RENAME'
    Call jobcard_JCL
    Select
        When ip Then Do
            x = LIstdsi("'"dataset"'")
            Queue '//RENAMES  EXEC PGM=IEHPROGM'
            Queue '//SYSPRINT DD SYSOUT=*'
            Queue '//DD1      DD UNIT='sysunit',VOL=SER='sysvolume',DISP=SHR'
            Queue '//SYSIN    DD DATA,DLM=@@'
        End
        When rnVSAM | rnNon_VSAM Then Do
            Queue '//DEFVSAM  EXEC PGM=IDCAMS'
            Queue '//SYSPRINT DD SYSOUT=*'
            Queue '//SYSIN    DD DATA,DLM=@@'
        End
        Otherwise Do
            Queue '//RENAMES  EXEC PGM=IKJEFT01'
            Queue '//SYSTSPRT DD SYSOUT=X'
            Queue '//SYSOUT   DD SYSOUT=*'
            Queue '//SYSTERM  DD SYSOUT=*'
            If dsnlst='N' Then,
                Queue '//ENQIT    DD DISP=OLD,DSN='dataset
            Queue '//SYSTSIN  DD DATA,DLM=@@'
            Queue '/* PROC 0'
            Queue '/* CONTROL MAIN NOFLUSH'
        End
    End

    Do i=fline By 1 Until i>=tline
        "ISREDIT (line)=LINE &I"
        Parse VAr line old new . 1 ch1 +1
        If Wordpos(ch1,'/ *')>0 Then Iterate
        If Strip(line)='' Then Iterate
        old=Strip(old,,"'");new=Strip(new,,"'")
        If new='' Then Do
            Select
                When Length(old)>8 Then new=old'.#'
                When Length(old)=8 Then new=Overlay('#',old,7)
                Otherwise new=old'#'
            End
        End
        Select
          When ip Then Do
              Queue Substr('      SCRATCH DSNAME='dataset',',1,71)'+'
              Queue Substr('               VOL='sysunit'='sysvolume',',1,71)'+'
              Queue        '               MEMBER='new
              Queue Substr('      RENAME  DSNAME='dataset',',1,71)'+'
              Queue Substr('               VOL='sysunit'='sysvolume',',1,71)'+'
              Queue Substr('               NEWNAME='new',',1,71)'+'
              Queue        '               MEMBER='old
          End
          When rnVSAM Then Do
              xx=VA("'"old"' '"new"' /RD")
              If xx/=0 Then Do
                  Queue '  /*'Copies('-',65)'*/'
                  Queue '  /*'Substr(' Rename of:',1,65)'*/'
                  Queue "  /*"Substr(" '"old"' '"new"'",1,65)"*/"
                  Queue '  /*'Substr(' failed in "VA";' ,1,65)'*/'
                  Queue '  /*'Substr(' 'xx,1,65)'*/'
                  Queue '  /*'Substr(' Forcing KSDS rename below.' ,1,65)'*/'
                  Queue '  /*'Copies('-',65)'*/'
                  xx=VA("'"old"' '"new"' /RD /F")
                  Queue '  /*'Copies('-',65)'*/'
              End
              Else Queue '  /*'Copies('-',65)'*/'
              Queue ' '
          End
          When rnNon_VSAM Then Do
              Queue '  ALTER   'Left(old,46) '-'
              Queue '  NEWNAME('Left(' ',46) '-'
              Queue '          'Left(new,46) '-'
              Queue '         )'
              Queue ' '
          End
          Otherwise Do
              If dsnlst='N' Then Do
                  Queue "  RENAME '"dataset"("old")' +"
                  Queue "         '"dataset"("new")'"
              End
              Else Do
                  Queue "  RENAME '"old"' +"
                  Queue "         '"new"'"
              End
          End
        End
    End

    Queue '@@'
    Queue '//'

    Call write_Q
    "NEWSTACK"

    x = nl_h(asl)

    "ISREDIT (caps) = CAPS";"ISREDIT CAPS = OFF"
If w_type = '' Then Do
  If ip Then Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Make sure that the dataset names are correct.                    */
//*                                                                   */
//*  NOTE:                                                            */
//*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the   */
//*     prefered option.                                              */
//*                                                                   */
*/
    n_en = mark(-2)
  End
  Else Do
    n_st = mark(2)
/*
/*                                                                    */
/*  CLIST to be executed on-line.                                     */
/*                                                                    */
/*  Make sure that the dataset names are correct.                     */
/*                                                                    */
/*  NOTE:                                                             */
/*     MEMBER HAS BEEN CHANGED. Copy and CANcel if this is not the    */
/*     prefered option.                                               */
/*                                                                    */
*/
    n_en = mark(-2)
  End
End
Else Do
    n_st = mark(2)
/*
//*                                                                   */
//*  Convert NOTELINEs to datalines using the MD line command and     */
//*  use the cut command to export data. Do not forget to cancel out  */
//*  as changes WILL HAVE BEEN made to this member.                   */
//*                       - or -                                      */
//*  Use the emulator CUT/PASTE facility.                             */
//*                       - or -                                      */
//*  Use the '/NN' make JCL permanent (will physically alter member). */
//*                                                                   */
//*  In either case, do not forget to verify validity of destination  */
//*  dataset and change if required.                                  */
//*                                                                   */
*/
    n_en = mark(-2)
End
    x=proc_sourcel('J')
    "ISREDIT CAPS = (caps)"
    x = nl_h(asl)
    Call noteline_from_Q

    "ISREDIT CURSOR = &CL &CC"

    Return 0

/*--------------------------------------------------------------------*/
/* Mark the dataset volume from the edit session                      */
/*--------------------------------------------------------------------*/
mark_dsn:
    "ISREDIT PROCESS RANGE C";"ISREDIT (cmd)=RANGE_CMD"
    If cmd='C' Then Do
       "ISREDIT (fline)=LINENUM .ZFRANGE";"ISREDIT (tline)=LINENUM .ZLRANGE"
    End
    Else Do
        fline=1;"ISREDIT (tline)=LINENUM .ZLAST"
    End

    "ISREDIT (linedsn)=LINE 1"
    If Substr(linedsn,1,1)='*' Then Do
        If Index(linedsn,'DSN=')>0 Then Do
            Parse VAR linedsn 'DSN=' dataset .
            Parse VAR dataset dataset ',' .
            dataset=Strip(dataset,,"'")
            If Sysdsn("'"dataset"'")='OK' Then Signal ret_syntax_2
            dataset=
        End
    End
    Signal On Syntax Name ret_syntax_2
    dataset='screenc_notfnd_error'
/*  screeni=screenc('ASIS')                                           */
    "VGET (zscreeni,zscreenc)"
    screenc=zscreenc;screeni=zscreeni
    headline=Substr(screeni,161,80)
    Parse VAR headline . dataset .
    Parse VAR dataset dataset '(' .

    If Sysdsn("'"dataset"'")/='OK' Then dataset=

ret_syntax_2:
    Signal Off Syntax
    Return 0

write_Q:
    If w_type = '' Then Do
        "ISREDIT X ALL"
        "ISREDIT DEL ALL X"
    End

    "ISREDIT (caps1)=CAPS";"ISREDIT CAPS OFF"
    Do Queued()
        Parse Pull line
        If w_type = '' Then
            "ISREDIT LINE_AFTER .ZLAST = (line)"
        Else,
            "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (line)"
    End
    "ISREDIT CAPS=(caps1)"

    Return 0

noteline_from_Q:
    "ISREDIT CAPS OFF"
    Do Queued()
        Parse PULL line
        "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (line)"
    End
    "ISREDIT CAPS ON"

    "DELSTACK"

    Return 0

Help_me:
n_st = mark(2)                              /* Mark next line         */
/*

  Good &TIME. &CNAME..

  This routine is a macro to either wrap JCL around or overwrite
  member being edited.

  For available options issue command "JCL ?" in a view/edit
  session. (But you already know this you clever sausage you).

  The routine is designed to process a list of members space
  seperated or one per line and generate the appropriate wrap-around
  JCL. Options with an 'o' marker are at the dataset rather than
  member level.

  The active dataset name to use in certain JCL will be derived from:
     1. "DSN=dataset" on line 1 if column 1 contains '*'.
     2. PDS being processed.
     3. From the headlines.

  The following options are available:

     ALIAS   - Designed to place inside an IDCAMS envelope to delete
               the alias and then set MAXCC to 0.
               Then generate code to define an alias for a dataset.
               The data must be in the format of 1st. word is the data-
               set and the 2nd. word is the alias to define for it.
     DELETE  - Designed to place inside an IKJEFT01 envelope a
               number of TSO DELETE dataset(member) statements.
               Additional parameters:
                  /Ip      - Use IEHPROGM JCL to delete which
                             bypasses ENQ's.
     IEBCOPY - Designed to place IEBCOPY select member around
               a member list, one per line starting in column 1 and
               place cursor on destination DSNAME (which is un-
               known).
               To copy with new name, make up an "oldname" "newname"
               pair per line.
     RENAME  - Designed to generate a stream of RENAME statements
               within an on-line executable CLIST. If the length of
               the 1st. word is >8 then '/DL' (dataset) is assumed,
               otherwise it will be a member rename and dataset should
               be extracted from the active dataset name.
               Additional parameters:
                  /DL      o member is a dataset rename list of name
                             length <9, in which case the datasets to
                             be renamed should be one per line with an
                             optional second field for new name if not
                             defaulted. (Default newname is with a
                             ".#" suffix.)
                  /Ip      - Use IEHPROGM JCL to rename which
                             bypasses ENQ's.
                             This option will delete member 'newname'
                             hence the use of IEHPROGM.
                             If a newname value is not supplied (as
                             the second word (or 3rd. word if second
                             word is lower case 'to' or '-')) the 1st
                             is appended by '#' unless the length is 8
                             in which case the 7th. character is
                             replaced by the '#'.
                             Notes:
                              1. This may inadvertantly cream a valid
                                 member.
                              2. Expect a RC=8 if any 'newname' does
                                 not exist.
                  /NVS     - Datasets are NON-VSAM, however, wan't to
                             generate IDCAMS 'ALTER' statements.
                  /VS      - Datasets are VSAM and each component
                             will need to be renamed.
     SMPE    - Designed to place SMPE select member around
               a PTF list, one per line starting in column 1.
               Subcommands are: ACC, APP, REC, REJ, LIS.
     CLONE | DFDSS
             o Designed to place DFDSS envelope around dataset list
               Additional parameters:
                  /DL      o member is a dataset backup list in
                             which case the dataset to be backed
                             up should be one per line with an
                             optional second field for new name
                             if not defaulted.
                  /NR      - generate non-rename type JCL.
                  S= | S() - Suffix qualifier for backup name if you
                             don't want default of S(&SUFF#.) used.

  Optional control parameters:

     /NN     - Do not generate NOTELINE procedures. Hard code
               JCL etc...

*/
n_en=mark(-2)                               /* Mark prev 2 line       */


Help_me:
    Parse Value Time() With hh ':'
    Select
        When hh<12 Then time='morning'
        When hh<18 Then time='afternoon'
        Otherwise time='evening'
    End
    chgchar='&';cname='there'
    Signal On Syntax Name error_off_$WHOAMI
    cname=$Whoami('C')
error_off_$WHOAMI:Signal Off Syntax

    Address ISREDIT;"(caps)=CAPS";"CAPS=OFF"

    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    x=proc_sourcel('J')
    x=nl_h('*'Copies('-',70)'*')

    "CAPS=(caps)";Address

    If ima_macro Then "ISREDIT USER_STATE=(status)"
    Exit

proc_sourcel: Arg a1
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            line = ' 'Substr(line,2)
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line = p1 || 'var' || p2'
        End
        If a1='J' Then x=nl_h(Substr(line,1,72))
        Else x=nl_h('*'Substr(line,1,70)'*')
    End
    Return 0

nl_h:Parse Arg n#;"ISREDIT LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
