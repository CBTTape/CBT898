/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* JF: Jcl Format.                                                    */
/*                                                                    */
/* Edit macro to format JCL code. For further details scroll to the   */
/* bottom or invoke it with a '?' parameter.                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Address ISREDIT
    "(caps)=CAPS";"CAPS=OFF"
    If Wordpos(Word(parm#,1),'? /? /H HELP')>0 Then Signal TSO_help

nohelp:
    oprcol=16
    val_cmd='DD EXEC JOB PROC SET'

    "ISREDIT (lev) = MACRO_LEVEL"
    If lev>1 Then Do
        Parse VAR parm# labf ',' labt ',' lcmd parm#
        "(lin1)=LINE" labf
        If lcmd='JFH' Then Do
            Address ISPEXEC "VGET (lcmd1stl,lcmd1l#,lcmd1c#) SHARED"
            "CURSOR="labf 0;"ISREDIT (line)=LINE" labf
            If line/=lcmd1stl Then "ISREDIT LINE &lcmd1l#=(lcmd1stl)"
            Signal TSO_help
        End
        Call Parse_parms
        zfrange=labf;zlrange=labt
    End
    Else Do
        "(last) = LINENUM .ZLAST"
        Call Parse_parms
        If Verify(#tr,'NO')>0 Then Do
            Say 'all=>'all'<' 'xst=>'xst'<' 'com=>'com'<'
            Say 'trace=>'trace'<' 'ddc=>'ddc'<'
            Say 'zfrange=>'zfrange'<' 'zlrange=>'zlrange'<'
            Say 'oprcol=>'oprcol'<' 'txt_sep=>'txt_sep'<'

            x=Trace('o')
        End

        If all='ALL' Then Do;zfrange=1;zlrange=last;End
        Else Do
            "PROCESS RANGE C"
            "(cmd)=RANGE_CMD"
            If cmd='C' Then Do
                "(zfrange)=LINENUM .ZFRANGE"
                "(zlrange)=LINENUM .ZLRANGE"
            End
            Else Do
                If zfrange='' Then Do
                    "(zfrange)=CURSOR"
                    zlrange=zfrange
                End
            End
        End
    End

    If com='N' Then Do
        Do lin#=zfrange To zlrange
          "(linei) = LINE &LIN#"
          If Substr(linei,3,1)='*' Then Do
              If ddc='N' Then Iterate
              If Word(linei,2)/='DD' Then Iterate
          End
          If Substr(linei,2,1)='*'  Then Iterate
          If Substr(linei,1,1)/='/' Then Iterate
          line=linei
          If Substr(line,72,1)=' ' Then Do
              If xst/='A' Then Do
                  "(xstat) = XSTATUS &LIN#"
                  If xstat/=xst Then Iterate
              End
              Parse VAR line line +72 col73t80
              Parse VAR line label command operand text
              text=Strip(text)
              If Wordpos(command,val_cmd)>0 Then cmdhead=command
              Else Do
                  If cmdhead='JOB' Then Iterate
                  text=operand;operand=command;command=
              End
              find='DSN=';pos=Index(operand,find)
              If pos=0 Then Do;find='DSNAME=';pos=Index(operand,find);End
              If pos>0 Then Do
                  If Index(operand,'=',pos+Length(find))>0 Then Do
                      pos=Index(operand,',',pos)
                      p1=Substr(operand,1,pos-1)
                      p2=Strip(Substr(operand,pos+1))
                      lc=Substr(p2,Length(p2),1)
                      If lc=',' Then operand=p2||p1','
                      Else           operand=p2','p1
                  End
              End
              If revo='Y' Then Do
                  Parse VAR operand v1 'DSN=' v2
                  If v2='' Then Parse VAR operand v1 'DSNAME=' v2
                  If v2/='' Then Do
                      If v1/='' Then Do
                          ci=Substr(v2,Length(v2),1)
                          If ci=',' Then v2=Substr(v2,1,Length(v2)-1)
                          Else ci=
                          v1=Substr(v1,1,Length(v1)-1)||ci
                          operand='DSN='v2','v1
                      End
                  End
              End
              If Length(label)<10 Then label=Substr(label,1,10)
              If oprcol-13>=Length(command) Then,
                  command=Centre(command,oprcol-13)
              line=label command operand
              If txt_sep/='' Then Do
                  If txt_sep=0 Then text=
                  Else If Length(line)<txt_sep-2 Then,
                          line=Substr(line,1,txt_sep-2)
                  line=line text
              End
              Else line=line text
              "LINE &LIN#=(line)"
              If Length(line)>71 Then Do
                  textt='* Trunc -> '
                  textt=textt||LEFT(operand,71-LENGTH(textt),' ')
                  "LINE_BEFORE &LIN# = NOTELINE (textt)"
              End
          End
        End
    End
    Else Do
        Do lin#=zfrange To zlrange
          "(line) = LINE &LIN#"
          If xst/='A' Then Do
              "(xstat)=XSTATUS &LIN#"
              If xstat/=xst Then Iterate
          End
          If com='C' Then Do
              If Substr(line,1,2)='//' Then part1=Substr(line,3,69)
              Else part1=Substr(line,1,67)
              part2=Substr(line,73)
              line='//*'part1||part2
          End
          Else Do
              If Substr(line,1,3)/='//*' Then Iterate
              part1=Substr(line,4,69);part2=Substr(line,73)
              line='//'part1||part2
          End
          "LINE &LIN# = (line)"
        End
    End

ext01:
    "CAPS=(caps)"
    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(GC009)"
    Signal ext01

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#
    #tr=Parse_cons('TRACE','R','O')
    If #tr='O' Then #rt=Parse_cons('/TR','R','O')

/*--------------------------------------------------------------------*/
/* Test for command column                                            */
/*--------------------------------------------------------------------*/
    oprcol=Parse_varb('O=',oprcol,'NUM')

/*--------------------------------------------------------------------*/
/* Test for text column                                               */
/*--------------------------------------------------------------------*/
    txt_sep=Parse_varb('T=','NULL','NUM')
    If txt_sep='NULL' Then txt_sep=

/*--------------------------------------------------------------------*/
/* Test for All parameter                                             */
/*--------------------------------------------------------------------*/
    all=Parse_cons('/A','ALL','NULL')
    If all='' Then all=Parse_cons('A','ALL','NULL',1)

/*--------------------------------------------------------------------*/
/* Test for Comment parameter                                         */
/*--------------------------------------------------------------------*/
    com=Parse_cons('/C','C','N')

/*--------------------------------------------------------------------*/
/* Test for UnComment parameter                                       */
/*--------------------------------------------------------------------*/
    If com='N' Then com=Parse_cons('/U','U','N',2)

/*--------------------------------------------------------------------*/
/* Test for eXclude parameter                                         */
/*--------------------------------------------------------------------*/
    xst=Parse_cons('/X','X','A')
    If xst='A' Then xst=Parse_cons('X','X','A')

/*--------------------------------------------------------------------*/
/* Test for Not eXclude parameter                                     */
/*--------------------------------------------------------------------*/
    If xst='A' Then xst=Parse_cons('/NX','NX','A')
    If xst='A' Then xst=Parse_cons('NX','NX','A')

/*--------------------------------------------------------------------*/
/* Test for Commented DD cards                                        */
/*--------------------------------------------------------------------*/
    ddc=Parse_cons('//*')

/*--------------------------------------------------------------------*/
/* Test for Reverse of DSN and DISP                                   */
/*--------------------------------------------------------------------*/
    revo=Parse_cons('/R')

/*--------------------------------------------------------------------*/
/* Test for range parameter supplied                                  */
/*--------------------------------------------------------------------*/
    zfrange=Parse_cons('-',,'NULL','WORD')
    If zfrange/='' Then Do
        Parse VAR zfrange zfrange '-' zlrange
        If zfrange='' Then zfrange=1
        If Datatype(zfrange)/='NUM' Then Do
            gc009="Invalid FROM range."
            Signal err01
        End
        If zlrange='' Then zlrange=last
        If Datatype(zlrange)/='NUM' Then Do
            gc009="Invalid TO range."
            Signal err01
        End
        If zlrange>last Then zlrange=last
    End

/*--------------------------------------------------------------------*/
/* Test for repeat parameter                                          */
/*--------------------------------------------------------------------*/
    zfrange=Parse_cons('.',,'NULL','WORD')
    If zfrange/='' Then Do
        Parse VAR zfrange zfrange '.' zlrange
        If zfrange='' Then zfrange=1
        If Datatype(zfrange)/='NUM' Then Do
            gc009="Invalid FROM range."
            Signal err01
        End
        If zlrange='' Then zlrange=last
        If Datatype(zlrange)/='NUM' Then Do
            gc009="Invalid TO range."
            Signal err01
        End
        zlrange=zlrange+zfrange-1
        If zlrange>last Then zlrange=last
    End

/*--------------------------------------------------------------------*/
/* Test for single line pointer                                       */
/*--------------------------------------------------------------------*/
    Parse VAR parm# xx .
    If Datatype(xx)='NUM' Then Do
        If xx>last Then xx=last
        zfrange=xx;zlrange=xx
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Tutorial....                                                       */
/*--------------------------------------------------------------------*/
TSO_help:
ms=mark(2)
/*

   JF: Jcl Formatting program.

   Routine to format JCL code in columns as follows:
     1 - Labels
    11 - Commands
    16 - Operands (changeable)
   ' ' - Space between command and operand
   ' ' - Space between operand and text

   NOTES:
      1. This routine will force operand 'DSN=dataset' as the last
         operand on a multi operand line. (Ideal for those anoying
         bits of JCL that specify 'DSN=dataset,DISP=disp'...
      2. The JOB card's continuation lines are left alone.
      3. Any line not begining with a '//' and comment lines are
         ignored (unless //* parameter is used).                             */

   PARAMETERS:
      O=opr_col  - Change default operand column from 16
      T=txt_col  - Change default text column from space seperator.
                   T=0 will remove all coments.
      ALL        - Change all lines
      s-e        - Start line (s) to end line (e)
      s.r        - Start line (s) repeat number (r)
      nnnn       - Last numeric value is line number
      /C         - Set comment character (comment selected lines)
      /NX        - Change Non-eXcluded lines only
      /R         - Reverse order to make DSN=... the first keyword
                   on the DD statement if it is found
      /TRACE     - Set debug TRACE on
      /UC        - Set uncomm character (ucomment selected lines)
      /X or X    - Change eXcluded lines only
      //*        - Include commented DD cards in tidy up (still             */
                   retains comment status but shifted right 1 column

*/
    me=mark(-2)
    Address ISREDIT
    If ¬Datatype(where,'W') Then where=1
    x=n_b(Centre(' ooo000OOOO000ooo ',72,'*'),where)
    Do i=ms To me
        line=Sourceline(i)
        x=n_b('*'Substr(line,1,70)'*',where)
    End
    x=n_b(Centre(' End ',72,'*'),where);x=n_b(' ',where)
    "CAPS=(caps)"
    Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
n_b:xx=Arg(1);"LINE_BEFORE" Arg(2) "= NOTELINE (xx)";Return 0
