/*------------------------------< REXX >------------------------------*/
    n_st=mark(2)                            /* Mark Start             */
/*

   JOIN:

   Macro to seperate words to 1 per line or join 1 per line words
   to fill a line.

   Default seperator is space. Can define own with /S(s) parameter.
   First numeric parameter is treated as line size limit for JOIN ON.

   Permissable parameters:
    /C=c   - Column start, where 'c' is starting column.
    /DEL   - Delete original lines
    /ON |  - Join characters. Default is to seperate.
     ON
    /L=l   - Length of data (ening column).
    /S(s)  - Define own seperator character(s).

*/
    n_en=mark(-2)                           /* Mark End               */

JOIN:join_ver='1.03'
    Parse ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Address ISREDIT
    If parm#='?' Then Signal help_me
    "(status)=USER_STATE"

    "PROCESS RANGE C M";"(cmd)=RANGE_CMD"
    If cmd='C' Then Do
        "(zfrange)=LINENUM .ZFRANGE";"(zlrange)=LINENUM .ZLRANGE"
    End
    Else Do
        zfrange=1;"(zlrange)=LINENUM .ZLAST"
    End

    Call parse_parms
    If joinit='Y' Then Signal join_on

    Do i=zfrange To zlrange
        "(line)=LINE &I"
        Do While line/=''
            If dlm=' ' Then Parse VAR line w1 line
            Else   Interpret 'Parse VAR line w1 "'dlm'" line'
            "LINE_BEFORE .ZFIRST=NOTELINE (w1)"
        End
    End
    Signal exi1

join_on:
    linex=
    If scol>1 Then linex=Substr(linex,1,scol-1)
    lineo=linex
    Do i=zfrange To zlrange
        "(line)=LINE &I";line=Strip(line)
        If Length(lineo || line || dlm)>len Then Do
            lineo=lineo
            "LINE_BEFORE .ZFIRST=NOTELINE (lineo)"
            lineo=linex
        End
        lineo=lineo || line || dlm
    End
    lineo=Substr(lineo,1,Length(lineo)-Length(dlm))
    "LINE_BEFORE .ZFIRST=NOTELINE (lineo)"

exi1:
    "LABEL "zfrange"=.LINEF";"LABEL "zlrange"=.LINEL"
    If del='Y' Then "DEL ALL NX .LINEF .LINEL"
    "USER_STATU=(status)"
ext1:
    Exit

help_me:"(caps)=CAPS";"CAPS=OFF"
    Do i=n_st To n_en;x=nl(Sourceline(i));End
    "CAPS=(caps)"
    Exit

nl: Parse Arg nl;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (nl)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    #tr1=Trace('O')
    Parse Upper VAR parm# parm#

    trace=parse_cons('TRACE')
    If trace='N' Then trace=parse_cons('/TR',,,3)
    del=parse_cons('/DEL',,,2)
    dlm=parse_varb('/S(','?????')
    If dlm='?????' Then dlm=' '
    Else Parse VAR dlm dlm ')'
    joinit=parse_cons('/ON',,,2)
    If joinit='N' Then joinit=parse_cons('ON')
    scol=parse_varb('/C=')
    If Datatype(scol)/='NUM' Then scol=1
    len=parse_varb('/L=')
    If Datatype(len)/='NUM' Then len=72

    x=Trace(#tr1)
    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
