/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to wildcard LISTCAT with any combination.                  */
/*                                                                    */
/* Members required to package this routine:                          */
/* REXX:                                                              */
/*   LCW      - This driver.                                          */
/*   LCATWLD  - Routine invoked to process output from IGGCSI00.      */
/*   CSMDSN*  o Multi-procs and its related processors.               */
/* Panels:                                                            */
/*   DSNLIST  - Table display.                                        */
/*   DSNLH100 o Tutorial panel.                                       */
/* Messages:                                                          */
/*   GC00     - Generic message display.                              */
/* Loadmod:                                                           */
/*   IGGCSI00 - IBM's catalog generic filter interface (OS/390 2.4+). */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    If parm# Â¬= "" Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    Parse Upper VAR parm#,parm1,parparm2,parm3,parm4,parm5,parm6,parm7
    If Word(action,2) /= '' Then,
         Parse Upper VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7

    userid = Userid()
    spref  = Sysvar(Syspref)
    If userid /= spref Then hlq = spref'.'userid
    Else                    hlq = userid
    hlq = spref

    Call parse_parms
    If trace = Y Then TRACE r

    maskp   = ''
    mask#   = 0
    defscmd = 'V'
    table = 'LC'Time('s')
    "TBCREATE &TABLE KEYS(DSN) NAMES(MESSAGE,VOLUME) NOWRITE"
    Parse Upper VAR parm# cmd parm1 .
    If cmd = '' Then cmd = hlq
    mask = cmd
    Call set_up

scr1:
    zcmd = ''
    "TBDISPL &TABLE PANEL(DSNLIST)"
    If rc > 4 Then Signal exi1
    Parse VAR zcmd cmd parm1 parm2 parm3

    If cmd = 'TRACE' Then Do
        If parm1 = 'OFF' Then Do
            trace = 'N'
            Trace Off
        End
        Else Do
            trace = 'Y'
            Trace r
        End
        Signal scr1
    End
    If Substr(cmd,1,2) = '/C' Then Do
        "TBEND &TABLE"
        "TBCREATE &TABLE KEYS(DSN) NAMES(MESSAGE,VOLUME) NOWRITE"
        dsnlist = "DSNLIST - Data Sets Matching ''"
        maskp = ''
        mask# = 0
        Signal scr1
    End

    If Substr(cmd,1,2) = '/R' Then Do
        "TBEND &TABLE"
        "TBCREATE &TABLE KEYS(DSN) NAMES(MESSAGE,VOLUME) NOWRITE"
        j1      = mask#
        i2      = 0
        mask#   = 0
        message = ''
        Do i1=1 To j1
            mask = mask.i1
            Call set_up
            i2 = i2 +i
        End
        If i2 /= 0 Then,
            gc009 = 'Table updated with' Strip(i2) 'hits.'
        Else,
            gc009 = 'No hits found...'
        "SETMSG MSG(GC009)"
        Signal scr1
    End
    If Substr(cmd,1,2) = '/P' Then Do
        oline. = ''
        i = 0
        "TBTOP &TABLE"
        Do Forever
            "TBSKIP &TABLE"
            If rc /= 0 Then Leave
            i = i +1
            oline.i = Strip(dsn)
        End
        "VGET ZTEMPF"
        ddo = 'LC'Time('s')
        Address TSO "ALLOC DD("ddo") DSN('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW "ddo" (STEM oline. FINIS"
        "LMINIT DATAID(DATAID) DDNAME("ddo")"
        gc009 = 'Do with whatever U like.'
        "SETMSG MSG(GC009)"
        "EDIT DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD("ddo")"
        Signal scr1
    End
    If Substr(cmd,1,2) = '/X' Then Do
        Parse VAR zcmd . parm#
        all = parse_cons('ALL')
        parm# = Strip(parm#)
        If Substr(parm#,1,1) = "'" Then Parse VAR parm# "'" parm# "'" .
        "TBTOP &TABLE"
        Do Forever
            "TBSKIP &TABLE"
            If rc /= 0 Then Leave
            If Index(dsn' ',parm#) = 0 Then Iterate
            "TBDELETE &TABLE"
            If all = 'N' Then Leave
        End
        gc009 = "String '"parm#"' excluded."
        "SETMSG MSG(GC009)"
        Signal scr1
    End

    If zcmd /= '' Then Do
        mask = cmd
        Call set_up
        Signal scr1
    End

    msub = ztdsels
    Signal con1

mlt1:
    "TBDISPL &TABLE"

con1:
    "CONTROL DISPLAY SAVE"
    @dsn = dsn
    #dsn = dsn
    "TBSKIP &TABLE NUMBER(0)"
    Parse VAR #dsn acmd #dsn
    If Strip(acmd) = Strip(dsn) & csrrow /= 0 & csrpos = 'DSN' Then Do
        acmd = '/'
        "TBTOP &TABLE"
        "TBSKIP &TABLE NUMBER(&CSRROW)"
        "TBGET &TABLE"
        #dsn = Strip(dsn)
    End
    If acmd = '/' Then Do
        "DISPLAY PANEL(CSMDSPIX)"
        If rc /= 0 Then Signal scr1
        acmd = zcmd
        @dsn = Substr(acmd,1,9)Strip(dsn)
    End
    If Strip(acmd) = Strip(dsn) Then Do
        "TBTOP &TABLE"
        "TBSKIP &TABLE NUMBER(&ZTDTOP)"
        Signal scr1
    End
    If acmd = '=' Then acmd = #acmd
    Else #acmd = acmd

    Call expand_operand

    Select
        When (acmd = 'E' | acmd = 'V' |,
              acmd = 'B' | acmd = 'S') Then Do
            Parse Var #dsn #dsn .
            If volume = '******' Then Do
                x = Listdsi(#dsn)
                zdlvol = sysvolume
            End
            If acmd = 'S' Then acmd = defscmd
            If acmd = 'E' Then action = 'EDIT'
                Else If acmd = 'V' Then action = 'VIEW'
                     Else               action = 'BROWSE'
            Call On Error Name errbr1
            "&ACTION DATASET(&#DSN)"
            Call Off Error
        End
        When (acmd = 'X') Then "TBDELETE &TABLE"
        Otherwise Do
            parm1 = '%MDS'
            parm2 = '?'
            parm3 = acmd
            action= 'CSMDSN /'acmd
            parm4 = #dsn
            If volume = '*VSAM*' | volume = '******' |,
               volume = 'GDG-B' Then parm5 = ''
            Else parm5 = 'V='Strip(volume)
            Signal On Syntax Name syntax_bp    /* Trap Syntax errors */
            x = Msg('Off')
            "SELECT CMD(%CSMDSN" parm1 parm2 parm3,
                 parm4 parm5")"
syntax_bp:
            rc1 = rc
            Signal Off Syntax
            If action = 'D' Then Do
                If Listdsi(#dsn) /= 0 Then Do
                    action = 'Deleted'
                    volume = ''
                End
            End
            If rc1 = 0 Then Signal nxt1
            If rc1 > 4 Then Do
                gc009 = "Command '"acmd"' not recognised."
                "SETMSG MSG(GC009)"
                msub = 0
            End
            Else Do
                gc009  = ''
                "SETMSG MSG(GC009)"
                action = acmd
                Address TSO acmd #dsn
            End
        End
        Signal nxt1
    End

nxt1:
    "CONTROL DISPLAY RESTORE"
    If acmd /= 'X' Then Do
        message = action 'RC='rc1
        dsn = '         'dsns
        "TBMOD &TABLE"
    End
    msub = msub - 1
    If msub < 1 Then Signal scr1
    Else Signal mlt1
/*--------------------------------------------------------------------*/

    Signal scr1

exi1:
    "TBEND &TABLE"
    "CONTROL DISPLAY REFRESH"
    Exit
/*--------------------------------------------------------------------*/
/* Create table                                                       */
/*--------------------------------------------------------------------*/
set_up:
    If Substr(mask,Length(mask),1) = '.'  Then mask = mask'*'
    If Substr(mask,Length(mask),1) /= '*' Then mask = mask'.**'
    If parm1 /= '' Then type = parm1
    Else                type = 'ALL'
    mask# = mask# +1
    mask.mask# = mask
    x = Outtrap('line.',,'NOCONCAT')
    x = Lcatwld(mask type)
    x = Outtrap('Off')

    message = ''
    i       = line.0
    If i /= 0 Then Do
        Do j=1 To i
            Parse VAR line.j dsn 46 volume +6 +1 dtype .
            dsn = '         'dsn
            If dtype = 'CLUSTER' Then volume = '*VSAM*'
            If dtype = 'GDG' & volume = '' Then volume = 'GDG-B'
            "TBMOD &TABLE"
        End
        gc009 = 'Table updated with' Strip(i) 'hits.'
    End
    Else,
        gc009 = 'No hits found...'
    "SETMSG MSG(GC009)"
    "TBTOP &TABLE"

    dsnlist = "DSNLIST - Data Sets Matching "maskp"'"mask"'"
    maskp   = '+'

ext1:
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:

    trace = parse_cons('TRACE')

    px = parse_varb('/B','N')
    If px = '' Then px = default

    Parse VAR parm# parm# parm#_rest

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/*--------------------------------------------------------------------*/
parse_cons:
    Arg mask,posr,negr
    If posr = '' Then posr = 'Y'
    If negr = '' Then negr = 'N'
    y# = Wordpos(mask,parm#)
    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/*--------------------------------------------------------------------*/
parse_varb:
    Arg mask,negr
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Error condition on invalid browse member.                          */
/*--------------------------------------------------------------------*/
errbr1:
    rc1 = rc
    Call OFF ERROR
    If rc1 > 4 Then "SETMSG MSG(&ZERRMSG)"
    Return 0

/*--------------------------------------------------------------------*/
/* Expand operand to substitute quoted DSNAME for each '/' encountered*/
/* unless it is followed by a national character.                     */
/*--------------------------------------------------------------------*/
expand_operand:
    Trace Off
    #dsn = Strip(Translate(#dsn))
    dsn  = Strip(dsn,'t')
    dsns = Strip(dsn)
    If #dsn = '' Then Do
        #dsn = "'"dsns"'"
        Return 0
    End
    natchar = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$'
    dt    = 1

    Do Forever
        dt = Index(#dsn,'/',dt)
        If dt = 0 Then Leave
        #rest = Substr(#dsn,dt+1)
        #dsn  = Substr(#dsn,1,dt-1)
        If Verify(#rest,ntachar) = 1 Then,
            #dsn = #dsn || dsns || #rest
        dt = dt +1
    End
    lo = Length(dsn)
    ln = Length(#dsn)
    If lo > ln Then lm = lo
    Else            lm = ln
    Do j=0 To lm
        If Substr(dsn,lo-j,1) /= Substr(#dsn,ln-j,1) Then Leave
        If lo-j = 1 | ln-j = 1 Then Leave
    End
    If ln-j = 1 Then #dsn = ''
    Else             #dsn = Substr(#dsn,1,ln-j)
    If trace = 'Y' Then Say #dsn
    If Index(#dsn,dsns) = 0 Then Do
        #dsn = #dsn "'"dsns"'"
        Return 0
    End
    dt = 1
    lo = Length(dsns)
    Do Forever
        dt = Index(#dsn,dsns,dt)
        If dt = 0 Then Leave
        #dsn = Insert("'",#dsn,dt-1)
        If Substr(#dsn,dt+lo+1,1) /= "(" Then,
            #dsn = Insert("'",#dsn,dt+lo)
        Else Do
            dr = Index(#dsn,')',dt)
            #dsn = Insert("'",#dsn,dr)
        End
        dt = dt + lo
    End
    If trace = 'Y' Then Trace r

    Return 0
