/*            REXX                                                    */
ARG parm1 parm2 parm3
/*    TRACE r                                                         */
/**********************************************************************/
/*  Macro to establish length of a string between apostrophes in      */
/*    assembler source or whatever. "''" count as 1.                  */
/*                                  "&&" count as 1.                  */
/*    Uneven "'" or "&" are signalled as erorrs.                      */
/*    Will cater for =C'string' and =X'string'                        */
/*    Pass a parameter of 'NA' (Not Assembler) to set line length to  */
/*       strt col 1 and end in col 80                                 */
/*                                                                    */
/**********************************************************************/
    PARSE UPPER ARG parm1 parm2 parm3
    If parm1 ¬= "" Then SIGNAL byp1
    ADDRESS ISPEXEC
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm1,parm2,parm3)"
    If rc > 0 Then SIGNAL byp1
    PARSE UPPER VAR parm1 parm1
    PARSE UPPER VAR parm2 parm2
    PARSE UPPER VAR parm3 parm3

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    xxx = ''
    "ISREDIT (STATUS) = USER_STATE"
    If parm1 = "" Then Signal getcurs
    If DATATYPE(parm1) = num Then Signal testlin

testlin:
    lin = parm1
    "ISREDIT (LAST) = LINENUM .ZLAST"
    If lin > 0 & lin <= last Then Signal bypass

getcurs:
    "ISREDIT (LIN,COL) = CURSOR"
    line = ""

bypass:
    lin1 = lin
    sub = 0
    strt = 1
    If parm1 = "NA" | parm2 = "NA" Then Do
        end1 = 80
        lim1 = 80
        beg1 = 1
    End
    Else Do
        end1 = 71
        lim1 = 72
        beg1 = 16
    End

loop0:
    If sub > 5 Then Do
        gc009 = "Can only handle literals across 5 lines."
        Signal errexit
    End
    "ISREDIT (LINEX) = LINE &LIN1"
    line = line||,
          SUBSTR(linex,strt,(end1-strt)+1)
    len = LENGTH(linex)
    If len < lim1 Then Signal bypass0
    If  SUBSTR(linex,lim1,1) = "" Then Signal bypass0
    sub = sub + 1
    strt = beg1
    lin1 = lin1 + 1
    Signal loop0

bypass0:
    apost = "'"
    firstq = INDEX(line,apost)
    If  firstq ¬= 0 Then Signal lastapos
    gc009 = "No apostrophes."
    Signal errexit

lastapos:
    type = SUBSTR(line,firstq-1,1)
    scan = firstq
    lastq = 0
    found = 1
    nextq = firstq

loop1:
    nextq = INDEX(line,apost,nextq+1)
    If nextq = 0 Then Signal testlast
    lastq = nextq
    found = found + 1
    Signal loop1

testlast:
    If lastq ¬= 0 Then Signal findamp
    gc009 = "No closing apostrophes."
    Signal errexit

findamp:
    ampfnd = 0
    nexta = 0

loop2:
    nexta = INDEX(line,"&",nexta+1)
    If nexta = 0 Then Signal endamp
    ampfnd = ampfnd + 1
    Signal loop2

endamp:
    If ampfnd // 2 ¬=  0 Then Do
        gc009 = "Odd number of '&' found."
        Signal errexit
    End
    ampfnd = ampfnd % 2

getleng:
    foundx = (found % 2) - 1
    rem    = found//2
    If  rem ¬= 0 Then xxx = "Unmatched apostrophy pairing."
    len = lastq - firstq - foundx - 1 - ampfnd
    If type = "X" Then Do
        rem = len//2
        If rem ¬= 0 Then Do
            gc009 = "Odd number of characters in a hex string."
            Signal errexit
        End
        len = len % 2
        gc009 = "Length is '"len"'. "xxx
    End
    Else gc009 = "Length is '"len"'. "xxx
    "ISREDIT LABEL &LIN = .SCAN"
    "ISREDIT FIND '(' .SCAN .SCAN"
    If rc = 0 Then posit = "Y"
    "ISREDIT (LIN,COL) = CURSOR"
    col = col+1
    "ISPEXEC SETMSG MSG(GC009)"
    "ISREDIT USER_STATE = (status)"
    If posit = "Y" Then "ISREDIT CURSOR = &LIN &COL"
    Return 0

errexit:
    "ISPEXEC SETMSG MSG(GC009)"
    "ISREDIT USER_STATE = &SYSNSUB(0,(STATUS))"
    Return 4
