/******************************** REXX ********************************/
    lmd_ver='1.07'                          /* Version                */

    days_ago='-14'                          /* Days ago               */
    l1=mark(-1);l1=l1', value "'days_ago'" days'

    cname1st=0                           /* 1=ChrisSurn, 0=SurnChris  */
    alklmdat="'"$alkload()"(ALKLMDAT)'"

    n_st=mark(2)    /* Mark Start */
/*

   &TOD. &CNAME..

   LMD: Last Modified Date (since a target date).

   Get all members matching a member mask and modified since a target
   input date.

   If no target date (2nd.) parameter is passed, the value of variable
   "days_ago" (on line &l1.) is subtracted from todays date
   and used as the target date.

   In the popup screen, enter '*' on the command line or type over the
   "DD" field with an '*' to give the full change history of all members.
   (This will set a date of 01/01/1971 as not too many programs were
   written before then.)

   Parameters:
     Positional:
       1. Loadlib name to analyse, mandatory.
       2. Target date format ddmmyy, optional (default is today&DAYS_AGO.).
          To list compilation date for all programs use a data well in
          the past. Oldest usable date is 010170 as dates before that
          are considered Y2K as not too many programs were written
          befor 1971. If you get a date like 31/05/25 you can safely
          assume the program was written in 2025 and not 1925.
          Enter "*" on the command line to have the system insert date
          010171 for you, free of charge.
          May be "E" (parameter 3) if no target date supplied.
       3. E - Edit output, optional (in case EM is unavailable).
     Keyword:
       Hit the output with the EM command then enter command
       "LMD /x" where '/x' can be,
           /SC  - Sort on changed date (watch pre-millenium dates order)
           /S   - Sort on member name

   Dynamically creates input parameter entry panel from within itself.

   Customisation:
     1. "days_ago":  You may customise the REXX setting to a more site
        realistic value.  The current default value is &DAYS_AGO. days. Note
        negative value.
     2. "cname1st":  Toggle value to customise to site depending on
        christian name or surname preference.
     3. "alklmdat":  Change value to source of load module "ALKLMDAT" if
        routine '$ALKLOAD' unavailable or not used, current value is:
          &ALKLMDAT.

   Members required to package this facility. Those marked with an 'o'
   are optional, however, unavailability will hinder the scope of the
   full feature:
    REXX:
     $ALKLOAD o Point to loadlib dataset (customise)
     $ALKUVOL o Site acceptable UNIT() VOLUME() parameters if
                UNIT(SYSALLDA) is NOT acceptable.
     $DATEMAN - Date maipulation routine
     EM       o Edit member.  Converts browse session to edit/view
                session.
     LMD      - This driver

    Panels:
     ALKLMDP  - Dynamically extracted from REXX routine LMD.

    Load module:
     ALKLMDAT - Load module.


*/
n_en=mark(-2)   /* Mark End   */
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    Parse SOURCE . xenv xcmd xdd xdsn .
    If cname1st Then n_o='cname sname';Else n_o='sname cname'
    Interpret "Parse Value $Whoami() With" n_o
    days_ago=Abs(days_ago)*-1

ini1:
    w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1
    If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc
    If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me
    Parse Source . . xcmd .;x=$Br(xcmd "??");Return
    Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
    Help_me:Signal Off Syntax;#tr=Trace("o")
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<3  Then tod='Hello night-owl'
        When hh<12 Then tod='Good morning'
        When hh<18 Then tod='Good afternoon'
        Otherwise tod='Good evening'
    End
    Do i=n_st To n_en;nl=Sourceline(i);If Index(nl,'&')>0 Then nl=$evamp(nl,'&')
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

No_help_#1:
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
    Parse Upper VAR parm# parm1 parm2 parm3
    If parm1='/SC' Then Signal sort_changed
    If parm1='/S'  Then Signal sort_name

    "VGET (lmdpmask) PROFILE"
    If parm1='' Then Do
        zedlmsg='Missing load module name.';"SETMSG MSG(ISRZ001)"
        x=$Br(xcmd "??")
        Exit
    End
    If Substr(parm1,1,1)/= "'" Then source=Sysvar(Syspref)'.'parm1
    Else source=Strip(parm1,,"'")
    xx=Listdsi("'"source"' NORECALL")
    If xx<5 | sysreason=9 | sysreason=25 Then yy=;Else Do
        zedlmsg=sysmsglvl2;"SETMSG MSG(ISRZ001)"
        Exit
    End
    If sysrecfm/='U' Then Do
        zedlmsg='Can only "'xcmd'" RECFM=U datasets not RECFM='sysrecfm'.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    If Substr(parm2,1,1)='E' Then Do
        parm3=parm2;parm2=
    End

    fdate=parm2
    If fdate='' Then Parse Value $DATEMAN('E-N',Date('e'),,days_ago),
        With 1 dd +2 4 mm +2 9 yy +2
    Else Do
        Parse VAR fdate dd '/' mm '/' yy .
        If mm='' Then Parse VAR fdate dd 3 mm 5 yy 7 .
    End


scr1:
    If first_time/='N' Then Do
        Call build_panel
        first_time='N';zwinttl='Modified Date';#popr=6;#popc=12
        zedlmsg='Hello' cname'.';"SETMSG MSG(ISRZ001)";csr1='DD'
    End
    Address ISPEXEC
    zcmd=
    "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
    "DISPLAY PANEL(ALKLMDP) CURSOR(&CSR1)";rc1=rc;"REMPOP"
    If rc1/=0 Then Signal erx1
    Address
    If zcmd='?' Then Do;x=$Br(xcmd "??");Signal scr1;End
    If zcmd='*' | dd='*' Then Do;dd=01;mm=01;yy=71;End
    date=$DATEMAN('VER',dd'/'mm'/'yy)
    If Word(date,1)='Error' Then Do
        zedlmsg="Invalid date format." Subword(date,3)'.'
        csr1=Subword(date,3,1)
        "SETMSG MSG(ISRZ001)"
        Signal scr1
    End

    ztempf=$ztempf()
    Address TSO
    "ALLOC F(LMODLIST) DA ('"ztempf"') SHR REU"
    "ALLOC F(LMODLIB) SHR REU DA('"source"')"
    "CALL" alklmdat "'"dd||mm||yy","lmdpmask"'"
    Address ISPEXEC
    "FREE F(LMODLIB)"
    "LMINIT DATAID(DATAID) DDNAME(LMODLIST)"
    If Substr(parm3,1,1)='E' Then act='EDIT';Else act='BROWSE'
    "&ACT DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F(LMODLIST)";ztempf=$ztempf(ztempf,'/D')
    zedlmsg="Change parameters or use END PF key to terminate."
    Signal scr1

erx1:
    x=Msg('Off')
    Address ISPEXEC "LIBDEF ISPPLIB";Address TSO "DELETE '"dsno"'"
    "VPUT (lmdpmask) PROFILE"
    zedlmsg="Data entry screen terminated."
    "SETMSG MSG(ISRZ001)"
    Exit

sort_changed:
    "ISREDIT (status) = USER_STATE"
    "ISREDIT X ' Changed ' ALL"
    "ISREDIT SORT 28 29 D 25 26 D 22 23 D X"
    "ISREDIT RESET"
    "ISREDIT USER_STATE = (status)"
    Exit

/*--------------------------------------------------------------------*/
/* the expense of the overall size of this routine).                  */
/*--------------------------------------------------------------------*/
$evamp:Parse Arg line,chgchar
    Do While Index(line,chgchar)>0
        Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
        If Index(var,'(')>0 Then Do
            Parse VAR var var '(' vl ')'
            If Â¬Datatype(vl,'W') Then vl=Length(var)
            Interpret 'line=p1||Substr('var',1,vl)||p2'
        End
        Else Interpret 'line=p1||'var'||p2'
    End
    Return line
/*--------------------------------------------------------------------*/
/* Stand alone routines have been imported to minimise packaging (at  */
/* the expense of the overall size of this routine).                  */
/*--------------------------------------------------------------------*/
$Whoami:
    cvt=c2x(storage(10,4))
    ascb=Storage(d2x(548),4)
    asxb=Storage(d2x(c2d(ascb)+c2d(x2c(6c))),4)
    acee= Storage(d2x(c2d(asxb)+c2d(x2c(c8))),4)
    nam@=Storage(d2x(c2d(acee)+x2d('64')),4)
    name=Storage(c2x(nam@),30)
    len=c2d(Substr(name,1,1));name=Substr(name,2,len-1)
    If Index(name,',')>0 Then sep=','
    Else If Index(name,'.')>0 Then sep='.';Else sep=
    Interpret "Parse var name cname '"sep"' sname ."
    name=cname sname                        /* toggle cname/sname     */
    Return $U2Lower(name,2,'*')
$U2Lower:Arg text,pos,rep
    lc='abcdefghijklmnopqrstuvwxyz';uc='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    If Datatype(rep,'W') Then Nop;Else rep=99999
    If Datatype(pos,'W') Then Nop;Else pos=2
    rname=
    Do i=rep by -1 To 1
        Parse VAR text name text
        If pos>1 Then Do
            pref=Substr(name,1,pos-1);suff=Substr(name,pos);End
        Else Do;pref=;suff=name;End
        rname=rname pref||Translate(suff,lc,uc)
        If text='' Then Leave
    End
    Return Strip(rname text)

/*--------------------------ooo00 REXX 00ooo--------------------------*/
$ztempf:$ztempf_ver='1.08'
    Parse Upper Arg p#1,p#2,p#3,p#4;If p#4/='' Then Trace r
    Address TSO;temp_limit=30;If p#1='/F' Then temp_limit=999
    Address ISPEXEC "CONTROL ERRORS RETURN"
    If Wordpos(p#2,'/D D')>0 Then Do
        #msg=Msg('Off')
        "DELETE  '"Strip(p#1,,"'")"'"
        If Wordpos(p#3,'/FT FT')>0 Then "FREE F(ISPFILE)"
        x=Msg(#msg)
        Return 0
    End
    pref=Sysvar(Syspref);userid=Userid()
    If pref/=userid Then Do
        If pref/='' Then pref=pref'.'userid;Else pref=userid
    End
    If p#1='/CLEAR' Then Do
        #msg=Msg('Off')
        Do i=1 To temp_limit
            dsname="'"pref".$TEMP"Right(i,3,'0')".TEMP'"
            If Sysdsn(dsname)='OK' Then "DELETE" dsname
        End
        x=Msg(#msg);Return 0
    End
    If Wordpos('/PO',p#1)>0 Then Do
        po_org=1;p#1=Delword(p#1,Wordpos('/PO',p#1),1)
    End;Else po_org=0
    Do i=1 By 1 Until i>temp_limit
        dsname=pref".$TEMP"Right(i,3,'0')'.TEMP'
        If Sysdsn("'"dsname"'")/='OK' Then Leave
    End
    If i>temp_limit Then Return temp_limit
    If Wordpos('NAME',p#1)>0 | Wordpos('/N',p#1)>0 Then Nop
    Else Do
        If Wordpos(p#2,'/M M')>0 Then Do
            xx=Listdsi("'"p#1"' DIRECTORY")
            If xx<5 | sysreason=9 | sysreason=25 Then Nop;Else Signal def_file
            If sysdsorg='PO' Then po_org=1;Else po_org=0
            Parse VAR sysrecfm rf1 +1 rf2 +1 rf3
            lrecl=syslrecl;blksize=sysblksize
            pri=sysprimary;sec=sysseconds;typ=sysunits;dir=sysadirblk
            If typ='BLOCK' Then typ='BLOCK('pri')'
        End
        Else Do
def_file:   rf1='F';rf2='B';rf3=
            Address ISREDIT "(lrecl)=LRECL";If rc/=0 Then lrecl=80
            blksize=(6200%lrecl)*lrecl;pri=15;sec=15;typ='TRACKS';dir=5
        End
        rfm=Space(rf1 rf2 rf3)
        If po_org Then,
            "ALLOC DS('"dsname"')" typ "SPACE("pri","sec")",
                "DSORG(PO) DIR("dir")",
                "RECFM("rfm") LRECL("lrecl") BLKSIZE("blksize")",
                unitvol
        Else,
            "ALLOC DS('"dsname"')" typ "SPACE("pri","sec") DSORG(PS)",
                "RECFM("rfm") LRECL("lrecl") BLKSIZE("blksize")",
                unitvol
        "FREE DS('"dsname"')"
    End
    If Wordpos(p#3,'/FT FT')>0 Then "ALLOC F(ISPFILE) DS('"dsname"') SHR REU"
    Return dsname
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* $ZTEMPF - Routine to create a temporary file with name of:         */
/*    userid.$TEMPunique-suffix.TEMP - attrib PS FB 80/6160           */
/* (Attrib=FB,lrecl,blksize<6200.)                                    */
/* If "unique-suffix" > 30, you have too many temporary datasets      */
/* hanging around and a ruturn code equal to the limit will be set.   */
/* Numeric dsname indicates error - limit reached, eg.                */
/*  ztempf=$ztempf();If Datatype(ztempf,'W') Then Say ztempf 'used'   */
/* If the dataset has been created it's name will be returned. It is  */
/* the responsibility of the calling program to delete the dataset or */
/* copy it before deleting.                                           */
/* Parameters (positional):                                           */
/* 1st:                                                               */
/*   NAME   - Only the unique "dsname" will be returned without       */
/*            creation. (Useful when you want non standard RECFM and  */
/*            SPACE allocation.)                                      */
/*   /CLEAR - Clear all temp datasets.  Only the first 30 will be     */
/*            cleared, however, all the 30 datasets will be cleared.  */
/*            If "/F" was used to permit allocation of additional     */
/*            datasets, they will have to be manually deleted.        */
/*   /F     - Force past limit of 30. With this no need to check      */
/*            numeric return. Sets a max limit of 999 datasets.       */
/*   /N     - Same as "NAME".                                         */
/*   /PO    - Make a DSORG=PO dataset with 5 dir blocks.              */
/*   blank  - Create a unique dataset and return the dataset name     */
/*            (default).                                              */
/*   dsname - If the second parameter is "/D" or "/M". Must be fully  */
/*            qualified. May or may not be quoted.                    */
/* 2nd:                                                               */
/*   D      - Delete file. (Toggles message status during deletion.)  */
/*   M      - Use dsname (first parameter) as model for new one. If   */
/*            model not found, file is allocated with default values. */
/*   /D     - Same as "D".                                            */
/*   /M     - Same as "M".                                            */
/* 3rd:                                                               */
/*   FT     - Used for File Tailoring. Allocate to ddname ISPFILE.    */
/*            Deallocate if 2nd. parameter is "/D".                   */
/*   /FT    - Same as "FT".                                           */
/* 4th:                                                               */
/*   nb     - Any non-blank value turns trace on.                     */
/*--------------------------------------------------------------------*/
$ztempf_End:

/*--------------------------------------------------------------------*/
/* Allocate panel                                                     */
/*--------------------------------------------------------------------*/
build_panel:
    u=Sysvar(Sysuid);p=Sysvar(Syspref);If u/=p&p/='' Then u=p'.'u;hlq=u
    dsno=hlq'.$$$TEMP.LMD'
    #msg=Msg('Off')
    Address TSO
    "DELETE '"dsno"'"
    "ALLOC DA('"dsno"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0)" unitvol "DIR(1)",
       "RECFM(F B) REU"
    "FREE DA('"dsno"')"
    "NEWSTACK"
    Call make_mem_1;#tr=Trace('o')
    Do i=n_st To n_en;Queue Sourceline(i);End;Queue ''
    x=Trace(#tr)
    "ALLOC F(ALKLMDP) DA('"dsno"(ALKLMDP)') SHR REU"
    "EXECIO * DISKW ALKLMDP (FINIS"
    "FREE  F(ALKLMDP)"
    Address
    Address ISPEXEC "LIBDEF ISPPLIB DATASET ID('&DSNO') STACK"
    x=Msg(#msg)
    Return 0

/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_1:
    n_st = mark(2)                          /* Mark start of data     */
/*
)ATTR DEFAULT(%+_)
    _ TYPE(INPUT)   INTENS(HIGH) COLOR(RED)    HILITE(USCORE)
    @ TYPE(TEXT)    INTENS(HIGH) COLOR(YELLOW)
    + TYPE(TEXT)    INTENS(LOW)  COLOR(GREEN) SKIP(ON)
    $ TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)
    ~ TYPE(TEXT)    INTENS(LOW)  COLOR(BLUE)
)BODY EXPAND(\\) WINDOW(48,11)
%&SID%=>_ZCMD
+
+Enter parameters below for dataset:
$  '&SOURCE'
+Date......._DD+/_MM+/_YY+format@ddmmyy+
+Prog mask.._LMDPMASK+    eg. TEST* or blank
+
+Press@ENTER+to use above parameters
+or@END/CANCEL+to abandon.
+Enter@?+for tutorial.
)INIT
 &SID=&ZSYSID
)PROC
 &DD1=TRUNC(&DD,1)
 &DD2=.TRAIL
 IF (&DD1='*') &DD='*'
 IF (&DD2='*') &DD='*'
 IF (&DDÂ¬='*')
    VER(&DD,NB,RANGE,1,31)
    VER(&MM,NB,RANGE,1,12)
    VER(&YY,NB,NUM)
 VER(&LMDPMASK,NAMEF)
)END
*/
    n_en = mark(-2)                         /* Mark end of data       */
    Return 0
