/******************************** REXX ********************************/
/* )X  LINEMAC.COMMANDS(LMEXITCL) <- Output (created if NF)           */
/* )I  $$              <- Infrastructure                              */
/*--------------------------------------------------------------------*/
lmac_R:lm1_ver='V3.05'                      /* LM1 copybook version   */
    Parse SOURCE . xenv xcmd# xdd xdsn .
    def_exit_rc=0                           /* Default exit return RC */
    next_exit='LMEXITWC'                    /* Next exit in chain     */
    help_expd='LMHELPCL'                    /* Expanded HELP driver   */
                                            /* Leave blank if none.   */
    Signal Process

l_3:ms=mark(1) /* Super Search launcher
)M LMQS
)RC 4
*/; End_3:me=mark(-1);Return put_lines()

l_4:ms=mark(1) /* Repeat last LINEMAC command
)RC 4
*/; End_4:me=mark(-1);Return put_lines()

Start_User_Code:
/*--------------------------------------------------------------------*/
/* Place code between labels "Start_User_Code:" and "End_User_Code:". */
/* For valid Control Characters (CC) and syntax enter "HELP+" as a    */
/* line command.                                                      */
/*--------------------------------------------------------------------*/

l_TEST:ms=mark(1) /* For testing edit macro
)M #TEST1
)RC 4
*/; End_TEST:me=mark(-1);Return put_lines()

l_ALIG:ms=mark(1) /* Align blank delimited columns
)M #ALIGNCO
)RC 4
*/; End_ALIG:me=mark(-1);Return put_lines()

l_CJ:ms=mark(1) /* Comment JCL statement - Macro(#CJ)
)M "#CJ"
)RC 4
*/; End_CJ:me=mark(-1);Return put_lines()

l_CONS:ms=mark(1) /* Issue system console commands
)M #SYSCMDS
)RC 4
*/; End_CONS:me=mark(-1);Return put_lines()

l_DCB:ms=mark(1) /* Insert DCB info
)M #DCB
)RC 4
*/; End_DCB:me=mark(-1);Return put_lines()

l_DEL:ms=mark(1) /* Delete every nth line
)M #DELINE
)RC 4
*/; End_DEL:me=mark(-1);Return put_lines()

l_DELW:ms=mark(1) /* Delete word(s) based on search string
)M #DELWORD
)RC 4
*/; End_DELW:me=mark(-1);Return put_lines()

l_EXTC:ms=mark(1) /* Extract column and output to a dataset
)M #EXTCOL
)RC 4
*/; End_EXTC:me=mark(-1);Return put_lines()

l_FIL:ms=mark(1) /* Fill specified columns with blanks/char str
)M #FILLSTR
)RC 4
*/; End_FIL:me=mark(-1);Return put_lines()

l_INC:ms=mark(1) /* Replace/generate a string with incremental number
)M #INCRSTR
)RC 4
*/; End_INC:me=mark(-1);Return put_lines()

l_INS:ms=mark(1) /* Insert a string on every nth line
)M #INSSTR
)RC 4
*/; End_INS:me=mark(-1);Return put_lines()

l_KPW:ms=mark(1) /* Keep words(s) based on search string
)M #KEEPWRD
)RC 4
*/; End_KPW:me=mark(-1);Return put_lines()

l_PFX:ms=mark(1) /* Prefix a string on every nth line - MACRO(#PREFIX)
)M #PREFIX
)RC 4
*/; End_PFX:me=mark(-1);Return put_lines()

l_QA:ms=mark(1) /* Quick allocation of list of datasets - Macro(#QA)
)M #QA
)RC 4
*/; End_QA:me=mark(-1);Return put_lines()

l_RBL:ms=mark(1) /* Remove blanks between columns - Macro(#REMBLAN)
)M #REMBLAN
)RC 4
*/; End_RBL:me=mark(-1);Return put_lines()

l_RECX:ms=mark(1) /* TSO Receive from a member (use with XMITX $INDEX)
)M #RECX
)RC 4
*/; End_RECX:me=mark(-1);Return put_lines()

l_SFL:ms=mark(1) /* Shift left to a specified string
)M #SHIFTL1
)RC 4
*/; End_SFL:me=mark(-1);Return put_lines()

l_SFX:ms=mark(1) /* Suffix a string on every nth line
)M #SUFFIX
)RC 4
*/; End_SFX:me=mark(-1);Return put_lines()

l_SPLT:ms=mark(1) /* Split lines into one word per line - Macro(#SPLITLN)
)M "#SPLITLN"
)RC 4
*/; End_SPLT:me=mark(-1);Return put_lines()

l_SUBS:ms=mark(1) /* Substitute with value from each line of a dataset
)M #SUBSTIT
)RC 4
*/; End_SUBS:me=mark(-1);Return put_lines()

l_SWP:ms=mark(1) /* Swap columns within edited member - Macro(#SWAPCOL)
)M #SWAPCOL
)RC 4
*/; End_SWP:me=mark(-1);Return put_lines()

l_UNIT:ms=mark(1) /* Insert unit, volser and space info
)M #UNIT
)RC 4
*/; End_UNIT:me=mark(-1);Return put_lines()

End_User_Code:lm2_ver='V3.11'               /* LM2 copybook version   */
/*--------------------------------------------------------------------*/
/* DO NOT change any code after this line (or the above line).        */
/*--------------------------------------------------------------------*/

Process:
    Address ISREDIT
    "MACRO (LCMD) NOPROCESS"
    action='RETURN'
    Address ISPEXEC "CONTROL ERRORS" action
    zedsmsg=

    "(lev) = MACRO_LEVEL"
    If lev=1 Then Do
        "(lcmd1stl)=LINE .ZCSR";"(lcmd1l#,lcmd1c#)=CURSOR";
        Address ISPEXEC "VPUT (lcmd1stl,lcmd1l#,lcmd1c#,xcmd#) SHARED"
        "PROCESS RANGE" lcmd         /* Get range for command           */
        If rc>0 Then Do;Address ISPEXEC "SETMSG MSG(ISRZ002)";Exit 8;End
        "(ls) = LINENUM .ZFRANGE";"(le) = LINENUM .ZLRANGE"
        "(dw) = DATA_WIDTH"
        ima_master=1
    End
    Else Do
        Address ISPEXEC "VGET (lcmd1stl,lcmd1l#,lcmd1c#,xcmd#) SHARED"
        Parse VAR lcmd ls ',' le ',' lcmd
        ima_master=0
    End

    If lcmd='`' & ima_master Then Do
         Address ISPEXEC "VGET (prevlcmd) PROFILE"
         If prevlcmd/='' Then lcmd=prevlcmd
    End
    prevlcmd=lcmd;Address ISPEXEC "VPUT (prevlcmd) PROFILE"
    #lcmd=lcmd
    sp_chrs='!+/`%'
    sp_olay='12345'
    where_e='LINE_AFTER A LINE_AFTER B LINE_BEFORE R LINE N LINE'
    where_n='LINE_BEFORE A LINE_AFTER B LINE_BEFORE'
    If Verify(lcmd,sp_chrs,'M')>0 Then lcmd=label_gen(lcmd,'E')

    #msg=Msg('Off')
    retlab=error_off_01
    Signal on Syntax Name error_off_01
    line#s=ls;line#e=le
    #lcmd@=Address()
    "(lline)=LINENUM .ZLAST"
    i=ls-1
    Do While i<le
        i=i+1;line#=i;"(line@)=LINE" i
        Interpret 'x=l_'lcmd'()'
        Address(#lcmd@)
        If x/=0 Then Leave;Else Iterate
error_off_01:Signal Off Syntax
        If ima_master | next_exit/='' Then Do
            Signal on Syntax Name error_off_01a
            Interpret '"'next_exit'"' "ls','le','#lcmd"
            Signal Off Syntax
            If rc=4 Then Exit 4
            If rc>4 Then Do
               "CURSOR =" ls 0
                zinfo=lcmd;Address ISPEXEC "SETMSG MSG(ISRE041)";Exit 8
            End
            Exit rc
        End
        "CURSOR =" ls 0
        zinfo=lcmd;Address ISPEXEC "SETMSG MSG(ISRE041)";Exit 8
    End
    Return 0

error_off_01a:
    Signal Off Syntax
    Zedsmsg=
    Zedlmsg='Exit "next_exit" not found.  Line command terminated.'
    Address Ispexec "Setmsg Msg(Isrz001)"
    Exit

put_lines:
    i_pl=i
    col=1;maskline=;source_line=1;i_memb=0
    g_cc=                                   /* Global Control Char   */
    x_rc=def_exit_rc                        /* Exit rc set by )RC    */
    Do j=ms by 1 Until j>=me
/*      If s_b_s=j Then Do                                            */
/*          j=s_b_e;ms=s_b_e                                          */
/*          Parse VAR s_blocks s_b_s '-' s_b_e s_blocks               */
/*          Iterate                                                   */
/*      End                                                           */
        If j>me Then Leave
        If source_line  Then line=Sourceline(j)
        Else                 line=g_cc||linei.j
        cc=Substr(line,1,3)                 /* Control character     */
        Parse VAR cc cc1 +2 cc3
        where='LINE_AFTER';pmask=;smask=
        pad=Substr(' ',1,col-1)
        Select
            When cc1=')*' Then Iterate
            When cc=')A' Then Do
                col=Word(line,2);diff=Word(line,3)
                If diff='' Then diff=0
                If col='*' Then Do
                    "(linec) = LINE" ls
                    col=Verify(linec,' ')+diff;If col=0 Then col=1
                End
                Iterate
            End
            When cc=')E#' Then Do
                linex=pad||Substr(line,4)
                nol=(le-ls)
                where='LINE_AFTER'
                Do nol
                    where i_pl '=' pmask '(linex)' smask
                    i_pl=i_pl+1
                End
                Iterate
            End
            When cc1=')E' Then Do
                If g_cc='' Then linex=pad||Substr(line,4)
                Else            linex=pad||Substr(line,Length(g_cc)+1)
                where=Trans(cc3,1,where_e)
                If cc3='N' Then "LINE_BEFORE" i_pl"=NOTELINE (lcmd1stl)"
            End
            When cc1=')N' Then Do
                pmask='NOTELINE'
                where=Trans(cc3,1,where_n)
                If g_cc='' Then linex=pad||Substr(line,4)
                Else            linex=Substr(line,Length(g_cc)+1)
            End
            When cc=')C' Then Do
                rpc=0
                Parse Var line '+' c_l .
                If c_l/='' Then Do;i_pl=i_pl+c_l;Drop c_l;rpc=1;End
                Parse Var line '-' c_l .
                If c_l/='' Then Do;i_pl=i_pl-c_l;Drop c_l;rpc=1;End
                Parse Var line . c_l ',' c_c .
                If Substr(Translate(Strip(c_l)),1,1)='L' Then Do
                    "(x) = LINENUM .ZLAST";i_pl=x
                    Drop c_l;rpc=1
                End
                If rpc Then "CURSOR =" i_pl
                Iterate
            End
            When cc=')RC' Then Do
                If Datatype(word(line,2))='NUM' Then x_rc=Word(line,2)
                Else x_rc=0
                Iterate
            End
            When cc=')RL' Then Do
                "(line)=LINE .ZCSR"
                If line/=lcmd1stl Then "LINE &lcmd1l#=(lcmd1stl)"
                Iterate
            End
            When cc=')WA' Then Do
                "(iline)=LINE .ZCSR";"(,col#)=CURSOR"
                Interpret Word(line,2)'=$wordat(iline,col#)'
                Iterate
            End
            When cc=')M' Then Do
                macro=Word(line,2);macro_parms=Subword(line,3)
                Interpret "ISREDIT" macro "'"ls","le","#lcmd macro_parms"'"
                x_rc=rc
                Iterate
            End
            When cc=')H' Then Do
                xx=Subword(line,2)
                zedlmsg=zedlmsg Strip(xx,'t')
                Address ISPEXEC 'SETMSG MSG (ISRZ001)'
                Iterate
            End
            When cc=')D' Then Do
                line=Subword(line,2)
                If Strip(line)='' Then line='*'
                Do While line/=''
                    l#=Word(line,Words(line))
                    line=Delword(line,Words(line))
                    If l#/='*' Then "CURSOR =" ls+l# 0
                    "XSTATUS .ZCSR = NX"
                    "DELETE ALL NX .ZCSR .ZCSR"
                    Iterate
                End
                Iterate
            End
            When cc=')R' Then Do
                Interpret Subword(line,2)
                Iterate
            End
            When cc=')O' Then Do
                xx=Subword(line,2)
                Parse VAR xx '+' maskline
                If maskline/='' Then smask='+ MASKLINE'
                Else Do
                    Parse VAR xx maskline '+'
                    pmask='MASKLINE +'
                End
                "MASKLINE = "maskline
/*              "(linex) = LINE" ls                                   */
                linex=line@
                where='LINE'
            End
            When cc=')T' Then Do
                Parse VAR line . t1 t2 .
                If t1/='' & t1/='.' Then Interpret 'Trace' Word(line,2)
                If t2/='' Then Do
                    If t2/='C' Then cactn="CANCEL"
                    Else            cactn="RETURN"
                    Address ISPEXEC "CONTROL ERRORS" cactn
                End
                Iterate
            End
            When cc1=')I' Then Do
                i_#ms=j+1;i_#me=me
                Parse Value Subword(line,3) With s_b_s '-' s_b_e s_blocks
                xx=import_data(Word(line,2))
                If xx/=0 Then Leave
                i_memb=1;i=i+1
                Iterate
            End
            Otherwise Do
                If g_cc='' Then linex=pad||line
                Else            linex=pad||Substr(line,Length(g_cc)+1)
            End
        End
        where i_pl '=' pmask '(linex)' smask
        If cc1/=')N' Then i_pl=i_pl+1
    End
    If i_memb Then Do
         ms=i_#ms;me=i_#me;i=i-1
         Signal put_lines
    End
    If c_l/='C_L' Then Do
        c_c=c_c+Length(pad)-1;If c_c<0 Then c_c=0
        "CURSOR =" ls+c_l c_c
    End
    If maskline/='' Then "MASKLINE = ''"
    Return x_rc

import_data: Arg dsn
    dd='ID'Time('s')
    If Sysdsn(dsn)/='OK' Then Do
        zedlmsg=dsn "-" Sysdsn(dsn)"."
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
        Exit 12
    End
    Address TSO "ALLOC F("dd") DSN("dsn") SHR REU"
    Address TSO "EXECIO * DISKR" dd "(STEM linei. FINIS)"
    rc1=rc
    Address TSO "FREE F("dd")"
    j=0;me=linei.0
    source_line=0
    Parse Value Word(line,1) With '(' xx ')'
    If xx='' | xx = '*' Then g_cc=;Else g_cc=')'xx' '
    If s_b_s='' Then Return 0
    If Datatype(s_b_s,'W') & Datatype(s_b_e,'W') Then Nop
    Else Do
        Parse VAR s_b_s s_b_s '(' o1 ')';Parse VAR s_b_e s_b_e '(' o2 ')'
        If \Datatype(o1,'w') Then o1=0;If \Datatype(o2,'w') Then o2=0
        dlm=0;i_i=0;s1=0;s2=0
        Do While dlm<2
            i_i=i_i+1
            If \s1 Then Do
                If Index(linei.i_i,s_b_s,1)=1 Then Do
                    s_b_s=i_i+o1;s1=1;dlm=dlm+1
                End
            End
            If \s2 Then Do
                If Index(linei.i_i,s_b_e,1)=1 Then Do
                    s_b_e=i_i+o2;s2=1;dlm=dlm+1
                End
            End
        End
        If \s1 Then s_b_s=1
        If \s2 Then s_b_e=linei.0
    End
    j=s_b_s-1;me=s_b_e
    Return rc1

/*--------------------------------------------------------------------*/
/* Special character's lebel encriptor/decriptor                      */
/*--------------------------------------------------------------------*/
label_gen: Arg v1,v2
    sp_subs='E  P  F  B  C '                /* 'EX PL FS BQ CP'       */
    If v2/='D' Then Do;s1=sp_chrs;s2=sp_olay;End
    Else            Do;s2=sp_chrs;s1=sp_olay;End
    Do Forever
        xx=Verify(v1,s1,'M')
        If xx=0 Then leave
        ch=Substr(v1,xx,1)
        yy=Index(s1,ch)
        v1=Overlay(Substr(s2,yy,1),v1,xx)
    End
    Return v1

/*--------------------------------------------------------------------*/
/* In-built help that should not be removed/mistaken as sample code.  */
/* This uses the command feature but should stay part of the infra.   */
/* You may place your own help version in the user area.              */
/*--------------------------------------------------------------------*/
l_HELP: /* Disp avail cmds as NL in edit session. Part of LINEMAC.    */
    If ¬ima_master Then Signal Help_Exit
Help_Master: ms=mark(1)    /*

*----------------------------------------------------------------------*
*                                                                      *
* Line commands are brought to you with the compliments of Choon Lim,  *
* Doug Nadel and Alex Kara.  - 2003 -                                  *
*                                                                      *
*----------------------------------------------------------------------*

  The following line commands have been self extracted out of the
  LINEMAC macro. They are alphabetic sequenced for presentation purposes
  if the '$SORT' command is available. Nevertheless, they should be
  organised as the most used first.

  Cmd    Description
  ------ ---------------------------------------------------------------
*/;   me=mark(-1);Signal Help_Process

Help_Exit: ms=mark(1)    /*

  LMEXIT line commands:
  ---------------------

*/;   me=mark(-1);Signal Help_Process

Help_Process:
    "(caps)=CAPS";"CAPS=OFF"
    "(last)=LINENUM .ZLAST";If ls<last Then ls=ls+1
    Do i_h=ms To me
        line=(Sourceline(i_h))
        If Index(line,' LMEXIT line commands: ')>0 Then Do
            Parse SOURCE . . xcmd#_h .;zz=xcmd#_h 'line commands:'
            x=n_b('  'zz);i_h=i_h+1;line=('  'Copies('-',Length(zz)))
        End
        x=n_b(line)
    End
#tr=Trace('o')

l_HELP_R:lmh=;x_sep='01'x        /* Help return                       */
    excl='HELP_R HELP'
    If \ima_master Then excl=excl 'HELPX HELP+ / `'
    #tr=Trace(o)
    hstr=;sort=0;Signal on Syntax Name error_off_02;x=$sort();sort=1
error_off_02:Signal off Syntax
    Do i_h=1 To Sourceline()
        line=Sourceline(i_h)
        If Translate(Substr(line,1,2))/='L_' Then Iterate
        Parse Var line '_' cc ':' . '/*' line
        If Verify(cc,sp_olay,'M')>0 Then cc=label_gen(cc,'D')
        If Wordpos(cc,excl)>0 Then Iterate
        If line='' Then line='????? - Not documented...'
        If Word(line,Words(line))='*/' Then line=Delword(line,Words(line))
        If lcmd='HELP_R' Then lmh=lmh cc Strip(line) x_sep
        Else If sort Then hstr=hstr||Substr(Substr(cc,1,6) Strip(line),1,70)
             Else x=n_b('  'Substr(cc,1,6) Strip(line))
    End
    If sort Then Do
        s_hstr=$sort(hstr,,,70)
        Do While s_hstr/=''
          Parse VAR s_hstr oline +70 s_hstr;x=n_b('  'oline)
        End
    End
    If Verify(#tr,'NO')>0 Then x=Trace('r')
    If lcmd='HELP_R' Then Do;Address ISPEXEC "VPUT (lmh) SHARED";Return 4;End
    x=n_b(' ')
    If next_exit/='' Then Do
        Interpret '"'next_exit'"' " ls-1','le','#lcmd"
        "CURSOR=" ls-1 0
    End
    Return 4

l_HELPX: /* HELP eXpanded. Help for line commands in greater detail */
    Signal Off Syntax
    "(caps)=CAPS";"CAPS=OFF"
    If help_expd='HELP_EXPD' | help_expd='' Then Nop
    Else Do
         "(last)=LINENUM .ZLAST";If ls=last Then ls_o=ls;Else ls_o=ls+1
         Interpret help_expd ls_o
    End
    If next_exit/='' Then Interpret '"'next_exit'"' " ls','le','#lcmd"
    "CAPS=(caps)";"CURSOR=" ls 0
    Return 4

Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
n_b:xx=Arg(1);"LINE_BEFORE" ls "= NOTELINE (xx)";Return 0
n_bm:xx=Arg(1);"LINE_BEFORE" ls"=NOTELINE (xx) + MASKLINE";Return 0
n_a:xx=Arg(1);"LINE_AFTER"  ls "= NOTELINE (xx)";Return 0
d_b:xx=Arg(1);"LINE_BEFORE" ls "= (xx)";Return 0
d_a:xx=Arg(1);"LINE_AFTER"  ls "= (xx)";Return 0
d_o:xx=Arg(1);"LINE"        ls "= (xx)";Return 0
Trans: Arg v1,v2,v3;Return Word(v3,Wordpos(Substr(v1,1,v2),v3)+1)

l_HELP2:lm3_ver='V3.04'   /* Display HELP for building line commands. */
    "(caps)=CAPS";"CAPS=OFF"
    "(last)=LINENUM .ZLAST";If ls<last Then ls=ls+1
    "LMM ?" ls
    "CAPS=(caps)";"CURSOR=" ls-1 0;Return 4

