/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* LUR: LU in Reverse.                                                */
/*                                                                    */
/* Routine to identify TSO userids from a name. This routine          */
/* processes an extract from the RACF database (record type 0200)     */
/* and displays all hits.                                             */
/*                                                                    */
/* Routines required to package this feature. Those marked with 'o'   */
/* are optional.                                                      */
/*                                                                    */
/* REXX:                                                              */
/*   $DATEMAN o Date manipulation routine                             */
/*   $U2LOWER o Convert upper to lower case                           */
/*   LUR      - Driver                                                */
/*   LURX1    o Extract specific record types from offloaded RACF     */
/*              database. (See note #1 below.)                        */
/*   $VERNAME - Verifies names                                        */
/*                                                                    */
/* Panels:                                                            */
/*   DYNAMIC1 o Dynamic scrollable panel. Double as non-scroll        */
/*              (Without this panel, pass parameter of 'KEEP').       */
/*   LURH100  o Tutorial panel                                        */
/*   LURH200  o Tutorial panel                                        */
/*   LURH300  o Tutorial panel                                        */
/*                                                                    */
/* Programs:                                                          */
/*   IRRDBU00 o Access to program, to offload the RACF database. (See */
/*              note #1 below.)                                       */
/*                                                                    */
/* Notes:                                                             */
/*   1 - If you do not have access to these routines, you will need   */
/*       access to a pre-generated RACF database offloaded file using */
/*       program IRRDBU0 to create a file containing type 0200        */
/*       records.                                                     */
/*   2 - To find the active RACF datasets for inclusion to the LURX1  */
/*       routine, issue command:                                      */
/*           TSO RVARY LIST                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
    cname1st=0                           /* 1=ChrisSurn, 0=SurnChris  */
LUR:lur_ver='1.02'

    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse SOURCE . . xcmd .
    "ISPEXEC VGET (ZAPPLID) ASIS";tapplid='LUR'
    If zapplid/=tapplid Then Do
        "SELECT CMD(%"xcmd parm#") NEWAPPL("tapplid")"
        Return 0
    End

    dot_seperator=1                         /* Can have '.' seperator */
    ddi='I'Time('S');rt='0200'
    hlq=$alkhlq()
    lud=90                                  /* Default last used      */
    o_u='A'                                 /* Output type 'all'      */
    luvars='LURCNS,LURSNS,LURLUD'
    "VGET ("luvars") PROFILE"
    If lurlud/='' Then lud=lurlud

    Call parse_parms

    If #tr='R' Then Trace r
    tabptr=-1;rownum=0

    If infile='?' Then infile=hlq'.$RLIST.XRT'Right(rt,4,'0')
    infile="'"Strip(infile,,"'")"'"
    x=Listdsi(infile)
    If x/=0 Then Do
        gc009=infile Sysdsn(infile)
        "SETMSG MSG(GC009)"
        Exit
    End

    Address TSO "ALLOC F("ddi") DA("infile") SHR REU"

/*--------------------------------------------------------------------*/
/* The next bit tests and sets the presence of optional subroutines.  */
/*--------------------------------------------------------------------*/
    cdate='                  ';jd=
    Signal On Syntax Name syntax_bp1            /* Trap Syntax errors */
    cdate=$DATEMAN('J2E',Translate(syscreate,'.','/'))
    cdate='Circa :' Translate($DATEMAN('REV',cdate),'-','/')
    #lug=lug
    If lug<0 Then Do
        jd=$DATEMAN('E-N',,,lug)
        jd=Translate($DATEMAN('REV',jd),'-','/')
    End
syntax_bp1:
    Signal On Syntax Name syntax_bp2            /* Trap Syntax errors */
    lp=$u2lower('LP')
syntax_bp2:
    Signal Off Syntax

    #pr=5000                                /* No. records per I/O    */
    tablea='AT'Time('s');table=tablea
    tableo='OT'Time('s')

    Call constant_vars
    Call variable_vars

    o_t=' ' || ored || opink || oyellow || owhite || ogreen
    o_v='ARPYWG'                            /* Valid color options    */

    Address ISPEXEC
    "CONTROL ERRORS RETURN"
    "VGET (ZSYSID,ZSCRMAXD,ZSCREEND) ASIS"
    "SETMSG MSG(GC009)"
    If cns='' & sns='' Then Do
        If lurcns='' Then cns='*';Else cns=lurcns
        If lursns='' Then sns='xxx';Else sns=lursns
    End
    Else "CONTROL NONDISPL ENTER"
    sort_p='SNI,C,A,CNI,C,A,UID,C,A'
    dynhelp='LURH100'
    dyncsr='LINE1';dyncsp=116

    Signal screen1

extract:
    o_u='A'                                 /* Display all colors     */
    If keep/='Y' Then Do
        "TBEND &TABLE"
        "TBCREATE &TABLE KEYS(uid) NAMES(",
             "NAME,CNI,SNI,REV,DLU,SPEC,OPER",
             ") NOWRITE REPLACE"
    End
    cn=cns;sn=sns;ui=uis
    If cn='' Then cn='*'
    If Substr(cn,Length(cn),1)/='*' Then cnl=
    Else Do
       cnl=Length(cn)-1;cn=Substr(cn,1,cnl)
    End
    If sn='' Then sn='*'
    If Substr(sn,Length(sn),1)/='*' Then snl=
    Else Do
       snl=Length(sn)-1;sn=Substr(sn,1,snl)
       If Substr(sn,1,1)='*' Then Do
           sn=Substr(sn,2);snl='I'
       End
    End
    If ui='' Then ui='*'
    If Substr(ui,Length(ui),1)/='*' Then uil=
    Else Do
       uil=Length(ui)-1;ui=Substr(ui,1,uil)
       If Substr(ui,1,1)='*' Then Do
           ui=Substr(ui,2);uil='I'
       End
    End
    Address TSO
    rc1=rc
    #tr=Trace('N')
    Do While rc1/=2
        "EXECIO "#pr" DISKR "ddi" (STEM linei. OPEN)"
        rc1=rc
        If #tr='R' Then Say 'Looping' linei.0
        Do i=1 To linei.0
            Parse VAR linei.i 6 uid +8 . 75 name +20 .
            If uid='f file  ' Then Iterate
            If dot_seperator Then name=Translate(name,' ','.')
            If Index(name,',')=0 Then Parse VAR name cni sni .
            Else Parse VAR name cni ',' sni .
            If \cname1st Then Do;x=cni;cni=sni;sni=x;End
            name=cni sni
            If cn='*' Then di='Y'
            Else Do
                di='N'
                If cnl='' Then Do
                    If cn=Substr(cni,1) Then di='Y'
                End
                Else Do
                    If cn=Substr(cni,1,cnl) Then di='Y'
                End
            End
            If di='Y' Then Do
                di='N'
                If sn='*' Then di='Y'
                Else Do
                    If snl='' Then Do
                        If sn= Substr(sni,1) Then di='Y'
                    End
                    Else Do
                        If snl='I' Then Do
                            If Index(sni,sn)>0 Then di='Y'
                        End
                        Else Do
                            If sn=Substr(sni,1,snl) Then di='Y'
                        End
                    End
                End
            End
            If di='Y' Then Do
                di='N'
                If ui='*' Then di='Y'
                Else Do
                If uil='' Then Do
                    If ui=Substr(uid,1) Then di='Y'
                End
                Else Do
                    If ui=Substr(uid,1,uil) Then di='Y'
                End
            End

            If di='Y' Then Do
                    Parse VAR linei.i,
                              40 spec +1,
                              45 oper +1,
                              50 rev +1,
                             114 dlu +10
                If keep='Y' Then,
                    Say Substr(uid,1,8),
                        Substr(cni,1,20),
                        Substr(sni,1,40)
                Else Address ISPEXEC "TBADD &TABLE"
            End
        End
    End
    If #tr='R' Then Trace r

    "EXECIO 0 DISKR "ddi" (STEM linei. FINIS)"

    If keep='Y' Then Do
        "FREE F("ddi")"
        Exit
    End

    Address ISPEXEC "TBSORT &TABLE FIELDS("sort_p")"

screen0:
    Address ISPEXEC "TBTOP &TABLE"
    Address ISPEXEC "TBQUERY &TABLE ROWNUM(rownum) POSITION(tabptr)"

screen1:
    Address ISPEXEC
    Call build_line1_head
/*  #tr=Trace('N')                                                    */
    If #tr='R' Then Say 'Looping' zscrmaxd
    Do i=1 To zscrmaxd
        "TBSKIP &TABLE"
        If rc/=0 Then Do
            line1=line1||Substr(oblue||ztdmark,1,80)
            Leave
        End
        If lp='Lp' Then Parse Value $u2lower(name,2) With cno sno snox .
        Else            Parse VAR name cno sno snox .
        sno=Space(sno snox)
        If dlu/='' & lug<0 Then ld=dlu;Else ld=jd
        If #tr='R' Then,
            Say i zscrmaxd o_u uid dlu jd ld rev spec oper
        If o_u='A' Then Do
            Select
                When (rev = 'Y')  Then hl1=ored
                When (jd  > ld)   Then hl1=opink
                When (spec = 'Y') Then hl1=oyellow
                When (oper = 'Y') Then hl1=owhite
                Otherwise              hl1=ogreen
            End
        End
        line1=line1 ||,
             Substr(hl1||Substr(uid,1,8)||oblue'  '||,
             Substr(cno,1,20)'  ',
             Substr(sno,1,34) || hl1 ||,
             Substr(dlu,1,10),1,80)
    End
    If #tr='R' Then Trace r
    "TBQUERY &TABLE ROWNUM(rownum) POSITION(lastpos)"

screen2:
    zcmd=;rownum=rownum+0
    dispstat=owhite'Row' tabptr+1 'of' rownum
/*  lineh=Substr(oyellow"Userid from names"||,                        */
    lineh=Substr(oyellow"Userid Who Dat?"||,
          oyellow||Copies('-',51),1,79-Length(dispstat))||dispstat
    linec=oyellow || zsysid || owhite || '===>'ired || Substr(' ',1,75)
    "DISPLAY PANEL(DYNAMIC1)"
    If rc/=0 Then Signal fin1
    If zcmd='?' Then Do
        'SELECT PGM(ISPTUTOR) PARM(LURH100)'
        Signal screen2
    End
    dyncsr='ZCMD';dyncsp=1
/*--------------------------------------------------------------------*/
/* Test for scrolling                                                 */
/*--------------------------------------------------------------------*/
    "VGET (zscrolla zscrolln zverb)"
    If Wordpos(zverb,'UP DOWN')>0 Then Do
        Call scroll_data_ud
        Call scroll_table
        Signal screen1
    End
    If Wordpos(zverb,'LEFT RIGHT')>0 Then Do
        Call scroll_data_lr
        If result=0 Then Signal screen1;Else Signal screen2
    End

    Parse VAR zcmd cmd parm1 parm2 .
    If cmd='TRACE' Then Do
        If #tr='R' Then #tr='N';Else #tr='R'
        x=Trace(#tr)
        Signal screen2
    End
    If cmd='SORT' Then Do
        Select
            When (parm1='C') Then sort_p='CNI,C,A,SNI,C,A,UID,C,A'
            When (parm1='S') Then sort_p='SNI,C,A,UID,C,A'
            When (parm1='D') Then Do
                If parm2='D' Then sort_p='DLU,C,D,UID,C,A'
                Else              sort_p='DLU,C,A,UID,C,A'
            End
            Otherwise sort_p='UID,C,A,SNI,C,A'
        End
        "TBSORT &TABLE FIELDS("sort_p")";"TBTOP &TABLE"
        Signal screen0
    End
    If cmd='PRNT' Then Do
        Select
            When (parm1='E') Then ptype='EDIT'
            When (parm1='B') Then ptype='BROWSE'
            Otherwise ptype='VIEW'
        End
        "FTOPEN TEMP";"FTINCL LUR";"FTCLOSE";"VGET ZTEMPF"
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') OLD REU"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        If parm1/='B' Then Do
           gc009="Use you favourite routine to make a copy of",
                 "this if you want to keep it."
           "SETMSG MSG(GC009)"
        End
        "&PTYPE DATAID(&DATAID)";"LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Signal screen0
    End
    If cmd='ONLY' Then Do
        parm1=Substr(parm1,1,1)
        If parm1='' Then parm1='A'
        y=Verify(parm1,o_v)
        If y>0 Then Do
           gc009="Invalid 'ONLY' parameter '"parm1"' entered.",
                 "Valid parameters are '"o_v"'."
           "SETMSG MSG(GC009)"
           Signal screen2
        End
        o_u=parm1
        Call create_only_table
        Signal screen0
    End

    Parse VAR line1 151 xx +10 linex
    Parse VAR xx xx .
    Parse VAR line1 82 uis +8  .
    Parse VAR line1 93 cns +20 .
    Parse VAR line1 116 sns +40 .
    Parse VAR uis uis .
    Parse VAR cns cns .
    Parse VAR sns sns .
    uis=Translate(uis,,Xrange('00'x,'3f'x))
    cns=Translate(cns,,Xrange('00'x,'3f'x))
    sns=Translate(sns,,Xrange('00'x,'3f'x))
    If xx/=#lug Then Do
       If Datatype(xx,'w') Then Do
           lug=Abs(xx)*-1
           Signal On Syntax Name syntax_bp3
           jd=Translate($DATEMAN('REV',$DATEMAN('E-N',,,lug)),'-','/')
           Signal Off Syntax
           #lug=lug
           If o_u='P' Then Call create_only_table
           Signal screen0
       End
       Else Do
syntax_bp3:
           Signal Off Syntax
           lug=#lug
           gc009="Invalid 'LUG>' parameter '"xx"' entered",
                 "or function unavailable."
           "SETMSG MSG(GC009)"
           Call build_line1_head
           line1=line1 || linex
           Signal screen2
       End
    End


    If cns/='' | sns/='' Then Signal extract

fin1:
    "TBEND &TABLEA";"TBEND &TABLEO"
    lurcns=cns;lursns=sns
    lurlud=lug
    "VPUT ("luvars") PROFILE";Signal ext1

ext1:
    Address TSO "FREE F("ddi")"
    Exit

build_line1_head:
    line1=ogreenu||Substr('Userid',1,8)|| oblue' ' ||,
          oblueu ||Substr('Christian',1,20) || oblue' ' ||,
          oblueu ||Substr('Surname',1,27) || cdate || oblue
    line1=Substr(line1,1,80)
    line=iredu || Substr(uis,1,8)  || oblue' ' ||,
         iredu || Substr(cns,1,20) || oblue' ' ||,
         iredu || Substr(sns,1,32) oblue       ||,
         iredu || Substr(lug,1,12) oblue
    line1=line1 || Substr(line,1,80)

    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    Parse Upper VAR parm# parm#

    #tr=parse_cons('TRACE','R')

    keep=parse_cons('KEEP')
    infile=parse_varb('DSN=','?')
    lug=parse_varb('LUG>',lud)
    If \Datatype(lug,'w') Then lug=lud;lug=Abs(lug)*-1

    op=parse_cons('&','*','NULL')
    If op='' Then op=parse_cons('|','*','NULL')
    Parse VAR parm# cns sns uis .

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* To following are constant variables and should not change.         */
/*--------------------------------------------------------------------*/
constant_vars:
    ztdmark = Centre(' Rsend ',79,'*')
    #colors = 7                             /* Number of colors       */

    reverse = X2C('10')                     /* Reverse mask           */
    uscore  = X2C('20')                     /* Underscore mask        */
    blink   = X2C('30')                     /* Blink Mask. Note - this*/
                                            /* may not work on some   */
                                            /* terminals...           */

    ired    = X2C('01')                     /* Input RED etc...       */
    iblue   = X2C('02')
    iyellow = X2C('03')
    igreen  = X2C('04')
    iturq   = X2C('05')
    ipink   = X2C('06')
    iwhite  = X2C('07')

    ored    = D2C(#colors+C2D(ired))        /* Output RED etc...      */
    oblue   = D2C(#colors+C2D(iblue))
    oyellow = D2C(#colors+C2D(iyellow))
    ogreen  = D2C(#colors+C2D(igreen))
    oturq   = D2C(#colors+C2D(iturq))
    opink   = D2C(#colors+C2D(ipink))
    owhite  = D2C(#colors+C2D(iwhite))

    altered = X2C('AA')                     /* Altered field indicator*/

    oblueu   = Bitor(oblue,uscore)
    oyellowu = Bitor(oyellow,uscore)
    ogreenu  = Bitor(ogreen,uscore)
    iredu    = Bitor(ired,uscore)

    Return 0

/*--------------------------------------------------------------------*/
/* To following are variables dependant on the application.           */
/*--------------------------------------------------------------------*/
variable_vars:
    Nop

    Return 0

/*--------------------------------------------------------------------*/
/* This section re-positions the table to the appropriate row         */
/* according to the scroll parameters returned from ISPF.             */
/*--------------------------------------------------------------------*/
scroll_table:
    If tabptr+(qual*scrolln)>rownum Then tabptr=rownum
    Else tabptr=tabptr+(qual*scrolln)
    If tabptr<0 Then tabptr=0
    "ISPEXEC TBTOP &TABLE"
    "ISPEXEC TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen to selected line after an UP/DOWN command.       */
/*--------------------------------------------------------------------*/
scroll_data_ud:
    If zscrolla='MAX' Then Do
        If zverb='UP' Then tabptr=0;Else tabptr=rownum-(zscrolln-1)
        scrolln=0
    End
    Else scrolln=zscrolln
    If zverb='UP' Then qual=-1;Else qual=+1

    Return 0

scroll_data_lr:
    gc009="'"zverb"' is not active."
    "ISPEXEC SETMSG MSG(GC009)"

    Return 4

create_only_table:
    If o_u='A' Then Do
        table=tablea
        Return 0
    End

    "TBEND &TABLEO"
    "TBCREATE &TABLEO KEYS(uid) NAMES(",
         "NAME,CNI,SNI,REV,DLU,SPEC,OPER",
         ") NOWRITE REPLACE"
    "TBTOP &TABLEA"
    #tr=Trace('N')
    Do Forever
        "TBSKIP &TABLEA"
        If rc/=0 Then Leave
        Select
            When (o_u='R') Then,
                If rev/='Y' Then Iterate
            When (o_u='P') Then Do
                If dlu/='' & lug<0 Then ld=dlu;Else ld=jd
                If jd<=ld Then Iterate
            End
            When (o_u='Y') Then,
                If spec/='Y' Then Iterate
            When (o_u='W') Then,
                If oper/='Y' Then Iterate
            Otherwise Do
                If rev='Y' Then Iterate
                If xx='Y' Then ld=dlu;Else ld=jd
                If jd>ld Then Iterate
                If spec='Y' Then Iterate
                If oper='Y' Then Iterate
            End
        End
        If #tr='R' Then,
            Say o_u uid dlu jd ld rev spec oper
        "TBADD &TABLEO"
    End
    table=tableo;hl1=Translate(o_u,o_t,o_v)

    Return 0

//*
//*   TSO RVARY LIST
//*
//IRRDBU00 EXEC PGM=IRRDBU00,REGION=4096K,PARM=NOLOCKINPUT
//SYSPRINT DD SYSOUT=*
//INDD1    DD DISP=SHR,DSN=racf.database
//OUTDD    DD DISP=(,CATLG),DSN=racf.database.extract.XRT200,
//            SPACE=(TRK,(320,60),RLSE),UNIT=3390,
//            DCB=(BLKSIZE=4096,LRECL=4092,DSORG=PS)
//STEP1    EXEC PGM=IKJEFT01,DYNAMNBR=65,REGION=4096K
//SYSPROC  DD DISP=SHR,DSN=userid.REXX
//SYSTSPRT DD SYSOUT=X
//SYSTSIN  DD *
 PROFILE PREFIX(userid)
 %LURX1 userid.$RLIST 0200 userid.$RLIST
//
