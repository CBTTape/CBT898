/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* MC: Mass (Member) Copy.                                            */
/*                                                                    */
/* Routine to generate mass copy/rename from the $$$INDEX member.     */
/* This is executed in the form of a REXX program to be executed.     */
/* Change the second name to the newname. If the from and to datasets */
/* are the same and the from and to members are the same, copying is  */
/* bypassed (this removes the need to delete redundant lines).        */
/*                                                                    */
/* You can use this as a rename concept as you can set flag "delold"  */
/* to 1 to delete old member. All stats etc... are retained.          */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Parse SOURCE . . xcmd .
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    ima_macro=0
    If parm# /= '' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    ima_macro=1

byp1:
    "CONTROL ERRORS CANCEL"

    Address ISREDIT
    "(member)=MEMBER"
    zfrange=1;"(zlrange)=LINENUM .ZLAST"
    "(lev)=MACRO_LEVEL"
    If lev>1 Then Do
        Parse VAR parm# labf ',' labt ',' lcmd parm#
        Call Parse_parms
        zfrange=labf;zlrange=labt
    End
    Else Do
        "(last)=LINENUM .ZLAST"
        Call Parse_parms

        If all='ALL' Then Do;zfrange=1;zlrange=last;End
        Else Do
            "PROCESS RANGE C"
            "(cmd)=RANGE_CMD"
            If cmd='C' Then Do
                "(zfrange)=LINENUM .ZFRANGE"
                "(zlrange)=LINENUM .ZLRANGE"
            End
            Else Do
                If zfrange='' Then Do
                    "(zfrange)=CURSOR"
                    zlrange=zfrange
                End
            End
        End
    End
    "(DSN)=DATASET"
    memb_list=
    Do i=zfrange To zlrange
        "(line)=LINE" i
        memb_list=memb_list Strip(Substr(line,2,8))
    End
    Address TSO "NEWSTACK"
    Queue '/*   REXX  */'
    Queue "    dsnfr='"dsn"'"
    Queue "    dsnto='"dsn"'"
    Queue '    delold=0                     /* Set to 1 to delete old member */'
    Queue '    notify=0                     /* Set to 1 to notify of deletion*/'
    Queue ' '
    Queue '    memb_list=,'
    xxx=memb_list;#msg=Msg('Off')
    Do While xxx/=''
        Parse VAR xxx xx xxx
        If Sysdsn("'"dsn"("xx")'")/='OK' Then Iterate
        xx=Substr(xx,1,8)
        Queue "               '"xx xx"  ',"
    End
    x=Msg(#msg)
    Queue "               ''"
    Queue ' '
    Queue '    xxx=memb_list'
    Queue '    del_list='
    Queue "    Do While xxx/=''"
    Queue '        Parse VAR xxx old new xxx'
    Queue '        If dsnfr=dsnto & old=new Then Iterate'
    Queue "        x=$copymem(dsnfr'('old')',dsnto'('new')')"
    Queue '        If x=0 Then del_list=del_list old'
    Queue '    End'
    Queue ' '
    Queue '    If delold Then Do'
    Queue '        Address ISPEXEC'
    Queue '        "LMINIT DATAID(KILLID) DATASET(''&DSNFR'') ENQ(SHRW)"'
    Queue '        "LMOPEN DATAID(&KILLID) OPTION(OUTPUT)"'
    Queue '        xxx=del_list'
    Queue "        Do While xxx/=''"
    Queue '            Parse VAR xxx old xxx'
    Queue '            "LMMDEL DATAID(&KILLID) MEMBER(&OLD) NOENQ"'
    Queue "            If notify & rc=0 Then Say Substr(old,1,8) 'deleted'"
    Queue '        End'
    Queue '        "LMFREE DATAID(&KILLID)"'
    Queue '    End'
    Queue ''
    dd='CC'Time('s');Address ISPEXEC "VGET (ztempf)"
    Address TSO "ALLOC F("dd") DSN('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "dd" (FINIS"
    Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd")"
    Address ISPEXEC "EDIT DATAID(&DATAID)"
    Address ISPEXEC "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dd")"

    Exit

nl:Parse Arg line
    If msgt /= '' Then "ISREDIT LINE_BEFORE .ZFIRST = &MSGT (line)"
    Else               "ISREDIT LINE_AFTER  .ZLAST  = &MSGT (line)"
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#
    #tr=parse_cons('TRACE','R',,2)
    If #tr='N' Then #tr=parse_cons('/TRACE','R',,2)
    new=parse_cons('NEW',,,2)
    zip=parse_cons('ZIP',,,1)
    all=parse_cons('ALL',,,2)
    exp=parse_cons('/EXP',,,2)
    m4=parse_varb('S=','?')

    Parse VAR parm# parm1 parm2

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

build_note_1:
    n_st = mark(2)                          /* Mark next line         */
/*

`   Hello &CNAME..

    To gen JCL to export from the editted member, pass parameter of
`   "/EXP" to '&XCMD..' and delete any SELECT statements that are
    not required.

    Remember that members in the generic dataset reference it or
    should reference it and make the appropriate changes when
    importing or exporting.
    For imports, submit member "$CHANGE". Look at this member to
    get a feel for what is changed in case of exports.

                             -****-

    A wise man will always check his JCL before submitting the job.

                                               Confucious...

*/
    n_en = mark(-2)                         /* Mark prev 2 line       */

Output_data:
    Call get_name
    Call process_source

    Return 0

Help_me:
    n_st = mark(2)                          /* Mark next line         */
/*

`   Hello &CNAME..

`   This routine is used to manipulate the '&HLQ..$$' dataset.
    The primay purpose is to build the detaset, however, it can be
    used to export member into their respective "owner" datasets.

    This is achieved through the $$$INDEX member. The first
    character in the index description is used to identify the
    type/source of entry.

    The following associations are made:
          A: ASM
          C: CLIST
          I: ISPPLIB.IBM
          J: JCL.CNTL
          H: ISPPLIB.TUTORIAL
          M: ISPMLIB
          P: ISPPLIB
          R: REXX
          S: ISPSLIB
          T: ISPTLIB
          @: All members (ignores type)
    (Note, lower case characters are ignored.)

    IEBCOPY JCL will be generated with select statements to copy from
    datasets as per the above matrix into the ".$$" dataset. The
    '/EXP' parameter will reverse the above process.

    Parameters:
     ALL     - Used with the "ZIP" parameter.
               Generate statements for all members. By default only
               REXX members will be copied as they are the most
               volatile to change.

     /EXP - Generate JCL to export form the $$ dataset into the
               respective source dataset.
     NEW     - Delete/redefine the $$ dataset.
     ZIP     - Generate ZIP (AK/OS) format headder statements that
               can be used with the ZIP /R parameter to buils an all
               in one member. (Obsolete if XMITManager is available.)
     S=ccccc - String of above associations for which to copy.
               Eg. S=MPRS  copies ISPMLIB,ISPPLIB,REXX and ISPSLIB.
               Use s=@ for all members
     /R      - Build JCL in rename format. (Newname will be original
               name.)

*/
    n_en = mark(-2)                         /* Mark prev 2 line       */

    Call get_name
    Call process_source

    Return 0

process_source:
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    msgt = 'NOTELINE'
    x = nl('//*'Centre('ooo000OOOO000ooo',68,'-')'*')

    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,1) = chgchar Then Do Forever
            line = ' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        x = nl(line)
    End

    x = nl('//*'Copies('-',68)'*')
    "ISREDIT CAPS = (caps)"

    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Signal Off Syntax;Interpret synact;Interpret Signal synret

get_name:
    Signal On Syntax Name syntaxerr
    synret = 'ret_syntax_1'
    synact = "cname = 'there'"
    cname = $Whoami('C')
    Signal Off Syntax
ret_syntax_1:
    Return 0
