/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Edit macro to generate MCC statement at the start/end of a PaySys  */
/* MODLIB member.                                                     */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC
    ARG parm#
    Parse SOURCE . . xcmd .
    If parm# /= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    Parse Upper VAR parm# parm1 parm2 .
    If parm1 = '??' Then Signal help
    If parm1 = '?' Then Do
helpwm:
        Address TSO "%BR MCC ??"
        Exit
    End

    Call parse_parms

    "ISREDIT (line) = LINE .ZFIRST"
    If Substr(line,1,2) = ',,' & rep /= 'Y' Then Do
        gc009 = "Already has an 'MCC' statement. Pass 2nd. parameter",
                'of "/R" to replace.'
        Signal msg1
    End
    "ISREDIT (status) = USER_STATE"
    "ISREDIT CURSOR = 1 0"

    "ISREDIT (member) = MEMBER"
    "ISREDIT (dsn)    = DATASET"

    If mcc# = '' Then Do
        "ISREDIT F ' DFHMDF ' 9 FIRST"
        If rc = 0 Then Do
            mcc# = 'MAP'
            Signal process
        End
        gc009 = "Cannot identify MCC type. Pass it as a parameter",
                "from the presented list."
        "ISPEXEC SETMSG MSG(GC009)"
        Signal helpwm
    End

process:
    Call set_matrix

    hlq = Strip(Substr(dsn,1,Lastpos('.',dsn)-1))
    srclib = "'"hlq".SRCLIB("member")'"
    If Sysdsn(srclib) /= 'OK' Then act = 'ADD'
    Else                           act = 'UPD'
act = 'UPD'
    xx = Index(matrix1,' 'mcc#' ')
    If xx = 0 Then Do
        gc009 = "'"mcc#"' entry not defined to system. Use one",
                "from the presented list."
        "ISPEXEC SETMSG MSG(GC009)"
        Signal helpwm
    End
    ent = Substr(matrix1,xx)
    Parse var ent . ':' sp .

    If sp = 0 Then spaces = ''
    Else spaces = Substr(' ',1,sp)
    line = Substr(',,'spaces || member,1,14),
           Substr('EXC 'act,1,33),
           mcc# '000100'
    If rep = 'Y' Then,
        "ISREDIT LINE .ZFIRST = (line)"
    Else Do
        "ISREDIT LINE_BEFORE .ZFIRST = (line)"
        "ISREDIT LINE_AFTER  .ZLAST = ',,EMOD'"
    End
    gc009 = "MCC statement added."
    If pp = 'Y' Then Do
        xx = Substr(Userid(),3)
        line =,
         '++++++*-   -        - DISPLAY TAX INVOICE ON SCREEN LINE 22'
        "ISREDIT LINE_AFTER 1 = (line)"
        line =,
         '++++++*-   -        - TDB CHANGES (TDB-'xx'1 IN COLUMN 73 80)'
        "ISREDIT LINE_AFTER 1 = (line)"
        gc009 = gc009 "Update the comments."
    End
    gc009 = "MCC statement added."

msg1:
    "ISPEXEC SETMSG MSG(GC009)"
get_out:
    "ISREDIT USER_STATE = (status)"
    Exit

help:
    Call set_matrix
    nameS = Whois(Userid(),'/R')
    Parse VAR names name sname

    Say '*'
    Say '* Hello' name'. The following are the valid MCC parameters:'
    Say '*'
    Say '*'
    Do Forever
        Interpret "Parse VAR matrix1 line +"ll+1 "matrix1"
        Say line
        If matrix1 = '' Then Leave
    End
    Say '*'
    Exit

set_matrix:
    m1 = ' ',
       'ACC     Assembler On-line copybook                 :0',
       'ACP     Assembler On-line program                  :0',
       'ASM     Assembler Batch program                    :0',
       'CCC     CICS COBOL On-line copybook                :2',
       'CCP     CICS COBOL On-line program                 :0',
       'CCX     CICS COBOL On-line program (Xpedited)      :0',
       'COB     COBOL Batch program                        :0',
       'DAT     Control records for Data                   :3',
       'DCA     Assembler dynamically-called program - CICS:0',
       'DCC     COBOL dynamically-called program - CICS    :1',
       'DMA     Assembler dynamically-called program       :0',
       ''
    m2 =,
       'DMC     COBOL dynamically-called program           :1',
       'ENH     Enhancements (changes) to Source code      :0',
       'JCL     Job Control Language statements            :0',
       'JCS     Job Control Language statements - sequenced:0',
       'MAP     On-line Map source statements              :1',
       'RMA     Assembler called or relocatable subroutine :0',
       'RMC     COBOL called or relocatable subroutine     :0',
       'OTH     Other                                      :0',
       'SBA     Assembler Batch copybook                   :2',
       'SBC     COBOL Batch copybook                       :2',
       ''
    matrix1 = m1 || m2
    ll = Length('ACC     Assembler On-line copybook                 :0')

    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    rep = parse_cons('/R')
    pp = parse_cons('+')                    /* ++ comments            */

    Parse VAR parm# mcc# .

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

