/*--------------------------ooo000 REXX 0ooo--------------------------*/
/*                                                                    */
/* MM: Member Manager.                                                */
/*                                                                    */
/* Compares one PDS with another using last modified details.  For    */
/* further details refer to bottom of member or invoke using the "?"  */
/* parameter.                                                         */
/*                                                                    */
/*--------------------------------------------------------------------*/
mm_ver='2.28'
    bup_suff='#'                            /* Back-up suffix         */
    pop_seq=10                              /* Pop-up sequence.=0 off */
    Arg Parm#
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal ini1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

ini1:
/*  "CONTROL ERRORS CANCEL"                                           */
    If ima_macro Then Do
        "ISREDIT (last)=LINENUM .ZLAST";"ISREDIT (lev)=MACRO_LEVEL"
        If lev>1 Then Parse VAR parm# zfrange ',' ztrange ',' lcmd parm#
        Else Do
            "ISREDIT PROCESS RANGE C";"ISREDIT (cmd)=RANGE_CMD"
            If cmd='C' Then  "ISREDIT (zfrange)=LINENUM .ZFRANGE"
            Else zfrange=0
        End
        If zfrange>0 Then Do
            If zfrange=last Then ztrange=zfrange
            "ISREDIT (dsn1)=LINE" zfrange;"ISREDIT (dsn2)=LINE" ztrange
            dsn=XB('/PV',dsn1)
            If dsn='' Then dsn=XB('/QV',dsn1)
            If dsn/='' Then Do
                dsn=Strip(dsn,,"'")
                Parse VAR dsn dsn vol;Parse VAR vol '(' vol ')'
                If vol/='' Then vol='='vol
                dsn1="'"Strip(dsn,,"'")"'"vol
            End
            dsn=XB('/PV',dsn2)
            If dsn='' Then dsn=XB('/QV',dsn2)
            If dsn/='' Then Do
                dsn=Strip(dsn,,"'")
                Parse VAR dsn dsn vol;Parse VAR vol '(' vol ')'
                If vol/='' Then vol='='vol
                dsn2="'"Strip(dsn,,"'")"'"vol
            End
            parm#=dsn1 dsn2 parm#
        End
    End
    Parse SOURCE . . xcmd .
    "VGET (zapplid) ASIS";tapplid='CSM'
    If zapplid/=tapplid Then Do
        "SELECT CMD(%"xcmd parm#") NEWAPPL("tapplid")";Return 0
    End
    "VGET (mmchperm) PROFILE";"VGET (ZDLVOL) SHARED"
mmchperm=      /* Delete this entry to remember last 'permit' setting */
    #sprf=Sysvar(Syspref)
    Signal on Syntax Name error_off_$ALKHLQO
error_off_$ALKHLQO:Signal off Syntax

    If Wordpos(mmchperm,'1 2 * 0')=0 Then Do
        mmchperm=0;"VPUT (mmchperm) PROFILE"
    End
    If Wordpos('/V',parm#)>0 Then Do
        gen_vol=1;parm#=Delword(parm#,Wordpos('/V',parm#),1)
    End;Else gen_vol=0
    If Wordpos('/OB',parm#)>0 Then Do
        olb=1;parm#=Delword(parm#,Wordpos('/OB',parm#),1)
    End;Else olb=0
    Parse VAR parm# dsn1 dsn2 idisp;o_idisp=idisp
If Wordpos(dsn1,'?D ?d')>0 Then Do
    mmv=mm_ver
    helpvars='mmv,xcmd,#sprf';"VPUT (helpvars,"helpvars") SHARED"
    x=helpdrvr('MMDH');Exit
End
    If Wordpos(dsn1,'? ??')>0 Then Do;x=Help_me(dsn1);Exit;End
    y2_base='50'                            /* 2 byte yy base -> yyyy */

    Parse Value '1' With lock #dsn1 #dsn2 vol1 vol2 v1 v2

    If Substr(dsn1,1,1)="'" Then dsn1=Space(Translate(dsn1,' ',"'"),0)
    Else dsn1=#sprf'.'dsn1
    If Index(dsn1,'=')>0 Then Do
        Parse VAR dsn1 dsn1 '=' v1;If v1='' Then v1=zdlvol
    End
    If dsn2='' Then dsn2=dsn1'.BACKUP'
    Else Do
        If Substr(dsn2,1,1)="'" Then dsn2=Space(Translate(dsn2,' ',"'"),0)
        Else dsn2=#sprf'.'dsn2
        If Index(dsn2,'=')>0 Then Do
            Parse VAR dsn2 dsn2 '=' v2;If v2='' Then v2=zdlvol
        End
    End
    If gen_vol Then Do
        If v1='' Then If Listdsi("'"dsn1"'")<5 Then v1=sysvolume
        If v2='' Then If Listdsi("'"dsn2"'")<5 Then v2=sysvolume
    End

    table='MM'Time('s')
    paneln='MMP';delpan='$MEMBDEL';panel=paneln;buppan='$MEMBBUP'
    #sp='MEMBER,C,A';@sp=#sp
    csr2=;refresh=1;ftime=1;parm1=;psel=
    cs=;offload=;#idisp=                    /* Copy simulation (NB)   */
    disp='ALL'
    x=memb_list(,,,,'R')
    If x/=0 Then Do
        zedlmsg='Table could not be created. rc='rc'.'
        "SETMSG MSG(ISRZ001)"
        Exit 8
    End
    ignore_auto=;Signal on Syntax Name error_off_MM$;ignore_auto=mm$('R')
error_off_MM$:Signal off Syntax

dis2:  zcmd=
dis2a: sel=
    If refresh Then Do;cmd='R';Signal dis2b;End
    dsn1="'"Strip(dsn1,,"'")"'";dsn2="'"Strip(dsn2,,"'")"'"
    If olb Then "CONTROL NONDISPL ENTER"
    "TBDISPL &TABLE PANEL(&PANEL) CURSOR(&CSR2)"
    If rc>4 Then Signal exi2
    If olb Then Do
        olb=0
        zcmd='O B'
    End
    If zcmd='?D' Then Do
        mmv=mm_ver
        helpvars='mmv,xcmd,#sprf';"VPUT (helpvars,"helpvars") SHARED"
        x=helpdrvr('MMDH');Signal dis2
    End
    dsn1=Strip(dsn1,,"'");dsn2=Strip(dsn2,,"'");dsn1u=;dsn2u=
    "VGET (zverb)"
    If zcmd='*>' Then zcmd='>*'
    Parse Upper VAR zcmd cmd parm1 parm2 .
    Parse VAR cmd cmd1 +1 1 cmd2 +2 1 cmd3 +3 1 cmd4 +4 1 cmd5 +5 .
    If cmd='TRACE' Then Do
        Select
            When parm1='OFF' Then #tr=Trace('N')
            When parm1='ON'  Then #tr=Trace('R')
            Otherwise Do
                #tr=Trace()
                If Verify(#tr,'NO')=0 Then #tr=Trace('R')
                Else                       #tr=Trace('N')
            End
            #tr=Trace()
        End
        Signal dis2
    End
    If cmd='/V' Then Do
        zedlmsg="Volume detrmination/generation turned ON."
        If v1='' Then If Listdsi("'"dsn1"'")<5 Then v1=sysvolume
        If v2='' Then If Listdsi("'"dsn2"'")<5 Then v2=sysvolume
        gen_vol=1
        Signal errorfnd
    End
    If cmd='/VO' Then Do
        zedlmsg="Volume detrmination/generation turned OFF."
        v1=;v2=;gen_vol=0
        Signal errorfnd
    End
    If cmd2='CH' | cmd3='CPL' Then Do
        Select
            When Wordpos(parm1,'1 2 * 0')>0 Then mmchperm=parm1
            When parm1='ON'  Then mmchperm='*'
            When parm1='OFF' Then mmchperm=0
            Otherwise If parm1='' Then Do
                If mmchperm=0 Then mmchperm='*';Else mmchperm=0
            End
        End
        If mmchperm=0 Then xx='NOT ';Else xx=
        zedlmsg="Copy/synchronise members" xx"permitted - level("mmchperm")."
        "VPUT (mmchperm) PROFILE"
        Signal errorfnd
    End
    If cmd2='PR' Then Do
        "TBTOP &TABLE"
        Address TSO "NEWSTACK"
            Queue 'Dsn 1:'Substr(dsn1,1,44) vol1
            Queue 'Dsn 2:'Substr(dsn2,1,44) vol2
            Queue '  Name   Changed-            Size   <> Changed-           ',
                  'Size    Userid '
            Queue '-------- ---------------- --------- -- ----------------',
                  '--------- -------'
        Do Forever
            If disp='SCAN' Then "TBSCAN &TABLE NEXT";Else "TBSKIP &TABLE"
            If rc/=0 Then Leave
            Queue Left(member,8) Left(dmdate1,10) Left(lmtime1,5),
                  Right(size1,5) Left(luser1,7) latestd,
                  Left(dmdate2,10) Left(lmtime2,5) Right(size2,5) Left(luser2,7)
        End
        Queue ''
        dd='MM'Time('s');ztempf="'"$ztempf()"'"
        Address TSO "ALLOC F("dd") DSN("ztempf") SHR REU"
        Address TSO "EXECIO * DISKW "dd" (FINIS"
        "LMINIT DATAID(DATAID) DDNAME("dd")"
        "EDIT DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE F("dd")";xx=$ztempf(ztempf,'D')
        "TBTOP &TABLE"
        Signal errorfnd
    End
    If cmd2='BU' Then Do
        Parse VAR cmd3 3 which +1;If which='' Then which=1
        If Wordpos(which,'1 2 *')=0 Then Do
            zedlmsg='Invalid ''BU'' suffix "'which'" used.'
            Signal errorfnd
        End
        If which='*' Then which='1 2'
        zedlmsg='Dataset(s)' which 'backed up sucessfully into'
        tag='DSN'Word(which,1)
        Do While which/=''
            Parse VAR which dsn# which
            Interpret 'dsn=dsn'dsn#';vol=vol'dsn#
            dsnbu=dsn'.BU'$DATEMAN('REV',,2,'D')
            If Length(dsnbu)>44 Then Do
                zedlmsg="Backup to dataset '"dsnbu"' would be >44",
                        "characters. Backup manually into an",
                        "appropriate name of your choosing."
                tag='DSN'dsn#
                Signal errorfnd_tag
            End
            If Wordpos(parm1,'B E V')>0 Then Do
                Word('EDIT VIEW BROWSE',Wordpos(parm1,'E V B')),
                     "DATASET('"dsnbu"')"
                If rc<=4 Then Iterate
                zerrsm=;"SETMSG MSG(&ZERRMSG) msgloc(DSN"dsn#")"
                Signal dis2
            End
            xx=Listdsi("'"dsn"'" vol "DIRECTORY SMSINFO")
            Address TSO "DELETE '"dsnbu"'"
            If sysunits='BLOCK' Then sysunits='BLOCK('syslrecl')'
            Parse VAR sysrecfm rfm1 +1 rfm2 +1 rfm3 +1
            Address TSO "ALLOC DA('"dsnbu"') UNIT("sysunit")" sysunits vol,
              "SPACE("sysprimary","sysseconds") DSORG(PO) DIR("sysadirblk")",
              "RECFM("rfm1 rfm2 rfm3") LRECL("syslrecl") BLKSIZE("sysblksize")"
            Address TSO "FREE DA('"dsnbu"')"
            Parse VAR vol '(' volx ')'
            xx=$Copymem(dsn'(*)='volx,dsnbu)
            If xx/=0 Then Do
                zedlmsg='Backup of dataset' dsn# 'failed, rc='xx'.'
                tag='DSN'dsn#
                Signal errorfnd_tag
            End
            zedlmsg=zedlmsg dsnbu
        End
        zedlmsg=zedlmsg'.'
        Signal errorfnd_tag
    End
    If cmd='?' | cmd='HELPMM' Then Do
        x=Help_me('?');Signal dis2
    End
    If cmd2='FL' Then Do
       xx=dsn1;dsn1=dsn2;dsn2=xx;cmd='R'
    End
    Parse VAR cmd xx +3 vn '=' volser
    If xx='VOL' Then Do
        x=Listdsi("'SYS1.LINKLIB' VOLUME("volser")")
        If sysreason=22 Then Do
           zedlmsg="Volume '"volser"' not mounted or "||,
                   "defined to the system."
           Signal errorfnd
        End
        Else Interpret 'v'vn'=volser'
        cmd=
    End

dis2b:
    If Index(dsn1,'*')>0 Then Do
        xx=dslist_sel(dsn1)
        If xx/='Error' Then dsn1=xx
    End
    #m1=Msg('Off')
    If v1/='' Then Do
        vol1='VOLUME('v1')'
        xx=Listdsi("'"dsn1"' DIRECTORY" vol1)
        If xx>4 Then Do
            refresh=0
            zedlmsg="Dataset '"dsn1"' not found on" vol1"."
            Signal errorfnd
        End
    End
    Else Do
        If Listdsi("'"dsn1"' DIRECTORY")>4 Then Do
            zedlmsg=Sysdsn("'"dsn1"'")
            csr2='DSN1';refresh=0
            ulock1='Y'
            Signal errorfnd
        End
        If gen_vol Then Do
            v1=sysvolume
            vol1='VOLUME('v1')'
        End;Else vol1=
    End
    sv1=sysvolume;#m1=sysmembers;rf1=sysrecfm
    t_1=sysunits;p_1=sysprimary;s_1=sysseconds;d_1=sysadirblk

    If Index(dsn2,'*')>0 Then Do
        xx=dslist_sel(dsn2)
        If xx/='Error' Then dsn2=xx
    End
    If v2/='' Then Do
        vol2='VOLUME('v2')'
        xx=Listdsi("'"dsn2"' DIRECTORY" vol2)
        If xx>4 Then Do
            refresh=0
            zedlmsg="Dataset '"dsn2"' not found on" vol2"."
            Signal errorfnd
        End
    End
    Else Do
        If Listdsi("'"dsn2"' DIRECTORY")>4 Then Do
            zedlmsg=Sysdsn("'"dsn2"'")
            csr2='DSN2';refresh=0
            ulock2='Y'
            Signal errorfnd
        End
        If gen_vol Then Do
            v2=sysvolume
            vol2='VOLUME('v2')'
        End;Else vol2=
    End
    sv2=sysvolume;#m2=sysmembers;rf2=sysrecfm
    t_2=sysunits;p_2=sysprimary;s_2=sysseconds;d_2=sysadirblk

rebuild_table:
    csr2=;refresh=0;r_all=1
    If Substr(idisp,1,1)='E' Then Do
        #idisp=idisp
        r_all=0;parm1=idisp;idisp=;cmd=
    End
    If Substr(cmd,1,1)='R' Then Do
        If parm1/='' Then Do
            If Substr(parm1,1,1)='E' Then r_all=0;Else r_all=1
            x=table_scan()
            If x=0 Then Do
                zedlmsg='Table refreshed.';Signal errorfnd
            End
        End
        #dsn1=;#dsn2=
        If ftime Then Do
           zedlmsg='Hi' $whoami('C')'. Gimme a "?" to tiptoe',
                   'throught the tulips with you.'
        End
        Else zedlmsg='Table refreshed.'
        "SETMSG MSG(ISRZ001)"
/*      cmd=;zcmd=                                                    */
    End
    ftime=0
rebuild_table_S0:
    If #dsn1/=dsn1 | #dsn2/=dsn2 Then Do
        "TBEND &TABLE"
        lmdate1=;lmtime1=;lmdate2=;lmtime2=;dmdate1=;dmdate2=
        #dsn1=dsn1;#dsn2=dsn2
        range=#m1;x=memb_list(dsn1,1,vol1,rf1,'N')
        range=#m2;x=memb_list(dsn2,2,vol2,rf2)
        "TBSORT &TABLE FIELDS(&@SP)"
        x=table_scan()
        Signal dis2
    End

    If cmd='' Then Signal no_command
    If cmd3='CAN' Then Signal ext2

    If cmd='L' Then Do
        If parm1='' Then Do
            zedlmsg = 'Missing Locate parameter.'
            "SETMSG MSG(ISRZ001)"
            Signal dis2
        End
        "TBTOP &TABLE"
        Parse VAR parm1 member '*' .
        member=member'*'
        "TBSCAN &TABLE ARGLIST(MEMBER) CONDLIST(GE)"
        If member/=parm1 Then "TBSKIP &TABLE NUMBER(-1)"
        Signal dis2
    End

    If cmd2='SO' Then Do
        zedlmsg='Table sorted.'
        Select
           When (parm1='D1') Then sp='LMDATE1,Y1,D,LMTIME1,C,D,MEMBER,C,A'
           When (parm1='D2') Then sp='LMDATE2,Y1,D,LMTIME2,C,D,MEMBER,C,A'
           When (parm1='D1') Then sp='DMDATE1,Y1,D,LMTIME1,C,D,MEMBER,C,A'
           When (parm1='D2') Then sp='DMDATE2,Y1,D,LMTIME2,C,D,MEMBER,C,A'
           When (parm1='U1' ) Then sp='LUSER1,C,D'
           When (parm1='U2' ) Then sp='LUSER2,C,D'
           When (parm1='M' ) Then sp='MEMBER,C,A'
           Otherwise Do
               sp=#sp
               zedlmsg='Valid sort parameters are D1,D2,U or M. Default',
                       '"M" substituted.'
           End
        End
        @sp=sp
        "TBSORT &TABLE FIELDS(&SP)";"TBTOP &TABLE";Signal errorfnd
    End

    If cmd4='COMP' Then Do
        x=$compare(dsn1'='v1,dsn2'='v2)
        zedlmsg='Comparisson finished.'
        Signal errorfnd
    End

    If cmd1='O' Then Do
        eq=1;lmatch=;Parse Upper VAR parm1 parm1u 1 p1u1 +1
        If Wordpos(parm1u,'=> <=')>0 Then p1u1='U'
        Select
            When p1u1='B' Then lmatch='<>'
            When p1u1='A' Then lmatch='A'
            When Wordpos(parm1u,'** EQ * = == E')>0 Then lmatch='**'
            When Wordpos(parm1u,'< <-')>0 Then lmatch='<-'
            When Wordpos(parm1u,'> ->')>0 Then lmatch='->'
            When Wordpos(parm1u,'U1 <=')>0 Then lmatch='<='
            When Wordpos(parm1u,'U2 =>')>0 Then lmatch='=>'
            When parm1u='<<' Then lmatch='<<'
            When parm1u='>>' Then lmatch='>>'
            Otherwise eq=0
        End
        "TBTOP &TABLE"
        #tr=Trace('o')
        If lmatch='A' Then Do
            disp='ALL';member='*'
            namecond='MEMBER,GE'
        End
        Else Do
            oh_count=0
            Do While rc=0
                "TBSKIP &TABLE";If rc/=0 Then Leave
                ohit='N'
                If eq Then Do
                    If lmatch='<>' Then Do
                        If Index(latestd,'=')=0 Then ohit='Y'
                    End
                    Else Do
                        Select
                            When p1u1='U' & latestd=lmatch Then ohit='Y'
                            When latest=lmatch Then ohit='Y'
                            When lmatch='<<' & exist1=001 Then ohit='Y'
                            When lmatch='>>' & exist2=001 Then ohit='Y'
                            Otherwise Nop
                        End
                    End
                End
                Else If latest/='**' Then Do
                    Select
                        When #idisp='E1' & latestd='=>' Then ohit='N'
                        When #idisp='E2' & latestd='<=' Then ohit='N'
                        Otherwise ohit='Y'
                    End
                End
                If #tr='R' Then,
                    Say member ohit latest latestd lmatch               '<',
                If ohit='Y' Then oh_count=oh_count+1
                "TBMOD &TABLE"
            End
            disp='SCAN';"TBTOP &TABLE";"TBVCLEAR &TABLE";ohit='Y'
            namecond='OHIT,EQ'
            "TBSARG &TABLE NAMECOND("namecond")"
            zedlmsg=oh_count 'matches found.'
        End
        x=Trace(#tr)
        "TBTOP &TABLE"
/*      zedlmsg='Exclusions made. Use "REFRESH" command to restore',  */
/*              'member list.'                                        */
        Signal errorfnd
    End
    If cmd3='AO=' Then Do
        Parse VAR cmd 'AO=' xx .
        If Wordpos(xx,'E V B')>0 Then Do
            If offload='' Then Do
                zedlmsg="Cannot process until an offload dataset is",
                        'allocated using the "AO=''dataset''" command.'
                Signal errorfnd
            End
            yy=Listdsi("'"offload"' DIRECTORY")
            If sysmembers=0 Then Do
                zedlmsg="Empty dataset '"offload"'.";Signal errorfnd
            End
            Word('EDIT VIEW BROWSE',Wordpos(xx,'E V B')) "DATASET('&OFFLOAD')"
            Signal command_processed_dont_scroll
        End
        If xx='' Then Do
            zedlmsg="Offload dataset is '"offload"'.";Signal errorfnd
        End
        If Index(xx,'*')>0 Then Do
            xx="'"dslist_sel(xx)"'"
            If xx="'Error'" Then Do
                zedlmsg="Dataset not selected.";Signal errorfnd
            End
        End
        offload=xx
        If Substr(offload,1,1)/="'" Then offload=#sprf'.'offload
        offload=Strip(offload,,"'")
        yy=Listdsi("'"offload"' DIRECTORY")
        If yy<5 | sysreason=9 | sysreason=25 Then Do
            If sysdsorg/='PO' Then Do
                zedlmsg="Affload dataset must be partitioned. Selected",
                        "dataset '"offload"' is DSORG("sysdsorg")."
                Signal errorfnd
            End
            t_3=sysunits;p_3=sysprimary;s_3=sysseconds;d_3=sysadirblk
        End
        Else Do
            If Substr(t_1,1,1)='C' Then Do;p_1=p_1*15;s_1=s_1*15;End
            If Substr(t_2,1,1)='C' Then Do;p_1=p_2*15;s_1=s_2*15;End
            If p_1>p_2 Then Do;p_3=p_1;s_3=s_1;d_3=d_1;End
            Else  Do;p_3=p_2;s_3=s_2;d_3=d_2;End
        End
        If parm1='/R' Then Address TSO "DELETE '"offload"'"
        If Sysdsn("'"offload"'")/='OK' Then Do
            Signal on Syntax Name error_off_$ALKUVOL
            unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL()
error_off_$ALKUVOL:Signal off Syntax
            Address TSO "ALLOC DSN('"offload"') TRACKS" unitvol,
               "SPACE("p_3","s_3") LRECL(80) BLKSIZE(0) DIR("d_3")",
               "RECFM(F B) NEW"
            If rc/=0 Then Do
                offload=
                zedlmsg="Creation of offload dataset '"offload"' failed,",
                        "RC="rc".";Signal errorfnd
            End
            Address TSO "FREE DSN('"offload"')"
        End
        zedlmsg="Offload dataset '"offload"' will be used for any",
                '"On" selections.'
        Signal errorfnd
    End
    If cmd2='EO' Then Do
        If offload='' | Sysdsn("'"offload"'")/='OK' Then Do
            zedlmsg="Offload dataset not defined or does not exist."
            Signal errorfnd
        End
        "EDIT DATASET('"offload"')"
        Signal command_processed_dont_scroll
    End
    If cmd2='LO' Then Do
        If lock Then lock=0;Else lock=1
        zedlmsg='Dataset lock has been toggled.';Signal errorfnd
    End

    Parse VAR cmd s1 +1 s2
    If s2='' Then s2='s2';If Verify(s2,'12')>0 Then s2=1
    Interpret 'dsn=dsn's2';vol=vol's2';vo=sv's2
    Select
        When s1='S' Then action='BROWSE'
        When s1='B' Then action='BROWSE'
        When s1='E' Then action='EDIT'
        When s1='V' Then action='VIEW'
        Otherwise        action=
    End
    If action/='' Then Do
        zdlvol=vo
        "&ACTION DATASET('&DSN')" vol
        Signal dis2
    End
    s2=Substr(cmd,2,1)

    If Wordpos(member,ignore_auto)>0 Then resmemb=1;Else resmemb=0
    If (Wordpos(cmd1,'> < *')>0 & mmchperm/='*') | resmemb Then Do
        If cmd/='*' Then xtra=
        Else xtra=' Ensure you wanted "*" not ">*" else enter ">>*" or "*>".'
        zedlmsg='Press [ENTER] to execute global command "'cmd'"',
                'or use your [END] PF key to abandon process.'xtra
        "SETMSG MSG(ISRZ001)"
        "ADDPOP ROW(4) COLUMN(10)"
        "CONTROL DISPLAY SAVE"
        #zcmd=zcmd;zcmd=cmd
        "TBDISPL &TABLE PANEL(&PANEL) CURSOR(ZCMD)"
        rc1=rc
        "CONTROL DISPLAY RESTORE";"REMPOP";zcmd=#zcmd
        If rc1/=0 Then Do
            zedlmsg='Global reconcilliation cancelled.'
            "SETMSG MSG(ISRZ001)";Signal errorfnd
        End
        Select
            When s1='>' & mmchperm=2 Then no_can_do=0
            When s1='<' & mmchperm=1 Then no_can_do=0
            Otherwise no_can_do=1
        End
        If no_can_do Then Do
            zedlmsg='Change to members NOT permitted.',
                    'Enter "CHANGE ON" on command line to permit action',
                    'or enter "?" to get instructions.'
            "SETMSG MSG(ISRZ001)"
            xx=pop_it_up(4,10)
            If xx/=0 Then Signal errorfnd
        End
        parm1=o_idisp
    End
    If s1='>' Then Do
        "TBTOP &TABLE"
        Do While rc=0
            If disp='SCAN' Then "TBSCAN &TABLE NEXT"
            Else "TBSKIP &TABLE"
            If rc/=0 Then Leave
            If s2/='*' & lmdate1='' Then Iterate
            x=$copymem(dsn1'('member')='v1,dsn2'('member')='v2,cs)
            If x=0 Then refresh=1
        End
        If refresh Then Do
            x=Trace(#tr)
            idisp=o_idisp;#dsn1=
            Signal rebuild_table
        End
        Signal dis2
    End
    If s1='<' Then Do
        "TBTOP &TABLE"
        Do While rc=0
            If disp='SCAN' Then "TBSCAN &TABLE NEXT"
            Else "TBSKIP &TABLE"
            If rc/=0 Then Leave
            If s2/='*' & lmdate2='' Then Iterate
            x=$copymem(dsn2'('member')='v2,dsn1'('member')='v1,cs)
            If x=0 Then refresh=1
        End
        If refresh Then Do
            x=Trace(#tr)
            idisp=o_idisp;#dsn1=
            Signal rebuild_table
        End
        Signal dis2
    End
    If s1='*' Then Do
        #tr=Trace('o')
        "TBTOP &TABLE"
        Do While rc=0
            If disp='SCAN' Then "TBSCAN &TABLE NEXT"
            Else "TBSKIP &TABLE"
            If rc/=0 Then Leave
            If s2/='*' & (lmdate1='' | lmdate2='') Then Iterate
            Select
                When lmdate1 || lmtime1 > lmdate2 || lmtime2 Then,
                    x=$copymem(dsn1'('member')='v1,dsn2'('member')='v2,cs)
                When lmdate1 || lmtime1 < lmdate2 || lmtime2 Then,
                    x=$copymem(dsn2'('member')='v2,dsn1'('member')='v1,cs)
                Otherwise x=8
            End
            If x=0 Then refresh=1
        End
        If refresh Then Do
            x=Trace(#tr)
            idisp=o_idisp;#dsn1=
            Signal rebuild_table
        End
        Signal dis2
    End

no_command:
    If sel='' Then Signal command_processed_dont_scroll
    If sel='=' & psel='' Then Do
        zedlmsg='No previous selection'
        "SETMSG MSG(ISRZ001)"
        Signal command_processed_dont_scroll
    End

    msub=ztdsels;Signal con2

mus2:
    "TBDISPL &TABLE"
    dsn1=Strip(dsn1,,"'");dsn2=Strip(dsn2,,"'")

con2:
    "CONTROL DISPLAY SAVE"
    Parse VAR member member .
    If Wordpos(member,ignore_auto)>0 Then resmemb=1;Else resmemb=0
    If sel='=' Then sel=psel;else psel=sel
    Parse VAR sel s1 +1 s2
    If s2='' Then s2='s2';If Verify(s2,'12')>0 Then s2=1
    Interpret 'exist=exist's2';dsn=dsn's2';vol=vol's2
    If s1='C' Then Do                       /* Compare                */
        sx=(s2//2)+1
        Interpret,
          "x=$compare(dsn"s2"'('member')='v"s2",dsn"sx"'('member')='v"sx")"
        Signal gnx2
    End
    Select
        When s1='S' Then action='BROWSE'
        When s1='B' Then action='BROWSE'
        When s1='E' Then action='EDIT'
        When s1='V' Then action='VIEW'
        Otherwise        action=
    End
    If action/='' Then Do                   /* Look at member         */
        If s1='E' | s1='V' Then Drop exist
        If exist/=0 Then,
            "&ACTION DATASET('&DSN(&MEMBER)') &VOL"
        Else Do
            zedlmsg="Member not in dataset '"dsn"'."
            "SETMSG MSG(ISRZ001)"
        End
        Signal gnx2
    End

    If s1='X' Then Do
        "TBDELETE &TABLE"
        Signal gnx2
    End
    If (Wordpos(s1,'> < * A D N R U')>0 & mmchperm/='*') | resmemb Then Do
        Select
            When s1='*' Then Do
              Select
                When latest='->' & mmchperm=1 Then no_can_do=0
                When latest='<-' & mmchperm=2 Then no_can_do=0
                When latest='**' Then no_can_do=0
                Otherwise no_can_do=1
              End
            End
            When s1='>' & mmchperm=2 Then no_can_do=0
            When s1='<' & mmchperm=1 Then no_can_do=0
            When Wordpos(s1,'A D')>0 Then Do
              Select
                When s2=''  & mmchperm=1 Then no_can_do=0
                When s2='1' & mmchperm=1 Then no_can_do=0
                When s2='2' & mmchperm=2 Then no_can_do=0
                Otherwise no_can_do=1
              End
            End
            When Wordpos(s1,'R')>0 Then Do
              Select
                When latest='**' Then no_can_do=0
                When s2='' | s2='1' Then Do
                    If latest='<-' & mmchperm=1 Then no_can_do=0
                    Else no_can_do=1
                End
                When s2='2' Then Do
                    If latest='->' & mmchperm=2 Then no_can_do=0
                    Else no_can_do=1
                End
                Otherwise no_can_do=1
              End
            End
            When Wordpos(s1,'U')>0 Then Do
              Select
                When latest='**' Then no_can_do=0
                When s2='' | s2='1' Then Do
                    If latest='->' & mmchperm=1 Then no_can_do=0
                    Else no_can_do=1
                End
                When s2='2' Then Do
                    If latest='<-' & mmchperm=2 Then no_can_do=0
                    Else no_can_do=1
                End
                Otherwise no_can_do=1
              End
            End
            Otherwise no_can_do=1
        End
        If no_can_do | resmemb Then Do
            zedlmsg='Change to members NOT permitted.',
                    'Enter "CHANGE ON" on command line to permit action',
                    'or enter "?" to get instructions.'
            xx=pop_it_up(4,10)
            If xx/=0 Then Signal errorfnd
        End
    End

    If s1='*' Then Do
        #m1=exist1||lmdate1||lmtime1;#m2=exist2||lmdate2||lmtime2
        Select
            When #m1 > #m2 Then Do
                x=$copymem(dsn1'('member')='v1,dsn2'('member')='v2,cs)
                lmdate2=lmdate1;lmtime2=lmtime1;size2=size1
                dmdate2=dmdate1
                luser2=luser1;latest='**';exist2=exist1
                latestd=latest
            End
            When #m1 < #m2 Then Do
                x=$copymem(dsn2'('member')='v2,dsn1'('member')='v1,cs)
                lmdate1=lmdate2;lmtime1=lmtime2;size1=size2
                dmdate1=dmdate2
                luser1=luser2;latest='**';exist1=exist2
                latestd=latest
            End
            Otherwise x=8
        End
        If x=0 Then "TBMOD &TABLE"
        Signal gnx2
    End
    If s1='U' Then Do
        sx=(s2//2)+1
        Interpret "fm=lmdate"sx" || lmtime"sx
        Interpret "tm=lmdate"s2" || lmtime"s2
        If fm>tm Then Do;If sx=1 Then s1='>';Else s1='<';End
        Else Do
            Interpret "zedlmsg='Member in '''dsn"s2"''' already the latest.'"
            "SETMSG MSG(ISRZ001)"
            Signal gnx2
        End
    End
    If s1='R' Then Do
        sx=(s2//2)+1
        Interpret "fm=lmdate"sx" || lmtime"sx
        Interpret "tm=lmdate"s2" || lmtime"s2
        If fm<tm Then Do;If sx=1 Then s1='>';Else s1='<';End
        Else Do
            Interpret "zedlmsg='Member in '''dsn"s2"''' already the oldest.'"
            "SETMSG MSG(ISRZ001)"
            Signal gnx2
        End
    End
    If s1='>' Then Do
        x=$copymem(dsn1'('member')='v1,dsn2'('member')='v2,cs)
        If x=0 Then Do
            lmdate2=lmdate1;lmtime2=lmtime1;luser2=luser1
            dmdate2=dmdate1
            exist2=exist1;size2=size1
            latest='**';latestd=latest
            "TBMOD &TABLE"
        End
        Signal gnx2
    End
    If s1='<' Then Do
        x=$copymem(dsn2'('member')='v2,dsn1'('member')='v1,cs)
        If x=0 Then Do
            lmdate1=lmdate2;lmtime1=lmtime2;luser1=luser2
            dmdate1=dmdate2
            exist1=exist2;size1=size2
            latest='**';latestd=latest
            "TBMOD &TABLE"
        End
        Signal gnx2
    End
    If s1='D' & vol/='' Then Do             /* Delete ??              */
        zedlmsg="Cannot delete from an uncatalogued dataset."
        "SETMSG MSG(ISRZ001)"
        msub=0
        Signal gnx2
    End
    If s1='D' Then Do                       /* Delete                 */
        If Sysdsn("'"dsn"("member")'")/='OK' Then Do
            zedlmsg=Sysdsn("'"dsn"("member")'")
            "SETMSG MSG(ISRZ001)"
            Signal gnx2
        End
        #dsn1=dsn1
del_loop:
        zedlmsg = "Confirm member deletion. Hit <ENTER> to delete member",
        "'"member"' or END PF key to retain member."
        "SETMSG MSG(ISRZ001)"
        zcmd=
        qdsname="'"dsn"'"
        zwinttl='Delete Confirmation';"ADDPOP ROW(4) COLUMN(10)"
        "DISPLAY PANEL(&DELPAN)";rc1=rc;"REMPOP"
/*      dsn1=#dsn1                                                    */
        If Substr(zcmd,1,1)='B' & rc1=0 Then Do
            "BROWSE DATASET('&DSN(&MEMBER)')"
            Signal del_loop
        End
        If rc1=0 Then Do
            "LMINIT DATAID(KILLID) DATASET('&DSN') ENQ(SHRW) &VOL"
            "LMOPEN DATAID(&KILLID) OPTION(OUTPUT)"
            "LMMDEL DATAID(&KILLID) MEMBER(&MEMBER) NOENQ"
            "LMCLOSE DATAID(&KILLID)"
            "LMFREE DATAID(&KILLID)"
            If s2=1 Then Do
/*              If Sysdsn("'"dsn2"("member")'")/='OK' Then tbact='TBDELETE'*/
                "LMINIT DATAID(KILLID) DATASET('&DSN2') ENQ(SHRW) &VOL2"
                "LMOPEN DATAID(&KILLID) OPTION(INPUT)"
                "LMMFIND DATAID(&KILLID) MEMBER(&MEMBER)"
                rc1=rc
                "LMCLOSE DATAID(&KILLID)"
                "LMFREE DATAID(&KILLID)"
                If rc1/=0 Then tbact='TBDELETE'
                Else Do
                    lmdate1=;lmtime1=;luser1=;exist1=000
                    dmdate1=;size1=;latest='->';tbact='TBMOD'
                End
            End
            Else Do
/*              If Sysdsn("'"dsn1"("member")'")/='OK' Then tbact='TBDELETE'*/
                "LMINIT DATAID(KILLID) DATASET('&DSN1') ENQ(SHRW) &VOL1"
                "LMOPEN DATAID(&KILLID) OPTION(INPUT)"
                "LMMFIND DATAID(&KILLID) MEMBER(&MEMBER)"
                rc1=rc
                "LMCLOSE DATAID(&KILLID)"
                "LMFREE DATAID(&KILLID)"
                If rc1/=0 Then tbact='TBDELETE'
                Else Do
                    lmdate2=;lmtime2=;luser2=;exist2=000
                    dmdate2=;size2=;latest='<-';tbact='TBMOD'
                End
            End
            Select
                When exist1=0 Then latestd='=>'
                When exist2=0 Then latestd='<='
                Otherwise latestd=latest
            End
            tbact table
            zedlmsg="'"dsn"("member")' deleted."
        End
        Else zedlmsg = "Deletion abandoned."
       "SETMSG MSG(ISRZ001)"
        Signal gnx2
    End
    If s1='N' Then Do                       /* Append                 */
Trace r
        sx=(s2//2)+1
/*--------------------------------------------------------------------*/
/*--------------------------------------------------------------------*/
Say     Interpret "x=$copymem(dsn"s2"'('member')',dsn"sx"'('newmem')')"
SAY    'Signal gnx2'
#tr=Trace('o')
        Signal gnx2
    End
    If s1='A' Then Do                       /* Append                 */
        sx=(s2//2)+1
        Interpret,
          "xx=$append(dsn"s2"'('member')='v"s2",dsn"sx"'('member')='v"sx",'U')"
        If xx/=0 Then Do
            zedlmsg="Cannot offload until an offload dataset is alloacted",
                    'using the "AO=''dataset''" command.'
            tag='MEMBER';Signal errorfnd_tag
        End
        Interpret "lmdate"s2"=$DATEMAN('REV');lmtime"s2"=Substr(Time(),1,5)"
        If s2=1 Then latest='<-';Else latest='->';latestd=latest
        "TBMOD &TABLE"
        Signal gnx2
    End
    If s1='O' Then Do                       /* Offload                */
        If offload='' Then Do
            zedlmsg="Cannot offload until an offload dataset is alloacted",
                    'using the "AO=''dataset''" command.'
            "SETMSG MSG(ISRZ001)"
            msub=0;Signal gnx2
        End
        Interpret "x=$copymem(dsn"s2"'('member')',offload'('member')')"
        Signal gnx2
    End
    If s1='L' Then Do                       /* Load into memory       */
        If Value('rf's2)/='U' Then Do
            zedlmsg='Can only "Load" a module (RECFM=U) into memory.'
            "SETMSG MSG(ISRZ001)";msub=0;Signal gnx2
        End
        Interpret "dsn=""'""dsn"s2"'('member')'""'"""
        If Sysdsn(dsn)/='OK' Then Do
            zedlmsg=dsn 'not found to load into memory.'
            "SETMSG MSG(ISRZ001)";msub=0;Signal gnx2
        End
        Signal on Syntax Name error_on_SLM
        x=Slm(dsn);Signal off Syntax;Signal gnx2
error_on_SLM: Signal off Syntax
        zedlmsg='Routine "SLM" is not available to load and view module',
                'in memory.'
        "SETMSG MSG(ISRZ001)";msub=0;Signal gnx2
    End
    If s1='T' Then Do                       /* Stats                  */
        If Value('rf's2)='U' Then Do
            zedlmsg='Cannot get stats on a load module (RECFM=U).'
            "SETMSG MSG(ISRZ001)";msub=0;Signal gnx2
        End
        Interpret "dsn=dsn"s2;#member=member
        "LMINIT DATAID(DATA1) DATASET('&DSN')"
        "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
        If rc=0 Then Do
            "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) STATS(YES)"
            If rc=0 Then Do
                If #member=member Then zedlmsg=member '#'s2' -',
                      'Cdate:'ZLCDATE 'Lmdate:'ZLMDATE 'Size:'ZLCNORC,
                      'Lev:'zlvers'.'zlmod 'Id:'ZLUSER
                Else zedlmsg='Member "'#member'" not found.'
            End
        End
        "LMMLIST DATAID(&DATA1) OPTION(FREE)";"LMCLOSE DATAID(&DATA1)"
        "SETMSG MSG(ISRZ001)";msub=0;Signal gnx2
    End
    If s1='K' Then Do                       /* Backup                 */
        If Length(member)=8 Then newmemb=Overlay(bup_suff,member,7)
        Else newmemb=member||bup_suff
bup_loop:
        rc1=0
        Do While Sysdsn("'"dsn"("newmemb")'")='OK'
            zedlmsg="Backup member already exists. Please enter a new",
                    "member name and try again. Enter 'B' on the",
                    "command line to browse potential backup member."
            "SETMSG MSG(ISRZ001)"
            zcmd=
            zwinttl='Backup Member Entry';"ADDPOP ROW(4) COLUMN(10)"
            "DISPLAY PANEL(&BUPPAN)";rc1=rc;"REMPOP"
            If rc1/=0 Then Leave
            If Substr(zcmd,1,1)='B' & rc1=0 Then Do
                "BROWSE DATASET('&DSN(&NEWMEMB)')"
                Signal bup_loop
            End
        End
        If rc1/=0 Then Do
            zedlmsg="Member backup abandoned."
            "SETMSG MSG(ISRZ001)"
            msub=0;Signal gnx2
        End
        Interpret "x=$copymem(dsn"s2"'('member')',dsn"s2"'('newmemb')')"
        Signal gnx2
    End

gnx2:
    "CONTROL DISPLAY RESTORE"
    "VGET (multquit)";m_q=multquit;multquit=;"VPUT (MULTQUIT)"
    If m_q/='' Then Signal dis2
    msub=msub-1;If msub<1 Then Signal dis2;Else Signal mus2

errorfnd:
    "SETMSG MSG(ISRZ001)";zedsmsg=;zedlmsg=
command_processed_dont_scroll:
    "TBTOP &TABLE"
    "TBSKIP &TABLE NUMBER("ztdtop")"
    Signal dis2

errorfnd_tag:
    "SETMSG MSG(ISRZ001) MSGLOC("tag")";zedsmsg=;zedlmsg=
    Signal dis2


exi2:
    "TBEND &TABLE"
    Return 0

/*--------------------------------------------------------------------*/
/* Subroutine to process member list selection and set up MEMBERS     */
/* list accordingly.                                                  */
/*--------------------------------------------------------------------*/
memb_list:
    Arg dsn,d#,vol,recfm,act
    y2='50/00/00'
    If act/='' Then,
        "TBCREATE &TABLE KEYS(MEMBER) NAMES(LMDATE1 LMTIME1",
             "SIZE1 LMDATE2 LUSER1 LMTIME2 SIZE2 LUSER2 LATEST",
             "LATESTD EXIST1 EXIST2",
             "DMDATE1 DMDATE2 OHIT",
             ") REPLACE NOWRITE"
    Else Do
        "TBTOP &TABLE"
        If rc/=0 Then Do
            zedlmsg='Table update requested but no table open.'
            "SETMSG MSG(ISRZ001)"
            Exit 8
        End
    End
    If act='R' Then Return 0

    #tr=Trace('Off')
    dmdate2=;lmdate2=;lmtime2=;size2=;luser2=;exist2=000
    If pop_seq>0 Then Do
        progi='>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
        zwinttl = 'Member Manager Progress Meter'
        "ADDPOP ROW(5) COLUMN(6)"
        i_o=0                               /* Used for pop-up progres*/
    End
    If recfm='U' Then Signal process_loadlib
    "LMINIT DATAID(DATA1) DATASET('&DSN')" vol
    "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    member=;rc1=0
    Do While rc1=0
        "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) "||,
                "STATS(YES)"
        rc1=rc
        If rc1/=0 Then Leave
        member=Strip(member)
/*--------------------------------------------------------------------*/
        If pop_seq>0 Then Do
            i_o=i_o+1;If i_o//pop_seq=0 Then Do
                pc=(i_o/range)*100
                l=Format(((pc)/2),5,0)+0;markit=Substr(progi,1,l)
                pc=Format(pc,3,0)'%'
                "CONTROL DISPLAY LOCK";"DISPLAY PANEL(MMPI)"
                If rc/=0 Then pop_seq=0
            End
        End
/*--------------------------------------------------------------------*/
        If d#=1 Then Do
            dmdate1=zlm4date;lmtime1=zlmtime;size1=zlcnorc;luser1=zluser
            lmdate1=dmdate1
            If dmdate1/='' Then Do
                If dmdate1>y2_base Then lmdate1='19'dmdate1
                Else lmdate1='20'dmdate1
                exist1=001
            End
            Else exist1=
            latest='<=';latestd=latest
        End
        Else Do
            "TBTOP &TABLE"
            "TBSCAN &TABLE ARGLIST(MEMBER) CONDLIST(EQ)"
            If rc/=0 Then Do
                lmdate1=;lmtime1=;size1=;luser1=;exist1=000;dmdate1=
            End
            dmdate2=zlm4date;lmtime2=zlmtime;size2=zlcnorc
            luser2=zluser
            If dmdate2/='' Then Do
                If dmdate2>y2_base Then lmdate2='19'dmdate2
                Else lmdate2='20'dmdate2
                exist2=001
            End
            Else exist2=
            s1=exist1||lmdate1||lmtime1;s2=exist2||lmdate2||lmtime2
            Select
                When s1=s2 Then latest='**'
                When s1<s2 Then latest='->'
                Otherwise latest='<-'
            End
            Select
                When exist1=0 Then latestd='=>'
                When exist2=0 Then latestd='<='
                Otherwise latestd=latest
            End
        End
        "TBMOD &TABLE"
    End
    #tr=Trace(#tr)
    "LMMLIST DATAID(&DATA1) OPTION(FREE)"
    "LMCLOSE DATAID(&DATA1)"
    "LMFREE  DATAID(&DATA1)"
end_member_process:
    "REMPOP"
    Return 0

table_scan:
    "TBTOP &TABLE";If rc/=0 Then Return rc
    "TBVCLEAR &TABLE"
    If r_all Then Do
        disp='ALL';member='*'
        namecond='MEMBER,GE'
    End
    Else Do
        disp='SCAN'
        c2=Substr(parm1,2,1)
        cc='EQ'
        Select
            When c2=1 Then Do;exist1=001;namecond='EXIST1,'cc;End
            When c2=2 Then Do;exist2=001;namecond='EXIST2,'cc;End
            Otherwise Do
                exist1=001;exist2=001
                namecond='EXIST1,'cc',EXIST2,'cc
            End
        End
    End
    "TBSARG &TABLE NAMECOND("namecond")"
    Return 0

/*--------------------------------------------------------------------*/
/* Present a DSN selection list                                       */
/*--------------------------------------------------------------------*/
dslist_sel: Arg level
    If level='*' Then level=#sprf'.*'
    Parse VAR level hlq '.' llq
    If llq='*' Then level=level'*'
    x=$dslist(level '. . R')
    tableds='TD'Time('s')
    "TBCREATE &TABLEDS NAMES(dsn,dt,vol) NOWRITE REPLACE SHARE"
    #tr1=Trace('o')
    Do Queued()
        Parse Pull dt dsn vol .
        If dt/='NONVSAM' Then Iterate
        "TBMOD &TABLEDS"
    End
    x=Trace(#tr1)

    "TBTOP &TABLEDS"
    dss=
ds_screen:
    "TBDISPL &TABLEDS PANEL($DSNSELP)"
    If rc/=0 Then Do;"TBEND &TABLEDS";Return 'Error';End
    If dss='' Then Do
        zedlmsg='A selection must be made or use "END" PF key to abandon.'
        "SETMSG MSG(ISRZ001)"
        Signal ds_screen
    End
    "TBEND &TABLEDS"
    Return dsn

/*--------------------------------------------------------------------*/
/* Display a pop up confirmation panel.                               */
/*--------------------------------------------------------------------*/
pop_it_up: Parse Arg row,col
    xx=s2
    Select
        When s1='>' Then xx=2
        When s1='<' Then xx=1
        When s1='*' Then Do
            If latest='->' Then xx=1;Else xx=2
        End
        Otherwise Nop
    End
    Interpret "aa=dsn"xx";bb=vol"xx
    chdsn="'"strip(aa,,"'")"("member")'" bb
    zwinttl='Confirm "'s1'" action';"ADDPOP ROW("row") COLUMN("col")"
    If resmemb Then poppan='MMPR';Else poppan='MMPU'
    "DISPLAY PANEL(&POPPAN)";rc1=rc;"REMPOP"
    If rc1/=0 Then Do
        zedlmsg=zwinttl 'abandoned.';xrc=8
    End
    Else xrc=0
    Return xrc

/*--------------------------------------------------------------------*/
/* Process load libraries.                                            */
/*--------------------------------------------------------------------*/
process_loadlib:
    zedlmsg='Routine "$ALKLOAD" not found to process RECFM=U dataset',
            "'"dsn"'."
    Signal on Syntax Name error_on_loadmod
    alklmdat="'"$alkload()"(ALKLMDAT)'"
    If Sysdsn(alklmdat)/='OK' Then Do
        zedlmsg=alklmdat "not found to process RECFM=U dataset '"dsn"'."
        Signal error_on_loadmod
    End
    xx=Listdsi("'"dsn"'" vol "DIRECTORY SMSINFO")
    If sysadirblk='NO_LIM' Then Do
        zedlmsg="Cannot process LIBRARY dataset '"dsn"'."
        Address ISPEXEC
        "REMPOP";"SETMSG MSG(ISRZ001)"
        Signal dis2
    End
    ztempf=$ztempf();since="'010175'"
    Address TSO
    "ALLOC F(LMODLIST) DA ('"ztempf"') SHR REU"
    If vol='' Then unitx=;Else unitx='UNIT(SYSALLDA)'
    "ALLOC F(LMODLIB) SHR REU DA('"dsn"')" vol unitx
    "CALL" alklmdat since
    "EXECIO * DISKR LMODLIST (STEM linei. FINIS)"
    "FREE F(LMODLIST)";ztempf=$ztempf(ztempf,'/D')
    Address ISPEXEC
    "LMINIT DATAID(DATA1) DDNAME(LMODLIB)"
    "LMOPEN DATAID(&DATA1) OPTION(INPUT)"
    #tr=Trace(#tr)
    zlcnorc=;zluser=
    Do i=5 To linei.0
        Parse VAR linei.i member . zlm4date zlmtime
        Parse VAR zlm4date dd '/' mm '/' yy;Parse VAR zlmtime zlmtime +5
        If yy<75 Then zlm4date='20'yy'/'mm'/'dd;Else zlm4date='19'yy'/'mm'/'dd;
/*--------------------------------------------------------------------*/
        If pop_seq>0 Then Do
            i_o=i_o+1;If i_o//pop_seq=0 Then Do
                pc=(i_o/range)*100
                l=Format(((pc)/2),5,0)+0;markit=Substr(progi,1,l)
                pc=Format(pc,3,0)'%'
                "CONTROL DISPLAY LOCK";"DISPLAY PANEL(MMPI)"
                If rc/=0 Then pop_seq=0
            End
        End
        "LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER) "||,
                "STATS(YES)"
        zlsize=Strip(zlsize,'l','0')
        If Length(zlsize)>6 Then zlsize=Substr(zlsize,1,5)'>'
        Else zlsize=Right(zlsize,6,'0')
/*--------------------------------------------------------------------*/
        If d#=1 Then Do
            dmdate1=zlm4date;lmtime1=zlmtime;size1=zlsize;luser1=zluser
            lmdate1=dmdate1
            If dmdate1/='' Then Do
                If dmdate1>y2_base Then lmdate1='19'dmdate1
                Else lmdate1='20'dmdate1
                exist1=001
            End
            Else exist1=
            latest='<=';latestd=latest
        End
        Else Do
            "TBTOP &TABLE"
            "TBSCAN &TABLE ARGLIST(MEMBER) CONDLIST(EQ)"
            If rc/=0 Then Do
                lmdate1=;lmtime1=;size1=;luser1=;exist1=000;dmdate1=
            End
            dmdate2=zlm4date;lmtime2=zlmtime;size2=zlsize
            luser2=zluser
            If dmdate2/='' Then Do
                If dmdate2>y2_base Then lmdate2='19'dmdate2
                Else lmdate2='20'dmdate2
                exist2=001
            End
            Else exist2=
            s1=exist1||lmdate1||lmtime1;s2=exist2||lmdate2||lmtime2
            Select
                When s1=s2 Then latest='**'
                When s1<s2 Then latest='->'
                Otherwise latest='<-'
            End
            Select
                When exist1=0 Then latestd='=>'
                When exist2=0 Then latestd='<='
                Otherwise latestd=latest
            End
        End
        "TBMOD &TABLE"
    End
    "LMMLIST DATAID(&DATA1) OPTION(FREE)"
    "LMCLOSE DATAID(&DATA1)"
    "LMFREE  DATAID(&DATA1)"
    Address TSO "FREE F(LMODLIB)"
    Signal end_member_process
error_on_loadmod:Signal off Syntax
    "SETMSG MSG(ISRZ001)"
    Signal end_member_process

Help_me:
    If Arg(1)='??' Then Signal error_off_BR
    Signal on Syntax Name error_off_BR
    x=$BR(xcmd '??')
    Return 0
error_off_BR:
    Signal off Syntax

    ll=77             /* Use TF76 for line length with an '*' at end. */
    #=bup_suff
    n_st=mark(2)
/*

   Good `TOD. `CNAME..

   MM: Member Manager [ V`mm_ver.. ]

   This routine will permit member comparisons between two partitioned
   datasets based primarily on date last changed.  It can also be used to
   compare member lists when stats are turned off.
   You can even compare load libraries (RECFM=U) however only partial stats
   will be returned.  Exploit this functionality to compare load modules
   compile/link-edit date with last modified date of source (and draw
   whatever conclusion takes your fancy).

   It can be used to rationalise the two datasets and simply update members
   from one to the other whether it is a progressive (latest) or regresive
   (backout) update.  This can be done at the member level or if you are
   adventurous, at the dataset level.

   You can optionally create a hybrid of the two datasets without altering
   the contents of either one.

   [ Please take note of GOTCHa #3 at the end. ]

   Parameters:
     Positional:
       1. 'dsn1' - The first dataset in the comparison. This dataset must be
                   fully qualified and quoted, otherwise "`#SPRF.." will be
                   added at the front.
       2. 'dsn2' - The second dataset in the comparison. Same format as the
                   first however if it is missing, it will default to
                     'dsn1.BACKUP'
       3. En     - Exist indicator. Same value as for the "Refresh table"
                   parameter.
     Notes: - You may append a volser to uncatalogued datasets seperated by
              an "=" sign.
            - Uncatalogued volumes will be included in the "Changed" heading
              and may be altered using the "VOLn=volser" command.
     Keyword:
       /OB  - Only Both. Same processing logic as if ONLY BOTH is
              entered on the member compare screen.  This parameter is
              automatically generated by LINEMAC when using the MMO
              line command (if LINAMEAC is available).
       /V   - Determine/generate volume (if not supplied) and use it as if
              it was supplied as part of the dataset parameter.

   Invocation:
   1. Under TSO:
      "TSO %`XCMD."
      "TSO %`XCMD. 'dsn1'
      "TSO %`XCMD. dsn1 'dsn2'=volser E2"
      "TSO %`XCMD. ?"

   2. Under ISPF option 3.4 against dataset:
       `XCMD.
       `XCMD. / 'dsn2'
       `XCMD. / /=volser E1

   3. Edit macro:
       `XCMD. on the command line and a 'C' on the first line containing
       dsn1 and dsn2 on two adjacent lines. dsn1 and dsn2 must be fully
       qualified and may or may not be quoted. Volume will be extracted
       from any "VOL=SER=volume" value found on the line.

   4. Line command:
       The appropriate line command (use the 'HELP/HELPX' line command to
       establish it) on the first line of two adjacent lines containg both
       datasets.  dsn1 and dsn2 must be fully qualified and may or may not be
       quoted.  Volume will be extracted from any "VOL=SER=volume" or
       "VOLUME(volser)" value found on the line.  If the datasets to be
       compared are not on adjacent lines, use block commands (eg. "MMAA")
       and the first and last lines in the block range will be used.

   5. REXX
       d1="'`#SPRF..ORIGINAL'"
       d2="'`#SPRF..ORIGINAL.TO.NOTSO.ORIGINAL.BACKUP'="volser
       x=`XCMD.(d1 d2)

   If neither of the datasets exist you will be prompted accordingly.  You
   may enter wildcard dataset names to generate a dataset selection list
   for both datasets.

   By default, you will be prompted for any changes made to either datasets
   (with the exception of edit/view-replace changes) for your own
   protection.  You may disable/enable this feature by the use of the CHANGE
   command. For further details, refer below.

   Note: Watch members without stats, they may not produce the results you
         want as in a full listing missing members and non-stats members
         will appear the same. The status of the members should be
         identifiable by the central indicator.

   In the table display, keep an eye on the Indians (at lest which way they
   fire their arrows).
      <- Dataset #1 is the most recent version (note that stats may be
         turned off for #2).
      <= Dataset #1 is the most recent version as #2 does not exist.
      -> Dataset #2 is the most recent version (note that stats may be
         turned off for #1).
      => Dataset #2 is the most recent version as #1 does not exist.
      ** Both datasets are the same (according to date/time). Hit it with a
         'C' to verify equality as members may be changed without the stats
         being updated.
      Note - The userid field will display the userid of the most recent
             member.

   Commands that can apply to either dataset #1 or #2 will default to #1 if
   unspecified.  If you have any of these commands defined in your ISPF
   command table, prefix it with '>' to pass it to "MM".  The capitals are
   the minimun required for command recognition:

   Valid commands.
     AO={'qualified.quoted.dataset' { /R }} | { E | V | B }
                - Allocate a dataset to Offload members.  Dataset can be an
                  existing dataset or if it does not exist it will be
                  created using the size of the larger of the two datasets.
                - You can pass a parameter of "/R" to delete redefine the
                  dataset if it already exists (uses original size).
                - You can pass a wildcarded dataset name to present a
                  selection list.  If you use '*' by itself, your userid
                  will be placed in front of it.
                - Use parameter of E, V or B to edit, view or browse offload
                  dataset.  To use these parameters, an offload datset must
                  be allocated and at least 1 member offloaded.
                - "AO=" by itself will display the name of the dataset
                  allocated for offloading.
     B/E/V{n}   - Can have a 1 or 2 suffix to Browse/Edit/View dataset
                  #1 or #2. Default is dataset #1.
     BU{1/2/*} {B/E/V}                                                  */
                - Can have a 1, 2 or * suffix to backup dataset #1, #2 or
                  both. The dataset is backed up into a dataset with a
                  suffix of '.BUyymmdd' on the same volume.  Default is
                  dataset #1. (Requires access to routine CSMDSNCO.)  By
                  adding a parameter of 'B', 'E' or 'V' you can browse, edit
                  or view the appropriate backup dataset.
     CHange {ON / OFf / n}
                : Where 'n' can be 0, 1, 2 or *.
                - Change member modification status.  Without a parameter,
                  the setting is toggle between ON/OFF.  The status is
                  indicated by the color of the "Changed" heading field:
                     turquois - changes are performed without confirmation.
                     red      - changes are NOT permitted (confirmation
                                required).
                  For the benefit of the color blind or those with mono
                  terminals, the modification status is included in brackets
                  in the headline.  (This "Changed" heading may include the
                  volser for uncatalogued datasets.)
                  Note - For deletions, expect a double prompt if change is
                         in prompt mode for that dataset. One to permit
                         change to go ahead and the other to confirm
                         deletion.
                       - This does not affect the "reserved" member prompt.
                         (Refer to GOTCHAs for further details.)
        0 / OFf - Change member modification status OFF.
        1       - Change member modification status for dataset #1 ON.
                  This will also prevent update to dataset #2.
        2       - Change member modification status for dataset #2 ON.
                  This will also prevent update to dataset #1.
        * / ON  - Change member modification ON for all.
     COMPare    - Compare dataset #1 with dataset #2 at the file level.
     CPL     ON / OFf / n}
                - Change Protection Level. Same as "CH" but use if conflicts
                  with "CH" (CHanges command used for change control).
     FLip       - Toggle dataset #1 with #2. Use this option if most of your
                  processing is on dataset #2 (saves having to continually
                  enter the non default "2" suffix).
     L member   - Locate member.
     LOck       - Toggle input/output field types for dataset names.  With
                  dataset names locked, you automatically tab past the
                  dataset fields and skip to selection fields.
                  Unlock if you wish to change dataset names.
     Only {xx}  - Only show members that match the "xx" pattern which can
                  be:
                    *  - Equal.  Can use any of the following to signify
                         equal - '*', '**', '=', '==', E or 'EQ'.
                    <  - All members where dataset #1 is latest.
                    << - All members in dataset #1. Similar to "R E1"
                         without a table refresh.
                    <= - Member Unique to dataset #1.
                    >  - All members where dataset #2 is latest.
                    >> - All members in dataset #2. Similar to "R E2"
                         without a table refresh.
                    => - Member Unique to dataset #2.
                    B  - Member in Both datasets.
                    U1 - Member Unique to dataset #1.
                    U2 - Member Unique to dataset #2.
                    x  - Any other value will display members that are NOT
                         equal. This is the default.
     PRnt       - Print (output) table to temporary file.
     >PRint     - Print (output) table to temporary file. (Without the
                  '>' you get an ISPF controled screen print unless you
                  have disabled it in your ISPF command table.)
     Refresh {E{n}}
                - Refresh table. Without a parameter the table will be
                  updated with a full processing pass of both datasets
                  updating any statistics that may have changed.
                  Parameters will only affect what is being displayed in
                  the table. Permissable parameters are:
                    E   - Member must exist in both datasets.
                    E1  - Members must exist in dataset #1
                    E2  - Members must exist in dataset #2
                    cc  - Any other non-blank value will include members
                          from both datasets.
                  If you pass a parameter of "Exist" only members that
                  exist in both datasets will be displayed. In this case no
                  date means no stats. Any other parameter will infer
                  "All".
                  Note: Any of the following command line commands will
                        automatically update the table and a refresh is
                        unnecessary: D, U, R, <, >, and *.
     SOrt {xx}  - Sort table where xx can have the following values:
                  D1 - Date dataset #1 (descending).
                  D2 - Date dataset #2 (descending).
                  M  - Member name (default).
                  U1 - Userid dataset #1.
                  U2 - Userid dataset #2.
     VOLn=volser- Allocate a volume to uncatalogued datasets.
                  If the volume allocated is the same as the catalogued
                  volume it will be ignored.
                  Note - Uncatalogued datasets do not have the same
                         processing flexibility as their catalogued
                         counterparts.
     > / >>     - Copy all from dataset #1 to #2 that have non-blank date.
                  Note:
                   - If under a restricted list using "R En" then only the
                     displayed members will be processed. This also applies
                     for all the '>', '<' and '*' commands.
     >>*        - Copy all from dataset #1 to #2 (even blank dates).
                  Notes:
                   - The '>>' is used before the '*' because ISPF
                     translates '>*' to '*' ('>>*' -> '>*').
                   - Cannot initilly differentiate between blank dates
                     and missing members so an attempt wil be made to
                     copy (which will detect missing member). However,
                     this will extend execution time.
     *>         - Same as '>>*' (without the need to double up).
     <          - Copy all from dataset #2 to #1 that have non-blank date.
     <*         - Copy all from dataset #2 to #1 (even blank dates).
                  Note:                                                 s
                   - Cannot initilly differentiate between blank dates
                     and missing members so an attempt wil be made to
                     copy (which will detect missing member). However,
                     this will extend execution time.
     *          - Copy the latest version into the other dataset
                  only if both are dated. If both members do not exist, use
                  the '*' selection.
     **         - Copy the latest version into the other dataset even if it
                  doesn't exist in both datasets. This will copy synchronise
                  unconditionally for all members.
     Note: Watch the use of the above "copy all" commands as the actual
           result may not be what is required, especially when viewing from
           an "exist" display. All members, including redundant ones will
           be copied. There is NO "OOPS".
     /V         - Determine/generate volume (if not supplied) and use it as
                  if it was supplied as part of the dataset parameter.
     /VO        - Turn volume determination/generation off.
     ?          - This tutorial (will be incomplete as only the dynamic
                  tutorial (?D) is maintained.
     ?D         - Dynamic tutorial.  This is the most up to date tutorial,
                  however, it does require access to HELPDRVR and it's
                  associated packaging.

   Selections take the format of 'cn', where 'c' is one of the following
   selections and 'n' 1 or 2 for datasets #1 & #2 respectively. Any value
   other than 1 or 2 will default to 1.
   Valid selections:
     A  - Append TO member FROM the OTHER dataset.  Default is dataset #1.
          "A2" means append member from dataset #1 to dataset #2.  Cannot
          append if either of the datasets are not catalogued.
     C  - Compare members. C2 will make dataset #2 the "new".
     B  - Browse member.
     E  - Edit member.
     D  - Delete member (will be prompted for confirmation). You cannot use
          the "D" function to delete members from uncatalogued datasets.
     K  - bacKup member into member name suffixed by '`#.'. If the member name
          is already 8 bytes long then the 7th. character will be overlayed
          by the '`#.'.  A confirmation panel will be displayed if the backup
          member already exists.  If this naming convention does not suit
          you either change variable "bup_suff" to your desired character or
          don't use this command and back up manually.
     L  - Load module into memory for hex analysis and oline disassembly.
          Requires access to routine "SLM" which then invokes "SHOWSTOR".
     N  - Copy FROM the dataset TO the OTHER dataset under a New name. Default
          is dataset #1.  You will be prompted for a new name and if that exists
          prompted for an overwrite decision.
     O  - Offload member to Allocated Offload dataset. (Refer to the
          "AO=.." command for destination dataset.)
     S  - Browse member.
     T  - sTats  for member.
     V  - View member.
    Trust me, the next two features seem a wank, BUT, when needed they r
    great:
     R  - Regress member. Copy other dataset member if it is older.
     U  - Update member. Copy other dataset member if it is more recent.
          (Same as a 1 way '*').
    The following selections are not 'n' controlled and will be explicitly
    executed:
     <  - Copy from dataset #2 to #1 regardless of date.
     >  - Copy from dataset #1 to #2 regardless of date.
     *  - Copy the latest version into the other dataset.
     =  - Repeat the last command.
     X  - Exclude member.  The entry is actually deleted from the table.
          Once excluded, it can only be brought back with a "Refresh"
          command.  (Any number supplied is ignored.)
          (Don't panic.  The table entry is deleted.  The member stays
          there to keep congesting the PDS.)
    If you get into an invalid multi processing loop, you can interrupt ly
    it by entering "TSO QUIT *" on the command line. When you exit that
    process any outstanding looping will be terminated and you will be
    returned to the main screen. (This is handy when you select a wrong
    process like "C" and the a swag of "=" and rather than end out of
    known wrong options, 'quit' the loop.)

   Members required to package this feature. Those marked with 'o'
   seperator are not essential but will limit the full scope of this
   function:
     REXX:
       MM       - This driver.
       MM$      - Reserved member list.

       $ALKHLQ  o Generate HLQ (used by $ALKHLQO).
       $ALKHLQO o Generate HLQ based on SYSPREF and USERID.
       $ALKLOAD - Function to return load library containing "ALKLMDAT".
       $APPEND  o Append one member onto another (2nd. over 1st.).
       $COMPARE o CuperC driver with to datasets passed.
       $COPYMEM o Copy one member from a pds/dataset to another.
       $DATEMAN o Date manipulation routine.  Needed to update the table.
                  with dates when using the append feature. If you don't
                  append you don't need.
       $DSLIST  o Copy of IBM sample program IGGCSIRX for catalog searches.
       $WHOAMI  o Personalise user greeting.
       $ZTEMPF  o Allocate a temporary file. Required for the "PRNT" option.
       BR       o Tutorial presenter in a browse session. (A must should
                  have.) If you see this in a browse session then it is
                  because of this, if not that's why you should get it.)
       CSMDSNCO o Cloning routine used for backups.
       HELPDRVR o Dynamic tutorial driver. Required for the most up to date
                  tutorial.  Refer to it for it's full packaging.
       SHOWSTOR o Called by "SLM". Refer to "SHOWSOR" for it's packaging.
       SLM      o Show Load Module loaded into memory using "SHOWSTOR".
                  Required for selection 'L' against load modules.
     Panels:
       $DSNSELP o Dataset selection list panel.
       $MEMBBUP o Backup member name entry panel.
       $MEMBDEL o Delete verification panel. (Cannot delete without.)
       MMP      - Table display.
       MMPE     o Table display (for existing members) - EXIST command.
       MMPI     - Pop up window for Progress Indicator.
       MMPR     - Pop up window for change confirmation on reserved
                  members. Members set by "MM$".
       MMPU     - Pop up window for change confirmation.
     Load modules:
       ALKLMDAT o Program to report on last modified dates for load modules.
                  The program is designet to list all programs link-edited
                  after an input date.  Date 010175 (format ddmmyy) is used
                  as a seed to ensure all programs are reported using a 2
                  digit year.

   GOTCHAs:
     1. When comparing member lists between RECFM=U and F(ixed), do not use
        any of the synchronisation commands, for obvious reasons.  The copy
        attempt should return with a failed error message, however, certain
        site settings may attempt to bypass the error capture and attempt to
        copy, thereby causing a TSO/ISPF abend.
     2. There may be site specific members that you may not wish to over-
        write.  Use member "MM$" to provide a list of reserved members.
        This list of members will aumatically be scanned and if a hit is
        made, a confirmation panel will be displayed regardless of the
        change modification status setting.  If you don't like the prompt,
        modify (or get) "MM$" to return 'NULL' for your userid.
     3. This facility is continually being upgraded.  I have found that
        subtleties in commands are missed due to monotone of help display.
        The dynamic tutorial is colourised as such and being more
        beneficial, it is the official tutorial and many new features may be
        missed through use of this tutorial.  (However, the basic features
        are covered here, in case your site is too tight to install the
        overhead of the "HELPDRVR" package.)

        In English, I recommend you deviate from my standard of
        "? -> HELP" and use "?D" in-lieu of "?" for MM's tutorial...

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */

    chgchar='`'
    cname='there';Signal on Syntax Name error_off_$WHOAMI;cname=$Whoami('C')
error_off_$WHOAMI:Signal Off Syntax
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End

    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    x=nl_h('*'Centre('ooo000OOOO000ooo',ll,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line=p1||'var'||p2'
        End
        x=nl_h('*'Substr(line,1,ll)'*')
    End
    x=nl_h('*'Copies('-',ll)'*')
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#;Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
