/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* NC: (Number Check)                                                 */
/*                                                                    */
/* Routine to test for increasing line numbers in COBOL. Will report  */
/* any lines that are not greater than the previous one.              */
/* Non numeric other than spaces will be ignored.                     */
/*                                                                    */
/* Default range is 1-6.  May put in any other range in format        */
/*   sc-ec                                                            */
/*                                                                    */
/* Parameters:                                                        */
/*   range  : as above                                                */
/*   IC     : Ignore Characters                                       */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    If parm# Â¬= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    If parm# = '?' Then Signal help

    all = ''
    Call parse_parms
    zfrange = ''
    "ISREDIT (last) = LINENUM .ZLAST"
    If trace = 'Y' Then Trace r

    If all = 'ALL' Then Do
        zfrange = 1
        "ISREDIT (zlrange) = LINENUM .ZLAST"
    End
    Else Do
        "ISREDIT PROCESS RANGE C"
        "ISREDIT (cmd) = RANGE_CMD"
        If cmd = 'C' Then Do
            "ISREDIT (zfrange) = LINENUM .ZFRANGE"
            "ISREDIT (zlrange) = LINENUM .ZLRANGE"
        End
        Else Do
            GC009 = 'No line numbers selected.'
            "ISPEXEC SETMSG MSG(GC009)"
            Exit
        End
    End

    "ISREDIT (status) = USER_STATE"
    "ISREDIT (caps) = CAPS"
    "ISREDIT CAPS = OFF"
    pseq = 0
    lin#s = ''
    errs = 0
    len = (ec - sc) +1
    Do i=zfrange To zlrange
        "ISREDIT (line) = LINE" i
        seq = Substr(line,sc,len)
        If seq = '??????' Then Iterate
        If ic = 'Y' Then,
            If Datatype(seq) /= 'NUM' Then Iterate
        If seq <= pseq | Datatype(seq) /= 'NUM' Then Do
            lin#s = lin#s i
            errs = errs +1
            xx = 'Line' Right(i,6) 'is out of sequence with' pseq' ('errs').'
            "ISREDIT LINE_BEFORE" i "= NOTELINE (xx)"
        End
        If seq > pseq Then Do
            pseq = seq
            errs = 0
        End
    End
    If lin#s /= '' Then Do
      xx = 'The following lines are out of sequence:'
      "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (xx)"
      Do While lin#s /= ''
        Parse VAR lin#s xx +72 lin#s
        "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (xx)"
      End
    End
ext1:
    "ISREDIT CAPS = (caps)"
    "ISREDIT USER_STATE = (status)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE')
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

    all = parse_cons('A','ALL','NULL',1)
    ic  = parse_cons('IC',,,1)

    sc = parse_cons('-',,'NULL','WORD')
    If sc /= '' Then Do
        Parse VAR sc sc '-' ec
        If sc = '' Then sc = 1
        Else If Datatype(sc) /= 'NUM' Then Do
            gc009 = "Invalid FROM range."
            Signal err01
        End
        If ec = '' Then "ISREDIT (ec) = LRECL"
        Else If Datatype(ec) /= 'NUM' Then Do
            gc009 = "Invalid TO range."
            Signal err01
        End
    End
    Else Do
        sc = 1
        ec = 6
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

help:
    x_msg = Msg()
    x     = Msg('Off')
    Trace o
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

   NC: (Number Check)

   Routine to test for incremental line numbers. Will report any
   lines that are not greater than the previous one.
   Non numeric numbers can be ignored by parameter entry.
   '??????' (six ?) in the sequence number will be ignored regardless
   of the absence or presence of the 'IC' parameter.

   Lines to be checked may be sellected by the Cnnn line command
   or the CC block line command. Alternatively tou may use a parameter
   of 'ALL' to select all lines.

   Each line out of sequence withing the line range will be tagged
   with a NOTELINE and a summary will be NOTEd at the top of the
   member.
   Each line error message will be of the format:
    "Line     11 is out of sequence with 007077 (1)."
   Interpreted as: Line 11 is out of sequence. It's sequence number
   is out of sequence with 007077 which was the last previous sequence
   number in sequence. The 1 in brackets indicates that it is the first
   line number out of sequence in that block.

   Default range is 1-6.  May put in any other range in format:
     sc-ec

     where:
        sc   - Start column. If missing will default to 1.
        '-'  - Seperator literal
        ec   - End Column. If missing will default to LRECL.

   Parameters:
     range  : Column sequence number range as above, Can use any
              column range.
     'IC'   : Literal to indicate Ignore Characters (including spaces).
     'ALL'  : Literal to indicate select all lines.

   GOTCHAS:
    1. This macro does not issue a RESET command to preserve
       exclusion status.  Consequently repeated use without manual
       intervention may result in a confusing display.


*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Call put_noteline
    Exit

put_noteline:
    ot = 'NOTELINE'
    "ISREDIT LABEL 1 = .MARKER"

    Trace
    x = Msg(x_msg)
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"
    Return 0

errproc:Call Off Error;Return Sigl

nl: Parse Arg nl;"ISREDIT LINE_BEFORE .MARKER = &OT (nl)";Return 0
