/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to look for a stack/one member(s) in a stack/one set of    */
/* HLQs. The HLQs may be wildcarded.                                  */
/*                                                                    */
/* Parameters (positional):                                           */
/*   1. Set of hlqs seperatesd by spaces.                             */
/*   2. Set of members seperated by spaces. Members cannot be         */
/*      wildcarded. There must be a comma seperator between the 1st.  */
/*      and 2nd. 'block' of parameters.                               */
/*   3. Keyword parameters:                                           */
/*      /RECALL - Recall dataset if it is migrated. Watch the use of  */
/*                this parameyter as it could bring a lot of datasets */
/*                back if bnadly wildcarded.                          */
/*      /TRACE  - Turn REXX trace on.                                 */
/*                                                                    */
/* Members required to package this routine:                          */
/* REXX:                                                              */
/*   NEEDLE   - This driver.                                          */
/*   $DSLIST  - Routine invoked to process output from IGGCSI00.      */
/* JCL:                                                               */
/*   NEEDLE   o JCL to invoke routine in batch.                       */
/* Loadmod:                                                           */
/*   IGGCSI00 - IBM's catalog generic filter interface (OS/390 2.4+). */
/*                                                                    */
/* Sample execution:                                                  */
/*  Online:                                                           */
/*   x=Needle(dslist,memblist,parms)                                  */
/*                                                                    */
/*  Batch:                                                            */
/*   //STEP01   EXEC PGM=IKJEFT01,REGION=0M                           */
/*   //SYSOUT   DD SYSOUT=*                                           */
/*   //SYSPROC  DD DISP=SHR,DSN=SF0558.$$                             */
/*   //SYSTSPRT DD SYSOUT=*                                           */
/*   //SYSTSIN  DD DATA,DLM=$$                                        */
/*    %NEEDLE 'IDEAL.** SYS2.IDEAL.**','VPEHJE62 @IADPLTI'            */
/*   $$                                                               */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address TSO
    ARG parm#
    Parse VAR parm# haystack ',' needle ',' parms

    If Wordpos('/TRACE',parms)>0 Then #tr=Trace('r')
    If Wordpos('/RECALL',parms)>0 Then recal=1;Else recal=0

    haystack=Strip(Translate(haystack," ",","),,"'")
    needle=Strip(Translate(needle," ",","),,"'")
    break='*'Copies('-',70)'*';dsnl=44

    #msg=Msg('Off')
    If recal Then Do
        Do k=1 To Words(haystack)
            x=set_up(Word(haystack,k))
            Say ' '
            Say break
            Do i=1 To Queued()
                Parse Pull dtype dsn volume
                If volume/='MIGRAT' Then Iterate
                Say 'Recalling -' dsn
                "HRECALL '"dsn"'"
            End
        End
    End

    Do k=1 To Words(haystack)
        x=set_up(Word(haystack,k))
        Say ' '
        Say break
        Do i=1 To Queued()
            Parse Pull dtype dsn volume
            If dtype/='NONVSAM' Then Iterate
            If volume='MIGRAT' Then Do
                If recal Then Say Substr(dsn,1,dsnl) 'Migrated - recalled'
                Else Do;Say Substr(dsn,1,dsnl) 'Migrated';Iterate;End
            End
            Say Substr(dsn,1,dsnl)
            Do j=1 To Words(needle)
                pin=Word(needle,j)
                bale="'"Strip(dsn)"("pin")'"
                xx=Listdsi(bale "NORECALL")
                If sysreason/=3 Then,
                    If Sysdsn(bale)='OK' Then Say '   'pin
            End
        End
    End
    #msg=Msg(#msg)

exi1:
    Exit

/*--------------------------------------------------------------------*/
/* Create table                                                       */
/*--------------------------------------------------------------------*/
set_up: ARG mask
    If mask='' | mask='MASK' Then Return 8
    x=$Dslist(mask . . '*')
    Return 0

