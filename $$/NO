/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* NO: Number output. Generates sequential numbers in source code     */
/*     Usually columns 1-6, 1-8 or 73-80.  HOwever it can be used to  */
/*     insert sequential numbers in a particular column of data.      */
/*                                                                    */
/*     For further details, use parameter of "?" for tutorial.        */
/*                                                                    */
/* Packaging:                                                         */
/*    NO    - REXX Driver                                             */
/*    NOP   - Defaults entry panel                                    */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=
    Address ISREDIT
    If parm#='?' Then Signal help

    Call parse_parms
    x=Trace(#tr)

    If all Then Do;fline=1;"(tline)=LINENUM .ZLAST";End
    Else Do
        "PROCESS RANGE C";"(cmd)=RANGE_CMD"
        If cmd='C' Then Do
            "(fline)=LINENUM .ZFRANGE";"(tline)=LINENUM .ZLRANGE"
        End
        Else Do
            zedlmsg='No line numbers selected.';Signal err01
        End
    End

    len=(ec-sc)+1
    Parse VAR parm# sv iv .
    If sv='FF' & fline>1 Then Do
        "(line)=LINE" fline-1;sv=Substr(line,sc,len);sv#='FF'
    End
    If \Datatype(sv,'w') Then Do
        zedlmsg="Invalid initial value as 2nd. parameter.";Signal err01
    End
    If \Datatype(iv,'w') Then Do
        zedlmsg="Invalid increment value as 3rd. parameter.";Signal err01
    End
    If sv#='FF' Then sv=sv+iv

    If ot/='' Then Do
        "(caps)=CAPS";"CAPS=OFF"
        "ISREDIT LABEL" fline "= .MARKER"
        linex="Pass parameter pf 'AP' to make changes permanent."
        x=nl('*')
        x=nl(linex)
        x=nl('*')
        "CAPS=(caps)"
    End
    Do i=fline To tline
        "(line)=LINE" i
        linex=Overlay(Right(sv,len,'0'),line,sc,len)
        sv=sv+iv
        If ot/='' Then x=nl(linex);Else "LINE &I=(linex)"
    End
ext1:Exit

err01:Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit

nl: Parse Arg nl;"ISREDIT LINE_BEFORE .MARKER = &OT (nl)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    #tr=parse_cons('TRACE','R','O',3)
    If #tr='O' Then #tr=parse_cons('/TR','R','O',3)

    def=parse_cons('/DEF',1,0,2)
    If def Then Nop;Else def=parse_cons('DEF',1,0,1)
    If def Then Do
        parm# = Strip(parm#)
        Address ISPEXEC "VGET (nodeflt) PROFILE"
        If parm#='?' Then Do
            parm#=nodeflt
            Address ISPEXEC "DISPLAY PANEL(NOP)"
            If rc/=0 Then Do
                zedlmsg="Default registartion abandoned.";Signal err01
            End
            nodeflt=parm#;prm#=
            Address ISPEXEC "VPUT (nodeflt) PROFILE"
        End
        If parm#/='' Then parm#=nodeflt parm#;Else parm#=nodeflt
    End
    all=parse_cons('ALL',1,0)
    ot=parse_cons('APPLY','NULL','NOTELINE',2)
    sc=parse_cons('-',,'NULL','WORD')
    If sc/='' Then Do
        Parse VAR sc sc '-' ec
        If sc='' Then sc=1
        Else If \Datatype(sc,'W') Then Do
            zedlmsg="Invalid FROM range.";Signal err01
        End
        If ec='' Then "ISREDIT (ec) = LRECL"
        Else If \Datatype(ec,'w') Then Do
            zedlmsg="Invalid TO range.";Signal err01
        End
    End
    Else Do
        zedlmsg="Missing column range of format 'scol-ecol'.";Signal err01
    End
    Return 0

err01:Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

help:
    n_st = mark(2)                          /* Mark next line         */
/*
    Hello &CNAME..

    NO is a macro to assist in re-numbering source code for entire
    member or a block of lines.

    Lines to be renumbered may be sellected by the Cnnn line command
    or the CC block line command. Alternatively tou may use a parameter
    of 'ALL' to select all lines.

    Format is as follows:

      NO s-e st# in# {AP {ALL} }
         Where:
          s     - Start column. If missing defaults to 1.
          "-"   - Seperator literal
          e     - End column. If missing defaults to LRECL.
          st#   - Starting number. Number to start numbering. May use
                  literal "FF" to follow on from the previous line's
                  number.
          ic#   - Increment.
          "AP"  - Literal to apply numbers as opposed to simulation.
                  Without this parameter renumbering will only be
                  simulated using NOTELINEs at the top of the starting
                  line.
          "ALL" - Literal to select all lines for renumbering.

     Other parameters:
         "D" or "/D"
                - D will substitute the "D" with predefined defaults
                  that may be entered via the defaults entry panel.
                  Note, additional parameters may be appended to the
                  default values, eg. "NO D AP"
         "?"    - By itself will display this help panel.
                - ? combined with the D will present a default entry
                  screen, eg. "NO D ?".  This screen will permit
                  entry of default parameters that can later be used
                  to minimise keystrokes.

     GOTCHAS:
      1. Incorrect column entry in an 'AP' run may cream valid code.
         Hence the defaulted simulation run.
      2. 'AP' run after a simulation run will lose line selection
         range unless 'ALL' is used. Make sure the 'AP' run range is
         the same as the simulation range.
      3. This macro does not issue a RESET command to preserve
         exclusion status.  Consequently repeated use without the
         'AP' parameter and subsequent manual intervention may
         result in a confusing display.

*/
    n_en = mark(-2)                         /* Mark prev 2 line       */
    Call put_noteline
    Exit

put_noteline:
    ot='NOTELINE';"LABEL 1=.MARKER"
    chgchar = '&'
    cname='there'
    Signal on Syntax Name error_off_1
    cname=$Whoami('C')
error_off_1:
    Signal Off Syntax

    "(caps)=CAPS";"CAPS=OFF"
    x=nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            Interpret 'line = p1 || 'var' || p2'
        End
        x=nl('*'Substr(line,1,70)'*')
    End
    x=nl('*'Copies('-',70)'*')
    "CAPS=(caps)"
    Return 0

nl:Parse Arg n#;"LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
