/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Operator Command.                                                  */
/*                                                                    */
/* Parameters: (Keywords processed for 1st.)                          */
/*   Keywords:                                                        */
/*     STart  - Start CICS region                                     */
/*     SHut   - Shut CICS region                                      */
/*     Immed  - Immediately (for shut)                                */
/*     N=node - Node name if not current system (may use last char    */
/*              with ANZ prefix default).                             */
/*     NOEdit - Automatically submit JCL. Without this parameter,     */
/*              the JCL will be presenter under VIEW and must be      */
/*              submitted manually.                                   */
/*     /ASIS  - Pass the full parameter to OPERCMD.                   */
/*                                                                    */
/*   Remaining positional:                                            */
/*     xxxxx  - CICS region name                                      */
/*--------------------------------------------------------------------*/
    ARG parm#
    Parse SOURCE . . xcmd .
    Address ISPEXEC
    If parm# Â¬= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    If Verify(Substr(sysid,4,1),'CHI') = 0 Then prod = ''
    Else                                        prod = 'P'
    start_jcl = ,
                'SYS4.TS13.RUNTIME.CNTL',
                prod'CIX.R410.RUNTIME.CNTL',
                ''
    userid = Userid()
    "VGET (ocmacro) SHARED"
    If ocmacro = 'Y' Then Signal macro_1

    Call parse_parms
    If trace = Y Then TRACE r
    If parm1 = "HELP" | parm1 = "?" Then Do
        "ISPEXEC SELECT PGM(ISPTUTOR) PARM(HNOHELP)"
        Exit
    End

    Select
        When (asis = 'Y') Then,
            oparm = "'"parm#"'"
        When (shut = 'Y') Then,
            oparm = "'F "region",CEMT P SHUT"immed"'"
        When (start = 'Y') Then,
            oparm = "'S CIX,SYSTEM="region"'"
        Otherwise Do
            gc009 = "Invalid/missing command '"#parm#"' entered."
            oparm = "'Missing command.....'"
            "SETMSG MSG(GC009)"
        End
    End
    Call build_jcl

ext1:
    "SETMSG MSG(GC009)"
    Exit


build_jcl:
    Address TSO "NEWSTACK"

    Queue '//'Substr(userid'OPC',1,8)' JOB CLASS=E,MSGCLASS=V,NOTIFY=&SYSUID'
    Queue '//*MAIN SYSTEM='node
    Queue '//*----------------------------------------------------------------'
    Queue '//OPERCMD PROC IPARM='
    Queue "//STEP001  EXEC  PGM=OPERCMD,PARM='&IPARM '"
    Queue '//STEPLIB  DD  DISP=SHR,DSN=ANZ.AUTHLIB'
    Queue '//SYSPRINT DD  SYSOUT=*'
    Queue '//             PEND'
    Queue '//OPERC  EXEC OPERCMD,'
    Queue '// IPARM='oparm
    Queue '//'
    Queue ''

    If noedit /= 'Y' Then Do
        Queue ''
        "VGET ZTEMPF"
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        ocmacro = 'Y'
        "VPUT (ocmacro) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd")"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Address TSO 'DELSTACK'
        Exit
    End

    Queue "ZZ"
    x = Msg('On')
    x = Outtrap('line.',10,'NOCONCAT')
SAY Address TSO "SUBMIT * END(ZZ)" "<- Remove SAY in REXX for auto submission"
    x = Msg('Off')

    Address TSO 'DELSTACK'

    Do i=1 To line.0
        If Index(line.i,'SUBMITTED') > 0 Then Do
            line = ' 'line.i
            Parse VAR line ' JOB ' rest
            zerrlm = 'JOB' rest
            zerrsm = ''
            Return 0
        End
    End

    Return 0

macro_1:
    ocmacro = ''
    "VPUT (ocmacro) SHARED"
/*--------------------------------------------------------------------*/
/* Help tutorial extracted from instream data                         */
/*--------------------------------------------------------------------*/
    Trace o
    "CONTROL ERRORS RETURN"
    "ISREDIT RESET"

    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

    You have to manually submit this JCL from the command line
    as it will not be automatically submitted for you.


                              *****

   Parameters: (Keywords processed for 1st.)
     Keywords:
       STart  - Start CICS region
       SHut   - Shut CICS region
       Immed  - Immediately (for shut)
       N=node - Node name if not current system (may use last char
                with ANZ prefix default).
       NOEdit - Automatically submit JCL. Without this parameter,
                the JCL will be presenter under VIEW and must be
                submitted manually.
       /ASIS  - Pass the full parameter to OPERCMD.

     Remaining positional:
       xxxx   - CICS region name (full name or just last 4 bytes)

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Trace
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')

    Call queue_jcl

    x = nl('*'Copies('-',70)'*')

    Return 0

/*--------------------------------------------------------------------*/
/* Queue the JCL from the source lines                                */
/*--------------------------------------------------------------------*/
queue_jcl:
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End

    Return 0

nl:Parse Arg l;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (l)";Return 0

errproc:Call Off Error;Return Sigl

staxroc:Interpret Signal retsyn


/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    #parm# = parm#
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE',,,2)
    If trace = 'N' Then trace = parse_cons('/TRACE',,,2)

    node  = parse_varb('NODE=','????')
    If node = '????' Then node  = parse_varb('N=',sysid)
    If Length(node) = 1 Then node = 'ANZ'node

    noedit = parse_cons('NOEDIT',,,3)
    asis   = parse_cons('/ASIS',,,2)
    If asis = 'N' Then Do
        start  = parse_cons('START',,,2)

        If start = 'N' Then Do
            shut = parse_cons('SHUT',,,2)
            If shut = 'Y' Then immed = Parse_cons('IMME',' I','NULL',1)
        End

        Parse VAR parm# region .
        If Length(region) = 4 Then region = 'CICS'region
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

