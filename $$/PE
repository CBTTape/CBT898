/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* PE: Procedure Expand.                                              */
/* ---------------------                                              */
/*                                                                    */
/* Routine to process a JCL PROC and perform variable substitution.   */
/* For instream procs (will only work on the first proc in the JCL),  */
/* use the copy line or block commands for source of the variables    */
/* to substitute between the (first) '//xx PROC ' and '// PEND '      */
/* statements.                                                        */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     PE       - Driver                                              */
/*                                                                    */
/*   Panels:                                                          */
/*     PEH0000  - Tutorial                                            */
/*                                                                    */
/*--------------------------------------------------------------------*/
    PARSE UPPER ARG parm1 parm2 parm3
    If parm1 ^= "" Then Signal byp1
    ADDRESS ISPEXEC
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm1,parm2,parm3) NOPROCESS"
    If rc > 0 Then SIGNAL byp1
    PARSE UPPER VAR parm1 parm1
    PARSE UPPER VAR parm2 parm2
    PARSE UPPER VAR parm3 parm3

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    If parm1 = "HELP" | parm1 = "?" Then Do
        "ISPEXEC SELECT PGM(ISPTUTOR) PARM(HNOHELP)"
        Exit
    End

    Call parse_parms
    If trace = 'Y' Then Trace R

    "ISREDIT (status) = USER_STATE"
    "ISREDIT SCAN = OFF"

    labf   = 1
    Do Forever

/*--------------------------------------------------------------------*/
/* Find the start of the procedure                                    */
/*--------------------------------------------------------------------*/
    "ISREDIT PROCESS RANGE C"
    "ISREDIT (cmd) = RANGE_CMD"
    If cmd = 'C' Then Do
        If cmd = 'M' Then del = "Y"
        "ISREDIT (rangef) = LINENUM .ZFRANGE"
        "ISREDIT (ranget) = LINENUM .ZLRANGE"
        range  = 'Y'
    End
    Else Do
        range  = 'N'
        rangef = 0
    End

    "ISREDIT F 'XX' 1 2 .ZFRANGE .ZLRANGE FIRST"
    rc1 = rc
    If rc1 ^= 0 Then Do
        "ISREDIT C 'X/' 1 2 .ZFRANGE .ZLRANGE FIRST"
        rc1 = rc
    End
    If rc = 0 & xjcl ^= 'Y' Then Do
        gc009 = "'X/' or 'XX' found in col 1. Use parameter of XJCL",
                "and re-execute."
        "ISPEXEC SETMSG MSG(GC009)"
        Signal ext1
    End
/*--------------------------------------------------------------------*/
/* Test for 'XJCL P' generated procedure                              */
/*--------------------------------------------------------------------*/
    If xjcl = 'Y' Then Do
        "ISREDIT C 'XX' // 1 2 .ZFRANGE .ZLRANGE ALL"
        "ISREDIT C 'X/' // 1 2 .ZFRANGE .ZLRANGE ALL"
        "ISREDIT RESET"
    End

    labf   = 1
    Do Forever
/*--------------------------------------------------------------------*/
/* Find the start of the procedure                                    */
/*--------------------------------------------------------------------*/
        "ISREDIT CURSOR = " labf 0
        "ISREDIT FIND ' PROC '"
        If rc ^= 0 Then Leave
        "ISREDIT (line) = LINE .ZCSR"
        If Substr(line,1,2) ^= '//' Then Iterate
        If Substr(line,3,1) =  '*'  Then Iterate
        Parse VAR line lab cmd rest
        If cmd ^= 'PROC' Then Iterate
        "ISREDIT (labf) = LINENUM .ZCSR"
        "ISREDIT LABEL" labf "= .LABF"

/*--------------------------------------------------------------------*/
/* Find the end of the procedure                                      */
/*--------------------------------------------------------------------*/
        Do Forever
            "ISREDIT FIND ' PEND '"
            If rc = 0 Then Do
                "ISREDIT (line) = LINE .ZCSR"
                If Substr(line,1,2) ^= '//' Then Iterate
                If Substr(line,3,1) =  '*'  Then Iterate
                Parse VAR line . cmd .
                If cmd ^= 'PEND' Then Iterate
                "ISREDIT (labt) = LINENUM .ZCSR"
            End
            Else "ISREDIT (labt) = LINENUM .ZLAST"
            Leave
        End
        "ISREDIT LABEL" labt "= .LABT"
        If range = 'N' Then Do
            rangef = labf
            ranget = labt
        End

        Do k=rangef Until k>ranget
            "ISREDIT (line) = LINE" k
            If Substr(line,3,1) =  '*'  Then Iterate
/*      Say line                                                      */
            Call Parse_line_1;If c ^= ',' Then Leave
        End
        If range  = 'Y' Then Leave
        labf = labt
    End
    If line = 'LINE' Then Do
        gc009 = "No 'PROC' statement found."
        "ISPEXEC SETMSG MSG(GC009)"
    End

ext1:
    "ISREDIT SCAN = ON"
    "ISREDIT USER_STATE = (status)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse each line for variable equates (permit >1 per line), make    */
/* the change and test for continuation lines.                        */
/*--------------------------------------------------------------------*/
Parse_line_1:
Trace Off
    c = ','
    If Substr(line,3,1) =  ' '  Then Parse VAR line slash2 data
    Else Do
        If range  = 'Y' Then Parse VAR line slash2 cmd proc data
        Else                 Parse VAR line slash2 cmd data
    End
    data = Strip(data)
    Do Forever
        p = Index(data,'=')
        If p = 0 Then Leave
        subj = Substr(data,1,p-1)
        p = p + 1
        If Substr(data,p,1) = "'" Then delast = 'Y'
        Else                           delast = 'N'
/*      Say 'data='data                                               */
        If Substr(data,p,1) = ',' Then Do
            If Substr(data,p+1,1) = ' ' Then data = ''
            Else                             data = Substr(data,p+1)
            obj = 'M-I-S-S-I-N-G'
            c   = ','
            i   = 0
/*      Say 'M='data                                                  */
        End
        Else Do
            obj = Substr(data,p,1)
            Do i=p+1 Until i>80
                c = Substr(data,i,1)
                If delast = 'Y' Then Do
                    If c = "'" Then Do
                        obj = obj||c
                        i = i + 1
                        c = Substr(data,i,1)
                        If c ^= "'" Then Leave
                        obj = obj||c
                    End
                End
                Else If c = " " | c = ',' Then Leave
                obj = obj||c
            End
            If i > 80 Then Do
                Say 'Error'
                c = ''
                Leave
            End
        End
/*      Say subj'<>'obj                                               */
        obj = Strip(obj)
        If obj = 'X' | obj = '*' Then obj = "'"obj"'"
        If Datatype(obj) = 'NUM' Then obj = "'"obj"'"
        data = Substr(data,i+1)
        "ISREDIT CURSOR = " labf 0
        "ISREDIT C &&"subj"." obj ".LABF .LABT ALL"
        "ISREDIT C &&"subj    obj ".LABF .LABT ALL"
        If c = ' ' Then Leave
        If Substr(data,1,1) = ' ' Then Leave
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    parml = 2
    Data = "parm"parml+1" = ''"
    Interpret data
    trace = 'N'
    xjcl  = 'N'

    Do i=1 To parml
        x = VALUE("parm"i)
        If x = "" Then Leave
        If x = 'XJCL' Then Do

            xjcl = 'Y'

            Do i=i To parml
                Data = "parm"i" = parm"i+1
                Interpret data
            End
        End
    End
    Do i=1 To parml
        x = VALUE("parm"i)
        If x = "" Then Leave
        If x = 'TRACE' Then Do

            trace = 'Y'

            Do i=i To parml
                Data = "parm"i" = parm"i+1
                Interpret data
            End
        End
    End

    Return 0

