/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* PICIT:                                                             */
/*                                                                    */
/* Routine to summarise COBOL picture clauses into a format that can  */
/* be used by the PSPROG and PSLOG macros.                            */
/*                                                                    */
/* Parameters:                                                        */
/*  "*"  - Use current member as template for source                  */
/*  "X"  - Execute. Bypass data entry screen                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Parse Upper ARG parm#
    If parm# /= "" Then Signal byp1
    Address ISPEXEC
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    If parm# = "HELP" | parm# = "?" | parm# = '/?' Then Do
        "ISPEXEC SELECT PGM(ISPTUTOR) PARM(AFH000)"
        Exit
    End
/*--------------------------------------------------------------------*/
    panel = 'PICITP'
    vars  = 'PICITSRC PICITFIX PICITID'
    "ISPEXEC VGET ("vars") PROFILE"
    "ISREDIT (mem) = MEMBER"
    "ISREDIT (dsn) = DATASET"
    If picitsrc = '' | parm# = '*' Then,
        picitsrc = "'"dsn"("mem")'"
    csr1 = 'picitSRC'
    If parm# = 'X' Then Signal process

scr1:
    zcmd = ''
    "ISPEXEC DISPLAY PANEL(&PANEL) CURSOR(&CSR1)"
    If rc /= 0 Then Do
        gc009 = "Parameter entry screen abandoned."
        Signal erx1
        Exit
    End
    If Sysdsn(picitsrc) /= 'OK' Then Do
        gc009 = Sysdsn(picitsrc)"."
        "ISPEXEC SETMSG MSG(GC009)"
        Signal scr1
    End
    "ISREDIT (dsn) = DATASET"
    "ISREDIT (mem) = MEMBER"
    If "'"dsn"("mem")'" = picitsrc Then Do
        gc009 = 'This member cannot be the same as the PICIT source.'
        "ISPEXEC SETMSG MSG(GC009)"
        Signal scr1
    End
    If zcmd = 'V' Then Do
        "ISPEXEC VIEW DATASET("picitsrc")"
        Signal scr1
    End

/*--------------------------------------------------------------------*/

    "ISREDIT RESET"
    "ISREDIT DEL ALL NX"

process:
    Call execio_rl
    Call output_comments

    linex  = ''
    occurs = ''
    olev   = 99
    Do i=1 To Linei.0
      If Substr(linei.i,7,1) = '*' | Substr(linei.i,7,1) = '/' |,
                                  Strip(linei.i) = '' Then Iterate
      Parse VAR linei.i seq 7 line 73 c73on
      If linex /= '' Then linex = linex || Strip(line,'B')' '
      Else                linex = linex || Strip(line,'T')' '
      xx = Strip(linex)
      If xx /= '' Then,
          If Substr(xx,Length(xx),1) = '.' Then Do
              Call process_line
              linex = ''
/*            If lev < olev Then olev = lev                           */
          End
    End

erx1:
    "ISPEXEC SETMSG MSG(GC009)"

ext1:
    Exit

process_line:
    linex = Strip(linex)
    linex = Substr(linex,1,Length(linex)-1)
    If Word(linex,1) = '88' Then Return 0
    Parse var linex lev vname . ' PIC' pic .
    If Index(' 'linex' ',' OCCURS ') > 0 Then Do
        Parse var linex . ' OCCURS ' occurs .
        occurs = Strip(occurs)
        olev   = lev
    End
    Else If lev <= olev Then Do
             occurs = ''
             olev = lev
         End
    pic_found = Index(' 'linex' ',' PIC ')
    If pic_found = 0 Then pic_found = Index(' 'linex' ',' PIC ')
    If pic_found = 0 Then Return 0
    vname = Strip(vname)
    If vname = 'FILLER' Then Return 0
    Call eval_pic_size
    piclo = picl
    Select
      When Index(' 'linex' ',' COMP ') > 0 |,
        Index(' 'linex' ',' COMPUTATIONAL ') > 0 |,
        Index(' 'linex' ',' COMP-4 ') > 0 |,
        Index(' 'linex' ',' COMPUTATIONAL-4 ') > 0 |,
        Index(' 'linex' ',' BINARY ') > 0 Then Do
          Select
            When picl <  5 Then picl = 2
            When picl < 10 Then picl = 4
            When picl < 19 Then picl = 8
            Otherwise Do
              x = nl1('       **** Have not catered for binaly length',
                     picl'.')
            End
          End
      End
      When Index(' 'linex' ',' COMP-3 ') > 0 |,
           Index(' 'linex' ',' COMPUTATIONAL-3 ') > 0 |,
           Index(' 'linex' ',' PACKED-DECIMAL ') > 0 Then Do
           picl = picl%2 +1
      End
      When Index(' 'linex' ',' COMP-2 ') > 0 |,
           Index(' 'linex' ',' COMPUTATIONAL-2 ') > 0 Then Do
           picl = 8
      End
      Otherwise Do
        If Index(' 'linex' ',' COMP- ') > 0 |,
           Index(' 'linex' ',' COMPUTATIONAL- ') > 0 Then Do
             x = nl1('       **** Have not catered for COMP-x format')
        End
      End
    End

    lineo = 'XXXX X',
            Substr(vname,1,30) Substr(type,1,2),
            Right(picl,3) Right(piclo,3),
            Substr('.'dec,1,2),
            Right(occurs,3)

    Call nl(lineo)

    Return 0

nl: Parse Arg ntl
    If parm# /= '*' Then,
        "ISREDIT LINE_AFTER .ZLAST = (ntl)"
    Else,
        "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (ntl)"
    Return 0

eval_pic_size:
    Parse VAR pic pic '.' .
    If Substr(pic,1,1) = 'X' Then Do
        type = 'X'
        dec  = ''
    End
    Else Do
        If Substr(pic,1,1) = 'S' Then type = '9S'
        Else                          type = '9'
        Parse VAR pic . 'V' dec .
        If dec /= '' Then Do
            If Index(dec,'(') > 0 Then Parse VAR dec . '(' dec ')' .
            Else dec = Length(dec)
            dec = dec +0
        End
    End
    picl = 0
    pic = Translate(pic,'    ','SV.,')
    Parse VAR pic p1 p2 p3
    pic = p1 || p2 || p3
    If Index(pic,'(') > 0 Then Do Forever
        Parse VAR pic xx '(' v1 ')' pic
        If v1 /= '' Then picl = picl + v1
        Else             picl = picl + Length(xx)
        If pic = '' Then Leave
    End
    Else Do
        pic = Space(pic,0)
        picl = Length(pic)
    End

    Return picl

execio_rl:
    If parm# /= '*' Then Do
        dd = 'PSLOGDD'
        Address TSO "ALLOC F("dd") DSN("picitsrc") SHR REU"
        Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
        Address TSO "FREE F("dd")"
    End
    Else Do
        "ISREDIT (last) = LINENUM .ZLAST"
        Do i=1 To last
            "ISREDIT (line) = LINE" i
            linei.i = line
        End
        linei.0 = i
    End
    Return 0

output_comments:
    "ISREDIT (caps) = CAPS"
    "ISREDIT CAPS = OFF"
    lineo = Copies('*',72)
    Call nl(lineo)
    lineo = Substr("* Created from "picitsrc" for use with",1,71)'*'
    Call nl(lineo)
    lineo = Substr("* PSPROG and PSLOG macros.",1,72)'*'
    Call nl(lineo)
    lineo = "* Overtype '.' in col 52 with a 'D' for date fields for",
            "appropriate"
    lineo = Substr(lineo,1,71)'*'
    Call nl(lineo)
    lineo = Substr("* processing.",1,71)'*'
    Call nl(lineo)
    lineo = "* 'D' in col 5 means duplicate logging detected. This is",
            "usually due"
    lineo = Substr(lineo,1,71)'*'
    Call nl(lineo)
    lineo = Substr("* to subscripted fields being manually processed.",1,71)'*'
    Call nl(lineo)
    lineo = Copies('*',72)
    Call nl(lineo)

    "ISREDIT CAPS = (caps)"
    Return 0

