/*--------------------------ooo00 REXX 00ooo--------------------------*/
    pm_ver='1.06'                           /* PM Version             */
    d_fmt='n'                  /* Date format N(ormal)   dd mmm yyyy  */
    d_fmt='u'                  /* Date format U(sa)      mm/dd/yyyy   */
    d_fmt='e'                  /* Date format E(uropean) dd/mm/yyyy   */
n_st=mark(2)                                /* Mark Start             */
/*

   PM: Parmlib Member navigator.

   Display of the active parmlib members used in current IPL as
   extracted from the IPA control block.  Will also display some other
   usefull IPL details readily available from the IPA control block.

   Will also permit browse/view/edit of active IPL members.

   Parameters:
     Positional:
     - Can pass "member" as per presentation (cols 1-8).
       Eg. "PM PROG" will display all members concatenated from
           appropriate dataset one at a time.
       - Cursor placement on cols 1-8 of line (with PM on command line)
         will do the same as above.
       - Cursor placement over member suffix (eg, over A1) will only
         present the member_suffix combo that the cursor is directly
         over.  The appropriate member(s) active for the IPL will be
         either browsed or viewed/edited if explicitly requested.
       - Cursor placement over the "Datasets:" word of parmlib datasets
         will be treated as if the "PARMLIB" keyword was entered.

     - Can also pass member suffix or wildcard using * or %.
       Eg. "PM PROG A*". Note, the wildcarding is on the last 2 bytes
       only.
     Keyword:
     /1 - Only display the first member from the parmlib concatenation
          that would be used during the IPL.  Use this paramater when
          there are multiple datasets that may have common members. Eg.
          "PM PROG /1".
     /E | /V | /B
        - Edit, view or browse display or selected members.  Default is
          browse.  These parameters are mutually exclusive.  Take care
          as you may accidently make changes in edit mode.
     /IA
        - Use ISPFALOC (instead of ISRDDN) to display parmlib concatenations.
          (ISPFALOC uses "Multi-Procs" features unavailable under ISRDDN.)
     PARMLIB
        - Concatenate the parmlib datasets, top down, to DD $PARMxx$ and
          presented under ISRDDN.  The 'xx' will be the "load" suffix.
     ?  - For this text as tutorial.  Tutorial needs routine "BR" to be
          available.  If it is not, the error is trapped and the
          tutorial is presented in "red screen text".

   Modify variable "d_fmt", at top of 'PM' member, to desired date
   format.  Original shipped with European format.


*/
n_en=mark(-2)                               /* Mark End               */
    Parse Upper Arg parm#;Parse SOURCE . . xcmd .
    If Wordpos(Word(parm#,1),'? HELP /? /H ??')>0 Then Do
        If Word(parm#,1)='??' Then Signal Help_me
        #msg=Msg('Off');Signal on Syntax Name Help_me
        x=$Br();zedlmsg=;Address ISPEXEC "SETMSG MSG(ISRZ001)"
        x=$Br(xcmd '??');Signal off Syntax;Exit
    End

    If Wordpos('/1',parm#)>0 Then Do
        only_1st=1;parm#=Delword(parm#,Wordpos('/1',parm#),1)
    End;Else only_1st=0
    If Wordpos('/IA',parm#)>0 Then Do
        ispfaloc=1;parm#=Delword(parm#,Wordpos('/IA',parm#),1)
    End;Else ispfaloc=0
    Select
        When Wordpos('/E',parm#)>0 Then Do
            d_act='EDIT';parm#=Delword(parm#,Wordpos('/E',parm#),1)
        End
        When Wordpos('/V',parm#)>0 Then Do
            d_act='VIEW';parm#=Delword(parm#,Wordpos('/V',parm#),1)
        End
        When Wordpos('/B',parm#)>0 Then Do
            d_act='BROWSE';parm#=Delword(parm#,Wordpos('/B',parm#),1)
        End
        Otherwise d_act='BROWSE'
    End
    If Wordpos('PARMLIB',parm#)>0 Then Do
        d_parmlib=1;parm#=Delword(parm#,Wordpos('PARMLIB',parm#),1)
    End;Else d_parmlib=0
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    Parse Upper VAR parm# imemb isuf parm3
    ima_macro=0
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    ms_s=1                                  /* Swap these two around  */
    ms_s=4                                  /* if you want to remove  */
                                            /* (4) or include (1)     */
                                            /* the "IPA" prefix.      */
/*          IPA offset Var name  Parmlib member prefix                */
/*          ----====== ========  ========-------------                */
    parm_membs=,
               '000868 IPAALLOC :ALLOC   :',
               '000870 IPAAPF   :IEAAPF  :',
               '000878 IPAAPG   :        :',
               '000880 IPABLDL  :        :',
               '000888 IPABLDLF :        :',
               '000890 IPACLOCK :CLOCK   :',
               '000898 IPACLPA  :        :',
               '0008A0 IPACMB   :        :',
               '0008A8 IPACMD   :COMMND  :',
               '0008B0 IPACON   :CONSOL  :',
               '0008B8 IPACONT  :        :',
               '0008C0 IPACOUPL :COUPLE  :',
               '0008C8 IPACPQE  :        :',
               '0008D0 IPACSA   :        :',
               '0008D8 IPACSCBL :        :',
               '0008E0 IPACVIO  :        :',
               '0008E8 IPADEVSU :DEVSUP  :',
               '0008F0 IPADIAG  :DIAG    :',
               '0008F8 IPADUMP  :        :',
               '000900 IPADUPLE :        :',
               '000908 IPAEXIT  :        :',
               '000910 IPAFIX   :IEAFIX  :',
               '000918 IPAGRS   :        :',
               '000920 IPAGRSCN :GRSCNF  :',
               '000928 IPAGRSRN :GRSRNL  :',
               '000930 IPAICS   :IEAICS  :',
               '000938 IPAIOS   :IECIOS  :',
               '000940 IPAIPS   :IEAIPS  :',
               '000948 IPALNK   :LNKLST  :',
               '000950 IPALNKAU :        :',
               '000958 IPALOGCL :        :',
               '000960 IPALOGLM :        :',
               '000968 IPALOGRE :        :',
               '000970 IPALPA   :LPALST  :',
               '000978 IPAMAXCA :        :',
               '000980 IPAMAXUS :        :',
               '000988 IPAMLPA  :IEALPA  :',
               '000990 IPAMSTRJ :MSTJCL  :',
               '000998 IPANONVI :        :',
               '0009A0 IPANSYSL :        :',
               '0009A8 IPANUCMA :        :',
               '0009B0 IPAOMVS  :BPXPRM  :',
               '0009B8 IPAOPI   :        :',
               '0009C0 IPAOPT   :IEAOPT  :',
               '0009C8 IPAPAGEO :        :',
               '0009D0 IPAPAGEP :        :',
               '0009D8 IPAPAGNU :        :',
               '0009E0 IPAPAGTO :        :',
               '0009E8 IPAPAK   :IEAPAK  :',
               '0009F0 IPAPLEXC :        :',
               '0009F8 IPAPRODP :        :',
               '000A00 IPAPROG  :PROG    :',
               '000A08 IPAPURGE :        :',
               '000A10 IPARDE   :        :',
               '000A18 IPAREAL  :        :',
               '000A20 IPARER   :        :',
               '000A28 IPARSU   :        :',
               '000A30 IPARSVNO :        :',
               '000A38 IPARSVST :        :',
               '000A40 IPASCH   :SCHED   :',
               '000A48 IPASMF   :SMFPRM  :',
               '000A50 IPASMS   :IGDSMS  :',
               '000A58 IPASQA   :        :',
               '000A60 IPASSN   :IEFSSN  :',
               '000A68 IPASVC   :IEASVC  :',
               '000A70 IPASWAP  :        :',
               '000120 IPASYM   :IEASYM(10):', /* (2) -> char len 2    */
               '000A78 IPASYSNA :        :',
               '000A80 IPASYSP  :IEASYS  :',
               '000A88 IPAVAL   :VATLST  :',
               '000A90 IPAVIODS :        :',
               '000A98 IPAVRREG :        :',
               '000AA0 IPARTLSP :        :',
               '000AA8 IPAUNIP  :        :',
               ''
    #tr=Trace('o')
    numeric digits 12
    cvt=c2x(Storage(10,4))
    ecvt=c2x(storage(d2x(x2d(cvt)+x2d(8C)),4))
    smca=c2x(storage(d2x(x2d(cvt)+x2d(c5)),3))
    ipldte=c2x(storage(d2x(x2d(smca)+x2d(154)),4))
    ipldte=Date(d_fmt,Substr(ipldte,3,5),'j')
    ipltme=(storage(d2x(x2d(smca)+x2d(150)),4))
    iplhh=Right(c2d(ipltme)%100%3600,2,'0')
    iplmm=Right(c2d(ipltme)%100//3600%60,2,'0')
    iplss=Right(c2d(ipltme)%100//60,2,'0')
    ipltme=iplhh||':'||iplmm||':'||iplss
    ipa=c2x(storage(d2x(x2d(ecvt)+x2d(188)),4))
    load=Storage(d2x(x2d(ipa)+x2d(30)),44)
    loads=Storage(d2x(x2d(ipa)+x2d(14)),2)
    root=x2d(ipa)+x2d(868)
    ii=0
    xx="IPL on" ipldte "at" ipltme"."
    x=Out(xx)
    x=Out(Copies('-',Length(xx)))
    x=Out(' ')
    p_l=12                                  /* Pamlib dataset # limit */
    plb=Storage(d2x(x2d(ipa)+x2d(1A0)),64*p_l)
    xxx=Strip(plb);plb=;clb=
    xx='Datasets:'
    Do While xxx/=''
        Parse VAR xxx dsn +64 xxx;Parse VAR dsn dsn vol .
        x=Out(xx Substr(dsn,1,40) vol)
        xx='         '
        plb=plb dsn;clb=clb"' '"dsn
    End
    clb=Subword(clb,2)"'"
    x=Out(' ')
    x=Out(Substr(ms('IPALPDSN'),1,8)':' Strip(load))
    x=Out(Substr(ms('IPALOADS'),1,8)':' loads)
    x=Out(' ')
    xxx=parm_membs
    Do While xxx/=''
        Parse VAR xxx offset varname ':' pmemb ':' xxx
        xx=Storage(d2x(x2d(ipa)+x2d(offset)),4)
        xx=c2x(xx)
        If Index(pmemb,'(')>0 Then Do
            Parse VAR pmemb pmemb '(' len ')'
            yy=Storage(d2x(x2d(ipa)+x2d(offset)),len)
            yy=Substr(yy,1,len);Parse VAR yy '(' yy ')';yy='('yy')'
        End
        Else Do
            If xx/='00000000' Then Do
                xx=Storage(xx,256)
                Parse VAR xx yy '00'x .
            End
            Else yy=
        End
        If pmemb/='' Then Interpret pmemb'=yy'
        xx=Substr(ms(varname),1,8)':' yy
        Do While Length(xx)>80
            y=Lastpos(',',Substr(xx,1,78))
            x=Out(Substr(xx,1,y) '+')
            xx='         ' Substr(xx,y+1)
        End
        x=Out(xx)
    End
    If imemb='' Then Do
        "VGET (zscreeni,zscreenc)"
        screenc=zscreenc;screeni=zscreeni
        sol=(screenc%80)*80+1;col=screenc-sol+2
        line=Substr(screeni,sol,80);wordx=$Wordat(line,screenc-sol)
        xx=Word(line,1)
        If Index('IPALOADS IPADatasets:' parm_membs,'IPA'xx)>0 Then Do
            imemb=xx
            If col>8 Then Do
                line=Translate(line,'    ','(),:');isuf=$Wordat(line,col)
            End
        End
    End
    If imemb='Datasets:' | d_parmlib Then Do
        dd_parm="$PARM"Strip(loads)"$"
        Address TSO "ALLOC F("dd_parm") DSN("clb") SHR REU"
        lev=substr(Mvsvar('sysmvs'),3,1)
        zedsmsg=
        zedlmsg='Parmlibs have been identified and allocated',
                'using "'dd_parm'".'
        "SETMSG MSG(ISRZ001)"
        If ispfaloc Then Do
            zopt="DDNAME("dd_parm") ALL"
            Address TSO "%ISPFALOC" zopt
            #m=Msg('Off')
        End
        Else Do
            If lev<6 Then "SELECT CMD(ISRDDN)"
            Else "SELECT CMD(ISRDDN ONLY" dd_parm")"
        End
        Exit
    End
    If imemb/='' Then Do
        If imemb='LOADS' Then Do
            d_act "DATASET('"Strip(load)"(LOAD"Strip(loads)")')"
            Exit
        End
        If imemb='LPDSN' Then Do
            d_act "DATASET('"Strip(load)"'"
            Exit
        End
        If Index(parm_membs,'IPA'imemb)>0 Then Do
            xxx=Substr(parm_membs,Index(parm_membs,'IPA'imemb))
            Parse VAR xxx varname ':' pmemb ':' .
            If Index(pmemb,'(')>0 Then Parse VAR pmemb pmemb '(' .
            Else pmemb=Strip(pmemb)
            If isuf/='' Then osuf=isuf;Else Interpret 'osuf='pmemb
            osuf=Strip(Translate(Strip(osuf),'   ','(),'))
            proc_suf=
            Do While osuf/=''
                Parse Var osuf suf osuf
                If osuf='' & suf='L' Then Iterate
                xxx=plb
                Do While xxx/=''
                    Parse VAR xxx dsn xxx;dsn="'"dsn"("pmemb||suf")'"
                    two_char_suf=0
                    Select
                        When Index(suf,'*')>0 Then Nop
                        When Index(suf,'%')>0 Then Nop
                        When Index(suf,'+')>0 Then Nop
                        When Sysdsn(dsn)='OK' Then two_char_suf=1
                        Otherwise Iterate
                    End
                    If only_1st & two_char_suf Then Do
                        If Wordpos(suf,proc_suf)>0 Then Iterate
                        proc_suf=proc_suf suf
                    End
                    d_act 'DATASET(&DSN)'
                End
            End
        End
        Exit
    End
    lineo.0=ii
    dd='PV'Time('s');"VGET ZTEMPF"
    Address TSO "ALLOC F("dd") DSN('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "dd" (STEM lineo. FINIS"
    "CONTROL ERRORS CANCEL"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    d_act "DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dd")"
    Exit

/*--------------------------------------------------------------------*/
ms: Return Substr(Arg(1),ms_s)
Out: ii=ii+1;lineo.ii=Arg(1);Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
Help_me:Do i=n_st To n_en;Say Substr(Sourceline(i),1,79);End;Exit
/*------------------------------ REXX --------------------------------*/
/* $WORDAT:                                                           */
/* -------                                                            */
/* Returns the words in a string that falls on a particular character */
/* posistion.  If the character at the position is blank, the next    */
/* word is taken.  Can pass parameter of L(eading) or T(railing) to   */
/* split the string on the word and return the lead or tail part of   */
/* the string (can be either case).                                   */
/*                                                                    */
/* Parameters (positional):                                           */
/*   1. Source string.                                                */
/*   2. Colunm to locate.                                             */
/*   3. Return data indicator:                                        */
/*       L - Lead. Text before the word including leading/trailing    */
/*           spaces.                                                  */
/*       T - Trail. Text including and following the word including   */
/*           trailing spaces.                                         */
/*       # - Return the word number of the word at requested          */
/*           position.                                                */
/*       W - Return the word.  (Any value other than those defined    */
/*           above.                                                   */
/*                                                                    */
/* Notes:                                                             */
/*   Leading will EXCLUDE the word.                                   */
/*   Trailing will INCLUDE the word.                                  */
/*--------------------------------------------------------------------*/
$Wordat:$Wordat_ver='1.04'
    Parse Arg i_strg,s_col,r_split
    If s_col<1 Then s_col=1
    If Length(i_strg)<s_col Then i_strg=i_strg' '
    #i_i=Lastpos(' ',i_strg,s_col);r_split=Translate(r_split)
    If #i_i=0 Then #i_i=1
    Select
        When r_split='L' Then Do
            If #i_i=Length(i_strg) Then suff=;Else suff=' '
            Return Substr(i_strg,1,#i_i-1)suff
        End
        When r_split='T' Then Return Strip(Substr(i_strg,#i_i),'l')
        When r_split='#' Then Return Words(Substr(i_strg,1,#i_i-1))+1
        Otherwise Do
            Parse Value Substr(i_strg,#i_i) With i_strg .
            Return i_strg
        End
    End
