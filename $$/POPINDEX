/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to rebuild '*.$$' dataset from all it's componentry.       */
/* For further details, refer to 'help_me' below.'s components based  */
/* on the index definitions. (Use lower case to bypass JCL inclusion) */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     POPINDEX - This driver that acts as driver and recursive macro.*/
/*     $$$INDEX - Built index with '|x)' in cols 11 to identify       */
/*                source.                                             */
/*                (Can have any "index" but must adhere to index      */
/*                 format.)                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Parse SOURCE . . xcmd .
    Address ISPEXEC
    If parm# /= '' Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    ima_macro = 'Y'

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

/*  hlq    = $alkhlq()                                                */
    hlq    = Sysvar(Syspref)
    chgchar= '`'
    userid = Userid()
    Parse Upper VAR parm# parm1 .
    If parm1 = "HELP" | parm1 = "?" Then Signal help_me

    sysid    = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))
    zerrhm   = '*'
    zerralrm = 'NO'
    zedSmsg  = ''

ini1:
    Call parse_parms
    If trace = 'Y' Then Trace r
    If parm1 = '' Then parm1 = "$$$INDEX"

/*  out = '&DSN1..$$'                                                 */
    "ISREDIT (member)=MEMBER";"ISREDIT (out)=DATASET"
    If member=parm1 | member='POPINDEX' Then Do
        zedlmsg = 'Member "'member'" cannot be current member.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    If Sysdsn("'"out"("parm1")'")/='OK' Then Do
        zedlmsg = 'Member "'parm1'" cannot be found.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End

    "ISREDIT RESET"
    "ISREDIT DEL ALL NX"
    "ISREDIT COPY" parm1 "AFTER .ZLAST"

    If ima_macro /= 'Y' Then Do
        zedlmsg = "Only usable as edit macro preferably not $$$INDEX",
                 "member."
        Signal exi1
    End

    "ISREDIT (status) = USER_STATE"
    "ISREDIT (last) = LINENUM .ZLAST"


    a4 = 'ACIJHMPRST'                      /* Valid for              */
    b4 = 'ACIJHMPRS'                       /* Valid for              */
    d4 = ,
         'A: ASM              ',
         'C: CLIST            ',
         'I: ISPPLIB.IBM      ',
         'J: JCL.CNTL         ',
         'H: ISPPLIB.TUTORIAL ',
         'M: ISPMLIB          ',
         'P: ISPPLIB          ',
         'R: REXX             ',
         'S: ISPSLIB          ',
         'T: ISPTLIB          ',
         '@: ALL              ',
         ''
    s4 = 'RCSPIUMJ'                        /* Select for             */
    If m4 = '?' Then s4 = a4               /* Select ALL             */
    Else             s4 = m4
    Do i=1 To Length(s4)
        Interpret Substr(s4,i,1)'.0 = 0'
    End

    If zip = 'Y' Then Do
        msgt = 'NOTELINE'
        If all /= 'Y' Then z4 = 'R'
        Else               z4 = b4
        Do i=1 To Last
            "ISREDIT (line) = LINE" i
            Parse VAR line ,
                      2 memb +8,
                     12 type +1,
                     13 typi +1,
                     15 desc
            If s4/='@' Then Do
                If typi /= ')'        Then Iterate
                If Index(z4,type) = 0 Then Iterate
            End
            xxx = out'('Strip(memb)')'
            x = nl(Substr('!(I)' xxx,1,42)xxx)
        End
        Exit
    End

    If s4='@' Then i=3;Else i=1
    Do i=i To Last
        "ISREDIT (line) = LINE" i
        Parse VAR line ,
                  2 memb +8,
                 12 type +1,
                 13 typi +1,
                 15 desc
        If s4/='@' Then Do
            If typi /= ')'        Then Iterate
            If Index(s4,type) = 0 Then Iterate
        End
        Else type='@'
        Interpret type'.0 = 'type'.0 +1'
        Interpret 'y = 'type'.0'
        Interpret type'.'y' = memb'
    End

    jobid = Substr(Userid()"BLD",1,8)
    "ISREDIT DELETE ALL NX .ZFIRST .ZLAST"
    "ISREDIT LINE_AFTER .ZFIRST = ' '"
    Call build_note_1
    msgt = 'NOTELINE'
    msgt = ''
    Call build_jcl
    Do i=1 To Length(s4)
        type = Substr(s4,i,1)
        Interpret 'k = 'type'.0'
        If k = 0 Then Iterate
        wd = Wordpos(type':',d4)
        If wd = 0 Then Iterate
        indd = '&DSN2..'Word(d4,wd+1)
        x = nl(Substr('//'type'IN',1,10) 'DD DISP=SHR,DSN='indd)
    End
    x = nl(Substr('//SYSIN',1,10) 'DD *')

    Do i=1 To Length(s4)
        type = Substr(s4,i,1)
        Interpret 'k = 'type'.0'
        If k = 0 Then Iterate
        If exp = 'N' Then,
            x = nl(' COPY INDD=(('type'IN,R)),OUTDD=OUT')
        Else,
            x = nl(' COPY INDD=((OUT,R)),OUTDD='type'IN')
        Do j=1 To k
            Interpret 'memb = 'type'.'j
/*          Interpret 'line = "     SELECT MEMBER="'type'.'j          */
            x = nl("     SELECT MEMBER="memb)
        End
    End
    x = nl('/*')
    x = nl('//')
    "ISREDIT DELETE ALL NX .ZFIRST .ZFIRST"

Exit
    Exit

build_jcl:
    acct=$alkacct();v1='def_ex def_hd'
    Interpret "Parse Value $alkjc(v1) With" v1
    x = nl("//"jobid" JOB "acct",'REBUILD',")
    x = nl('//             CLASS='def_ex',COND=(4,LT),')
    x = nl('//             MSGCLASS='def_hd',')
    x = nl('//             NOTIFY=&SYSUID')
    x = nl('//*')
    x = nl('//VARS    SET DSN1='hlq)
    x = nl('//        SET DSN2='hlq)
    x = nl('//*')
If new = 'Y' Then Do
    x = nl('//STEP0   EXEC PGM=IDCAMS REGION=2048K')
    x = nl('//SYSPRINT DD  SYSOUT=*')
    x = nl('//SYSIN    DD  *')
    x = nl('  DELETE 'out)
    x = nl('  IF MAXCC < 9 THEN SET MAXCC = 0')
    x = nl('/*')
End
    x = nl('//STEP1   EXEC PGM=IEBCOPY,REGION=2048K')
    x = nl('//SYSPRINT DD  SYSOUT=*')
If new = 'Y' Then Do
    x = nl('//OUT      DD DISP=(NEW,CATLG),DSN='out',')
    x = nl('//            SPACE=(TRK,(90,15,25)),UNIT=DISK,')
    x = nl('//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PO)')
End
Else,
    x = nl(Substr('//OUT',1,10) 'DD DISP=SHR,DSN='out)

    Return 0

nl:Parse Arg line
    If msgt /= '' Then "ISREDIT LINE_BEFORE .ZFIRST = &MSGT (line)"
    Else               "ISREDIT LINE_AFTER  .ZLAST  = &MSGT (line)"
    Return 0
/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#
    #tr=parse_cons('TRACE','R',,2)
    If #tr='N' Then #tr=parse_cons('/TRACE','R',,2)
    new=parse_cons('NEW',,,2)
    zip=parse_cons('ZIP',,,1)
    all=parse_cons('ALL',,,2)
    exp=parse_cons('/EXP',,,2)
    m4=parse_varb('S=','?')

    Parse VAR parm# parm1 parm2

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

build_note_1:
    n_st = mark(2)                          /* Mark next line         */
/*

`   Hello &CNAME..

    To gen JCL to export from the editted member, pass parameter of
`   "/EXP" to '&XCMD..' and delete any SELECT statements that are
    not required.

    Remember that members in the generic dataset reference it or
    should reference it and make the appropriate changes when
    importing or exporting.
    For imports, submit member "$CHANGE". Look at this member to
    get a feel for what is changed in case of exports.

                             -****-

    A wise man will always check his JCL before submitting the job.

                                               Confucious...

*/
    n_en = mark(-2)                         /* Mark prev 2 line       */

Output_data:
    Call get_name
    Call process_source

    Return 0

Help_me:
    n_st = mark(2)                          /* Mark next line         */
/*

`   Hello &CNAME..

`   This routine is used to manipulate the '&HLQ..$$' dataset.
    The primay purpose is to build the detaset, however, it can be
    used to export member into their respective "owner" datasets.

    This is achieved through the $$$INDEX member. The first
    character in the index description is used to identify the
    type/source of entry.

    The following associations are made:
          A: ASM
          C: CLIST
          I: ISPPLIB.IBM
          J: JCL.CNTL
          H: ISPPLIB.TUTORIAL
          M: ISPMLIB
          P: ISPPLIB
          R: REXX
          S: ISPSLIB
          T: ISPTLIB
          @: All members (ignores type)
    (Note, lower case characters are ignored.)

    IEBCOPY JCL will be generated with select statements to copy from
    datasets as per the above matrix into the ".$$" dataset. The
    '/EXP' parameter will reverse the above process.

    Parameters:
     ALL     - Used with the "ZIP" parameter.
               Generate statements for all members. By default only
               REXX members will be copied as they are the most
               volatile to change.

     /EXP - Generate JCL to export form the $$ dataset into the
               respective source dataset.
     NEW     - Delete/redefine the $$ dataset.
     ZIP     - Generate ZIP (AK/OS) format headder statements that
               can be used with the ZIP /R parameter to buils an all
               in one member. (Obsolete if XMITManager is available.)
     S=ccccc - String of above associations for which to copy.
               Eg. S=MPRS  copies ISPMLIB,ISPPLIB,REXX and ISPSLIB.
               Use s=@ for all members
     /R      - Build JCL in rename format. (Newname will be original
               name.)

    Use command "BLDINDEX" on lines describing function packaging
    member to build funtion packaing index that can then be hit with
    "POPINDEX".

*/
    n_en = mark(-2)                         /* Mark prev 2 line       */

    Call get_name
    Call process_source

    Return 0

process_source:
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    msgt = 'NOTELINE'
    x = nl('//*'Centre('ooo000OOOO000ooo',68,'-')'*')

    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,1) = chgchar Then Do Forever
            line = ' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        x = nl(line)
    End

    x = nl('//*'Copies('-',68)'*')
    "ISREDIT CAPS = (caps)"

    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Signal Off Syntax;Interpret synact;Interpret Signal synret

get_name:
    Signal On Syntax Name syntaxerr
    synret = 'ret_syntax_1'
    synact = "cname = 'there'"
    cname = $Whoami('C')
    Signal Off Syntax
ret_syntax_1:
    Return 0
