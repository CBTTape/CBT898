/*            REXX                                                    */
ARG parm#
/*    TRACE r                                                         */
/**********************************************************************/
/*                                                                    */
/*  This macro will permit printing of the dataset direct from the    */
/*  edit or browse session.                                           */
/*  To permit direct printing from a browse session, you will         */
/*  need to invoke it as a TSO command as follows:                    */
/*                                                                    */
/*      "TSO PRNT parm-list"                                          */
/*                                                                    */
/*  Alternatively you can place it in your active command table to    */
/*  eliminate the need for the "TSO" prefix, however, do not call it  */
/*  "PRNT" as in an edit session it will be invoked as a TSO command  */
/*  rather than an edit macro and any changes will not be saved prior */
/*  to printing.                                                      */
/*                                                                    */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     PRNT     - Driver                                              */
/*                                                                    */
/*   Panels:                                                          */
/*     PRNTHEX  o HEX print request parameter entry                   */
/*     PRNTLASR o Laser parameter entry screen                        */
/*     PRNTPARM o Parameter selection screen                          */
/*     PRNTH000 o Tutorial panel                                      */
/*     PRNTH100 o Tutorial panel                                      */
/*     PRNTH200 o Tutorial panel                                      */
/*     PRNTLASH o Laser Tutorial panel                                */
/*                                                                    */
/*   Source:                                                          */
/*     HEXPRINT o Hex print                                           */
/*     PRINTOFF o Customised source from CBT tape.                    */
/*                                                                    */
/*   Skeleton:                                                        */
/*     PRNTLASR o Laser destined JCL                                  */
/*                                                                    */
/*   LoadMOD:                                                         */
/*     HEXPRINT o Hex print                                           */
/*     PRINTOFF - Customised source from CBT tape.                    */
/*                                                                    */
/**********************************************************************/
    macro = "N"
    If parm# /= "" Then Signal byp1
    Address ISPEXEC
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then Signal byp1
    macro = "Y"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    Parse Upper VAR parm# parm1 .
    If parm1 = "?"  | parm1 = "HELP"  Then Signal help
    If parm1 = "/?" | parm1 = "/H" Then Signal help

    #fcb    = "APLO"                        /* Default FCB, site dep. */
    csr1    = ""
    class   = "A"
    hlq     = $alkhlq()
    sysuid  = Userid()
    xtra    = ""
    dest    = "RMT15"                       /* At Vic Police          */
    dest    = "R98"                         /* At CGU                 */
    dest    = "VPSPR3R"                     /* At ANZ                 */
    dest    = "LOCAL"
    dest    = "LPR31003"                    /* At TELSTRA             */
    labelr  = "N"
    quick   = "N"

    Call parse_parms
/*  Trace r                                                           */

/*--------------------------------------------------------------------*/
/* If operating as an Edit Macro get dataset name (member) or call    */
/* program GETDSN to extract the dataset name (member) from the screen*/
/* headline (edit/browse panels)....                                  */
/*--------------------------------------------------------------------*/
/*  Say macro                                                         */
    If macro = "Y" Then Do
        "ISREDIT (dataset) = DATASET"
        "ISREDIT (status)  = USER_STATE"
        "ISREDIT (member)  = MEMBER"
        "ISREDIT (changed) = DATA_CHANGED"
        If save = "N" Then labelr = "Y"
        If member = "" Then var = "DATASET"
        Else Do
            var = "MEMBER"
            dataset = dataset"("member")"
        End

        "ISREDIT PROCESS RANGE C"
        "ISREDIT (cmd) = RANGE_CMD"
        If cmd = 'C' Then Do
            "ISREDIT (labf) = LINENUM .ZFRANGE"
            "ISREDIT (labt) = LINENUM .ZLRANGE"
        End
        Else Do
            "ISREDIT (labf) = LINENUM .F"
            If rc = 0 Then Do
                "ISREDIT (labt) = LINENUM .T"
                If rc ¬= 0 Then,
                    "ISREDIT (labt) = LINENUM .ZLAST"
            End
            Else Do
                "ISREDIT (labf) = LINENUM .ZFIRST"
                "ISREDIT (labt) = LINENUM .ZLAST"
            End
        End

    End
    Else Do
        line   = 2
        screen = ''
        "ISPEXEC VPUT (LINE,SCREEN) SHARED"
        "ISPEXEC SELECT PGM(GETDSN)"
        "ISPEXEC VGET (LINE) SHARED"
        If Substr(line,2,77) = Copies('-',77) Then line = 3
        Else                                       line = 1
        linex = line
        "ISPEXEC VPUT (LINE,SCREEN) SHARED"
        "ISPEXEC SELECT PGM(GETDSN)"
        "ISPEXEC VGET (DATASET HEADLINE LINE) SHARED"
        If linex = 3 Then Do
            line = TRANSLATE(line,'  ','0001'x)
            Parse VAR line . dataset .
            headline = line
        End
        If dataset = "" Then Do
            gc009 = "Cannot extract dataset name from headline."
            Signal ext1
        End
        changed = "NO"
    End

/*--------------------------------------------------------------------*/
/* Display parameter entry screen if requested..                      */
/*--------------------------------------------------------------------*/
    If xparm = "Y" & hex = "N" Then Do
        "ISPEXEC DISPLAY PANEL(PRNTPARM) CURSOR(&CSR1)"
        If rc ¬= 0 Then Do
            gc009 = "Parameter entry screen abandoned. No print",
                    "produced."
            Signal ext1
        End
    End

/*--------------------------------------------------------------------*/
/* Set range parameters                                               */
/*--------------------------------------------------------------------*/
    If parm1  = "*" Then Signal impact1
    If hex    = "Y" Then Signal hexout
    If laser  = "Y" Then Signal laser1
    If nochg  = "Y" Then Signal impact2
    If labelr = "Y" Then Signal range
    Signal impact

/*--------------------------------------------------------------------*/
/* LASER printer parameter prompts                                    */
/*--------------------------------------------------------------------*/
laser1:
    "ISPEXEC VGET (LASERF LASERP LASERO LASERC LASERL) PROFILE"
    If laserf = "" Then laserf = "S"
    If laserp = "" Then laserp = "P"
    If lasero = "" Then lasero = 2
    If laserc = "" Then laserc = 1
    If laserl = "" Then laserl = 3
    "ISPEXEC VGET JOBPARM PROFILE"
    If jobparm = "" Then ,
       jobparm  = "/*JOBPARM ROOM=ZTS,LINES=9999"

    zcmd = ""

    "ISPEXEC DISPLAY PANEL(PRNTLASR)"
    If rc ¬= 0 Then Do
        gc009   = "Laser print abandoned."
        Signal ext1
    End

    "ISPEXEC VPUT (LASERF LASERP LASERO LASERC LASERL) PROFILE"
/*  save = "Y"                                                        */
    If nochg = "Y" Then Do
        save    = "Y"
        changed = "NO"
    End


    "ISPEXEC FTOPEN TEMP"
    "ISPEXEC FTINCL PRNTLASR"
    "ISPEXEC FTCLOSE"
    "ISPEXEC VGET ZTEMPF"

    If save = "Y" Then ,
        If changed = "YES" Then "ISREDIT SAVE"
        Else Nop
    Else Do
        Call qdata
        Queue "$$"
        Queue ""                            /* Dummy last             */
        x = MSG(Off)
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') MOD REU"

        rc1 = rc
        If rc1 ¬= 0 Then Do
            gc009   = "Allocation of 'OUTFILE' failed, rc="rc1"."
            Address TSO "FREE F(INFILE)"
            Signal ext1
        End

        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        Address TSO "FREE DD(ZTEMPF)"
        Address TSO "DELSTACK"

    End

    If edit = "EDIT" | zcmd = "EDIT" Then Do
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') old reu"
        "ISPEXEC LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        "ISPEXEC EDIT DATAID(&DATAID)"
        "ISPEXEC LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
    End
    tempsub = ztempf
    "ISPEXEC VPUT TEMPSUB SHARED"
    Address TSO "%TEMPSUB"
    If rc ¬= 0 Then Do
        zedsmsg = var" not printed"
        gc009   = "'"dataset"' printing cancelled."
        Signal ext1
    End
    Else Do
        zedsmsg = var" printed"
        gc009   = "'"dataset"' being printed in class '3' on the",
                  "laser."
        Signal ext1
    End
    Signal con1

/*--------------------------------------------------------------------*/
/* Hex print with leading sequence numbers to identify lines. Uses    */
/* in-house program rather than customised version of PRINTOFF...     */
/*--------------------------------------------------------------------*/
hexout:
    If changed = "YES" & nochg = "N" Then Do
        gc009   = "Changes have not been saved. Save them or use the",
                  "'NC' parameter."
        Signal ext1
    End
    If xparm = "Y" Then Do
        "ISPEXEC DISPLAY PANEL(PRNTHEX) CURSOR(&CSR1)"
        If rc ¬= 0 Then Do
            gc009   = "Parameter entry screen abandoned. No print",
                      "produced."
            Signal ext1
        End
    End

    x = MSG(Off)
    Address TSO "ALLOC F(INFILE) DA('"dataset"') SHR REU"
    rc1 = rc
    If rc1 ¬= 0 Then Do
        gc009   = "Allocation of 'INFILE' failed, rc="rc1"."
        Signal ext1
    End

    Address TSO "FREE ATTRLIST(XXXATR1)"
    Address TSO "ATTRIB XXXATR1 RECFM(F B A) LRECL(133) BLKSIZE(1330)"
    Address TSO "ALLOC F(OUTFILE) SYSOUT("class") REU USING(XXXATR1) ",
                 "DEST("dest")"
    rc1 = rc
    If rc1 ¬= 0 Then Do
        gc009   = "Allocation of 'OUTFILE' failed, rc="rc1"."
        Address TSO "FREE F(INFILE)"
        Signal ext1
    End

    "ISPEXEC VPUT (LINE# CLASS) SHARED"
/*  Address TSO "PRINTOFF '"dataset"'" dest class "HEX"               */

    If macro = "Y" Then ,
        If changed = "YES" Then "ISREDIT SAVE"

    "ISPEXEC SELECT PGM(HEXPRINT)"
    "ISPEXEC VGET (MESSAGE) SHARED"
    Address TSO "FREE F(INFILE OUTFILE) ATTRLIST(XXXXATR1)"
    gc009 = message
    Signal ext1

/*--------------------------------------------------------------------*/
/* Impact (LOCAL) or remote printers...                               */
/*--------------------------------------------------------------------*/
impact:
    If macro = 'Y' & save = 'N' Then Signal range
impact1:
    If changed = "YES" Then Do
        xtra = "saved and "
        "ISREDIT SAVE"
    End
impact2:
    x = MSG(On)
    x = OUTTRAP('line',5,'NOCONCAT')
    If parm1 = "*" Then,
        Address TSO "PRINTOFF '"dataset"'" parms
    Else ,
        Address TSO "PRINTOFF '"dataset"' DEST("dest") CLASS("class")"
    rc1 = rc
    x = OUTTRAP('Off')
    Signal con1

/*--------------------------------------------------------------------*/
/* Process .F/.T label range.....                                     */
/*--------------------------------------------------------------------*/
range:
    Call qdata
    If printer = 'TEMPF' Then Do
        Queue ""                            /* Dummy last             */
        x = MSG(Off)
        "ISPEXEC VGET ZTEMPF"
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') MOD REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        Address TSO "DELSTACK"
        "ISPEXEC LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        "ISPEXEC VIEW DATAID(&DATAID)"
        "ISPEXEC LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"

        Signal con0

    End
    If printer = 'Y' Then Do
        Queue ""                            /* Dummy last             */
        x = MSG(Off)
        Address TSO "FREE ATTRLIST(XXXATR1)"
        Address TSO "ATTRIB XXXATR1 RECFM(F B A) LRECL(133)",
            "BLKSIZE(1330)"
        Address TSO "ALLOC F(OUTFILE) SYSOUT("class") REU",
            "USING(XXXATR1) DEST("dest")"
        rc1 = rc
        If rc1 ¬= 0 Then Do
            gc009   = "Allocation of 'OUTFILE' failed, rc="rc1"."
            Address TSO "FREE F(INFILE)"
            Signal ext1
        End

        Address TSO "EXECIO * DISKW OUTFILE (FINIS"
        rc1 = rc
        If rc1 = 1 Then rc1 = 0         /* Data truncated         */
        Address TSO "FREE F(OUTFILE) ATTRLIST(XXXATR1)"
    End
    Else Do
        k = QUEUED()
        Trace Off
        Do i=1 to k-1
            PARSE PULL line
            Say SUBSTR(line,1,79)
        End
    End
    Address TSO "DELSTACK"


con0:
    Address ISPEXEC "ISREDIT USER_STATE = (status)"
    Signal con1

/*--------------------------------------------------------------------*/
/* Set up message line...                                             */
/*--------------------------------------------------------------------*/
con1:
    If rc1 ¬= 0  Then Do
        zedsmsg = "Save "var" first"
        gc009   = "Save "var" prior to attempting to print."
    End
    Else Do
         If parm1 = "" Then parm1 = dest "printer"
         zedsmsg = var" printed"
         gc009   = "'"dataset"' "xtra"is being printed on "parm1"."
     End
     Signal ext1


ext1:
    Address TSO "DELSTACK"
    Address ISPEXEC "SETMSG MSG(GC009)"
    Return 0

help:
    "ISPEXEC SELECT PGM(ISPTUTOR) PARM(PRNTH000)"
    Return 0

/*--------------------------------------------------------------------*/
/* build data in the REXX Q                                           */
/*--------------------------------------------------------------------*/
qdata:
    name=$Whoami(sysuid,'')

    "ISREDIT (all) = LINENUM .ZLAST"
    j = labt - labf + 1
    ADDRESS TSO
    "NEWSTACK"
    Queue "1"margin||,
     "          *---------------------------------------------------*"
    Queue " "margin||,
     "          *                                                   *"
    Queue " "margin||,
     "          *         **** TSO foreground hardcopy ****         *"
    x = "          *         "Substr("USERID="sysuid" ("name")",1,42)
    If Length(x) < 63 Then ,
        x = Substr(x,1,62,' ')"*"
    Queue " "margin||x
    Queue " "margin||,
     "          *         TIME= "TIME()"    DATE= "DATE('e'),
     "         *"
    x =   "          *         DSNAME='"dataset"'"
    If Length(x) < 63 Then ,
        x = Substr(x,1,62,' ')"*"
    Queue " "margin||x
    If j < all Then ,
        Queue " "margin||,
         "          *         >>>>>>>>>>> EXTRACT <<<<<<<<<<<<          *"
    Queue " "margin||,
     "          *---------------------------------------------------*"
    Queue " "
    Address ISPEXEC "ISREDIT CURSOR = &LABF 0"
    Trace Off

    If asis = "N" Then Do
        Do i=1 to j
            Address ISPEXEC "ISREDIT (line) = LINE &LABF"
/*          If line# = 'Y' Then line = RIGHT(i,6,'0') line            */
            If line# = 'Y' Then line = RIGHT(labf,6,'0') line
            labf = labf + 1
            Queue " "margin||line
        End
    End
    Else Do
        l = 0
        Do i=1 To j
            Address ISPEXEC "ISREDIT (xstat) = XSTATUS "i
            If xstat = "X" Then Do
                l = l + 1
                Iterate
            End
            If l > 0 Then Do

                Queue " "margin||,
                    "-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -",
                    " -  -"  l "LINES(S) NOT DISPLAYED"
                l = 0
            End
            Address ISPEXEC "ISREDIT (line) = LINE &I"
            If line# = 'Y' Then line = RIGHT(i,6,'0') line
            Queue " "margin||line
        End
        If l > 0 Then Do

            Queue " "margin||,
                " -      -  -  -  -  -  -  -  -  -  -  -  -  -  -  -",
                " -  -"  l "LINES(S) NOT DISPLAYED"
            l = 0
        End
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace = parse_cons('TRACE',,,2)
    If trace = 'N' Then trace = parse_cons('/TR',,,3)

/*--------------------------------------------------------------------*/
/* Test for inclusion of sequence numbers                             */
/*--------------------------------------------------------------------*/
    line# = parse_cons('LINES',,,2)
    If line# = 'N' Then line# = parse_cons('SEQ',,,2)

/*--------------------------------------------------------------------*/
/* Test for output to screen (#)                                      */
/*--------------------------------------------------------------------*/
    printer = parse_cons('#','N','Y')

/*--------------------------------------------------------------------*/
/* Test for output to TEMP F (#T)                                     */
/*--------------------------------------------------------------------*/
    If printer = 'N' Then printer = parse_cons('#T','TEMPF')

/*--------------------------------------------------------------------*/
/* Test for excluded lines to be printed as such                      */
/*--------------------------------------------------------------------*/
    asis = parse_cons('ASIS',,,2)

/*--------------------------------------------------------------------*/
/* Test for output to laser (special parameter entry screen)          */
/*--------------------------------------------------------------------*/
    laser = parse_cons('LASER',,,2)

/*--------------------------------------------------------------------*/
/* Test for extra parameter input                                     */
/*--------------------------------------------------------------------*/
    xparm = parse_cons('X')

/*--------------------------------------------------------------------*/
/* Test for HEX formatted output                                      */
/*--------------------------------------------------------------------*/
    hex = parse_cons('HEX',,,2)

/*--------------------------------------------------------------------*/
/* Test for SAVE parameter forcing a save                             */
/*--------------------------------------------------------------------*/
    save = parse_cons('SAVE',,,2)

/*--------------------------------------------------------------------*/
/* Test for EDIT parameter to edit JCL being generated                */
/*--------------------------------------------------------------------*/
    edit = parse_cons('EDIT',,,2)

/*--------------------------------------------------------------------*/
/* Test for print without change (original dataset)                   */
/*--------------------------------------------------------------------*/
    nochg = parse_cons('NC')

/*--------------------------------------------------------------------*/
/* Test for output class other than 'A'                               */
/*--------------------------------------------------------------------*/
    xx = parse_varb('CL=','NONE')
    If xx /= 'NONE' Then class = Substr(xx,1,1)

/*--------------------------------------------------------------------*/
/* Test for LHS margin parameter 'M='                                 */
/*--------------------------------------------------------------------*/
    xx = parse_varb('M=',0,'NUM')
    If xx > 0 Then  margin = Copies(' ',margin)
    Else            margin = ''

/*--------------------------------------------------------------------*/
/* Last paramater assumed to be printer id                            */
/*--------------------------------------------------------------------*/
    If parm# /= '' Then Parse VAR parm# dest .

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

