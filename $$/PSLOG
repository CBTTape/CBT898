/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* PSLOG:                                                             */
/* Routine to generate mass ADR040xx entries from map processing      */
/* programs.                                                          */
/*                                                                    */
/* It will utilise the output from PICIT (which has been updated with */
/* the PSPROG command). Ie. If FIELD-CODE not = 'XXXX'                */
/*                                                                    */
/* The gend indicator will be changed from 'X' to 'Y' (if update flag */
/* set to prevent subsequent code generation.                         */
/* This flag can be manually changed back to 'X' to force code gen.   */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Parse Upper ARG parm#
    If parm# /= "" Then Signal byp1
    Address ISPEXEC
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
/*--------------------------------------------------------------------*/
    panel = 'PSLOGP'
    vars  = 'PSLOGSRC PSLOGID PSLOGOVR PSLOGSCF'
    "ISPEXEC VGET ("vars") PROFILE"
    If pslogsrc = '' Then pslogsrc = "'M.CMS.DTDB804.PF.CPYLIB(AMRTRX)'"
    If pslogovr = '' Then pslogovr = 'N'
    If pslogid  = '' Then pslogid  = "TDB-XXX1"
    csr1 = 'PSLOGSRC'
    "ISREDIT (caps) = CAPS"

scr1:
    zcmd = ''
    "ISPEXEC DISPLAY PANEL(&PANEL) CURSOR(&CSR1)"
    If rc /= 0 Then Do
        gc009 = "Parameter entry screen abandoned."
        Signal erx1
        Exit
    End
    If Sysdsn(pslogsrc) /= 'OK' Then Do
        gc009 = Sysdsn(pslogsrc)"."
        "ISPEXEC SETMSG MSG(GC009)"
        Signal scr1
    End
    "ISREDIT (dsn) = DATASET"
    "ISREDIT (mem) = MEMBER"
    If "'"dsn"("mem")'" = pslogsrc Then Do
        gc009 = 'This member cannot be the same as the PICIT source.'
        "ISPEXEC SETMSG MSG(GC009)"
        Signal scr1
    End
    If zcmd = 'V' Then Do
        "ISPEXEC VIEW DATASET("pslogsrc")"
        Signal scr1
    End

/*--------------------------------------------------------------------*/
    "ISREDIT (status) = USER_STATE"
    "ISREDIT CAPS = OFF"
    "ISREDIT RESET"
    "ISREDIT DELETE ALL NX"
    "ISREDIT LINE_AFTER .ZLAST = '*"Copies('-',70)"*'"
    "ISREDIT LABEL 1 = .MARKER"

    Call execio_rl
    Call set_code
    Call set_of_matrix1
    Call set_of_matrix2
    #pslogscf = Translate(pslogscf,' ',',')

    Do i=1 To linei.0
        If Substr(linei.i,1,1) = '*' Then Iterate
        Parse VAR linei.i seq# gend vname pt al pl dp .
        Parse VAR linei.i 53 occurs +3 57 oval .
        If seq# = 'XXXX' Then Iterate
        If pslogscf /= '*' Then Do
            seq#p = Substr(seq#,1,2)
            If Index(' '#pslogscf' ',' 'seq#p' ') = 0 Then Iterate
        End
        Call expand_code
    End

    If updated = 'Y' Then Call execio_rl_update

erx1:
    "ISPEXEC SETMSG MSG(GC009)"

ext1:
    "ISREDIT CAPS = (caps)"
    "ISREDIT USER_STATE = (status)"
    "ISPEXEC VPUT ("vars") PROFILE"
    Exit

nl1: Arg ntl
    ntl = Substr('      'ntl,1,72) || pslogid
    "ISREDIT LINE_BEFORE .MARKER = (ntl)"
    Return 0

nl2: Arg ntl
    ntl = Substr('      'ntl,1,72) || pslogid
    "ISREDIT LINE_AFTER .ZLAST = (ntl)"
    If linee /= '' Then Do
        "ISREDIT LINE_BEFORE .ZLAST  = NOTELINE (linee)"
        linee = ''
    End
    Return 0

expand_code:
    linee = ''
    rec_type = Substr(vname,9,1)
    line  = Overlay(seq#,cb1.1,28,4)
    Call nl1(line)
    line  = Overlay(rec_type,cb1.2,16,1)
    line  = Overlay(Substr(seq#,2),line,17,3)
    Call nl1(line)
    Call nl1(cb1.3)
    Call nl1(cb1.4)

    Call nl2(cb2.1)
    line  = Overlay(rec_type,cb2.2,39,1)
    Call nl2(line)
    line  = Overlay(seq#,cb2.3,38,4)
    Call nl2(line)
    Call nl2(cb2.4)
    Call nl2(cb2.5)
    line  = Overlay(rec_type,cb2.6,2,1)
    line  = Overlay(Substr(seq#,2),line,3,3)
    Call nl2(line)                          /* cb2.6                  */
    Call nl2(cb2.7)
    Call nl2(cb2.8)
    Call eval_bfld
    m_field = "         MOVE ATL1-"val
    If oval /= '' Then Do
        Parse VAR oval . '>' oval .
        If Strip(m_field) /= 'MOVE ATL1-'oval Then Do
            linee = 'X file records as "ATL1-'oval'".'
            If pslogovr = 'Y' Then Do
                m_field = "         MOVE ATL1-"oval
                linee = linee '(Using it.)'
            End
            "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (linee)"
        End
    End
    t_field = vname
    val# = val
    Call set_move                           /* cb2.9                  */
    If occurs /= '' Then Call nl2(cb2.0)    /* cb2.9 (subscript)      */
    Call nl2(cb2.10)
    Call nl2(cb2.11)
    desc = Translate(Substr(vname,11),' ','-')
    If occurs = '' Then,                    /* cb.12                  */
        Call nl2("     MOVE '"Substr(desc,1,20)"' TO ARD040WS-L1-DESCRIPTION.")
    Call nl2(cb2.13)
    If occurs /= '' Then m_field = "     MOVE" vname Strip(cb2.0)
    Else                 m_field = "     MOVE" vname
    Call get_name_llq
    If dp = 'D' Then t_field = "SS01WS-JULIAN"
    Else             t_field = "ARD040WS-L1-FROM-"val"."
    Call set_move                           /* cb2.14                 */
    If dp = 'D' Then Do
        Call nl2(cd14.3)
        Call nl2(cd14.4)
        Call nl2(cd14.5)
        Call nl2(cd14.6)
    End
    m_field = "     MOVE ATL1-"Overlay('-A-',val#,Index(val#,'-B-'),3)
    If oval /= '' Then Do
        xx = 'MOVE ATL1-'Overlay('-A-',oval,Index(oval,'-B-'),3)
        If Strip(m_field) /= xx Then Do
            linee = 'X file records as "ATL1-'oval'".'
            If pslogovr = 'Y' Then Do
                m_field =,
                "     MOVE ATL1-"Overlay('-A-',oval,Index(oval,'-B-'),3)
                linee = linee '(Using it.)'
            End
            "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (linee)"
        End
    End
    If occurs /= '' Then t_field = vname
    Else                 t_field = vname'.'
    Call set_move                           /* cb2.15                 */
    If occurs /= '' Then Call nl2(cb2.0)'.'
    If occurs /= '' Then m_field = "     MOVE" vname Strip(cb2.0)
    Else                 m_field = "     MOVE" vname
    Call get_name_llq
    If dp = 'D' Then t_field = "SS01WS-JULIAN"
    Else             t_field = "ARD040WS-L2-TO-"val"."
    Call set_move                           /* cb2.16                 */
    If dp = 'D' Then Do
        Call nl2(cd16.3)
        Call nl2(cd16.4)
        Call nl2(cd16.5)
    End
    If occurs /= '' Then Do
      desc = Strip(desc)
      If Length(desc) > 15 Then desc = Substr(Strip(desc),1,15)
      Do j=1 To Occurs
         Call nl2("     IF  ATL1-FIELD-OCCURANCE =" j)
         line = "         MOVE '"                 ||,
                Substr(desc"("Right(j,2)")",1,19) ||,
                "' TO ARD040WS-L1-DESCRIPTION"
         Call nl2(line)
         Call nl2('    'cb2.17)
         Call nl2(cb2.10)
      End
    End
    Else Call nl2(cb2.17'.')
    Call nl2(cb2.18)
    If Substr(linei.i,6,1) = 'X' Then Do
        linei.i = Overlay('Y',linei.i,6,1)
        updated = 'Y'
    End

    Return 0

eval_bfld:
/*-------------------------------------------------------------------*/
/* Work out name's low level qualifier from picture clause.          */
/*-------------------------------------------------------------------*/
    key1 = Substr(pt,1,2)
    #dp = dp
    If #dp = 'D' Then #dp = '.'
    key2 = Right(pl,4) || Right(pl,4) #dp
    key  = key1 || key2
    pos = Index(of_matrix2,key)
    If pos > 0 Then Do
        xx = Substr(of_matrix2,pos+Length(key))
        Parse VAR xx . ':' val pl .
    End
    Else Do
        If pt = 'X' Then Do
           pl = Format(pl/10,3,0)*10
           val = 'VL'pl'-B-DATA-X'
        End
        Else Do
            key = Substr('9',1,2) || key2
            pos = Index(of_matrix2,key)
            If pos > 0 Then Do
                xx = Substr(of_matrix2,pos+Length(key))
                Parse VAR xx . ':' val pl .
            End
            Else Do
                xx = Substr(of_matrix2,1+Length(key))
                Parse VAR xx . ':' val pl .
            End
        End
    End

    linei.i = Overlay(seq#,linei.i,1,4)
    updated = 'Y'
    Return 0

/*-------------------------------------------------------------------*/
/* Work out if column aligned and if not split over 2 lines.         */
/*-------------------------------------------------------------------*/
set_move:
    If Length(m_field) > 32 Then Do
        Call nl2(m_field)
        Call nl2('                                 TO' t_field)
    End
    Else,
        Call nl2(Substr(m_field,1,32) 'TO' t_field)

    Return 0

/*-------------------------------------------------------------------*/
/* Work out name's low level qualifier from picture clause.          */
/*-------------------------------------------------------------------*/
get_name_llq:
    key = pt'-'pl
    yy = Index(of_matrix1,key)
    If yy > 0 Then Do
        xx = Substr(of_matrix1,yy)
        Parse VAR xx . ':' val .
    End
    Else val = 'VALUE'

    Return val

/*-------------------------------------------------------------------*/
/* Set code lines to use as templates or copy startight in.          */
/*-------------------------------------------------------------------*/
set_code:
cb1.1   = '     IF  ATL1-FIELD-CODE = 0202'
cb1.2   = '         GO TO 4202-RT-FIELD'
cb1.3   = '     END-IF.'
cb1.4   = '*'

cb2.0  = '                                    (ATL1-FIELD-OCCURANCE)'
cb2.1  = '***************************************************************'
cb2.2  = '*                ATL1-AMRT-REC-TYPE = 4                       *'
cb2.3  = '*                ATL1-FIELD-CODE  =  0201                     *'
cb2.4  = '***************************************************************'
cb2.5  = '*'
cb2.6  = ' 4201-RT-FIELD.                                                '
cb2.7  = '*'
cb2.8  = '     IF  ARD040WS-JOURNAL'
cb2.9  = '         MOVE ATL1-VL05-B-DATA-9 TO AMRT-TDBT-FEE-DEFAULT-PLAN'
cb2.10 = '     END-IF.'
cb2.11 = '*'
cb2.12 = '     MOVE 'x2345678901234567890' TO ARD040WS-L1-DESCRIPTION.'
cb2.13 = '*'
cb2.14 = '     MOVE AMRT-FEE-DEFAULT-PLAN  TO ARD040WS-L1-FROM-VALUE.'
cb2.15 = '     MOVE ATL1-VL05-A-DATA-9     TO AMRT-TDBT-FEE-DEFAULT-PLAN.'
cb2.16 = '     MOVE AMRT-TDBT-FEE-DEFAULT-PLAN TO ARD040WS-L2-TO-VALUE.'
cb2.17 = '     GO TO 5100-MR-NO-REC-CHECK'
cb2.18 = '*'

cd14.1 = '     MOVE AMRT-ACCT-DATE-LAST-MAINT                        '
cd14.2 = '                                 TO SS01WS-JULIAN          '
cd14.3 = '*                                                          '
cd14.4 = '     PERFORM 8100-FROM-DATE                                '
cd14.5 = '        THRU 8199-FD-EXIT.                                 '
cd14.6 = '                                                           '
cd16.1 = '     MOVE AMRT-ACCT-DATE-LAST-MAINT                        '
cd16.2 = '                                 TO SS01WS-JULIAN          '
cd16.3 = '*                                                          '
cd16.4 = '     PERFORM 8200-TO-DATE                                  '
cd16.5 = '        THRU 8299-TD-EXIT.                                 '

Return 0
/*
    MOVE ATL1-VL20-A-NBR-NO-DEC
*/
set_of_matrix1:
    of_matrix1 =,
        ' 9-1  :9           ',              /* PIC 9.                 */
        ' 9-2  :99          ',              /* PIC 99.                */
        ' 9-3  :999         ',              /* PIC 999.               */
        ' 9-4  :9999        ',              /* PIC 9(4).              */
        ' 9-5  :99999       ',              /* PIC 9(5).              */
        ' 9-6  :999999      ',              /* PIC 9(6).              */
        '9S-7  :7           ',              /* PIC 9(7)-.             */
        '9S-9  :999999999   ',              /* PIC 9(9)-.             */
        ' 9-15 :15          ',              /* PIC 9(15).             */
        '9S-17 :17          ',              /* PIC 9(17)-.            */
        ''
    Return 0

set_of_matrix2:
    of_matrix2 =,
        '9   17  17 .       :VL20-B-NBR-NO-DEC 20 ',
        '9   17  17 .1      :VL20-B-NBR-V901   20 ',
        '9   17  17 .2      :VL20-B-NBR-V902   20 ',
        '9   17  17 .4      :VL20-B-NBR-V904   20 ',
        '9    1   1 .       :VL01-B-DATA-9      1 ',
        '9    2   2 .       :VL02-B-DATA-9      2 ',
        '9    3   3 .       :VL03-B-DATA-9      3 ',
        '9    4   4 .       :VL04-B-DATA-9      4 ',
        '9    5   5 .       :VL05-B-DATA-9      5 ',
        '9    6   6 .       :VL06-B-DATA-9      6 ',
        '9    7   7 .       :VL07-B-DATA-9      7 ',
        '9S   7   7 .       :VLS907-B-DATA-9    7 ',
        '9    8   8 .       :VL08-B-DATA-9      8 ',
        '9    9   9 .       :VL09-B-DATA-9      9 ',
        '9   10  10 .       :VL10-B-DATA-9     10 ',
        '9   11  11 .       :VL11-B-DATA-9     11 ',
        '9   15  15 .       :VL15-B-DATA-9     15 ',
        '9   16  16 .       :VL16-B-DATA-9     16 ',
        '9   17  17 .       :VL17-B-DATA-9     17 ',
        'X    1   1 .       :VL01-B-DATA-X      1 ',
        'X    2   2 .       :VL02-B-DATA-X      2 ',
        'X    3   3 .       :VL03-B-DATA-X      3 ',
        'X    4   4 .       :VL04-B-DATA-X      4 ',
        'X    5   5 .       :VL05-B-DATA-X      5 ',
        'X    6   6 .       :VL06-B-DATA-X      6 ',
        'X    7   7 .       :VL07-B-DATA-X      7 ',
        'X    8   8 .       :VL08-B-DATA-X      8 ',
        'X    9   9 .       :VL09-B-DATA-X      9 ',
        'X   10  10 .       :VL10-B-DATA-X     10 ',
        'X   11  11 .       :VL11-B-DATA-X     11 ',
        'X   15  15 .       :VL15-B-DATA-X     15 ',
        'X   16  16 .       :VL16-B-DATA-X     16 ',
        'X   17  17 .       :VL17-B-DATA-X     17 ',
        'X   19  19 .       :VL19-B-DATA-X     19 ',
        'X   20  20 .       :VL20-B-DATA-X     20 ',
        'X   30  30 .       :VL30-B-DATA-X     30 ',
        'X   40  40 .       :VL40-B-DATA-X     40 ',
        'X   50  50 .       :VL50-B-DATA-X     50 ',
        'X   60  60 .       :VL60-B-DATA-X     60 ',
        'X   70  70 .       :VL70-B-DATA-X     70 ',
        'X   80  80 .       :VL80-B-DATA-X     80 ',
        ''

    Return 0

execio_rl:
    dd = 'PSLOGDD'
    Address TSO "ALLOC F("dd") DSN("pslogsrc") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    Return 0

execio_rl_update:
    dd = 'PSLOGDD'
    Address TSO "ALLOC F("dd") DSN("pslogsrc") SHR REU"
    Address TSO "EXECIO * DISKW "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    gc009 = "Dataset" pslogsrc "has been updated with the new log numbers."
    Return 0

linei.1   = '1801 X AMRT-TDBT-BATCH-DATE           9   7   7 .        '
linei.2   = '1802 X AMRT-TDBT-BATCH-SOURCE         9   4   4 .        '
linei.3   = '1803 X AMRT-TDBT-BATCH-NBR            9   5   5 .        '
linei.4   = '1804 X AMRT-TDBT-SEQ-NBR              9   3   3 .        '
linei.5   = '1805 X AMRT-TDBT-TRAN-SEQ             X   5   5 .        '
linei.6   = '1807 X AMRT-TDBT-BH-STATUS            X   1   1 .        '
linei.7   = '1808 X AMRT-TDBT-BH-MAINT-TRANS-ID    X   2   2 .        '
linei.8   = '1809 X AMRT-TDBT-BH-ORG               9   3   3 .        '
linei.9   = '1810 X AMRT-TDBT-BH-ORIG-OPERATOR     X   3   3 .        '
linei.10  = '1811 X AMRT-TDBT-BH-BAL-OPERATOR      X   3   3 .        '
linei.11  = '1812 X AMRT-TDBT-BH-TERMINAL-ID       X   4   4 .        '
linei.12  = '1813 X AMRT-TDBT-BH-START-DATE        9   4   7 .        '
linei.13  = '1814 X AMRT-TDBT-BH-START-TIME        9   4   7 .        '
linei.14  = '1815 X AMRT-TDBT-BH-END-DATE          9   4   7 .        '
linei.15  = '1816 X AMRT-TDBT-BH-END-TIME          9   4   7 .        '
linei.16  = '1817 X AMRT-TDBU-BH-NBR-OF-ITEMS      9   2   3 .        '
linei.17  = '1818 X AMRT-TDBU-BH-DB-AMT            9   9  17 .        '
linei.18  = '1819 X AMRT-TDBU-BH-CR-AMT            9   9  17 .        '
linei.19  = '1820 X AMRT-TDBU-BH-PREFIX-START      9   2   2 .        '
linei.20  = '1821 X AMRT-TDBU-BH-PREFIX-LENGTH     9   2   2 .        '
linei.21  = '1822 X AMRT-TDBU-BH-PREFIX-DIGIT      X   1   1 .        '
linei.22  = '1823 X AMRT-TDBU-BH-DEFAULT-ORG       9   3   3 .        '
linei.23  = '1824 X AMRT-TDBU-BH-DEFAULT-SCHEME    9   5   5 .        '
linei.24  = '1826 X AMRT-TDBU-BH-DEFAULT-TXN-CODE  9   3   3 .        '
linei.25  = '1827 X AMRT-TDBU-BH-DEFAULT-EFF-DATE  9   4   7 .        '
linei.26  = '1828 X AMRT-TDBU-BH-DEFAULT-DESC      X  40  40 .        '
linei.27  = '1829 X AMRT-TDBU-BH-IN-PROGRESS-FLAG  X   1   1 .        '
linei.28  = '1830 X AMRT-TDBU-BH-CALC-NBR          9   2   3 .        '
linei.29  = '1831 X AMRT-TDBU-BH-CALC-DB-AMT       9   9  17 .        '
linei.30  = '1832 X AMRT-TDBU-BH-CALC-CR-AMT       9   9  17 .        '
linei.31  = '1833 X AMRT-TDBU-BH-REJ-REENTRY-FLAG  X   1   1 .        '
linei.32  = '1834 X AMRT-TDBU-BH-MRWA-STATUS       X   1   1 .        '
linei.33  = '1835 X AMRT-TDBU-BH-MRWA-ENTRY-SEQ    9   9  17 .        '
linei.34  = '1836 X AMRT-TDBV-TR-BATCH-DATE        9   7   7 .        '
linei.35  = '1837 X AMRT-TDBV-TR-BATCH-SOURCE      9   4   4 .        '
linei.36  = '1838 X AMRT-TDBV-TR-BATCH-NBR         9   5   5 .        '
linei.37  = '1839 X AMRT-TDBV-TR-SEQ-NBR           9   3   3 .        '
linei.38  = '1840 X AMRT-TDBV-TR-TRAN-SEQ          X   5   5 .        '
linei.39  = '1841 X AMRT-TDBV-TR-STATUS            X   1   1 .        '
linei.40  = '1842 X AMRT-TDBV-TR-ORIG-OPERATOR     X   3   3 .        '
linei.41  = '1843 X AMRT-TDBV-TR-BAL-OPERATOR      X   3   3 .        '
linei.42  = '1844 X AMRT-TDBW-TR-TXN-ORG           9   3   3 .        '
linei.43  = '1845 X AMRT-TDBW-TR-ACCT-NBR          X  19  19 .        '
linei.44  = '1846 X AMRT-TDBW-TR-ACCT-NBR-POS      X   1   1 .19      '
linei.45  = '1847 X AMRT-TDBW-TR-TRAN-AMT          9   9  17 .19      '
linei.46  = '1848 X AMRT-TDBW-TR-TXN-CODE          9   3   3 .        '
linei.47  = '1849 X AMRT-TDBW-TR-TXN-CODE-IND      X   1   1 .        '
linei.48  = '1850 X AMRT-TDBW-TR-TXN-DATE          9   4   7 .        '
linei.49  = '1851 X AMRT-TDBW-TR-DESC              X  40  40 .        '
linei.50  = '1852 X AMRT-TDBW-TR-SCHEME-ID         9   5   5 .        '
linei.0   = 50
   Return 0
