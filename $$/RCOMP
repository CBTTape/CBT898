/******************************** REXX ********************************/
    n_st=mark(2)    /* Mark Start */
/*
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* RCOMP: REXX Compiler.                                              */
/*                                                                    */
/* Submit REXX EXEC being edited for batch compilation.               */
/* Compiled EXEC is in source dataset with 'X' appended (truncated to */
/* 7 bytes if applicable before appendage).                           */
/*                                                                    */
/* Valid parameters:                                                  */
/*   TRACE   - Permit tracing in compiled module. Trace function      */
/*             requires SL enabled.                                   */
/*   SL      - Include source lines in compiled module                */
/*             (for Sourceline() command support)                     */
/*   J       - Show JCL generated and submitted                       */
/*                                                                    */
/*  This macro ..(use MD block command to convert NOTELINES->data)..  */
/*                                                                    */
/*--------------------------------------------------------------------*/
*/
n_en=mark(-2)   /* Mark End   */
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1
    If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc
    If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me
    Parse Source . . xcmd .;x=$BR(xcmd "??");Return
    Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
    Help_me:Signal Off Syntax;#tr=Trace("o")
    Do i=n_st To n_en;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

No_help_#1:
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm1,parm2,parm3,parm4,parm5,parm6,parm7
    If Word(parm2,2)/='' Then,
         Parse Upper VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7

    zerrhm='*';zerralrm='NO';zerrsm=
    Parse Upper VAR parm# parm1 parm2 parm3

    rexxllib='REXX.V1R3M0.SFANLMD'          /* REXX Compiler load lib */
    rexxelib='REXX.V1R3M0.SFANCMD'          /* REXX Compiler exec lib */

    Address ISREDIT;"(status)=USER_STATE";"(memberi)=MEMBER";"(pdsin)=DATASET"

    hlq=$alkhlq()
    member=Strip(Substr(memberi,1,7))
    membero=member'O'                       /* Object member name     */
    memberl=member'L'                       /* Load  member name      */
    memberx=member'X'                       /* Compile member name    */
    cexec=pdsin                             /* Compile output         */
    object=hlq'.OBJ'                        /* Object output          */
    rexxl=$alkload()                        /* Loadmod output         */
    acct=$alkacct()                         /* Account code           */
    opt=                                    /* Processing options     */
    sl='N'                                  /* Sourcelines included   */
    trace='N'                               /* Trace permitted        */
    sjcl'N'                                 /* Show JCL gen'd b4 sub  */
                                            /* set to 'N' to suppress */

    If Wordpos('TRACE',parm1 parm2 parm3)>0 Then Do
        trace='Y';sl='Y'
    End
    If Wordpos('SL',parm1 parm2 parm3)>0 Then sl='Y'
    If Wordpos('J',parm1 parm2 parm3)>0 Then sjcl='Y'

/*--------------------------------------------------------------------*/
/* Customised changes to defaults                                     */
/*--------------------------------------------------------------------*/
    memberc=memberi                         /* Compile member name    */
    cexec=hlq'.CEXEC'                       /* Compile output         */
/*--------------------------------------------------------------------*/

    "(changed)=DATA_CHANGED"
    If changed="YES" Then "SAVE"

    If trace='Y' Then opt=opt',TRACE';If sl='Y' Then opt=opt',SL'

    x=Get_JCL()
    Do i=n_st To n_en
        data='Queue' Strip(Sourceline(i))
        Interpret data
    End

    Address
    x=Msg('On');x=Outtrap('line.',5,'NOCONCAT')
    If sjcl='Y' Then Do
        "VGET ZTEMPF"
        ztempf="'"ztempf"'";dd='ZT'Time('s')
        Queue ''
        Address TSO "ALLOC DD("dd") DS("ztempf") SHR REU"
        Address TSO "EXECIO * DISKW" dd "(FINIS"
        "LMINIT DATAID(DATAID) DDNAME("dd")"
        "EDIT DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD("dd")"
    End
    Else Do
        Queue 'ZZ'
        ztempf='* END(ZZ)'
    End
    Address TSO "SUBMIT" ztempf
    x=Msg('Off')
    Address TSO 'DELSTACK'
    If Word(line.1,1)='JOB' | Word(line.1,2)='JOB' Then zerrlm=line.1
    Else zerrlm=line.2
    "SETMSG MSG(ISRZ002)"

    "ISREDIT (status)=USER_STATE"
    Exit

/*--------------------------------------------------------------------*/
/* The data below is the JCL that will be processed by this routine   */
/* for substitution and submission.                                   */
/*--------------------------------------------------------------------*/
Get_JCL:
n_st=mark(2)                                /* Mark next line         */
Signal end_doc
"//"Userid()"R JOB "acct",'"memberi"',"
"//             CLASS=C,"
"//             MSGCLASS=X,"
"//             NOTIFY=&SYSUID"
"//*"
"//********************************************************************"
"//* Invoke REXX compiler for '"pdsin"("memberi")'"
"//* Compiled routine is      '"cexec"("memberc")'"
"//* Submitted:" Date() "-" Substr(Time(),1,5)
"//********************************************************************"
"//REXXC   EXEC PGM=IKJEFT01,REGION=0K,TIME=1439,DYNAMNBR=200"
"//STEPLIB  DD  DISP=SHR,DSN="rexxllib
"//SYSPROC  DD  DISP=SHR,DSN="rexxelib
"//SYSLIB   DD  DSN="pdsin",DISP=SHR"
"//SYSTSPRT DD  SYSOUT=*"
"//SYSPRINT DD  SYSOUT=(*)"
"//SYSTSIN  DD  *"
"REXXC '"pdsin"("memberi")' +"
"  PRINT(**)" opt "-"
"  CEXEC('"cexec"("memberx")') +"
"   "
"/*"
"//"
"  "
"//*------------------------------------------------------------------*"
"//* JCL used to link-edit load module. Not implemented as loadmod    *"
"//* abends with code SFCA, SVC 202 not available.                    *"
"//*------------------------------------------------------------------*"
"//*"
"//SYSTSIN  DD  *"
"REXXC '"pdsin"("memberi")' +"
"  PRINT(**)" opt "+"
"  CEXEC('"cexec"("memberx")') +"
"  OBJECT('"object"("membero")',CPPLEFPL,'"rexxl"("memberl")') +"
"   "
"/*"
"//LKED     EXEC PGM=IEWL,"
"//         PARM='MAP,LET,LIST,AMODE=31'"
"//SYSUT1   DD UNIT=SYSALLDA,SPACE=(1024,(100,10))"
"//SYSLMOD  DD DISP=SHR,DSN="rexxl
"//SYSPRINT DD SYSOUT=*"
"//SYSLIB   DD DISP=SHR,DSN="object
"//********************************************************************"
"//SYSLIN   DD *"
"    INCLUDE SYSLIB("membero")"
"    NAME  "memberl"(R)"
"/*"
End_doc:
n_en=mark(-2)                               /* Mark prev 2 line       */
Return 0
Mark:Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
