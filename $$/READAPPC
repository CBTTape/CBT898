/* REXX */

/*
Exec to test various RXVSAM functions with a KSDS.  Assumes the KSDS
has already been defined by exec RXVSETR
*/

ARG parm#

dsn = 'CICS.DEVL.ECICSD.EAGLEDUD.PRODCOPY'
dsn = 'SYS2V.TEDS.A00.APPCTP'
dsn = 'SYS1.APPCTP'

    vsamdd = 'EAGLEDUD'

    Say 'Processing' "'"dsn"'"
    "EXECIOVS * KSDSKL '"dsn"'"
    Parse PULL keyl keyp
    Say 'Key start' keyp+0'('keyl+0')'

    Call allocfile
    Address TSO

    "NEWSTACK"

    "EXECIOVS 0 KSDSR" vsamdd "(OPEN NOTIFY NLOG NCONT NTRACE)"

    Say 'Press <ENTER> for next record, proc_name or "Q" to stop:'
    Parse Upper Pull rep
    If rep = 'Q' Then Signal finished
    skip = rep

    "EXECIOVS 1 KSDSRF" vsamdd "(NOPEN NOTIFY NLOG NCONT NTRACE)"

    If rc = 0 Then Call Report
    Else           Call Error
    Do Forever
        If skip = '' Then Do
          Say 'Press enter for next record, proc_name, # recs to skip',
              'or "Q" to stop:'
          Parse Upper Pull rep
          If rep = 'Q' Then Leave
          skip = rep
        End

        "EXECIOVS 1 KSDSRN" vsamdd "(NOOPEN NOTIFY NLOG NCONT nTRACE)"

        If rc = 0 Then Call Report
        Else Do
            Call Error
            Leave
        End
    End
Finished:
    "DELSTACK"
    "EXECIOVS 0 KSDSRN" vsamdd "(FINIS NOTIFY NLOG NCONT nTRACE)"

    Call freefile
    Exit

allocfile:
    "ALLOCATE FILE("vsamdd") DSNAME('"dsn"') SHR REU"
    If rc /= 0 Then Do
        log.log# = 'Allocate failed for 'vsamdd' with a return code of'
        CALL log_errors
        SIGNAL close_and_exit
    End
    Return 0

freefile:
    "FREE FILE("vsamdd")"

    Return

Report:
    s_k = Queued()
    Do s_k
        Parse PULL line
        Parse VAR line 37  proc  +8,
                       413 log   +50,
                       625 aline +80 line
        If skip /= '' Then Do
            If skip /= Strip(proc) Then Return 0
            Else skip = ''
        End
        Say '*--------------------------------------------------*'
        Say ' '
        Say 'Procedure:' proc
        Say 'Log      :' log
        Do while aline /= ''
            Say Substr(aline,1,79)
            Parse var line aline +80 line
        End
    End
    Say ' '
    Return 0

Error:
    s_k = Queued()
    Do s_k
        Parse PULL line
        Say Substr(line,1,79)
    End
    Return 0

