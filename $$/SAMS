/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* SAMS: Routine to generate batch JCL to perform SAMS functions.     */
/*                                                                    */
/*       For further details invoke with a parameter of '?' or scroll */
/*       to the bottom of this member.                                */
/*                                                                    */
/*--------------------------------------------------------------------*/
SAMS:sams_ver='1.01'
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    u=Userid();p=Sysvar(syspref);If u/=p&p/='' Then u=p'.'u;hlq0=u
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))

    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm# 1 parm1 parm2 parm3
    If parm1='??' Then Signal Help_me
    If Wordpos(parm1,'? /? HELP /HELP /H')>0 Then Do
        Signal on Syntax Name Help_me
        x=$BR('%'xcmd '??')
        Exit
    End

    zedsmsg=
    "VGET (ZAPPLID) ASIS"
    If zapplid/='CSM' Then Do
        "SELECT CMD(%"xcmd parm#") NEWAPPL(CSM)"
        Return 0
    End

    vars='SAMSMSK1 SAMSMSK2 SAMSMSK3 SAMSMSK4 SAMSMSK5'
    "VGET ("vars") PROFILE";If samsmsk1='' Then samsmsk1=u'./'
    built_panels=0

    If Wordpos('/L',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/L',parm#),1);Signal List
    End
    If Wordpos('/RR',parm#)>0 Then Do
        rec_suf=
        parm#=Delword(parm#,Wordpos('/RR',parm#),1);Signal Restore
    End;rec_suf='.NEW'
    If Wordpos('/R',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/R',parm#),1);Signal Restore
    End
    If Wordpos('R',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('R',parm#),1);Signal Restore
    End

List:
    free=1
    Do i=1 To 5
        Interpret "xx=samsmsk"i;If xx='' Then Do;free=i;Leave;End
    End
    xx=Strip(Word(parm#,1),,"'")
    Interpret "samsmsk"free"=xx;sm"i"='/'"
    Parse Value Copies('/ ',5) with dp1 dp2 dp3 dp4 dp5 .
List_it:
    If \built_panels Then Call build_panel
    zcmd=
    "DISPLAY PANEL(SAMSP1)"; rc1=rc
    If rc1>8 Then Do
        zedlmsg='Severe error displaying panel "SAMSP1".'
        Signal err1
    End
    If rc1=8 Then Do;"VPUT ("vars") PROFILE";Signal Get_out;End
    mask=
    Do i=1 To 5
        Interpret "If sm"i"/='' Then mask=mask samsmsk"i
    End
    IF Strip(mask)='' Then Do
        zedlmsg='At lest 1 non-blank mask must be selected.'
        "SETMSG MSG(ISRZ001)"
        Signal List_it
    End

    x=JOB_Card()
    x=JCL_List()
    x=Edit_JCL('list')

    Signal Get_out

Restore:
    If \built_panels Then Call build_panel
    oldname=Word(parm#,1)
    If Substr(oldname,1,1)/="'" Then oldname="'"hlq0"."oldname"'"
    newname="'"Strip(oldname,,"'")rec_suf"'";genv=1;csr1='NEWNAME'
Restore2:
    prot1='INPUT';zcmd=
    "DISPLAY PANEL(SAMSP2) CURSOR(&CSR1)"
    If rc>8 Then Do
        zedlmsg='Severe error displaying panel "SAMSP2".'
        Signal err1
    End
    If rc=8 Then Do;"VPUT ("vars") PROFILE";Signal Get_out;End
    csr1=
    If Substr(newname,1,1)/="'" Then newname="'"hlq0"."newname"'"
    If oldname=newname Then Do
        zedlmsg='Newname is the same as the old name.',
                'Confirm your desire by hitting [ENTER] or END key',
                'to return to input screen.'
        "SETMSG MSG(ISRZ001) MSGLOC(OLDNAME)";prot1='OUTPUT'
        zcmd=;csr1='OLDNAME'
        "DISPLAY PANEL(SAMSP2) CURSOR(&CSR1)"
        If rc/=0 Then Do
            zedlmsg='Same name "replace" abandoned. Change output name',
                    'and try again.'
            csr1='NEWNAME';Signal Restore2
        End
    End

    x=JOB_Card()
    x=JCL_Restore()
    x=Edit_JCL('list')

    Signal Get_out

/*--------------------------------------------------------------------*/
/* Build JOB card for the JCL.                                        */
/*--------------------------------------------------------------------*/
JOB_Card:
    sep1=Substr('//*',1,70,'-')'*'
    Address TSO "NEWSTACK"
    v1='def_ac def_bb def_ex def_hd def_id def_tp def_vm'
    progn='SAMS - List'
    Interpret "Parse Value '() Z A X A 3480 A,H,O,X,Z' With" v1
    Signal on Syntax Name error_off_alkjcpg
    Interpret "Parse Value $alkjc(v1) With" v1
    x=$Alkjcpg(progn);If x/='' Then progn=x
error_off_alkjcpg:Signal off Syntax

    Queue "//"u || def_id "JOB "def_ac",'"progn"',"
    Queue "//   MSGCLASS="def_hd",CLASS="def_ex","
    Queue "//   NOTIFY=&SYSUID,MSGLEVEL=(1,1)"
    Queue '/*JOBPARM SYSAFF='sysid
    Queue "//*"
    Return 0

JCL_List:
    Queue sep1
    x='//*    Specify the SAMS list parameters below.'
    Queue Substr(x,1,70,'-')'*'
    Queue sep1
    Queue '//STEP1    EXEC  LISTD'
    Queue '//SYSIN  DD  *'
    Do i=1 To 5
        Interpret "If sm"i"/='' Then xx=samsmsk"i";Else xx="
        INTERPRET "If dp"i"/='' Then yy=',DUPLICATES';Else yy="
        If xx/='' Then Queue '  LISTD DSN=('xx')'yy
    End
    Queue '/*'
    Queue '//'
    Return 0

JCL_Restore:
    sep1=Substr('//*',1,70,'-')'*'
    Queue sep1
    x='//*    Specify the SAMS Restore parameters below.'
    Queue Substr(x,1,70,'-')'*'
    Queue sep1
    Queue '//STEP1    EXEC  RESTORE'
    Queue '//SYSIN  DD  *'
    xx=Strip(oldname,,"'");Queue '  RESTORE  DSN='xx',VER='genv','
    xx=Strip(newname,,"'");Queue '       NEWNAME='xx
    Queue '/*'
    Queue '//'
    Return 0

Edit_JCL:
    Queue ''
    ztempf=$ztempf();dd="TA"Time('s')
    Address TSO "ALLOC DD("dd") DS('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW" dd "(FINIS"
    Address TSO 'DELSTACK'
    x=Mark_notes_1()
    Address TSO "NEWSTACK"
    Do i=n_st To n_en;Queue Sourceline(i);End
    umodelds='*';"VPUT (umodelds) SHARED"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    "EDIT DATAID(&DATAID) MACRO(UMODEL)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD("dd")";x=$ztempf(ztempf,'/D')

    Return 0

err1:
    "SETMSG MSG(ISRZ001)"
Get_out:
    "LIBDEF ISPPLIB"
    m#=Msg('Off')
    Address TSO "DELETE '"dsnsams"'"
    Return 0

Mark_notes_1:n_st=mark(2)
/*
*---------------------------ooo000OOOO000ooo---------------------------*
*                                                                      *
*   This is the JCL that has been generated from the parameters you    *
*   have supplied. Enter SUB on the command line if you wish to        *
*   submit the job.  [END] will send it to the bit bucket without      *
*   submission.                                                        *
*                                                                      *
*----------------------------------------------------------------------*
*/
    n_en=mark(-2);Return 0

/*--------------------------------------------------------------------*/
/* Allocate panel                                                     */
/*--------------------------------------------------------------------*/
build_panel:
    dsnsams= hlq0'.$$$TEMP.SAMS#DSN';built_panels=1
    #msg=Msg('Off')
    Address TSO
    "DELETE '"dsnsams"'"
    "ALLOC DA('"dsnsams"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(1)",
       "RECFM(F B) REU"
    "FREE DA('"dsnsams"')"
    members='SAMSP1 SAMSP2'
    dd='TT'Time('s')
    Do While members/=''
        Parse VAR members memb members
        #tr=Trace('o')
        Interpret "Call make_mem_"memb
        "NEWSTACK"
        Do i=n_st To n_en;Queue Sourceline(i);End;Queue ''
        x=Trace(#tr)
        "ALLOC F("dd") DA('"dsnsams"("memb")') SHR REU"
        "EXECIO * DISKW "dd" (FINIS"
        If rc/=0 Then Do
            Say "Error outputing to datadset '"dsnsams"("memb")', rc="rc"."
    End     Exit
        End
    Address
    Address ISPEXEC "LIBDEF ISPPLIB DATASET ID('&dsnsams') STACK"
    x=Msg(#msg)
    Return 0

/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_SAMSP1:n_st = mark(2)
/*
)ATTR
  _ TYPE(INPUT) INTENS(HIGH) COLOR(RED) HILITE(USCORE)
  ¢ TYPE(INPUT) INTENS(HIGH) COLOR(TURQ) HILITE(USCORE)
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
  # TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW)
  ~ TYPE(TEXT) INTENS(HIGH)   COLOR(GREEN) SKIP(ON)
)BODY EXPAND(\\)
@&TIME \-\ SAMS - Dataset mask entry \-\-----
%&SID ===>_ZCMD
%
+Enter member mask(s) below, 1 per line and@/+to select it(them):
~               Sel Mask                                        Duplicates
~  Mask 1 . . . ._Z¢SAMSMSK1                                    _Z+
~       2 . . . ._Z¢SAMSMSK2                                    _Z+
~       3 . . . ._Z¢SAMSMSK3                                    _Z+
~       4 . . . ._Z¢SAMSMSK4                                    _Z+
~       5 . . . ._Z¢SAMSMSK5                                    _Z+
%
+
+Enter any character to the left of the mask to select that mask for processing.
+Blank the field to the right NOT to list duplicates.
+
@END+key will terminate processing.
)INIT
 &SID=&ZSYSID
 &TIME=&ZTIME
 .ZVARS='(SM1,DP1,SM2,DP2,SM3,DP3,SM4,DP4,SM5,DP5)'
 IF (&SAMSMSK1 ¬= &Z)
    &XX=TRUNC(&SAMSMSK1,'/')
    IF (&XX=&SAMSMSK1)
       &SAMSMSK1='&SAMSMSK1/'
 IF (&SAMSMSK2 ¬= &Z)
    &XX=TRUNC(&SAMSMSK2,'/')
    IF (&XX=&SAMSMSK2)
       &SAMSMSK2='&SAMSMSK2/'
 IF (&SAMSMSK3 ¬= &Z)
    &XX=TRUNC(&SAMSMSK3,'/')
    IF (&XX=&SAMSMSK3)
       &SAMSMSK3='&SAMSMSK3/'
 IF (&SAMSMSK4 ¬= &Z)
    &XX=TRUNC(&SAMSMSK4,'/')
    IF (&XX=&SAMSMSK4)
       &SAMSMSK4='&SAMSMSK4/'
 IF (&SAMSMSK5 ¬= &Z)
    &XX=TRUNC(&SAMSMSK5,'/')
    IF (&XX=&SAMSMSK5)
       &SAMSMSK5='&SAMSMSK5/'
)PROC
)END
*/
    n_en = mark(-2);Return 0

make_mem_SAMSP2:n_st = mark(2)
/*
)ATTR
  _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)    HILITE(USCORE)
  # TYPE(INPUT) INTENS(HIGH) COLOR(RED)    HILITE(USCORE)
  ¢ TYPE(INPUT) INTENS(HIGH) COLOR(TURQ)   HILITE(USCORE)
  @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)
  ~ TYPE(TEXT)  INTENS(HIGH) COLOR(GREEN)  SKIP(ON)
)BODY EXPAND(\\)
@&TIME \-\ SAMS - Dataset Restore/Rename Entry \-\------
%&SID ===>_ZCMD
%
+     Enter paramaters below. Use new name if not restoring over itself:
~       Dataset name .¢oldname                                     +
~       Generation . .#Z +
~       New name . . .#newname                                     +
%
@     END+key will terminate processing.
%
%
)INIT
 &SID=&ZSYSID
 &TIME=&ZTIME
 .ZVARS='(GENV)'
 IF (&PROT1='OUTPUT')
    .ATTR (OLDNAME) = 'TYPE(OUTPUT) COLOR(WHITE)'
    .ATTR (NEWNAME) = 'TYPE(OUTPUT) COLOR(WHITE)'
    .ATTR (GENV)    = 'TYPE(OUTPUT) COLOR(WHITE)'
)PROC
  VER(&OLDNAME,NB,DSNAMEQ)
  VER(&GENV,NB,NUM)
  VER(&NEWNAME,DSNAMEQ)
)END
*/
    n_en = mark(-2);Return 0

Help_me:
    Signal off Syntax;#tr=Trace('o')
    n_st=mark(2)                            /* Mark Start             */
/*

   Good &TOD. &CNAME..

   SAMS: Routine to generate batch JCL to perform SAMS functions.

   Parameters:
    (positional)
      dsnmask - Dataset mask. (Mask is a trailing '/'.)
    (keyword)
      /L      - List archives/backups.
                Presented with a screen to enter up to 5 masks.
                Any dataset passed will be placed in the first blank
                mask space found otherwise it wil overwrite the first
                mask.
      /R      - Recover dataset.
                Presented with a screen to enter generation to
                restore and name to restore inro.  Replacement will
                display a confirmation panel.
      /RR     - Recover Replace dataset.  (Replacement confirmation
                will still be required.)
      /T      - Tape listing.

   Infrastructure:
    Members marked with an 'o' seperator are optional and used for site
    customisations.  Without them you may need to fine tune things like
    account-code and job classes for JCL generated.
    REXX:
      $ALKACCT - Account code, used by $ALKJC.
      $ALKJC   - Provide jobcard details like class, msgclass etc.
      $ALKJCPG - Program name used by $ALKJC.
      SAMS     - This driver.
    Panels
      SAMSP1   - List archives dataset_mask entry panel. This is a self
                 extracting panel.
      SAMSP2   - Restore/rename dataset entry panel. Self extracting.

                                *****
*/
    n_en=mark(-2)                           /* Mark End               */

    chgchar='&';cname='there'
    Parse Value Time() With hh ':' 1 time +5
    Select
        When hh<12 Then tod='morning'
        When hh<18 Then tod='afternoon'
        Otherwise tod='evening'
    End
    Signal on Syntax Name error_off_1
    Parse Value $Whoami() With cname sname  /* Toggle as per format   */
error_off_1: Signal Off Syntax

    today=Date('e')
    If ima_macro Then Do;Address ISREDIT;"(caps)=CAPS";"CAPS=OFF";End
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        x=nl_h(Substr(line,1,79))
    End
    If ima_macro Then Do;"CAPS=(caps)";Address;End
    Exit

nl_h:Parse Arg n#
    If ima_macro Then "LINE_BEFORE .ZFIRST=NOTELINE (n#)";Else Say n#
    Return 0
Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff
