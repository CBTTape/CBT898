/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* SCANLOG:                                                           */
/*                                                                    */
/* Routine to establish all the systems in the PLEX and then scan the */
/* log for each system for up to 3 10 byte characters either          */
/* ANDed/ORed.                                                        */
/*                                                                    */
/* The following members are required to package this routine.        */
/* EXEC:                                                              */
/*   SCANLOG  - Main driver                                           */
/*                                                                    */
/* CEXEC:                                                             */
/*   SCANLOG  - Compiled/renamed version of SCANL (executable)        */
/*                                                                    */
/* Panels:                                                            */
/*   SCANLOGP - Parameter entry panel                                 */
/*   SCANLOGY - Data display panel                                    */
/*   SCANL100 - Tutorial panel                                        */
/*   SCANL200 - Tutorial panel                                        */
/*   SCANL300 - Tutorial panel                                        */
/*                                                                    */
/*                                                                    */
/* Messages:                                                          */
/*   GC00     - Generic (Comment) messages.  GC001 thru GC009...      */
/*                                                                    */
/*--------------------------------------------------------------------*/
Argparm#;Address ISPEXEC;"CONTROL ERRORS RETURN"


ini1:
/*  "CONTROL ERRORS CANCEL"                                           */

    Parse Upper VAR parm# parm1 parm2 parm3
    log_hlq='AKOS.SYSLOG'
    log_llq='.D'yy||ddd
log_llq='.TEMP'
    hlq=$alkhlq()
    #rec=10000                              /* no. records per read   */
    sortlim=15000                           /* Sort permit limit      */
    Call set_vars
    Call get_systems

    vars='FO1 FO2 FO3 FA1 FA2 FA3 DATER TIMEFR TIMETO SCANCOL',
         'SCANCAP SCANALLF'
    fkeys='ZPF05';"VGET ("vars fkeys") PROFILE"
    szpf05=zpf05;zpf05='RF';"VPUT ("fkeys") PROFILE"
    #fo1=fo1

dater='03/12/2003'
    If dater='' | dater='DATER' Then dater=$DATEMAN('E-N',,-1)
    If Index(dater,'/')=0 Then deter=$DATEMAN('J2E',dater)

    If scancol='' | scancol='SCANCOL' Then scancol='BWGYPRT'
    csrp1=1;csr1=

scr1:
Plexmb='P1,P2,P3'
    zcmd=;fo1=#fo1
    "DISPLAY PANEL(SCANLOGP) CURSOR(&CSR1) CSRPOS(&CSRP1)"
    If rc/=0 Then Do
        If timef#/='TIMEF#' Then timefr=timef#
        If timet#/='TIMET#' Then timeto=timet#
        zpf05=szpf05
        "VPUT ("vars fkeys") PROFILE"
        Exit
    End

    Parse VAR zcmd cmd parm1 parm2 parm3 .

    If cmd='TRACE' Then Do
        If parm1='OFF' Then Do
            Trace Off;trace='N'
        End
        Else Do
            Trace r;trace='Y'
        End
        Signal scr1
    End

    If plexmb='' Then Do
        gc009='PLEX members established.'
        "SETMSG MSG(GC009)"
        Call get_systems
        csrp1=Length(plexmb)+1;csr1='PLEXMB'
        Signal scr1
    End

    csrp1=1;csr1=;gc009=
    If timeme='Y' Then s_time=Time()
    If scancap/='' Then cap=scancap;Else cap=99999

    #dater=dater
    Select
        When (Index(dater,'/')>1) Then Do
            dater=$DATEMAN('E2J',dater,2)
            If Word(dater,1)='Error' Then Do
                gc009=Subword(dater,2);dater=#dater
                "SETMSG MSG(GC009)"
                csr1='DATER'
                Signal scr1
            End
        End
        When (Index(dater,'.')>1) & Datatype(dater)='NUM' Then Do
            #dater=$DATEMAN('J2E',dater)
            If Word(dater,1)='Error' Then Do
                gc009=Subword(dater,2);dater=#dater
                "SETMSG MSG(GC009)"
                csr1='DATER'
                Signal scr1
            End
        End
        Otherwise Do
            If Datatype(dater) /= 'NUM' | dater > -1 Then Do
                gc009 = 'Displacement must be -1 or less (numeric).'
                "SETMSG MSG(GC009)"
                dater = #dater
                csr1  = 'DATER'
                Signal scr1
            End
            dif   = dater
            dater = today
            Call ddd_incr
            @dater = dater
            Call ddd_ddmm
            #dater = dater
            dater  = @dater
        End
    End

    Parse VAR dater . 3 y1 '.' d1
    mdate = y1 || d1
    dif = 1
    Call ddd_incr
    dater# = dater
    dater  = #dater

    fox=
    #fo1 = fo1
    If fo1 /= '' Then fox = Strip(fo1 fo2 fo3)
    If fa1 /= '' Then fox = Strip(fa1 fa2 fa3)
    If fo1 = '*' Then fo1 = ''
    If fa1 = '*' Then fa1 = ''
    If fo1 /= '' | fa1 /= '' Then fst = 'Y'
    Else                          fst = 'N'
    If Strip(fo1 fo2 fo3 fa1 fa2 fa3)='' Then no_find=1;Else no_find=0
    sid@ = plexmb
    migr = 'N'
    #sis = 0
timefr='23450040'
    Parse var timefr t1 ':' t2 ':' t3 '.' t4
    If t1 /= '' Then timef# = Left(t1||t2||t3||t4,8,'0')
    Else             timef# = ''
    Parse var timeto t1 ':' t2 ':' t3 '.' t4
    If t1 /= '' Then timet# = Left(t1||t2||t3||t4,8,'0')
    Else             timet# = ''
    Do While sid@/=''
        Parse VAR sid@ sid# ',' sid@
        #sis=#sis+1;ss.#sis=sid#
        file.#sis=log_hlq'.'sid# || log_llq
        xx=Listdsi("'"file.#sis"' NORECALL")
        If sysreason=9 Then Do
            migr='Y';Address TSO "HRECALL '"file.#sis"' NOWAIT"
        End
        Else Do
            If sysreason>0 Then Do
                Select
                    When (sysreason=5) Then,
                        gc009="Dataset '"file.#sis"' not found."
                    Otherwise Do
                        If Substr(sysmsglvl2,1,3)='IKJ' Then,
                            Parse VAR sysmsglvl2 . gc009
                        Else gc009 = sysmsglvl2
                    End
                End
                "SETMSG MSG(GC009)"
                csr1='plexmb';csrp1=Index(plexmb,sid#)
                Signal scr1
            End
            If Substr(sysunits,1,1)='C' Then fctr=15;Else fctr=1
            #recs.#sis=408*sysused*fctr
            lrecl=syslrecl
            If zcmd='B' Then "BROWSE DATASET('"file.#sis"')"
            If zcmd='V' Then "VIEW DATASET('"file.#sis"')"
        End
    End

    If zcmd='V' | zcmd='B' Then Signal scr1

    Call set_colour
    If result/=0 Then Signal scr1
    If migr='Y' Then Do
        gc009='Migrated datasets being recalled.'
        "SETMSG MSG(GC009)"
        Signal scr1
    End

    "TBCREATE &TABLE NAMES(SEQ# DATE TIME DETAILS SIDT) NOWRITE REPLACE"
    seq#=0
no_find=1
    Do k=1 To #sis
        If seq#>=cap Then Leave
        Address TSO "ALLOC F("ddn") DA('"file.k"') SHR REU BUFNO(30)"
        gc009="Processing '"file.k"' containing" #recs.k "records."
        "SETMSG MSG(GC009)"
        "CONTROL DISPLAY LOCK"
        fo1=#fo1
        "DISPLAY PANEL(SCANLOGP)"
        If fo1='*' Then fo1=
        ht=0;sidt=ss.k;date=;time=
        rc1=0
        Trace Off
        Do While rc1/=2
            Address TSO "EXECIO "#rec" DISKR "ddn" (STEM linei. OPEN)"
            rc1=rc
            If trace='Y' Then Do
                Say linei.0 'lines read' file.k
                Say Substr(linei.i,1,78)
            End
            If linei.0=0 Then Do
                rc1=2;Leave
            End
            Do i=1 By 1 While i<=linei.0
                Parse Var linei.i 21 datet +5 27 timet +11 39 jid +2
                If jid='' | datet='' Then Do
                    If ht/=0 | no_find Then Nop
                    Else Do
                        Call find_strings
                        If ht=0 Then Iterate
                        If ht=9999 Then Do
                             rc1=2;Leave
                        End
                        Call back_up
                        Iterate
                    End
                End
                Else Do
                    If mdate/=datet Then Do
                        If scanallf='Y' Then Iterate
                        rc1=2;Leave
                    End
                    Call find_strings
                    If ht=0 Then Iterate
                    If ht=9999 Then Do
                        rc1=2;Leave
                    End
                    time=timet;date=datet
                End
                details=Substr(linei.i,12)
                seq#=Right(seq# +1,5)
                "TBADD &TABLE"
                If seq#>=cap Then Leave
            End
        End
        If trace = 'Y' Then Trace r
        llp = Substr(linei.i,12)
        Address TSO "EXECIO 0 DISKR "ddn" (STEM linei. FINIS)"
    End
    gc009 = ''
    Address TSO "FREE F("ddn")"
    "TBQUERY &TABLE ROWNUM(rownum)"
    rownum = rownum + 0
    If rownum <= sortlim Then,
        "TBSORT &TABLE FIELDS(DATE,C,A,TIME,C,A,SEQ#,C,A)"
    Else,
        gc009 = rownum "table entries exceed sort limit" sortlim".",
                "Table not sorted."
/*
Trace r
"CONTROL ERRORS CANCEL"
"TBDISPL &TABLE PANEL(SCANLOGT)"
Trace Off
*/
    "TBTOP &TABLE"
    "TBQUERY &TABLE POSITION(tabptr)"

    x_string = ''
    Call display_table

    "TBEND &TABLE"
    Signal scr1

ext1:
    Exit

/*--------------------------------------------------------------------*/
/* Use CONSOL facility to extract PLEX members.                       */
/*--------------------------------------------------------------------*/
get_systems:
    sol   = sysvar('SOLDISP')
    unsol = sysvar('UNSDISP')
    Address TSO
    "CONSPROF SOLDISP(NO) UNSOLDISP(NO)"
    Do i=1 To 26
        cn = Userid() || Substr(alfabet,i,1)
        x = Outtrap('xx.')
        "CONSOLE ACTIVATE NAME("cn")"   /* ACTIVATE CONSOLE           */
        rc1 = rc
        If rc1 = 0 Then Leave
    End
    If rc1 /= 0 Then Do             /* if console was not active      */
       'CONSOLE DEACTIVATE'         /* then deactivate it             */
       rc1 = rc
    End
    x = Outtrap('Off')
    If rc1 /= 0 Then Do
        zerrlm = xx.2
        Signal erx1
    End
    i = xx.0                        /* Check last msg for active      */
    Parse VAR xx.i . ' NAME IS ' acn '.'
    If cn /= acn & acn /= '' Then Do
        zerrlm = 'Console already active with name='acn
        Signal erx1
    End
    "CONSOLE SYSCMD(D XCF) CART('SCANL1')"
    msg = Getmsg('consmsg.',,'SCANL1',,5) /* wait 5 secs for results */
    If msg /= 0 Then Do
        zerrlm = 'No output from console command to process'
        Signal erx1
    End
    'CONSPROF SOLDISP('sol') UNSOLDISP('unsol')' /* restore profile   */
    'CONSOLE DEACTIVATE'            /* Deactivate it                  */

    Parse VAR consmsg.2 . ':' plexmb sss
    Do Forever
        If sss = '' Then Leave
        Parse VAR sss sid# sss
        plexmb = plexmb','sid#
    End
    Address ISPEXEC
    Return 0

erx1:
    Address ISPEXEC
    gc009 = 'Failed establishing plexmb, enter manually. Is SDSF',
            'active in other split screen?'
    "SETMSG MSG(GC009)"
    Return 0

/*--------------------------------------------------------------------*/
/* Calculate format dd/mm/yyyy from Julian date                       */
/*--------------------------------------------------------------------*/
ddd_ddmm:
    Parse VAR dater yy '.' ddd
    If yy < 2000 Then yy = (yy // 1900) + 1900
    Else              yy = (yy // 2000) + 2000
    Do i=1 To 12
        y = m#.i
        If y >= ddd Then Do
            mm = Right(i,2,'0')
            dd = Right(ddd,2,'0')
            Leave
        End
        ddd = ddd - y
    End
    dater = dd'/'mm'/'yy

    Return 0

/*--------------------------------------------------------------------*/
/* Calculate new Julian date from Julian date an pos/neg displacement */
/*--------------------------------------------------------------------*/
ddd_incr:
    Parse VAR dater yy '.' ddd
    If yy < 2000 Then yy = (yy // 1900) + 1900
    Else              yy = (yy // 2000) + 2000
    If yy // 400 /= 0 & yy // 4 = 0 Then doy = 366
    Else                                 doy = 365
    ddd = ddd + dif
    If ddd > doy Then Do
        yy = yy +1
        ddd = ddd -doy
    End
    Else,
        If ddd < 1 Then Do
            yy = yy -1
            If yy // 400 /= 0 & yy // 4 = 0 Then doy = 366
            Else                                 doy = 365
            ddd = ddd +doy
        End
    ddd   = Right(ddd,3,'0')
    dater = yy'.'ddd

    Return 0

/*--------------------------------------------------------------------*/
/* Conver format dd/mm/yy to yyyy.ddd                                 */
/*--------------------------------------------------------------------*/
ddmm_ddd:
    Parse VAR dater dd '/' mm '/' yy
    If Datatype(dd) /= 'NUM' Then Return 8
    If Datatype(mm) /= 'NUM' Then Return 8
    If Datatype(yy) /= 'NUM' Then Return 8
    If yy = '' Then yy = yy#
    If yy < 2000 Then yy = (yy // 1900) + 1900
    Else              yy = (yy // 2000) + 2000
    If yy // 400 /= 0 & yy // 4 = 0 Then feb = 29
    Else                                 feb = 28
    ddd = 0
    Do i=1 To mm
        j = i -1
        ddd = ddd + m#.j
    End
    ddd   = Right(ddd + dd,3,'0')
    dater = yy'.'ddd

    Return 0

/*--------------------------------------------------------------------*/
/* Display the data (table)                                           */
/*--------------------------------------------------------------------*/
display_table:
    col = 1
    Call build_field

    If seq# >= cap Then Do
        gc009 = 'Capacity breached, premature exit.'
        "SETMSG MSG(GC009)"
    End
    If timeme = 'Y' Then Do
        gc009 = Strip(gc009 'Start' s_time', finish' Time()'.')
        "SETMSG MSG(GC009)"
    End

    If rownum = 0 Then Do
        gc009 = Substr(gc009,1,79) ||,
                Substr('Last line processed:',1,79) ||,
                Substr(llp,1,77)
        "SETMSG MSG(GC009)"
    End
scr2:
    zcmd = ''
    dispstat = owhite'Row' #tabptr+1 'of' rownum
    headline = Substr(oyellow ||,
               Substr(Time(),1,5),
               "Log extract for string" ||,
               ogreen || fox ||,
               oyellow || Copies('-',35),1,79-Length(dispstat)) ||,
               dispstat

    "DISPLAY PANEL(&PANEL) CURSOR(&CSR2) CSRPOS(&CSRP2)"
    If rc /= 0 Then Return 0

    Parse VAR zcmd cmd parm1 parm2 parm3 .

    If cmd = 'TRACE' Then Do
        If parm1 = 'OFF' Then Do
            Trace Off
            trace = 'N'
        End
        Else Do
            Trace r
            trace = 'Y'
        End
        csrp2 = ''
        Signal scr2
    End

    If Substr(cmd,1,3) = '/C=' Then Do
        scancol = Strip(Substr(cmd,4,7))
        Call set_colour
        scroltab = 'N'
        csrp2    = ''
        Call build_field
        Signal scr2
    End

    If csr2 /= 'DA1' Then csrp2 = 1
    csr2 = ''
    If Substr(cmd,1,1) = 'D' Then Do
        Parse VAR zcmd . d_string
        If Substr(cmd,2,1) /= '+' Then delcont = 'N'
        Else                           delcont = 'Y'
        Call del_all_hits
        Signal bld2
    End

    If cmd = 'X' Then Do
        Parse VAR zcmd . x_string
        Signal bld2
    End

    If cmd = 'RESET' Then Do
        x_string = ''
        scroltab = 'N'
        csrp2    = ''
        Signal bld2
    End

    If cmd = 'PRNT' Then Do
        Call print_data
        If edisp = 'MOD' Then xx = 'appended'
        Else                  xx = 'printed'
        gc009 = 'Data' xx 'to dataset' dsn'.'
        "SETMSG MSG(GC009)"
        Signal scr2
    End

    If cmd = 'F' Then Do
        Parse VAR zcmd cmd f_string
        If Substr(f_string,1,1) = '"' Then f_string =,
            Strip(Substr(f_string,2,Length(f_string)-2))
        Else,
            If Substr(f_string,1,1) = "'" Then f_string =,
                Strip(Substr(f_string,2,Length(f_string)-2))
        botrch = 'N'
        Call find_strings_in_table
        Signal bld2
    End

    If cmd = 'RF' Then Do
        If f_string = '' Then Do
            gc009 = "Enter a 'F string' command first."
            "SETMSG MSG(GC009)"
            Signal scr2
        End
        $tabptr = #tabptr
        csrp2   = csrp2 +1
        Call find_strings_in_table
        If foundstr = 'N' Then #tabptr = $tabptr
        Signal bld2
    End

/*--------------------------------------------------------------------*/
/* This is the logic for processing selections. It also caters for    */
/* eXclusion of lines from the table.                                 */
/*--------------------------------------------------------------------*/
    changed = Index(da1,altered)
    Do While changed > 0
        changed = changed+1
        sel = Substr(da1,changed,2)
        lin# = (changed % 79) +1
Say sel lin#
Say changed
Say Substr(da2,changed,78)
        changed = Index(da1,altered,changed)
If changed = 0 Then Do
    da1 = da2
    Signal scr2
End
        If changed = 0 Then Signal bld2
    End

/*--------------------------------------------------------------------*/
/* Test for scrolling                                                 */
/*--------------------------------------------------------------------*/
    csrp2 = 1
    "VGET (zscrolla zscrolln zverb)"
    If zverb  = '' Then scroltab = 'N'
    If zverb  = 'UP' | zverb = 'DOWN' Then Do
        scroltab = 'Y'
        Call scroll_data_ud
        Signal bld2
    End
    If zverb  = 'LEFT' | zverb = 'RIGHT' Then Do
        Call scroll_data_lr
        scroltab = 'N'
        If result = 0 Then Signal bld2
        Else               Signal scr2
    End

/*--------------------------------------------------------------------*/
/* Rebuild screen                                                     */
/*--------------------------------------------------------------------*/
bld2:
    Call build_field
    Signal scr2

/*--------------------------------------------------------------------*/
/* This section builds the display field 'DA1' from the table from    */
/* the NEXT row to that poinetd to by variable TABPTR. This allows    */
/* for TBTOP (which is row 0).                                        */
/*--------------------------------------------------------------------*/
build_field:
    If scroltab = 'N' Then Do
        tabptr = #tabptr
        "TBTOP &TABLE"
        "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    End
    Else Call scroll_table
    Trace Off

    da1 = ''
    "TBQUERY &TABLE POSITION(tabptr)"
    #tabptr = tabptr
    #excl = excl
    texcl = 0
    excl  = 0
    Do k=1 To zscrmaxd
        "TBSKIP &TABLE"
        If rc /= 0 Then Do
            da1 = da1 || Substr(oblue||ztdmark,1,ll+1)
            Leave
        End

        If x_string /= '' Then Do
            If Index(Translate(details),x_string) > 0 Then Do
                excl = excl +1
                k = k -1
                Iterate
            End
            If excl /= 0 & #excl = 0 Then Do
                txt = excl 'Line(s) not displayed'
                l   = (79 - Length(txt)) % 3
                dax = owhite || Copies('-  ',l) txt
                da1 = da1 || Substr(dax,1,ll+1)
                k = k +1
                If k = zscrmaxd Then Leave
            End
        End
        texcl = texcl + excl
        excl = 0; #excl = 0

        Do i=1 To #sis
            If sidt = ss.i Then cl = cl.i
        End

        dax = cl || Substr(details,col,79)
        da1 = da1 || Substr(dax,1,ll+1)

        If foundstr = 'Y' Then Do
            foundstr = 'N'
            If cl = iyellow Then clo = owhite
            Else                 clo = oyellow
            clo = Bitor(clo,reverse)
            da1 = Overlay(clo,da1,csrp2-1)
            sp  = csrp2 + Length(f_string)
            sp  = Index(da1,' ',sp)
            If sp /= 0 Then da1 = Overlay(cl,da1,sp)
        End

    End
    If excl /= 0 & #excl = 0 Then Do
        txt = excl 'Line(s) not displayed'
        l   = (79 - Length(txt)) % 3
        dax = owhite || Copies('-  ',l) txt
        da1 = da1 || Substr(dax,1,ll+1)
    End
    texcl = texcl + excl
    If texcl /= 0 Then tabptr  = tabptr + texcl

    If trace = 'Y' Then Trace r
    da2 = da1
    Return 0

/*--------------------------------------------------------------------*/
/* This section re-positions the table to the appropriate row         */
/* according to the scroll parameters returned from ISPF.             */
/*--------------------------------------------------------------------*/
scroll_table:
    If tabptr + (qual*scrolln) > rownum Then tabptr = rownum
    Else tabptr = tabptr + (qual*scrolln)
    If tabptr < 0 Then tabptr = 0
    "TBTOP &TABLE"
    "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen to selected line after an UP/DOWN command.       */
/*--------------------------------------------------------------------*/
scroll_data_ud:
    If zscrolla = 'MAX' Then Do
        If zverb  = 'UP' Then tabptr  = 0
        Else                  tabptr  = rownum - (zscrolln-1)
        scrolln = 0
    End
    Else scrolln  = zscrolln
    If zverb  = 'UP' Then qual = -1
    Else                  qual = +1

    Return 0

/*--------------------------------------------------------------------*/
/* Scroll the screen LEFT/RIGHT.                                      */
/*--------------------------------------------------------------------*/
scroll_data_lr:
    If zverb  = 'RIGHT' Then col = (col + zscrolln)
    Else Do
        If zscrolla = 'MAX' Then col = 1
        Else                     col = (col - zscrolln)
    End
    If col < 1 Then col = 1
/*  If col > lrecl - 79 Then col = lrecl - 79                         */
    If col > lrecl Then col = lrecl - 79

    Return 0

/*--------------------------------------------------------------------*/
/* To following are constant variables and should not change.         */
/*--------------------------------------------------------------------*/
set_vars:
    "VGET (zscrmaxd)"
    ztdmark = Centre(' Rsend ',79,'*')
    #colors = 7                             /* Number of colors       */

    reverse = X2C('10')                     /* Reverse mask           */
    uscore  = X2C('20')                     /* Underscore mask        */
    blink   = X2C('30')                     /* Blink Mask. Note - this*/
                                            /* may not work on some   */
                                            /* terminals...           */

    ired    = X2C('01')                     /* Input RED etc...       */
    iblue   = X2C('02')
    iyellow = X2C('03')
    igreen  = X2C('04')
    iturq   = X2C('05')
    ipink   = X2C('06')
    iwhite  = X2C('07')

    ored    = D2C(#colors+C2D(ired))        /* Output RED etc...      */
    oblue   = D2C(#colors+C2D(iblue))
    oyellow = D2C(#colors+C2D(iyellow))
    ogreen  = D2C(#colors+C2D(igreen))
    oturq   = D2C(#colors+C2D(iturq))
    opink   = D2C(#colors+C2D(ipink))
    owhite  = D2C(#colors+C2D(iwhite))

    altered = X2C('AA')                     /* Altered field indicator*/

    locatec = 'Not_available'               /* Locate command         */
    sortc   = 'Not_available'               /* Sort command           */
    exitind = 'Not_available'               /* Exit required indicator*/

    mainhead = oyellow"Available space on on-line DASD"||,
               ogreen||Strip(SPFPARM)||,
               oyellow||Copies('-',35)
    subhead1 = oturq'               S      Free spce # of Lgst ext ',
               'Device  Alloc     Mount   Device'
    ll      = 79                            /* Line length (ex attrib)*/
    qual    = 1
    scrolln = 0
    panel   = 'SCANLOGY'
    csr2    = ''                            /* Cursor field           */
    csrp2   = 1                             /* Cursor position        */
    alfabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

    ddd#   = Date('j')
    Parse Var ddd# yy# +2 3 ddd#
    If yy# // 400 /= 0 & yy# // 4 = 0 Then feb = 29
    Else                                   feb = 28
    m#.0  = '00'
    m#.1  = '31'
    m#.2  = feb
    m#.3  = '31'
    m#.4  = '30'
    m#.5  = '31'
    m#.6  = '30'
    m#.7  = '31'
    m#.8  = '31'
    m#.9  = '30'
    m#.10 = '31'
    m#.11 = '30'
    m#.12 = '31'
    table = 'TLF'Time('s')
    ddn   = 'TSL'Time('s')
    today = yy#'.'ddd#

    Return 0

/*--------------------------------------------------------------------*/
/* Look for string(s) AND/OR in the actual system log                 */
/*--------------------------------------------------------------------*/
find_strings:
    ht=0
    If timef#/='' Then Do
        Parse var timet t1 ':' t2 ':' t3 '.' t4
        tt=t1||t2||t3||t4
        If timef#>tt Then Return 0
/*      If trace='Y' Then Say fo1 timef# tt                           */
        If timet#/='' & timet#<tt Then Do;ht=9999;Return 9999;End
        ht=1
        If fst='N' Then Return ht
    End
    If fo1/='' Then Do
        ht=Index(linei.i,fo1)
        If ht=0 & fo2/='' Then ht=Index(linei.i,fo2)
        If ht=0 & fo3/='' Then ht=Index(linei.i,fo3)
    End
    Else Do
        ht=Index(linei.i,fa1)
        If ht>0 & fa2/='' Then ht=Index(linei.i,fa2)
        If ht>0 & fa3/='' Then ht=Index(linei.i,fa3)
    End
    Return ht

/*--------------------------------------------------------------------*/
/* Hit found on continuation line. Back up to prev main line or       */
/* start of buffer, whereby write dummy line (may need further        */
/* enhancement if un-attainable; eg. save last 'x' line when buffer   */
/* swap.                                                              */
/*--------------------------------------------------------------------*/
back_up:
    ht = 1
    l  = 1
    If i > 1 Then Do
        Do l=i-1 By -1 To 1
            Parse Var linei.l 39 jid +2
            If jid /= '' Then Do
                Parse Var linei.l 21 datet +5 27 timet +11
                date = datet
                time = timet
                Leave
            End
            If date = '' Then Parse Var linei.l 21 date +5 27 time +11
        End
    End
    Else Parse Var linei.l 21 date +5 27 time +11
    If l = 1 Then Do
        If jid = '' Then Do
            details = '*** Unpredictable result. Start of block passed',
                'on reverse read.'
            seq# = Right(seq# +1,5)
            "TBADD &TABLE"
            details = '*** Control message line may have been missed.'
            seq# = Right(seq# +1,5)
            "TBADD &TABLE"
        End
    End
    Do l=l To i
        details = Substr(linei.l,12)
        seq# = Right(seq# +1,5)
        "TBADD &TABLE"
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Set colour for each system in the PLEX.                            */
/*--------------------------------------------------------------------*/
set_colour:
    If scancol = '' | scancol = 'SCANCOL' Then scancol = 'BWGYPRT'
    If Length(scancol) < #sis Then Do
        gc009 = 'Not enough colours to cover number of systems.'
        "SETMSG MSG(GC009)"
        Return 4
    End
    scl = scancol
    Do i=1 To #sis
        Parse VAR scl cl +1 scl
        Select
            When (cl = 'Y') Then cl.i = iyellow
            When (cl = 'B') Then cl.i = iblue
            When (cl = 'G') Then cl.i = igreen
            When (cl = 'W') Then cl.i = iwhite
            When (cl = 'P') Then cl.i = ipink
            When (cl = 'R') Then cl.i = ired
            Otherwise            cl.i = iturq
        End
        If scl = '' Then Leave
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Look for string in table                                           */
/*--------------------------------------------------------------------*/
find_strings_in_table:
    @tabptr = #tabptr
    If botrch = 'Y' Then tabptr = 0
    Else                 tabptr = #tabptr
    tabptr = tabptr + (csrp2 % 80)
    csrp2  = (csrp2 // 80) + (col -1)
    "TBTOP &TABLE"
    "TBSKIP &TABLE NUMBER(&TABPTR) POSITION(TABPTR)"
    Do Forever
        "TBSKIP &TABLE"
        If rc /= 0 Then Leave
        If Index(Translate(details),f_string,csrp2) > 0 Then Do
            foundstr = 'Y'
            Leave
        End
        csrp2 = 1
    End
    If foundstr = 'Y' Then Do
        botrch  = 'N'
        csrp2   = Index(Translate(details),f_string,csrp2) +1
        If csrp2 > 79 Then Do
            col   = lrecl -79
            csrp2 = (csrp2 - col) +1
        End
        Else col   = 1
        csr2    = 'DA1'
        gc009   = "String '"f_string"' found."
        "TBSKIP &TABLE NUMBER(-1)"
        "TBQUERY &TABLE POSITION(tabptr)"
        #tabptr = tabptr
    End
    Else Do
        botrch  = 'Y'
        gc009   = "String '"f_string"' NOT found."
        gc009   = "*** Bottom of data reached ***."
        #tabptr = @tabptr
    End
    scroltab = 'N'
    "SETMSG MSG(GC009)"
    Return 0

/*--------------------------------------------------------------------*/
/* Delete all occurances of a string.                                 */
/*--------------------------------------------------------------------*/
del_all_hits:
    "TBTOP &TABLE"
    del# = 0
    Do Forever
        "TBSKIP &TABLE"
        If rc /= 0 Then Leave
        If Index(Translate(details),d_string) > 0 Then Do
            "TBDELETE &TABLE"
            del# = del# +1
            If delcont = 'Y' Then Call del_cont_lines
        End
        If rc /= 0 Then Leave
    End
    gc009 = del# 'hits deleted from log extract.'
    "SETMSG MSG(GC009)"
    If del# /= 0 Then Do
        "TBQUERY &TABLE ROWNUM(rownum)"
        rownum = rownum +0
        "TBTOP &TABLE"
    End
    Else scroltab = 'N'

    Return 0

/*--------------------------------------------------------------------*/
/* Delete related lines before and after                              */
/*--------------------------------------------------------------------*/
del_cont_lines:
    Do Forever
        "TBGET  &TABLE"
        If rc /= 0 Then Leave
        If Substr(details,21,1) /= '' Then Do
            "TBDELETE &TABLE"
            del# = del# +1
            Leave
        End
        "TBDELETE &TABLE"
        del# = del# +1
    End
    Do Forever
        "TBSKIP &TABLE"
        If rc /= 0 | Substr(details,21,1) /= '' Then Leave
        "TBDELETE &TABLE"
        del# = del# +1
    End

    Return 0

print_data:
    If Datatype(parm1) = 'NUM' & Index(parm1,'.') = 0 Then,
        dsuf = '.#'Right(parm1,3,'0')
    Else,
        dsuf = '.#001'
    If parm1 = 'MOD' | parm2 = 'MOD' Then edisp = 'MOD'
    Else                                  edisp = 'OLD'
    dsn  = "'"hlq".SCANLOG.PRNT"dsuf"'"
    sep  = '***** Seperator '
    sepc = (133 % Length(Sep)) +1
    sep = Substr(Copies(sep,sepc),1,133)
    If Sysdsn(dsn) = 'OK' Then,
        Address TSO "ALLOC DD(ISPFILE) DSN("dsn") REU" edisp
    Else,
        Address TSO "ALLOC DD(ISPFILE) DSN("dsn") REU NEW CATALOG",
            "LRECL(133) BLKSIZE(0) DSORG(PS) RECFM(F B) CYL",
            "SPACE(1,1) UNIT(SYSDA)"
    "FTOPEN"
    "FTINCL SCANLOGS"
    "FTCLOSE"
    Address TSO "FREE F(ISPFILE)"
    action = ''
    If parm1 = 'EDIT' | parm2 = 'EDIT' | parm2 = 'EDIT' Then,
        action = 'EDIT'
    If parm1 = 'BROWSE' | parm2 = 'BROWSE' | parm2 = 'BROWSE' Then,
        action = 'BROWSE'
    If action /= '' Then "&ACTION DATASET(&DSN)"

    Return 0
