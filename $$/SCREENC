/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/*  SCREENC:                                                          */
/*  --------                                                          */
/*  Return the bscreen image and cursor position.                     */
/*                                                                    */
/*  Invoke with parameter of "?" or refer to bottom for text.         */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#; Address ISPEXEC;"CONTROL ERRORS RETURN";im_a_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then im_a_macro=1
byp1:
    If parm#='?' Then Signal help_me
    Parse SOURCE op_sys op_mode xcmd_name dd_name dsn_name .

/*  "CONTROL ERRORS CANCEL"                                           */

    Call parse_parms

    If trace='Y' Then TRace r
    Call get_screen_image
    If ASIS/='Y' Then zscreeni=Translate(zscreeni,,Xrange('00'x,'3f'x))
    If inval/='' Then,
        zscreeni=Translate(zscreeni,Substr(' ',Length(inval)),inval)
    If editit/='' Then Call edit_it
    If op_mode='FUNCTION' Then Do
        If cursor='Y' Then Return zscreenc;Else Return zscreeni
    End
    Else If editit='' Then Do
        If cursor='Y' Then Say zscreenc;Else Say zscreeni
    End
    Exit



get_screen_image: Procedure Expose zscreeni zscreenc
/*  "VGET (zscreeni zscreenc)"                                        */
/*  If rc = 0 Then Return                                             */

    "VGET (zscreenw zscreend)"
    p=ptr(96+ptr(ptr(24+ptr(112+ptr(132+ptr(540))))))
    zscreeni=Storage(d2x(p),zscreenw*zscreend)
    zscreenc=c2d(Storage(,
        d2x(164+ptr(ptr(24+ptr(112+ptr(132+ptr(540)))))),4))
    Return

ptr: return c2d(bitand(storage(d2x(Arg(1)),4),'7FFFFFFF'x))
/*   Say Right(arg(1),8) Right(d2x(arg(1)),8,'0'),                    */
/*       d2x(c2d(bitand(storage(d2x(Arg(1)),4),'7FFFFFFF'x)))         */

edit_it:
    Address TSO
    "NEWSTACK"
    screeni=zscreeni
    Do Forever
        Parse VAR screeni xx +80 screeni
        Queue xx
        If screeni='' Then Leave
    End
    Queue ''
    Address ISPEXEC
    "VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    "&EDITIT DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD(ZTEMPF)"
    "DELSTACK"
    Return

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#
    trace=parse_cons('TR',,,2)
    editit=parse_cons('/E','EDIT','NULL',2)
    cursor=parse_cons('/C',,,2)
    If editit='' Then editit=parse_cons('/V','VIEW','NULL',2)
    If editit='' Then editit=parse_cons('/B','BROWSE','NULL',2)

    asis   = parse_cons('/A',,,2)
    Parse VAR parm# inval

    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

help_me:

n_st = mark(2)                              /* Mark next line         */
/*

`  Hello &CNAME..

    SCREENC:
    --------
    Return the bscreen image and cursor position.

    The get_screen_image procedure checks for the existence of ISPF
    variables ZSCREENI and ZSCREENC which contain the current screen
    image and cursor offset respectively. If these are not available
    then the screen image and cursor offset are extracted directly
    from memory.

    Parameters:
      /Cursor  - To return the cursor position.
      /V | /E | /B
               - Display the screen under ISPF's browser or viewer.

      /Asis    - Do not translate attribute bytes.
                 The REXX translate function is applied to ZSCREENI
                 to remove all non-displayable characters including
                 attribute bytes in the range of x'00' to x'3F'.

      'string' - Pass a string of bytes that will be translated to
                 spaces. Eg. custom built screens where special
                 characters like '$%¬@!`~¢?' etc.. are used as
                 attribute bytes and need to be removed from the
                 string. This has to be the last parameter.

      '?'      - This help tutorial. So if you want to actually pass
                 '?' as the only translated character pass it twice,
                 eg. x=Screenc('??')

    Note: Both the ZSCREENI variable and the image in memory may be
          unreliable for pop-up panels.


*/
n_en = mark(-2)                             /* Mark prev 2 line       */

    chgchar='`'
    syntaxact="cname = 'there'"
    retlab=error_off_1
    Signal on Syntax Name syntaxerr
    cname=$Whoami('C')
error_off_1:
    Call Off Error

    today =Date('e')
    If im_a_macro Then Do;"ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF";End
    x=nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        If Substr(line,1,1) = chgchar Then Do Forever
            line=' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            Interpret 'line = p1 || 'var' || p2'
        End
        x=nl_h('*'Substr(line,1,70)'*')
    End
    x=nl_h('*'Copies('-',70)'*')
    If im_a_macro Then "ISREDIT CAPS = (caps)"

    Exit

nl_h:Parse Arg n#
    If im_a_macro Then "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)"
    Else Say n#;Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Interpret syntaxact;Signal Value retlab
