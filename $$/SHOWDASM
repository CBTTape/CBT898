/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* SHOWDASM: Disassembler part of the SHOWSTOR suite.                 */
/*                                                                    */
/* This routine is used by SHOWSTOR to disassemble code in memory.    */
/* When called by SHOWSTOR, the following positional parameters are   */
/* required:                                                          */
/*   ADRS_O                                                           */
/*     - Original base address.                                       */
/*   OFFS_O                                                           */
/*     - Original offset from the base address.                       */
/*   DADSN                                                            */
/*     - DSNAME of disassembly matrix member SHOWDA#C which is a      */
/*       xref of code vs operation.                                   */
/*   SYSAUTH.ASID                                                     */
/*     - Address Space Id of another address space that is to be      */
/*       scrutinised.                                                 */
/*   AUTHXMEM                                                         */
/*     - Location(name) of module that issues cross-memory calls and  */
/*       returns data for 'sysauth.asid' navigations. Must be a       */
/*       quoted fully qualified dataset(member).                      */
/*   SLM_MSG                                                          */
/*     - Message passed by SHOWSTOR. Eg. Length of module supplied by */
/*       the SLM command.                                             */
/*                                                                    */
/* The routine can be invoked as a command outside SHOWSTOR with the  */
/* following positional parameters:                                   */
/*   'HEX/CHAR/disasm_matrix' or 'HEX(offs)/CHAR(offs)'               */
/*     - External call identifier and also specifies the format of    */
/*       the code to be disassembled following. Can have optional     */
/*       offset start in brackets (default is 0). If offset is passed,*/
/*       it should be in decimal.                                     */
/*     - If the value is not HEX or CHAR than the value is assumed to */
/*       be the name of the disassembler matrix to be used.  The      */
/*       default matrix exploits the full instruction set (level '3') */
/*       and data may be interpreted as instructions. If you know you */
/*       use the low level instruction set, use a lower level matrix. */
/*       This must be a fully qualified (unquoted) dataset.           */
/*   NNNN/'*'                                                         */
/*     - Number of lines of disassembled code to return or '*' to     */
/*       return all lines to be disassembled. '*' will be limited to  */
/*       9999 as any more would be an overkill on-line.               */
/*   SOURCE                                                           */
/*     - Source code in either character or HEX format.               */
/*                                                                    */
/*--------------------------------------------------------------------*/
SHOWDASM:  disasm_V='2.02'                  /* SHOWDASM version       */
    Arg adrs_o,offs_o,parm3,sysauth.asid,authxmem,slm_msg
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    If slm_msg/='' Then Do
        Parse Arg ,,,,,slm_msg
        zedlmsg="Disassembly of" slm_msg
        "SETMSG MSG(ISRZ001)"
    End

    If adrs_o='?' | adrs_o='' Then Signal Help_me

    zedsmsg=
    v1='rexxlib hlq1 hlq0'
    v2=Sh$parms(v1)
    Interpret "Parse var v2" v1

    Parse VAR adrs_o adrs_o '(' offs ')'
    If adrs_o='HEX' | adrs_o='CHAR' Then,
         dadsn=rexxlib"(SHOWDA$C)"          /* Disassembler matrix    */
    Else dadsn=parm3
    #adrs_o=adrs_o;#offs=offs;mx#='C'
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
Alloc_matrix:
    If Sysdsn("'"dadsn"'")/='OK' Then Do
        ''
        zedsmsg=
        zedlmsg="Matrix translation table '"dadsn"' not found.",
                "Correct and try again."
        "SETMSG MSG(ISRZ001)"
        Return 'ERROR'
    End
    dadd1='DA'Time('s')
    Address TSO "ALLOC F("dadd1") DSN('"dadsn"') SHR REU"
    Address TSO "EXECIO * DISKR "dadd1" (STEM line. FINIS)"
    Address TSO "FREE F("dadd1")"

/*
oc   .        ai       il if       .             Arc cc desc
----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
0101 0101     PR       02 E        0        0      Z 0 Program Return
*/
    Do i=1 To line.0
        line=line.i
        Parse Var line oc . ai il if . 52 arc +1 54 cc +1 . 56 desc 1 ch1 +1
        If ch1='*' Then Iterate
        ds.oc=desc
        Select
            When ai=0 Then Do
                ai.oc=0;il.oc=1;Iterate
            End
            When if='TWO' Then Do
                ai.oc=2;Iterate
            End
            When if='TWOS' Then Do
                ai.oc='2S';Iterate
            End
            Otherwise NOP
        End
        ai.oc=ai                            /* Assembler pneumonic    */
        If ai='SVC' Then il.oc=2            /* Instruction Length/SVC */
        Else             il.oc=il
        cc.oc=cc                            /* Condition Code branch  */
        if.oc=if                            /* Instruction Format     */
        ct.oc=arc                           /* Architecture is ESA/ZOS*/
    End
    hex0  = '0000000000000000'x
    cc_p  = '0'                             /* Previous cc inst       */
    cc.0  = '0'                             /* Invalid OP-code cc ind */
    cc.40E= '0'                             /* Spaces cc indic        */
    if.0  = '0E'                            /* Invalid OP-code indic  */
    if.40E= '40E'                           /* Spaces indicator       */
    "VGET (ZSCREEND) SHARED"
    vars='STCX08 STCX09 STCX10 STCX11 STCX12 STCX13',
         'STCX14 STCX15 STCX16 STCX17 STCX19',
         'STHELP STDOTD STALLHEX STALLBIT STALLCHR'
    pfks='ZPF13,ZPF14,ZPF15,ZPF16,ZPF17,ZPF18'
    dprf='DTYPE,CTYPE'

    ohex='000509101112131415161718191A1B'X
    chex=Copies('.',Length(ohex))
    bhex=Copies(' ',Length(ohex))

    "VGET (&VARS,&PFKS,&DPRF) PROFILE"
    If dtype='' Then Do
        dtype='D'                           /* Displacement in decimal*/
        dtype='X'                           /* Displacement in HEX    */
        ctype='C'                           /* Char disp in character */
        ctype='X'                           /* Char disp in HEX       */
    End
/*--------------------------------------------------------------------*/
    If stcx10='' Then Do
        stcx08='red'
        stcx09='white'
        stcx10='yellow'
        stcx11='green'
        stcx12='pink'
        stcx13='blue'
        stcx14='yellow'
        stcx15='red'
        stcx16='white'
        stcx17='red'
        stcx19='yellow'
        stcx1A='pink'
        stcx1B='yellow'
    End
    Numeric Digits 10
    Call set_attributes

    u_m='AA'x                               /* Changed attributes     */

    stcx11='WHITE'
    stcx14=stcx10
    stcx14='YELLOW'
    stcx15='GREEN'
    stcx19='RED'
    heading='Disassembly listing'
/*  heads1=c4'Offs 'c4'Source      'c4'Disassembly'                   */
    heads1=c3'Offs 'c3'Source      'c3'Disassembly'
    c_p='1A'x                               /* Color Pink             */
    c_y='1B'x                               /* Color Yellow           */
    ext_ci=0                                /* Set Under Print Indic  */

    "VGET (ZSCRMAXD)";n1=zscreend-3

    cl_c=1;zscrolln=0
    j=cl_c
    If adrs_o='HEX' | adrs_o='CHAR' Then Do
        ext_ci=1                            /* Set external call ind  */
        If adrs_o='HEX' Then Do
            dtype='X';ctype='C'
        End
        Else Do
            dtype='D';ctype='C'
        End
        c1=;c2=;c3=;c4=;c5=;c6=;c7=;c8=;c9=;c0=
        If offs_o='*' | Datatype(offs_o)/='NUM' Then n1=9999;Else n1=offs_o
        If offs='' Then offs=0
        If adrs_o='HEX' Then Do
            If Length(parm3)//2=1 Then parm3=parm3'0';code=x2c(parm3)
        End
        Else code=parm3
        chex=ohex                           /* Ensure no change 4 prt */
        Return disasm_build()
    End
have_base:
    offs=offs_o;offs_d=d2x(offs_o)
    data=disasm()

display_disasm:
    showphlp='DASMP100'
    headsx='        [Matrix('mx#') DIsplacement('dtype')',
           'CHar type('ctype')]'
    headsub=heads1 headsx
    headshd='TTTTT TTTTTTTTTTTT TTTTTTTTTTTTTTTT' ||,
            'TTTTTtwttttttyttwwtttttttttttyttwwttttttttyttg'
/*                [Matrix(C) DIsplacement(X) CHar type(X)]            */
    scroll=Right(d2x(adrs_o),8,'0')'('Right(offs_d,4,'0')')' ||,
           Right(cl_c,4)

    zcmd=
    "DISPLAY PANEL(SHOWPAND)"
    If rc/=0 Then Signal ret_caller
    If zcmd='HELPSHOW' | zcmd='?' Then Do
        zcmd=
        "SELECT CMD(%HELPDRVR SHOWDADH)"
        Signal display_disasm
    End

    refresh='Y'
    zedlmsg=
    "VGET (ZVERB ZSCROLLA ZSCROLLN)"
    Parse Upper VAR zcmd cmd parm1 1 cmd2 +2

    If cmd='TRACE' Then Do
        If trace='Y' Then trace='N';Else trace='Y'
        Signal display_disasm
    End

    If cmd='EXIT' Then Do
        adrs_o=cmd
        Signal ret_caller
    End

    If cmd='/QUIT' Then Do
        If sysauth.asid/='' Then Do
            zedlmsg="The '/QUIT' command is only valid in",
                    "cross-memory mode."
            "SETMSG MSG(ISRZ001)"
            Signal display_disasm
        End
        adrs_o=cmd
        Signal ret_caller
    End

    If cmd='/ZOOM' Then Do
        x=look_at_memory()
        If x=9999 | x=8888 Then Do
            If x=9999 Then adres_o='EXIT';Else adres_o='/QUIT'
            Signal ret_caller
        End
        Signal display_disasm
    End
    If cmd='/MSG' Then Do
        zedsmsg=
        zedlmsg=slm_msg
        "SETMSG MSG(ISRZ001)"
        Signal display_disasm
    End
    If cmd2='/M' Then Do
Trace r
        Parse Upper VAR cmd 3 mx# +1
        dadsn=rexxlib"(SHOWDA$"mx#")"      /* Disassembler matrix    */
        zedsmsg=
        zedlmsg="Now using '"dadsn"' for assembler instructions."
        "SETMSG MSG(ISRZ001)"
        Drop ai. cc. ct. if. il.
        adrs_o=#adrs_o;offs=#offs
#tr=Trace('o')
        Signal Alloc_matrix
    End

    If cmd='/PRINT' Then Do
        Call print_data
        Signal display_disasm
    End
    If Wordpos(cmd,'/NB /NBASE /NEWB /NEWBASE')>0 Then Do
        adrs_o=adrs_o+offs_t;offs_o=0
        cl_c=1;j=cl_c;zscrolln=0
        Signal have_base
    End

    If Index(cmd,"X'")>0 Then Do
        x=new_X_base_offs()
        Signal display_disasm
    End

    If Index(cmd,"D'")>0 Then Do
        x=new_D_base_offs()
        Signal display_disasm
    End

    If Substr(cmd,1,2) = 'DI' Then Do
        If dtype = 'D' Then dtype = 'X'
        Else                dtype = 'D'
        "VPUT (dtype) PROFILE"
    End
    If Substr(cmd,1,2) = 'CH' Then Do
        If ctype = 'C' Then ctype = 'X'
        Else                ctype = 'C'
        "VPUT (ctype) PROFILE"
    End

    If zverb /= '' Then Do
        Select
          When (zverb = 'UP') Then Do
              cl_c = cl_c - zscrolln
              If cl_c < 1 | zscrolla = 'MAX' Then Do
                  cl_c = 1
                  zedlmsg = "Top of data reached.If you want to disassemble",
                          "prior code, reposition base and re-invoke",
                          "disassebmbler."
                  "SETMSG MSG(ISRZ001)"
              End
              zscrolln = 0
          End
          When (zverb = 'DOWN') Then NOP
          Otherwise Do
              zedlmsg = "Invalid command entered."
              "SETMSG MSG(ISRZ001)"
              Signal display_disasm
          End
        End
    End
    Else zscrolln = 0

    If trace = 'Y' Then Trace r
    csrpos = Index(data,u_m)
    Do While csrpos > 0
        u_mrc = eval_change_char()
        If u_mrc /= 0 Then Do
            Select
                When (ch1 = 'I') Then Drop cd.j
                When (ch1 = 'X') Then cd.j = 'X'
                When (ch1 = 'C') Then cd.j = 'C'
                When (ch1 = 'D') Then u_mrc = split_and_clear()
                Otherwise NOP
            End
        End
        If u_mrc = 8 Then Do
            "SETMSG MSG(ISRZ001)"
            Leave
        End
        csrpos = Index(data,u_m,csrpos+1)
    End

    If cmd = 'IALL' Then Do
        Drop cd.
        refresh = 'Y'
    End

    If trace = 'Y' Then Trace Off
    If refresh = 'Y' Then data = disasm()
    Signal display_disasm

disasm:
    j=cl_c
    If cl.j /= 'CL.1' Then Parse VAR cl.j offs ',' .
    code=

    Do While zscrolln > 0
        If cl.j = 'CL.'j Then Do
            If code = '' Then ,
                code = Storage_R(d2x(adrs_o + offs),(zscrolln+5)*6)
            oc = c2x(Substr(code,1,1))
            If ai.oc = 0 Then len =1
            Else Do
                Select
                    When ai.oc = 2 Then Do
                        oc = c2x(Substr(code,1,2))
                        If  il.oc = 'IL.'oc Then len = 2
                        Else                     len = il.oc
                    End
                    When ai.oc = 2S Then Do
                        oc = c2x(Substr(code,1,1))c2x(Substr(code,6,1))
                        If  il.oc = 'IL.'oc Then len = 1
                        Else                     len = 6
                    End
                    Otherwise len = il.oc
                End
            End
            cl.j = offs','len
            code = Substr(code,len+1)
            If Length(code) = 0 Then Do
                zedlmsg = 'Error encountered getting code data.',
                        'Should not',
                        'have happened. Refer to Support.'
                "SETMSG MSG(ISRZ001)"
                Signal ret_caller
            End
        End
        Else Parse VAR cl.j offs ',' len .
        If trace = 'Y' Then Say 'Posi' zscrolln j cl.j d2x(offs)
        offs = offs +len
        j = j +1
        zscrolln = zscrolln -1
    End
    code = Storage_R(d2x(adrs_o+offs),(n1+5)*6)

disasm_build:
    cl_c=j
    data=;offs_t=offs
    Do n1
        oc=c2x(Substr(code,1,1))
        If ai.oc = 0 Then Do
           len = 1
            oci = oc
            oc  = 0
        End
        Else Do
            len=il.oc
            Select
                When ai.oc = 2 Then Do
                    oc = c2x(Substr(code,1,2))
                    If ai.oc = 'AI.'oc Then Do
                        oci = oc ; oc  = 0
                        len = 1  ; il.oc = len
                    End
                    Else Do
                        len = il.oc
                        xinst = c2x(Substr(code,3,len-2))
                    End
                End
                When ai.oc = 2S Then Do
                    oc = c2x(Substr(code,1,1))c2x(Substr(code,6,1))
                    If ai.oc = 'AI.'oc Then Do
                        oci = oc ; oc  = 0
                        len = 1  ; il.oc = len
                    End
                    Else Do
                        len = 6
                        xinst = c2x(Substr(code,2,3))
                    End
                End
                Otherwise xinst = c2x(Substr(code,2,len-1))
            End
        End
        If oc||xinst='40404040' Then Do
            len=4;oci=oc;oc=40E
        End
        If cd.j /= 'CD.'j Then Do
            Parse VAR cl.j ',' len .
            c_i = Substr(code,1,len)
            Select
                When (c_i) = '00000000'x & offs//4 = 0 Then dd = "F'0'"
                When (c_i) = '0000'x     & offs//2 = 0 Then dd = "H'0'"
                When (cd.j = 'X') Then dd = "X'"c2x(c_i)"'"
                Otherwise dd = "C'"Translate(c_i,chex,ohex)"'"
            End
            linex = c5 || Substr(c2x(c_i),1,12) || c3||,
                    "DC    "Substr(dd,1,22)c5"**** Marked as data"
        End
        Else Do
            ai_o=ai.oc
            #tr=Trace('o')
            Interpret 'op=l_'if.oc'(xinst)'
            x=Trace(#tr)
            cc_p=cc.oc
            If op/='Error' Then Do
                Select
                    When ct.oc='Z' Then xx=c_y       /* Set to Yellow */
                    When ct.oc='V' Then xx=c_p       /* Set to Pink   */
                    Otherwise xx=c3
                End
                If Length(ai_o)>5 Then inst=ai_o op
                Else inst=Substr(ai_o,1,5) op
                If Length(inst)>33 Then inst=inst||xx||ds.oc
                Else inst=Substr(inst,1,33)||xx||ds.oc
                linex=xx||Substr(c2x(Substr(code,1,len)),1,12)||xx||inst
            End
        End

        dispo = c1 || Right(d2x(offs),4,'0')
        data  = data || Substr(dispo linex,1,80)
        If cl.j = 'CL.'j Then cl.j = offs','len
        If trace = 'Y' Then Say 'Fill' j cl.j d2x(offs) oc
        code = Substr(code,len+1)
        offs = offs +len
        If Length(code) = 0 Then Leave
        j = j +1
    End
    If j > cl.0 Then cl.0 = j
    Return data

/*--------------------------------------------------------------------*/
/* Return to caller                                                   */
/*--------------------------------------------------------------------*/
ret_caller:
    "VPUT (&DPRF) PROFILE"
    Return adrs_o

/*--------------------------------------------------------------------*/
/* Get storage. If variable 'sysauth.asid' is non blank then we are   */
/* accessing another address space and we need to invoke program      */
/* XMEMSTOR to get the storeage using cross-memory.                   */
/* Paremeters to this routine are:                                    */
/*    1 - Address                                                     */
/*    2 - Length of data to get.                                      */
/*    3 - Flag: 'B' - Bulk get (returns 640 bytes ,16 * 40, screen    */
/*                    regardless of length.                           */
/*              'A' - ASIS, get length.                               */
/*--------------------------------------------------------------------*/
Storage_R: ARG ad1,len,qual
    If sysauth.asid = '' Then Return Storage(ad1,len)
    Else Do
        If qual /= 'B' Then Do
            sysauth.mode = 'R'
            sysauth.leng = d2c(len)
            sysauth.addr = x2c(Right(ad1,8,'0'))
            Address TSO "TSOEXEC CALL "authxmem
            Return xmemstor
        End
        Else Do
            If xmem_d = '' Then Do
                sysauth.mode = 'R'
                sysauth.leng = '0280'X
                sysauth.addr = x2c(Right(ad1,8,'0'))
                Address TSO "TSOEXEC CALL "authxmem
                xmem_d = xmemstor
            End
            If xmem_d /= '' Then Do
                xmem_x = Substr(xmem_d,1,len)
                xmem_d = Substr(xmem_d,len+1)
            End
            Else xmem_x = ''
            Return xmem_x
        End
    End

/*--------------------------------------------------------------------*/
/* Evaluate charecter entered that caused Usermod attribute to be set.*/
/*--------------------------------------------------------------------*/
eval_change_char:
    xtract = Translate(get_cursor_posit(4))
    Parse VAR xtract ch1 +1 2 ch2 +1
    If ¬(ch1 = 'I' | ch1 = 'X' | ch1 = 'C' | ch1 = 'D') Then Return 0
    j = cl_c + rln#
    If ch2 = 'I' | ch2 = 'X' | ch2 = 'C' Then Do
        csrpos = Index(data,u_m,csrpos+1)
        If csrpos = 0 Then Return 8
        xtract = Translate(get_cursor_posit(4))
        Parse VAR xtract ch12 +2
        If ch12 /= ch1||ch2 Then Do
            zedlmsg = "Invalid block '"ch1||ch1"' command entered.",
                    "Following commands ignored."
            Return 8
        End
        k = cl_c + rln#
        Do i=j To k
            If ch1 = 'I' Then Drop cd.i
            Else              cd.i = ch1
        End
        Return 0
    End
    Return ch1

/*--------------------------------------------------------------------*/
/* Instruction is instructed to be split into data and code           */
/*--------------------------------------------------------------------*/
split_and_clear:
    If ch2 = '' Then ch2 = len
    Parse VAR cl.j noffs ',' len .
    If ch2 > len+0 | ch2 = 0 | Datatype(ch2) = 'CHAR' Then Do
        zedlmsg = "Invalid Data definition. The number of bytes must be",
                "> 0 and < instruction length."
        Return 8
    End
    cl.j = noffs ',' ch2
    cd.j = ctype
    Do i=j+1 To cl.0
        Drop cd.i
        Drop cl.i
    End
    cl.0 = j
    zedlmsg = "Instruction split into at byte "ch2"+1. Rest will be",
            "re-interpreted for valid instruction format."
    Return 8

/*--------------------------------------------------------------------*/
/* Home in on the /ZOOMed address                                     */
/*--------------------------------------------------------------------*/
look_at_memory:
    xtract = get_cursor_posit(4)
    peek = Right(d2x(adrs_o+x2d(xtract)),8,'0')
    x = Showstor(peek)
    Return x

/*--------------------------------------------------------------------*/
/* Evaluate cursor positioning and return data for length of request. */
/* Without a length parameter, it will return the position within     */
/* the 'data' variable. 'Error' is returned if the cursor is not in   */
/* the 'data' variable.                                               */
/*--------------------------------------------------------------------*/
get_cursor_posit:
    Arg ret_l
    If cursor /= 'DATA' Then Do
        zedlmsg = "Invalid cursor placement for '/ZOOM' command. Place",
                "in body of display and re-/ZOOM."
        "SETMSG MSG(ISRZ001)"
        Return 'Error'
    End
    rln# = (csrpos % 80)                    /* Relative line number   */
    col# = csrpos - (80*rln# +1)
    If rln# = '' Then xtract = rln#+1','col#
    Else              xtract = Substr(data,(rln#*80)+2,ret_l)
    Return xtract

/*--------------------------------------------------------------------*/
/* Establish new position from HEX offset entry.                      */
/*--------------------------------------------------------------------*/
new_D_base_offs:
    Parse VAR cmd sign "D'" voffs "'" .
    chartype = 'Decimal'
    v_strg = '0123456789'
    noffs = voffs
    x = new_base_offs()
    Return x

/*--------------------------------------------------------------------*/
/* Establish new position from HEX offset entry.                      */
/*--------------------------------------------------------------------*/
new_X_base_offs:
    Parse VAR cmd sign "X'" voffs "'" .
    chartype = 'HEX'
    v_strg = '0123456789ABCDEF'
    noffs = x2d(voffs)
    x = new_base_offs()
    Return x

/*--------------------------------------------------------------------*/
new_base_offs:
    y = Verify(voffs,v_strg)
    If y > 0 Then Do
        char = Substr(voffs,y,1)
        zedlmsg = "Invalid" chartype " character #"y", (" ||,
                char") entered."
        "SETMSG MSG(ISRZ001)"
        Return 8
    End
    cl_c = 1
    Drop cl.
    Drop cd.
    Drop dl.
    cl.0 = 0
    offs = offs_o + noffs
    offs_d = d2x(noffs)
    zscrolln = 0
    Call disasm

    Return 0

/*--------------------------------------------------------------------*/
/* Print dfata to a temporary dataset.                                */
/*--------------------------------------------------------------------*/
print_data:
    cl_c# = cl_c
    data# = data
    n1#   = n1
    chex# = chex
    j     = 1
    If parm1 = '' Then parm1 = n1
    n1    = parm1 +10
    tlen  = 6 * n1
    chex  = ohex                            /* Ensure no change 4 prt */
    #c1=c1;#c2=c2;#c3=c3;#c4=c4;#c5=c5;#c6=c6;#c7=c7;#c8=c8;#c9=c9
    #c0=c0;#c_p=c_p;#c_y=c_y
    c1=' ';c2=' ';c3=' ';c4=' ';c5=' ';c6=' ';c7=' ';c8=' ';c9=' '
    c0=' ';c_p=' ';c_y=' '
    Parse VAR cl.1 offs ',' .
    code = Storage_R(d2x(adrs_o + offs_o),tlen)
    disasm = disasm_build()
    cl_c = cl_c#
    data = data#
    n1   = n1#
    chex = chex#
    Call set_attributes
    Do i=1 To parm1
        Parse VAR disasm line +80 disasm
        Parse VAR line 2 offs +4 20 codeo
        If dtype = 'D' Then offs = x2d(offs)
        Queue 'LAB'Right(offs,5,'0') Strip(codeo)
        If disasm = '' Then Leave
    End
    Queue ''
    dadd1 = 'DZ'Time('s')
    ztempf = hlq0'.SHOWDASM.'dadd1'.TEMP'
    Address TSO "ALLOC F("dadd1") DSN('"ztempf"') NEW CATALOG TRACKS",
            "SPACE(15,15) RECFM(F B) LRECL(80) BLKSIZE(0) DSORG(PS)",
            unitvol
    Address TSO "EXECIO * DISKW "dadd1" (FINIS)"
    Address TSO 'DELSTACK'
    zedlmsg = 'Use your favourite methodology to move this data to a',
            'permanent residence. OR lose it...'
    "SETMSG MSG(ISRZ001)"
    "LMINIT DATAID(DATAID) DDNAME("dadd1")"
    "EDIT DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dadd1")"
    Address TSO "DELETE '"ztempf"'"
    c1=#c1;c2=#c2;c3=#c3;c4=#c4;c5=#c5;c6=#c6;c7=#c7;c8=#c8;c9=#c9
    c0=#c0;c_p=#c_p;c_y=#c_y
    ext_ci=0                                /* Set external call ind  */

    Return 0

/*--------------------------------------------------------------------*/
/* Set attributes                                                     */
/*--------------------------------------------------------------------*/
set_attributes:
    C1='11'X ; C2='12'X ; C3='13'X ; C4='14'X ; C5='15'X ; C6='16'X
    C7='17'X ; C8='18'X ; c9='19'X ; C0='10'X

    Return 0

/*--------------------------------------------------------------------*/
/* Interpret process op-codes                                         */
/*--------------------------------------------------------------------*/
l_40E:                                      /* All spaces             */
    c_i = Substr(code,1,len)
    If ctype = 'X' Then dd = Substr("X'"c2x(c_i)"'",1,22)
    Else dd = Substr("C'"Translate(c_i,chex,ohex)"'",1,22)
    linex = c2 || Substr(c2x(c_i),1,12) || c3||,
            "DC    "dd || c5"<--- Pattern infers data"
    Return 'Error'

l_0E:                                       /* Invalid OP-code        */
    c_i = Substr(code,1,len)
    If Copies(oci,4) = c2x(Substr(code,1,4)) Then Do
        len = 4
        c_i = Substr(code,1,len)
        xtra = c5"<--- Pattern infers data"
    End
    Else xtra = c9"<--- Invalid opcode found"
    Select
        When (c_i) = '00000000'x & offs//4 = 0 Then dd = "F'0'"
        When (c_i) = '0000'x     & offs//2 = 0 Then dd = "H'0'"
        When (ctype = 'X') Then dd = "X'"c2x(c_i)"'"
        Otherwise dd = "C'"Translate(c_i,chex,ohex)"'"
    End
    xtra = "DC    "Substr(dd,1,22)xtra
    linex = c2 || Substr(c2x(Substr(code,1,len)),1,12) || c3 || xtra
    Return 'Error'

l_condbr:
    Arg p1
    Parse VAR p1 r1 +1 x1 +1 b2 +1 d2
    b0 = '0000'
    r1 = x2c(r1)
    If bitand(r1,'08'x) = '08'x then b0 = overlay('1',b0,1)
    If bitand(r1,'04'x) = '04'x then b0 = overlay('1',b0,2)
    If bitand(r1,'02'x) = '02'x then b0 = overlay('1',b0,3)
    If bitand(r1,'01'x) = '01'x then b0 = overlay('1',b0,4)
    mask = "B'"b0"',"
    If len = 2 Then Do
        x1 = 'R'x2d(x1)
        r_v = x1
    End
    Else Do
        If x1 = 0 Then x1 = ''
        Else           x1 = 'R'x2d(x1)
        b2 = ',R'x2d(b2)
        x1b2  = x1 || b2
        If dtype = 'X' Then d2 = "X'"d2"'"
        Else                d2 = x2d(d2)
        r_v = d2"("x1b2")"
    End
cc_x = ''
/*  ai_o = eval_prev_cc_test()                                        */
    Return mask || r_v cc_x

l_ri:
    Arg p1
    Parse VAR p1 r1 +1 op_s +1 i1
    r1 = 'R'x2d(r1)
    If dtype = 'X' Then i1 = "X'"i1"'"
    Else                i1 = x2d(i1)
    ri_r = r1','i1
    If oc = 'A7' Then Do
        oc = oc'_'op_s
        If ai.oc = 'AI.'oc Then Do
            oc  = 'A7' ; ai_o = oc ; len = 1
            ri_r = l_0E()
        End
        Else ai_o = ai.oc
    End
    Return ri_r

L_rs:
    Arg p1
    Parse VAR p1 r1 +1 r3o +1 b2 +1 d2o
    r1 = 'R'x2d(r1)
    r3 = 'R'x2d(r3o)
    If b2 = 0 Then b2 = ''
    Else           b2 = '(R'x2d(b2)')'
    If dtype = 'X' Then d2 = "X'"d2o"'"
    Else                d2 = x2d(d2o)
    Select
        When (cc.oc = '0') Then Return r1','r3','d2 || b2
        When (cc.oc = 'A') Then Return r1','d2
        When (cc.oc = 'Z' | cc.oc = 'C') Then Do
            b0 = '0000'
            r3 = x2c(r3o)
            If bitand(r3,'08'x) = '08'x then b0 = overlay('1',b0,1)
            If bitand(r3,'04'x) = '04'x then b0 = overlay('1',b0,2)
            If bitand(r3,'02'x) = '02'x then b0 = overlay('1',b0,3)
            If bitand(r3,'01'x) = '01'x then b0 = overlay('1',b0,4)
            mask = "B'"b0"'"
            Return r1','mask','d2 || b2
        End
        Otherwise Return r1','r3','d2 || b2
    End

l_rsi:
    If \ext_ci Then,
        linex=c_y||Substr(oc||xinst,1,12)||c_y||,
              "DC    "Substr("X'"oc||xinst"'",1,22)  ||,
              c9"<-("ai.oc") Undeveloped z/OS Inst"
    Else,
        linex=Substr(oc||xinst,1,12)||,
              "DC    "Substr("X'"oc||xinst"'",1,22)  ||,
              c9"<-("ai.oc") Undeveloped z/OS Inst"
/*  Arg p1                                                            */
/*  Parse VAR p1 r1 +1 r3o +1 b2 +1 d2o                               */
/*  r1 = 'R'x2d(r1)                                                   */
/*  r3 = 'R'x2d(r3o)                                                  */
/*  Return r1','r3','i2                                               */
    Return 'Error'

l_rr:
    Arg p1
    Parse VAR p1 r1 +1 r2 +1 .
    r1 = 'R'x2d(r1)
    r2 = 'R'x2d(r2)
    Return r1','r2

l_rre0:        /* No     operands   */
    Return ' '

l_rre1:        /* Single operands   */
    Arg p1
    Parse VAR p1 . +6 r1 +1 r2
    r1 = 'R'x2d(r1)
    r2 = 'R'x2d(r2)
    Return r1

l_rre2:        /* Double operands   */
    Arg p1
    Parse VAR p1 . +6 r1 +1 r2
    r1 = 'R'x2d(r1)
    r2 = 'R'x2d(r2)
    Return r1','r2

l_rrf2m:       /* Double operands + mask(format of RRF) */
    Arg p1
    Parse VAR p1 . +4 m3 +1 7 r1 +1 r2 +1
    r1 = 'R'x2d(r1)
    r2 = 'R'x2d(r2)
    m3 = "B'"eval_mask(m3)"'"
    Return r1','m3','r2

l_rrf3:        /* Tripple operands (format of RRF) */
    Arg p1
    Parse VAR p1 . +4 r1 +1 7 r3 +1 r2 +1
    r1 = 'R'x2d(r1)
    r2 = 'R'x2d(r2)
    r3 = 'R'x2d(r3)
    Return r1','r3','r2

l_rrf3m:       /* Double operands + mask(format of RRF) */
    Arg p1
    Parse VAR p1 . +4 r3 +1 m4 +1 r1 +1 r2 +1
    r1 = 'R'x2d(r1)
    r2 = 'R'x2d(r2)
    r3 = 'R'x2d(r3)
    m4 = "B'"eval_mask(m4)"'"
    Return r1','r3','r2','m4

l_rx:
    Arg p1
    Parse VAR p1 r1 +1 x1 +1 b2 +1 d2
    r1 = 'R'x2d(r1)
    If x1 = 0 Then x1 = ''
    Else           x1 = 'R'x2d(x1)
    If b2 = 0 Then b2 = ''
    Else           b2 = 'R'x2d(b2)
    If x1 = '' | b2 = '' Then sepr  = ''
    Else                      sepr  = ','
    If x1 = '' & b2 = '' Then x1b2  = ''
    Else                      x1b2  = '('x1 || sepr || b2')'
    If dtype = 'X' Then d2 = "X'"d2"'"
    Else                d2 = x2d(d2)
    Return r1','d2 || x1b2

l_rxe:         /* Split op codes                   */
l_rxf:         /* Split op codes                   */
    Arg p1
    Parse VAR p1 r1 +1 x1 +1 b2 +1 d2
    r1 = 'R'x2d(r1)
    If x1 = 0 Then x1 = ''
    Else           x1 = 'R'x2d(x1)
    If b2 = 0 Then b2 = ''
    Else           b2 = 'R'x2d(b2)
    If x1 = '' | b2 = '' Then sepr  = ''
    Else                      sepr  = ','
    If x1 = '' & b2 = '' Then x1b2  = ''
    Else                      x1b2  = '('x1 || sepr || b2')'
    If dtype = 'X' Then d2 = "X'"d2"'"
    Else                d2 = x2d(d2)
    Return r1','d2 || x1b2

l_s:
    Arg p1
    Parse VAR p1 oc2 +2 b2 +1 d2            /* oc2 is 2nd. byte opcode*/
    b2 = 'R'x2d(b2)
    If dtype = 'X' Then d2 = "X'"d2"'"
    Else                d2 = x2d(d2)
    Return d2'('b2')'

l_e:
l_s2:
    Arg p1
    Parse VAR p1 oc2                        /* oc2 is 2nd. byte opcode*/
    Return ''

l_si:
    Arg p1
    Parse VAR p1 i1 +2 b2 +1 d2
    b2 = 'R'x2d(b2)
    If dtype = 'X' Then d2 = "X'"d2"'"
    Else                d2 = x2d(d2)
    If ctype = 'X' Then i1 = "X'"i1"'"
    Else                i1 = "C'"x2c(i1)"'"
    Return d2"("b2"),"i1

l_ss1:
    Arg p1
    Parse VAR p1 l1 +2 b1 +1 d1 +3 b2 +1 d2
    b1 = 'R'x2d(b1)
    b2 = 'R'x2d(b2)
    l1 = x2d(l1) +1
    If dtype = 'X' Then Do
        d1 = "X'"d1"'"
        d2 = "X'"d2"'"
    End
    Else Do
        d1 = x2d(d1)
        d2 = x2d(d2)
    End
    Return d1"("l1","b1"),"d2"("b2")"

l_ss2:
    Arg p1
    Parse VAR p1 l1 +1 l2 +1 b1 +1 d1 +3 b2 +1 d2
    b1 = 'R'x2d(b1)
    b2 = 'R'x2d(b2)
    l1 = x2d(l1) +1
    l2 = x2d(l2) +1
    If dtype = 'X' Then Do
        d1 = "X'"d1"'"
        d2 = "X'"d2"'"
    End
    Else Do
        d1 = x2d(d1)
        d2 = x2d(d2)
    End
    Return d1"("l1","b1"),"d2"("l2","b2")"

l_ss3:
    Arg p1
    Parse VAR p1 r1 +1 r3 +1 b1 +1 d1 +3 b2 +1 d2
    b1 = 'R'x2d(b1)
    b2 = 'R'x2d(b2)
    r1 = 'R'x2d(r1)
    r3 = 'R'x2d(r3)
    If dtype = 'X' Then Do
        d1 = "X'"d1"'"
        d2 = "X'"d2"'"
    End
    Else Do
        d1 = x2d(d1)
        d2 = x2d(d2)
    End
    Return d1"("r1","b1"),"d2"("l2","b2"),"r3

l_ss4:
    Arg p1
    Parse VAR p1 r1 +1 r3 +1 b2 +1 d2 +3 b4 +1 d4
    b2 = 'R'x2d(b2)
    b4 = 'R'x2d(b4)
    r1 = 'R'x2d(r1)
    r3 = 'R'x2d(r3)
    If dtype = 'X' Then Do
        d2 = "X'"d2"'"
        d4 = "X'"d4"'"
    End
    Else Do
        d2 = x2d(d2)
        d4 = x2d(d4)
    End
    Return r1","d2"("b2"),"r3","d4"("b4")"

l_sse:
    Arg p1
    Parse VAR p1 b1 +1 d1 +3 b2 +1 d2 +3 .
    b1 = 'R'x2d(b1)
    b2 = 'R'x2d(b2)
    If dtype = 'X' Then Do
        d1 = "X'"d1"'"
        d2 = "X'"d2"'"
    End
    Else Do
        d1 = x2d(d1)
        d2 = x2d(d2)
    End
    Return d1"("b1"),"d2"("b2")"

l_s0:          /* 'S' no operands   */
    Return ' '

l_svc:
    Parse VAR oc . +2 v1 +1 v2
    If v1 = 0 Then op = v2
    Else           op = v1 || v2
    len = 2
    Return X2d(op)

l_qst:
l_qv:
l_rre:
l_vr:
l_vs:
l_vst:
l_vv:
l_rse:
l_ss:
    Arg p1
    Parse VAR p1 r1 +1 x1 +1 b2 +1 d2
    Return if.oc '- DISASM logic being developed'

/*--------------------------------------------------------------------*/
/* Generate mask bit patern from mask value                           */
/*--------------------------------------------------------------------*/
eval_mask:
    ch = x2c(Arg(1))
    bits = '0000'
    If bitand(ch,'08'x) = '08'x then bits = overlay('1',bits,1)
    If bitand(ch,'04'x) = '04'x then bits = overlay('1',bits,2)
    If bitand(ch,'02'x) = '02'x then bits = overlay('1',bits,3)
    If bitand(ch,'01'x) = '01'x then bits = overlay('1',bits,4)
    Return bits


/*--------------------------------------------------------------------*/
/* Test previous code for setting of subsequent branch                */
/*--------------------------------------------------------------------*/
eval_prev_cc_test:
    cc_x = ''
    ai_i = ai_o
    Select
        When (b0 = '1111') Then Do
            ai_o = 'B'
        End
        When (Substr(code,1,len) = '0700'x) Then Do
            ai_o = 'CNOP'
            r_v  = '2,4'
        End
        When (cc_p /= '0') Then Do
            intp = 'op = l_cc_'cc_p'()'
            Interpret intp
        End
        Otherwise cc_x = "<- Attention required"
    End
    If ai_o = 'CNOP' | ai_o = 'BCR' Then NOP
    Else,
        If cc_x = '' & len = 2 Then ai_o = ai_o'R'
    If ai_i /= ai_o Then mask = ''
    Return ai_o

l_cc_a:
    Select                                  /* Arithmetic             */
        When (b0 = "1000") Then ai_o = 'BZ'               /* Zero     */
        When (b0 = "0100") Then ai_o = 'BM'               /* < Zero   */
        When (b0 = "0010") Then ai_o = 'BP'               /* > Zero   */
        When (b0 = "0001") Then ai_o = 'BO'               /* Overflow */
        When (b0 = "1110") Then ai_o = 'BNP'              /* Not Plus */
        When (b0 = "1011") Then ai_o = 'BNM'              /* Not Minus*/
        When (b0 = "0111") Then ai_o = 'BNZ'              /* Not Zero */
        When (b0 = "1110") Then ai_o = 'BNO'              /* No Over  */
        Otherwise NOP
    End
    Return 0
l_cc_c:                                     /* Compare                */
    Select
        When (b0 = "1000") Then ai_o = 'BE'               /* Equal    */
        When (b0 = "0100") Then ai_o = 'BL'               /* A low    */
        When (b0 = "0010") Then ai_o = 'BH'               /* A High   */
        When (b0 = "1101") Then ai_o = 'BNH'              /* Not High */
        When (b0 = "1011") Then ai_o = 'BNL'              /* Not Low  */
        When (b0 = "0111") Then ai_o = 'BNE'              /* Not Equal*/
        Otherwise NOP
    End
    Return 0
l_cc_f:                                     /* Compare and Form       */
    Select
        When (b0 = "1000") Then ai_o = 'BE'               /* Equal    */
        When (b0 = "0100") Then ai_o = 'BL'               /* A Low    */
        When (b0 = "0010") Then ai_o = 'BH'               /* A High   */
        Otherwise NOP
    End
    Return 0
l_cc_m:                                     /* Test under Mask        */
    Select
        When (b0 = "1000") Then ai_o = 'BZ'               /* All 0    */
        When (b0 = "0100") Then ai_o = 'BM'               /* Mixed    */
        When (b0 = "0001") Then ai_o = 'BO'               /* All 1    */
        When (b0 = "1110") Then ai_o = 'BNO'              /* Not 1    */
        When (b0 = "1101") Then ai_o = 'BNM'              /* Not Mixed*/
        When (b0 = "0111") Then ai_o = 'BNZ'              /* Not 0    */
        Otherwise NOP
    End
    Return 0
l_cc_s:                                     /* Compare And Swap       */
    Select
        When (b0 = "1000") Then ai_o = 'BE'               /* Equal    */
        When (b0 = "0100") Then ai_o = 'BNE'              /* Not equal*/
        Otherwise NOP
    End
    Return 0
l_cc_z:                                     /* Logical operation      */
    Select
        When (b0 = "1000") Then ai_o = 'BZ'               /* Zero     */
        When (b0 = "0100") Then ai_o = 'BNZ'              /* Not Zero */
        When (b0 = "0010") Then ai_o = 'BNZ'              /* Not Zero */
        Otherwise NOP
    End
    Return 0

Help_me:
    "SELECT CMD(%HELPDRVR SHOWDADH 2)";Exit
