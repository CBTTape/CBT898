/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/*  Macro to perform variable substitution in SYSIN statements from   */
/*  SET command.                                                      */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Address ISPEXEC
    im_a_macro = 0
    If parm# /= '' Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1
    im_a_macro = 1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

ini1:
    Parse SOURCE . . xcmd .
    If parm# = '?' Then Signal Help_me
    If im_a_macro  Then Signal Macro_1

Build_JCL:
    Parse VAR parm# parm1 parm2 parm3
    If parm2 = 'AP' | parm3 = 'AP' Then apply = 'MACRO('xcmd')'
    Else                                apply = ''
    dsn=Strip(dsn,,"'")
    day# = 1                                /* Monday (day #1)        */
    xx = $DATEMAN('E-N',,,day#-$DATEMAN('E2N'))
    If Datatype(parm2) = 'NUM' Then Do i=1 To Abs(parm2)
        xx = $DATEMAN('E-N',xx,,-7)
    End
    Parse VAR xx dd '/' mm '/' +3 yy .
    mon.0 = yy || mm || dd
    dsnbu = dsn'.ST'mon.0
    Address TSO
    "NEWSTACK"
    Queue "//"Userid()"B JOB (TPCICS001),'BACKUP CSD DATASET',MSGLEVEL=1,"
    Queue '//        MSGCLASS=X,CLASS=A,NOTIFY=&SYSUID'
    Queue '//*'
    Queue '//*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*'
    Queue '//*                                                               *'
    Queue '//* THIS JOB DELETES/DEFINES A VSAM DATASET.                      *'
    Queue '//*                                                               *'
    Queue '//*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*'
    Queue '//*'
    Queue '//VARS SET BACKUP='dsnbu
    Queue '//VARS SET DFHCSD='dsn
    Queue '//*'
    Queue '//DEFVSAM  EXEC PGM=IDCAMS'
    Queue '//SYSPRINT DD SYSOUT=*'
    Queue '//SYSIN    DD *'
    Queue '     DELETE (&BACKUP) -'
    Queue '           PURGE NOERASE CLUSTER'
    Queue ' '
    Queue '     IF MAXCC < 9 THEN SET MAXCC = 0'
    Queue ' '
    Queue '     DEFINE  CLUSTER( -'
    Queue '             NAME(&BACKUP) -'
    Queue '             MODEL(&DFHCSD) -'
    Queue '                )'
    Queue '/*'
    Queue '//*'
    Queue '//*'
    Queue '//*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*'
    Queue '//*                                                               *'
    Queue '//*   THIS BIT OF JCL WILL REPRO THE MODEL INTO THE NEW           *'
    Queue '//*                                                               *'
    Queue '//*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*'
    Queue '//*'
    Queue '//REPVSAM EXEC PGM=IDCAMS,REGION=5120K'
    Queue '//INPUT    DD DISP=SHR,DSN=&DFHCSD'
    Queue '//OUTPUT   DD DISP=OLD,DSN=&BACKUP'
    Queue '//SYSPRINT DD SYSOUT=*'
    Queue '//SYSUDUMP DD SYSOUT=*'
    Queue '//SYSIN    DD  *'
    Queue ' REPRO INFILE(INPUT) OUTFILE(OUTPUT) -'
    Queue ' REPLACE'
    Queue '/*'
    Queue '//'
    Queue ''
    Address ISPEXEC
    "VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
    "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    gc009 = "Change BACKUP variable on SET parameter to desired",
            "value and use command '"xcmd"' on the command line",
            "to expand JCL. Then submit job or copy using your",
            "favourite copy process."
    "SETMSG MSG(GC009)"
    "EDIT DATAID(&DATAID) &APPLY"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD(ZTEMPF)"
    Address TSO 'DELSTACK'

    Exit

Macro_1:
    "ISREDIT (status) = USER_STATE"
    If parm# = 'ALL' Then Do
        finditf = "' JOB '"
        finditt = "'/' LAST"
    End
    Else Do
        finditf = "'//SYSIN ' 1"
        finditt = "'/' 1"
    End
    Do Forever
        "ISREDIT F "finditf
        If rc /= 0 Then Leave
        "ISREDIT (sil#) = LINENUM .ZCSR"
        "ISREDIT LABEL" sil#+1 "= .LINEF"
        "ISREDIT F "finditt
        If rc /= 0 Then Do
            "ISREDIT (sel#) = LINENUM .ZLAST"
            "ISREDIT LABEL .ZLAST = .LINET"
        End
        Else Do
            "ISREDIT (sel#) = LINENUM .ZCSR"
            "ISREDIT LABEL .ZCSR  = .LINET"
        End
        "ISREDIT CURSOR =" sil#+1 0
        changed = 'N'
        Do Forever
            "ISREDIT F '&' .ZCSR .LINET"
            If rc /= 0 Then Leave
            "ISREDIT (aml#,amc#) = CURSOR"
            "ISREDIT (line) = LINE .ZCSR"
            line = eval_amper(line)
            If changed = 'Y' Then "ISREDIT LINE" aml# "= (line)"
            aml# = aml#+1
            "ISREDIT CURSOR =" aml# 0
        End
        "ISREDIT CURSOR =" sel# 0
    End
    "ISREDIT USER_STATE = (status)"
    Return

/*--------------------------------------------------------------------*/
/* Parse the line replacing all ampersands with variables evaluated   */
/* from instream procs or their overrides or previously encountered   */
/* JCL SET commands.                                                  */
/* If there was no instream proc (evaluated on first entry) it will   */
/* look for a 'var=value' un-commented command and assume it is a     */
/* preocedure override comand.                                        */
/* If neither are present, it will try to evaluate it as an MVS       */
/* defined symbol.                                                    */
/*--------------------------------------------------------------------*/
eval_amper:
    Parse Upper ARG dsn
    changed = 'N'
    v_p = 1
    Do Forever
        v_p = Index(dsn,'&',v_p)
        If v_p = 0 Then Leave
        Parse VAR dsn . '&' var ',' .
        Parse VAR var var .
        If Index(var,')') > 1 Then Parse VAR var var ')' .
        If Index(var,'(') > 1 Then Parse VAR var var '(' .

        l = Index(var,'.')
        If l > 0 Then Do
            xchar = '.'
            var = Substr(var,1,l-1)
        End
        Else xchar = ''
        val = v.var
/*      If val = 'V.'var Then Do                                      */
            "ISREDIT CURSOR =" aml# 0
            rc1 = rc
            Do Forever
               "ISREDIT F '"var"=' PREV .ZFIRST .ZCSR"
               If rc /= 0 Then Do
                   rc1 = rc
                   Return dsn
               End
               "ISREDIT (line) = LINE .ZCSR"
               If Substr(line,1,2) /= '//' Then Iterate
               If Substr(line,3,1) =  '*'  Then Iterate
               If Word(line,2) = 'INCLUDE' Then Iterate
               "ISREDIT (,cn) = CURSOR"
               ch = Substr(line,cn-1,1)
               Select
                   When (ch = ',') Then NOP
                   When (ch = ' ') Then NOP
                   Otherwise Iterate
               End
               Call extract_val
               v.var = val
               Leave
            End
/*      End                                                           */
        If val = 'V.'var Then Do
            val = Mvsvar(Symdef,var)
            v_p = v_p +1
            If val = '' Then Iterate
        End
        v.var = val
        var = '&'var || xchar
        pos = Index(dsn,var)
        dsn = Delstr(dsn,pos,Length(var))
        dsn = Insert(val,dsn,pos-1,Length(val))
        changed = 'Y'
    End

    Return dsn

eval_setcmd:
    Parse VAR line . . line
    If Strip(line) = ',' Then Do
        l_cont = 'Y'
        Return 0
    End
    l_cont = 'N'
    Do Forever
        cn = 1
        Call extract_val
        v.var = val
        If line = '' Then Leave
        If Index(line,'=') = 0 Then Leave
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Extracts the variable name and it's value and leaeve the remaining */
/* line data for subsequent var/value processing.                     */
/* A record is kept if the line has a continuation character.         */
/*--------------------------------------------------------------------*/
extract_val:
    line = Substr(line,cn)
    Parse VAR line var '=' line
    Select
        When (Substr(line,1,1) = "'") Then val = get_quote_delim(line)
        When (Substr(line,1,1) = "(") Then val = get_bracket_delim(line)
        Otherwise Do
            Parse VAR line line .
            If Substr(line,length(line),1) = ',' Then l_cont = 'Y'
            If Substr(line,1,1)=' ' Then line=
            Parse VAR line val ',' line
        End
    End

    Return

/*--------------------------------------------------------------------*/
/* It has been established that the first character of a value is a   */
/* quote and the value is parsed for a valid SINGLE quote terminator. */
/*--------------------------------------------------------------------*/
get_quote_delim:
    l_cont = 'N'
    line = Substr(line,2)
    nq = 1
    Do Forever
        nq = Index(line,"'",nq)
        If nq = 0 Then nq = Length(Strip(line))+1
        Else,
            If Substr(line,nq+1,1) = "'" Then Do
                nq = nq +2
                Iterate
            End
        val   = Substr(line,1,nq-1)
        line = Substr(line,nq+1)
        If line = '' Then Leave
        If Substr(line,length(line),1) = ', ' Then l_cont = 'Y'
        Parse VAR line . ',' line
        Leave
    End

    Return val

/*--------------------------------------------------------------------*/
/* It has been established that the first character of a value is a   */
/* left bracket '(' which at the end of it all requires a matching    */
/* right bracket.  This routine evaluates the data until the logical  */
/* terminating rght bracket is reached.  Note is taken if the line is */
/* continued.                                                         */
/*--------------------------------------------------------------------*/
get_bracket_delim:
    l_cont = 'N'
    rb = ''
    Do j=1 To Length(line)
        ch = Substr(line,j,1)
        If ch = '(' Then Do
            rb = rb || ')'
            Iterate
        End
        If ch = ')' Then Do
            If Length(rb) = 1 Then Leave
            rb = Substr(rb,2)
            Iterate
        End
    End
    val   = Substr(line,1,j)
    line = Substr(line,j+1)
    If line = '' Then Leave
    If Substr(line,length(line),1) = ', ' Then l_cont = 'Y'
    Parse VAR line . ',' line

    Return val

Help_me:
n_st = mark(2)                              /* Mark next line         */
/*

`  Hello &CNAME..

`  "&XCMD." is a macro designed to change variable equates in
   instream data from SET variables that normal JCL susbstitution
   would ignore.

   You must define all your variables on a SET command. For multiple
   SET commands, the latest one will be used.
   If the variable is not found on a set command, it will be
   ignored.  Use this feature in instream data where '&' is used as
   actual actual data with variable names chosen to be different
   from the data.

   Substitution will only be made in all the "//SYSIN DD *" instream
   data. (If instream is not SYSIN, tough.)

   Permissable parameters:
     'ALL'  - Process variable substitution for all of the JCL
              including DD statements etc...

                            -****-

   Remember, a wise man will always check his JCL before submitting
   the job.
                                               Confucious...

*/
n_en = mark(-2)                             /* Mark prev 2 line       */

    Call build_message
    Exit

build_message:
    chgchar = '`'
    syntaxact = "cname = 'there'"
    retlab = error_off_1
    Signal on Syntax Name syntaxerr
    xxx = $getname('A')
    If Index(xxx,'.') > 0 Then,
        Parse VAR xxx sname '.' cname
    ELse,
        Parse VAR xxx sname ',' cname
    cname = Lower(cname,2)
error_off_1:
    Call Off Error

    If im_a_macro Then Do
        "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
        msgt = 'NOTELINE'
    End
    x = nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,1) = chgchar Then Do Forever
            line = ' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        x = nl_h('*'Substr(line,1,70)'*')
    End
    x = nl_h('*'Copies('-',70)'*')
    If im_a_macro Then,
        "ISREDIT CAPS = (caps)"

    Return 0

nl_h:Parse Arg n#
    If im_a_macro Then,
        "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)"
    Else Say n#
    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
syntaxerr:Interpret syntaxact;Signal Value retlab

