/*--------------------------ooo00 REXX 00ooo--------------------------*/
n_s1=mark(1)    /* Mark Start

   SNAP:

   Maro to take a snapshot of the excluded lines and permit
   re-application on a subsequent edit (and reposition to the same
   place in the member).

   Permissable parameters:
     /T{xxx} - Take snap.
     /R{xxx} - Replay the snap.
     /?{xxx} - Show what snapped has been snapped. The format of the
               message will be:
               '>member(top.line.no): s1-e1 s2-e2...sn-en<'
               (The message may be truncated due to ISPF message
               length limits.)
     You may append a 3 character qualifier to the above parameters
     to uniquetise the snap. (Suggest stick to single digit numerics
     and DO NOT use '???'.)

Mark End   */; n_e1=mark(-1)
/*--------------------------------------------------------------------*/
SNAP:snap_ver='1.05'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1
    If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc
    If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me
    Parse Source . . xcmd .;x=$Br(xcmd "??");Return
    Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
    Help_me:Signal Off Syntax;#tr=Trace("o")
    Do i=n_s1 To n_e1;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

No_help_#1:
    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm1,parm2,parm3,parm4,parm5,parm6,parm7
    If Word(parm2,2)/='' Then,
         Parse Upper VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7
    If Wordpos(parm1,'HELP /HELP /H')>0 Then Signal Help_me

    #tr=Trace('O');If parm#/='' Then Call parse_parms;x=Trace(#tr)

    Address ISREDIT;"(status)=USER_STATE"

    If quest Then Do
        Interpret 'snapline = snapl'parm2
        Address ISPEXEC "VGET ("snapline") PROFILE"
        Interpret "snapline =" snapline
        zedlmsg = "Snap set on '>"snapline"<."
        Signal erx1
    End

    "(last)=LINENUM .ZLAST"
    If rplay Then Signal rplay_it
    If \take Then Do
        zedlmsg='Pass a parameter of "/T", "/R" or "/?".'
        Signal erx1
    End
    snapline=;xs=
    #tr=Trace('o')
    Do i=1 To last
        "(xstat)=XSTATUS "i
        If xstat="X" Then Do
            If xs='' Then xs=i;Iterate
        End
        If xs/='' Then Do
            snapline=snapline xs'-'i-1;xs=
        End
    End
    x=Trace(#tr)
    If xs/='' Then Do
        If i=xs +1 Then snapline=snapline xs'-'xs
        Else            snapline=snapline xs'-'last+0
    End
    "(member)=MEMBER";"(snapcrp)=DISPLAY_LINES"
    If snapline/='' Then Do
        snapline=member"("snapcrp+0"):" snapline
        Interpret "snapl"parm2"=snapline"
        snapline="snapl"parm2
        Address ISPEXEC "VPUT ("snapline") PROFILE"
        zedlmsg='Snapshot taken of excluded lines.'
    End
    Else zedlmsg='No excluded lines to snap.'
    Signal erx1

rplay_it:
    Interpret "snapline=snapl"parm2
    Address ISPEXEC "VGET ("snapline") PROFILE"
    Interpret "snapline="snapline
    If snapline='' Then Do
        zedlmsg='No snaplines to restore.'
        Signal erx1
    End

    "RESET"
    Parse VAR snapline omember snapline
    Do While snapline/=''
        Parse VAR snapline xlines snapline
        Parse VAR xlines xs '-' xe
        If xs>last Then Leave
        If xe>=last Then Do;xe=last;snapline=;End
        "LABEL" xs "= .XCLUS"
        If xs/=xe Then Do
            "LABEL" xe "= .XCLUE";xrange='.XCLUS .XCLUE'
        End
        Else xrange='.XCLUS .XCLUS'
        "X ALL" xrange
    End
    zedlmsg='Exclude snap has been restored.'
    Parse VAR omember '(' snapcrp ')' .
    If snapcrp/='' Then Do;"UP MAX";"DOWN &SNAPCRP";End

erx1:Address ISPEXEC "SETMSG MSG(ISRZ001)"
ext1:Exit

/*--------------------------------------------------------------------*/
/* Parse parameters (Expects parameter list in variable "parm#")      */
/*--------------------------------------------------------------------*/
Parse_parms:Parse Upper VAR parm# parm#

    trace=parse_cons('TRACE');If trace='N' Then trace=parse_cons('/TR',,,3)

    take=parse_varb('/T','???')
    If take/='???' Then Do;parm2=take;take=1;End;Else take=0
    rplay=parse_varb('/R','???')
    If rplay/='???' Then Do;parm2=rplay;rplay=1;End;Else rplay=0
    quest=parse_varb('/?','???')
    If quest/='???' Then Do;parm2=quest;quest=1;End;Else quest=0
    Return 0

err01:Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
