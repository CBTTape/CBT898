/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* SP: Shipment Packager (using XMIT)                                 */
/*                                                                    */
/*                                                                    */
/* If a parameter is passed that is not a second and llq of $ALLIN1,  */
/* the dataset will be xmitted into a member of it's llq into         */
/* dataset "syspref.$ALLIN1" (all members). If it is DSORG(PS) then   */
/* it will just be copied.                                            */
/*                                                                    */
/* If the parameter passed is dataset "syspref.$ALLIN1" or spaces,    */
/* each member will be processed and the oportinity provided to       */
/* receive the members. You may enter your own PDS name or let it     */
/* default.                                                           */
/*                                                                    */
/* Enter "NO" to bypass receipt or "Q" to terminate process.          */
/*                                                                    */
/* Positional:                                                        */
/*   dsnlist - List of dataset (unquoted space seperated)             */
/*             If only datest is "syspref.$ALLIN1" then action is     */
/*             extraction rather than build.                          */
/* Keyword:                                                           */
/* /NEW - New $ALLIN1 dataset.                                        */
/* ?    - Help                                                        */
/*                                                                    */
/*                                                                    */
/*--------------------------------------------------------------------*/

    Address ISPEXEC
    Arg dsnin

    Parse SOURCE . . xcmd .
    "VGET (zapplid) ASIS"
    tapplid = 'CSM'
    If zapplid/=tapplid Then Do
        "SELECT CMD(%"xcmd dsnin") NEWAPPL("tapplid")"
        Return 0
    End

    zedsmsg=

    If dsnin='?' Then Signal help_me

    "VGET ($allin1u) PROFILE"
    hlq= Sysvar(Syspref)
    If $allin1u='' Then $allin1u=hlq".$ALLIN1"
    $allin1="'"$allin1u"'"

    #time=Time('s')
    ispplib=hlq'.ISPPLIB.T'#time;Call Create_panels
    If ispplib/='' Then Do
        "LIBDEF ISPPLIB DATASET ID('"ispplib"') UNCOND STACK"
        "VGET (zsysid)"
        linec='}'zsysid' ===>~'
        lineh='¢'Substr(Time(),1,5)
        lineh=lineh Centre(' Shipping Package Log ',74-Length(lineh),'-')'-----'
        dynline='C';dyncol=Length(linec)+1
    End

    x=Listdsi($allin1 "NORECALL")
    If x /= 0 Then Signal add_member
    If dsnin='' | dsnin=$allin1 Then Signal extract_members

add_member:
    #msg=Msg('Off')

    "CONTROL ERRORS RETURN"
    "CONTROL NONDISPL END"
    "DISPLAY PANEL(CSMDSPXM)"
    If rc>8 Then isp_env=0
    Else         isp_env=1

    new=Wordpos('/NEW',Translate(dsnin))
    If new>0 Then Do
        dsnin = Delword(dsnin,new,1)
        Address TSO "DELETE" $allin1
        x=8
    End
    If x/=0 Then Do
        If #0='#0' Then Do
            pr=100;sc=100;db=20;tp='CYL';bz=27920
            Do Forever
                Call panel_msgset_#0
                If display_panel()='/Q' Then Do
                    zedlmsg="Parameter defintion screen abandoned."
                    "SETMSG MSG(ISRZ001)"
                    Exit
                End
                xx=panel_msgUNset_#0();If xx=0 Then Leave
            End
        End
        Address TSO "ALLOC DSN("$allin1") CATALOG NEW UNIT(SYSALLDA)",
           tp "SPACE("pr","sc") DIR("db") DSORG(PO) RECFM(F B)",
           "LRECL(80) BLKSIZE("bz")"
        If rc /=0 Then Do
            zedlmsg="Daqtaset" $allin1 "could not be created."
            "SETMSG MSG(ISRZ001)"
            Exit
        End
        "VPUT ($allin1u) PROFILE"
    End
    xxx=dsnin
    Parse Value Date('e') with dd '/' mm '/' yy
    tempf="'"hlq".$A"||yy||mm||dd".$A"Time('s')"'"
    Do alpha=0 While xxx /= ''
        Parse VAR xxx dsnin xxx
        dsnin=Strip(dsnin,,"'");dsno=dsnin
        member=Substr(dsnin,Lastpos('.',dsnin)+1)
        Do j=1 To 20;Interpret 'LINE'j'=';End
        #1=;#2=;#3=;#4=;resp=
        Do beta=0 While resp=''
          If #1='' Then Call panel_msgset_#1
          If isp_env Then Do
              xx=Listdsi("'"dsnin"' DIRECTORY")
              If sysdsorg='PO' Then Do
                  If #2='' Then Call panel_msgset_#2
                  resp=display_panel()
                  If resp='/S'Then Call invoke_csmdsnxm
              End
          End
          Else resp=display_panel()
          resp=V_resp_format(resp,'/ /R /Q /N /NO ?')
          If resp='?' Then Do
              Address TSO xcmd '?'
              resp=
          End
        End
        If resp='/Q' Then Do;xxx=;Iterate;End
        If resp='/N' | resp='/NO' Then Iterate
        If (resp/='/' & resp/='/R') Then member=resp
        Do While Sysdsn("'"$allin1u"("member")'")='OK' & resp /= '/R'
            Call panel_msgset_#4
            resp=display_panel()
            If resp='/Q' | resp='/N' | resp='/NO' Then Leave
            If resp='?' Then Address TSO xcmd '?'
            Else Do
                xx=Vername(resp)
                 If xx='OK' Then member=resp
                 Else Do
                     zedlmsg='Member name' Subword(xx,3)
                     "SETMSG MSG(ISRZ001)"
                 End
            End
        End
        If resp='/Q' Then Do;xxx=;Iterate;End
        If resp='/N' | resp='/NO' Then Iterate
        Address TSO "FREE DSN("$allin1")"
        If Sysdsorg = 'PO' Then Do
            Address TSO "ALLOC DSN("tempf") NEW REU",
                "CATALOG UNIT(SYSALLDA)",
                "CYLINDER SPACE(100,100) DSORG(PS) RECFM(F B)",
                "LRECL(80) BLKSIZE(3200)"
            Parse VAR $allin1 "'" #$allin1 "'"
            Address TSO "XMIT A.A DA('"dsnin"')",
                "OUTDSN("tempf") NONOTIFY NOLOG"
            dsnin=Strip(tempf,,"'")
        End
        "LMINIT DATAID(dataid1) DATASET(&$ALLIN1)"
        "LMINIT DATAID(dataid2) DATASET('&DSNIN')"
        "LMCOPY FROMID(&DATAID2)",
               "TODATAID(&DATAID1) TOMEM("member") REPLACE"
        c_rc=rc
        "LMFREE DATAID(&DATAID1)"
        "LMFREE DATAID(&DATAID2)"
        Address TSO "FREE DSN("tempf")"
        Address TSO "DELETE" tempf
        If c_rc=0 Then xx=update_index()
    End
    xx=update_index('C')
    "CONTROL DISPLAY REFRESH"
    x=Listdsi($allin1 "DIRECTORY")
    If sysmembers>0 Then "BROWSE DATASET(&$ALLIN1)"

exi1:
    If ispplib/='' Then Do
        "LIBDEF ISPPLIB"
        Address TSO "DELETE '"ispplib"'"
    End
    xx=Msg(#msg)

    Exit

extract_members:
    "CONTROL ERRORS RETURN"
    "CONTROL NONDISPL END";"DISPLAY PANEL(RECVP)"
    If rc>8 Then isp_env=0;Else isp_env=1

Isp_env=0
    Parse VAR $allin1 "'" $allin1 "'"
    member=
    "LMINIT DATAID(dataid1) DATASET('&$ALLIN1')"
    "LMOPEN DATAID(&DATAID1) OPTION(INPUT)"
    imem='$$$INDEX'
    Do While rc=0
        "LMMLIST DATAID(&DATAID1) OPTION(LIST) MEMBER(MEMBER) "||,
                "STATS(NO)"
        If rc/=0 Then Leave
        If Index(imem,member)>0 Then Iterate
        rc=receive_prompt()
    End
    "LMMLIST DATAID(&DATAID1) OPTION(FREE)"
    "LMCLOSE DATAID(&DATAID1)"
    "LMFREE DATAID(&DATAID1)"
    Return 0

receive_prompt:
    If isp_env Then Do
        Address TSO "%RECV '"$allin1"("Strip(member)")'"
        Return 0
    End
    Address TSO "DELSTACK";Address TSO "NEWSTACK"
    Queue 'End'
    xx=Prompt('Off')
    xx=Outtrap(lista.)
    Address TSO "RECEIVE INDA('"$allin1"("Strip(member)")') PARM(END)"
    xx=Outtrap(off)
    xx=Prompt('On')
    If lista.0=0 Then Return 4
    msg=;memb=;
    Do j=1 To 10;Interpret 'LINE'j'=';End
    l#=19
    l#=x_l('{Dataset names should be fully qualified and quoted.')
    l#=x_l('{Use¢END{PF key to process next member. Enter¢/Q{to',
           'abandon processing.')
    #5=;l#=1
    imsg='INMR906A INMR042I INMR043I IKJ56286I IKJ56284I'
    Do k=1 to lista.0
       linha=lista.k
       If Index(imsg,Word(linha,1))=0 Then l#=x_l('}'SubWord(linha,2))
       Select
         When word(linha,1)='INMR901I' Then odsn="'"Word(linha,3)"'"
         When Word(linha,1)='INMR000I' Then Do
            zedlmsg=Subword(linha,2);"SETMSG MSG(ISRZ001)";Return 4
         End
         When Word(linha,1)='INMR003I' Then Do
            zedlmsg=Subword(linha,2);"SETMSG MSG(ISRZ001)";Return 4
         End
         Otherwise Nop
      End
    End
    Address TSO "DELSTACK"
    l#=x_l(' ')
    l#=x_l('{Processing dataset¢'odsn'{from member(¢'Strip(member)'{):')
    #l#=l#
prompt_4_dsn:
    l#=#l#
    l#=x_l('{Enter:')
    l#=x_l(' ¢/{ to create asis or enter a dataset name to change to.')
    l#=x_l(' ¢/N{to bypass receiving it.')
    l#=x_l(' ¢/Q{to Quit processing.')
    l#=x_l(' ¢/R{to replace existing dataset.')
    resp=display_panel('/N')
    If resp='/NO' | resp='/N' Then Return 0
    If resp='/Q' Then Return 8

    resp=V_resp_format(resp,'/ /Q')
    If resp='' Then Signal prompt_4_dsn
    If (resp/='/' & resp/='/R') Then ndsn=resp
    Else ndsn=odsn
    Do While Sysdsn(ndsn)='OK' & resp /= '/R'
        If #5/='' Then l#=#5;Call panel_msgset_#5
        resp=display_panel('/N')
        If resp='/Q' Then Return 8
        If resp='/N' | resp='/NO' Then Return 0
        If resp='?' Then Address TSO xcmd '?'
        Else Do
            xx=Vername(resp)
            If xx='OK' Then ndsn=resp
            Else Do
                zedlmsg='Dataset name' Subword(xx,3)
                "SETMSG MSG(ISRZ001)"
            End
        End
    End
    Address TSO "DELSTACK";Address TSO "NEWSTACK"
    xx=Prompt('On')
    If resp='/R' Then Queue "DSN("ndsn") SHR"
    Else Queue "DSN("ndsn") NEW"
    xx=Outtrap(lista.)
Say Address TSO "RECEIVE INDA('"$allin1"("Strip(member)")')"
    xx=Outtrap('Off')
    If rc=0 Then Do
        zedlmsg='Dataset received into 'ndsn'.';"SETMSG MSG(ISRZ001)"
    End
    Address TSO "DELSTACK"
    Return 0

V_resp_format: Arg resp,v_resp
    If resp='' Then Return resp
    If Wordpos(resp,v_resp)>0 Then Return resp
    If Vername(resp)='OK' Then Return resp
    zedlmsg='Member('resp') is not a valid member name.'
    "SETMSG MSG(ISRZ001)"
    Return ''

Vername: Arg xx,act
    If xx='' Then Return "Missing dataset name."
    If Substr(xx,1,1)="'" Then Parse VAR xx "'" xx "'"
    Parse VAR xx yyy '(' memb ')' .
    Do While yyy /= ''
        Parse VAR yyy yy '.' yyy
        If Length(yy) > 8 Then Return 'Error: Qualifier "'yy'" > 8 bytes.'
        x=Verify(Substr(yy,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$')
        If x>0 Then Return 'Error: Qualifier "'yy'" must start with a',
                           'national character.'
        x=Verify(Substr(yy,2),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789')
        If x>0 Then Return 'Error: Qualifier "'yy'" must only contain',
                           'national and numeric characters.'
    End
    If memb /= '' Then Do
        yy=memb
        x=Verify(Substr(yy,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$')
        If x>0 Then Return 'Error: Member name "'yy'" must start with a',
                           'national character.'
        x=Verify(Substr(yy,2),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789')
        If x>0 Then Return 'Error: Member name "'yy'" must only contain',
                           'national and numeric characters.'
    End
    Return 'OK'

update_index:
    If line.0 = 'LINE.0' Then Do
        If Arg(1)='C' Then Return 4
        dd='$I'Time('S')
        Address TSO "ALLOC DD("dd") DS('"$allin1u"($$$INDEX)') SHR REU"
        If Sysdsn("'"$allin1u"($$$INDEX)')")='OK' Then Do
            Address TSO "EXECIO * DISKR" dd "(STEM line. FINIS"
            st=1
        End
        Else Do
            line.0=0;st=0
        End
    End
    If Arg(1)='C' Then Do
        Address TSO "EXECIO * DISKW" dd "(STEM line. FINIS"
        Address TSO "FREE DD("dd")"
        Return 0
    End
    Do i=st To line.0;If Word(line.i,1)=member Then Leave;End
    If Word(line.i,1)/=member Then line.0=i
    ut=Substr(sysunits,1,1)
    If Datatype(sysadirblk)/='CHAR' Then db=','sysadirblk
    Else db=',PDSE'
    Select
        When uc='C' Then ut='CYL'
        When uc='T' Then ut='TRK'
        Otherwise        ut='BLK'
    End
    line.i=Substr(member,1,8) dsno
    xx="SPACE("ut",("sysprimary","sysseconds || db")) MEMBERS("sysmembers")"
    ll=72-Length(line.i xx)
    If ll>0 Then line.i=Substr(line.i,1,ll+Length(line.i)) xx
    Else         line.i=line.i xx
    Return 0

help_me:
    Say ' '
    Say ' '
    Say 'Help not yet available....'
    Say ' '
    Say ' '

    Exit

Create_panels:
    #panel1=1;#panels=1;mpref='SHIPPAK'
    #adr1=Address();Address TSO;#msg1=Msg('Off')
    "DELETE '"ispplib"'"
    dd='SP'#time
    "ALLOC DA('"ispplib"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(1)",
       "RECFM(F B) REU"
    "FREE  DA('"ispplib"')"

    Do #i=#panel1 To #panels
        member=mpref||#i;Interpret "Call make_mem_"#i
        "NEWSTACK"
        #tr1=Trace('o')
        Do #i=n_st To n_en;Queue Sourceline(#i);End
        If Verify(#tr1,'NO')>0 Then x=Trace('r')
        Queue ''
        "ALLOC F("dd") DA('"ispplib"("member")') SHR REU"
        "EXECIO * DISKW "dd" (FINIS";"FREE F("dd")"
    End

    Address(#adr1);x=Msg(#msg1)
    Return 0

/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/* Variable substitution is identified by '`' in clolumn 1. If column */
/* 1 is required the use '`+' followed by the line to be doctored.    */
/*--------------------------------------------------------------------*/
    "NEWSTACK"

    Do #i=n_st To n_en;Queue Sourceline(#i);End
    Queue ''

    "ALLOC F("dd") DA('"ispplib"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE F("dd")"
    Return 0

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(2)
/*
)ATTR
/**********************************************************************/
/*                                                                    */
/* DYNAMIC PANEL usage.                                               */
/* ~~~~~~~~~~~~~~~~~~~~                                               */
/*                                                                    */
/* NOTE - The default setting of the cursor on the traditional "ZCMD" */
/*        field should be CURSOR(LINEC) CSRPOS(15). Use this format   */
/*        to invoke this panel. Ie.                                   */
/*          SET &DYNLINE = LINEC                                      */
/*          SET &DYNCOL  = 15                                         */
/*          ISPEXEC SELECT PANEL(DYNAMICP) ,                          */
/*                  CURSOR(&DYNLINE) CSRPOS(&DYNCOL)                  */
/*                                                                    */
/*      - The default value for ZCMD can be extracted from &LINEC as  */
/*        follows:                                                    */
/*        . CLIST -    &SUBSTR(15:&LENGTH(&STR(&LINEC)),&STR(&LINEC)) */
/*        . REXX  -    SUBSTR(linec,15,LENGTH(linec)-14)              */
/*                                                                    */
/*      - To capture the data entered you will need to substring the  */
/*        the appripriate line from the start of the input field(s)   */
/*        to their end.                                               */
/*                                                                    */
/* This is a dynamic panel that may be built from a CLIST, REXX or    */
/* program. The following variables are used:                         */
/*   &LINEH - Headline                                                */
/*   &LINEC - Command line                                            */
/*   &LINEM - Message line                                            */
/*   &LINE1 - Data lines                                              */
/*     to                                                             */
/*   &LINE20                                                          */
/*   &DYNHELP - Name of the help panel to be associated with display  */
/*              (Default is 'HNOHELP' - no help panel).               */
/*                                                                    */
/* There is one defined input attribute of '~' which has all the      */
/* characteristics of an input field.                                 */
/* There are 3 output attributes being '{', '}' and '¢'. These        */
/* attbutes' characteristics may be set using the following variable  */
/* table with defaults in brackets:                                   */
/*                                                                    */
/*          +------+-------+--------------+----------------+          */
/*          | ATTR | TYPE  | INTENS       | COLOR          |          */
/*          +------+-------+--------------+----------------+          */
/*          |   ~  | (in ) | &IINT (high) | &ICOL (red)    |          */
/*          |   {  | (out) | &OINT1(low)  | &OCOL1(blue)   |          */
/*          |   }  | (out) | &OINT2(high) | &OCOL2(white)  |          */
/*          |   ¢  | (out) | &OINT3(high) | &OCOL3(yellow) |          */
/*          +------+-------+--------------+----------------+          */
/* You may not use the above attribute characters as text literals in */
/* the dynamic variables.                                             */
/*                                                                    */
/* If variables LINEH, LINEC or LINEM or the attribute variables have */
/* not been set by the dialogue, they will be initialed in the panel  */
/*                                                                    */
/* The cursor may be positioned by using variable '&DYNLINE' for the  */
/* line value (ie. H, C, M or 1 to 20) and '&DYNCOL' for column       */
/* (range 1 - 80). Default will be the first empty input field (other */
/* than the command line) as will be any erroneous cursor positioning */
/* parameters.                                                        */
/*                                                                    */
/**********************************************************************/
  ` AREA(DYNAMIC)
  ~ TYPE(DATAIN)  INTENS(&IINT) COLOR(&ICOL) CAPS(ON) HILITE(USCORE)
  { TYPE(DATAOUT) INTENS(&OINT1) COLOR(&OCOL1) CAPS(OFF) SKIP(ON)
  } TYPE(DATAOUT) INTENS(&OINT2) COLOR(&OCOL2) CAPS(OFF) SKIP(ON)
  ¢ TYPE(DATAOUT) INTENS(&OINT3) COLOR(&OCOL3) CAPS(OFF) SKIP(ON)
)BODY EXPAND(\\)
`LINEH                                                                         `
`LINEC                                                                         `
`LINEM                                                                         `
`LINE1                                                                         `
`LINE2                                                                         `
`LINE3                                                                         `
`LINE4                                                                         `
`LINE5                                                                         `
`LINE6                                                                         `
`LINE7                                                                         `
`LINE8                                                                         `
`LINE9                                                                         `
`LINE10                                                                        `
`LINE11                                                                        `
`LINE12                                                                        `
`LINE13                                                                        `
`LINE14                                                                        `
`LINE15                                                                        `
`LINE16                                                                        `
`LINE17                                                                        `
`LINE18                                                                        `
`LINE19                                                                        `
`LINE20                                                                        `
)INIT
/*                                                                    */
/*Test and set defaults                                               */
/*                                                                    */
  IF (&DYNHELP = '')  .HELP = HNOHELP
  ELSE                .HELP = &DYNHELP
  IF (&OINT1 = &Z) &OINT1 = 'LOW'
  IF (&OCOL1 = &Z) &OCOL1 = 'BLUE'
  IF (&OINT2 = &Z) &OINT2 = 'HIGH'
  IF (&OCOL2 = &Z) &OCOL2 = 'WHITE'
  IF (&OINT3 = &Z) &OINT3 = 'HIGH'
  IF (&OCOL3 = &Z) &OCOL3 = 'YELLOW'

  IF (&LINEH = &Z) &LINEH = '¢&ZTIME ------------------------ DYNAMIC P+
               ANEL ------------------------------------'
  IF (&LINEC = &Z) &LINEC = '}&ZSYSID ===>~'
  IF (&LINEM = &Z)  &LINEM = '}'
/*IF (&LINEM = '}') &LINEC = '}'                                      */
  IF (&IINT = &Z)  &IINT  = 'HIGH'
  IF (&ICOL = &Z)  &ICOL  = 'RED'
  IF (&DYNLINE ¬= &Z)
      &CURSOR = 'LINE&DYNLINE'
      .CURSOR = &CURSOR
      IF (&DYNCOL  ¬= &Z) .CSRPOS = &DYNCOL
  ELSE
      .CURSOR = LINEC
      .CSRPOS = 15

)PROC
)END
*/
    n_en = mark(-2);Return 0

panel_msgset_#0:
    line1=' '
    line2="{Dataset}===>~"Substr($allin1,1,46)"}<="
    line3="{Space:"
    line4="{ Type  }===>~"Substr(tp,1,1)"}<={       ¢C{(YL) or ¢T{(RK)"
    line5="{ Prim  }===>~"pr  "}<={     Numeric"
    line6="{ Second}===>~"sc   "}<={     Numeric"
    line7="{ Dirb  }===>~"db "}<={      Numeric"
    line8="{Blksize}===>~"bz   "}<={   Numeric (27920 max)              "
    line20='Use¢END{PF key to abandon processing.'
    Return 0

panel_msgUNset_#0:
    $allin1=Strip(Substr(line2,15,46))
    tp=Strip(Substr(line4,15,1))
    pr=Strip(Substr(line5,15,4))
    sc=Strip(Substr(line6,15,4))
    db=Strip(Substr(line7,15,3))
    bz=Strip(Substr(line8,15,5))
    dyncol=15
    If Sysdsn($allin1)='OK' Then Do
        dynline=2
        zedlmsg='Dataset already defined.';"SETMSG MSG(ISRZ001)"
        Return 4
    End
    If tp='C' Then tp='CYL'
    Else If tp='T' Then tp='TRACKS'
        Else Do
            dynline=4
            zedlmsg='Invalid type.';"SETMSG MSG(ISRZ001)"
            Return 4
        End
    If ¬Datatype(pr,'W') | pr<1 Then Do
        dynline=5
        zedlmsg='Must be numeric and >0.';"SETMSG MSG(ISRZ001)"
        Return 4
    End
    If ¬Datatype(sc,'W') | sc<1 Then Do
        dynline=6
        zedlmsg='Must be numeric and >0.';"SETMSG MSG(ISRZ001)"
        Return 4
    End
    If ¬Datatype(db,'W') | db<1 Then Do
        dynline=7
        zedlmsg='Must be numeric and >0.';"SETMSG MSG(ISRZ001)"
        Return 4
    End
    If ¬Datatype(bz,'W') | bz<1 | bz>27920 Then Do
        dynline=8
        zedlmsg=
           'Must be numeric and in the range 1-27920.';"SETMSG MSG(ISRZ001)"
        Return 4
    End
    Return 0

panel_msgset_#1:
    l#=20
    l#=x_l('Use¢END{PF key to abandon processing.')
    l#=1;#1=l#
    l#=x_l(' ')
    l#=x_l("{For¢'"dsnin"'{enter:                Into->"$allin1)
    l#=x_l('¢  /  {- to create member(¢'member'{) or enter a member',
        'name to change to.')
    l#=x_l('¢  /N {- to bypass member creation.')
    l#=x_l('¢  /Q {- to Quit processing altogether (or$END{PF key).')
    If Sysdsn("'"$allin1u"("member")'")='OK' Then,
        l#=x_l('¢  /R {- to replace member as it already exists.')
    l#=x_l('¢  ?  {- for help documentation.')
    Return 0

panel_msgset_#2:
    #2=l#
    l#=x_l('{This is a PDS with¢'sysmembers'{members.{Enter:')
    l#=x_l('¢  /S {- to enter a member selection XMIT. You will be',
        'presented with a dialog')
    l#=x_l('{        to include selected members only.')
    l#=x_l('{        (May not be available at/for all sites/users.)')
    Return 0

panel_msgset_#3:
    #3=l#
    l#=x_l(' ')
    If rc=0 Then Do
        "VGET (memblist) SHARED"
        dsnin=Strip(tempf,,"'")
        dsnin=tempf
        dsno=dsnin'(subset)'
        l#=x_l('{Input dataset has been changed to flat file with',
               'extacts of:')
        l#=x_l('         ¢'tempf)
        Parse VAR memblist '(' xx ')'
        xx='{Members:¢'xx
        If Length(xx)>80 Then xx=Substr(xx,1,79)'+'
        l#=x_l(xx)
    End
    Else l#=x_l('You have abandoned member selection.')
    Return 0

panel_msgset_#4:
    Call panel_msgset_#1
    #4=l#
    l#=x_l(' ')
    l#=x_l("Member(¢"member"{) already exists.")
    l#=x_l('Enter¢/R{to replace member or any other value for a name change.')
    Return 0

panel_msgset_#5:
    #5=l#
    l#=x_l(' ')
    l#=x_l("{Dataset¢"ndsn"{already exists.")
    l#=x_l('{Enter¢/R{to replace it or any other value for a name change.')
    Return 0

display_panel:
    If Arg(1)='' Then rvf3='/Q';Else rvf3=Arg(1)
    linec='}'zsysid' ===>~'
    "DISPLAY PANEL(SHIPPAK1)"
    If rc/=0 Then Return rvf3;Else Return panel_get_zcmd()

invoke_csmdsnxm:
    #member=member;member='*';jdsname=dsnin
    xcinvoke='A A' tempf
    "VPUT (JDSNAME MEMBER XCINVOKE) SHARED"
    "ISPEXEC SELECT CMD(%CSMDSNXM)"
    If #3='' Then Call panel_msgset_#3
    resp=
    member=#member
    Return 0

Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
panel_get_zcmd: Return Strip(Substr(linec,dyncol))
x_l:Interpret 'LINE'l#'=Arg(1)';Return l#+1
