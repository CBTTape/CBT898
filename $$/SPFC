/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* SPFC: SPF Commands.                                                */
/*                                                                    */
/* Allow definition of user "commands" that can be invoked in ISPF    */
/*                                                                    */
/* Parameters:                                                        */
/*  (positional)                                                      */
/*     dsname   - Name of dataset where your copy of ISPFCMDS are to  */
/*                reside. This is the user's personal ISPF table      */
/*                dataset.                                            */
/*  (keywords)                                                        */
/*     /A= | A=applid                                                 */
/*              - Applid of commands to append to cmdtblCMDS table    */
/*     /C= | C=cmdtbl                                                 */
/*              - Command table name to be processed (Defult 'ISP')   */
/*     /I= | I={dataset{(member)} | member}                           */
/*              - Import a previously exported table from a dataset   */
/*                (member).  Default is 'tablib(EXTCMDS)' or just     */
/*                member "EXTCMDS".                                   */
/*     /X= | X={dataset{(member)} | member}                           */
/*              - export the table to a dataset (member).  Default is */
/*                'tablib(EXTCMDS)'.  This data will be used in a     */
/*                subsequent import ("/I=").                          */
/*     /List    - Present command in a 1 line browse session.         */
/*     /TRace   - Turn trace on (for debuging).                       */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     SPFC     - Driver                                              */
/*     SPFC$    o Command identifier                                  */
/*     $WORDAT  o Routine to split up long text into word alligned    */
/*                fixed portions. (Required for options "X=" and/or   */
/*                "I=".)                                              */
/*                                                                    */
/*   Panels:                                                          */
/*     SPFCP    - Table display (in-stream).                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
ms=1;me=mark(-2)
SPFC:spcf_ver='2.04'
    Arg parm#;Address ISPEXEC;'CONTROL ERRORS RETURN';ima_macro=0
    If parm#/='' Then Signal byp1
    'ISREDIT MACRO (parm#)';If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse SOURCE . . xcmd .
    Parse Upper VAR parm# parm1 parm2 parm3
    If Wordpos(parm1,'HELP ? /? /H')>0 Then Do
        Signal On Syntax Name TSO_help
        x=BR('%'xcmd '??');Exit
    End
    If parm1="??" Then Signal TSO_help

    "VGET (spfcmac) SHARED";If spfcmac='Y' Then Signal macro_1
    "VGET (ZSYSID)";
    userid=Userid();llq='$';tablib=;tabid='ISP';f1st_time=1
    spref=Sysvar(Syspref);If spref/=Userid() Then spref=spref'.'Userid()
    dsnspfc=spref'.$$$TEMP.SPFC#DSN'
    hlq=$alkhlqp()
    If Index(Translate(' 'parm#),' C=')>0 Then Do
        Parse Value Translate(parm#) With p1 'C=' #tabid p2
        If #tabid/='' Then tabid=#tabid
        parm#=Space(p1 p2)
    End
    Else If Index(Translate(' 'parm#),' /C=')>0 Then Do
        Parse Value Translate(parm#) With p1 '/C=' #tabid p2
        If #tabid/='' Then tabid=#tabid
        parm#=Space(p1 p2)
    End
    cmdtab=tabid||'CMDS';gc009='Copy of "'cmdtab'" command table'
    panel='SPFCP'

/*--------------------------------------------------------------------*/
/*                                                                    */
/* To update you must invoke with 'EIDT' parm                         */
/*                                                                    */
/*--------------------------------------------------------------------*/
editit:
    msg#=Msg('Off')
    rc=Listdsi('ISPTABL FILE')
    If rc=0 Then tablib=sysdsname
    Else Do
        If tablib='' Then tablib=llq
        If Substr(tablib,1,1)/="'" Then tablib=hlq"."tablib
        Else tablib=Substr(tablib,2,Length(tablib)-1)
        If Sysdsn("'"tablib"'")/='OK' Then Do
            gc009="ISPTABL not found. Command terminated.",
                  "Pre-allocate one using the REAL command and try"     ,
                  "again."
            Signal erx1
        End
    End

    #cmdtab=cmdtab
    #tr=Trace('o');Call parse_parms;y=Trace(#tr)
    If d_only Then Do
        cmdtab=tabid'CMDS'
        gc009='Copy of "'cmdtab'" command table'
        Signal p200
    End

/*  x=Msg('On')                                                       */
    Address TSO "ALLOC FI(CMDTAB) DA('"tablib"') SHR REU"
    x=Msg(msg#)

/*--------------------------------------------------------------------*/
/*                                                                    */
/* See If member TSTCMDS already exists?                              */
/*                                                                    */
/*--------------------------------------------------------------------*/
    "TBOPEN TSTCMDS LIBRARY(CMDTAB)"
    If rc=0 Then Signal p025
    If rc=8 Then Signal p020
    Address TSO "FREE FI(CMDTAB)"
    gc009="Command table is already being updated - try later."
    Signal erx1
/*--------------------------------------------------------------------*/
/*                                                                    */
/* Doesn't exist so create it                                         */
/*                                                                    */
/*--------------------------------------------------------------------*/
P020:
    "TBCREATE TSTCMDS LIBRARY(CMDTAB)",
         "NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC)"
    "TBTOP &CMDTAB"
    #tr=Trace('O')
    Do While rc=0
        "TBSKIP &CMDTAB";If rc/=0 Then Leave
        "TBADD TSTCMDS"
        If #tr='R' Then Say rc zctverb
    End
    x=Trace(#tr)

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Add in any new entries in real ISPF table                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
p025:
    If concat/='' Then Do
        "TBOPEN &CONCAT.CMDS"
        #tr=Trace('O')
        Do While rc=0
            "TBSKIP &CONCAT.CMDS";If rc/=0 Then Leave
            "TBADD TSTCMDS"
            If Verify(#tr,'NO')>0 Then Say zctact
        End
        x=Trace(#tr)
    End

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Close the table now, but first sort it                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
    "TBSORT TSTCMDS FIELDS(ZCTVERB C,A)"

    If listit Then Do
        Address TSO 'NEWSTACK'
        "TBTOP TSTCMDS"
        Queue 'The following was extracted from "'cmdtab'".'
        Queue ' '
        Do while rc=0
            "TBSKIP TSTCMDS"
            If rc/=0 Then Leave
            Queue Substr(ZCTVERB,1,8) ZCTTRUNC ZCTDESC
        End
        Queue ''
        "TBEND TSTCMDS";"VGET ZTEMPF"
        dd='NC'Time('s')
        Address TSO "ALLOC DD("dd") DSN('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW" dd "(FINIS"
        "LMINIT DATAID(DATAID) DDNAME("dd")"
        "BROWSE DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD("dd",CMDTAB)"
        Exit
    End

    If extract/='?' Then Do
        Address TSO 'NEWSTACK'
        "TBTOP TSTCMDS"
        tl=70                               /* Text length            */
        mg=2                                /* Margin (lead/trail) sp */
        itxt='The following was extracted from "'cmdtab'".~Delete or',
             'modify as required and use the "I=.." command to',
             'import into same/new table.~~',
             'Note that exact duplicate entries (on action and/or',
             'description) will be ignored. If a match is made on the',
             'VERB, the original will be replaced by the new entry.~~',
             'NOTE: "*" or space in column 1 will be treated as a',
             'comment and the line ignored.'

        x=q_c(Copies('*',tl))
        Do While itxt/=''
            txt=$wordat(itxt,tl-mg,'L')
            itxt=$wordat(itxt,tl-mg,'T')
            If Index(txt,'~')>0 Then Do
                Parse VAR txt txt '~' x;itxt=x itxt
            End
            x=q_c(' 'txt' ')
        End
        x=q_c(Copies('*',tl))
        Do while rc=0
            "TBSKIP TSTCMDS"
            If rc/=0 Then Leave
            Queue Substr(ZCTVERB,1,8) ZCTTRUNC ZCTACT
            Queue '          'ZCTDESC
        End
        "TBEND TSTCMDS"
        Queue ''
        dd='NC'Time('s')
        Address TSO "ALLOC DD("dd") DSN('"extract"') SHR REU"
        Address TSO "EXECIO * DISKW" dd "(FINIS"
        Address TSO 'DELSTACK'
        m#=Msg('Off')
        Address TSO "FREE DD("dd",CMDTAB)"
        spfcmac='Y';"VPUT (spfcmac) SHARED"
        "EDIT DATASET('&EXTRACT') MACRO("xcmd")"
        Exit
    End

    If import/='?' Then Do
        dd='NC'Time('s')
        Address TSO "ALLOC DD("dd") DSN('"import"') SHR REU"
        If rc/=0 Then Do
            gc009="Cannot allocate import file  "tablib"("import")'",
                  "RC="rc". Please correct and try again."
            Signal erx1
        End
        Address TSO "EXECIO * DISKR" dd "(STEM line. FINIS"
        Address TSO "FREE DD("dd")"
        Do i=1 To line.0
            If Substr(line.i,1,1)='*' | Strip(line.i)='' Then Iterate
            Parse VAR line.i zctverb zcttrunc act
            i=i+1;desc=Strip(line.i)
            "TBSCAN TSTCMDS ARGLIST(zctverb)"
            add=rc
            If Strip(act)/=zctact | Strip(desc)/=zctdesc Then add=4
            If add>0 Then Do
                If rc=0 Then "TBDELETE TSTCMDS"
                zctact=Strip(act);zctdesc=Strip(desc)
                "TBMOD TSTCMDS"
            End
        End
    End
    "TBCLOSE TSTCMDS LIBRARY(CMDTAB)"

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Invoke the SPF program to update table                             */
/*                                                                    */
/*--------------------------------------------------------------------*/
    gc009=gc009 "from '"tablib"'."
    "SETMSG MSG(GC009)"
    Address TSO "ALLOC FI(ISPTABL) DA('"tablib"') SHR REU"
    "SELECT PGM(ISPUCM) PARM(TST)"
    If rc/=8 Then Do
        Address TSO "FREE FI(CMDTAB)"
        Exit
    End

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Rename the tst version TSTCMDS as the ISPF command table &CMDTAB   */
/*                                                                    */
/*--------------------------------------------------------------------*/
    x=MSG(Off)
    Address TSO "DEL '"tablib"("cmdtab")' FILE(CMDTAB)"
    Address TSO "ALTER '"tablib"(TSTCMDS)' FILE(CMDTAB)",
        "NEWNAME('"tablib"("cmdtab")')"
    Address TSO "FREE FI(CMDTAB)"
    gc009="The new commands will be activated the next time you",
          "enter ISPF."
    Signal erx1

/*--------------------------------------------------------------------*/
/*                                                                    */
/* Come here If we are only looking (default unless 'EDIT' parm used) */
/*                                                                    */
/*--------------------------------------------------------------------*/
p200:
    If \d_only Then gc009=gc009 "From '"tablib"'"
    gc009=gc009'.'
    "SETMSG MSG(GC009)"
    "TBCREATE TEMPCMDS REPLACE NOWRITE ",
         "NAMES(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC)"
    "TBTOP &CMDTAB"
    #tr=Trace('O')
    Do While rc=0
       "TBSKIP &CMDTAB";If rc/=0 Then Leave
       "TBADD TEMPCMDS"
        If #tr='R' Then Say rc zctverb
    End
    x=Trace(#tr)
    "TBSORT TEMPCMDS FIELDS(ZCTVERB C,A)";"TBTOP TEMPCMDS"
    If f1st_time Then x=Build_panel()
    Do while rc=0
        zcmd=
        "TBDISPL TEMPCMDS PANEL(&PANEL)"
        If rc/=0 Then Leave
        Parse var zcmd zcmd zcmdr

        If zcmd='L' | zcmd='F' Then Do
            zctverb=zcmdr'*'
            "TBSCAN TEMPCMDS ARGLIST(ZCTVERB) CONDLIST(EQ)"
            If rc/=0 Then Do
                "TBSCAN TEMPCMDS ARGLIST(ZCTVERB) CONDLIST(GE)"
                "TBSKIP TEMPCMDS NUMBER(-1)"
            End
        End
    End
    "TBEND TEMPCMDS"
    Exit

erx1: "SETMSG MSG(GC009)"
exi1:
    If \f1st_time Then Do
        "LIBDEF ISPPLIB"
        Address TSO "DELETE '"dsnspfc"'"
    End
    Exit

q_c:Parse Arg x_x;Queue '*'Substr(x_x,1,70)'*';Return 0

Build_panel:
    f1st_time=0
    #msg=Msg('Off')
    Address TSO
    "DELETE '"dsnspfc"'"
    "ALLOC DA('"dsnspfc"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0)" unitvol "DIR(1)",
       "RECFM(F B) REU"
    "FREE DA('"dsnspfc"')"
    members='SPFCP'
    dd='TT'Time('s')
    Do While members/=''
        Parse VAR members memb members
        #tr=Trace('o')
        Interpret "Call make_mem_"memb
        "NEWSTACK"
        Do i=n_st To n_en;Queue Sourceline(i);End;Queue ''
        x=Trace(#tr)
        "ALLOC F("dd") DA('"dsnspfc"("memb")') SHR REU"
        "EXECIO * DISKW "dd" (FINIS"
        If rc/=0 Then Do
            Say "Error outputing to datadset '"dsnspfc"("memb")', rc="rc"."
            Exit
        End
    End
    Address
    "LIBDEF ISPPLIB DATASET ID('&dsnspfc') STACK"
    x=Msg(#msg)
    Return 0

/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_SPFCP:n_st=mark(2)
/*
)ATTR
 ¢ TYPE(OUTPUT) INTENS(LOW)
 @ TYPE(OUTPUT) INTENS(HIGH)
)BODY
%COMMAND TABLE BROWSE ----------------------------------------------------------
%COMMAND ===>_ZCMD                                            %SCROLL ===>_AMT +
%
+
%     VERB      T  ACTION
+                     DESCRIPTION
+
)MODEL
     @Z        ¢Z ¢Z                                                           +
                     ¢Z                                                        +
)INIT
  IF (&ZHTOP = ISR00003)
    .HELP = ISR39000
  IF (&ZHTOP ¬= ISR00003)
    .HELP = ISP39000
  &SCIN = 'PAGE'
  .ZVARS = '(ZCTVERB ZCTTRUNC ZCTACT ZCTDESC)'
)PROC
)END
*/
    n_en=mark(-2);Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    #tr=parse_cons('TRACE','R',#tr)
    If #tr='O' Then #tr=parse_cons('/TR','R',#tr,3)

    listit=parse_cons('/L',1,0,2)

    extract=parse_varb('X=',?)
    If extract='?' Then extract=parse_varb('/X=',?)
    If extract/='?' Then extract=build_name(extract)

    import=parse_varb('I=',?)
    If import='?' Then import=parse_varb('/I=',?)
    If import/='?' Then Do
        import=build_name(import)
        If Sysdsn("'"import"'")='MEMBER NOT FOUND' Then Do
            zedlmsg="'"import"' member not found, correct and re-execute."
            Signal erx1
        End
    End

    concat=parse_varb('/A=','?')
    If concat='?' Then concat=parse_varb('A=','?')
    If concat='?' Then concat=

    If Index(parm#,'C=')>0 Then d_only=1;Else d_only=0
    tabid=parse_varb('/C=','?')
    If tabid='?' Then tabid=parse_varb('C=',tabid)

    Parse VAR parm# xx .
    If Datatype(xx)='NUM' Then Do
        If xx>last Then xx=last
        zfrange=xx;zlrange=xx
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Build eXport Import member from parameter passed.                  */
/*--------------------------------------------------------------------*/
build_name:Arg xi_parm
    If xi_parm='' Then xi_parm="EXTCMDS"
    If Substr(xi_parm,1,1)="'" Then hlqx=;hlqx=spref'.'
    xi_parm=Strip(xi_parm,,"'")
    Parse VAR xi_parm dsne '(' xi_parm ')';xi_parm=Strip(xi_parm)
    If Sysdsn("'"hlqx||dsne"'")/='OK' Then Do
        If xi_parm/='' Then Do
            zedlmsg="'"dsne"' not found, correct and re-execute."
            Signal erx1
        End
        If Length(dsne)>8 Then Do
            zedlmsg='Invalid member name "'dsne'", correct and re-execute.'
            Signal erx1
        End
        xi_parm=tablib'('dsne')'
    End
    Else Do
        If xi_parm/='' Then Do
            If Length(xi_parm)>8 Then Do
                zedlmsg='Invalid member name "'xi_parm'", correct and',
                        're-execute.'
                Signal erx1
            End
            x=LIstdsi("'"hlqx||dsne"'")
            If sysdsorg/='PO' Then Do
                zedlmsg='Cannot provide a member name "'xi_parm'" for',
                         "sequential dataset '"hlqx||dsne"'."
                Signal erx1
            End
            xi_parm=hlqx||dsne'('xi_parm')'
        End
        Else xi_parm=hlqx||dsne
    End
    Return xi_parm

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

TSO_Help:Signal Off Syntax;#tr=Trace('o')
    Do i=ms To me;x=n_b('   'Substr(Sourceline(i),3,68));End
    "CONTROL DISPLAY REFRESH";Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
n_b:xx=Arg(1);Say Arg(1);Return 0

macro_1:
    spfcmac='N';"VPUT (spfcmac) SHARED"
    Address ISREDIT
    Signal On Syntax Name mac_exit
    str=SPFC$()
    "RESET";"X ALL";"F '*' 1 ALL"
    Do While str/=''
        Parse VAR str xx str
        "F '"xx" ' 1 FIRST"
        If rc=0 Then Do;"(lin#)=LINENUM .ZCSR";"XSTATUS" lin#+1"=NX";End
        Else Do
            xx=Substr(xx,1,8) 'not defined';"LINE_BEFORE .ZFIRST=NOTELINE (xx)"
        End
    End
mac_exit:
    Exit
