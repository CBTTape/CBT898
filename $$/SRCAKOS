/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* SRCMCC: SRC Mail Code Conversion.                                  */
/*                                                                    */
/* While this routine is designed to rename terminals from an input   */
/* matrix (deletes non-hits and all old named terminal), it can also  */
/* be used to do multiple selects using a matrix of 'oldterm/oldterm' */
/* with all non-hits being deleted.  You will have to manually delete */
/* the DELETE lines for the 'oldterm' automaticall generated and      */
/* placed at the bottom.                                              */
/*                                                                    */
/* Pass a parameter of "/D" to delete non-changed terminals to contain*/
/* a subset of changed terminals in that group.                       */
/*                                                                    */
/* 1. Create a CSD listing:                                           */
/* 2. View the CSD listing and hit it with edit macro SRCFTG. After   */
/*    following its instructions export into a member called          */
/*    "$GROUPS".                                                      */
/* 3. Edit generic the above $GROUPS and hit it with macro "SRCBEX"   */
/*    to generate "EXPORT" commands as a member for each group in     */
/*    dataset "syspref.$.SRC'                                         */
/* 4. Edit generic JCL 'syspref.$.SRC($JC7@GG)' and hit it with macro */
/*    "SRCXJCL"                                                       */
/* to build JCL to                                                    */
/*    generate EXTRACT statements for each group and place in         */
/*    another dataset under group's names. The dataset is             */
/*    'syspref.$.SRC.DEFINES' and must be pre-defined.                */
/*    Submit the job.                                                 */
/* 5. Hit each member generated in step 4 with this routine follow    */
/*    all the prompts and suggestions and export the data and cancel  */
/*    session.                                                        */
/* 6. Feed the exported data into a DFHCSDUP job to update the CSD.   */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

    terms='7Z0/GB,7Z1/GB,7/G'
    terms='XJ1/MF1'
    terms='Z/B'
    ifile=;Parse Upper Var parm# parm#
    If parm#/='' Then Do
        ifile="'"Sysvar(Syspref)".$.SRC("Word(parm#,1)")'"
        If sysdsn(ifile)/='OK' Then ifile=
    End

ini1:
    If Wordpos('/D',Translate(parm#))>0 Then Do
        del_nc=1;parm#=Delword(parm#,Wordpos('/D',Translate(parm#)),1)
    End;Else del_nc=0
    noteline='NOTELINE'                     /* Blank for datalines    */
    noteline=                               /* Blank for datalines    */
    Address ISREDIT;"(status)=USER_STATE";"(caps)=CAPS";"CAPS OFF";"RESET"
    "C DEFINE DELETE 1 ALL";"X ALL"
    terms=Translate(Set_terms(),' ',',')
    find='TERMINAL('
    j=0;k=0;to_list=;to.=;sum.=0
    #terms=terms
    Do While terms/=''
        Parse VAR terms term terms
        Parse var term term '/' nterm '/' maxr
        If term='.' Then Iterate
        Parse Value term nterm maxr With term nterm maxr
        lt=Length(term);ln=Length(nterm);o_nterm=nterm
        If lt/=ln Then Do
            If ln<lt Then nterm=Left(nterm,lt,'0')
            Else Do
                x=nl1('* Cannot automatically process increase in length.')
                x=nl1("* '"term"' could suffer loss converting to '"nterm"'",
                      'and will need to be')
                x=nl1('* addressed manually.')
                "FIND '"find||term"' NEXT"
                Signal exi1
            End
        End
        "CURSOR=1 0"
        Do Forever
            "SEEK '"find||term"' 7 25 NEXT";If rc/=0 Then Leave
            "LABEL .ZCSR=.LINEF"
            "SEEK '"find"' 7 25 NEXT"
            If rc/=0 Then "(linet)=LINENUM .ZLAST"
            Else Do
                "(linet)=LINENUM .ZCSR";linet=linet-1
            End
            If nterm/='' Then Do
                "(line)=LINE .LINEF"
                Parse VAR line 'TERMINAL(' oterm ')' r1 '(' group ')' r2
                trest=r1'('group')'r2
                rterm=$Cstring(oterm,term,nterm)
                ch1=Substr(rterm,1,1)
                Parse VAR group g11 +4 g12 +1 g13
                Select
                    When g11='AREA' Then ngroup=g11 || ch1 || g13
                    Otherwise ngroup=group
                End
                linex1='DEFINE' 'TERMINAL('rterm')' r1'('ngroup')'r2
                If Wordpos(o_nterm,to_list)=0 Then to_list=to_list o_nterm
                If Wordpos(term,to.o_nterm)=0 Then Do
                    to.o_nterm=to.o_nterm term
                    sum.o_nterm=sum.o_nterm+1
                End
                "(lin#)=LINENUM .LINEF";"(line)=LINE" lin#+1
                Interpret "Parse VAR line start '"oterm"' nrest"
                If nrest='' Then Do
"CURSOR="linet 0;Iterate
                    Parse VAR line start 'NETNAME(L10' xx ')' nrest
                    If xx='' Then Iterate
                    Parse VAR xx +3 yy +1 zz
                    If Wordpos(zz,'A C')>0 Then Nop
                    Else If Wordpos(yy,'A C')>0 Then zz=yy
                    rterm=rterm||zz
                    start=start'NETNAME(L10'
                    nrest=')'nrest
                    k=k+1;linec.k='* L10'xx 'L10'rterm
                End
                "LINE .LINEF=(linex1)"
                "RESET EXCLUDED .LINEF" linet
                linex2=start || rterm || nrest
                "LINE" lin#+1"=(linex2)"
                Parse VAR linex2 . 'NETNAME(' lu ')'
                j=j+1;lined.j='DELETE' 'TERMINAL('oterm')' trest
                line.j='*  'Left(oterm,4) 'replaced by',
                        Left(rterm,4) '(new LU -' Left(lu,8)')'
                "LABEL" linet"=.LINET"
                "SEEK 'REMOTENAME(' .LINEF .LINET FIRST"
                If rc=0 Then Do
                    "(line)=LINE .ZCSR"
                    Parse VAR line rstart 'REMOTENAME(' . ')' rrest
                    linex3=rstart'REMOTENAME('rterm')' rrest
                    "LINE .ZCSR=(linex3)"
                End
                "SEEK 'PRINTER(' .LINEF .LINET FIRST"
                If rc=0 Then Do
                    "(line)=LINE .ZCSR"
                    Parse VAR line pstart 'PRINTER(' pp ')' prest
                    np=Substr(rterm,1,Length(pp))
                    linex3=pstart'PRINTER('np')' prest
                    "LINE .ZCSR=(linex3)"
                End
            End
            "CURSOR="linet 0
        End
    End
    #tr=Trace('o')
/*  "FIND 'DELETE' 1 ALL"                                             */
    If del_nc Then "FIND 'DELETE' 1 ALL"
    "DEL ALL X"

    "LABEL 1=.BLINE"
    If k>0 Then Do
        x=nl2('* The following corrections to "standards" for',
              "LU's have been made:")
        x=nl2('* OldName  NewName')
        x=nl2('* -------- --------')
        Do i=1 To k;x=nl2(linec.i);End
        x=nl2('* ')
        x=nl2(Copies('*',72))
    End
    x=nl2('* NOTE - The following merges have occured, check for # of entries:')
    x=nl2('* New  Cnt Old Groups                                ')
    x=nl2('* ---- --- ------------------------------------------')
    Do While to_list/=''
        Parse VAR to_list gp to_list
        x=nl2('*' Left(gp,4) Left(sum.gp,3) Space(to.gp))
    End

    x=Report_target()

    x=nl1('* Pass the following summary before the DELETE/DEFINES onto the')
    x=nl1('* Network group please.')
    x=nl1('* ')
    x=nl1(Copies('*',72))
    x=nl1('* ')
    x=nl1('* NOTE - The excluded lines are redundant parameters for converted')
    x=nl1('*        DEFINE statements to DELETE.')
    x=nl1('*        Issue command if you want the deletions processed,')
    x=nl1('*          "DELETE ALL X"')
    x=nl1('* ')
    x=nl1('*        If you DO NOT want them deleted, issue commands,')
    x=nl1('*          "X DELETE 1 ALL"')
    x=nl1('*          "DELETE ALL X"')
    x=nl1('*')
    x=nl1('*        You can always "flip" it to evaluate excluded lines.')
    x=nl1('*        Watch out for excluding "legitimate" DELETE commands for')
    x=nl1('*        old terminal names.')
    x=nl1('* ')
    x=nl1(Copies('*',72))
    x=nl2(Copies('*',72))
    Do i=1 to j;x=nl2(line.i);End
    x=nll(Copies('*',72))
    x=nll('* Deleting "renamed" old definitions.')
    x=nll(Copies('*',72))
    Do i=1 to j;x=nll(lined.i);End
    x=nl1('* ')

exi1:
    "CAPS=(caps)";"USER_STATE=(status)"
    Exit

nl:Parse Arg n#;"LINE_BEFORE .LINEF=NOTELINE (n#)";Return 0
nl1:Parse Arg n#;"LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
nl2:Parse Arg n#;"LINE_BEFORE .BLINE="noteline" (n#)";Return 0
nll:Parse Arg n#;"LINE_AFTER .ZLAST="noteline" (n#)";Return 0

Report_target:
    find='DEFINE TERMINAL('
    x=nl2('* NOTE - The following targets have not been met:')
    x=nl2('* New  Tgt Hits')
    x=nl2('* ---- --- ----')
    terms=#terms
    Do While terms/=''
        Parse VAR terms term terms
        Parse var term term '/' nterm '/' maxr
        Parse Value term nterm maxr With term nterm maxr
        If \Datatype(maxr,'w') Then Iterate
        lt=Length(term);ln=Length(nterm);o_nterm=nterm
        If ln<lt Then nterm=Left(nterm,lt,'0')
        "SEEK '"find||nterm"' ALL"
        "(hits)=SEEK_COUNTS"
        x=nl2('*' Left(nterm,4) Right(maxr,3) Right(hits+0,4))
    End
    Return 0

Set_terms:
    If ifile='' Then Return terms
    dd='EI'Time('s')
    Address TSO "ALLOC F("dd") DSN("ifile") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    linex=
    Do i=1 to linei.0
        If linei.i='' | Substr(linei.i,1,1)='*' Then Iterate
        If Words(linei.i)>1 & Index(linei.i,'/')=0 Then,
            linei.i=Space(linei.i,,'/')
        linex=linex linei.i
    End
    Return Space(linex)

