/*--------------------------ooo00 REXX 00ooo--------------------------*/
    n_st=mark(1)                            /* Mark Start             */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* SRCIT: SRC Identify Terminals.                                     */
/*                                                                    */
/* This routine processes the output from a DFHCSDUP group EXTRACT    */
/* command.  The following will be summarised in the same order:      */
/*  1. List of all the non-terminal definitions.  (Generally          */
/*     TYPETERM definitions.)                                         */
/*     The DEFINE statements will be retained, however, commented out */
/*     so it can be exported and built into another group if required.*/
/*     A delete statement for each non-terminal entry will be         */
/*     generated after all the defines.                               */
/*  2. List of all terminals that do NOT have the termid prefixed by  */
/*     'L10' in the netname.  This will be in the form of a delete    */
/*     statement with it's associated netname, typeterm and           */
/*     autinstname.  These later 3 fields will be provided as         */
/*     comment(s) for evaluation purposes.                            */
/*  3. List of all terminals that follow the naming standards.        */
/*                                                                    */
/* Parameters:                                                        */
/*  /A - Apply listings as data lines.  Normally the display would be */
/*       as NOTELINEs above the defines. This parameter will make the */
/*       NOTELINEs datalines and delete the original defines.  That   */
/*       way the resultant data can be exported, customised and       */
/*       directly input to a DFHCSDUP job.  You will need to manually */
/*       provide any delete group from list commands, however, null   */
/*       groups will be deleted and can be readily identified from    */
/*       a CSD LIST output which reports them as                      */
/*       'GROUP DOES NOT EXIST!' messages.                            */
/*                                                                    */
/*                             *****                                  */
/*--------------------------------------------------------------------*/
    n_en=mark(-1)                           /* Mark End               */
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    where="LINE_BEFORE .ZFIRST"
    Address ISREDIT;"(status)=USER_STATE";"(caps)=CAPS";"CAPS OFF"
    "RESET";"(member)=MEMBER"
    If Word(parm#,1)='?' Then Signal Help_me

ini1:
    Parse Upper Var parm# parm#
    If Wordpos('/A',Translate(parm#))>0 Then Do
        apply=1;parm#=Delword(parm#,Wordpos('/A',Translate(parm#)),1)
    End;Else apply=0
    noteline='NOTELINE'                     /* Blank for datalines    */
    "X ALL";"CURSOR=1 0";etype_l=;l_.=;la#=0;le#=0;lf#=0;lx#=0;lr#=0
    If apply Then Do
        "LABEL .ZFIRST=.STLINE";noteline=
        where="LINE_AFTER .ZLAST"
    End
    Do Forever
        "SEEK 'DEFINE ' 1 NEXT";If rc/=0 Then Leave
        "(line)=LINE .ZCSR";"(lin#df)=LINENUM .ZCSR"
        Parse VAR line . etype '(' entry ')' group
        If etype='TERMINAL' Then Do
            "SEEK 'TYPETERM(' NEXT"
            "(liney)=LINE .ZCSR"
            Parse VAR liney 'AUTINSTNAME(' ain ')'
            Parse VAR liney 'TYPETERM(' typet ')'
            "SEEK 'NETNAME(' NEXT"
            "(linen)=LINE .ZCSR";Parse VAR linen 'NETNAME(' netn ')' .
            Parse VAR netn ch3 +3 .
            If ch3/='L10' Then Do
                x=nlr('DELETE' Subword(line,2))
                x=nlr('*      NETNAME('netn') TYPETERM('typet')',
                      'AUTINSTNAME('ain')')
            End
            Else Do
                If Index(' 'netn,' L10'entry)=0 Then Do
                    x=nle('DELETE' Subword(line,2))
                    x=nle('*      NETNAME('netn') TYPETERM('typet')',
                          'AUTINSTNAME('ain')')
                End
                Else x=nla('DELETE TERMINAL('entry')')
            End
        End
        Else Do
            old=Wordpos(etype,etype_l)
            If old=0 Then etype_l=etype_l etype
            l_.etype=l_.etype entry
            "CURSOR="lin#df+1 0;"SEEK 'DEFINE ' 1 NEXT"
            If rc/=0 Then "(last)=LINENUM .ZLAST"
            Else Do;"(last)=LINENUM .ZCSR";last=last-1;End
            x=nlx('DELETE' Subword(line,2))
            x=nlf(line)
            Do i=lin#df+1 To last
                "(line)=LINE" i;x=nlf(line)
            End
            "CURSOR="lin#df+1 0
        End
    End
    If apply Then "DELETE ALL X"
    x=nl1('*'Copies('=',70)'*')
    x=nl1('* The following were extracted from GROUP(' member '):-')
    x=nl1('*'Copies('=',70)'*')
    x=nl1('*ELETE GROUP('member') REMOVE')
    x=nl1('*')
    x=nl1('* If the above is used delete the rest of the lines after',
          'the')
    x=nl1('* appropriate non-terminal process.')
    x=nl1('*')
    x=nl1('*'Copies('=',70)'*')
    If etype_l/='' Then Do
        x=nl1('* The following non-TERMINAL entries are also in group:')
        Do While etype_l/=''
            Parse VAR etype_l entry etype_l
            Do While l_.entry/=''
                Parse VAR l_.entry val l_.entry
                x=nl1('*  'entry'('val')')
            End
            x=nl1('*')
        End
        x=nl1(Copies('*',72))
        x=nl1('*')
        x=nl1('* The following DEFINEs can be exported and uncommented:')
        x=nl1('*')
        Do i=1 to lf#
            If Word(linef.i,1)='DEFINE' Then Do
                Parse VAR linef.i 2 p1 'GROUP(' . ')' p2
                x=nl1('*'p1 'GROUP(........)'p2)
            End
            Else x=nl1(Overlay('*',linef.i,1))
        End
        x=nl1('*')
        x=nl1(Copies('*',72))
        x=nl1('* Cleanup the non-TERMINAL entries:')
        x=nl1('*')
        Do i=1 to lx#;x=nl1(linex.i);End
    End
    Else Do
        x=nl1('* There are no non-TERMINAL definitions in this group.',
              'If you are happy')
        x=nl1('* with deleting all terminals (including the',
              'questionalble ones), the')
        x=nl1('* group will be deleted and therefore must be removed',
              'from all lists.')
    End
    If lr#>0 Then Do
      x=nl1('*')
      x=nl1('*'Copies('-',70)'*')
      x=nl1('* The following TERMINALs'' netname do NOT start with "L10".')
      x=nl1('* Please check manually and action accordingly:')
      x=nl1('*')
      Do i=1 to lr#;x=nl1(liner.i);End
      x=nl1('*')
    End
    If le#>0 Then Do
      x=nl1('*')
      x=nl1('*'Copies('-',70)'*')
      x=nl1('* The following TERMINALs'' netname starts with "L10" but does',
            'not')
      x=nl1('* contain  the full termid in it (dodgy):')
      x=nl1('*')
      Do i=1 to le#;x=nl1(linee.i);End
      x=nl1('*')
    End
    If la#>0 Then Do
        x=nl1('*'Copies('-',70)'*')
        x=nl1('* The following TERMINALs have the "L10" prefix and will',
              'be "deleted"')
        x=nl1('* from the group:')
        x=nl1('*')
        Do i=1 to la#;x=nl1(linea.i);End
    End

exi1:
    "CAPS=(caps)";"USER_STATE=(status)"
    Exit

nla:Parse Arg n#;la#=la#+1;linea.la#=n#;Return 0
nle:Parse Arg n#;le#=le#+1;linee.le#=n#;Return 0
nlf:Parse Arg n#;lf#=lf#+1;linef.lf#=n#;Return 0
nlr:Parse Arg n#;lr#=lr#+1;liner.lr#=n#;Return 0
nlx:Parse Arg n#;lx#=lx#+1;linex.lx#=n#;Return 0
nl1:Parse Arg n#;where "="noteline" (n#)";Return 0
Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff

Help_me:
    Do i=n_st To n_en;x=nl1(Sourceline(i));End
    Signal exi1
