/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* SUMVOL: SUMarise VOLumes                                           */
/*                                                                    */
/* Sumarise all the volumes used by the JCL into a list at the end.   */
/* If used on SOE standard CICS startup using generic procs, use the  */
/* following set of commands on a view of the startup,                */
/*   C3                           <- Create 3rd. party usage.         */
/*   SYMSUB /A /L                 <- Symbol substitutution applied    */
/*                                   and scanned last to first.       */
/*   C3I                          <- Optional routine to evaluate     */
/*                                   recursive INCLUDE statements     */
/*                                   that were not catered for in the */
/*                                   original 'C3' routine.           */
/*   SUMVOL                       <- This routine.                    */
/* Requires routine $EVALAMP if there are variables used in the JCL,  */
/* or use SYMSUB to further kick start variable substitution which    */
/* has a built-in $EVALAMP.                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
sumvol:ver='1.04'
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Signal on Syntax Name error_off_$EVALAMP
    access_$evalamp=0
    x=$evalamp()
    access_$evalamp=1
error_off_$EVALAMP:
    Signal off Syntax

    Address ISREDIT;"(status)=USER_STATE"
    "SCAN=OFF";"(caps)=CAPS";"CAPS=OFF"
    "CURSOR=1 0";dsn_list=;vol_list=
    x=nl('Volume Dataset',1);x=nl('------' Copies('-',40),1);symsub_1st=0
    Parse SOURCE . . xcmd .
    Do Forever
        "SEEK 'DSN='"
        If rc/=0 Then Do
            "CURSOR=" lin#+1 0
            "SEEK 'DSNAME='";If rc/=0 Then Leave
        End
        "(line)=LINE .ZCSR";"(lin#)=LINENUM .ZCSR"
        Parse Var line ch1 +1 1 ch3 +3 .
        If ch3='//*' Then Iterate;If ch1=' ' Then Iterate
        Parse VAR line 'DSN=' dsn ',' .
        If dsn='' Then Parse VAR line 'DSNAME=' dsn ',' .
        Parse VAR dsn dsn .;dsn=Strip(dsn,,"'")
        If Index(dsn,'&')>0 & access_$evalamp Then Do
            dsn=$evalamp(dsn)
            "CURSOR=" lin#+1 0
        End
        If Wordpos(dsn,dsn_list 'DUMMY NULLFILE')>0 Then Iterate
        dsn_list=dsn_list dsn
        xx=Listdsi("'"dsn"'")
        If xx>5 | sysreason=9 | sysreason=25 Then Do
            sysvolume='??????';symsub_1st=1
        End
        x=nl(sysvolume dsn,1)
        If Wordpos(sysvolume,vol_list '??????')>0 Then Iterate
        vol_list=vol_list sysvolume
    End
    x=nl(' ',1);x=nl('Volumes required:',1);x=nl('-----------------',1)
    xx=$sort(vol_list)
    Do While xx/=''
        x=nl($Wordat(xx,72,'l'),1)
        xx=$Wordat(xx,72,'t')
    End
    x=nl(,1)x=nl(Centre('*****',54),1);x=nl(,1)
    If symsub_1st Then Do
        x=nl('Some unknown volumes "??????" detected. If variable',
             'substitution is',1)
        x=nl('being used, suggest trying "SYMSUB /A /L" berfore',
             'running "'xcmd'"',1)
        x=nl('again.',1)
        x=nl(' ',1)
    End

Signal get_out

Get_out:"CAPS=(caps)";"USER_STATE=(status)";Exit
nl:Parse Arg n#,where;If \Datatype(where,'W') Then where='.ZCSR'
"LINE_BEFORE" where"=NOTELINE (n#)";Return 0
