/******************************** REXX ********************************/
table_ver='1.12'
n_st=mark(2)    /* Mark Start */                                  /*QH*/
/*                                                                /*QH*/
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* TABLE: CICS Table/source assembly.                                 */
/*                                                                    */
/* Routine to generate JCL around CICS table member being             */
/* edited. This routine assumes that the table is for CICS V2.3 and   */
/* outputs accordingly. The PROC used is 'DN3AUPLE'.                  */
/*                                                                    */
/* If the member is ...SIT.. then it will be output to the authorised */
/* dataset.                                                           */
/*                                                                    */
/* It will also process assembler programs with PROC 'DN3EITAL' if the*/
/* llq is neither of these: "TABLE TABLES TABLSRC"                    */
/*                                                                    */
/* Parameters:                                                        */
/*   /AO     - Assemble Only (SYSLMOD=DUMMY).                         */
/*   /B      - Browse table.                                          */
/*   /E      - Edit tables.                                           */
/*   /PM     - Include past macros in JCL (as comments). These are    */
/*             the datasets under variable "asmc" in member $ALKCICS. */
/*   /SCan   - Generate TYPRUN=SCAN statement.                        */
/*   /STage  - Link into staged dataset. Dataset will be derived from */
/*             the loadmodule name suffixed by the staging name as    */
/*             supplied by the 'tVv' and 'stts' variables from        */
/*             routine "$ALKCICS". (Default is '.STAGE' suffixed      */
/*             table if it exists.)                                   */
/*   /Sub    - Submit.                                                */
/*   /V      - View tables. This is the default for a command.        */
/*             (Ie., when "TSO TABLE")                                */
/*   /nn     - CICS version, if not the default defined in routine    */
/*             "$ALKCICS".                                            */
/*                                                                    */
/* Packaging:                                                         */
/*   $ALKJC  - Provide jobcard details like class, msgclass etc.      */
/*   $ALKJCPG- Program name used by $ALKJC.                           */
/*   $ALKCICS- Return site specific datasets (more particularly CICS).*/
/*   $CSTRING- Change text values in variables.                       */
/*   TABLE   - This driver.                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
*/                                                                /*QH*/
n_en=mark(-2)   /* Mark End   */                                  /*QH*/
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
If Word(parm#,1)="??" Then Do                                     /*QH*/
  Parse Source . . xcmd .;x=$Br(xcmd ?);Return;End                /*QH*/
If Word(parm#,1)="?" Then Signal Help_me;Else Signal No_help_#1   /*QH*/
Help_me:"ISREDIT (m)=MEMBER";rcm=rc;#tr=Trace("o")                /*QH*/
If rcm=0 Then Do;"ISREDIT (caps)=CAPS";"ISREDIT CAPS OFF";End     /*QH*/
Do i=n_st To n_en;nl=Sourceline(i)                                /*QH*/
If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"               /*QH*/
Else Say Substr(nl,1,79);End                                      /*QH*/
If rcm=0 Then "CAPS=(caps)";Return 0                              /*QH*/
                                                                  /*QH*/
No_help_#1:                                                       /*QH*/
    "ISREDIT (dsname)=DATASET";"ISREDIT (member)=MEMBER"
    Select
        When Index(dsname,'31')>0 Then ver=31
        When Index(dsname,'23')>0 Then ver=23
        When Index(dsname,'13')>0 Then ver=13
        When Index(dsname,'41')>0 Then ver=41
        When Index(dsname,'22')>0 Then ver=22
        Otherwise ver=$alkcics(ver)
    End
    Select
        When Wordpos('/41',parm#)>0 Then Do
            ver=41;parm#=Delword(parm#,Wordpos('/41',parm#),1)
        End
        When Wordpos('/13',parm#)>0 Then Do
            ver=13;parm#=Delword(parm#,Wordpos('/13',parm#),1)
        End
        When Wordpos('/22',parm#)>0 Then Do
            ver=22;parm#=Delword(parm#,Wordpos('/22',parm#),1)
        End
        When Wordpos('/23',parm#)>0 Then Do
            ver=23;parm#=Delword(parm#,Wordpos('/23',parm#),1)
        End
        When Wordpos('/31',parm#)>0 Then Do
            ver=31;parm#=Delword(parm#,Wordpos('/31',parm#),1)
        End
        When Wordpos('/32',parm#)>0 Then Do
            ver=32;parm#=Delword(parm#,Wordpos('/32',parm#),1)
        End
        Otherwise Nop
    End
    If \ima_macro Then Do
        Select
            When Wordpos('/E',parm#)>0 Then act='EDIT'
            When Wordpos('/V',parm#)>0 Then act='VIEW'
            Otherwise act='BROWSE'
        End
        tableds=$alkcics('table',ver)
        #m=Msg('Off')
        If Sysdsn("'"tableds"'")='OK' Then,
            act "DATASET('&TABLEDS')"
        Else Do
            zedlmsg='Invalid table name of "'tableds'" returned for',
                    'version "'ver'" by "$ALKCICS".'
            "SETMSG MSG(ISRZ001)"
        End
        Exit
    End

    Parse SOURCE . . xcmd .;Parse Upper VAR parm# parm#
    zedsmsg=
    #tr=Trace('O');Call parse_parms;y=Trace(#tr)

    v1='authlib loadlib tablload sdfhmac amodgen auple eital stts',
       'orderlib'
    Signal On Syntax Name By_pass_e#1
    Interpret "Parse Value $alkcics(v1,ver) With" v1
    Signal By_pass_e#1_off
By_pass_e#1:
    zedlmsg='Could not find routine "$ALKCICS" and cannot set defaults.',
            'Make it available and re-run. (Or do it manually.)'
    "SETMSG MSG(ISRZ001)"
    Exit

By_pass_e#1_off:

    sysid=Strip(storage(d2x(x2d(c2x(storage(10,4)))+x2d(154)),8))
    def_ex='A'                              /* Job execution class    */
    def_hd='X'                              /* Job held class         */
    def_ac='(MISSING)'                      /* Account code           */
    v1='def_ex def_hd def_ac'
    Signal On Syntax Name By_pass_e#2
    v2=$alkjc(v1);Interpret "Parse var v2" v1
By_pass_e#2:Signal Off Syntax

    "ISREDIT (status)=USER_STATE"
    "ISREDIT (ch)=DATA_CHANGED"
    If ch="YES" Then Do
        "ISREDIT (stype)=SESSION"
        If stype='EDIT' Then "ISREDIT SAVE"
    End
    member=Strip(member)
    Parse VAR auple auple ':' auple_o
    Parse VAR eital eital ':' eital_o

    Parse VAR dsname hlq '.' mlq1 '.' mlq2 '.' llq '.' xlq
    If llq='' Then llq=mlq2;If hlq='DNMCICS' Then hlq='DNDCICS'
    authlib=$cstring(authlib,'DN%CICS',hlq)
    loadlib=$cstring(loadlib,'DN%CICS',hlq)
    sdfhmac=$cstring(sdfhmac,'DN%CICS',hlq)
    tablload=$cstring(tablload,'DN%CICS',hlq)
    orderlib=$cstring(orderlib,'DN%CICS',hlq)
    If auple_o/='' Then auple_o=$cstring(auple_o,'DN%CICS',hlq)
    If eital_o/='' Then eital_o=$cstring(eital_o,'DN%CICS',hlq)

    table=$alkcics('vtabsuff',,dsname)
    If table Then id='AT';Else id='AS'
    jobid=Substr(userid() || id,1,8)
    If index(member,'SIT')>0 Then sit=1;Else sit=0
    "ISREDIT F ' DFHEIENT ' FIRST"
    If rc/=0 Then "ISREDIT F 'DFHEISTG ' 1 FIRST"
    If rc=0 Then syslmod=loadlib;Else syslmod=tablload
    If stage_it Then Do
        If stts='STTS' Then stts='STAGE'
        If stts/='' Then Do
            If Sysdsn("'"syslmod"."stts"'")='OK' Then syslmod=syslmod'.'stts
            Else Do
                zedlmsg="Dataset '"syslmod"."stts"' not found. Using original",
                        "load library."
                "SETMSG MSG(ISRZ002)"
            End
        End
    End

    Address TSO 'NEWSTACK'
    sep1='//'Copies('*',69);sep2='//*'Copies('-',68)
    Call add_jobcard
    Call add_table
    Call add_end_submit

    "ISREDIT F 'garbage_re_cursor_place'"
    "ISREDIT USER_STATE=(status)"
    Exit

add_jobcard:
    jmember=member
    Signal on Syntax Name error_off_alkjcpg
    x=$Alkjcpg(jmember);If x/='' Then jmember=x
error_off_alkjcpg:Signal off Syntax
    Queue "//"jobid" JOB "def_ac",'"jmember"',"
    Queue "//             CLASS="def_ex", COND=(4,LT),"
    Queue "//             MSGCLASS="def_hd",LINES=9999,"
    If scan_it Then Queue "//             TYPRUN=SCAN,"
    Queue "//             NOTIFY=&SYSUID"
    Queue $alkcics('jobparm',ver)
    Queue sep1
    Queue "//*"
    Queue "//*  Source: '"dsname"("member")'"
    Queue "//*  JCL   : Gen'd by command" '"'xcmd'"',
          "on" $DATEMAN('E2M',,,'*','F')"."
    Queue "//*"
    If table Then Queue "//*          Assemble CICS/"$alkcics('dispver',ver),
                        "table."
    Else          Queue "//*          Assemble CICS source program."
    Queue "//*"

    Return 0

add_table:
    Queue sep1
    Signal On Syntax Name add_table_Default
    Interpret 'Signal add_table_'sysid
add_table_ETS:
add_table_CPU1:                             /* ETS                    */
add_table_CPU2:                             /* ETS                    */
add_table_CPU3:                             /* ETS                    */
add_table_SRPMVS:                           /* SRC                    */
    If \table Then Signal add_program
    If sit Then syslmod=authlib
    If auple_o/='' Then Queue '//PROCLIB1 JCLLIB ORDER=('auple_o')'
    If ver=13 Then Do
        Queue '//TABLEASM EXEC' auple',TABLE='member
        Queue '//LNKEDT.SYSLMOD DD DISP=SHR,DSN='syslmod
    End
    Else Do
        Queue '//TABLEASM EXEC' auple
        Queue '//ASSEM.SYSUT1 DD DISP=SHR,DSN='dsname'('member')'
        Queue '//LKED.SYSLMOD DD DISP=SHR,DSN='syslmod
    End
    Return 0
end_table_ETS:

add_table_Default:
 Say 'Adding default table'
    Queue '//ASMTABLE EXEC' auple
    Signal add_rest
add_program:
    syslmod=syslmod'('member')'
    Signal On Syntax Name add_program_Default
    Interpret 'Signal add_program_'sysid
add_program_SRPMVS:
    If eital_o/='' Then orderlib=eital_o
    Queue '//PROCLIB1 JCLLIB ORDER='orderlib
    Queue '//*'
    Queue '//APPLPROG EXEC' eital
    Queue '//TRN.SYSIN  DD DISP=SHR,DSN='dsname'('member')'
    Queue '//*'
    If ao Then Queue '//LKED.SYSLMOD DD DUMMY'
    Else       Queue '//LKED.SYSLMOD DD DISP=SHR,DSN='syslmod
    Queue sep2
error_on_JC:Signal off Syntax
    Return 0

add_program_Default:
    Queue '//ASMSOURC EXEC 'eital','
    Queue "//  TPARM='SP',"
    Queue "//  APARM='DECK,NOOBJECT,LIST,XREF',"
    Queue "//* LPARM='LIST,MAP,RENT,XREF,AMODE=31,RMODE=ANY'"
    Queue "//  LPARM='LIST,XREF'"

add_rest:
    Queue sep2
    If table Then Queue '//ASSEM.SYSUT1 DD DISP=SHR,'
    Else          Queue '//TRN.SYSIN  DD DISP=SHR,'
    Queue '//           DSN='dsname'('member')'
    Queue '//ASM.SYSLIB DD DISP=SHR,DSN='dsname
    If \table Then Do
        asm=$alkcics('sitesrc')
        Do While asm/=''
            Parse Var asm xx asm
            Queue '//         DD DISP=SHR,DSN='xx
        End
        If pm Then Do
            asm=$alkcics('asmc') $alkcics('sitesrc')
            Do While asm/=''
                Parse Var asm xx asm
                Queue '//*        DD DISP=SHR,DSN='xx
            End
        End
    End
    Queue '//         DD DISP=SHR,DSN=SYS1.MACLIB'
    Queue '//         DD DISP=SHR,DSN='amodgen
    If ao Then Queue '//LKED.SYSLMOD DD DUMMY'
    Else Do
        If sit Then Queue '//LKED.SYSLMOD DD DISP=SHR,DSN='authlib
        Else Queue '//LKED.SYSLMOD DD DISP=SHR,DSN='syslmod
    End
    If \table Then Do
        Queue '//LKED.SYSIN   DD DUMMY'
/*      Queue '//LKED.SYSIN   DD  *'                                  */
/*      Queue '  NAME 'member'(R)'                                    */
/*      Queue '/*'                                                  */*/
    End
    Queue sep

    Return 0

add_end_submit:
    If sub_it Then Do
        Queue "ZZ"
        If ch='YES' & stype/='EDIT' Then Do
            Address TSO 'DELSTACK'
            zedlmsg='NOTE:- Data has been changed and as you are in',
                    'a "VIEW" session it has not been saved and',
                    'submitting would waste cycles.  I have decided',
                    'to cancel your AUTO-SUB.'
            "SETMSG MSG(ISRZ001)"
            Return 8
        End
        #m1=Msg('On');x=Outtrap('line.',10,'NOCONCAT')
        Address TSO "SUBMIT * END(ZZ)"
        x=Msg(#m1)
        Do i=1 To line.0
            If Index(line.i,'SUBMITTED')>0 Then Do
                If Wordpos('JOB',line.i)=0 Then Iterate
                zedlmsg=line.i
                "SETMSG MSG(ISRZ001)";Signal ext1
            End
        End
    End

    Queue ''
    ztempf=$ztempf();dd="TA"Time('s')
    Address TSO "ALLOC DD("dd") DS('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW" dd "(FINIS"
    Address TSO 'DELSTACK'
    x=Mark_notes_1()
    Address TSO "NEWSTACK"
    Do i=n_st To n_en;Queue Sourceline(i);End
    If ch='YES' Then Do
        If stype/='EDIT' Then,
            zedlmsg='NOTE:- Data has been changed and as you are in',
                    'a "VIEW" session it has not been saved and',
                    'submitting will assemble/link it without the',
                    'changes. Save it first before submission.'
        Else,
            zedlmsg='Warning:- Data has been changed and SAVED for you.',
                    'If this is not what you require it is too late',
                    'and you will have to restore it manually.'
        "SETMSG MSG(ISRZ001)"
    End
    umodelds='*';"VPUT (umodelds) SHARED"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    "EDIT DATAID(&DATAID) MACRO(UMODEL)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD("dd")";x=$ztempf(ztempf,'/D')

    Return 0
ext1:
    Exit

Mark_notes_1:n_st=mark(2)
/*
*---------------------------ooo000OOOO000ooo---------------------------*
*                                                                      *
*   This is the JCL that has been generated from the parameters you    *
*   have supplied. Enter SUB on the command line if you wish to        *
*   submit the job.  [END] will send it to the bit bucket without      *
*   submission.                                                        *
*                                                                      *
*----------------------------------------------------------------------*
*/
    n_en=mark(-2);Return 0

Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    trace=parse_cons('TRACE')
    test_it=parse_cons('/T')
    scan_it=parse_cons('/SC',1,0,3)
    stage_it=parse_cons('/ST',1,0,3)
    ao=parse_cons('/AO',1,0)
    pm=parse_cons('/PM',1,0)
    sub_it=parse_cons('/S',1,0,2)

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
