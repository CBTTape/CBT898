/******************************** REXX ********************************/
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* Macro to summarise CSD TDQ output for feed into member "DU$" or    */
/* explicitly called from "DU" using the 'Q=subr' parameter.          */
/* 1. Generate report using:                                          */
/*      "LIST G(DCTxx) OBJECTS"                                       */
/* 2. Execute this macro in an edit/view session of output            */
/*    a. Pass parameter of SUM to just report on queue summary        */
/*    b. Pass parameter of group name to ensure that TDQs from that   */
/*       group only are created otherwise all TDQ equates will be set */
/* 3. Make data from comments and delete the rest                     */
/* 4. Import into your DU exit. For further use of the exit in "DU"   */
/*    enter "DU ?" on the command line.                               */
/*--------------------------------------------------------------------*/
    "ISREDIT MACRO (parm#) NOPROCESS"
    Parse Upper VAR parm# parm#
    If Wordpos('SUM',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('SUM',parm#),1);sum=1
    End
    Else sum=0
    Parse VAR parm# parm1 parm2 parm3 parm4 parm5
    Parse SOURCE . xenv xcmd xdd xdsn .

    Address ISREDIT;"(status)=USER_STATE"

process_job:
    "X ALL"
    "F 'TDQUEUE(' ALL";"F 'DDNAME(' ALL";"DEL ALL X";"C P'Â¬' ' ' 1 1 ALL"
    i=1;"(last)=LINENUM .ZLAST";"(caps)=CAPS";"CAPS OFF"
    If \sum Then Do
        x=n_l('/*  REXX */;Arg dd,dsn;Call set_vars')
     x=n_l("    Interpret 'xx='dd;If xx=dd Then Return '';Else Return xx;Exit")
        x=n_l(" ")
        x=n_l('/* Summary of CSD TDQ output for feed into member "DU$" or',
              'explicitly')
        x=n_l("   called from "DU" using the 'Q=subr' parameter.",
              '(INTRA queues commented')
        x=n_l('   out.)')
        x=n_l(Substr("   Created using command: '"xcmd parm#"'.",1,70)'*/')
        x=n_l(" ")
        x=n_l("set_vars:")
    End
    Do While i<last
        "(line1)=LINE" i;i=i+1;"(line2)=LINE" i;i=i+1
        Parse Value line1 line2 With tdq group desc typ . . . dd dsn .
        If parm1/='' Then Do
            Parse VAR group '(' grp ')'
            If parm1/=grp Then Iterate
        End
        Parse VAR tdq '(' tdq ')';tdq=Left(tdq,4)
        Parse VAR dd  '(' dd  ')';dd=Left(dd,8)
        Parse VAR dsn '(' dsn ')';dsn=Left(dsn,44)
        Parse VAR typ '(' typ ')';typ=Substr(typ,1,1)
        If sum Then linex=group 'TDQ('tdq') DD('dd') TYPE('typ') DSN('dsn')'
        Else Do
            If dd/='' Then linex="    "dd"='"tdq"'"
            Else linex=Substr("/*          ='"tdq"'",1,70)"*/"
            linex=Overlay('/* 'group' */',linex,40)
        End
        "LINE_BEFORE .ZFIRST=NOTELINE (linex)"
    End
    If \sum Then x=n_l("Return 0")
    "CAPS=(caps)"

    "USER_STATE = (status)"
    Exit

n_l:Parse Arg n#;"LINE_BEFORE .ZFIRST=NOTELINE (n#)";Return 0
