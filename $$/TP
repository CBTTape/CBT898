/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* TP: Test Panel                                                     */
/* Edit-macro to display a panel for test purposes.                   */
/* 'TP' is an alias to this edit-macro.                               */
/*                                                                    */
/*  Enter "TP ?" to invoke tutorial and further documentation.        */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   CLISTs:                                                          */
/*     TP       - Edit macro to display panel                         */
/*                                                                    */
/*   Tutorial (panels):                                               */
/*     TESTPH01 - Tutorial panel                                      */
/*     TESTPH02 - Tutorial panel                                      */
/*                                                                    */
/*--------------------------------------------------------------------*/
Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#)"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse Upper VAR parm# parm#
    If Wordpos(parm#,'HELP ?')>0 Then Do
        h018=TESTPH01
        "SELECT PGM(ISPTUTOR) PARM(&H018)"
        Return 0
    End

    Call parse_parms

    If trace="Y" Then Trace r

    If test="Y" Then Do
        "VGET ZENVIR ASIS"
        ispfver=substr(zenvir,6,1)
        zcmd=
        "CONTROL NONDISPL END"
        If ispfver>2 Then Do
             "VGET ZAPPLID ASIS"
             "SELECT PGM(ISPYXDR) PARM(&ZAPPLID)"
        End
        Else "SELECT PGM(ISRYXDR) NOCHECK"
        gc009="Test mode set."
    End

ini2:
    "ISREDIT (STATUS) = USER_STATE"
    "ISREDIT FIND )END 1 ALL";If rc = 0 Then Signal isp1
    "ISREDIT FIND )BODY 1 ALL";If rc = 0 Then Signal isp1
    "ISREDIT FIND )ATTR 1 ALL";If rc = 0 Then Signal isp1
    "ISREDIT FIND )INIT 1 ALL";If rc = 0 Then Signal isp1
    "ISREDIT FIND )PROC 1 ALL";If rc = 0 Then Signal isp1
    "ISREDIT USER_STATE=(status)"
    gc009="No ')xxxx' entry found."
    Signal er18
isp1:
    "ISREDIT FIND ')INIT' 1 5 ALL";If rc=0 Then Signal gotend
    "ISREDIT FIND ')REINIT' 1 7 ALL";If rc=0 Then Signal gotend
    "ISREDIT FIND ')PROC' 1 5 ALL";If rc=0 Then Signal gotend
    "ISREDIT FIND ')END' 1 4 ALL";If rc=0 Then Signal gotend

gotend:
    "ISREDIT (INIT)=CURSOR"
    "ISREDIT FIND ')BODY' 1 5 ALL"
    If rc/=0 Then body=1;Else "ISREDIT (BODY)=CURSOR"
    line#=init-body-1

    "ISREDIT USER_STATE = (status)"
    "ISREDIT (PDSNAME) = DATASET"
    "ISREDIT (MEMBER) = MEMBER"
    "ISREDIT (CHANGED) = DATA_CHANGED"
    If changed="YES" Then "ISREDIT SAVE"
    "CONTROL ERRORS &EACT"
    "LIBDEF ISPPLIB DATASET ID('&PDSNAME') STACK"
    If msg="Y" Then Do
        gc009="("line#") If screen is not being refreshed, use",
            "'HELP' PF key for more info."
        "SETMSG MSG(gc009)"
    End

/*--------------------------------------------------------------------*/
/* Set panel display according to the type of panel                   */
/*--------------------------------------------------------------------*/
scr1:
    Select
        When pant="NP" Then Do
            action="DISPLAY PANEL("member")";xc=8
        End
        When pant="SP" Then Do
            action="SELECT PANEL("member")";xc=0
        End
        When pant="ST" Then Do
            action="SELECT PGM(ISPTUTOR) PARM("member")";xc=0
        End
        Otherwise NOP
    End

scr1a:
    zcmd=
    "&ACTION"
    rc1=rc
    If rc1>8 Then Do
        gc009="RC="rc1" in attempting to display the panel."
        Signal er18
    End
    If rc1=xc Then Signal exi1;Else Signal scr1a

exi1:
    "LIBDEF ISPPLIB DATASET"
    Return rc1

er18:
    "LIBDEF ISPPLIB DATASET"
    rc1=rc
    gc009=gc009 "use 'HELP' PF key for more info."
    "SETMSG MSG(gc009)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse the parameters passed. Valid parameters are:                 */
/*    C      - Set error action to CANCEL from default RETURN         */
/*    NO     - Do not display informative message                     */
/*    SP     - Selection panel                                        */
/*    ST     - Selection tutorial                                     */
/*    TEST   - Enter test mode for ISPF                               */
/*    TRACE  - Turn trace on                                          */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#

    trace=parse_cons('TRACE')
    If trace='N' Then trace=parse_cons('/TR',,,3)

    test=parse_cons('TEST',,,2)
    If test='N' Then test=parse_cons('/TEST',,,2)
    msg=parse_cons('MSG',,,1)
    If msg='N' Then msg=parse_cons('/MSG',,,2)
    pant=parse_cons('P','NP','NULL')
    If pant='' Then pant=parse_cons('SP','*','NULL')
    If pant='' Then pant=parse_cons('ST','*','NULL')
    If pant='' Then pant='NP'

    eact=parse_cons('C','CANCEL','RETURN',1)
    If eact='RETURN' Then eact=parse_cons('/C','CANCEL','RETURN',1)

    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
