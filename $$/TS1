/*            REXX                                                    */
ARG parm#
/*    TRACE r                                                         */
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/*                                                                    */
/* This routine will maintain a set of attendance times.              */
/*                                                                    */
/* The break taken will default to 00.00 and any different value will */
/* be reconciled between the two sets.                                */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     TS       - Driver                                              */
/*     DATEDISP - Date displacement routine                           */
/*                                                                    */
/*   Panels:                                                          */
/*     TIMET    - Display panel                                       */
/*                                                                    */
/*   Table:                                                           */
/*     TIMETABL - ISPF table to keep the two sets of times and their  */
/*                respective backups.                                 */
/*                                                                    */
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */
    Parse Upper VAR parm# parm1 parm2 parm3

    Address ISPEXEC

    cactn = "RETURN"
    cactn = "CANCEL"
    "CONTROL ERRORS" cactn

    day1  = 'Saturday'
    delim = "."
    timsz = "N"
    rjl   = 2                               /* RIGHT just. length     */
    "VGET TSLTABL PROFILE"
    If tsltabl = '' Then tsltabl = "TIMETABL"
tsltabl = "TIMETAB#"
    et   = 1                                /* Entry type 1=Normal    */
    days = 'Monday   ',
           'Tuesday  ',
           'Wednesday',
           'Thursday ',
           'Friday   ',
           'Saturday ',
           'Sunday   ',
           ''

    hlq   = $alkhlq()
    tsdsn = hlq'.TIMESH.DATA'
    dsn   = hlq'.TIMESH.TEMP1'
    mpre  = 'TS'
    x = ISPF_env('On')

    d#   = Wordpos(day1,days)
    xx   = days
    days = ''
    Do 7
        days = days Word(xx,d#)
        d# = d# +1
        If d# > 7 Then d# = 1
    End
    d#   = Wordpos(Date('w'),days)

    "TBEND" tsltabl
    "TBEND" tsltabl
    "TBOPEN" tsltabl
    If rc /= 0 Then Call cretab

    oper = 'I'
    Call iotab
    Call calctab
    If Value('ST'd#) = '' Then csr1 = 'ST'd#
    Else                       csr1  = "ZCMD"

scr1:
/*--------------------------------------------------------------------*/
/* Display screen                                                     */
/*--------------------------------------------------------------------*/
    otsltabl = tsltabl
    zcmd     = ''
    da1#     = da1
    timo     = Substr(Time(),1,5)
    "DISPLAY PANEL(&MPRE.1) CURSOR(&CSR1)"
    If rc > 4 Then Do
/*      Trace O                                                       */
        oper = 'O'
        Call iotab
        Signal eop
    End

    csr1 = "ZCMD"
    Parse Var zcmd zcmd parm1 parm2 parm3
    cmd2 = Substr(zcmd,1,2)

    If cmd2 = 'TR' Then Do
        If parm1 = 'OFF'  Then Trace Off
        Else                   Trace r
        Signal scr1
    End

    If da1# /= da1 Then Do
        Call shuffle_times
        Signal scr1
    End

    If da1# /= da1 Then Do
        Signal scr1
    End

    If otsltabl /= tsltabl Then Do
        Call alttab
        Signal scr1
    End

    If cmd2 = 'NO' | cmd2 = 'AC' | cmd2 = 'SW'  Then Do
        Select
            When cmd2 = 'NO' Then Do
                If et = 2 Then Do
                    oper = 'O'
                    Call iotab
                    et   = 1
                    gc009 = "Switched to 'Normal'."
                End
            End
            When cmd2 = 'AC' Then Do
                If et = 1 Then Do
                    oper = 'O'
                    Call iotab
                    et   = 2
                    gc009 = "Switched to 'Actual'."
                End
            End
            Otherwise Do
                oper = 'O'
                Call iotab
                If et = 1 Then et = 2
                Else           et = 1
                gc009 = "Switched/"
            End
        End
        oper = 'I'
        Call iotab
        "SETMSG MSG(GC009)"
        Signal scr1
    End

    If Substr(zcmd,1,1) = "PR" Then Do
        Call out_table
        Signal scr1
    End

    If Substr(zcmd,1,2) = "NE" Then Do
        Call cretab
        oper = 'I'
        Call iotab
        Signal scr1
    End

    If Substr(zcmd,1,2) = "TE" Then Do
        Call dummytb
        Call calctab
        Signal scr1
    End

    If zcmd = "SAVE" Then Do
        If parm1 = '?' Then
           "VIEW DATASET(&TSDSN)"
        Else Do
            If tabmem /= '' Then parm1 = tabmem
            Call out_table
        End
        Signal scr1
    End

    Call calctab
    Signal scr1

/*--------------------------------------------------------------------*/
/* Extend calculation in table                                        */
/*--------------------------------------------------------------------*/
calctab:
    th  = 0
    tm  = 0
    dt1="";rt1="";tl1=""
    dt2="";rt2="";tl2=""
    dt3="";rt3="";tl3=""
    dt4="";rt4="";tl4=""
    dt5="";rt5="";tl5=""
    dt6="";rt6="";tl6=""
    dt7="";rt7="";tl7=""
    Do i=1 To 7
        data = "time = st"i
        Interpret data
        If time = "" Then Iterate

        fld = 'ST'
        Call parsetim
        data = "st"i" = hh||delim||mm"
        Interpret data
        h1 = hh
        m1 = mm

        data = "time = br"i
        Interpret data
        fld = 'BR'
        If Substr(time,1,1) = "S" Then time = '00.30'
        Call parsetim
        data = "br"i" = hh||delim||mm"
        Interpret data
        h3 = hh
        m3 = mm

        data = "time = fn"i
        Interpret data
        fld = 'FN'
        Call parsetim
        data = "fn"i" = hh||delim||mm"
        Interpret data
        h2 = hh
        m2 = mm

        If h2 < h1 Then h2 = h2 + 12
        If h2 < h1 Then h2 = h2 + 12
        t2 = h2*60 + m2
        t1 = h1*60 + m1
        t3 = h3*60 + m3
        df = t2-(t1+t3)
        h4 = RIGHT(df % 60,rjl,'0')
        m4 = RIGHT(df // 60,2,'0')
        Interpret "dt"i" = h4||delim||m4"

        Interpret "time = dt"i
        Call parsetim
        t1 = th + hh
        m1 = tm + mm
        tt = t1*60 + m1
        th = RIGHT(tt % 60,3,' ')
        tm = RIGHT(tt // 60,2,'0')
        x = Strip(tm)
        If LENGTH(x) < rjl Then tm = Substr('0',1,rjl-LENGTH(x))x
        data = "rt"i" = th||delim||tm"
        Interpret data
        data = "rt"i" = Substr(rt"i",1,6)"
        Interpret data

        tl = 2400 - tt
        h1 = RIGHT(tl % 60,3,' ')
        m1 = ABS(tl // 60)
        m1 = RIGHT(m1,2,'0')
        x = Strip(m1)
        If LENGTH(x) < rjl Then m1 = Substr('0',1,rjl-LENGTH(x))x
        data = "tl"i" = h1||delim||m1"
        Interpret data
        data = "tl"i" = Substr(tl"i",1,6)"
        Interpret data
    End

/*--------------------------------------------------------------------*/
/* Parse and validate 'time' into 'hh' 'mm'                           */
/*--------------------------------------------------------------------*/
parsetim:
    Trace o
    If time = "" Then time = 0
    pos = INDEX(time,delim)
    If pos > 0 Then Do
        mm = STRIP(Substr(time,pos+1,2))
        If pos = 1 Then hh = 0
        Else            hh = Substr(time,1,pos-1)
    End
    Else Do
        hh = time
        mm = 0
    End
    If DATATYPE(hh) /= "NUM" Then Signal err2
    If DATATYPE(mm) /= "NUM" Then Signal err2
    If timsz /= "I" Then ,
        If hh > 24 Then Signal err2
    If mm > 60 Then Signal err2
    hh = RIGHT(hh,2,'0')
    x = Strip(hh)
    If LENGTH(x) < rjl Then hh = Substr('0',1,rjl-LENGTH(x))x
    mm = LEFT(mm,2,'0')
    Return 0

/*--------------------------------------------------------------------*/
/* Create an entirely new table. All previous data lost               */
/*--------------------------------------------------------------------*/
cretab:
    "TBEND" tsltabl
    "TBERASE" tsltabl
    vnames = 'DOW1 DATE1 START1 FINIS1 BREAK1',
             'DOW2 DATE2 START2 FINIS2 BREAK2'
    "TBCREATE" tsltabl "KEYS(KEY) NAMES("vnames") REPLACE"
    If rc > 4 THEN Do
        gc009 = "Table '"tsltabl"' could not be created RC="rc"."
        Signal err1
    End

    start1=;finis1=;break1=
    start2=;finis2=;break2=
    dt1="";rt1="";tl1=""
    dt2="";rt2="";tl2=""
    dt3="";rt3="";tl3=""
    dt4="";rt4="";tl4=""
    dt5="";rt5="";tl5=""
    dt6="";rt6="";tl6=""
    dt7="";rt7="";tl7=""

    day_date = Date('e')
    d# = Wordpos(Date('w'),days)
    If d# > 1 Then,
         day_date = $DATEMAN('E-N',day_date,,-1*(d#-1))
    Do i=1 To 7
        date1 = $DATEMAN('E-N',day_date,,i-1)
        date2 = Date1
        dow1  = $DATEMAN('E2D',date1)
        dow2  = dow1
        key   = Right(i,3,'0')
        "TBMOD" tsltabl
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Clear table                                                        */
/*--------------------------------------------------------------------*/
cleartab:
    "TBTOP" tsltabl
    Do Forever
        "TBSKIP" tsltabl
        If rc /= 0 Then Leave
        start1='';finis1='';break1='';dow1='';date1=''
        start2='';finis2='';break2='';dow2='';date2=''
        "TBMOD" tsltabl
    End
    st1=;fn1=;br1=;dt1=;rt1=;tl1=
    st2=;fn2=;br2=;dt2=;rt2=;tl2=
    st3=;fn3=;br3=;dt3=;rt3=;tl3=
    st4=;fn4=;br4=;dt4=;rt4=;tl4=
    st5=;fn5=;br5=;dt5=;rt5=;tl5=
    st6=;fn6=;br6=;dt6=;rt6=;tl6=
    st7=;fn7=;br7=;dt7=;rt7=;tl7=
    Return 0

/*--------------------------------------------------------------------*/
/* Open alternative Table                                             */
/*--------------------------------------------------------------------*/
alttab:
    If tsltabl /= "TIMETABL" Then Do
        If Substr(tsltabl,1,1) /= 'D' Then Do
            gc009 = "Table name mst be of format 'TSyymmdd'."
            tsltabl = otsltabl
            csr1  = 'TSLTABL'
            Signal err1
        End
        If Datatype(Substr(tsltabl,2)) /= 'NUM' Then Do
            gc009 = "Table name mst be of format 'Dyymmdd'."
            tsltabl = otsltabl
            csr1  = 'TSLTABL'
            Signal err1
        End
    End
    "TBEND" otsltabl
    "TBOPEN" tsltabl
    If rc /= 0 THEN Do
        gc009 = "Table '"tsltabl"' could not be opened, RC="rc"."
        tsltabl = otsltabl
        csr1  = 'TSLTABL'
        Signal err1
    End
    "TBEND" otsltabl
    oper = 'I'
    Call iotab
    Call calctab
    Return 0


/*--------------------------------------------------------------------*/
/* Populate table with dummy 'TEST' data                              */
/*--------------------------------------------------------------------*/
dummytb:
    If Datatype(parm1) /= 'NUM' | parm1 < 1 Then parm1 = 1

    "TBTOP" tsltabl
    Do i=1 To 7
        "TBSKIP" tsltabl
        If parm1 > i Then,
             Interpret "st"i"=;fn"i"=;br"i"="
        Else Interpret "st"i"=08.0"i";fn"i"=05.00;br"i"=00.30"
        Interpret "start"et" = "Value("st"i)
        Interpret "finis"et" = "Value("fn"i)
        Interpret "break"et" = "Value("br"i)
        "TBMOD" tsltabl
    End
    Return 0

/*--------------------------------------------------------------------*/
/* I/O  'NORMAL' table                                                */
/*--------------------------------------------------------------------*/
iotab:
    "TBTOP" tsltabl
    If et = 1 Then at = 2
    Else           at = 1
    Do i=1 To 7
        If oper = 'O' Then Do
            "TBSKIP" tsltabl
            Interpret "dow"et   "= dw"i
            Interpret "date"et  "= da"i
            Interpret "start"et "= st"i
            Interpret "finis"et "= fn"i
            Interpret "break"et "= br"i
            If dow1 /= dow2 | Value('start'at) = '' Then Do
                Interpret "dow"at   "=dow"et
                Interpret "date"at  "=date"et
                Interpret "start"at "=start"et
                Interpret "finis"at "=finis"et
                Interpret "break"at "=break"et
            End
            "TBMOD" tsltabl
        End
        Else Do
            "TBSKIP" tsltabl
            Interpret "dw"i" = dow"et
            Interpret "da"i" = date"et
            Interpret "st"i" = start"et
            Interpret "fn"i" = finis"et
            Interpret "br"i" = break"et
        End
    End
    Return 0

/*--------------------------------------------------------------------*/
/* I/O  'NORMAL' table                                                */
/*--------------------------------------------------------------------*/
shuffle_times:
Trace r
    xx = $DATEMAN('E2D',da1)
    If Word(dif,1) = 'Error' Then Do
        gc009 = dif
        csr1  = 'DA1'
        "SETMSG MSG(GC009)"
        Return 4
    End
    d# = Wordpos(xx,days)
    If d# > 1 Then,
         day_date = $DATEMAN('E-N',da1,,-1*(d#-1))
    Else day_date = da1
    Parse VAR da1# d1 '/' m1 '/' y1
    Parse VAR da7  d7 '/' m7 '/' y7
    Parse VAR da1  d0 '/' m0 '/' y0
    If y0||m0||d0 < y1||m1||d1 | y0||m0||d0 > y7||m7||d7 Then,
        Call cretab
    Else If d# > 1 Then Do
        i = 1
        da1 = da1#
        Do 7
            If i < d# Then Do
                Interpret "st"i "="
                Interpret "br"i "="
                Interpret "fn"i "="
            End
            Else Do
                Interpret "st"d# "= st"i
                Interpret "br"d# "= br"i
                Interpret "fn"d# "= fn"i
            End
            i  = i +1;If i  > 7 Then i  = 1
            d# = d#+1;If d# > 7 Then d# = 1
        End
        dt1=;rt1=;tl1=
        dt2=;rt2=;tl2=
        dt3=;rt3=;tl3=
        dt4=;rt4=;tl4=
        dt5=;rt5=;tl5=
        dt6=;rt6=;tl6=
        dt7=;rt7=;tl7=
    End

Trace o
    Return 0

/*--------------------------------------------------------------------*/
/* Prepare for print                                                  */
/*--------------------------------------------------------------------*/
out_table:
If parm1 = '' Then Do
    Parse VAR da1 dd '/' mm '/' +3 yy
    parm1 = 'D'yy||mm||dd
End
Else Do
    If Substr(parm1,1,1) /= 'D' Then Do
        gc009 = "Table name must be of format 'Dyymmdd'."
        Signal err1
    End
End
ofile = tsdsn'('parm1')'
oper = 'O'
Call iotab
Address TSO
"NEWSTACK"
x = '+------------+-----+-------+-------+-------+-------+--------+--------+'
y = '|    Date    | Day | Start |Finish |Breaks | Total | Worked | Owing  |'
Queue ' '
Queue '                 Time Sheet for week Commencing:' da1
Do j=1 To 2
Queue ' '
If j =1 Then Queue 'Normal'
Else         Queue 'Actual'
Queue x
Queue y
Queue x
Address ISPEXEC "TBTOP" tsltabl
Do i=1 To 7
    Address ISPEXEC "TBSKIP" tsltabl
    Queue '|',
          Value('date'j) '|',
          Substr(Value('dow'j),1,3) '|',
          Substr(Value('start'j),1,5) '|',
          Substr(Value('finis'j),1,5) '|',
          Substr(Value('break'j),1,5) '|',
          Substr(Value('dt'i),1,5) '|',
          Substr(Value('rt'i),1,6) '|',
          Substr(Value('tl'i),1,6) '|'
End
End
Queue x
Queue ''
Address ISPEXEC
tsdd = 'TS'Time('s')
If zcmd = 'PRNT' Then Do
    "VGET ZTEMPF"
    Address TSO "ALLOC DD("tsdd") DS('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "tsdd" (FINIS"
    Address TSO 'DELSTACK'
    "LMINIT DATAID(DATAID) DDNAME("tsdd")"
    "EDIT DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
End
Else Do

    If Sysdsn("'"ofile"'") /= 'OK' Then Do
        Address TSO "ALLOC DA('"tsdsn"') NEW CATALOG SPACE(15,2)    ",
           "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(5)",
           "RECFM(F B) REU TRACKS"
        Address TSO "FREE DA('"tsdsn"')"
    End
    Address TSO "ALLOC F("tsdd") DA('"tsdsn"("parm1")') SHR REU"
    Address TSO "EXECIO * DISKW "tsdd" (FINIS"
    gc009 = "Time table saved under name '"parm1"'."
End
Address TSO "FREE DD("tsdd")"
Return 0

/*--------------------------------------------------------------------*/
/* End Of Processing                                                  */
/*--------------------------------------------------------------------*/
eop:
    x = ISPF_env('Off')

    "TBCLOSE" tsltabl
    "VPUT TSLTABL PROFILE"
    Exit

err1:
    "SETMSG MSG(GC009)"
    Return 8

err2:
    csr1 = fld||i
    gc009 = "Invalid time."
    "SETMSG MSG(GC009)"
    Signal scr1


ISPF_env: Parse Upper ARG xx yy
    If xx = 'OFF' THen Do
        "LIBDEF ISPPLIB"
        Address TSO "DELETE '"dsn"'"
        Return 0
    End

    forchar.0 = 2
    chgchar.0 = '`'
    forchar.1 = '`'
    subchar.1 = mpre
    forchar.2 = '~'
    subchar.2 = '/'
    #panel1   = 1                           /* First panel number     */
    #panels   = 1                           /* Number of panels       */


    x   = Msg('Off')
    Address TSO
    "DELETE '"dsn"'"
    dd  = 'IA'Time('s')
    "ALLOC DA('"dsn"') NEW CATALOG CYL SPACE(10,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(2)",
       "RECFM(F B) REU"
    "FREE  DA('"dsn"')"

    Do i=#panel1 To #panels
        member = mpre||i
        Interpret "Call make_mem_"i
        Call build_queue
    End
    Address ISPEXEC
    "LIBDEF ISPPLIB DATASET ID('&DSN') STACK"
    Return 0


/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    #i_backup = i
    #j_backup = j
    Do i=n_st To n_en
        If forchar.0 > 0 Then Do
            If Substr(Sourceline(i),1,1) = chgchar.0 Then Do
                line = Substr(Sourceline(i),2)
                DO j=1 To forchar.0
                    line = Cstring(line,forchar.j,subchar.j)
                End
                Queue line
            End
            Else Queue Sourceline(i)
        End
        Else Queue Sourceline(i)
    End
    Queue ''
    i = #i_backup
    j = #j_backup

    "ALLOC F("dd") DA('"dsn"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    "DELSTACK"

    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Change string                                                      */
/*--------------------------------------------------------------------*/
cstring:
    PArse ARG string,fstrg,tstrg,rep,start
    Numeric Digits 10
    If rep = '*' Then rep = 9999999999
    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 1
    If Datatype(start) /= 'NUM' | Index(start,'.') > 0 Then start = 1
    fl = Length(fstrg)
    tl = Length(tstrg)
    Do While rep > 0
        start = Index(string,fstrg,start)
        If start = 0 Then Leave
        string = Delstr(string,start,fl)
        string = Insert(tstrg,string,start-1,tl)
        rep = rep -1
        start = start + tl
    End
    Return string

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(2)
/*
)ATTR DEFAULT(%¢_)
  @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
  ` TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) JUST(RIGHT)
  ! TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) CAPS(OFF)
  ~ TYPE(INPUT) INTENS(HIGH) COLOR(GREEN)
  % TYPE(TEXT) INTENS(HIGH) SKIP(ON)
  ¢ TYPE(TEXT) INTENS(LOW) SKIP(ON)
  # TYPE(OUTPUT) INTENS(LOW) CAPS(OFF)
  $ TYPE(OUTPUT) INTENS(LOW) CAPS(OFF) COLOR(RED) JUST(RIGHT)
)BODY EXPAND(\\) LMSG(MYLMSG)
@&TIMO\-\ Timesheet \-\-----
@&SID%===>_ZCMD\ \
!MYLMSG
¢
¢Enter parameters in table:@&TYPE   ¢&BE1 @&BE2 ¢&BE3 @&BE4  ¢
¢
+------------+------------+-------+-------+-------+--------+---------+---------+
| Day        | Date       | Start |Finish |Breaks | Total  | Worked  | Owing   |
+------------+------------+-------+-------+-------+--------+---------+---------+
|#DW1       ¢|_DA1       ¢|~ST1  ¢|~FN1  ¢|~BR1  ¢| #DT1  ¢|`RT1    ¢|$TL1    ¢|
|#DW2       ¢|_DA2       ¢|~ST2  ¢|~FN2  ¢|~BR2  ¢| #DT2  ¢|`RT2    ¢|$TL2    ¢|
|#DW3       ¢|_DA3       ¢|~ST3  ¢|~FN3  ¢|~BR3  ¢| #DT3  ¢|`RT3    ¢|$TL3    ¢|
|#DW4       ¢|_DA4       ¢|~ST4  ¢|~FN4  ¢|~BR4  ¢| #DT4  ¢|`RT4    ¢|$TL4    ¢|
|#DW5       ¢|_DA5       ¢|~ST5  ¢|~FN5  ¢|~BR5  ¢| #DT5  ¢|`RT5    ¢|$TL5    ¢|
|#DW6       ¢|_DA6       ¢|~ST6  ¢|~FN6  ¢|~BR6  ¢| #DT6  ¢|`RT6    ¢|$TL6    ¢|
|#DW7       ¢|_DA7       ¢|~ST7  ¢|~FN7  ¢|~BR7  ¢| #DT7  ¢|`RT7    ¢|$TL7    ¢|
+------------+------------+-------+-------+-------+--------+---------+---------+
¢
    NEw%>_Z¢ACtual%>_Z¢NOrmal%>_Z¢BAckup%>_Z¢REstore%>_Z¢TEst%>_Z¢CReate%>_Z¢
¢
¢   Member%>_TABMEM  %<
)INIT
    .ZVARS = '(NEW ACTUAL NORMAL BACKUP RESTORE TEST CREATE)'
    &SID     = &ZSYSID
    &NEW     = 'N'
    &ACTUAL  = 'N'
    &NORMAL  = 'N'
    &BACKUP  = 'N'
    &RESTORE = 'N'
    &TEST    = 'N'
    &CREATE  = 'N'
    &ACTSEL  = 'N'
    .HELP  = HNOHELP
    IF (&ET = 2) &TYPE = 'Actual'
    ELSE         &TYPE = 'Normal'
    &GC001 = 'Selections are mutually exclusive.'
)PROC
    REFRESH(ZCMD)
    IF (&NEW     = 'Y')
      IF (&ACTSEL  = 'Y') VER(&NEW,LIST,INVALID,MSG=GC001)
      &ACTSEL  = 'Y'
      &ZCMD = NEW
    IF (&ACTUAL  = 'Y')
      IF (&ACTSEL  = 'Y') VER(&ACTUAL,LIST,INVALID,MSG=GC001)
      &ACTSEL  = 'Y'
      &ZCMD = ACTUAL
    IF (&NORMAL  = 'Y')
      IF (&ACTSEL  = 'Y') VER(&NORMAL,LIST,INVALID,MSG=GC001)
      &ACTSEL  = 'Y'
      &ZCMD = NORMAL
    IF (&BACKUP  = 'Y')
      IF (&ACTSEL  = 'Y') VER(&BACKUP,LIST,INVALID,MSG=GC001)
      &ACTSEL  = 'Y'
      &ZCMD = BACKUP
    IF (&RESTORE = 'Y')
      IF (&ACTSEL  = 'Y') VER(&RESTORE,LIST,INVALID,MSG=GC001)
      &ACTSEL  = 'Y'
      &ZCMD = RESTORE
    IF (&TEST    = 'Y')
      IF (&ACTSEL  = 'Y') VER(&TEST,LIST,INVALID,MSG=GC001)
      &ACTSEL  = 'Y'
      &ZCMD = TEST
    IF (&CREATE  = 'Y')
      IF (&ACTSEL  = 'Y') VER(&CREATE,LIST,INVALID,MSG=GC001)
      &ACTSEL  = 'Y'
      &ZCMD = CREATE
)END
*/
    n_en = mark(-2);Return 0

make_mem_2: n_st = mark(2)
/*
*/
    n_en = mark(-2);Return 0
