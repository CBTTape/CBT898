/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Edit macro to hit an AVRS archive screen for restoration into a    */
/* private library.                                                   */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC
    ARG parm#
    Parse SOURCE op_sys op_mode xcmd dd_name dsn_name .
    If parm# ¬= "" Then Signal byp1
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    zerrhm   = '*'
    zerralrm = 'NO'
    zerrsm   = ''
    inval   = '¢&~`%@¬+'                    /* Invalid chars (attribs)*/

    v_c = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||,
          'abcdefghijklmnopqrstuvwxyz' ||,
          '0123456789'                 ||,
          '@#$_'
    "VGET (udmacro) SHARED"
    If udmacro = 'Y' Then Signal macro_1

    Parse Upper VAR parm# parm1 parm2

    Signal On Syntax Name staxroc
    retsyn = in_screenc

    screeni = Translate(Screenc(),Substr(' ',Length(inval)),inval)
ret_in_screen:

    find = 'AVRS ARCHIVE HISTORY STATUS'
    x    = find_it()
    find = 'EXECUTION START DATE'
    sd = get_date()
    find = 'EXECUTION END DATE'
    ed = get_date()
    find = 'HISTORICAL DATA FOR'
    nam = next_field()
    find = 'NUMBER'
    num = next_field()
    find = 'DSNAME'
    dsn = next_field()
    find = 'LINES ARCHIVED'
    #la = next_field()

    rpt    = '420'                          /* #133 byte records/TRK  */
    alt    = 'CYL'                          /* CYL or TRK             */
    prim   = (#la % rpt) %15 +1
    sec    = prim % 10
    sysuid = Userid()
    odsn   = Sysvar(syspref)'.'sysuid'.'nam'.D'ed'.J'num
    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))

    Call process_jcl

    Signal ext1

find_it:
    st = Index(screeni,find)
    If st = 0 Then Do
        zerrlm = "Cannot find '"find"'."
        Signal ext1
    End
    Return Substr(screeni,st+Length(find)+1,80)

get_date:
    line = find_it()
    dot = Index(line,'.')
    yy  = Substr(line,dot-2,2)
    ddd = Substr(line,dot+1,3)
    Return yy || ddd

next_field:
    line = find_it()
    Interpret "Parse VAR line '"find"' val ."
    Parse VAR line val .
    Return Strip(val)

err1:
    zerrlm = "Processed last line."
ext1:
    "SETMSG MSG(ISRZ002)"
    Exit

process_jcl:
    x_msg = Msg()
    x     = Msg('Off')
    a    = '/*'
    Trace o

    "CONTROL ERRORS RETURN"
    otype = 'Q'
    Call build_job_card
    Call queue_jcl
    If Sysdsn("'"odsn"'") = 'OK' Then Do
        Call build_jcl_1
        Call queue_jcl
        zerrsm   = ''
        zerrlm = "Dataset '"odsn"' already exists. Delete step",
                "inserted. Please review as download may be",
                "redundant."
        Address ISPEXEC "SETMSG MSG(ISRZ002)"
    End
    Call build_jcl_2
    Call queue_jcl
    Call execute_jcl
    Address TSO "DELSTACK"

ext1:
    Address ISPEXEC "SETMSG MSG(ISRZ002)"
    Exit

errproc:
    Call Off Error
    Return Sigl

nl:
    Parse Arg noteline
    "ISREDIT LINE_BEFORE .ZFIRST = &MSGT (noteline)"
    Return 0

macro_1:
    udmacro = ''
    "VPUT (udmacro) SHARED"
    "ISREDIT RESET"
/*--------------------------------------------------------------------*/
/* Set up notelines for the JCL generated                             */
/*--------------------------------------------------------------------*/
    ima_macro = 'Y'
    x_msg = Msg()
    x     = Msg('Off')
    Trace o

    "CONTROL ERRORS RETURN"
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

    You can manually submit this JCL from the command line
M\                     - or -
    Copy it to another member for later use
M\                     - or -
I\  Submit it in 1 step by passing a parameter of "SUB" to the &XCMD.
    macro and bypass this edit session.

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    msgt = 'NOTELINE'
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    otype = 'NQ'
    Call queue_jcl
    msgt = 'NOTELINE'
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"


    Exit

build_job_card:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\//&SYSUID.UL JOB CLASS=E,MSGCLASS=V,NOTIFY=&SYSUID
I\/&A.MAIN SYSTEM=&SYSID.
I\/&A.
I\//VARS SET ODSN=&ODSN.
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

build_jcl_1:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\//RERUN    EXEC PGM=IEFBR14
  //RSLOCAL  DD DSN=&ODSN,
  //            DISP=(MOD,DELETE,DELETE),
  //            UNIT=SYSDA,
  //            SPACE=(TRK,(0,0))
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

build_jcl_2:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\//RESTORE  EXEC PGM=$AVRTAPE,REGION=4M,TIME=1440
I\//$AVRTAPE DD DISP=SHR,DSN=&DSN.
  //RSLOCAL  DD DSN=&ODSN,
  //            DISP=(NEW,CATLG,DELETE),
  //            UNIT=SYSDA,
I\//            SPACE=(&ALT.,(&PRIM.,&SEC.),RLSE),
  //            DCB=(RECFM=FB,LRECL=133,BLKSIZE=27930)
  //SYSPRINT DD SYSOUT=*
  //SYSIN    DD *
I\TYPE=JN,NA=&NAM.,SD=&SD.,ED=&ED.,NU=&NUM.
I\&A.
  //
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Queue the JCL from the source lines                                */
/*--------------------------------------------------------------------*/
queue_jcl:
    Do i=n_st To n_en
        line = Sourceline(i)
        msgt = 'NOTELINE'
        If Substr(line,2,1) = '\' Then Call eval_subs
        If otype = 'Q' Then,
            Queue Substr(line,3,72)
        Else,
            If ima_macro = 'Y' Then,
                x = nl('*'Substr(line,1,70)'*')
            Else Say '*'Substr(line,1,70)'*'
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Process the JCL. Present under ISPF editor and auto submit if so   */
/* requested.                                                         */
/*--------------------------------------------------------------------*/
execute_jcl:
    If parm1 /= 'SUB' Then Do
        Queue ''
        "VGET ZTEMPF"
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        udmacro = 'Y'
        "VPUT (udmacro) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd")"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Address TSO 'DELSTACK'
        Exit
    End

    Queue "ZZ"
    x = Msg('On')
    x = Outtrap('line.',10,'NOCONCAT')
    Address TSO "SUBMIT * END(ZZ)"
    x = Msg('Off')

    Address TSO 'DELSTACK'

    Do i=1 To line.0
        If Index(line.i,'SUBMITTED') > 0 Then Do
            line = ' 'line.i
            Parse VAR line ' JOB ' rest
            zerrlm = 'JOB' rest
            zerrsm = ''
            Return 0
        End
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Evaluate instream variable substitutions from the source lines     */
/* selected for processing.                                           */
/*--------------------------------------------------------------------*/
eval_subs:
    pre = Substr(line,1,1)
    x = Verify(pre,'mMI')
    If x /= 0 Then Return
    If Substr(line,3,1) = '+' Then Do
        i = i +1
        line = Substr(line,1,2) || Strip(Sourceline(i),'t')
    End
    If pre = 'm' Then Do
        msgt = "MSGLINE"
        line = '  'Substr(line,3)
    End
    Else If pre = 'M' Then Do
        msgt = "MSGLINE"
        line = 'I\'Substr(line,3)
    End
    If Substr(line,1,3) = 'I\+' Then Do
        i = i +1
        line = Strip(Sourceline(i),'t')
    End
    Else line = '  'Substr(line,3)
    st = 0
    Do Forever
        st = Index(line,'&',st+1)
        If st = 0 Then Leave
        en = Index(line,'.',st+1)
        If en = 0 Then Leave
        p1 = Substr(line,1,st-1)
        p2 = Substr(line,St+1)
        ic = Verify(p2,v_c)
        If ic = 0 Then Leave
        If Substr(p2,ic,1) /= '.' Then Iterate
        var = Substr(p2,1,ic-1)
        p2  = Substr(p2,ic+1)
        Interpret 'val =' var
        line = p1 || val || p2
    End
    Return 0

/*--------------------------------------------------------------------*/
/* In stream screen capture in case the original 'screenc' routine is */
/* not available. This will not have all the bells and whistles of    */
/* 'screenc' and will not be enhanced.                                */
/*--------------------------------------------------------------------*/
in_screenc:
    "VGET (zscreeni zscreenc)"
    If rc = 0 Then Do
        zscreeni = Translate(zscreeni,,Xrange('00'x,'3f'x))
        Signal go_back_1
        Return
    End
    "VGET (zscreenw zscreend)"
    p = ptr(96+ptr(ptr(24+ptr(112+ptr(132+ptr(540))))))
    zscreeni = Translate(Storage(,
        d2x(p),zscreenw*zscreend),,Xrange('00'x,'3f'x))
    zscreenc = c2d(Storage(,
        d2x(164+ptr(ptr(24+ptr(112+ptr(132+ptr(540)))))),4))

go_back_1:
    screeni = Translate(zscreeni,Substr(' ',Length(inval)),inval)
    Signal ret_in_screen

ptr: return c2d(bitand(storage(d2x(Arg(1)),4),'7FFFFFFF'x))

/*--------------------------------------------------------------------*/
/* Syntax error handling.                                             */
/*--------------------------------------------------------------------*/
staxroc:
    Interpret Signal retsyn

