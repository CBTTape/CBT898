/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Routine to Unload a Dump from the dump directory.                  */
/* For further details, refer to 'help_me' below.                     */
/* ISPF table. A basic tutorial is available by use of the 'HELP' PF  */
/* key.                                                               */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     UD       - This driver that acts as driver and recursive macro.*/
/*     BR       o Browser routine to display tutorial in a browsable  */
/*                dataset as oposed to NOTELINES.                     */
/*     WHOIS    o To get name.                                        */
/*     $U2LOWER o Upper to lower case translation used by WHOIS.      */
/*                                                                    */
/*   LoadMOD:                                                         */
/*     GRS      - GRS routine to display enq's.                       */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    Parse SOURCE op_sys op_mode xcmd_name dd_name dsn_name .
    Address ISPEXEC
    If parm# Â¬= "" Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (parm#) NOPROCESS"
    ima_macro = 'Y'
    "ISREDIT (status) = USER_STATE"

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

    d#lx = 50                               /* Default no. copy lines */
    userid = Userid()
    spref  = Sysvar(Syspref)
    tempf  = spref'.'userid'.SYS4.DUMPDIR.TRASH'
    cddsn  = spref'.'userid'.$CD.TRASH'
    v_c = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||,
          'abcdefghijklmnopqrstuvwxyz' ||,
          '0123456789'                 ||,
          '@#$_'
    sysid  = Strip(storage(d2x(x2d(c2x(storage(10,4))) + x2d(154)),8))

    zerrhm   = '*'
    zerralrm = 'NO'
    zerrsm   = ''

    Parse Upper VAR parm# parm#
    Parse VAR parm# parm1 parm2
    If parm1 = '??' Then Signal help_me
    If parm1 = '?' | parm1 = 'HELP' Then Do
        If ima_macro = 'Y' Then Signal help_me
        Signal On Syntax Name staxroc
        retsyn = help_me
        x = $BR(xcmd_name "??")
        Exit
    End

    "VGET (udmacro) SHARED"
    If udmacro = 'M0' Then Signal macro_0

    dumpds = 'SYS4.DUMPDIR'
    If udmacro = 'M2' Then Signal macro_2
    "ISREDIT (dsname) = DATASET"
    If dsname = tempf Then Signal macro_1

ini1:
    Call parse_parms
    If trace = 'Y' Then Trace r

    If import = 'Y' Then Signal process_imp
    If import = 'Y' Then Signal process_imp


    If Datatype(parm1) = 'NUM' & Index(parm1,'.') = 0 &,
       parm1 <= 5000 Then #lx = parm1
    Else #lx = d#lx
    If deldx = 'Y' Then Do
        x = MSG('Off')
        Address TSO "DELETE '"tempf"'"
    End
    If Sysdsn("'"tempf"'") /= 'OK' Then Do
        x = OUTTRAP('line.',5,'NOCONCAT')
        x = MSG('On')
        Address TSO "GRS *" dumpds
        x = OUTTRAP('Off')
        x = MSG('Off')
        Do i=3 To line.0
            Parse VAR line.i . enq .
            If Substr(enq,1,3) = 'EXC' Then Do
                zerrlm = "Exclusive ENQ on dataset '"dumpds"'. Try later."
                "SETMSG MSG(ISRZ002)"
                Exit
            End
        End

        x = MSG('Off')
        dd = 'UD'Time('s')
        Address TSO
        "ALLOC DD("dd") DS('"dumpds"') SHR REU"
        "EXECIO" #lx "DISKR "dd" (STEM line. FINIS)"

        "ALLOC DD("dd") DS('"tempf"') NEW CATALOG",
            "TRACKS SPACE(15,15) RECFM(F B) LRECL(200) BLKSIZE(0)",
            "UNIT(SYSDA) DSORG(PS) REU"
        "EXECIO * DISKW "dd" (STEM line. FINIS"
        Drop line.
        "FREE DD("dd")"
        "Free DS('"tempf"')"

        zerrlm = "Copy of '"dumpds"'. Enter",
                '"'xcmd_name' parms" to',
                'extract required dump or "'xcmd_name' ?" for help.'
        If keepdx = 'Y' Then zerrlm = zerrlm,
            'Copy will be kept on exit.'
    End
    Else Do
        zerrlm = "Old copy of '"dumpds"'. Enter",
                '"'xcmd_name' parms" to',
                'extract required dump or "'xcmd_name' ?" for help.',
                'Either "DEL" or "NEW" to update.'
        keepdx = 'Y'
    End
    Address ISPEXEC
    "SETMSG MSG(ISRZ002)"
    udmacro = 'M0'
    "VPUT (udmacro,conly) SHARED"
    "VIEW DATASET('&TEMPF') MACRO("xcmd_name")"
    If keepdx = 'N' Then Do
        x = MSG('Off')
        Address TSO "DELETE '"tempf"'"
    End
    Exit

macro_0:
    udmacro = ''
    "VPUT (udmacro) SHARED"
    "VGET (conly) SHARED"
    If conly = 'Y' Then Do
        "ISREDIT (status) = USER_STATE"
        "ISREDIT X ALL"
        "ISREDIT F 'CICS DUMP' ALL"
        "ISREDIT DEL ALL X"
        "ISREDIT USER_STATE = (status)"
    End
    "ISREDIT RESET"

    Exit

macro_1:
    udmacro = ''
    "VPUT (udmacro) SHARED"
    "ISREDIT (status) = USER_STATE"

    Call parse_parms

    If Datatype(parm1) = "NUM" Then "ISREDIT CURSOR =" parm1 0
    Else Do
        If parm1 /= '' Then Do
            "ISREDIT F '"parm1"'"
            If rc /= 0 Then Do
                zerrlm = "'"parm1"' not found..."
                Signal ext1
            End
        End
    End
    "ISREDIT (line) = LINE .ZCSR"
/*  Parse VAR line . . . . . . . v1 v2 .                              */
/*  If v1 v2 /= 'CICS DUMP:' Then Do                                  */
/*      zerrlm = "'"v1 v2"' not a CICS DUMP."                         */
/*      Signal ext1                                                   */
/*  End                                                               */

    Parse VAR line tapeno . . . . date . 'SYSTEM=' sid . 'CODE=' code .
    Parse VAR date dd '/' mm '/' yy
    If sid /= '' Then cics = sid'.'code'.D'Substr(yy,3) || mm || dd
    Else Do
        Parse VAR line . . . . . . . id .
        cics = Strip(Substr(id,1,8))'.D'Substr(yy,3) || mm || dd
    End
    outdsn = 'TPM.'userid'.'cics'.'tapeno

process_imp:
    If ima_macro = 'Y' & import = 'Y' Then Do
        "ISREDIT (jobf) = DATASET"
        "ISREDIT (last) = LINENUM .ZLAST"
        If Datatype(parm1) = 'NUM' & parm1 > 0 & parm1 <= last Then NOP
        Else parm1 = last
        "ISREDIT (parm1) = LINE" parm1
        PARSE VAR parm1 16 node +4 'DSN=' outdsn .
        parm1 = "'"outdsn"'"
    End
    Else jobf = tempf
    x_msg = Msg()
    x     = Msg('Off')
    a    = '/*'
    Trace o
    Address TSO "NEWSTACK"

    "CONTROL ERRORS RETURN"

    otype = 'Q'
    system = sysid
    If import = 'N' Then Do
        Call build_job_card_1
        Call queue_jcl
        Call build_jcl_main
        Call queue_jcl
        If Sysdsn("'"outdsn"'") = 'OK' Then Do
            Call build_jcl_11
            Call queue_jcl
            gc009 = "Dataset '"outdsn"' already exists. Delete step",
                    "inserted. Please review as download may be",
                    "redundant."
            Address ISPEXEC "SETMSG MSG(GC009)"
        End
        Call build_jcl_12
        Call queue_jcl
        If node = '????' Then Call build_jcl_2
        Else Do
            cddet = Date('e') Substr(Time(),1,5)'>'node 'DSN='outdsn
            where = 'source'
            Call build_jcl_4
            Call queue_jcl
            Call build_jcl_3
            Call queue_jcl
            Call build_job_card_2
            Call queue_jcl
            system = node
            Call build_jcl_main
            Call queue_jcl
            cddet = Date('e') Substr(Time(),1,5)'<'sysid 'DSN='outdsn
            where = 'destination'
            Call build_jcl_4
        End
        Call queue_jcl
        Call build_jcl_term
    End
    Else Do
        If deldx /= 'Y' Then Do
            Call build_job_card_1
            Call queue_jcl
            Call build_jcl_main
            Call queue_jcl
            Call build_jcl_2
            Call queue_jcl
            Call build_jcl_term
            Call queue_jcl
        End
        If node /= '????' Then Do
            system = node
            Call build_job_card_2
            Call queue_jcl
            Call build_jcl_5
        End
    End
    Call queue_jcl
/*  Call build_jcl_term                                               */
/*  Call queue_jcl                                                    */
    Call process_jcl
    Trace
    Address TSO "DELSTACK"

ext1:
    Address ISPEXEC
    "CONTROL ERRORS CANCEL"
    "ISREDIT USER_STATE = (status)"
    zerrsm = ''
    "SETMSG MSG(ISRZ002)"
    Exit

/*--------------------------------------------------------------------*/
/* Build the jobcards                                                 */
/*--------------------------------------------------------------------*/
build_job_card_1:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\//&USERID.DMP JOB CLASS=E,MSGCLASS=V,NOTIFY=&SYSUID TYPRUN=SCAN
I\/&A.
I\/&A. Selected from &JOBF.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

build_job_card_2:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\//&USERID.UDD JOB CLASS=E,MSGCLASS=V,NOTIFY=&SYSUID
I\/&A.ROUTE XEQ &NODE.
I\//&USERID.UDD NJB CLASS=E,MSGCLASS=V
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Build JES3 MAIN card                                               */
/*--------------------------------------------------------------------*/
build_jcl_main:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\/&A.
I\/&A.MAIN SYSTEM=&SYSTEM.
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Build JCL terminator card                                          */
/*--------------------------------------------------------------------*/
build_jcl_term:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
  //
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Delete dump file in case of reruns.                                */
/* Build the IEBGENR download from tape                               */
/*--------------------------------------------------------------------*/
build_jcl_11:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\/&A.----------------------------------------------------------------
I\/&A.  Delete in case of rerun
I\/&A.----------------------------------------------------------------
  //RERUN    EXEC PGM=IEFBR14
I\//SYSUT2   DD  DSN=&OUTDSN.,
  //             DISP=(MOD,DELETE),
  //             UNIT=DISK,
  //             SPACE=(TRK,(0,0))
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

build_jcl_12:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\/&A.----------------------------------------------------------------
I\/&A.  Download from tape
I\/&A.----------------------------------------------------------------
  //GENER1  EXEC PGM=IEBGENER
  //SYSPRINT DD  SYSOUT=*
  //SYSUT1   DD  DSN=ANZ.SYSDUMP,DISP=SHR,UNIT=CTAPE,LABEL=EXPDT=98000,
I\//             VOL=SER=&TAPENO.
I\//SYSUT2   DD  DSN=&OUTDSN.,
  //             DISP=(NEW,CATLG),
  //             UNIT=DISK,
  //             SPACE=(CYL,(200,50),RLSE),
  //             DCB=*.SYSUT1
  //SYSIN    DD  DUMMY
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Build the import into Abend FX JCL                                 */
/*--------------------------------------------------------------------*/
build_jcl_2:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\/&A.----------------------------------------------------------------
I\/&A.  Automatic Import step
I\/&A.----------------------------------------------------------------
  //STEP001  EXEC  PGM=OPERCMD,
I\// PARM='F ABAIDFX,IMPORT &OUTDSN.'
I\/&A.
  //STEPLIB  DD  DISP=SHR,DSN=ANZ.AUTHLIB
  //SYSPRINT DD  SYSOUT=*
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Build the Connect Direct dump FTP job                              */
/*--------------------------------------------------------------------*/
build_jcl_3:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\/&A.----------------------------------------------------------------
I\/&A.  Automatic ship step
I\/&A.----------------------------------------------------------------
  //SHIPIT   EXEC DMBATCH
  //VIOSTAT1 DD DUMMY
  //SYSIN    DD *
           SIGNON
I\         SUBMIT PROC=COPY SNODE=&NODE.              -
                  &NODE=PNODE                         -
I\                &DSN1=&OUTDSN. -
I\                &DSN2=&OUTDSN. -
                  &DISP1=NEW                          -
                  &DISP2=CATLG                        -
                  &COMPRESS=COMPRESS
           SIGNOFF
I\&A.
I\/&A.
  //
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Build the JCL to update the shipped dump directory on remote LPAR  */
/*--------------------------------------------------------------------*/
build_jcl_4:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\/&A.----------------------------------------------------------------
I\/&A.  Create record of dump shipped at &WHERE..
I\/&A.----------------------------------------------------------------
  //WHATDUMP EXEC PGM=IEBGENER
  //SYSPRINT DD  SYSOUT=*
I\//SYSUT2   DD  DSN=&CDDSN.,
  //             DISP=(MOD,CATLG),
  //             UNIT=DISK,
  //             SPACE=(TRK,(15,5)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)
  //SYSIN    DD DUMMY
  //SYSUT1   DD *
I\&CDDET.
I\&A.
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Build the JCL to route a delete job to the original node           */
/*--------------------------------------------------------------------*/
build_jcl_5:
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\/&A.----------------------------------------------------------------
I\/&A.  Route JCL to original node to delete transferred dataset
I\/&A.----------------------------------------------------------------
  //DELETE   EXEC PGM=IEFBR14
I\//SYSUT2   DD  DSN=&OUTDSN.,
  //             DISP=(OLD,DELETE),UNIT=DISK,SPACE=(TRK,(0,0))
I\/&A.
*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2

    Return 0

/*--------------------------------------------------------------------*/
/* Queue the JCL from the source lines                                */
/*--------------------------------------------------------------------*/
queue_jcl:
    Do i=n_st To n_en
        line = Sourceline(i)
        msgt = 'NOTELINE'
        If Substr(line,2,1) = '\' Then Call eval_subs
        If otype = 'Q' Then,
            Queue Substr(line,3,72)
        Else,
            If ima_macro = 'Y' Then,
                x = nl('*'Substr(line,1,70)'*')
            Else Say '*'Substr(line,1,70)'*'
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Process the JCL. Present under ISPF editor and auto submit if so   */
/* requested.                                                         */
/*--------------------------------------------------------------------*/
process_jcl:
    If subit /= 'Y' Then Do
        Queue ''
        "VGET ZTEMPF"
        Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW ZTEMPF (FINIS"
        "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
        udmacro = 'M2'
        "VPUT (udmacro) SHARED"
        "EDIT DATAID(&DATAID) MACRO("xcmd_name")"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD(ZTEMPF)"
        Address TSO 'DELSTACK'
        Exit
    End

    Queue "ZZ"
    x = Msg('On')
    x = Outtrap('line.',10,'NOCONCAT')
    Address TSO "SUBMIT * END(ZZ)"
    x = Msg('Off')

    Address TSO 'DELSTACK'

    Do i=1 To line.0
        If Index(line.i,'SUBMITTED') > 0 Then Do
            line = ' 'line.i
            Parse VAR line ' JOB ' rest
            zerrlm = 'JOB' rest
            zerrsm = ''
            Return 0
        End
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Evaluate instream variable substitutions from the source lines     */
/* selected for processing.                                           */
/*--------------------------------------------------------------------*/
eval_subs:
    pre = Substr(line,1,1)
    x = Verify(pre,'mMI')
    If x /= 0 Then Return
    If Substr(line,3,1) = '+' Then Do
        i = i +1
        line = Substr(line,1,2) || Strip(Sourceline(i),'t')
    End
    If pre = 'M' Then Do
        msgt = "MSGLINE"
        line = '  'Substr(line,3)
    End
    Else If pre = 'm' Then Do
        msgt = "MSGLINE"
        line = 'I\'Substr(line,3)
    End
    If Substr(line,1,3) = 'I\+' Then Do
        i = i +1
        line = Strip(Sourceline(i),'t')
    End
    Else line = '  'Substr(line,3)
    st = 0
    Do Forever
        st = Index(line,'&',st+1)
        If st = 0 Then Leave
        en = Index(line,'.',st+1)
        If en = 0 Then Leave
        p1 = Substr(line,1,st-1)
        p2 = Substr(line,St+1)
        ic = Verify(p2,v_c)
        If ic = 0 Then Leave
        If Substr(p2,ic,1) /= '.' Then Iterate
        var = Substr(p2,1,ic-1)
        p2  = Substr(p2,ic+1)
        Interpret 'val =' var
        line = p1 || val || p2
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Help tutorial extracted from instream data                         */
/*--------------------------------------------------------------------*/
help_me:
    x_msg = Msg()
    x     = Msg('Off')
    Trace o

    "CONTROL ERRORS RETURN"
    Signal On Syntax Name staxroc
    retsyn = bad_whois
    name   = ''
    names  = Whois(userid,'/R')
    Parse VAR names name .
bad_whois:

    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*
I\  Hello &NAME....

    UD is a processing routine to Unload Dumps from tape using
    information extracted from dataset 'SYS4.DUMPDIR'.

    To minimise ENQ's and permit users to work at their own pace,
I\  UD will extract the first &D#LX. (or you may pass a numeric
    parameter indication the number of lines up to 5000 or "ALL"
    for all lines) lines from 'SYS4.DUMPDIR' and place it into
I\  temporary dataset '&TEMPF.'. If all goes well
    then UD should clean up after itself and delete this trashy
    dataset.  If you wish to keep this dataset then use parameter of
    "KEEP" and it will not be deleted and the next time you come in
    you will work of the OLD copy.
    If an old copy exists then either delete it manually or use the
    "DELete" parameter which will replace the old file. If you wish
    to refresh an old file, use a combination of "DELete" and "KEEP"
    or "NEW" which will delete the old and keep the new.

    You can use parameter of "CONLY" to just display the Cics ONLY
    dump entries.

    However, you can be a Wally and work directly from
    'SYS4.DUMPDIR' and hold everyone out.

------------------------------------------------------------------------

M\  Once you are viewing/editing the dump directory: -
M\  ------------------------------------------------
    To off load a dump, view the dataset and enter "UD l#" on the
    command line (where 'l#' is the line number of the dump
    to be unloaded) or place the cursor on the appropriate
    line.
    Alternatively you may pass the last 4 bytes of the CICS name and
    the first hit will be used to extract the dump.

    If you do not want to automatically import into AbendFX but
    Connect Direct ship it, use parameter of "NODE=nodename" (or
    N=...).  This routine will generate two jobs. The first job to
    download and ship the dump to the destination node. The second
    job to be executed on the receiving note to create or update an
I\  audit dataset '&CDDSN.' with the details of the dump
    just shipped and the same named dataset will be updated on the
    executing system. Directional arrows will highlight the movement
    direction in each respective audit dataset.

    At the receiving node, under ISPF 3.4, enter "UD IMPort" against
    the dataset to generate the AbendFX import job.
    If you wish to delete the original dump from the originating
    system use a parameter of "N=orig.nodename" to append JCL that
    will be routed to delete original.
M\                        - or -
I\  Edit/view dataset '&CDDSN.' and just enter "UD IMP l#"
    where 'l#' is the line number of the dump to import. It will
    also extract the return node for deletion, from the line.
    If you do not pass a line number, the last line will be used.

    You will be presented with the JCL and follow the bouncing ball.

    A parameter of '?' will give you help but you already know that.
    Don't you??

    Now enter RESET on the command line to get rid of these silly
    NOTE lines (unless you are in browse mode).

M\  GOTCHAs:
M\  --------
    1. Do not set UD up in a command table as it is recursive and
       used as both a command processor and an edit macro. Set up in
       a command table will render it's ISPF edit-macro feature
       inoperative.
    2. 'SYS4.DUMPDIR' is continually changing. If you want to work
       off a static copy, use the "KEEp" parameter and later "DELete"
       it.
    3. JCL space parameter of "SPACE=(CYL,(200,50),RLSE)" may not be
       big enough for that mother of a dump.

                              *****

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Trace
    x = Msg(x_msg)
    If ima_macro = 'Y' Then Do
        "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
        msgt = 'NOTELINE'
        x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    End
    Else Say '*'Centre('ooo000OOOO000ooo',70,'-')'*'

    otype = 'NQ'
    Call queue_jcl

    If ima_macro = 'Y' Then Do
        msgt = 'NOTELINE'
        x = nl('*'Copies('-',70)'*')
        "ISREDIT CAPS = (caps)"
    End
    Else Say '*'Copies('-',70)'*'

    Return 0

errproc:Call Off Error;Return Sigl

staxroc:Interpret Signal retsyn

nl:Parse Arg l;"ISREDIT LINE_BEFORE .ZFIRST = &MSGT (l)";Return 0

macro_2:
    udmacro = ''
    "VPUT (udmacro) SHARED"
    "ISREDIT RESET"
/*--------------------------------------------------------------------*/
/* Set up notelines for the JCL generated                             */
/*--------------------------------------------------------------------*/
    x_msg = Msg()
    x     = Msg('Off')
    Trace o

    "CONTROL ERRORS RETURN"
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

    You can manually submit this JCL from the command line
                       - or -
    Copy it to another member for later use
                       - or -
    Submit it in 1 step by passing a parameter of "SUB" and bypass
    this edit session.

M\                        - Note -

    If you do not want to automatically import into AbendFX but
    Connect Direct ship it, use parameter of "NODE=nodename".
    Refer to the main instructions (command "UD ?") for details
    on how to process the dump at the receiving node.

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Trace
    x = Msg(x_msg)
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    msgt = 'NOTELINE'
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')

    ima_macro = 'Y'
    otype = 'NQ'
    Call queue_jcl

    msgt = 'NOTELINE'
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"

    Exit

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    subit = parse_cons('SUB')
    node  = parse_varb('NODE=','????')
    If node = '????' Then node  = parse_varb('N=','????')
    If Length(node) = 1 Then node = 'ANZ'node

    trace  = parse_cons('TRACE',,,2)
    import = parse_cons('IMPORT',,,2)
    keepdx = parse_cons('KEEP',,,2)
    deldx  = parse_cons('DELETE',,,2)
    newdx  = parse_cons('NEW',,,2)
    If newdx = 'Y' Then Do
        keepdx = 'Y'
        deldx  = 'Y'
    End
    conly  = parse_cons('CONLY',,,2)
    d#lx  = parse_cons('ALL','*',d#lx,2)
    If d#lx  = 'ALL' Then d#lx = '*'

    Parse VAR parm# parm1 parm2

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

