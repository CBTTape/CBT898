/******************************** REXX ********************************/
ms=mark(1)
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* UMODEL: User model includer.                                       */
/*                                                                    */
/* Edit-macro to place "NOTELINE"s in the front of the member being   */
/* edited. The notes may be derived from 3 different sources:         */
/*    1. Set variable "umodel" to the name of the member in the       */
/*       ISPSLIB concatenation. Set variable "umodelds" to NULLs.     */
/*       This will use ISPF's "UMODEL" feature.                       */
/*    2. From the system Queue. Push the required note lines to the   */
/*       queue, set variable "umodelds" to "*".                       */
/*    3. From any dataset/member.  Set variable "umodelds" to         */
/*       "'dataset(member)'" (quoted).                                */
/*    Regardless of source place variable "umodelds" in the SHARED    */
/*    profile pool using a VPUT command.                              */
/*                                                                    */
/* If you so desire, you can pass variables for substituting into     */
/* your model if you are using option 2 or 3 above as follows:        */
/*    a) Set variable "umodelcc" to a character that will prefix      */
/*       the variable name to be processed. Note the variable MUST    */
/*       have a trailin dot (.) which WILL be removed, so double up   */
/*       if need be.                                                  */
/*    b) Set variable "umodelv" to a variable name list contaiong the */
/*       literal names of variables to be passed.                     */
/*    c) Issue the following VPUT command over and above of the model */
/*       name to accept variables:                                    */
/*            umodelcc='&';umodelv='cname dsname frommemb tomemb'     */
/*            "VPUT (umodelcc,umovelv,"umodelv") SHARED"              */
/* Box presentation (using margin characters):                        */
/*   When using substitution the final line length may differ which   */
/*   may hinder box presentation. This may be overcome by setting     */
/*   variable "UMODELML" to a valid edit-macro MASKLINE and leave the */
/*   text unboxed and let "UMODEL" box it for you. Note that the mask */
/*   has precedence over the data and may overwrite over expanded     */
/*   lines.                                                           */
/*                                                                    */
/* Have taken a copy of panel 'ISREMCLS' and add selection "UMODEL"   */
/* to the panel. Created a 'UMODELP' panel that includes the skeleton */
/* set in the "umodel" variable. (This is only required for Source 1. */
/* above.)                                                            */
/*                                                                    */
/*--------------------------------------------------------------------*/
me=mark(-1)
    ARG parm#
    Address ISPEXEC;"ISPEXEC CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    If Wordpos(parm#,'? ?? HELP /HELP /H')>0 Then Signal help_me
ini1:
    "VGET (umodel,umodelds,umodelv,umodelcc,umodelml) SHARED"
    If umodelds='' & umodel/='' Then Do
        xxx=$ddalloc('ISPSLIB')
        Do While xxx/=''
            Parse Var xxx xx xxx
            If Sysdsn("'"xx"("umodel")'")='OK' Then Do
                umodelds="'"xx"("umodel")'"
                leave
            End
        End
    End
    If umodelcc/='' Then Do
        "VGET (umodelv) SHARED";"VGET ("umodelv") SHARED"
    End
    dsn=umodelds;umodelds=;"VPUT (umodelds) SHARED"
    If dsn/='' Then Do
        Address ISREDIT
        "RESET"
        If dsn/='*' Then Do
            If Sysdsn(dsn)/='OK' Then Do
                "PROFILE LOCK"
                "(PROF) = PROFILE"
                "PROFILE UMODEL"
                "NOTE ON"
                "RESET"
                "MODEL" dsn "AFTER 0"
                If rc/=0 Then Signal bad_member
                Return 0
            End
            dd= "DD"Time('s')
            Address TSO "ALLOC F("dd") DA("dsn") SHR REU"
            If rc/=0 Then Signal bad_member
            Address TSO "EXECIO * DISKR "dd" (STEM umodel. FINIS)"
            Address TSO "FREE DD("dd")"
        End
        Else Do
            umodel.0=Queued()
            Do i=1 To umodel.0
                Parse Pull umodel.i
            End
        End
        If umodelml/='' Then "MASKLINE="umodelml
        "(caps)=CAPS";"CAPS=OFF"
        "(last) = LINENUM .ZLAST"
        If last=0 Then "LINE_AFTER 0=' '"
        Do i=1 To umodel.0
            nl=VALUE('umodel.'i)
            If umodelcc/='' Then Do
                Do While Index(nl,umodelcc)>0
                    Interpret "Parse VAR nl p1 '"umodelcc"' var '.' p2"
                    If Index(var,'(')>0 Then Do
                        Parse VAR var var '(' vl ')'
                        If Â¬Datatype(vl,'W') Then vl=Length(var)
                        Interpret 'nl=p1||Substr('var',1,vl)||p2'
                    End
                    Else Interpret 'nl=p1||'var'||p2'
                End
            End
            x=n_b(nl,'.ZFIRST')
        End
        "CAPS="caps
        If last=0 Then "DELETE .ZFIRST"
        If dsn='*' Then Address TSO "DELSTACK"
    End
    If umodelml/='' Then "MASKLINE=''"
    Return 0

bad_member:
    "(caps)=CAPS";"CAPS=OFF"
    Address ISREDIT
    x=n_b('*'Copies('-',70)'*')
    x=n_b('*'Copies(' ',70)'*')
    x=n_b(Substr('* Could not allocate' dsn'.',1,71)'*')
    x=n_b('*'Copies(' ',70)'*')
    x=n_b(Substr('* Suggest delete all lines to prevent submission',
          'in case instructions',1,71)'*')
    x=n_b(Substr('* were critical.',1,71)'*')
    x=n_b('*'Copies(' ',70)'*')
    x=n_b(Substr('* If you are familiar with use, just hit END PF key',
          'to auto submit.',1,71)'*')
    x=n_b('*'Copies(' ',70)'*')
    x=n_b('*'Copies('-',70)'*')
    "CAPS="caps
    Return 0

help_me:
    Address ISREDIT;"(caps)=CAPS";"CAPS=OFF"
    Do i=ms To me
        x=n_b(Sourceline(i),'.ZFIRST')
    End
    "CAPS="caps;Address
    Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
n_b:Parse Arg xx,yy;If Datatype(yy)/='NUM' Then yy=1
    "LINE_BEFORE" yy"= NOTELINE (xx) + MASKLINE";Return 0
n_b:xx=Arg(1);"LINE_BEFORE" Arg(2) "= NOTELINE MASKLINE + (xx)";Return 0
