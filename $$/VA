/*--------------------------ooo00 REXX 00ooo--------------------------*/
VA:va_ver='1.08'
    n_s1=mark(2)    /* Mark Start */
/*
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* VA:      (Vsam Alter)                                              */
/*                                                                    */
/* Routine to generate JCL to issue ALTER commands in batch for       */
/* rename of VSAM dataset and related components.                     */
/* Generate the JCL for use with other applications.                  */
/*                                                                    */
/* Will append BackOut rename JCL (after trailing "//").              */
/*                                                                    */
/* If newname is longer than oldname data and index component may be  */
/* truncated to keep name under 45 bytes long.                        */
/*                                                                    */
/* Can be used to rename on-line.                                     */
/*                                                                    */
/* Uses panel VAP1 which is self generating out of this member.       */
/*                                                                    */
/* Parameters:                                                        */
/*   Positional:-                                                     */
/*    new  - New dataset name.                                        */
/*   Keyword:-                                                        */
/*    /F   - Force processing even if dataset does not exist. Assumes */
/*           KSDS dataset and creates renames for '.DATA' and '.INDEX'*/
/*           components.                                              */
/*    /RD  - Returns rename data in the Queue                         */
/*    /SUB - Submit job for batch processing                          */
/*    /T   - Turn trace on (for debugging).                           */
/*                                                                    */
/* Packaging:                                                         */
/*   REXX:                                                            */
/*    $ALKHLQO - Other than author's userid.                          */
/*    $ZTEMPF  - Global temporary dataset allocator.                  */
/*    VA       - This driver.                                         */
/*   Panels:                                                          */
/*    VAP1     - Data entry panel. Self extracting from 'VA' program. */
/*                                                                    */
/*--------------------------------------------------------------------*/
*/
n_e1=mark(-2)   /* Mark End   */
    Arg parm#;Address ISPEXEC;ima_macro=0;"CONTROL ERRORS RETURN"
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    w1=Word(parm#,1);If Wordpos(w1,"? ??")=0 Then Signal No_help_#1
    If w1="??" Then Signal Help_me;"ISREDIT (m)=MEMBER";rcm=rc
    If rcm=0 Then Signal Help_me;Signal On Syntax Name Help_me
    Parse Source . . xcmd .;x=BR(xcmd "??");Return
    Mark:If Datatype(Arg(1))/="NUM" Then Arg(1)=1;Return sigl+Arg(1)
    Help_me:Signal Off Syntax;#tr=Trace("o")
    Do i=n_s1 To n_e1;nl=Sourceline(i)
    If rcm=0 Then "ISREDIT LINE_BEFORE 1=NOTELINE (nl)"
    Else Say Substr(nl,1,79);End;Return 0

No_help_#1:
    zedsmsg=
    Parse SOURCE . . xcmd .
/*  isuf='INDEX';dsuf='DATA'                                          */
    isuf=;dsuf=
    hlq=$alkhlqo()

    zerrhm='*';zerralrm='NO';zedsmsg=
    Parse Upper VAR parm#

    "VGET (vamacro) SHARED";If vamacro='Y' Then Signal macro_1
    "VGET (acct) PROFILE"

    If Wordpos('/SUB',parm#)>0 Then Do
        subit='Y';parm#=Delword(parm#,Wordpos('/SUB',parm#),1)
    End
    If Wordpos('/RD',parm#)>0 Then Do
        ret_data='Y';parm#=Delword(parm#,Wordpos('/RD',parm#),1)
        "CONTROL NONDISPL ENTER"
    End
    If Wordpos('/T',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/T',parm#),1);Trace r
    End
    If Wordpos('/F',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/F',parm#),1);force=1
    End;Else force=0
    Parse VAR parm# dsn ndsn .
    If Substr(dsn,1,1)/="'" Then dsn="'"Userid()"."dsn"'"
    #msg=Msg('Off')
    If Sysdsn(dsn)/='OK' Then Do
        zedlmsg=dsn '-' Sysdsn(dsn);"SETMSG MSG(ISRZ001)"
        exist=0
        If \force Then Signal ExiM
    End;Else exist=1
    x=Msg(#msg)

    If exist Then Do
        x=Listdsi(dsn)
        If sysdsorg/='VS' Then Do
            zedlmsg='Can only use this command against a VSAM dataset.'
            "SETMSG MSG(ISRZ001)";Signal ExiM
        End
    End

    panlib=hlq'.VA1.TEMP'
    Call Build_panel
    panel='VAP1';onln='N'

    "LIBDEF ISPPLIB DATASET ID('&PANLIB') STACK"

    odsn=dsn;If ndsn='' Then ndsn="'"Strip(dsn,,"'")".NEW'"
    csr1='NDSN';csp1=Lastpos('.',Substr(ndsn,1,44))+1

scr1a:
    zcmd=
    "DISPLAY PANEL(&PANEL) CURSOR(&CSR1) CSRPOS(&CSP1)"
    If rc/=0 Then Signal exi0
    msg=;csr1=;csp1=

    Parse VAR zcmd cmd p1 p2
    If Word(zcmd,1)='TRACE' Then Do
        Select
            When Word(zcmd,2)='OFF' Then #tr='O'
            When Word(zcmd,2)='ON'  Then #tr='R'
            Otherwise Do                    /* Toggle                 */
                #tr=Trace()
                If Verify(#tr,'NO')=0 Then #tr='R';Else #tr='O'
            End
        End
        x=Trace(#tr);Signal scr1a
    End

/*  If Substr(odsn,1,1)/="'" Then odsn="'"hlq"."odsn"'"               */
    If Substr(ndsn,1,1)/="'" Then ndsn="'"hlq"."ndsn"'"

    If odsn=ndsn Then Do
        zedlmsg="Cloned dataset cannot be the same name as original."
        "SETMSG MSG(ISRZ001)"
        dynline=3
        Signal scr1a
    End
    If smsm='N' & ovol='' Then Do
        zedlmsg="Must specify volume for Non-SMS managed datasets."
        "SETMSG MSG(ISRZ001)"
        dynline=5
        Signal scr1a
    End

    If \exist Then Do
        oclus=odsn;odata=odsn'.DATA';oindx=odsn'.INDEX'
        nclus=ndsn;ndata=ndsn'.DATA';nindx=ndsn'.INDEX'
        Signal Process_data
    End
    x=Outtrap('line.',500,'NOCONCAT');#=Msg('On')
    Address TSO "LISTC ENT("odsn")"
    x=Outtrap('Off');x=Msg(#msg)

    oclus=;odata=;oindx=

    Do i=1 To line.0
        Parse VAR line.i type . dsn
        Select
            When type='CLUSTER' Then oclus=dsn
            When type='DATA'    Then odata=dsn
            When type='INDEX'   Then oindx=dsn
            Otherwise Iterate
        End
    End

    odsuf=Strip(Substr(odata,Lastpos('.',odata)+1),,"'")
    If oindx/= '' Then,
         oisuf=Strip(Substr(oindx,Lastpos('.',oindx)+1),,"'")
    Else oisuf=

    nclus=Strip(ndsn,,"'");nprf=nclus
    Select
        When Length(nclus)>42 Then Do
            Do While Length(nprf'.'odsuf)>43
                nprf=Substr(nprf,1,Lastpos('.',nprf)-1)
            End
            If odata/='' Then ndsuf='.'odsuf
            If oindx/='' Then nisuf='.'oisuf
        End
        When Length(nclus)>38 Then Do
            ndsuf='.D';nisuf='.I'
        End
        Otherwise Do
            If dsuf/='' Then ndsuf='.'dsuf;Else ndsuf='.'odsuf
            If isuf/='' Then nisuf='.'isuf;Else nisuf='.'oisuf
        End
    End
    If odata/='' Then ndata=nprf||ndsuf
    If oindx/='' Then nindx=nprf||nisuf

Process_data:
    If ret_data/='Y' Then Address TSO "NEWSTACK"
    If onln='N' Then Do
        Call jcl_jobcard;Call jcl_1;action='EDIT'
    End
    Else Do
        Call issue_command_online;action='BROWSE'
    End
    If ret_data/='Y' Then Call view_jcl

exi0:
    "LIBDEF ISPPLIB"
    x=Msg('Off');Address TSO "DELETE '"panlib"'"
/*  If ret_data='Y' Then Return 0                                     */
/*  Exit                                                              */
    Return 0
exi4:Return 4
exi8:Return 8
exiM:Return zedlmsg

issue_command_online:
    x=Outtrap('line.',500,'CONCAT')
    Address TSO
    x=Msg('On')
    Select
        When oclus/='' Then Do
            Queue "ALTER   '"oclus"' -"
            Queue "NEWNAME('"nclus"')"
            Queue "*-------------------------------------------*"
            If onln='A' Then "ALTER '"oclus"' NEWNAME('"nclus"')"
            Queue "ALTER   '"odata"' -"
            Queue "NEWNAME('"ndata"')"
            Queue "*-------------------------------------------*"
            If onln='A' Then "ALTER '"odata"' NEWNAME('"ndata"')"
            If oindx /= '' Then Do
                Queue "ALTER   '"oindx"' -"
                Queue "NEWNAME('"nindx"')"
                Queue "*-------------------------------------------*"
                If onln='A' Then "ALTER '"oindx"' NEWNAME('"nindx"')"
            End
        End
        When odata/='' Then Do
            Queue "ALTER   '"odata"' -"
            Queue "NEWNAME('"ndata"')"
            Queue "*-------------------------------------------*"
            If onln='A' Then "ALTER '"odata"' NEWNAME('"ndata"')"
        End
        When oindx/='' Then Do
            Queue "ALTER   '"oindx"' -"
            Queue "NEWNAME('"nindx"')"
            Queue "*-------------------------------------------*"
            If onln='A' Then "ALTER '"oindx"' NEWNAME('"nindx"')"
        End
        Otherwise NOP
    End
    Queue ' '
    Queue "VERIFY DATASET('"nclus"')"
    If onln='A' Then "VERIFY DATASET('"nclus"')"
    x=Outtrap('Off')
    Queue ' '
    Do i=1 To line.0
        Queue line.i
    End

    Address ISPEXEC
    Return 0

jcl_jobcard:
    If ret_data/='Y' Then x=JC('/Q /P(VSAM-Alter) VA')
    Return 0

jcl_1:
    If ret_data/='Y' Then Do
        Queue "//*"
        Queue "//*   IMplement..........."
        Queue "//*"
        Queue "//*"
        Queue "//RENAMEIM EXEC PGM=IDCAMS"
        Queue "//SYSPRINT DD SYSOUT=*"
        Queue "//SYSIN    DD *"
    End
    Select
        When oclus/='' Then Do
            Queue Substr("  ALTER  " oclus,1,55)"-"
            Queue        "  NEWNAME("nclus")"
            Queue " "
            Queue Substr("  ALTER  " odata,1,55)"-"
            Queue        "  NEWNAME("ndata")"
            Queue " "
            If oindx/='' Then Do
                Queue Substr("  ALTER  " oindx,1,55)"-"
                Queue        "  NEWNAME("nindx")"
                Queue " "
            End
        End
        When odata/='' Then Do
            Queue Substr("  ALTER  " odata,1,55)"-"
            Queue        "  NEWNAME("ndata")"
            Queue " "
        End
        When oindx/='' Then Do
            Queue Substr("  ALTER  " oindx,1,55)"-"
            Queue        "  NEWNAME("nindx")"
            Queue " "
        End
        Otherwise NOP
    End
    Queue "  /* VERIFY DATASET('"nclus"') */"
    Queue ' '

    If ret_data/='Y' Then Do
        Queue "/*"
        Queue "//"
        Queue "  "
        Queue "//*"
        Queue "//*   BackOut............."
        Queue "//*"
        Queue "//*"
        Queue "//RENAMEBO EXEC PGM=IDCAMS"
        Queue "//SYSPRINT DD SYSOUT=*"
        Queue "//SYSIN    DD *"
        Select
            When oclus/='' Then Do
                Queue        "  ALTER  "nclus" -"
                Queue Substr("  NEWNAME(" oclus,1,55)")"
                Queue " "
                Queue        "  ALTER  "ndata" -"
                Queue Substr("  NEWNAME(" odata,1,55)")"
                Queue " "
                If oindx/='' Then Do
                    Queue        "  ALTER  "nindx" -"
                    Queue Substr("  NEWNAME(" oindx,1,55)")"
                    Queue " "
                End
            End
            When odata/='' Then Do
                Queue        "  ALTER  "ndata" -"
                Queue Substr("  NEWNAME(" odata,1,55)")"
                Queue " "
            End
            When oindx/='' Then Do
                Queue        "  ALTER  "nindx" -"
                Queue Substr("  NEWNAME(" oindx,1,55)")"
                Queue " "
            End
            Otherwise NOP
        End
        Queue "  /* VERIFY DATASET('"oclus"') */"
        Queue ' '
        Queue "/*"
        Queue "//"

        Queue ''
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Process the JCL. Present under ISPF editor and auto submit if so   */
/* requested.                                                         */
/*--------------------------------------------------------------------*/
view_jcl:
    If subit/='SUB' Then Do
        Queue ''
        ztempf=$ztempf();dd='ZT'Time('s')
        Address TSO "ALLOC DD("dd") DS('"ztempf"') SHR REU"
        Address TSO "EXECIO * DISKW" dd "(FINIS"
        "LMINIT DATAID(DATAID) DDNAME("dd")"
        If action='EDIT' Then Do
            vamacro='Y';"VPUT (vamacro) SHARED"
            "EDIT DATAID(&DATAID) MACRO("xcmd")"
        End
        Else "BROWSE DATAID(&DATAID)"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD("dd")";x=$ztempf(ztempf,'/D')
        Address TSO 'DELSTACK'
        vamacro=;"VPUT (vamacro) SHARED"
        Signal exi0
    End

    Queue "ZZ"
    #msg=Msg('On');x=Outtrap('line.',10,'NOCONCAT')
    Address TSO "SUBMIT * END(ZZ)"
    x=Msg(#msg);x=Outtrap('Off')

    Address TSO 'DELSTACK'

    Do i=1 To line.0
        If Index(line.i,'SUBMITTED')>0 Then Do
            line=' 'line.i
            Parse VAR line ' JOB ' rest
            zedsmsg=;zedlmsg='JOB' rest
            Return 0
        End
    End

nl: Parse Arg zz;"ISREDIT LINE_BEFORE .ZFIRST=NOTELINE (zz)";Return 0
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

macro_1:
    vamacro=;"VPUT (vamacro) SHARED"
    If \ima_macro Then Do
        zedlmsg='Invalid macro environment'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    Address ISREDIT;"RESET"
/*--------------------------------------------------------------------*/
/* Set up notelines for the JCL generated                             */
/*--------------------------------------------------------------------*/
    n_st=mark(2)                            /* Mark next line         */
/*

    You can manually submit this JCL from the command line
                       - or -
    Copy it to another member for later use
                       - or -
    Submit it in 1 step by passing a parameter of "SUB" to the command
    and bypass this edit session.
                       - or -
    Apply for 2 free Ginsu knives.

*/
    n_en=mark(-2)                           /* Mark prev 2 line       */

    "(caps)=CAPS";"CAPS=OFF"
    x=nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line=Sourceline(i)
        x=nl('*'Substr(line,1,70)'*')
    End
    x=nl('*'Copies('-',70)'*')
    "CAPS=(caps)";Address
    Exit

/*--------------------------------------------------------------------*/
/* Create a panel PDS for LIBDEF'ing.                                 */
/*--------------------------------------------------------------------*/
Build_panel:
    mempref='VAP'
    #panel1=1                               /* First panel number     */
    #panels=1                               /* Number of panels       */


    #msg=Msg('Off')
    Address TSO
    "DELETE '"panlib"'"
    dd='IA'Time('s')
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
    "ALLOC DA('"panlib"') NEW CATALOG TRACKS SPACE(2,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0)" unitvol "DIR(2)",
       "RECFM(F B) REU"
    "FREE DA('"panlib"')"
    x=Msg(#msg)

    Do i=#panel1 To #panels
        member=mempref||i
        Interpret "Call make_mem_"i
        Call build_queue
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    #i_backup=i;#j_backup=j
    #tr=Trace('O')
    Do i=n_st To n_en
        Queue Sourceline(i)
    End
    x=Trace(#tr)
    Queue ''
    i=#i_backup;j=#j_backup

    "ALLOC F("dd") DA('"panlib"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE F("dd")"
    "DELSTACK"
    Return 0

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1:n_st=mark(2)
/*
)ATTR  DEFAULT(%+$)
 ~ TYPE(TEXT) INTENS(HIGH) SKIP(ON)
 @ TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
 ` TYPE(TEXT) INTENS(LOW) COLOR(GREEN)
 ¬ TYPE(OUTPUT) INTENS(HIGH) COLOR(YELLOW) CAPS(OFF)
 ? TYPE(INPUT) INTENS(NON)
 _ TYPE(INPUT) INTENS(HIGH) HILITE(USCORE)
)BODY EXPAND(\\) LMSG(MYLMSG)
@\-\ Alter VSAM components \-\
%&SID ===>_ZCMD                                                               +
¬MYLMSG
+
+Enter newname for:@&ODSN
+   New DSNAME%===>_NDSN                                          ~<=
+Change the default suffix to desired values. (Non-sticky fields.)
+   Data  suff%===>_DSUF    ~<=+{Change if you don't want to use the original
+   Index suff%===>_ISUF    ~<=+{suffixes.
+Online change%===>_Z~<=@S+for on-line Simulation
+                       @A+for on-line Aplication
+If altering the cluster, data and index components will have the above default
+suffixes appended respectively.
+Data and Index components altered explicitly will use new name only.
+You may change the old name to generate@what if+JCL.
+This is%NOT+an auto JCL submit process.
+
+
+Use@END+PF key to abandon processing.
)INIT
   &SID = &ZSYSID
   .ZVARS = '(ONLN)'
)PROC
/*  Old DSNAME%===>_ODSN                                          ~<= */
/* VER(&ODSN,NB,DSNAMEQ)                                              */
   VER(&NDSN,NB,DSNAMEQ)
   VER(&DSUF,NAME)
   VER(&ISUF,NAME)
   VER(&ONLN,NB,LIST,N,S,A)
)END
*/
    n_en=mark(-2);Return 0
