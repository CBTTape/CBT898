/******************************** REXX ********************************/
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* VAPF: Validate APF status of selected lines (of JCL).              */
/*                                                                    */
/* Edit macro to format JCL code. For further details scroll to the   */
/* bottom or invoke it with a '?' parameter.                          */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Address ISREDIT
    "(status)=USER_STATE";"(caps)=CAPS";"CAPS=OFF"
    If Wordpos(Word(parm#,1),'? /? /H HELP')>0 Then Signal TSO_help

nohelp:
    "(lev)=MACRO_LEVEL"
    If lev>1 Then Do
        Parse VAR parm# labf ',' labt ',' lcmd parm#
        If parm#/='' Then Call Parse_parms
        zfrange=labf;zlrange=labt
    End
    Else Do
        "(last)=LINENUM .ZLAST"
        If parm#/='' Then Call Parse_parms
        If \Datatype(zfrange,'W') Then Do
            "PROCESS RANGE C";"(cmd)=RANGE_CMD"
            If cmd='C' Then Do
               "(zfrange)=LINENUM .ZFRANGE";"(zlrange)=LINENUM .ZLRANGE"
            End
            Else Do
                If \Datatype(zfrange,'w') Then Do
                    "(zfrange)=CURSOR";zlrange=zfrange
                End
            End
        End
    End

    apf_list=apfl('/R')
    xx='APF verification in progress:'
    "RESET"
    "LINE_BEFORE &ZFRANGE=NOTELINE (xx)"
    Do i=zfrange To zlrange
        "(line)=LINE" i
        If Substr(line,1,3)='//*' Then Iterate
        Parse VAR line 'DSN=' dsn .;Parse VAR dsn dsn ',' .
        If dsn='' Then dsn=XB('/P',line)
        If dsn='' Then xx=0
        Else Do
            dsn=$Evalamp(dsn)
            x=Listdsi("'"dsn"'");xx=Wordpos(dsn,apf_list)
        End
        If xx=0 Then Do
            If x=0 Then xx='On('sysvolume') ??????';Else xx='?????? ??????'
            xx=xx 'not APF authorised'
        End
        Else Do
            av=
            Do While xx>0
                av=av Word(apf_list,xx+1);xx=Wordpos(dsn,apf_list,xx+2)
            End
            If Wordpos(sysvolume,av)>0 Then xx='** OK **',
                'APFvol('Space(av,1,',')')'
            Else Do
                If av='*SMS*' & sysreason=30 Then xx='not SMS volume'
                Else xx=
                xx='On('sysvolume') APFvol('Space(av,1,',')')' xx
            End
        End
/*      xx=Substr(' ',1,Index(line,dsn)-1)xx                          */
        "LINE_BEFORE &I=NOTELINE (xx)"
    End

ext01:
    "CAPS=(caps)";"USER_STATE=(status)"
    Return 0

err01:
    Address ISPEXEC "SETMSG MSG(GC009)"
    Signal ext01

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    Parse Upper VAR parm# parm#
    #tr=Parse_cons('TRACE','R','O')
    If #tr='O' Then #rt=Parse_cons('/TR','R','O')

/*--------------------------------------------------------------------*/
/* Test for range parameter supplied                                  */
/*--------------------------------------------------------------------*/
    zfrange=Parse_cons('-',,'NULL','WORD')
    If zfrange/='' Then Do
        Parse VAR zfrange zfrange '-' zlrange
        If zfrange='' Then zfrange=1
        If Datatype(zfrange)/='NUM' Then Do
            gc009="Invalid FROM range."
            Signal err01
        End
        If zlrange='' Then zlrange=last
        If Datatype(zlrange)/='NUM' Then Do
            gc009="Invalid TO range."
            Signal err01
        End
        If zlrange>last Then zlrange=last
    End

/*--------------------------------------------------------------------*/
/* Test for repeat parameter                                          */
/*--------------------------------------------------------------------*/
    zfrange=Parse_cons('.',,'NULL','WORD')
    If zfrange/='' Then Do
        Parse VAR zfrange zfrange '.' zlrange
        If zfrange='' Then zfrange=1
        If Datatype(zfrange)/='NUM' Then Do
            gc009="Invalid FROM range."
            Signal err01
        End
        If zlrange='' Then zlrange=last
        If Datatype(zlrange)/='NUM' Then Do
            gc009="Invalid TO range."
            Signal err01
        End
        zlrange=zlrange+zfrange-1
        If zlrange>last Then zlrange=last
    End

    all=Parse_cons('ALL',1,0,1)
    If all Then do;zfrange=1;zlrange=last;End
/*--------------------------------------------------------------------*/
/* Test for single line pointer                                       */
/*--------------------------------------------------------------------*/
    Parse VAR parm# xx .
    If Datatype(xx)='NUM' Then Do
        If xx>last Then xx=last
        zfrange=xx;zlrange=xx
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Tutorial....                                                       */
/*--------------------------------------------------------------------*/
TSO_help:
ms=mark(2)
/*

 VAPF: Verify APF status.

 This routine is designed to be applied to JCL to verify the range of
 datasets selected are APF authorised to the correct volume. This is
 a real time check with the "APF list" in memory.

 It will parse each line and extract the "DSN=" value. If no value is
 returned then it will invoke "XB" to parse the line with a valid
 dataset name (this may not be what you want).

 It will then call a routine to return all the APF listed datasets
 with their respective volumes. Command "LISTDSI" is used to compare
 the actual volume with that from the APF list.
 A 'NOTELINE' will be placed above the line accordingly.

 Lines with "//*" in col 1 wil be ignored.                                   */

 Parameters:
    s-e        - Start line (s) to end line (e)
    s.r        - Start line (s) repeat number (r)
    ALL        - All lines
    nnn        - Line number nnn only

 This routine uses REXX program "APFL" which has an option to return
 dual words per APF authorised dataset being the dataset name and it's
 respective volume (or '*SMS* ' to specify SMS managed volume).
 If the datasets is specified as SMS managed, the actual volume will
 be checked for SMS management.

 May require routine "$EVALAMP" to evaluate variable substitution in
 JCL if necessary.

                                *****

*/
    me=mark(-2)
    Address ISREDIT
    If \Datatype(where,'W') Then where=1
    x=n_b(Centre(' ooo000OOOO000ooo ',72,'*'),where)
    Do i=ms To me;x=n_b('*'Substr(Sourceline(i),1,70)'*',where);End
    x=n_b(Centre(' End ',72,'*'),where);x=n_b(' ',where)
    "CAPS=(caps)"
    Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
n_b:xx=Arg(1);"LINE_BEFORE" Arg(2) "= NOTELINE (xx)";Return 0
