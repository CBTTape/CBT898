/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* VSAMANAL: VSAM ANALyser.                                           */
/*                                                                    */
/* Routine to report on exceptions to VSAM datasets.                  */
/*                                                                    */
/* For further details scroll to the bottom of this member or enter   */
/* "VSAMANAL ?" on the command line.                                  */
/*                                                                    */
/*--------------------------------------------------------------------*/
VSAMANAL:vsamanal_ver='1.01'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    Parse Upper VAR parm# parm#;Parse SOURCE . . xcmd .

Initialise_variables:
    Interpret xcmd'='
    hlq=Sysvar(Syspref);ex_env=Sysvar(Sysenv)
    If hlq='' Then hlq=Userid();Else If hlq/=Userid() Then hlq=hlq'.'Userid()
    Parse Value '' With dsname_list parm@
    Parse Value Copies('0 ',20) With il ia linepo.0 exc_w nrm_w ei .
    Parse Value '1 'Copies('N ',20) With wpos vsam c_stats jcl exc_inp .
    d_vaifile ="'"hlq".VSAMANAL.$INPUT(SOURCE01)'" /* Def Source   */
    d_vaefile ="'"hlq".VSAMANAL.$INPUT(RULES01)'"  /* Def rules     */
    d_vareport="'"hlq".VSAMANAL.REPORT.TEMP'"      /* Def Report    */
    d_vaexcept="'"hlq".VSAMANAL.EXCEPT.TEMP'"      /* Def Exception */
    profFile='VAIFILE VAEFILE VAREPORT VAEXCEPT'
    "VGET ("profFile") PROFILE"
    If vaifile ='' Then vaifile =d_vaifile
    If vaefile ='' Then vaefile =d_vaefilee
    If vareport='' Then vareport=d_vareport
    If vaexcept='' Then vaexcept=d_vaexcept

    dde='VAEFILE';dde_rc=Listdsi(dde "FILE")  /* Exception parms      */
    If dde_rc=0 Then d_vaefile="'"sysdsname"'"
    ddi='VAIFILE';ddi_rc=Listdsi(ddi "FILE")  /* VSAM files 4 analysis*/
    If ddi_rc=0 Then d_vaifile="'"sysdsname"'"
    ddj='VJ'Time('s')                         /* Gen'd JCL DD         */
    dd1='VAL'Time('s')                        /* LISTCAT output       */
    dd2='VAV'Time('s')                        /* VSAMCSM1 var list*/
    dd3='VAREPORT';dd3_rc=Listdsi(dd3 "FILE") /* Full Report          */
    If dd3_rc=0 Then vareport="'"sysdsname"'"
    dd4='VAEXCEPT';dd4_rc=Listdsi(dd4 "FILE") /* Exception Report     */
    If dd4_rc=0 Then vaexcept="'"sysdsname"'"

    If Word(parm#,1)='?' Then Do
        x=Msg('Off');Trace o;Signal on Error Name Help_me_err;retcmd=
        Address TSO '%xBR %'xcmd '??'
        Exit
    End
    Do 3                                    /* 2bsure, 2bsure         */
        Address TSO "DELSTACK"
    End

    dynline=3;dyncol=23

    x=Parse_parms()

    If bp_panel='Y' Then Signal Done_with_panel
    zedlmsg='Verify and change dataset name(s) as required.',
            'Clear dataset name(s) to pick up defaults.'
Initialise_variables_End:

Mainline:
scr1_build:
    x=Build_screen_1()
    #files_in=vaifile vaefile vareport vaexcept
/*--------------------------------------------------------------------*/
/* Display data entry screen                                          */
/*--------------------------------------------------------------------*/
scr1:zcmd=
    multquit=;"VPUT (MULTQUIT)"
    "SETMSG MSG(ISRZ001)"
    "DISPLAY PANEL(DYNAMICZ)"
    If rc/=0 Then Do
        zedlmsg='Previous function terminated.'
        "SETMSG MSG(ISRZ001)"
        Exit
    End
    Parse Value '' With dynline dyncol zedlmsg
    Parse VAR zcmd 1 action zparm1 zparm2;Parse Var zparm1 actfile +3 .
    If action='?' Then Do
        Signal on Syntax Name Help_me_err;retcmd='Signal scr1'
        x=BR(xcmd "??");Signal scr1
    End
    If action='TRACE' Then Do
        If zparm1='OFF' Then #tr=Trace('o');Else #tr=TRace('r')
        Signal scr1
    End

/* Extract parameters from screen input                               */
    #tr=Trace('o')
    x=Pvif('vsam'    ,'Y N',9,28,1)
    x=Pvif('c_stats' ,'Y N',10,28,1)
    x=Pvif('jcl'     ,'Y N',11,28,1)
    x=Pvif('exc_inp' ,'Y N',12,28,1)
    x=Pvif('wpos'    ,'1 2 3',13,28,1)
    x=Pvif('ex_only' ,'Y N',14,28,1)
    x=Pvif('prep_cs' ,'Y N',15,28,1)
    x=Pvif('batch'   ,'Y N',16,28,1)
    x=Pvif('vsamcrmc','Y N',17,28,1)
    x=Pvif('simulate','Y N',18,28,1)
    x=Pvif('trace_it','Y N',19,28,1)
/* Vefify input file                                                  */
    x=Trace(#tr)                            /* Restore trace setting  */
    vaifile=Strip(Substr(line3,23,46))
    x=ver_file('vaifile',3,23);If x>0 Then Signal scr1_build
    err=0;xx=Listdsi(vaifile)
    Select
        When (xx=4 & sysreason=12 & vsam='Y')Then Nop
        When (xx=0 & vsam='N')Then Nop
        Otherwise Do
            zedlmsg='File is not a VSAM dataset or does not exist.',
                    'Re-eneter and try again.'
            dynline=3;dyncol=23;err=1
        End
    End
    If err then Signal scr1_build

/* Vefify exception/rule file                                         */
    vaefile=Strip(Substr(line4,23,46))
    x=ver_file('vaefile',4,23);If x>0 Then Signal scr1_build
/* Vefify exception file                                              */
    vaexcept=Strip(Substr(line5,23,46))
    x=ver_file('vaexcept',5,23);If x>15 Then Signal scr1_build
/* Vefify report file (full)                                          */
    vareport=Strip(Substr(line6,23,46))
/* If any file changed since screen display, redisplay                */
    x=ver_file('vareport',6,23);If x>15 Then Signal scr1_build
/* Look at file if requested                                          */
    If Wordpos(action,'VIEW BROWSE EDIT')>0 Then Do
        Parse VAR cursor 'LINE' line#
        If zparm1/='' Then actfile=Substr(zparm1,1,3)
        Else actfile=$TTRUNC(line#,,'4,RULE 5,EXC 6,REP *,SRC')
        err=0
        Select
            When actfile='SRC' Then Do
                If vsam='Y' Then Do
                    zedlmsg='Cannot "'action'" a VSAM dataset.'
                    err=1
                End
                Else file=vaifile
            End
            When actfile='REP' Then file=vareport
            When actfile='EXC' Then file=vaexcept
            When actfile='RUL' Then file=vaefile
            Otherwise file=vaefile
        End
        Signal on Error Name error_on_ACTION
        If \err Then action "DATASET(&FILE)"
error_off_ACTION:Signal off Error
        dynline=
        Signal scr1_build
error_on_ACTION:
        If rc>4 Then zedlmsg='Error on "'action'", RC='rc'.'
        dynline=line#
        Signal error_off_ACTION
    End
    If (#files_in/=vaifile vaefile vareport vaexcept) Then Signal scr1_build

    If c_stats='Y' Then Do
        If Wordpos('Y',vsam)>0 Then Do
            zedlmsg='Input type VSAM/JCL/Exceptions/CICS_stats are',
                    'mutually exclusive. Only one can be set to "Y".'
            dynline=10;dyncol=28;Signal Scr1
        End;Else wpos=2
    End
    If jcl='Y' Then Do
        If Wordpos('Y',vsam c_stats)>0 Then Do
            zedlmsg='Input type VSAM/JCL/Exceptions/CICS_stats are',
                    'mutually exclusive. Only one can be set to "Y".'
            dynline=11;dyncol=28;Signal Scr1
        End;Else comment_char='//*'
    End
    If exc_inp='Y' Then Do
        If Wordpos('Y',vsam c_stats jcl)>0 Then Do
            zedlmsg='Input type VSAM/JCL/Exceptions/CICS_stats are',
                    'mutually exclusive. Only one can be set to "Y".'
            dynline=12;dyncol=28;Signal Scr1
        End
    End
    If exc_inp='Y' Then Do
        vaifile=vaexcept
        If #exc_inp/=exc_inp Then Do
            zedlmsg='Previous extract used as source.',
                    'Verify and change Source dataset name as required.',
                    'Clear dataset name(s) to pick up defaults.'
            dynline=3;dyncol=23;Signal Scr1_build
        End
    End

Done_with_panel:
/*--------------------------------------------------------------------*/
/* Apply the rules setup in VSAMANA$ (in-stream process) and doctor   */
/* some fields for output.processing purposes.                        */
/*--------------------------------------------------------------------*/
    If exc.0='EXC.0' Then Do                /* First time through     */
        x=VSAMANA$()
        va='ISHROR';va='ISHROS';v0='ISHRO'
        ec_report.v0=ec_report.va ec_report.vb
        va='DSHROR';va='DSHROS';v0='DSHRO'
        ec_report.v0=ec_report.va ec_report.vb
        va='IFREEA';va='IFREEI';ec_report.va=ec_report.va ec_report.vb
        va='DFREEA';va='DFREEI';ec_report.va=ec_report.va ec_report.vb
        va='IPRIM';vb='ISEC';ec_report.va=ec_report.va ec_report.vb
        va='DPRIM';vb='DSEC';ec_report.va=ec_report.va ec_report.vb
        If vsamcrmc='Y' Then Do
            vsamcrmc='Y' xcmd;Interpret xcmd'=vsamanal_val_vars'
            "VPUT ("xcmd") SHARED"
        End
    End
    If c_stats='Y' & prep_cs='Y' Then Do
        "ISREDIT (session)=SESSION"
        If Substr(session,1,1)='E' Then Do
            zedlmsg='You are in an edit session and this would be a',
                    'destructive operation. Rather than risk you forgetting',
                    'to CANCEL the session at termination',
                    'I have chosen not to action the',
                    'command. I insist a VIEW session for your next',
                    'attempt to process.'
            "SETMSG MSG(ISRZ001)"
            Return 0
        End
        "ISREDIT (status)=USER_STATE"
        "ISREDIT (dataset)=DATASET";"ISREDIT (memb)=MEMBER"
        If memb/='' Then dataset=dataset'('memb')'
        "ISREDIT X ALL";"ISREDIT F '.' ALL"
        "ISREDIT X '        ' 4 ALL"
        "ISREDIT C 'CICS' '* CICS' 1 ALL"
        "ISREDIT C 'Process' '* Process' 1 ALL"
        "ISREDIT DEL ALL X"
        zedlmsg='Data has been prepared. You can export it or',
                "save and run it in batch using the following command:",
                "ISPSTART CMD(%"xcmd" '"dataset"' /W2)"
        "SETMSG MSG(ISRZ001)"
        "ISREDIT USER_STATE=(status)"
        Return 0
    End
    "VPUT ("profFile") PROFILE"
    If batch='Y' Then Signal Create_jcl

    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSALLDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
    If exc_inp='Y' Then Do
        linei.0=Extract_from_extract()
        If linei.0=0 Then Do
            dynline=12;dyncol=23
            zedlmsg='Previous exception output cannot be used as input',
                    'as it is empty.'
            Signal scr1
        End
    End

/*--------------------------------------------------------------------*/
/* Allocate files used (LISTCAT output and report/exception           */
/*--------------------------------------------------------------------*/
    listcout=hlq"."dd1".TEMP"
    If Sysdsn("'"listcout"'") = 'OK' Then,
        Address TSO "ALLOC F("dd1") DA('"listcout"') SHR REUSE"
    Else,
        Address TSO "ALLOC F("dd1") DA('"listcout"') NEW SPACE(5,5)",
             "TRACKS" unitvol "CATALOG RECFM(V B) LRECL(125) BLKSIZE(0)"
    If dd3_rc>0 Then Do
        #m=Msg('Off');Address TSO "DELETE "vareport;x=Msg(#m)
        Address TSO "ALLOC F("dd3") DA("vareport") NEW CATALOG UNIT(SYSDA)",
                    "RECFM(F B) LRECL(256) BLKSIZE(0) SPACE(600,90) TRACKS"
    End
    If dd4_rc>0 Then Do
        #m=Msg('Off');Address TSO "DELETE "vaexcept;x=Msg(#m)
        Address TSO "ALLOC F("dd4") DA("vaexcept") NEW CATALOG",
                    "RECFM(F B) LRECL(256) BLKSIZE(0) SPACE(300,30)",
                    "TRACKS UNIT(SYSDA)"
    End

    If c_stats='Y' & prep_cs='Y' Then Signal VSAM_loop
    If exc_inp='Y' Then Signal VSAM_loop
    If vsam='Y' Then Do
        dsname=Strip(vaifile,,"'");linei.0=0
        Signal Have_dataset_name
    End

    If ddi_rc>0 Then Address TSO "ALLOC F("ddi") DSN("vaifile") SHR REU"
    Address TSO "EXECIO * DISKR "ddi" (STEM linei. FINIS)"
    If ddi_rc>0 Then Address TSO "FREE F("ddi")"

/*--------------------------------------------------------------------*/
/* Loop through input(s)                                              */
/*--------------------------------------------------------------------*/
VSAM_loop:
    If il>=linei.0 Then Do
        Address TSO
        zedlmsg="File "vaifile" processing sucessfully completed."
/*--------------------------------------------------------------------*/
/* End of input, output exceptions and write summary                  */
/*--------------------------------------------------------------------*/
        If exc_w>0 Then Do
            "EXECIO 0 DISKW "dd4" (FINIS"
            "EXECIO * DISKR "dd4" (STEM lineru. FINIS)"
            "EXECIO * DISKW "dd4" (STEM lineru.)"
            x=Add_summary_2_exceptions()
            "EXECIO * DISKW "dd4" (FINIS"
        End
/*--------------------------------------------------------------------*/
/* End of input, output report(s)                                     */
/*--------------------------------------------------------------------*/
        If exc_w=0 Then Do
            "NEWSTACK"
            Queue lined.1;Queue ' '
            Queue ' Input file:' vaifile
            Queue ' Rules file:' vaefile
            Queue ' '
            Queue 'No exceptions found this run.'
            Queue ' ';Queue ''
            "EXECIO * DISKW "dd4" (FINIS"
            exc_w=1
        End
        If ex_env='BACK' Then Say zedlmsg
        Else Do
            Address ISPEXEC "SETMSG MSG(ISRZ001)"
            If nrm_w>0 Then Do
                Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd3")"
                Address ISPEXEC "BROWSE DATAID(&DATAID)"
                Address ISPEXEC "LMFREE DATAID(&DATAID)"
            End
            If exc_w>0 Then Do
                Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("dd4")"
                Address ISPEXEC "BROWSE DATAID(&DATAID)"
                Address ISPEXEC "LMFREE DATAID(&DATAID)"
            End
        End
        #m=Msg('Off')
        "FREE F("dd1")";"DELETE '"listcout"'"
        "FREE F("dd3")";"FREE F("dd4")"
        "ALLOC F("dd3") DA("vareport") SHR RELEASE"
        "ALLOC F("dd4") DA("vaexcept") SHR RELEASE"
        "EXECIO 0 DISKW "dd3" (FINIS"
        "EXECIO 0 DISKW "dd4" (FINIS"
        "FREE F("dd3")";"FREE F("dd4")"
        If ex_env='BACK' Then Return 0
        Address
        Signal scr1
    End
    il=il+1;Parse VAR linei.il w1 w2 w3 1 ch11 +1 1 ch13 +3
    If Wordpos(comment_char, ch11 ch13)>0 Then Signal VSAM_loop
    If jcl='Y' Then Do
        Parse Value Translate(linei.il,' ',',') With 'DSN='dsname .
        If dsname='' Then Signal VSAM_loop
    End
    Else Do
        If w1='*' Then Signal VSAM_loop
        Interpret 'dsname=w'wpos
    End
    ia=0
/*--------------------------------------------------------------------*/
/* Extracted dataset name. Check if duplicated or valid VSAM.         */
/*--------------------------------------------------------------------*/
Have_dataset_name:
    dsname=Translate(dsname)
    If Wordpos(dsname,dsname_list)>0 Then Signal VSAM_loop
    Else dsname_list=dsname_list dsname
    x=Listdsi("'"dsname"'")
    If sysdsorg/='VS' Then Do
        zedlmsg="Dataset '"dsname"' not a VSAM dataset."
        Say zedlmsg
        Signal VSAM_loop
    End

/*--------------------------------------------------------------------*/
/* Extracted dataset name from input, now process it                  */
/*--------------------------------------------------------------------*/
listcat_it:
    #m1=Msg('On');x=Outtrap('linec.',500,'NOCONCAT')
    Address TSO "LISTC ENT('"dsname"') OFILE("dd1") ALL"
    listc_rc=rc
    x=Outtrap('Off');x=Msg(#m1)
    "VPUT (vsamcrmc) SHARED"
    If simulate='Y' Then Do
        "VGET (MULTQUIT)";If multquit/='*' Then Do
            zedlmsg='Temporary edit to set exceptions for reporting...'
            "SETMSG MSG(ISRZ001)"
            "EDIT DATASET('&LISTCOUT')"
        End
    End
    "VIEW DATASET('&LISTCOUT') MACRO(VSAMCRM1)"
    "VGET (VSAMVAR) SHARED";"VGET (&VSAMVAR) SHARED"

    If Queued()>0 Then Do
        "VGET (MULTQUIT)";If multquit='*' Then Address TSO "DELSTACK"
        Else Do
            ztempf=$ztempf()
            Address TSO "ALLOC F("dd2") DSN('"ztempf"') SHR REU"
            Address TSO "EXECIO * DISKW "dd2" (FINIS"
            "LMINIT DATAID(DATAID) DDNAME("dd2")"
            "BROWSE DATAID(&DATAID)"
            "LMFREE DATAID(&DATAID)"
            Address TSO "FREE F("dd2")";xx=$ztempf(ztempf,'D')
        End
    End
    If path='Y' Then Do
        linepo.1='PATH-----'dsname 'replaced by' ass1
        linepo.0=1
        Parse Value Translate(ass1,' ','-') With . ass1
        dsname=Space(ass1,1,'-')
        Signal listcat_it
    End
    Address TSO "NEWSTACK"
    If first_time='FIRST_TIME' Then Do
        lined.1='Run on' Date('e') 'at' Time('C') 'by' Userid()'.'
        first_time='N'
    End
    x=vtoc_it()

    exception=
    If ex_only='Y' Then Signal Exception_Report

Report_it:
/*--------------------------------------------------------------------*/
/* Create normal report entries                                       */
/*--------------------------------------------------------------------*/
Normal_Report:
    nrm_w=nrm_w+1
    Do i=1 To linepo.0
        Queue linepo.i
    End

    x=Format_data()
    Queue ' ';Queue Centre('***',80)
    Queue ''

    Address TSO "EXECIO * DISKR "dd3" (STEM linerr. FINIS)"
    Address TSO "EXECIO * DISKW "dd3" (STEM linerr.)"
    Address TSO "EXECIO * DISKW "dd3" (FINIS"

/*--------------------------------------------------------------------*/
/* Select what needs to be reported in the exception report           */
/* If unsure data reported by LISCAT (* suffix) remove it, do our     */
/* test and then restore it.                                          */
/*--------------------------------------------------------------------*/
Exception_Report:
    If vaefile='' Then End_Exception_Report

/*--------------------------------------------------------------------*/
/* Executes the following if "/MBI" requested.                        */
/*--------------------------------------------------------------------*/
    If m_b_i='Y' Then Do
        vars='icaspl icispl ifreea ifreei irecd ireci irecu',
             'dcaspl dcispl dfreea dfreei drecd dreci drecu',
             ''
        Do i=1 To WOrds(vars)
            Parse VAR vars var vars
            Interpret var'=var"*"'
        End
    End
        If \Datatype(icaspl,'W') Then Do
        exception=exception 'MBI'
        o_values=icaspl icispl ifreea ifreei irecd ireci irecu,
                 dcaspl dcispl dfreea dfreei drecd dreci drecu
        Parse Value o_values With,
                    #icaspl #icispl #ifreea #ifreei #irecd #ireci #irecu
                    #dcaspl #dcispl #dfreea #dfreei #drecd #dreci #drecu
        Parse Value Translate(o_values,' ','*') With,
                    icaspl icispl ifreea ifreei irecd ireci irecu,
                    dcaspl dcispl dfreea dfreei drecd dreci drecu
    End;Else o_values=
    Do i=1 To exc.0
        Interpret exc.i
    End
    If o_values/='' Then Parse Value o_values With,
                    icaspl icispl ifreea ifreei irecd ireci irecu,
                    dcaspl dcispl dfreea dfreei drecd dreci drecu
/*--------------------------------------------------------------------*/
/* Remove "NUPG" error detected for CLUSTERS (not AIX)                */
/*--------------------------------------------------------------------*/
    If aix/='Y' Then exception=Space($Cstring(exception,'NUPG',,,,'*'))
    If exception/=''  Then Do
        Address TSO "NEWSTACK"
        If exc_w=0 Then Do                  /* First time headings    */
            Queue lined.1;Queue ' '
            ecl=err_code_list
            Do While ecl/=''
                Parse VAR ecl ec1 ecl
                Queue Left(ec1,5) '-' err_code.ec1
            End
            Queue ' '
            Queue 'The following exception detection rules were processed:'
            Do i=1 To exc.0
                Queue rules.i
            End
            Queue ' ';Queue '*'Copies('-',77)'*';Queue ' '
        End
        ei=ei+1;linex.ei=dsname exception
        Queue 'Exceptions:' exception
        Queue Right('Why',68)
        Do i=1 To linepo.0
            Queue linepo.i
        End
        exception=exception '*'
        x=Format_data()
        Queue ' ';Queue Centre('***',80)
        Queue ''

        Address TSO "EXECIO * DISKR "dd4" (STEM lineru. FINIS)"
        Address TSO "EXECIO * DISKW "dd4" (STEM lineru.)"
        Address TSO "EXECIO * DISKW "dd4" (FINIS"
        exc_w=exc_w+1
    End
/*--------------------------------------------------------------------*/
End_Exception_Report:
    linepo.0=0

/*--------------------------------------------------------------------*/
/* Repeat processing for each AIX found for a cluster.                */
/* AIX will not have an AIX so variable linea. is not bumped.         */
/*--------------------------------------------------------------------*/
If ex_env='BACK' Then Say '#Assoc='Left(asscnt,3) 'DSN='dsname
    Do i=1 To asscnt
        Interpret 'line=ass'i
        Parse Value Translate(line,' ','-') With w1 w2 w3
        If w1/='AIX' Then Iterate
        ia=ia+1;linea.ia=Space(w2 w3,1,'-');linea.0=ia
    End
    If ia<1 Then Signal VSAM_loop
    ia=ia-1;xx=linea.0-ia
    dsname=linea.xx
    Signal Have_dataset_name
End_Mainline_Processing:

/*--------------------------------------------------------------------*/
/* Format the Index and Data components of the report.                */
/* These physical REXX code lines are used to communicate which       */
/* "VSAMCRM1" variables are used in this routine (for help) and also  */
/* to validate variable names in 'rules' definitions. This paragraph  */
/* is executed to pick up the "fmt_Start" and "fmt_End" variables     */
/* (the Queued output is deleted) to parse the sourcelines and        */
/* extract the variable names from them.                              */
/*--------------------------------------------------------------------*/
Format_data:
    #tr=Trace('o')
fmt_Start=Mark(+1)                          /* Must preceed next line */
    x=Fmt(0,dsname,,'*')
    If aix='Y' Then x=Fmt(0,'AIX',,'* MBI')
    Else x=Fmt(0,'CLUSTER',,'* MBI')
    If asscnt>0 Then x=Fmt(1,'Associations:',,'*')
    Do as=1 To asscnt
        Interpret 'yyy=ass'as
        x=Fmt(1,yyy,,'*')
    End
    vn='CDATE' ;x=Fmt(2,cdate,'Created',ec_report.vn)
    vn='HAVEAIX' ;x=Fmt(2,haveaix,'Have AIX',ec_report.vn,'E')
    If aix='Y' Then Do
        vn='AIXUPG'  ;x=Fmt(2,aixupg,'Upgrade',ec_report.vn)
    End
    x=Fmt(2,ikeyp,'Key Position')
    x=Fmt(2,ikeyl,'Key Length')
/*--------------------------------------------------------------------*/
/* Any new exceptions algorithm created should have it's exception    */
/* code(s) appended to "exc_rep" argument of the 'Fmt' invoking code. */
/*--------------------------------------------------------------------*/
Index_rep:
                  x=Fmt(2,'INDEX',,'*')
    vn='INAME'   ;x=Fmt(6,iname,'Assoc. name','*')
    vn='IVOLUME' ;x=Fmt(6,ivolume,'Volume','*')
    vn='ISHRO'   ;x=Fmt(6,'('ishror','ishros')','Share Option',ec_report.vn)
                  x=Fmt(6,ishror,,'-')      /* Dummy field used def'n */
                  x=Fmt(6,ishros,,'-')      /* Dummy field used def'n */
    vn='IIMBED'  ;x=Fmt(6,iimbed,'IMBED',ec_report.vn)
    vn='IREPL'   ;x=Fmt(6,irepl,'REPLICATE',ec_report.vn)
    vn='IREUSE'  ;x=Fmt(6,ireuse,'REUSE',)
    vn='IERASE'  ;x=Fmt(6,ierase,'ERASE on del',)
    vn='IRECI'   ;x=Fmt(6,ireci,'INSERTED',ec_report.vn)
    vn='IRECD'   ;x=Fmt(6,irecd,'DELETED',ec_report.vn)
    vn='IRECU'   ;x=Fmt(6,irecu,'UPDATED',)
    vn='IARECL'  ;x=Fmt(6,iarecl,'Average',)
    vn='IMRECL'  ;x=Fmt(6,imrecl,'Max',)
    vn='ICISZ'   ;x=Fmt(6,icisz,'CI size',ec_report.vn)
    vn='ICIPCA'  ;x=Fmt(6,icipca,'CI/CA',ec_report.vn)
    vn='ICASPL'  ;x=Fmt(6,icaspl,'CA split',ec_report.vn)
    vn='ICISPL'  ;x=Fmt(6,icispl,'CI split',ec_report.vn)
    vn='IFREEA'  ;x=Fmt(6,ifreea','ifreei,'CA/CI Free',ec_report.vn)
    vn='IFREE'   ;x=Fmt(6,ifree,'Free space',ec_report.vn)
    vn='IBUFF'   ;x=Fmt(6,ibuff,'Buffer space',ec_report.vn)
    If ialtype='C' Then x=Fmt(6,'CYLINDER','Units',)
    Else                x=Fmt(6,'TRACK','Units',)
    vn='IPRIM'   ;x=Fmt(6,iprim','isec,'Space',ec_report.vn)
                  x=Fmt(6,isec,,'-')        /* Dummy field used def'n */
    vn='IASPACE' ;x=Fmt(6,iaspace,'HIGH-A-RBA',ec_report.vn)
    vn='IUSPACE' ;x=Fmt(6,iuspace,'HIGH-U-RBA',ec_report.vn)
    vn='IUPERC'  ;x=Fmt(6,iuperc'%','% Used',ec_report.vn)
    vn='IAEXT'   ;x=Fmt(6,iaext,'Extents',ec_report.vn)
                  x=Fmt(4,'VTOC (in tracks):')
    vn='IVALOC'  ;x=Fmt(6,ivaloc,'VTOC alloc',ec_report.vn)
    vn='IVUSED'  ;x=Fmt(6,ivused,'VTOC used',ec_report.vn)
    vn='IVPCT'   ;x=Fmt(6,ivpct'%','VTOC % used',ec_report.vn)
    vn='IVEXT'   ;x=Fmt(6,ivext,'VTOC Extent',ec_report.vn)
Data_rep:
                  x=Fmt(2,'DATA',,'*')
    vn='DNAME'   ;x=Fmt(6,dname,'Assoc. name','*')
    vn='DVOLUME' ;x=Fmt(6,dvolume,'Volume','*')
    vn='DSHRO'   ;x=Fmt(6,'('dshror','dshros')','Share Option',ec_report.vn)
                  x=Fmt(6,dshror,,'-')      /* Dummy field used def'n */
                  x=Fmt(6,dshros,,'-')      /* Dummy field used def'n */
    vn='DIMBED'  ;x=Fmt(6,dimbed,'IMBED',ec_report.vn)
    vn='DREPL'   ;x=Fmt(6,drepl,'REPLICATE',ec_report.vn)
    vn='DREUSE'  ;x=Fmt(6,dreuse,'REUSE',)
    vn='DERASE'  ;x=Fmt(6,derase,'ERASE on del',)
    vn='DRECI'   ;x=Fmt(6,dreci,'INSERTED',ec_report.vn)
    vn='DRECD'   ;x=Fmt(6,drecd,'DELETED',ec_report.vn)
    vn='DRECU'   ;x=Fmt(6,drecu,'UPDATED',)
    vn='DARECL'  ;x=Fmt(6,darecl,'Average',)
    vn='DMRECL'  ;x=Fmt(6,dmrecl,'Max',)
    vn='DCISZ'   ;x=Fmt(6,dcisz,'CI size',ec_report.vn)
    vn='DCIPCA'  ;x=Fmt(6,dcipca,'CI/CA',ec_report.vn)
    vn='DCASPL'  ;x=Fmt(6,dcaspl,'CA split',ec_report.vn)
    vn='DCISPL'  ;x=Fmt(6,dcispl,'CI split',ec_report.vn)
    vn='DFREEA'  ;x=Fmt(6,dfreea','dfreei,'CA/CI Free',ec_report.vn)
    vn='DFREE'   ;x=Fmt(6,dfree,'Free space',ec_report.vn)
    vn='DBUFF'   ;x=Fmt(6,dbuff,'Buffer space',)
    If daltype='C' Then x=Fmt(6,'CYLINDER','Units')
    Else                x=Fmt(6,'TRACK','Units')
    vn='DPRIM'   ;x=Fmt(6,dprim','dsec,'Space',ec_report.vn)
                  x=Fmt(6,dsec,,'-')        /* Dummy field used def'n */
    vn='DASPACE' ;x=Fmt(6,daspace,'HIGH-A-RBA',ec_report.vn)
    vn='DUSPACE' ;x=Fmt(6,duspace,'HIGH-U-RBA',ec_report.vn)
    vn='DUPERC'  ;x=Fmt(6,duperc'%','% Used',ec_report.vn)
    vn='DAEXT'   ;x=Fmt(6,daext,'Extents',ec_report.vn)
                  x=Fmt(4,'VTOC (in tracks):')
    vn='DVALOC'  ;x=Fmt(6,dvaloc,'VTOC alloc',ec_report.vn)
    vn='DVUSED'  ;x=Fmt(6,dvused,'VTOC used',ec_report.vn)
    vn='DVPCT'   ;x=Fmt(6,dvpct'%','VTOC % used',ec_report.vn)
    vn='DVEXT'   ;x=Fmt(6,dvext,'VTOC Extent',ec_report.vn)
fmt_End=Mark(-2)                            /* Must proceed prev line */
    x=Trace(#tr)                            /* Restore trace setting  */
    Return 0
Format_data_End:

/*--------------------------------------------------------------------*/
/* This bit of code formats the output lines for the full report and  */
/* the exception report if there is exceptions and the field is marked*/
/* for reporting on that (or a combination) of that exception.        */
/* Arguments are,                                                     */
/*   1. Pad leading space characters.                                 */
/*   2. Variable value.                                               */
/*   3. Variable's leader description displayed.                      */
/*   4. List of codes that will force an output of that field on      */
/*      matching execption.                                           */
/*      '*' is not an exception but an indicator for 'mandatory'      */
/*          output fields.                                            */
/*      '-' Used to identify valid fields but not printable. Use this */
/*          feature to identify variables that are combined in one    */
/*          output line.                                              */
/*   5. Report type. Valid values,                                    */
/*        E - Only in exception report                                */
/*        R - Only in min report                                      */
/*        blank                                                       */
/*          - Report n both (if applicable)                           */
/*--------------------------------------------------------------------*/
Fmt:Parse Arg pad,val,txt,exc_rep,r_type
    If exc_rep='-' Then Return 0
    If exception/='' Then Do
        If exc_rep='' Then Return 0
        If r_type='R' Then Return 0
        xxx=exc_rep;exc_rep=
        Do While xxx/=''
            Parse VAR xxx xx xxx
            If Wordpos(xx,exception)>0 Then exc_rep=exc_rep xx
        End
        If exc_rep='' Then Return 0
    End
    Else If r_type='E' Then Return 0
    If pad>0 Then p1=Right(' ',pad);Else p1=
    If txt/='' Then txt=Substr(txt,1,12,'.')': '
    oline=p1 || txt || val
    If exception/='' Then,
        oline=Overlay(Strip(Translate(exc_rep,' ','*')),Left(oline,80),66)
    Queue oline
    Return 0

/*--------------------------------------------------------------------*/
/* Use the VTOC command to return space allocated and used            */
/* (Sometimes better detailed than LISTCAT output (??).)              */
/*--------------------------------------------------------------------*/
vtoc_it:
    #m1=Msg('On');x=Outtrap('linev.',500,'CONCAT')
    Parse Value Translate(dvolume,' ',',') With vol .
    Address TSO "VTOC ("vol") LEVEL("dname")",
         "PRINT(NEW (DSN ALLOC USED PCT EX ))"
    Parse Value Translate(ivolume,' ',',') With vol .
    Address TSO "VTOC ("vol") LEVEL("iname")",
         "PRINT(NEW (DSN ALLOC USED PCT EX ))"
    x=Outtrap('Off');x=Msg(#m1)
    Parse Value '? ? ? ? ? ? ? ?' With,
        dvaloc dvused dvpct dvext ivaloc ivused ivpct ivext
    Do i_v=1 To linev.0
        If Index(linev.i_v,dname)>0 Then Do
            Parse VAR linev.i_v . dvaloc dvused dvpct dvext .
            Iterate
        End
        If Index(linev.i_v,iname)>0 Then Do
            Parse VAR linev.i_v . ivaloc ivused ivpct ivext .
            Iterate
        End
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Create JCL to run in Batch                                         */
/*--------------------------------------------------------------------*/
Create_jcl:
    If bp_panel/='Y'Then Do
        parm@='/BIP'
        If trace_it='Y' Then parm@=parm@ '/T'
        If c_stats='Y' Then parm@=parm@ '/ST'
        If exc_inp='Y' Then parm@=parm@ '/OVA'
        If m_b_i='Y' Then parm@=parm@ '/MBI'
        If jcl='Y' Then parm@=parm@ '/J'
        If vsam='Y' Then parm@=parm@ '/V'
        If ex_only='Y' Then parm@=parm@ '/EO'
        parm@=parm@ $TTRUNC(wpos,,'2,/W2 3,/W3 *,/W1')
    End
Address TSO "NEWSTACK"
Queue "//"Userid()"V  JOB (SU1ZIBMS),'VSAMANAL',"
Queue '//             CLASS=S,COND=(4,LT),'
Queue '//             MSGCLASS=X,TIME=1359,REGION=0M,'
Queue '//             NOTIFY=&SYSUID,LINES=9999'
Queue '//*'
Queue '//*MAIN    LINES=(999,W),CLASS=CICSUTIL'
rreue '//*'
Queue '//VARS1  SET VAIFILE='Strip(vaifile,,"'")
Queue '//       SET VAEFILE='Strip(vaefile,,"'")
Queue '//       SET VAREPORT='Strip(vareport,,"'")
Queue '//       SET VAEXCEPT='Strip(vaexcept,,"'")
Queue '//*'
Queue '//*-------------------------------------------------------------------*'
Queue '//* DELETE RESUSABLE DATASETS                                         *'
Queue '//*-------------------------------------------------------------------*'
Queue '//DELETE   EXEC PGM=IEFBR14'
Queue '//VAREPORT DD DISP=(MOD,DELETE),DSN=&VAREPORT,'
Queue '//            UNIT=SYSALLDA,SPACE=(TRK,(0,0))'
Queue '//VAEXCEPT DD DISP=(MOD,DELETE),DSN=&VAEXCEPT,'
Queue '//            UNIT=SYSALLDA,SPACE=(TRK,(0,0))'
Queue '//*'
Queue '//*-------------------------------------------------------------------*'
Queue '//* ISPF ENVIRONMENT                                                  *'
Queue '//*-------------------------------------------------------------------*'
Queue '//ISPFBTCH EXEC PGM=IKJEFT01,DYNAMNBR=65,REGION=4096K,'
Queue '// PARM=(''ISPSTART CMD(%'xcmd parm@''')'
Queue '//SYSEXEC  DD DISP=SHR,DSN=T32AZK.$$.KMART'
Queue '//         DD DISP=SHR,DSN=T32AZK.$$'
Queue '//ISPPLIB  DD DISP=SHR,DSN=T32AZK.$$.KMART'
Queue '//         DD DISP=SHR,DSN=SYS1.ISP.SISPPENU'
Queue '//ISPMLIB  DD DISP=SHR,DSN=T32AZK.$$'
Queue '//         DD DISP=SHR,DSN=SYS1.ISP.SISPMENU'
Queue '//ISPSLIB  DD DISP=SHR,DSN=T32AZK.$$.KMART'
Queue '//         DD DISP=SHR,DSN=SYS1.ISP.SISPSENU'
Queue '//ISPTLIB  DD DISP=SHR,DSN=T32AZK.ISPTLIB'
Queue '//         DD DISP=SHR,DSN=SYS1.ISP.SISPTENU'
Queue '//ISPLLIB  DD DISP=SHR,DSN=T32AZK.$LOAD'
Queue '//*-------------------------------------------------------------------*'
Queue '//ISPPROF  DD DSN=&&ISPPROF,SPACE=(TRK,(10,10,10)),UNIT=SYSALLDA,'
Queue '//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)'
Queue '//ISPLOG   DD DSN=&&ISPLOG,SPACE=(TRK,(10,10)),UNIT=SYSALLDA,'
Queue '//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)'
Queue '//*-------------------------------------------------------------------*'
Queue '//VAIFILE  DD DISP=SHR,DSN=&VAIFILE'
Queue '//VAEFILE  DD DISP=SHR,DSN=&VAEFILE'
Queue '//VAREPORT DD DISP=(NEW,CATLG),DSN=&VAREPORT,'
Queue '//            DCB=(RECFM=(FB),LRECL=256,BLKSIZE=0),'
Queue '//            UNIT=SYSALLDA,SPACE=(TRK,(600,90))'
Queue '//VAEXCEPT DD DISP=(NEW,CATLG),DSN=&VAEXCEPT,'
Queue '//            DCB=(RECFM=(FB),LRECL=256,BLKSIZE=0),'
Queue '//            UNIT=SYSALLDA,SPACE=(TRK,(300,30))'
Queue '//*-------------------------------------------------------------------*'
Queue '//SYSTSPRT DD SYSOUT=*'
Queue '//SYSOUT   DD SYSOUT=*'
Queue '//SYSTERM  DD SYSOUT=*'
Queue '//SYSTSIN  DD DUMMY'
Queue '//*'
Queue ''

    ztempf=$ztempf()
    Address TSO "ALLOC F("ddj") DSN('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "ddj" (FINIS"
    zedlmsg='Job has to be manually submitted or forever loose it to',
            'the bit bucket.'
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Address ISPEXEC "LMINIT DATAID(DATAID) DDNAME("ddj")"
    Address ISPEXEC "EDIT DATAID(&DATAID)"
    Address ISPEXEC "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("ddj")";xx=$ztempf(ztempf,'D')
    Signal Scr1

/*--------------------------------------------------------------------*/
/* Build a data input screen from info already available (and         */
/* defaults).                                                         */
/*--------------------------------------------------------------------*/
build_screen_1:
    lineh=Centre(' VSAM LISTCAT Analyser ',78,'-')
    Parse Value '' With zcmd line1 linem
    line2 ="{ Enter details and control parameters below:"Right('Edit',30)
    line3 ='{   Source...........¬'Left(vaifile,46)'}'   ¢SRC
    line4 ='{   Rules File.......¬'Left(vaefile,46)'}'   ¢RUL
    line5 ='{   Exception Report.¬'Left(vaexcept,46)'}'  ¢EXC
    line6 ='{   Full Reportging..¬'Left(vareport,46)'}'  ¢REP
    line7 =' '
    line8 ='{ Parameters: (Change to¢Y{to enable option)   Keyword'
    line9 ="{   Single VSAM dataset...¬"vsam    ||"{{(¢Y{or¢N{)       } /V  "
    line10="{   CICS stats............¬"c_stats ||"{{(¢Y{or¢N{)       } /ST "
    line11="{   JCL format input......¬"jcl     ||"{{(¢Y{or¢N{)       } /J  "
    line12="{   Exception input.......¬"exc_inp ||"{{(¢Y{or¢N{)       } /OVA"
    line13="{   Word no. from file....¬"wpos    ||"{{(¢1{or¢2{or¢3{)  } /Wn "
    line14="{   Exceptions only.......¬"ex_only ||"{{(¢Y{or¢N{)       } /EO "
    line15="{   Prepare CICS stats....¬"prep_cs ||"{{(¢Y{or¢N{)       } /P  "
    line16="{   Batch (Generate JCL)..¬"batch   ||"{{(¢Y{or¢N{)       } /B  "
    line17="{   Provide variable list.¬"vsamcrmc||"{{(¢Y{or¢N{)       } /?  "
    line18="{   Simulate (doctor data)¬"simulate||"{{(¢Y{or¢N{)       } /SIM"
    line19="{   Trace (for debugging..¬"trace_it||"{{(¢Y{or¢N{)       } /T  "

    line21='{ Enter¢?{on the command line for HELP.'
    line22='{ Use¢END{PF key to abandon processing.' /* last pos line */
    Return 0
Create_jcl_End:

Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff
/*--------------------------------------------------------------------*/
/* Parse and Validate Input Fields.                                   */
/*--------------------------------------------------------------------*/
Pvif:Parse Arg field,valid_val,lin#,col#,fl
    Interpret 'xxx='field
    Interpret 'yyy=Strip(Substr(line'lin#',col#,fl));'field'=yyy'
    If Wordpos(yyy,valid_val)>0 Then Return 0
    dynline=lin#;dyncol=col#
    zedlmsg="Invalid value '"yyy"' entered. Valid Values are",
            "'"Space(valid_val,1,'/')"'."
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Signal scr1

/*--------------------------------------------------------------------*/
/* Verify dataset for valid name and if it exists. If you are Viewing */
/* or Editing, the member does not have to exist.                     */
/* If the dataset name is blank, the default value will be inserted.  */
/*   RC=0  - Dataset found                                            */
/*   RC=0  - Member not found (for view/edit)                         */
/*   RC=12 - Dataset not found                                        */
/*   RC=16 - Member specified with undefined file                     */
/*   RC=16 - Member specified with sequential file                    */
/*   RC=16 - Member not found (for browse)                            */
/*   RC=16 - Invalid dataset name                                     */
/*--------------------------------------------------------------------*/
ver_file:Arg xfile,dl,dc
    Interpret "xfile="xfile
    If xfile='' Then Do
        Interpret 'xfile=d_'Arg(1)';'Arg(1)'=xfile'
        zedlmsg='Replaced with default.'
        e_rc=16;Signal ver_file_err
    End
    If Substr(xfile,1,1)/="'" Then xfile="'"hlq'.'Strip(xfile,,"'")"'"
    Parse VAR xfile '(' xmemb ')' .
    #m=Msg('Off')
    memb_status=Sysdsn(xfile)
    If memb_status='OK' Then Do
        x=Listdsi(xfile)
        If sysdsorg='PO' & xmemb='' Then Do
            zedlmsg='Member name required for partitioned datasets.'
            e_rc=16;Signal ver_file_err
        End
        zedlmsg=;Return 0
    End
    If Word(memb_status,1)='INVALID' Then Do
        zedlmsg='Invalid dataset name.';e_rc=16;Signal ver_file_err
    End
    If memb_status='MEMBER SPECIFIED, BUT DATASET IS NOT PARTITIONED' Then Do
        zedlmsg='Member specified, but dataset is not partitioned.'
        e_rc=16;Signal ver_file_err
    End
    If memb_status='DATASET NOT FOUND' & xmemb/='' Then Do
        zedlmsg='Cannot combine member name with a "NOT FOUND" dataset.'
        e_rc=16;Signal ver_file_err
    End
    If memb_status='MEMBER NOT FOUND' & action='BROWSE' Then Do
        zedlmsg='Member not found.'
        e_rc=16;Signal ver_file_err
    End
    If memb_status='MEMBER NOT FOUND' & Wordpos(action,'EDIT VIEW')>0 Then Do
        zedlmsg=;Return 0
    End
    If memb_status='MEMBER NOT FOUND' Then Return 8
    If memb_status='DATASET NOT FOUND' Then Do
        zedlmsg='Dataset not found.'
        e_rc=12;Signal ver_file_err
    End
    zedlmsg="Unknown condition processing "xfile". Please",
            "investigate with TRACE ON."
    e_rc=20
ver_file_err:
    dynline=dl;dyncol=dc;Return e_rc
ver_file_End:


/*--------------------------------------------------------------------*/
/* Process the exception file into "Interpret" commands and set up an */
/* error list.                                                        */
/*--------------------------------------------------------------------*/
VSAMANA$:
    If dde_rc>0 Then Address TSO "ALLOC F("dde") DSN("vaefile") SHR REU"
    Address TSO "EXECIO * DISKR "dde" (STEM lineii. FINIS)"
    If dde_rc>0 Then Address TSO "FREE F("dde")"

/*--------------------------------------------------------------------*/
/* These are hardcoded exceptions in same format as parameter file    */
/* and appended to the bottopnm of the list.                          */
/*--------------------------------------------------------------------*/
    xx=Copies(' ',35)
    ii=lineii.0
    ii=ii+1;lineii.ii="IIMBED = 'Y' IM  " xx "Mandatory IMBED rule"
    ii=ii+1;lineii.ii="DIMBED = 'Y' IM  " xx "Mandatory IMBED rule"
    ii=ii+1;lineii.ii="IREPL  = 'Y' REP " xx "Mandatory REPLICATE rule"
    ii=ii+1;lineii.ii="DREPL  = 'Y' REP " xx "Mandatory REPLICATE rule"
    ii=ii+1;lineii.ii="AIXUPG = 'N' NUPG" xx "Mandatory NOUPGRADE rule"
    ii=ii+1;lineii.ii="$ IM   Data/Index has IMBED=Y"
    ii=ii+1;lineii.ii="$ MBI  Some values May Be Incorrect (* suffix on",
                      "fields: *SPL *FREE* *REC*)"
    ii=ii+1;lineii.ii="$ NUPG AIX Data/Index has UPGRADE=N"
    ii=ii+1;lineii.ii="$ REP  Data/Index has REPLICATE=Y"
    lineii.0=ii
    va='CDATE';ec_report.va='*'
/*--------------------------------------------------------------------*/
/* Go get the line range for output formatting. Use the source lines  */
/* to establish 'variables' used. This list will be used to verify    */
/* variables used in rules.                                           */
/*--------------------------------------------------------------------*/
    Address TSO "NEWSTACK"                  /* First time             */
    asscnt=0;x=Format_data()               /* Get line #s for parsing */
    Address TSO "DELSTACK"                  /* Delete Queued data     */
    Address TSO "%VSAMCRM1 V";"VGET (VSAMVAR) SHARED"
/*--------------------------------------------------------------------*/
    vsamanal_val_vars=
    Do ii=fmt_Start To fmt_End
        Parse Upper Value Sourceline(ii) With,
              1 w1 w2,
              1 'FMT(' x ',' var ',' .
        Parse VAR var ch1 +1 .
        If var='' Then Iterate
        If w1='/*' Then Iterate
        If ch1="'" Then Iterate
        Parse VAR var var "'" .
        If Wordpos(var,vsamvar)>0 Then vsamanal_val_vars=vsamanal_val_vars var
    End
    vsamanal_val_vars=$Sort(vsamanal_val_vars)

/*--------------------------------------------------------------------*/
/* Go get the rules and associated error codes.  Validate variable    */
/* names with those available fro reporting.                          */
/*--------------------------------------------------------------------*/
    err_code_list=;kk=0;exc.=;ec_report.=
    Do ii=1 To lineii.0
        lineii.ii=Strip(lineii.ii)
        If lineii.ii='' Then Iterate
        Parse VAR lineii.ii 1 xw1 xw2 xw3 xw4 xw5 xw6,
                             1 ch1 +1 ew1 ew2
        If ch1='*' Then Iterate
        If ch1='$' Then Do
            If ew1='' Then Iterate
            If Wordpos(ew1,err_code_list)=0 Then err_code_list=err_code_list ew1
            err_code.ew1=Strip(ew2)
            Iterate
        End
        If Wordpos(xw1,vsamanal_val_vars)=0 Then Do
            zedlmsg='Invalid variable name "'xw1'" used in exception',
                    'selection on line 'ii'. Processing terminated.'
            If ex_env='BACK' Then Do
                Say zedlmsg
                Say Substr('  ' lineii.ii,1,79);Say ' '
                Say 'Valid variable names are:'
                Say vsamanal_val_vars
            End
            Else Do
                zedlmsg=zedlmsg 'Valid variable names are:',
                        '"'vsamanal_val_vars'".'
                "SETMSG MSG(ISRZ001)"
            End
            x=Msg('Off')
            Address TSO "FREE F("dd1")"
            Address TSO "DELETE '"listcout"'"
            Address TSO "DELETE '"listcout"'"
            Address TSO "DELSTACK"
            If ex_env='BACK' Then Exit;Else Signal Scr1
        End
        If Wordpos(xw4,ec_report.xw1)=0 Then ec_report.xw1=ec_report.xw1 xw4
        kk=kk+1
        If Wordpos(xw5,'| &')>0 Then xx=xw5;Else xx=
        rules.kk=lineii.ii
        If xw1/='CDATE' Then exc.kk=exc.kk '('Translate(xw1||xw2||xw3)')'
        Else Do                             /* Variable=CDATE found   */
            xx="'"Strip(xw3,,"'")"'"
            exc.kk=exc.kk '($DATEMAN("REV",cdate,4,"D")'||xw2||,
                          '$DATEMAN("REV","'Strip(xw3,,"'")'",4,"D"))'
        End
        error.kk=xw4


        If Wordpos(xw5,'| &')>0 Then Do
            exc.kk=exc.kk xw5;kk=kk-1
        End
    End
    err_code_list=$Sort(err_code_list)
/*--------------------------------------------------------------------*/
/* Build command to "Interpret" during exception determination.       */
/*--------------------------------------------------------------------*/
    exc.0=kk
    Do ii=1 To exc.0
        etype=error.ii;etype=err_code.etype
        exc.ii="If" exc.ii "Then exception=exception '"error.ii"'"
    End
    Return 0
VSAMANA$_End:

/*--------------------------------------------------------------------*/
/* Process the exception file into "Interpret" commands and set up an */
/* error list.                                                        */
/*--------------------------------------------------------------------*/
Extract_from_extract:
    j=0
    If ddi_rc>0 Then Address TSO "ALLOC F("ddi") DSN("vaifile") SHR REU"
    Address TSO "EXECIO * DISKR "ddi" (STEM linex. FINIS)"
    If ddi_rc>0 Then Address TSO "FREE F("ddi")"
    Do i=linex.0 By -1 To 1
        If Substr(Strip(linex.i),1,1)='+' Then Leave
    End
    If i>1 Then Do i=i+1 To linex.0
        j=j+1;Parse VAR linex.i linei.j .
    End
    Return j

/*--------------------------------------------------------------------*/
/* Summarise the exceprions in a 1 line per dataset matrix.           */
/*--------------------------------------------------------------------*/
Add_summary_2_exceptions:
    ec_limit=5                              /* Error code length limit*/
    Queue ' ';Queue Copies('*',79);Queue ' '
    Queue 'The following is a summary of the exceptions found against',
          'each'
    Queue 'CLUSTER/AIX.'
    Queue ' '
    ecl=err_code_list
    Do While ecl/=''
        Parse VAR ecl ec1 ecl
        Queue Left(ec1,ec_limit) '-' err_code.ec1
    End
    Queue ' '
    grid=Copies('¦ ',Words(err_code_list))'¦'
    pref=Left(' ',45)                       /* dsname on LHS          */
    pref=''                                 /* dsname on RHS only     */
    lineo.=grid
    Do i1=ec_limit By -1 To 1
        Do i2=1 To Words(err_code_list)
            word=Word(err_code_list,i2)
            ch=Substr(word,i1,1.)
            If ch/='' Then lineo.i1=Overlay(ch,lineo.i1,(i2-1)*2+2)
        End
    End
    Queue pref||Copies('+-',Words(err_code_list))'+'
    Do i=1 To ec_limit
        If lineo.i=Copies('¦ ',Words(err_code_list))'¦' Then Leave
        Queue pref||lineo.i
    End
    Queue pref||Copies('+-',Words(err_code_list))'+'Copies('-',45)
    Do i=1 To ei
        Parse VAR linex.i dsn excp;line=grid
        Do j=1 To Words(excp)
            exc=Word(excp,j)
            line=Overlay('Y',line,(Wordpos(exc,err_code_list)-1)*2+2)
        End
        If pref/='' Then line=Overlay(dsn,pref||line,1)
        Queue line dsn
    End
    Queue pref||Copies('+-',Words(err_code_list))'+'Copies('-',45)
    Do i=1 To ec_limit
        If lineo.i=Copies('¦ ',Words(err_code_list))'¦' Then Leave
        Queue pref||lineo.i
    End
    Queue pref||Copies('+-',Words(err_code_list))'+'
    Queue ''
    Return 0

/*--------------------------------------------------------------------*/
/* Parse for parameters entered                                       */
/*--------------------------------------------------------------------*/
Parse_parms:
    If Wordpos('/T',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/T',Translate(parm#)),1)
        #tr=Trace(r);trace_it='Y'
        parm@=parm@ '/T'
    End;Else trace_it='N'
    If Word(parm#,1)='??' Then Signal Help_me
    If Wordpos('/BIP',Translate(parm#))>0 Then Do
        bp_panel='Y';parm#=Delword(parm#,Wordpos('/BIP',Translate(parm#)),1)
    End;Else bp_panel='N'
    If Wordpos('/V',Translate(parm#))>0 Then Do
        vsam='Y';parm#=Delword(parm#,Wordpos('/V',Translate(parm#)),1)
        parm@=parm@ '/V'
    End
    If Wordpos('/ST',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/ST',Translate(parm#)),1)
        If Wordpos('Y',vsam)=0 Then Do
            c_stats='Y';wpos=2
            parm@=parm@ '/ST /W2'
        End
    End
    If Wordpos('/J',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/J',Translate(parm#)),1)
        If Wordpos('Y',vsam c_stats)=0 Then Do
            jcl='Y';comment_char='//*'
            parm@=parm@ '/J'
        End
    End;Else comment_char='*'
    If Wordpos('/OVA',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/OVA',Translate(parm#)),1)
        If Wordpos('Y',vsam c_stats jcl)=0 Then Do
            exc_inp='Y'
            parm@=parm@ '/OVA'
        End
    End
    If Wordpos('/B',Translate(parm#))>0 Then Do
        batch='Y';parm#=Delword(parm#,Wordpos('/B',Translate(parm#)),1)
        parm@=parm@ '/BIP'                  /* Bypass Input Panel     */
    End;Else batch='N'
    If Wordpos('/SIM',Translate(parm#))>0 Then Do
        simulate='Y';parm#=Delword(parm#,Wordpos('/SIM',Translate(parm#)),1)
    End;Else simulate='N'
    If Wordpos('/MBI',Translate(parm#))>0 Then Do
        m_b_i='Y';parm#=Delword(parm#,Wordpos('/SIM',Translate(parm#)),1)
    End;Else m_b_i='N'
    If Wordpos('/EO',Translate(parm#))>0 Then Do
        ex_only='Y';parm#=Delword(parm#,Wordpos('/EO',Translate(parm#)),1)
        parm@=parm@ '/EO'
    End;Else ex_only='N'
    If Wordpos('/P',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/P',Translate(parm#)),1)
        prep_cs='Y'
    End;Else prep_cs='N'
    If Wordpos('/W2',Translate(parm#))>0 Then Do
        wpos=2;parm#=Delword(parm#,Wordpos('/W2',Translate(parm#)),1)
        parm@=parm@ '/W2'
    End
    If Wordpos('/?',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/?',Translate(parm#)),1)
        vsamcrmc='Y'
    End;Else vsamcrmc='N'
    If Wordpos('/?A',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos('/?A',Translate(parm#)),1)
        vsamcrmc='A'
    End
    If Wordpos(Word(parm#,1)'?',Translate(parm#))>0 Then Do
        parm#=Delword(parm#,Wordpos(Word(parm#,1)'?',Translate(parm#)),1)
        vsamcrmc='Y'
    End
    Parse VAR parm# file1 file2 w3
    If file1=''& ima_macro Then Do
        "ISREDIT (file1)=DATASET";"ISREDIT (memb)=MEMBER"
        If member/='' Then file1="'"file1"("memb")'"
        Else file1="'"file1"'"
    End

    If exc_inp='Y' Then vaifile=vaexcept
    If file1/='' Then vaifile=file1
    If Substr(vaifile,1,1)/="'" Then vaifile="'"hlq'.'vaifile"'"
    x=ver_file('vaifile',5,23);If x=16 Then vaifile=d_vaifile
    xx=Listdsi(vaifile);If xx=4 & sysreason=12 Then Do
        vsam='Y';If Wordpos('/V',parm@)=0 Then parm@=parm@ '/V'
    End

    If file2/='' Then vaefile=file2
    If Substr(vaefile,1,1)/="'" Then vaefile="'"hlq'.'vaefile"'"
    x=ver_file('vaefile',5,23);If x=16 Then vaefile=d_vaefile
    Return 0
Parse_parms_End:

/*--------------------------------------------------------------------*/
/* Doh!                                                               */
/*--------------------------------------------------------------------*/
Help_me:retcmd=
Help_me_err:Signal off Syntax;Signal off Error
n_st=mark(2)    /* Mark Start  /

   VSAMANAL: VSAM analyser.

   This is a routine that will analyse the output from a LISTCAT query against a
   VSAM CLUSTER, AIX or PATH using user defined exception detection rules.

   At the end of the processing, two datasets will be created,
      1. Full report of all datasets. This is a list of VSAM datasets
         (CLUSTERs/AIXs) with more user friendly formatted output than that
         presented by the LISTCAT output with a lot of the 'noise' removed.
         Dataset name will be,
           `VAREPORT.
         For further details on this dataset, refer to instructions on screen
         input.
      2. List of VSAM datasets (CLUSTERs/AIXs) exceptions.  This is similar
         output to the above 'full' lsting with the exception that only the
         exception fields are listed. The dataset name will be,
           `VAEXCEPT.
         There will be a summary list at the bottom of the report for quick
         reference.
         For further details on this dataset, refer to instructions on screen
         input.

    Data entry panel:
    -----------------
    Unless you use parameter "/BIP" (Bypass Input Panel) a data entry panel will
    be displayed with all parameters converted to "Y" (if used) and datasets
    passed (or defaults) populated into the appropriate fields in the screen.
    Either correct dataset names and fine tune your requirements by overtyping
    the parameter fields with either a "Y" or "N".  Both dataset and exception
    file will be verified for validity and errors detected reported.
    While in the screen display you can enter the following commands,
       EDIT | VIEW | BROWSE xxx
           - Perform the appropriate action on file xxx where xxx can have the
             following values,
                EXC - EXCeption Report
                SRC - SouRCe (input file)
                REP - RELort (full report)
                RUL - RULes file (default)
           - Without the above parameters, you can cursor place on the dataset
             to process it.
           - Memebers do NOT have to exist for this function, however, the
             datasert/PDS does.
    In the screen you can change the names of any or all of the input and output
    datasets will be saved in your ISPF profile and will be reused everytime you
    use the panel entry feature or you blank out the dataset whereby the default
    dataset name will be inserted.

    Any AIX detected for a cluster will also be analysed and reported so they do
    not have to be explicitly identified in the Source dataset.  Also any PATHs
    supplied will have the AIX name substituted and reported.

    The threshold settings (exception rules) are defined in dataset specified by
    the "vaefile" parameter and will be individually (or combined for 'AND' and
    'OR' rules) subjected to "Interpret" able commands.
    For syntax of these algorythms, refer to tutorial under "VSAMCRM1"
    eyecatcher below.

    For more complex algorythms, view/edit the output from either the full
    report or exception (outputs from "VSAMANAL") and pass a parameter of "/OVA"
    to use that file as the 'Source' file.  (Alternatively, pass the file name
    as positional parameter one and "/OVA" as keyword parameter.)

    After processing all the datasets supplied by the "Source" file, the
    following message format is displayed,
       "File `D_VAIFILE. processing sucessfully completed."
    All it means is that all activity has completed from processing the VSAM
    datasets derived from the 'Source' file. (This is in case you use parameter
    "/?" and have interim browse displays that may confuse.)

    Parameters:
    -----------
      Keywords: (those marked with the "o" delimiter are available in on-line
      ---------  processing only),
        /B   - Batch. Create JCL to run this job in batch.
        /BIP - Bypass input Panel display. Enforced in batch.
        /EO  - Exception only.
        /J   - Input data is JCL. This will extract dataset names by parsing
               input line for 'DSN=dataset' format. Ignore character is changed
               from '*' (default) to '//*'.
        /MBI o Simulate May Be Incorrect data (MBI).  This parameter will append
               an '*' on the end of the following fields for all VSAM datasets
               processed,
                 ICASPL ICISPL IFREEA IFREEI IRECD IRECI IRECU
                 DCASPL DCISPL DFREEA DFREEI DRECD DRECI DRECU
               This can be used in batch, however, it will tag all datasets with
               the "MBI" exception, so I suggest to limit your sample.
               This option is NOT menu selectable.
        /OVA - Input data is the Output form a previous VsamAnal process and
               will be parsed accordingly.  Suggest you use the exception report
               as input as it will only further analyse files with exceptions
               already identified. Use this for 'AND'ing more complex rules.
               Note: This feature is available only because it can. It can only
                     be used "once" as the input is creamed as the exception
                     output from the run. To reuse this feature you would need
                     run from the start again.
        /P   o Combined with the '/ST' parameter, it will prepare a CICS Stats
               output for processing with the '/W2' option.
               The output from this operation can be input with the '/ST'
               parameter by itself.
               This is a destructive action and the dataset will be corrupted so
               you will not be permitted to action in an edit session (call me
               paranoid).  Either work on a viewed copy and save it or export
               the result and 'force' cancel out of the view operation.
        /SIM o Simulate. Will display the LISCAT output under editor so you can
               fudge the values to generate a test exception report. (Each
               component will also be edited. See note on "QUIT" to interrupt
               'loop'.)
               This cannot be used in batch as you cannot edit the LISTCAT
               output to change it.
        /ST  - Input data is the output from the CICS stats report.
               Note:-This is a destructive command so recommed viewing the
                     dataset.  However while viewing/editing an output stats
                     report enter command,
                        VSAMANAL /ST /P
                     to prepare the stats to acceptable format.  This new format
                     will need to be exported and original file session
                     cancelled.
                    -This option is predominanty designed for Technical
                     Support's use.
        /T   - Turn trace on (for debugging). Included for Tech Support (dialog
               developers use).
        /V   - Passed dataset name is not Source dataset list but actual VSAM
               dataset name (cam only process 1 VSAM dataset with this
               'feature').
               Usually used for one of datasets or testing syntax/results for a
               new exception rule set.
        /W1  - The VSAM dataset name is to be extracted from the first word per
               line from the Source dataset. The default is word 1 (with '*' in
               column 1 being ignored).
        /W2  - The VSAM dataset name is to be extracted from the second word per
               line from the Source dataset.  This parameter is set if the
               'Source' is CICS stats.
               The default is word 1 (with '*' in column 1 being ignored).
        /W3  - The VSAM dataset name is to be extracted from the third word per
               line from the Source dataset.  This option is available in case
               the source is output from a remote process and this parameter may
               remove the need to reformat. If the dataset is not word one, two
               or three, TOUGH - reformat.
               The default is word 1 (with '*' in column 1 being ignored).
        /?   o Have "VSAMCRM1" display available fields for this routine.  This
               is only a subset of all the available fields that match the list
               of variables supplied by the second field in variable "vsamcrmc".
               This list of variable names are built up by processing the
               sourcelines of the report formatting code in this member.  Refer
               to the dummy execution of "x=Format_data()" in paragraph
               "VSAMANA$".
               (Don't complain that this is confusing.. "?" is the help
               parameter for 'VSAMCRM1' and this "/?" is the vehicle to invoke
               the "?" for 'VSAMCRM1' and segregate it from this function's
               help parameter.)
        /?A  o Have "VSAMCRM1" display ALL available fields and their respective
               values against the sample dataset. This is a full list and not a
               subset like that returned by the "/?" parameter ("VSAMCRM1"
               invoked with a blank second word in variable "vsamcrm").
               This feature is required as "VSAMCRM1" is not designed to return
               the variables but rather a display of their contents after
               processing a valid VSAM dataset.
               This option is NOT menu selectable.
        ?    o Doh!  (This tutorial.)
      Positional:
      -----------
        Source
             - The input dataset (JCL or CICS stats) to extract the VSAM
               datasets from.
               Can be a single VSAM dataset name with the '/V' keyword
               parameter.
               If this routine is run as a macro on the command line of an
               edit/view session, it will become the Source file (without the
               '/V' option).  Default input dataset is,
                   `D_VAIFILE.
               For further details on this dataset, refer to instructions on
               screen input.
        execptions
             - Exceptions rules dataset. Default input dataset is,
                   `D_VAEFILE.
               For further details on this dataset, refer to instructions on
               screen input.

    Packaging: (those marked with the "o" are optional and used to enhance
    ----------  functionality):-
      REXX:
        $ALKUVOL o Optional routine to supply "UNIT" parameters for temporary
                   dataset allocation.  If not available, "UNIT(SYSALLDA)" will
                   be used.
        $DATEMAN - Date manipulation routine used to process the date created
                   field.
        $TTRUNC  - Translate TRUNCate data (case sensitive).
        $ZTEMPF  - Routine to create a temporary file (limit of 30 vs. ISPF's 4)
        VSAMCRM1 - LISTC output parser.
        VSAMANA$ - Exception(s) algorythm feeder.
        BR       o Routine to permit browsing of help panels. Without this, you
                   will get the dreaded "red" screen.

      Panel
        DYNAMICZ - Dynamically buildable panel.

      Loadmod:
        VTOC     - Return the allocation and usage details for the data and
                   index components.
                   Will contain '?' if the data and index components are not
                   found in the VTOC output.

    Extras:
    -------
      If there are many components and you select a repetitive display (eg.
      using the '/?' and '/SIM') parameters, you can break the displays by
      entering,
          TSO QUIT *
      on the command line.

********************************************************************************
  The following were returned by "VSAMCRM1 ?".  Use it to build your exception
  reporting rules/algorythms.
  To get a list of all the usable 'variable' names, execute "VSAMANAL" against a
  legitimate VSAM dataset with the "/?" or the "Provide variable list" menu
  option.
  To get a list of ALL the available 'variable' names, execute "VSAMANAL"
  against a legitimate VSAM dataset with the "/?A".

                                   *****


*/*/;n_en=mark(-2)   /* Mark End   */
    chgchar='`'
    Do i=n_st To n_en
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        Say Substr(line,1,79)
    End
    x=VSAMCRM1('?')
    Do Queued()
        Parse Pull line;Say Substr('  'Substr(line,2),1,79)
    End
    Interpret retcmd
    Exit
