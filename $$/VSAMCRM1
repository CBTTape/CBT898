/*--------------------------ooo00 REXX 00ooo--------------------------
   VSAMCRM1:
    Purpose:
      1. Analyse the output from a LISCAT ENT() ALL output and set up
         variables to contain the identified values.
      2. Variable "vsamvar" is set up to contain the names of
         variables above, it is then put into the SHARED profile and
         it's contents are also put there (which basically puts ALL
         the variables into the profile).  This can then be VGET in
         the called routine.
      3. If the dataset name is a PATH, the variable "path" is set to
         'Y' and variable "ass1" is set to the AIX name and no further
         analysis is made.
      4. To get a display of the fields returned, their values and a
         brief descrition, set variable "vsamcrmc" to 'Y'.  You can
         append the calling program name to the variable and set the
         program name variable to fields used by that program and
         VPUT it. This routine will then only return variables used
         by calling program.
      5. To return just a list of the variables names returned by this
         routine, pass parameter 1 of 'V'.

  --------------------------------------------------------------------*/
VSAMCRM1:ver='2.00'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=
    Parse Upper VAR parm# parm1,parm2,parm3,parm4,parm5,parm6,parm7
    Parse SOURCE . . xcmd .
    If Word(parm#,1)='V' Then Do
        asscnt=0;Signal ext1
    End
    If Word(parm#,1)='?' Then Do
        help_out='Say';Signal Help_me
    End;Else help_out='Queue'
    ispf_env=Sysvar(Sysispf)
    If ispf_env='ACTIVE' Then Nop

    "VGET (vsamcrmc) SHARED";Parse VAR vsamcrmc help csm_caller .
    vsamcrmc='N';"VPUT (vsamcrmc) SHARED"
    If csm_caller/='' Then Do
        "VGET ("csm_caller") SHARED";#caller=csm_caller
        Interpret "csm_caller="csm_caller
    End

    "VGET (NDEVT) SHARED"
/* Miscellaneout values                                               */
    aix      ='N'              ;h_aix      ='Is this an AIX            '
    aixuniqk ='N'              ;h_aixuniqk ='AIX resolve > 1 Prime key '
    aixupg   ='N'              ;h_aixupg   ='AIX upgradable            '
    asscnt   =0                ;h_asscnt   ='No. of Associations       '
    ass1     =                 ;h_ass1     ='Association #01           '
    ass10    =                 ;h_ass10    ='Association #10           '
    ass11    =                 ;h_ass10    ='Association #11           '
    ass12    =                 ;h_ass10    ='Association #12           '
    ass13    =                 ;h_ass10    ='Association #13           '
    ass14    =                 ;h_ass10    ='Association #14           '
    ass15    =                 ;h_ass10    ='Association #15           '
    ass16    =                 ;h_ass10    ='Association #16           '
    ass17    =                 ;h_ass10    ='Association #17           '
    ass18    =                 ;h_ass10    ='Association #18           '
    ass19    =                 ;h_ass10    ='Association #19           '
    ass2     =                 ;h_ass2     ='Association #02           '
    ass20    =                 ;h_ass10    ='Association #20           '
    ass3     =                 ;h_ass3     ='Association #03           '
    ass4     =                 ;h_ass4     ='Association #04           '
    ass5     =                 ;h_ass5     ='Association #05           '
    ass6     =                 ;h_ass6     ='Association #06           '
    ass7     =                 ;h_ass7     ='Association #07           '
    ass8     =                 ;h_ass8     ='Association #08           '
    ass9     =                 ;h_ass9     ='Association #09           '
    catalog  ='?'              ;h_catalog  ='UserCAT                   '
    cdate    ='?'              ;h_cdate    ='Creation date             '
    cluster  ='N'              ;h_cluster  ='                          '
    devt     =                 ;h_devt     ='Device type               '
    dsntype  ='?'              ;h_dsntype  ='Dataset Type (CLUSTER/AIX)'
    erase    ='N'              ;h_erase    ='                          '
    haveaix  ='N'              ;h_haveaix  ='Any associated AIX        '
    index    ='Y'              ;h_index    ='Indexed (?)               '
    order    ='N'              ;h_order    ='                          '
    page     ='N'              ;h_page     ='PAGESPACE identifier      '
    path     ='N'              ;h_path     ='Is this a PATH            '
    rcode    =0                ;h_rcode    ='Return Code               '
    recov    ='R'              ;h_recov    ='R(ecovery)/S(peed)        '
    relate   =                 ;h_relate   ='Relate AIX -> CLUSTER     '
    repl     ='N'              ;h_repl     ='                          '
    reuse    ='N'              ;h_reuse    ='                          '
    span     ='N'              ;h_span     ='                          '
    ucat     ='N'              ;h_ucat     ='User catalog              '
    unique   ='Y'              ;h_unique   ='                          '
    volume   =                 ;h_volume   ='Volume                    '
    vtype    =                 ;h_vtype    ='INDEX/NUMBE/NONIN         '
    write    ='N'              ;h_write    ='                          '

/* Data components                                                    */
    daext    ='?'              ;h_daext    ='Data Alocated Extents     '
    daltype  =                 ;h_daltype  ='Data Space Type           '
    darecl   =                 ;h_darecl   ='Data Average Record Length'
    daspace  ='?'              ;h_daspace  ='Data Alocated Space       '
    dbuff    =                 ;h_dbuff    ='Data Buffer Space         '
    dcaspl   ='*'              ;h_dcaspl   ='Data CA split             '
    dcipca   ='?'              ;h_dcipca   ='Data CI/CA                '
    dcispl   ='*'              ;h_dcispl   ='Data CI split             '
    dcisz    =                 ;h_dcisz    ='Data CI Size              '
    derase   ='N'              ;h_derase   ='Data ERASE (on delete)    '
    dfree    =                 ;h_dfree    ='Data freespace            '
    dfreea   =                 ;h_dfreea   ='Data freespace CA         '
    dfreei   =                 ;h_dfreei   ='Data freespace CI         '
    dimbed   ='N'              ;h_dimbed   ='Data IMBED                '
    dkeyl    =                 ;h_dkeyl    ='Data Keylength            '
    dkeyp    =                 ;h_dkeyp    ='     Key Position         '
    dline    =99999            ;h_dline    ='Data                      '
    dmrecl   =                 ;h_dmrecl   ='Data Max Record Length    '
    dname    ='*'              ;h_dname    ='Data component name       '
    dorder   ='N'              ;h_dorder   ='Data ORDERED              '
    dprim    =                 ;h_dprim    ='Data Primary              '
    drecd    ='?'              ;h_drecd    ='Data REC-DELETED          '
    dreci    ='?'              ;h_dreci    ='Data REC-INSERTED         '
    drecov   ='R'              ;h_drecov   ='Data R(ecovery)/S(peed)   '
    drect    =0                ;h_drect    ='Data REC-TOTAL            '
    drecu    ='?'              ;h_drecu    ='Data REC-UPDATED          '
    drepl    ='N'              ;h_drepl    ='Data REPLICATE            '
    dreuse   ='N'              ;h_dreuse   ='Data REUSE                '
    dsec     =                 ;h_dsec     ='Data Secondary            '
    dshro    =                 ;h_dshro    ='Data Share Options        '
    dshror   =                 ;h_dshror   ='Data Share Options (Reg)  '
    dshros   =                 ;h_dshros   ='Data Share Options (Sys)  '
    dspan    ='N'              ;h_dspan    ='Data SPANNED              '
    duext    ='n/a'            ;h_duext    ='*** Used Extents          '
    dunique  ='Y'              ;h_dunique  ='Data UNIQUE               '
    duperc   ='%'              ;h_duperc   ='Data Usage %              '
    duspace  ='?'              ;h_duspace  ='Data Used Space           '
    dvolume  ='*'              ;h_dvolume  ='Data volume(s)            '
    dwrite   ='N'              ;h_dwrite   ='Data WRITECHECK           '

/* Index components                                                   */
    iaext    ='?'              ;h_iaext    ='Index Alocated Extents    '
    ialtype  =                 ;h_ialtype  ='Index Space Type          '
    iarecl   =                 ;h_iarecl   ='Index Average Record Len  '
    iaspace  ='?'              ;h_iaspace  ='Index Alocated Space      '
    ibuff    =                 ;h_ibuff    ='Index Buffer Space        '
    icaspl   ='*'              ;h_icaspl   ='Index CA split            '
    icipca   ='?'              ;h_icipca   ='Index CI/CA               '
    icispl   ='*'              ;h_icispl   ='Index CI split            '
    icisz    =                 ;h_icisz    ='Index CI Size             '
    ierase   ='N'              ;h_ierase   ='Index ERASE (on delete)   '
    ifree    =                 ;h_ifree    ='Index freespace           '
    ifreea   =                 ;h_ifreea   ='Index freespace CA        '
    ifreei   =                 ;h_ifreei   ='Index freespace CI        '
    iimbed   ='N'              ;h_iimbed   ='Index IMBED               '
    ikeyl    =                 ;h_ikeyl    ='Index Keylength           '
    ikeyp    =                 ;h_ikeyp    ='      Key Position        '
    iline    =99999            ;h_iline    ='Index                     '
    imrecl   =                 ;h_imrecl   ='Index Max Record Length   '
    iname    ='n/a'            ;h_iname    ='Data component name       '
    iorder   ='N'              ;h_iorder   ='Index ORDERED             '
    iprim    =0                ;h_iprim    ='Index Primary             '
    irecd    ='?'              ;h_irecd    ='Index REC-DELETED         '
    ireci    ='?'              ;h_ireci    ='Index REC-INSERTED        '
    irecov   ='R'              ;h_irecov   ='Index R(ecovery)/S(peed)  '
    irect    =0                ;h_irect    ='Index REC-TOTAL           '
    irecu    ='?'              ;h_irecu    ='Index REC-UPDATED         '
    irepl    ='N'              ;h_irepl    ='Index REPLICATE           '
    ireuse   ='N'              ;h_ireuse   ='Index REUSE               '
    isec     =0                ;h_isec     ='Index Secondary           '
    ishror   =                 ;h_ishror   ='Index Share Options (Reg) '
    ishros   =                 ;h_ishros   ='Index Share Options (Sys) '
    ispan    ='N'              ;h_ispan    ='Index SPANNED             '
    iuext    ='n/a'            ;h_iuext    ='*** Used Extents          '
    iunique  ='Y'              ;h_iunique  ='Index UNIQUE              '
    iuperc   ='%'              ;h_iuperc   ='Index Usage %             '
    iuspace  ='?'              ;h_iuspace  ='Index Used Space          '
    ivolume  ='*'              ;h_ivolume  ='Index volume(s)           '
    iwrite   ='N'              ;h_iwrite   ='Index WRITECHECK          '

    Address ISREDIT
    "FIND 'IN-CAT ---' FIRST"
    If rc=0 Then Do
        "(line)=LINE .ZCSR";Parse VAR line . . catalog .
    End
    "FIND CLUSTER 2 FIRST"
    If rc=0 Then Do
        cluster='Y'
        Signal con1
    End
    "FIND AIX 2 FIRST"
    If rc=0 Then Do
        aix='Y'
        Signal con1
    End
    "FIND PATH 2 FIRST"
    If rc=0 Then Do
        path='Y'
        "FIND AIX-";"(ass1)=LINE .ZCSR";ass1=Strip(ass1)
        asscnt=1;rcode=8
        Signal ext1
    End
    "FIND PAGESPACE 2 FIRST"
    If rc=0 Then Do
        page='Y'
        Signal con1
    End
    "CURSOR=2 1"
    "FIND USERCATALOG 2 .ZCSR .ZCSR"
    If rc=0 Then ucat='Y'
    Else Do
        zedlmsg="CLUSTER/AIX/PATH/PAGESPACE entry not found."
        Address ISPEXEC "SETMSG MSG(ISRZ001)"
    End
    Signal errx4

con1:
    "(line)=LINE .ZCSR";dsntype=Substr(line,2,1)
    "LABEL .ZCSR=.CLUS";"CURSOR=1 1"
    "FIND DATA 5"
    If rc=0 Then Do
        "LABEL .ZCSR=.DATA";"(DLINE)=LINENUM .ZCSR"
    End
    "CURSOR=1 1"
    "FIND INDEX 5"
    If rc=0 Then Do
        "LABEL .ZCSR=.INDX";"(ILINE)=LINENUM .ZCSR"
    End
    Else index='N'
    If iline>dline Then "LABEL "dline-1"=.CLUSE"
    Else "LABEL "iline-1"=.CLUSE"
    If index='N' Then "LABEL .ZLAST=.DATAE"
    Else Do
        "LABEL "iline-1"=.DATAE";"LABEL .ZLAST=.INDXE"
    End
    "FIND ASSOCIATIONS 7 .CLUS .CLUSE ALL"
    "(lin#)=CURSOR";"(line)=LINE .ZCSR"

    asscnt=0
    Do While Substr(line,7,7)/="HISTORY"
        lin#=lin#+1;"(line)=LINE &lin#"
        char=Substr(line,9,3)
        If char="CLU" & cluster='Y' Then Nop
        Else Do
            If Wordpos(char,'AIX CLU PAT')>0 Then Do
                 asscnt=asscnt+1
                 Interpret "ass"asscnt"=Substr(line,9,54)"
                 If char="CLU" Then relate=Strip(Substr(line,18,44))
                 If char="AIX" Then haveaix='Y'
            End
        End
    End
    If dsntype='A' Then Do
        lin#=lin#+1;"(line)=LINE &lin#";v0=line
    End
/*--------------------------------------------------------------------*/
dat1:
    start='.DATA';endit='.DATAE'
    uext    ='n/a'
    Call pro1

dat2:
    dfreei  =freei
    dfreea  =freea
    dfree   =free
    daltype =altype
    dprim   =prim
    dsec    =sec
    dkeyl   =keyl
    dkeyp   =keyp
    darecl  =arecl
    dmrecl  =mrecl
    dcisz   =cisz
    dbuff   =buff
    dshror  =shror
    dshros  =shros
    drecov  =recov
    dunique =unique
    derase  =erase
    dwrite  =write
    dimbed  =imbed
    drepl   =repl
    dname   =cname
    dvolume =volume
    dorder  =order
    dreuse  =reuse
    dspan   =span
    drect   =rect
    dreci   =reci
    drecd   =recd
    drecu   =recu
    dcipca  =cipca
    dcaspl  =splita
    dcispl  =spliti
    daspace =hi_a_rba
    duspace =hi_u_rba
    duperc  =uperc
    daext   =aext
    duext   =uext
/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
ind1:
    If index='N' Then Signal ext1
    start   ='.INDX'
    endit   ='.INDXE'
    recov   ='R'
    unique  ='Y'
    erase   ='N'
    write   ='N'
    imbed   ='N'
    repl    ='N'
    order   ='N'
    reuse   ='N'
    span    ='N'
    uext    ='n/a'
    Call pro1

ind2:
    ifreei  =freei
    ifreea  =freea
    ifree   =free
    ialtype =altype
    iprim   =prim
    isec    =sec
    ishror  =shror
    ishros  =shros
    ikeyl   =keyl
    ikeyp   =keyp
    iarecl  =arecl
    imrecl  =mrecl
    icisz   =cisz
    ibuff   =buff
    irecov  =recov
    iunique =unique
    ierase  =erase
    iwrite  =write
    iimbed  =imbed
    irepl   =repl
    iname   =cname
    ivolume =volume
    iorder  =order
    ireuse  =reuse
    ispan   =span
    irect   =rect
    ireci   =reci
    irecd   =recd
    irecu   =recu
    icipca  =cipca
    icaspl  =splita
    icispl  =spliti
    iaspace =hi_a_rba
    iuspace =hi_u_rba
    iuperc  =uperc
    iaext   =aext
    iuext   =uext

ext1:
    tab1='RCODE    ',
         'AIX      ',
         'AIXUNIQK ',
         'AIXUPG   ',
         'ASSCNT   ',
         'CATALOG  ',
         'CDATE    ',
         'DEVT     ',
         'DSNTYPE  ',
         'HAVEAIX  ',
         'INDEX    ',
         'PATH     ',
         'RELATE   ',
         'VTYPE    ',
         ''
    Do i=1 To asscnt;tab1=tab1 "ASS"i;End
    tab2='DAEXT    ',
         'DALTYPE  ',
         'DARECL   ',
         'DASPACE  ',
         'DBUFF    ',
         'DCASPL   ',
         'DCIPCA   ',
         'DCISPL   ',
         'DCISZ    ',
         'DERASE   ',
         'DFREEA   ',
         'DFREEI   ',
         'DFREE    ',
         'DIMBED   ',
         'DKEYL    ',
         'DKEYP    ',
         'DMRECL   ',
         'DNAME    ',
         'DORDER   ',
         'DPRIM    ',
         'DRECD    ',
         'DRECI    ',
         'DRECOV   ',
         'DRECT    ',
         'DRECU    ',
         'DREPL    ',
         'DREUSE   ',
         'DSEC     ',
         'DSHROR   ',
         'DSHROS   ',
         'DSPAN    ',
         'DUEXT    ',
         'DUNIQUE  ',
         'DUPERC   ',
         'DUSPACE  ',
         'DVOLUME  ',
         'DWRITE   ',
         ''
    tab3='IAEXT    ',
         'IALTYPE   ',
         'IARECL   ',
         'IASPACE  ',
         'IBUFF    ',
         'ICASPL   ',
         'ICIPCA   ',
         'ICISPL   ',
         'ICISZ    ',
         'IERASE   ',
         'IFREEA   ',
         'IFREEI   ',
         'IFREE    ',
         'IIMBED   ',
         'IKEYL    ',
         'IKEYP    ',
         'IMRECL   ',
         'INAME    ',
         'IORDER   ',
         'IPRIM    ',
         'IRECD    ',
         'IRECI    ',
         'IRECOV   ',
         'IRECT    ',
         'IRECU    ',
         'IREPL    ',
         'IREUSE   ',
         'ISEC     ',
         'ISHROR   ',
         'ISHROS   ',
         'ISPAN    ',
         'IUEXT    ',
         'IUNIQUE  ',
         'IUPERC   ',
         'IUSPACE  ',
         'IVOLUME  ',
         'IWRITE   ',
         ''
    vsamvar=tab1 tab2 tab3
    Address ISPEXEC "VPUT (vsamvar) SHARED"
    Address ISPEXEC "VPUT (&VSAMVAR) SHARED"
    If Wordpos(help,'Y A')>0 Then x=Help_me()
    "CANCEL"
    Exit

err1:
    zedlmsg="Cannot use this facility on an alternate index."
    Address ISPEXEC "SETMSG MSG(ISRZ001)"

errx4:rcode=4;Signal errx
errx8:rcode=8;Signal errx
errx:
    Address ISPEXEC "VPUT (RCODE) SHARED"
    "CANCEL"
    Exit

/*--------------------------------------------------------------------*/
/* Called procedure                                                   */
/*--------------------------------------------------------------------*/
pro1:
    If start='.DATA' Then "FIND ' DATA -' FIRST"
    Else "FIND ' INDEX -' FIRST"
    "(line)=LINE .ZCSR"
    Parse VAR line 2 . . cname .
/*--------------------------------------------------------------------*/
    "FIND ' CREATION-' FIRST"
    "(line)=LINE .ZCSR"
    cdate=Word(Translate(Word(line,2),' ','-'),2)
    cdate=$dateman('J2E',cdate,4)
/*--------------------------------------------------------------------*/
    "FIND ' CREATION-' FIRST"
    "(line)=LINE .ZCSR"
    cdate=Word(Translate(Word(line,2),' ','-'),2)
    cdate=$dateman('J2E',cdate,4)
/*--------------------------------------------------------------------*/
    "FIND 'KEYLEN' &START &ENDIT ALL"
    "(line)=LINE .ZCSR"
    sysdval=Substr(line,2)
    Parse VAR sysdval keyl arecl buff cisz .
/*--------------------------------------------------------------------*/
    "FIND 'MAXLRECL' &START &ENDIT"
    "(line)=LINE .ZCSR";"(lin#)=LINENUM .ZCSR"
    sysdval=Substr(line,2);Parse VAR sysdval keyp mrecl . cipca
    If aix='Y' & start=".DATA" Then Do
        lin#=lin#+1;"(line)=LINE &lin#"
        sysdval=Substr(line,2);Parse VAR sysdval keyp .
/*--------------------------------------------------------------------*/
        "FIND ' ATTRIBUTES ' FIRST"
        If rc=0 Then Do
            "(line)=LINE .ZCSR";"(lin#)=LINENUM .ZCSR"
            lin#=lin#+1;"(line)=LINE &lin#"
            If Wordpos('UPGRADE',line)>0 Then aixupg='Y'
        End
/*--------------------------------------------------------------------*/
    End
/*--------------------------------------------------------------------*/
    "FIND 'SHROPTNS' &START &ENDIT"
    "(lin#)=LINENUM .ZCSR"
    "(v1)=LINE .ZCSR"
    "(v2)=LINE" lin#+1
    v1 = ' 'Strip(Substr(v1,2)) Strip(Substr(v2,2))' '
    Parse VAR v1 . 'SHROPTNS(' shror ',' shros ')' .
/*--------------------------------------------------------------------*/
    "FIND 'REC-TOTAL' &START &ENDIT"
    "(lin#)=LINENUM .ZCSR"
    "(line)=LINE .ZCSR";sysdval=Substr(line,2)
    Parse VAR sysdval rect .
    "(recd)=LINE" lin#+1;Parse VAR recd recd .
    "(reci)=LINE" lin#+2;Parse VAR reci reci .
    "(recu)=LINE" lin#+3;Parse VAR recu recu .
/*--------------------------------------------------------------------*/
    "FIND 'SPLITS' &START &ENDIT"
    "(line)=LINE .ZCSR";sysdval=Substr(line,2)
    Parse VAR sysdval . spliti .
    "FIND 'SPLITS' &START &ENDIT"
    "(line)=LINE .ZCSR";sysdval=Substr(line,2)
    Parse VAR sysdval . splita aext .
/*--------------------------------------------------------------------*/
    "FIND 'FREESPACE' &START &ENDIT"
    "(line)=LINE .ZCSR";sysdval=Substr(line,2)
    Parse VAR sysdval x1 freei .
    "FIND 'FREESPACE' &START &ENDIT"
    "(line)=LINE .ZCSR";sysdval=Substr(line,2)
    Parse VAR sysdval x1 freea .
    "FIND 'FREESPC-' &START &ENDIT"
    "(line)=LINE .ZCSR";sysdval=Substr(line,2)
    Parse Value Space(Translate(sysdval,' ','-')) With 'FREESPC ' free .
/*--------------------------------------------------------------------*/
    keyl  =getval1(keyl)
    arecl =getval1(arecl)
    mrecl =getval1(mrecl)
    buff  =getval1(buff)
    cisz  =getval1(cisz)
    keyp  =getval1(keyp)
    freei =getval1(freei)
    freea =getval1(freea)
/*  free  =getval1(free)                                              */
    rect  =getval1(rect)
    recd  =getval1(recd)
    reci  =getval1(reci)
    recu  =getval1(recu)
    cipca =getval1(cipca)
    spliti=getval1(spliti)
    splita=getval1(splita)
    aext  =getval1(aext)
/*--------------------------------------------------------------------*/
    If Index(v1,' SPEED')  >0  Then recov    ='S'
    If Index(v1,' SUBAL')  >0  Then unique   ='N'
    If Index(v1,' UNIQUEK')>0  Then aixuniqk ='Y'
    If Index(v1,' ERASE')  >0  Then erase    ='Y'
    If Index(v1,' WRITE')  >0  Then write    ='Y'
    If Index(v1,' IMBED')  >0  Then imbed    ='Y'
    If Index(v1,' REPLI')  >0  Then repl     ='Y'
    If Index(v1,' ORDER')  >0  Then order    ='Y'
    If Index(v1,' REUSE')  >0  Then reuse    ='Y'
    If Index(v1,' SPANN')  >0  Then span     ='Y'
    If Index(v1,' INDEX')  >0  Then vtype    ='INDEX'
    If Index(v1,' NUMBE')  >0  Then vtype    ='NUMBE'
    If Index(v1,' NONIN')  >0  Then vtype    ='NONIN'
/*--------------------------------------------------------------------*/
    "FIND 'VOLSER' &START &ENDIT FIRST"
    "(LINEV)=LINE .ZCSR"
    volume=Substr(linev,27,6)
    Do While rc=0
        "FIND 'VOLSER' &START &ENDIT NEXT";If rc/=0 Then Iterate
        "(LINEV)=LINE .ZCSR"
        Parse Value Translate(Word(linev,1),' ','-') With . vol .
        volume=Volume vol
    End
    volume=Space(volume,1,',')

    "FIND 'SPACE-TYP' &START &ENDIT FIRST"
    "(line0)=LINE .ZCSR"
    Parse VAR line0 line hi_a_rba .
    Parse Value getval1(line) With altype +1
    hi_a_rba= getval1(hi_a_rba)
    "FIND 'SPACE-PRI'";"(LINE1)=LINE .ZCSR"
    "FIND 'SPACE-SEC'";"(LINE2)=LINE .ZCSR"
    "FIND 'DEVTYPE'"  ;"(LINED)=LINE .ZCSR"
    devt=Substr(lined,24,8)
    Select
        When devt='3010200F' Then devt=3390
        Otherwise devt='????'
    End

    Parse VAR line1 line hi_u_rba .
    prim=getval1(line)
    hi_u_rba=getval1(hi_u_rba)
    Call getval2
    If Datatype(hi_u_rba,'w') & Datatype(hi_a_rba,'w') Then,
        uperc=Format((hi_u_rba/hi_a_rba)*100,3,0)

    Parse VAR line2 line .
    sec=getval1(line)
    Call getval2
    Return 0

/*--------------------------------------------------------------------*/
/* Extract the value from format 'CCCCC------------nnn' and return    */
/* value nnn in variable WORD                                         */
/*--------------------------------------------------------------------*/
getval1:Arg line;lp=Lastpos('-',line);Return Substr(line,lp+1)

/*--------------------------------------------------------------------*/
/* Calculate the capacity when changing DASD type between 3350/3380.  */
/*--------------------------------------------------------------------*/
getval2:
    If ndevt=3380 Then Do
        If devt=3350 Then Do
            If altype='I' Then oper=12;Else oper=25
            quot=word*10%oper
            rem=(word*10)//oper
            rem=(rem*10)%oper
            If rem>4 Then word=quot+1;Else word=quot
            If word=0 Then word=1
        End
    End
    If ndevt=3350 Then Do
        If devt=3380 Then Do
            If altype='I' Then oper=12;Else oper=25
            quot=word*oper
            rem=quot//10
            quot=quot%10
            If rem>4 Then word=quot+1;Else word=quot
            If word=0 Then word=1
        End
    End
    Return

Help_me:
    Address TSO "NEWSTACK"
    x=iSay('*VSAMCRM1: Variable use in exception reporting.')
    x=iSay('*')
    x=iSay('*The following are the variables that are returned by',
           'routine "VSAMCRM1".')
    x=iSay('*Also reported are the values for them for the dataset to',
           'demonstrate the')
    x=iSay('*actual values you max expect.')
    x=iSay('*')
    x=iSay('*To make up exception rules use the variable names in this',
           'report as follows:')
    x=iSay('*Remove the "*" in column1 and code using the following',
           'format,')
    x=iSay('*  varname oper value ec ci comments')
    x=iSay('*Where,')
    x=iSay('*    varname - variable name as per column 2')
    x=iSay('*    oper    - Operator (> < = /) / is not equal')
    x=iSay('*    value   - value for comparison')
    x=iSay('*    ec      - Exception code (refer "$" entries)')
    x=iSay('*    ci      - Combination indicator (| or &)')
    x=iSay('*               | - "OR" the next line with this or other')
    x=iSay('*                   previous "ci"''d lines')
    x=iSay('*               & - "AND" the next line with this or other')
    x=iSay('*                   previous "ci"''d lines')
    x=iSay('*    comments- Doh!')
    x=iSay('*')
    x=iSay('*To make up exception codes to associate a meaningfull',
           'description with the "ec"')
    x=iSay('*code made up in the exception rule. Use the following format:')
    x=iSay('*  $ code description')
    x=iSay('*Where,')
    x=iSay('*    $       - In column 1 to identify an exception code',
           'definition')
    x=iSay('*    code    - Same code used under "ic" in exception rule')
    x=iSay('*              (may be up to 5 characters long)')
    x=iSay('*    description')
    x=iSay('*            - Doh!')
    x=iSay('*Example:')
    x=iSay('*Col 1')
    x=iSay('*  |')
    x=iSay('*  DCASPL > 0           CAS          Data CI split')
    x=iSay('*  ICASPL > 0           CAS |        Index CI split')
    x=iSay('*  ICASPL > 0           CAS          Index CI split')
    x=iSay('*  DCISPL > 10          CIS          Data CI split')
    x=iSay('*  ICISPL > 5           CIS          Index CI split')
    x=iSay('*  DRECD  > 100         DD           Data REC-DELETED')
    x=iSay('*  DRECI  > 1000        DI           Data REC-INSERTED')
    x=iSay('*  *')
    x=iSay('*  $ CAS CA Splits > 0 (DATA and INDEX)')
    x=iSay('*  $ CIS CI Splits (DATA > 10, INDEX > 5)')
    x=iSay('*  $ DD  DATA records deleted > 100')
    x=iSay('*  $ DI  DATA records inserted> 1000')
    x=iSay('*  *')
    x=iSay('*')
    If Word(parm#,1)='?' Then Return 0

    If csm_caller/='' Then Do
        x=iSay('* The following subset of "VSAMCRM1" variables are',
               'avaibale to "'#caller'".')
    End
    Do While vsamvar/=''
        Parse VAR vsamvar var vsamvar
        If csm_caller/='' & Wordpos(var,csm_caller)=0 Then Iterate
/*      If csm_caller/='' & Wordpos(var,csm_caller)>0 Then r_pref='*>'*/
/*      Else r_pref='*'                                               */
        Interpret 'yy=h_'var
        Interpret 'xx=Substr(var,1,9)'var
/*      x=iSay(Substr(r_pref||Left(xx,52) yy,1,79))                   */
        x=iSay(Substr('*'Left(xx,52) yy,1,79))
        #tr=Trace('o')
    End
    x=isay(' ')
    x=isay(Center('*****',79))
    x=isay()
    Return 0
iSay:Parse Arg n#;Interpret help_out 'n#';Return 0

