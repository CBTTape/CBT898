/******************************** REXX ********************************/
/*                                                                    */
/* This EXEC invokes the VTOC command through ISPF.                   */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     VT       - Alias for 'VTOC'.                                   */
/*              - Macro to prepare output listing for Multi-Procs     */
/*                processing (inserts 'DSN=').                        */
/*   CLIST:                                                           */
/*     VTB      o Macro to backup the output from VTOC                */
/*                                                                    */
/*   Panels:                                                          */
/*     UTILA06  - VTOC primary parameter entry panel.                 */
/*     UTILAH61 o VTOC tutorial panel.                                */
/*     UTILAH62 o VTOC tutorial panel.                                */
/*     UTILAH63 o VTOC tutorial panel.                                */
/*     UTILAH64 o VTOC tutorial panel.                                */
/*     UTILAH65 o VTOC tutorial panel.                                */
/*     UTILAH66 o VTOC tutorial panel.                                */
/*     UTILAH67 o VTOC tutorial panel.                                */
/*     VT       - Customised copy of UTILA06.                         */
/*                                                                    */
/*   Skeleton:                                                        */
/*     VTOCBCRE o Skeleton for batch processing.                      */
/*                                                                    */
/*   Source:                                                          */
/*     VTOC     o Customised source from CBT tape.                    */
/*     VTOC$    o JCL to assemble VTOC program(s).                    */
/*     VTOCTRKS o Customised source from CBT tape.                    */
/*                                                                    */
/*   Loadmod:                                                         */
/*     VTOCNEW  - Self explanitory.                                   */
/*     VTOCTRKS o Map only listing.                                   */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    Parse Upper VAR parm# parm1 parm2 parm3 .
    Parse Source op_sys op_mode vtocm dd_name dsn_name .

    "VGET (ZAPPLID) ASIS"
    If zapplid/='CSM' Then Do
        "SELECT CMD(%"vtocm") NEWAPPL("tapplid")"
        Return 0
    End

    hlq=$alkhlq();alq=$alkllq();userid=Userid()

    "VGET (VTOCENVR) SHARED"
    If vtocenvr = "MACRO1" Then Do
        Call macro_1
        Return 0
    End
    If vtocenvr = "MACRO2" Then Do
        Call macro_2
    End

/*  vtocpgm = 'VTOC'                                                  */
    vtocpgm = 'VTOCNEW'
    llq     = 'TEMP'
    dsnvtoc = hlq".VTOCOUT."llq
    toname  = hlq".VTOCOUT"
    unit    = "PERM"                          /* <=== change for site */
    Signal on Syntax Name error_off_$ALKUVOL
    unitvol="UNIT(SYSDA)";unitvol=$ALKUVOL('$ZTEMPF')
error_off_$ALKUVOL:Signal off Syntax
    ispfhlq = "SYS1.ISPF"                     /* <=== change for site */
    mapname = hlq".VTOCMAP."llq
    dvtoc   =  "'"hlq".BTCHVTOC."llq"'"
    "VPUT (DSNVTOC TONAME UNIT) SHARED"
    v_flds = ' ',
             'ALLOC BLKSZ CCHH CC CAT CDATE DSNAME DSN DSO EX EXPDT',
             'LRECL PCT PROT REFDT RFM ROUND SECT TYPE UNUSED USED',
             'VOLUME VOL '

/*  panel='UTILA06'                                                   */
    panel='VTP'
    panels=hlq'.'alq
    clists=hlq'.'alq
    loadlib=$alkload()
/*-------------------------------------------------------------------*/
    odisp   ="SHR"
    allocd  ="NO"
    keepds  ="N"
    genjcl  ="N"
    varbles ="ACTNPDS,SFIELDS,ACT,LFIELDS,LEN,PRINTER,CONTAIN,"||,
             "VOLUME ACCT"
    "VGET (&VARBLES) PROFILE"
    If actnpds='' Then actnpds="V"

dispi:
    csr=

dispe:
    "SETMSG MSG(GC009)"


disp:
    zcmd=
    "DISPLAY PANEL(&PANEL) CURSOR(&CSR)"
    If rc/=0 Then Signal done
    Parse Value '' With csr gc009
    If zcmd = "TRACE" Then Do
        If zrest = 'OFF' Then Do
            Trace Off
            trace = ''
            extra  = 'off'
        End
        Else Do
            trace = 'Y'
            extra  = 'on'
            Trace r
        End
        gc009   = "Trace is now "extra"."
        Signal disp
    End

    opt = zcmd
    If zcmd = 'E' | zcmd = 'B' | zcmd = 'M' | zcmd = 'V' Then Do
        Call pro1
        Signal dispe
    End

    If zcmd = 'EB' Then Do
        Call pro2
        Signal disp
    End

    If map = 'Y' Then Do
        Call maponly
        Signal disp
    End

    xxx = Translate(lfields,' ',',')
    Do Forever
        Parse VAR xxx xx_x xxx
        If Index(v_flds,' 'Strip(xx_x)' ') = 0 Then Do
           gc009 = "'"xx_x"' value is incorrect. Please correct."
           csr = 'LFIELDS'
           Signal dispe
        End
        If xxx = '' Then Leave
    End
    If sort = 'Y' & sfields /= '' Then Do
       xxx = sfields
       rc1 = 0
       Do Forever
           Parse VAR xxx xx_x ',' xxx
           Parse VAR xx_x f_1 f_2 f_3
           Select
               When (f_1  = '')Then rc1 = 1
               When (f_2  = '')Then rc1 = 1
               When (f_3 /= '')Then rc1 = 1
               Otherwise NOP
           End
           If rc1 | xxx = '' Then Leave
       End
       If rc1 Then Do
           gc009 = "Invalid sort operands. Please correct or turn",
                   "sort off."
           csr = 'SFIELDS'
           Signal dispe
       End
    End

dispe:
    "SETMSG MSG(GC009)"

    lengerr     = 'N'
    operands    = '('volume')'
    If level   ¬= '' Then operands = operands 'LEVEL('level')'
    If contain ¬= '' Then operands = operands 'CONTAINING('contain')'
    If ending  ¬= '' Then operands = operands 'ENDING('ending')'
    If typ     ¬= 'TRK' Then operands = operands typ
    If catlg    = 'Y'   Then operands = operands 'CAT'
    If sort     = 'Y' & sfields ¬= '' Then ,
       operands = operands 'SORT('sfields')'
    If sort     = 'N'   Then operands = operands 'NOSORT'
    If len      < 44    Then operands = operands 'DSNLEN('len')'
    If lst      = 'Y' & act ¬= '' Then ,
       operands = operands 'PRINT('act '('lfields'))'
    If lst      = 'Y' & act  = '' & catlg = 'Y' Then ,
       operands = operands 'PRINT(ADD (VOLUME,CAT))'
    If lst      = 'N'   Then operands = operands 'NOPRINT'
    If lim0    ¬= '' Then operands = operands 'LIMIT('lim0 op0 val0')'
    If cn1     ¬= '' Then operands = operands cn1'1('lim1 op1 val1')'
    If cn2     ¬= '' Then operands = operands cn2'2('lim2 op2 val2')'
    If cn3     ¬= '' Then operands = operands cn3'3('lim3 op3 val3')'

    If genjcl = 'Y' | zcmd = 'BATCH' Then Do
        jobid = Substr(userid'VB',1,8)

        oper0="'"vtocpgm"',"
Trace r
        xxx=operands
Say 'xxx=>'xxx'<'
        Parse VAR xxx p1 'LEVEL(' string ')' p2
        If string/='' Then xxx=p1 "LEVEL('"alias"')" p2
        Else string='No_alias'
        Do i=1 To 5
            Parse VAR xxx xx_x 60 xxx
            If xx_x /= '' Then xx_x = "'"xx_x"' ||,"
            Interpret 'oper'i '= xx_x'
        End
#tr=Trace('o')
        operz = "''"
        If dvtoc/='SYSOUT' Then,
           If Substr(dvtoc,1,1)/="'" Then dvtoc="'"hlq"."dvtoc"'"
        prog='VTOCBATCH'
        Signal on Syntax Name error_off_alkjcpg
        x=$Alkjcpg(prog);If x/='' Then prog=x
error_off_alkjcpg:Signal off Syntax
        v1='def_ex def_hd def_bb def_ac'
        Interpret "Parse Value $alkjc(v1) With" v1
        acct=def_ac;xcl=def_ex
        mcl=def_bb                          /* Bit bucket             */
        mcl=def_hd                          /* Held output            */
        "FTOPEN TEMP"
        "FTINCL VTOCBCRE"
        "FTCLOSE"
        "VGET ZTEMPF"
        ddz = 'DZ'Time('s')
        Address TSO "ALLOC DD("ddz") DS('"ztempf"') OLD REU"
        "LMINIT DATAID(DATAID) DDNAME("ddz")"
        vtocenvr = "MACRO2"
        "VPUT (VTOCENVR) SHARED"
        "EDIT DATAID(&DATAID) MACRO("vtocm")"
        "LMFREE DATAID(&DATAID)"
        Address TSO "FREE DD("ddz")"
        Signal disp
    End

    If allocd = 'NO' Then Do
        x = MSG('Off')
        Address TSO "ALLOC F(VTOCOUT) DA('"dsnvtoc"') "odisp" REU"
        If rc ¬= 0 Then Do
            Address TSO "ALLOC F(VTOCOUT) DA('"dsnvtoc"') NEW",
                        "SPACE(10,5) CYLINDERS",
                        unitvol "RELEASE CATALOG",
                        "BLKSIZE(6150) LRECL(150)",
                        "DSORG(PS) RECFM(F B)"
            If rc ¬= 0 Then Signal error
        End
        x = MSG('On')
    End

    allocd = 'YES'
    Address TSO vtocpgm operands
    rcode = rc
    If rcode ¬= 0 Then Do
        gc009 = "VTOC RC = "rcode"."
        "SETMSG MSG(GC009)"
    End

    If print = 'Y' Then Signal printv
    "CONTROL ERRORS RETURN"
    opt = actnpds

pro1:
    dsname = dsnvtoc

pro1a:
    macro = ''
    Select
        When (opt = 'M' | opt = 'C') Then Do
            macro = 'MACRO('vtocm')'
            vtocenvr = "MACRO1"
            "VPUT (VTOCENVR) SHARED"
        End
        When (opt = 'V') Then action = 'VIEW'
        When (opt = 'E') Then action = 'EDIT'
        Otherwise             action = 'BROWSE'
    End

    Signal ON ERROR NAME err1
    "&ACTION DATASET('&DSNAME.') &MACRO"
    Signal OFF ERROR
    "CONTROL DISPLAY REFRESH"
    Signal disp

err1:
    rc1 = rc
    Signal OFF ERROR
    If rc > 4 Then Do
        "SETMSG MSG(GC009)"
        csr1 = ''
    End
    Signal disp
    Return

pro2:
    If Sysdsn("'"toname"'") ¬= 'OK' Then Do
        Address TSO "ALLOC DA('"toname"') NEW SPACE(10,5) TRACKS",
              "UNIT("unit") RELEASE CATALOG",
              "RECFM(F B) BLKSIZE(6150) LRECL(150) DSORG(PO) DIR(10)"
        Address TSO "FREE DA('"toname"')"
    End

    If zrest ¬= '' Then member = zrest

    Signal ON ERROR NAME err1
    "EDIT DATASET('&TONAME&MEMBER')"
    Signal OFF ERROR
    Signal disp

printv:
    If printer = '' Then printer = "LOCAL"
    Address TSO "PRINTOFF "dsnvtoc "DEST("printer")"
    "CONTROL DISPLAY REFRESH"
    Signal disp

maponly:
    x = MSG('Off')
    Address TSO "ALLOC F(VTOCOUT) DA('"mapname"') OLD REUSE"
    If rc ¬= 0 Then ,
        Address TSO "ALLOC F(VTOCOUT) DA('"mapname"') NEW",
           "SPACE(10,5) TRACKS BLKSIZE(6600) LRECL(132)",
           unitvol "RELEASE CATALOG"
    allocd = 'YES'
    x = MSG('On')
    x = OUTTRAP('line',500,'NOCONCAT')
    Address TSO "CALL '"loadlib"(VTOCTRKS)' '"volume"'"
    rc1 = rc
    x = OUTTRAP('Off')
    If rc1 = 0 Then Do
       dsname = mapname
       opt    = actnpds
       If actnpds = 'M' Then opt = 'V'
       Else                  opt = actnpds
       Signal pro1a
    End

    "CONTROL DISPLAY REFRESH"
    gc009   = line1"."
    Signal dispe

error:
    gc009 = "Allocation failed for display dataset '"dsnvtoc"'."

done:
    x = MSG('Off')
    If SYSDSN("'"dsnvtoc"'") = 'OK' & keepds = 'N' Then Do
       Address TSO "DELETE '"dsnvtoc"' PURGE"
       Address TSO "DELETE '"mapname"' PURGE"
    End

    If allocd = 'YES' Then Address TSO "fREE F(VTOCOUT)"
    "VPUT (&VARBLES) PROFILE"
    Exit

exi1:
    Exit

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
/*                                                                   */
/* Edit-macro to prepare the outlist of the 'VTOC' command for       */
/* "CSMDSN" processing using the query 'qqq/q' front-end.            */
/*                                                                   */
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
macro_1:
    vtocenvr = ''
    "VPUT (VTOCENVR) SHARED"

    "ISREDIT (STATUS) = USER_STATE"
    "ISREDIT FIND '  TOTALS - ' 1 LAST"
    If rc = 0 Then Do
        "ISREDIT (SLINE) = LINENUM .ZCSR"
        "ISREDIT LINE_AFTER &SLINE = '--------------------------"||,
            "----------------------------------------------------"||,
            "-----------------------------------------------------'"
        sline  = sline + 1
    End
    Else sline = 1
    "ISREDIT LABEL &SLINE = .SLINE"
    "ISREDIT EXCLUDE '1 VTOC '     1 ALL .SLINE .ZLAST"
    "ISREDIT EXCLUDE '0DSNAME '    1 ALL .SLINE .ZLAST"
    "ISREDIT EXCLUDE '0 TOTALS '   1 ALL .SLINE .ZLAST"
    "ISREDIT CHANGE '0' ' ' NX     1 ALL .SLINE .ZLAST"
    "ISREDIT CHANGE ' ' ' DSN=' NX 1 ALL .SLINE .ZLAST"
    "ISREDIT CHANGE '0' ' '        1 ALL .SLINE .ZLAST"
    "ISREDIT LABEL   "2 + sline" = .START"
    "ISREDIT XSTATUS &SLINE = NX"
    "ISREDIT EXCLUDE '1 VTOC '     1 .START .ZLAST ALL"
    "ISREDIT EXCLUDE ' DSNAME'     1 .START .ZLAST ALL"
    "ISREDIT DELETE ALL X                   .SLINE .ZLAST"
/*  "ISREDIT CHANGE '1' ' '        1 ALL NX .SLINE .ZLAST"            */
    "ISREDIT RESET"
    "ISREDIT CAPS OFF"
    line = "    'DSN=' has been inserted in column 1 to",
       "permit the use of the "
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (LINE)"
    line = "    'MP' macro to front end the 'Multi-Procs'",
       "command."
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (LINE)"
    line = "    Take care as some of the long dataset names",
       "may be truncated."
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (LINE)"
    "ISREDIT USER_STATE = (status)"

mex1:
    "ISREDIT SAVE"
    Return

/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
/*                                                                   */
/* Edit-macro to prepare the JCL with instructional NOTE lines.      */
/*                                                                   */
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
macro_2:
    vtocenvr = ''
    "VPUT (VTOCENVR) SHARED"

    x = Outtrap('line.',5,'NOCONCAT')
    Address TSO 'LU' Userid()
    x = Outtrap('Off')
    Parse VAR line.1 . 'NAME=' name .
    lc = 'abcdefghijklmnopqrstuvwxyz'
    uc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    name = Substr(name,1,1)Translate(Substr(name,2),lc,uc)
    x_msg = Msg()
    x     = Msg('Off')
    Trace o

    Call On Error Name errproc_1;get_me_this_line_number;n_st = sigl +2
/*

I\Hello &name.....

  This is the JCL that has been generated from the parameters you
  have supplied to the VTOC command. It will execute the VTOC
  command in batch and output the listings to SDSF held Q.

  Suggest you copy this JCL into a permanent PDS(member) prior to
  ending this edit session otherwise it will be lost.

*/
    Call On Error Name errproc_1;get_me_this_line_number;n_en = sigl -2
    Trace
    x = Msg(x_msg)
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,2) = 'I\' Then Do Forever
            line = '  'Substr(line,3)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        x = nl('*'Substr(line,1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"
    Exit

errproc_1:
    Call Off Error
    Return Sigl

nl:
    Parse Arg noteline
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (noteline)"
    Return 0
