/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* VV (Verify Volser):                                                */
/*                                                                    */
/* Macro to check validity of volser in JCL. Afterthought exit to     */
/* DSNE routime.  Refer to it for more assistance.                    */
/*                                                                    */
/* Parameters from when called by another macro:                      */
/*   /B                    <- Running in batch (when invoked from     */
/*                            an external routine, eg. DSNE). This    */
/*                            will convert notelines/msglines to      */
/*                            "Say" statements.                       */
/*   /IU                   <- Ignore uncataloged datasets (do not     */
/*                            flag as error)                          */
/*   /L(from_line,to_line) <- lines to process (when invoked from     */
/*                            an external routine, eg. DSNE).         */
/*   /VT                   <- Toggle volumes if different (makes      */
/*                            original noteline and noteline orig)    */
/*                                                                    */
/*--------------------------------------------------------------------*/
vv_ver='1.04'                                                         */
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    Address ISREDIT
    parm#=Translate(parm#)                  /* Upper case             */

    "(status)=USER_STATE";"(cpstate)=CAPS";"CAPS=OFF"

    If Wordpos('/B',parm#)>0 Then Do
        batch=1
        Say '*'Copies('-',77)'*'
        Say '*';Say '* Running "VV" in batch.';Say '*'
    End
    Else batch=0
    If Wordpos('/IU',parm#)>0 Then ignore_ucat=1;Else ignore_ucat=0
    If Wordpos('/VT',parm#)>0 Then Do
        vol_tog=1;linemx=' and has been toggled.'
    End
    Else Do
        vol_tog=0;linemx='.'
    End
    If Index(parm#,'/L(') Then Do
        Parse VAR parm# . '/L(' zfrange ',' zlrange ')'
        set_rc=1
    End
    Else Do
        snaplvv=;Address ISPEXEC "VPUT (snaplvv) PROFILE"
        "SNAP TVV"
        "PROCESS RANGE C M";"(cmd)=RANGE_CMD";"X ALL"
        If cmd='C' Then Do
            "(zfrange)=LINENUM .ZFRANGE";"(zlrange)=LINENUM .ZLRANGE"
        End
        Else Do
            "(zfrange)=LINENUM .ZFIRST";"(zlrange)=LINENUM .ZLAST"
        End
        zfrange=zfrange+0;zlrange=zlrange+0
        set_rc=0
    End

    "CURSOR="zfrange 0
    newline='DD EXEC JOB SET INCLUDE ORDER PROC';j=0
    #tr=Trace('o')
    Do i=zfrange To zlrange
        "SEEK ' DD '";If rc/=0 Then Leave
        "(i)=LINENUM .ZCSR";dd_l#=i;If i>zlrange Then Leave
        "(line)=LINE .ZCSR"
        If Substr(line,1,2)/='//' Then Iterate
        If Substr(line,3,1)='*' Then Iterate
        linex=Strip(Substr(line,1,72))
        Do Forever
            i=i+1;If i>zlrange Then Leave
            "(line)=LINE" i
            If Substr(line,1,2)/='//' Then Iterate
            If Substr(line,3,1)='*' Then Iterate
            If Wordpos(Word(line,2),newline)>0 Then Leave
            line=Substr(line,1,72)
            linex=linex || Strip(Subword(line,2))
        End
        Parse VAR linex . 'VOL=SER=' vol .
        If vol='' Then Parse VAR linex . 'SER=' vol .
        If vol='' Then Iterate
        Parse VAR vol vol ')';Parse VAR vol vol ','
        Parse VAR linex . 'DSN=' dsn
        If dsn='' Then Parse VAR linex . 'DSNAME=' dsn .
        Parse VAR dsn dsn ','
        j=j+1;vv_dsn.j=dsn;vv_vol.j=vol;vv_l#.j=dd_l#
        If #tr/='N' Then Do
            Say linex;Say vv_l#.j vv_vol.j vv_dsn.j;Say ' '
        End
    End
    x=Trace(#tr)
    j0=j;iv=0
    m1=Msg('Off')
    #tr=Trace('o')
    Do j=1 To j0
        "CURSOR="vv_l#.j 0
        dsn=vv_dsn.j
        If Index(dsn,'&') > 0 Then dsn=eval_amper(dsn)
        xx=Listdsi("'"dsn"' DIRECTORY NORECALL SMSINFO")
        If xx<5 | sysreason=9 | sysreason=25 Then Nop;Else sysvolume='Uncatl'
        If sysvolume/=vv_vol.j Then Do
            If sysvolume='Uncatl' Then Do
                If ignore_ucat=1 Then Iterate
/*              If vol_tog Then Iterate                               */
            End
            "CURSOR="vv_l#.j 0
            "F '"vv_dsn.j"' NEXT"
            "CURSOR="vv_l#.j 0
            "F '="vv_vol.j"' NEXT";"(,col)=CURSOR"
            "(line)=LINE .ZCSR"
            If sysvolume='Uncatl' Then,
                linem='//* - Datset catologued to volume "'sysvolume'".'
            Else,
                linem='//* - Datset catologued to volume "'sysvolume'"'||linemx
            x=msg_line(linem)
            If #tr/='N' Then Say Substr(linex,1,79)
            linex=Overlay(sysvolume,line,col+1)
            If vol_tog & sysvolume/='Uncatl' Then Do
                x=rep_line(linex);linex=line
            End
            x=note_line(linex)
            If #tr/='N' Then Say Substr(linex,1,79)
            iv=iv+1
        End
    End

ext2:
    x=Trace(#tr)
    "CAPS=(cpstate)";"USER_STATE=(status)"
    If set_rc Then Return iv
    Address ISPEXEC "VGET (snaplvv) PROFILE"
    If iv=0 Then Do
        If snaplvv/='' Then "SNAP RVV";Else "RESET"
    End
    "USER_STATE=(status)"
    If batch
        batch=1
        Say '*';Say '* Ending "VV" in batch.';Say '*'
        Say '*'Copies('-',77)'*'
    End
    Else batch=0
    Return 0

msg_line:Parse Arg lo
    If batch Then Do
        Say 'For dataset:' vv_dsn.j
        Say '==MSG>' lo
    End
    Else "LINE_BEFORE .ZCSR=MSGLINE (lo)"
    Return 0
note_line:Parse Arg lo
    If batch Then Do
        Say 'For dataset:' vv_dsn.j
        Say '=NOTE=' lo
    End
    Else "LINE_BEFORE .ZCSR=NOTELINE (lo)"
    Return 0
rep_line:Parse Arg lo
    If batch Then Do
        Say 'Original line below is replaced by (next line):'
        Say lo
    End
    Else "LINE .ZCSR=(lo)"
    Return 0

$EVALAMP:$evalamp_ver='2.09'
/*--------------------------------------------------------------------*/
/* Parse the line looking for variables startingt with an '&'.        */
/* If found, extract the variable name and than calls anouther sub-   */
/* routine to see if the variable has been set.                       */
/* If the variable name is returned it is not a system symbol and no  */
/* substitution is made.                                              */
/* Parameters:                                                        */
/*  1. Text to parse.                                                 */
/*  2. Column to parse from.                                          */
/*  3. Literal 'LAST' to start from last line rather than current     */
/*     position. Designed when parm is passed to instream proc.       */
/*--------------------------------------------------------------------*/
eval_amper: Parse Arg text,v_p,s_order
    loop_lim=50                             /* Arbitary loop limit    */
    If debug/=1 Then debug=0
    "ISREDIT (xx)=DATASET"
    If rc/=0 Then Do
        If Verify(text,nat,'N')=0 & Length(text)<=8 Then val=Mvsvar(Symdef,text)
        Else val=
        If val/='' Then Return val;Else Return text
    End
    #tr=Trace()
    expand=1
    nat='ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||,
        'abcdefghijklmnopqrstuvwxyz' ||,
        '0123456789@#$'
    If lin#='LIN#' Then "ISREDIT (lin#)=LINENUM .ZCSR"
    If s_order='LAST' Then "ISREDIT (lin#)=LINENUM .ZLAST"
    If \Datatype(v_p,'W') Then v_p=1
    Do Forever
        v_p=Index(text,'&',v_p)
        If v_p=0 Then Return text
        next_char=Substr(text,v_p+1,1)
        If next_char='&' | next_char=' ' Then Do;v_p=v_p+2;Iterate;End
        If v_p=1 Then p1=;Else p1=Substr(text,1,v_p-1)
        p2=Substr(text,v_p)
        lc=Verify(p2' ',nat,'N',2)
        var=Substr(p2,1,lc-1)
        If Substr(p2,lc,1)='.' Then Do
            lc=lc+1
            var=var'.'
        End
        p2=Substr(p2,lc)
        If debug Then Say Space(var Substr(text,1,72))
        var_v=Get_equate(var)
        If var_v/=var Then Do
            If var_v/='' Then Do
                If Index(var_v,"''")>0 Then var_v=$cstring(var_v,"''","'",,'*')
                text=$cstring(text,var,var_v,v_p,'*')
            End
            Else Do
                x=Index(text,var)
                If x>0 Then text=Delstr(text,x,Length(var))
            End
        End
        If var_v/='' Then v_p=v_p+1
    End
    Return text

/*--------------------------------------------------------------------*/
/* Receive a variable name as the argument and seacrh the JCL for any */
/* variable equate statements, eg. "varname=". If such an equate is   */
/* found it is assumed it is a user variable. If no equate is found   */
/* a MVS symbolic evaluation is undertaken.  If successfull, the      */
/* new value is returned else the original variable name is returned. */
/* Variable "findtry" is used in case we are not in JCL and get into  */
/* an indefinite loop.                                                */
/*--------------------------------------------------------------------*/
Get_equate: Parse Arg var_v
    Parse VAR var_v '&' xxx '.' var_suf
    sysvar=0
    If xxx='SYSUID' Then Return var_v
    Interpret "If vas_"xxx"/='VAS_"xxx"' Then Return vas_"xxx
    lin@=lin#;col@=0;find=xxx'='
    findtry=0                               /* Stop indefinite loop   */
    Do Forever
        findtry=findtry+1;If findtry>loop_lim Then Do
            Say 'Recursive loop limit "'loop_lim'" reached processing:'
            Say '  'Space(var_v Substr(text,1,72))
            Say 'Check your source and try again.'
            Leave
        End
        "ISREDIT CURSOR=" lin@ col@
        "ISREDIT SEEK '"find"' PREV"
        If rc/=0 Then "ISREDIT SEEK '"find"'"
        If rc=0 Then Do
            "ISREDIT (liney)=LINE .ZCSR"
            "ISREDIT (lin@,col@)=CURSOR"
            If Verify(#tr,'NO')>0 Then Say lin@+1 Col@+0 Substr(liney,1,70)
            If Substr(liney,1,3)='//*' | Substr(liney,1,2)/='//' Then,
                Do;col@=col@-1;Iterate;End
            If Verify(liney,nat,'M',col@-1)=col@ & expand Then Do
                If \expand Then Return var_v
                Interpret "Parse VAR liney '"find"' liney"
                If Substr(liney,1,1)/="'" Then Do
                    If Substr(liney,1,1)=' ' Then liney=
                    Parse VAR liney val .
                    Parse VAR val val ',' .
                End
                Else val=get_quote_delim(liney)
                If Substr(val,1,1)='&' Then Do
                    Parse VAR val '&' xxx '.' zzz;xxx=Strip(xxx,,"'")
                    var_suf=var_suf||zzz;find=xxx'='
/*                  findtry=0                                         */
                    col@=col@-1;Iterate
                End
                Select
                    When val='DATE()' Then Return $DATEMAN('REV',,2,'D')
                    When val='TIME()' Then Do
                        Parse Value Time() with hh ':' mm ':' ss
                        Return hh||mm||ss
                    End
                    When Substr(val,1,8)='$DATEMAN(' Then Do
                        Parse VAR liney '$DATEMAN(' dmv ')' .
                        Interpret "xx=$DATEMAN("dmv")"
                        If Word(xx,1)/='Error' Then Return xx
                        Else Return val
                    End
                    Otherwise Return val||var_suf
                End
            End
            Else Do;col@=col@-1;Iterate;End
        End
        Leave
    End
Return_Var_val:
    If Verify(xxx,nat,'N')=0 & Length(xxx)<=8 Then val=Mvsvar(Symdef,xxx)
    Else val=
    If val='' Then Return var_v||var_suf
    Else Do;sysvar=1;Return val||var_suf;End

/*--------------------------------------------------------------------*/
/* It has been established that the first character of a value is a   */
/* quote and the value is parsed for a valid SINGLE quote terminator. */
/*--------------------------------------------------------------------*/
get_quote_delim:
    yyy=Substr(Arg(1),2);nq=1
    Do Forever
        nq=Index(yyy,"'",nq)
        If nq=0 Then nq=Length(Strip(yyy))+1
        Else If Substr(yyy,nq+1,1)="'" Then Do
                 nq=nq+2;Iterate
             End
        val=Substr(yyy,1,nq-1)
        yyy=Substr(yyy,nq+1);If yyy='' Then Leave
        Parse VAR yyy . ',' yyy
        Leave
    End
    Return val
$EVALAMP_end:
