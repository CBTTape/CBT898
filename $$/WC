/* REXX
+----------------------------------------------------------------------+
|(c) Copyright 2003 ASYSTS Pty. Ltd.                                   |
|                                                                      |
|MACRO:     WEIGHTCONV                                                 |
|                                                                      |
|PURPOSE:   Conver weight between Kg to Lb (St.Lb)                     |
|           Will place it as a noteline in member being edited.        |
|Parms:     Keyword parameter 'L2K' (lbs to Kg) can be passed.         |
|           The following are positional parameters after any keyword  |
|           parameters have been evaluated:                            |
|           1. Weight. If omitted starts with 10 and increments by 10  |
|              15 times.                                               |
+----------------------------------------------------------------------+
*/
    'ISREDIT MACRO (parm#)'
    PARSE UPPER VAR parm# parm#

    loop_inc=10;loop=30
    Call parse_parms

    'ISREDIT (status) = USER_STATE'
    'ISREDIT RESET'

/*  Trace r                                                           */
    l_k=0.45359237
    k_l=2.204622622

    loop_end=defs+loop_inc*loop
    Do i=defs By loop_inc While i<loop_end
        Select
            When l2k Then Do
                xx=conv_l2k(i)
                line=Format(i,4,2)'(lb) =' xx'(Kg)'
            End
            When s2k Then Do
                xx=conv_s2k(i)
                line=Format(i,4,2)'(St.lb) =' xx'(Kg)'
            End
            Otherwise Do
                xx=conv_k2l(i)
                line=Format(i,4,2)'(Kg) =' xx'(St.lb)  -  'yy'(lb)'
            End
        End
        'ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (line)'
    End

    'ISREDIT USER_STATE = (status)'
    Exit

conv_k2l:
    t_l = Arg(1) * k_l
    yy=t_l;Parse VAR yy yy '.' yyy
    yy=Right(yy,3)'.'Left(Substr(yyy,1,3),3,'0')
    t_s = t_l % 14
    Parse Value t_l // 14 With t_l '.' xx
    If xx > .5 Then t_l = t_l + 1
    If Length(t_l) = 1 Then t_l = '0't_l
    Return Right(t_s,3)'.'t_l

conv_l2k:
    t_l=(Arg(1))*l_k
    Return Format(t_l,4,2)

conv_s2k:
    Parse Arg t_s '.' t_l
    t_l = (14*t_s + t_l)*l_k
    Return Format(t_l,4,2)

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
Parse_parms:
    l2k=parse_cons('L2K',1,0,1)
    If \l2k Then sort=parse_cons('/L2K',1,0,2)

    s2k=parse_cons('S2K',1,0,1)
    If \s2k Then sort=parse_cons('/S2K',1,0,2)

    Parse VAR parm# defs .
    If Datatype(defs)/='NUM' Then defs=
    If defs='' Then Do
        If s2k Then Do;defs=01.00;Loop_inc=1;End;Else defs=10.00
    End

    Return 0


err01:
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit 8

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask (word does not need to start with mask).         */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr
