/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* XB: eXtended Browse.                                               */
/*                                                                    */
/* For further details invoke with '?' or browse doco at bottom.      */
/*                                                                    */
/*--------------------------------------------------------------------*/
XB: xb_ver='2.25'
    Address ISPEXEC;"CONTROL ERRORS RETURN"
    ARG parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"

byp1:
    Parse SOURCE . . xcmd .
    userid=Userid();hlq=Sysvar(Syspref);If hlq='' Then hlq=userid
    Signal On Syntax Name Help_me;Signal On Error Name Help_me
    If Wordpos(parm#,'? /? HELP /H')>0 Then Do x=$BR(xcmd '??');Return 0;End
    Signal Off Syntax;Signal Off Error
    If parm#='??' Then Signal Help_me

    "ISREDIT (status)=USER_STATE";If rc=0 Then ima_macro=1;Else ima_macro=0

    If Wordpos('/L',parm#)>0 Then Do
        s_order='LAST';parm#=Delword(parm#,Wordpos('/L',parm#),1)
    End;Else s_order=
    If Wordpos('/W',parm#)>0 Then Do
        norecall=0;parm#=Delword(parm#,Wordpos('/W',parm#),1)
    End;Else norecall=1
    If Wordpos('/T',parm#)>0 Then Do
        #tr='R';parm#=Delword(parm#,Wordpos('/T',parm#),1)
    End;Else #tr='N'
    If Wordpos('/M',parm#)>0 Then Do
        screen_type='M';parm#=Delword(parm#,Wordpos('/M',parm#),1)
    End;Else screen_type=
    If Wordpos('/RV',parm#)>0 Then Do
        retvol=1;parm#=Delword(parm#,Wordpos('/RV',parm#),1)
        Parse Upper VAR parm# parm2;parm#=parm# '/R' parm2
    End;Else retvol=0
    If Wordpos('/WC',parm#)>0 Then Do
        parm#=Delword(parm#,Wordpos('/WC',parm#),1)
        wild_card='Y'
    End;Else wild_card=
/*--------------------------------------------------------------------*/
    Parse Upper VAR parm# parm1 parm2 .
    zedsmsg=;#msg=Msg('Off');screen_type=;parm_line=1

    Select
        When Substr(parm#,1,2)='/X' Then Do
            parm1='/'Substr(parm#,3,1)
            ARG xx,screeni,screenc;If screenc='' Then screenc=1
        End
        When parm#='/P' Then Do
            parm1='/R'
            ARG xx,screeni,screenc;If screenc='' Then screenc=1
        End
        When parm#='/PV' Then Do
            parm1='/R';retvol=1
            ARG xx,screeni,screenc;If screenc='' Then screenc=1
        End
        When Wordpos(parm#,'/D /Q /DV /QV')>0 Then Do
            ARG xx,screeni,screenc;If screenc='' Then screenc=1
            If Wordpos(parm#,'/DV /QV')>0 Then Do
                retvol=1;Parse VAR parm1 parm1 +2
            End
        End
        Otherwise Do
            "VGET (zscreeni,zscreenc)";screenc=zscreenc;screeni=zscreeni
            screen_type='I';parm_line=0
            If parm1/='' & Substr(parm1,1,1)/='/' Then Do
                xxx=parm2;parm2=parm1;parm1=xxx
            End
            p21=Substr(parm2,1,1)
            If parm2=0 | p21='+' | p21='-' Then Do
                "VGET (screenc) SHARED"
                If screenc='' Then Do
                    zedlmsg='Make a selection before using line extensions.'
                    Signal exit_with_message
                End
                screenc=parm2*80+screenc
                parm#=;parm2=
            End
            "VPUT (screenc) SHARED"
            If Datatype(parm1,'W') Then Do
                screenc=(parm1-1)*80+1
                Parse VAR parm# . parm#
            End
        End
    End
    x=Trace(#tr)
    #tr=Trace()
    hlq_parser='ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$'
    llq_parser=hlq_parser'0123456789'
    dsn_parser=llq_parser"()'*."
Manual_Redo:
    dsn=;retry_1_more=0
    If screen_type='M' Then Do
        screeni=$Screenc();screenc=$Screenc('/C')
    End
    If parm_line Then Do
        line=screeni;wordx=
    End
    Else Do
        sol=(screenc%80)*80+1
        line=Substr(screeni,sol,80);wordx=$Wordat(line,screenc//80+1)
    End
    If Index(line,'&')>0 Then line=$evalamp(line,,s_order)
    If Index(wordx,'&')>0 Then wordx=$evalamp(wordx)
    dsn=extract_dsn(wordx);If dsn='' Then dsn=Extract_dsn(line)
    If parm1='/D' Then Do
        If ima_macro Then Call reset_status;x=Msg(#msg);Return dsn;End
    If dsn='' Then dsn=Ver_dsn(wordx)
retry_once_more:
    If dsn='' Then Do
        If parm1='/Q' Then xxx=Space(Translate(line,'       ',',-=()"'"'"))
        Else xxx=Translate(line,'  ','-,')
        Do While xxx/=''
            Parse VAR xxx dsn xxx
            If parm1='/Q' Then Do
                If Index(dsn,'.')>0 Then,
                    If $vername(dsn,,wild_card)='OK' Then Leave
                dsn=;Iterate
            End
            dsnx=
            Select
                When Index(dsn,'=')>0 Then Parse VAR dsn '=' dsn
                When Index(dsn,':')>0 Then Parse VAR dsn ':' dsn
                When Index(dsn,'-')>0 Then Parse VAR dsn '-' dsn
                When Index(dsn,'(')>0 Then Parse VAR dsn dsnx '(' dsn ')'
                Otherwise Nop
            End
            If Ver_dsn(dsnx'('dsn')')/='' Then Do;dsn=dsnx'('dsn')';Leave;End
            dsn=Ver_dsn(dsn);If dsn/='' Then Leave
        End
    End
    If dsn='' Then Do                       /* Final attempt          */
        dsn=Last_try(wordx)
        If dsn='' Then dsn=Last_try(line)
        If dsn='' & \retry_1_more Then Do
            line=Translate(line,'          ','=,''";:<>()');retry_1_more=1
            Signal retry_once_more
        End
        If screen_type='I' Then Do
            screen_type='M';Signal Manual_Redo
        End
    End
    If retvol Then Do
        Parse VAR line 'VOL=SER=' xbvolume ',' .
        If xbvolume='' Then Parse VAR line 'VOLUME(' xbvolume ')'
        If xbvolume/='' Then Do
            Parse VAR xbvolume xbvolume .;xbvolume=' VOLUME('xbvolume')'
        End
    End;Else xbvolume=
    If Wordpos(parm1,'/R /Q')>0 Then Do
        If ima_macro Then Call reset_status;x=Msg(#msg);Return dsn||xbvolume
    End
    If dsn='' Then Do
        zedlmsg = 'No valid dataset could be extracted from screen.',
                  '"'Strip(line)'"'
        Signal exit_with_message
    End
    If parm1/='' & Wordpos(parm1,'/V /E /B')=0 Then Do

        Signal on Syntax Name syntax_err_1
        x=Xe("'"dsn"'"||xbvolume parm1)
syntax_err_1:
        Signal exit1
    End
    If mig & norecall Then Do
        zedlmsg='Dataset migrated, pass parameter of "/W" to recall and wait.'
        Signal exit_with_message
    End
    act=$ttrunc(parm1,2,'/V,VIEW /E,EDIT *,BROWSE')
    Address ISPEXEC act "DATASET('&dsn')"
    If rc>4 Then Do
        x=Listdsi("'"dsn"'")
        If sysdsorg='VS' Then Do
            Signal on Syntax Name syntax_err_2
            zdlvol=;"VPUT (ZDLVOL) SHARED"
            x=VB("'"dsn"'")
            zedsmsg=;zedlmsg=
syntax_err_2:
            Signal exit1
        End
        Else Address ISPEXEC "SETMSG MSG(&ZERRMSG)"
    End

    Signal exit1

exit_with_message:
    "SETMSG MSG(ISRZ001)"
exit1:
    x=Msg(#msg)
    If ima_macro Then Call reset_status
    Exit 0

reset_status:
    "ISREDIT F 'Dummy_don\t_find'"
    "ISREDIT USER_STATE=(status)"
    Return 0

extract_dsn: Arg linex
    If dsn='' Then Parse var linex 'DSN=' dsn .
    If dsn='' Then Parse Var linex 'DSNAME=' dsn .
    If dsn='' Then Parse Var linex 'DSN(' dsn ')'
    If dsn='' Then Do
        Parse Var linex 'DSNAME(' dsn ')'
        If Index(dsn,'(')>0 Then dsn=dsn')'
    End
    If dsn='' Then Do
        Parse Var linex 'DATASET(' dsn ')'
        If Index(dsn,'(')>0 Then dsn=dsn')'
    End
    If dsn='' Then Return ''
    Parse var dsn dsn ',' .
    If parm#='/D' Then Return dsn
    Return Ver_dsn(dsn)

Ver_dsn:
    v_dsn=Arg(1)
    Parse VAR v_dsn v_dsn .;Parse VAR v_dsn v_dsn ',' .
    If Index(v_dsn,'&')>0 Then v_dsn=Eval_amper(v_dsn)
    If Index(v_dsn,'.')=0 Then v_dsn=hlq'.'v_dsn
    x=Verify(Substr(v_dsn,2),dsn_parser)
    If x>0 Then Do
        If Substr(v_dsn,x,1)='(' Then v_dsn=Substr(v_dsn,1,x-1)
    End
    If $vername(v_dsn,,wild_card)/='OK' Then Return ''
    v_dsn=Strip(v_dsn,,"'");v_dsn=Strip(v_dsn,,'"')
    If $sysdsn("'"v_dsn"'")='OK' Then Return v_dsn
    If $sysdsn("'"hlq'.'v_dsn"'")='OK' Then Return hlq'.'v_dsn
    If Index(v_dsn,'(')=0 Then Return ''
    Parse VAR v_dsn v_dsn_1 '(' .
    If $sysdsn("'"v_dsn_1"'")='OK' Then Return v_dsn
    If $sysdsn("'"v_dsn_1"'")='OK' Then Return v_dsn;Else Return ''

/*------------------------------ REXX --------------------------------*/
/* $VERNAME: [V1.02]                                                  */
/* -----------------                                                  */
/* Parses the passed string to verify each qualifier to be a valid    */
/* name format (will handle member names).                            */
/*                                                                    */
/* Parameters:                                                        */
/*   Input (positional):                                              */
/*   1. String to be parsed.                                          */
/*   2. Member only indicator:                                        */
/*       'M' - Member name (wildard indicators "*" and "%" accepted.  */
/*       'N' - Member name (National/numeric characters only)         */
/*       Anything else will be treated as dsn(member).                */
/*   Return:                                                          */
/*   1. If valid returns 'OK' else returns an error message.          */
/*--------------------------------------------------------------------*/
$Vername:Arg xx,act,wild
    If xx='' Then Return "Missing dataset name."
    If Substr(xx,1,1)="'" Then Parse VAR xx "'" xx "'"
    If wild/='' Then wild='*%'
    If Wordpos(act,'M N')>0 Then Parse VAR xx member yyy
    Else Parse VAR xx yyy '(' member ')' .
    Do While yyy /= ''
        Parse VAR yyy yy '.' yyy
        If Length(yy) > 8 Then Return 'Error: Qualifier "'yy'" > 8 bytes.'
        x=Verify(Substr(yy,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$'wild)
        If x>0 Then Return 'Error: Qualifier "'yy'" must start with a',
                           'national character.'
        x=Verify(Substr(yy,2),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789'wild)
        If x>0 Then Return 'Error: Qualifier "'yy'" must only contain',
                           'national and numeric characters.'
    End
    If member /= '' Then Do
        If act='N' Then wild=;Else wild='*%'
        yy=member
        x=Verify(Substr(yy,1,1),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$'wild)
        If x>0 Then Return 'Error: Member name "'yy'" must start with a',
                           'national character.'
        x=Verify(Substr(yy,2),'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$0123456789'wild)
        If x>0 Then Return 'Error: Member name "'yy'" must only contain',
                           'national and numeric characters.'
    End
    Return 'OK'

/*------------------------------ REXX --------------------------------*/
/* $WORDAT:                                                           */
/* -------                                                            */
/* Returns the words in a string that falls on a particular character */
/* posistion.  If the character at the position is blank, the next    */
/* word is taken.  Can pass parameter of L(eading) or T(railing) to   */
/* split the string on the word and return the lead or tail part of   */
/* the string (can be either case).                                   */
/*                                                                    */
/* Parameters (positional):                                           */
/*   1. Source string.                                                */
/*   2. Colunm to locate.                                             */
/*   3. Return data indicator:                                        */
/*       L - Lead. Text before the word including leading/trailing    */
/*           spaces.                                                  */
/*       T - Trail. Text including and following the word including   */
/*           trailing spaces.                                         */
/*       # - Return the word number of the word at requested          */
/*           position.                                                */
/*       W - Return the word.  (Any value other than those defined    */
/*           above.                                                   */
/*                                                                    */
/* Notes:                                                             */
/*   Leading will EXCLUDE the word.                                   */
/*   Trailing will INCLUDE the word.                                  */
/*--------------------------------------------------------------------*/
$Wordat: Parse Arg i_strg,s_col,r_split
    If s_col<1 Then s_col=1
    If Length(i_strg)<s_col Then i_strg=i_strg' '
    #i_i=Lastpos(' ',i_strg,s_col);r_split=Translate(r_split)
    If #i_i=0 Then #i_i=1
    Select
        When r_split='L' Then Do
            If #i_i=Length(i_strg) Then suff=;Else suff=' '
            Return Substr(i_strg,1,#i_i-1)suff
        End
        When r_split='T' Then Return Strip(Substr(i_strg,#i_i),'l')
        When r_split='#' Then Return Words(Substr(i_strg,1,#i_i-1))+1
        Otherwise Do
            Parse Value Substr(i_strg,#i_i) With i_strg .
            Return i_strg
        End
    End
/******************************** REXX ********************************/
/* Translate TRUNCate data (case sensitive).                          */
/* Comma seperated positional parameters:                             */
/* 1. Word to be translated/truncated.                                */
/* 2. Truncaion factor (default) 1 ("*" defaults to length of parm).  */
/* 3. Translation table. Format 'ch1,val1 ch2,val2 .... *,default)    */
/*    If the default is "*" then the original value is returned.      */
/* Requires access to sub-routine "$WORDAT".                          */
/* Eg.: act=$Ttrunc(xx,2,'/E,EDIT /V,VIEW /B,BROWSE *,BROWSE')        */
/*--------------------------------------------------------------------*/
$Ttrunc: Parse Arg text,tl,matrix
    If tl='*' Then tl=Length(text);If Datatype(tl,'W') Then Nop;Else tl=1
    wt=Substr(text,1,tl);wp=Index(' 'matrix,' 'wt',')
    If wp>0 Then xx=$Wordat(matrix,wp);Else xx=Word(matrix,Words(matrix))
    Parse VAR xx . ',' zz;If wp=0 & zz='*' Then Return text;Else Return zz
/*--------------------------------------------------------------------*/
/* Try to extract an occurance between '' then "" and finally ().     */
/*--------------------------------------------------------------------*/
Last_try:
    lt_line=Arg(1)
    Parse VAR lt_line "'" dsn "'"
    If dsn/='' Then dsn=Ver_dsn(dsn);If dsn/='' Then Return dsn
    Parse VAR lt_line '"' dsn '"'
    If dsn/='' Then dsn=Ver_dsn(dsn);If dsn/='' Then Return dsn
    Parse VAR lt_line '(' dsn ')'
    If Index(dsn,'(')>0 Then dsn=dsn')'
    Return Ver_dsn(dsn)
/*--------------------------------------------------------------------*/
/* Permit toggling between "sysdsn" and "listdsi" to establish        */
/* valdity of dataset name.                                           */
/*--------------------------------------------------------------------*/
$sysdsn: Arg #p_dsn
/*  If Sysdsn(#p_dsn)='OK' Then Return 'OK';Else Return ''            */
    xx=Listdsi(#p_dsn "NORECALL")
    If sysreason=9 | sysreason=25 Then mig=1;Else mig=0
    If xx<5 | sysreason=9 | sysreason=25 Then Return 'OK';Else Return ''

$EVALAMP:$evalamp_ver='2.10'
/*--------------------------------------------------------------------*/
/* Parse the line looking for variables startingt with an '&'.        */
/* If found, extract the variable name and than calls anouther sub-   */
/* routine to see if the variable has been set.                       */
/* If the variable name is returned it is not a system symbol and no  */
/* substitution is made.                                              */
/* Parameters:                                                        */
/*  1. Text to parse.                                                 */
/*  2. Column to parse from.                                          */
/*  3. Literal 'LAST' to start from last line rather than current     */
/*     position. Designed when parm is passed to instream proc.       */
/*--------------------------------------------------------------------*/
eval_amper: Parse Arg text,v_p,s_order
    loop_lim=50                             /* Arbitary loop limit    */
    If debug/=1 Then debug=0
    "ISREDIT (xx)=DATASET"
    If rc/=0 Then Do
        If Verify(text,nat,'N')=0 & Length(text)<=8 Then val=Mvsvar(Symdef,text)
        Else val=
        If val/='' Then Return val;Else Return text
    End
    #tr=Trace()
    expand=1
    nat='ABCDEFGHIJKLMNOPQRSTUVWXYZ' ||,
        'abcdefghijklmnopqrstuvwxyz' ||,
        '0123456789@#$'
    If lin#='LIN#' Then "ISREDIT (lin#)=LINENUM .ZCSR"
    If s_order='LAST' Then "ISREDIT (lin#)=LINENUM .ZLAST"
    If \Datatype(v_p,'W') Then v_p=1
    Do Forever
        v_p=Index(text,'&',v_p)
        If v_p=0 Then Return text
        next_char=Substr(text,v_p+1,1)
        If next_char='&' | next_char=' ' Then Do;v_p=v_p+2;Iterate;End
        If v_p=1 Then p1=;Else p1=Substr(text,1,v_p-1)
        p2=Substr(text,v_p)
        lc=Verify(p2' ',nat,'N',2)
        var=Substr(p2,1,lc-1)
        If Substr(p2,lc,1)='.' Then Do
            lc=lc+1
            var=var'.'
        End
        p2=Substr(p2,lc)
        If debug Then Say Space(var Substr(text,1,72))
        var_v=Get_equate(var)
        If var_v/=var Then Do
            If var_v/='' Then Do
                If Index(var_v,"''")>0 Then var_v=$cstring(var_v,"''","'",,'*')
                text=$cstring(text,var,var_v,v_p,'*')
            End
            Else Do
                x=Index(text,var)
                If x>0 Then text=Delstr(text,x,Length(var))
            End
        End
        If var_v/='' Then v_p=v_p+1
    End
    Return text

/*--------------------------------------------------------------------*/
/* Receive a variable name as the argument and seacrh the JCL for any */
/* variable equate statements, eg. "varname=". If such an equate is   */
/* found it is assumed it is a user variable. If no equate is found   */
/* a MVS symbolic evaluation is undertaken.  If successfull, the      */
/* new value is returned else the original variable name is returned. */
/* Variable "findtry" is used in case we are not in JCL and get into  */
/* an indefinite loop.                                                */
/*--------------------------------------------------------------------*/
Get_equate: Parse Arg var_v
    Parse VAR var_v '&' xxx '.' var_suf
    sysvar=0
    If xxx='SYSUID' Then Return var_v
    Interpret "If vas_"xxx"/='VAS_"xxx"' Then Return vas_"xxx
    lin@=lin#;col@=0;find=xxx'='
    findtry=0                               /* Stop indefinite loop   */
    Do Forever
        findtry=findtry+1;If findtry>loop_lim Then Do
            Say 'Recursive loop limit "'loop_lim'" reached processing:'
            Say '  'Space(var_v Substr(text,1,72))
            Say 'Check your source and try again.'
            Leave
        End
        "ISREDIT CURSOR=" lin@ col@
        "ISREDIT SEEK '"find"' PREV"
        If rc/=0 Then "ISREDIT SEEK '"find"'"
        If rc=0 Then Do
            "ISREDIT (liney)=LINE .ZCSR"
            "ISREDIT (lin@,col@)=CURSOR"
            If Verify(#tr,'NO')>0 Then Say lin@+1 Col@+0 Substr(liney,1,70)
            If Substr(liney,1,3)='//*' | Substr(liney,1,2)/='//' Then,
                Do;col@=col@-1;Iterate;End
            If Verify(liney,nat,'M',col@-1)=col@ & expand Then Do
                If \expand Then Return var_v
                Interpret "Parse VAR liney '"find"' liney"
                If Substr(liney,1,1)/="'" Then Do
                    If Substr(liney,1,1)=' ' Then liney=
                    Parse VAR liney val .
                    Parse VAR val val ',' .
                End
                Else val=get_quote_delim(liney)
                If Substr(val,1,1)='&' Then Do
                    Parse VAR val '&' xxx '.' zzz;xxx=Strip(xxx,,"'")
                    var_suf=var_suf||zzz;find=xxx'='
/*                  findtry=0                                         */
                    col@=col@-1;Iterate
                End
                Select
                    When val='DATE()' Then Return $DATEMAN('REV',,2,'D')
                    When val='TIME()' Then Do
                        Parse Value Time() with hh ':' mm ':' ss
                        Return hh||mm||ss
                    End
                    When Substr(val,1,8)='$DATEMAN(' Then Do
                        Parse VAR liney '$DATEMAN(' dmv ')' .
                        Interpret "xx=$DATEMAN("dmv")"
                        If Word(xx,1)/='Error' Then Return xx
                        Else Return val
                    End
                    Otherwise Return val||var_suf
                End
            End
            Else Do;col@=col@-1;Iterate;End
        End
        Leave
    End
Return_Var_val:
    If Verify(xxx,nat,'N')=0 & Length(xxx)<=8 Then val=Mvsvar(Symdef,xxx)
    Else val=
    If val='' Then Return var_v||var_suf
    Else Do;sysvar=1;Return val||var_suf;End

/*--------------------------------------------------------------------*/
/* It has been established that the first character of a value is a   */
/* quote and the value is parsed for a valid SINGLE quote terminator. */
/*--------------------------------------------------------------------*/
get_quote_delim:
    yyy=Substr(Arg(1),2);nq=1
    Do Forever
        nq=Index(yyy,"'",nq)
        If nq=0 Then nq=Length(Strip(yyy))+1
        Else If Substr(yyy,nq+1,1)="'" Then Do
                 nq=nq+2;Iterate
             End
        val=Substr(yyy,1,nq-1)
        yyy=Substr(yyy,nq+1);If yyy='' Then Leave
        Parse VAR yyy . ',' yyy
        Leave
    End
    Return val
$EVALAMP_end:

Help_me:
    ms=mark(2)
/*

   Hello `CNAME..

   XB: eXtended Browse (V`XB_VER.).

   Command to substitute the dataset extracted from browse/edit session
   into the "XE" command or if unavailable, into a direct Browse, Edit
   or View session.  Pass all valid "XE" parameters.

   Note that XB will look for an existing catalogued dataset and NOT
   just a valid dataset name format. XB considers a "valid dataset" as
   one that passes the REXX "SYSDSN('dataset')='OK'" command.

   If you want to explicitly select a screen line number rather than
   cursor place enter the digit as the first parameter.

   The cursor can be placed anywhere on the line. The routine will look
   for a "DSN=", "DSNAME=", "DSN(..)" or "DSNAME(..)" after the cursor.
   If it is not found, it will look for the the same on the whole line.
   If there are multiple combinations of the above eyecatchers on the
   line, cursor placement is important as the first occurance on the
   line is returned if none found after the cursor.
   Note that the above list is the search sequence so a "DSN=" will be
   be picked up before a "DSNAME=" on a line search even if it follows.

   If no DSN= is found, the word the cursor is on is tested for validity
   as a dataset. If this fails the entire line will be tested word by
   word for a valid dataset.
   Note that if each word does not pass the validity test, then "`HLQ."
   will be used as a prefix to the dataset, so with bad cursor placement
   on a line, "`XCMD." could return '`HLQ..DD' as a valid dataset from
   line '//SYSUT1 DD SYSOUT=*' if you had a valid dataset with llq of
   "DD".

   If still no "valid dataset found" result, a final attempt will be
   made first on the word the cursor is on then on the entire line to
   extract a dataset from between the following delimiters: '', ""
   and () in that order.

   If you are in an edit/view session and an ampersand '&' is foumnd on
   the line this routine will attempt to perform symbolic substitution
   by looking for any JCL 'SET' commands or 'PROC' equates. If any found
   (or systems variable) substitution will be made before trying to
   evaluate the dataset name.  Sometimes recursive substitution may make
   it difficult to fully evaluate.  In this case try command "SYMSUB /R"
   which has a more powerful processing engine and prior evaluations are
   hard coded to a temporary file. Then try XB again.

   Permissable parameters (positional):
     First:
      /B - Browse dataset (default).
      /D - Parse the string passed for a valid dataset format. With this
           option the dataset(member) does not have to exist. If a name
           using "DSN=", "DSNAME=", "DSN(..)" or "DSNAME(..)" parsing
           is evaluated, it is returned to the caller. Suggest '/R' and
           '/P' be used before this option.
           Note: This format will identify a valid single qualifier
                 (eg. alias name) as a valid dataset. Suggest using
                 option '/Q'.
      /DV- Same as '/D' except that if 'VOL=SER=' is found on the line,
           a second paramater of 'VOLUME(volser)' will also be returned.
           Note: If 'VOL=SER=' is not found, the line will be parsed for
                 the presence of 'VOLUME(volser)'.
      /E - Edit dataset.
      /L - Start variable substitution from the last record forward.
      /M - Manually get screen image using "$SCREENC"
      /P - Parse the string passed for a valid dataset name. Can pass an
           optional column indicator. Eg. x=`XCMD.('/P',line,col), col=1
           is default. This parameter permits you to use the XB parsing
           engine by external routines.  (Changes the '/P' parameter to
           '/R'.)
      /PV- Same as '/P' except that if 'VOL=SER=' is found on the line,
           a second paramater of 'VOLUME(volser)' will also be returned.
           Note: If 'VOL=SER=' is not found, the line will be parsed for
                 the presence of 'VOLUME(volser)'.
      /Q - Parse the string passed for a valid qualified dataset
           format.  This option is similar to '/D' with the exception
           that the dataset must have at least 2 qualifiers (include a
           '.').
           With this
           option the dataset(member) does not have to exist. If a name
           using "DSN=", "DSNAME=", "DSN(..)" or "DSNAME(..)" parsing
           is evaluated, it is returned to the caller. Suggest '/R' and
           '/P' be used before this option.
      /QV- Same as '/Q' except that if 'VOL=SER=' is found on the line,
           a second paramater of 'VOLUME(volser)' will also be returned.
           Note: If 'VOL=SER=' is not found, the line will be parsed for
                 the presence of 'VOLUME(volser)'.
      /R - Return dataset name (fully qualified and unquoted).
      /RV- Same as '/P' except that if 'VOL=SER=' is found on the line,
           a second paramater of 'VOLUME(volser)' will also be returned.
           Note: If 'VOL=SER=' is not found, the line will be parsed for
                 the presence of 'VOLUME(volser)'.
      /T - Trace.  Watch the use of this parameter as use on data without
           walid datasets will generate heaps of output as it parses each
           "invalid" component of the data.
      /V - VIew dataset.
      /WC- Wild card characters (*%) accepted.  This parameter will
           accept wildcard characters as vald dataset name qualifiers.
           (Example of use would be to pass to
     Second:
      n  - Perform the operation on 'n' th. line from the screen.
      +n - Perform the same operation on the next 'n' th. line from
           the current line processed.
      -n - Perform the same operation on the prev 'n' th. line from
           the current line processed.
      /W - Wait for HSM recall of dataset. Without this parameter any
           migrated dataset name will be returned to let the calling
           process handle the migration.  If "`XCMD." is used direct it
           will not process the dataset without this parameter.
      /Xo- Treated similar to the '/P' parameter except that the dataset
           is not returned.  You pass it a line to parse but after
           parsing you can eXecute operation as follows for the value of
           "o":
             B - Browse
             E - Edit
             V - View

   Routines required to package this:
     REXX:
       `XCMD(9).- This driver.

      The following routines are optional and will only restrict full
      scope of the "`XCMD." command:
       $WHOAMI  o Routine to name the user otherwise "`USERID." is used.
       $SCREENC  o Screen capture routine to return screen and cursor
                  position IF your version of ISPF does not support
                  the ZSCREENC and ZSCRENI variables (refer to 'toggle
                  comments' near start of program).
       BR       o Output browser for tutorial.  Browsable dataset
                  instead of a "red" screen.
       SYMSUB   o Symbol substituter if `XCMD. fails but you know it's
                  a valid dataset. Try again after substitution into a
                  temporary dataset.
       VB       o Vsam Browse. If the VB routine is available and `XCMD.
                  is on a VSAM dataset will browse it if not empty
                  and/or enqueued.
       XE       o eXternal Edit driver for other options (if
                  available).
      The following routines have been imported to permit `XCMD. to be
      self-contained.  For administrators, if possible, these routines
      should be checked for updates:
       $EVALAMP - Routine to evaluate ampersand variable substitution.
       $TTRUNC  - Routine to truncate and then translate a value.
       $VERNAME - Verify each qualifier in a DSNAME for valid format.
       $WORDAT  - Routine to extract the word at the cursor position.
       $SCREENC - Routine to get the screen image from control blocks.

                                *****

*/
    me=mark(-2)
    chgchar='`';cname=userid
    Signal On Syntax Name by_pass_err_#1;Signal On Error Name   by_pass_err_#1
    cname=$Whoam1('C')
by_pass_err_#1:Signal Off Error;Signal Off Syntax
    Do i=ms To me
        line=Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgchar"' var '.' p2"
            If Index(var,'(')>0 Then Do
                Parse VAR var var '(' vl ')'
                If ¬Datatype(vl,'W') Then vl=Length(var)
                Interpret 'line=p1||Substr('var',1,vl)||p2'
            End
            Else Interpret 'line=p1||'var'||p2'
        End
        Say '* 'Substr(line,1,76)'*'
    End
    Exit 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
