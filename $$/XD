/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* (c) Copyright 1996 ASYSTS Pty. Ltd.                                */
/*                                                                    */
/* XD:                                                                */
/*                                                                    */
/* Exclude duplicate lines from member being editted.                 */
/* For further details invoke macro with a '?' parameter.             */
/*                                                                    */
/*--------------------------------------------------------------------*/
xd:xd_ver='1.06'
    ARG parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#\='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    chgchar='&';zerrhm='*';zerralrm='NO';zerrsm=
    parm@=parm#
    Parse Upper VAR parm# parm# 1 parm1 parm2 parm3 parm4 parm5 parm6

    Address ISREDIT;"(status)=USER_STATE"

    If Wordpos(parm1,'? /? HELP /H')>0 Then Signal Help

    Call parse_parms
    x=Trace(#tr)
    If (ecol-scol)+1>128 Then Do
        zerrlm="Cannot process strings > 128 bytes. Use column",
               "delimiters to confine to 128 bytes."
        Address ISPEXEC "SETMSG MSG(ISRZ002)"
        Exit
    End

    If batch='Y' Then Do;Call exec_in_batch;Exit;End

    If bkup1 Then "BU /P #"

    "PROCESS RANGE C";"(cmd)=RANGE_CMD"
    If cmd='C' & rc=0 Then Do
        "(zfrange)=LINENUM .ZFRANGE";"(zlrange)=LINENUM .ZLRANGE"
        marklast='.ZLRANGE'
    End
    Else Do
        "(zfrange)=LINENUM .ZFIRST";"(zlrange)=LINENUM .ZLAST"
        marklast='.ZLAST';"RESET"
    End
    "(last)=LINENUM .ZLAST"
    If last>zlrange Then zlrange=zlrange
    #tr=Trace('O')

    "RESET"
    If match_sel Then Do
        last2proc=zlrange
        "(zfrange)=LINENUM .ZFIRST";"(zlrange)=LINENUM .ZLAST"
        marklast='.ZLAST';"RESET"
    End
    Do i=zfrange To zlrange-1
        If trace#>0 Then Do
            If i//trace# = 0 Then,
                Say 'Processed' i'/'zlrange-1 'records.'
        End
        If match_sel & i>last2proc Then Leave
        "CURSOR="i 0;"(xstat)=XSTATUS" i
        If xstat="X" Then Iterate
        "(line)=LINE" i
        findit=Substr(line,scol,(ecol-scol)+1)
        If ig>0 Then Do
            ignore='N'
            Do k=1 To ig
                If Strip(findit)=Strip(igval.k) Then Do
                    ignore='Y';Leave
                End
                If igval.k/='' Then Do
                    If Index(Strip(findit),Strip(igval.k))>0 Then Do
                        ignore='Y';Leave
                    End
                End
            End
            If ignore='Y' Then Iterate
        End
        "CURSOR="i+1 0
        If \contig Then lastlab=marklast
        Else Do
            lastlab='.TLINE'
            j=1
            Do Forever
                "LABEL" i+j"=.TLINE"
                "(linex)=LINE .TLINE"
                finditx=Substr(linex,scol,(ecol-scol)+1)

                If findit/=finditx Then Leave
                j=j+1;If j=zlrange Then Leave
            End
        End
        "X X'"c2x(findit)"'" scol ecol ".ZCSR &LASTLAB ALL"
        "(,#lin) = EXCLUDE_COUNTS"
        If #lin>0 Then Do
            If sumit Then Do
                xx=Right(#lin+0,3) findit
                "ISREDIT LINE_BEFORE .ZCSR= NOTELINE (xx)"
            End
            If xorig Then "ISREDIT XSTATUS" i"=X"
        End
    End

    If delax Then Do
        "DEL ALL X"
        zerrsm=
        zerrlm="All" xtrax || "duplicate lines" || xtra ||,
                " have been deleted."
        If xbtch Then Address ISPEXEC "SETMSG MSG(ISRZ002)"
        Else Say zerrlm
    End

    "USER_STATE = (status)"
    If xbtch | xend Then "END"

    Exit

exec_in_batch:
    Say 'Not yet developed.'
    Say "XD /BX /D" xorig contig bkup1
    Return 8

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    scol=1;"(ecol)=LRECL"

/*--------------------------------------------------------------------*/
/*  Test for Trace                                                    */
/*--------------------------------------------------------------------*/
    trace#=parse_varb('/T=','0')

    #tr=parse_cons('TRACE','R','N')

/*--------------------------------------------------------------------*/
/*  Test for exclusion of original                                    */
/*--------------------------------------------------------------------*/
    xorig=parse_cons('/O','1','0')
    If xorig Then xtra=", including the original line,";Else xtra=

/*--------------------------------------------------------------------*/
/*  Sum number of hits as NOTELINES                                   */
/*--------------------------------------------------------------------*/
    sumit=parse_cons('/S','1','0')

/*--------------------------------------------------------------------*/
/*  Test for deletion of excluded lines                               */
/*--------------------------------------------------------------------*/
    delax=parse_cons('/D','1','0')

/*--------------------------------------------------------------------*/
/*  Test for backup                                                   */
/*--------------------------------------------------------------------*/
    bkup1=parse_cons('/K','1','0')

/*--------------------------------------------------------------------*/
/*  Test for contiguity                                               */
/*--------------------------------------------------------------------*/
    contig=parse_cons('/C','1','0')
    If contig Then xtrax="contiguous ";Else xtrax=

/*--------------------------------------------------------------------*/
/*  Test for Match Selected only                                      */
/*--------------------------------------------------------------------*/
    match_sel=parse_cons('/MS','1','0')

/*--------------------------------------------------------------------*/
/*  Test for batch execution                                          */
/*--------------------------------------------------------------------*/
    xbtch=parse_cons('/BX','1','0')

/*--------------------------------------------------------------------*/
/*  Test for batch request                                            */
/*--------------------------------------------------------------------*/
    batch=parse_cons('/B','1','0')
    If batch Then xbtch=

/*--------------------------------------------------------------------*/
/*  Test for exit on termination                                      */
/*--------------------------------------------------------------------*/
    xend=parse_cons('/E','1','0')

/*--------------------------------------------------------------------*/
/*  Test for ignore space                                             */
/*--------------------------------------------------------------------*/
    ig=0
    Do While Index(parm#,'/IS(')>0          /* Remove all /IS entries */
        x=parse_varb('/IS(')
    End
    #parm#=parm#;parm#=parm@                /* Bu and rest mixed case */
    xxx='/IS /is'
    Do While xxx/=''
        Parse VAR xxx xx xxx
        Do While Index(parm#,xx)>0
            ignore=parse_varb(xx);ig=ig+1;Parse VAR ignore '(' igval.ig ')'
        End
    End
    parm#=#parm#

/*--------------------------------------------------------------------*/
/*  Test for start column (should be word1)                           */
/*  Test for end column (should be word2)                             */
/*--------------------------------------------------------------------*/
    xx=parse_cons('-',,'NULL','WORD')
    If xx/='' Then Do
        Parse VAR xx y1 '-' y2
        If y1='' | y1='*' Then Nop;Else scol=y1
        If \Datatype(scol,'W') Then Do
            zerrlm="Start column'"scol"' not numeric.";Signal erx01
        End
        If y2='' | y2='*' Then y2=ecol
        If \Datatype(y2,'W') Then Do
            zerrlm="End column'"y2"' not numeric.";Signal erx01
        End
        If y2<=ecol Then ecol=y2
    End
    Else Do
        xxx='Start End'
        Do j=1 To 2
            y=Word(parm#,j);If y='' Then Return
            xx=Word(xxx,j)
            If \Datatype(y,'W') Then Do
                zerrlm=xx "column '"y"' not numeric.";Signal erx01
            End
            xx=Substr(xx,1,1)
            Interpret xx'col=y'
        End
    End
    parm#=Strip(parm#)

    Return 0

erx01:
    Address ISPEXEC "SETMSG MSG(ISRZ002)"
    Exit

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#;Parse Arg mask,posr,negr,maskl
    If posr=''     Then posr='Y' ;If negr=''     Then negr='N'
    If posr='NULL' Then posr=''  ;If negr='NULL' Then negr=''
    If posr='*'    Then posr=mask;If negr='*'    Then negr=mask
    Select
        When (maskl='WORD') Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask)>0 Then Do;y#=i;posr=x_x;Leave;End
            End
        End
        When (Datatype(maskl,'W')) Then Do
            y#=0;xxx=parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl)=Substr(mask,1,maskl) Then Do
                    y#=i;Leave
                End
            End
        End
        Otherwise y#=Wordpos(mask,parm#)
    End
    If y#>0 Then Do;parm#=Delword(parm#,y#,1);Return posr;End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#;Parse Arg mask,negr,dt
    If negr='' Then negr='N'
    parm##=' 'parm#;m#=' 'mask;y#=Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1)='' Then Do
            px='';data="Parse VAR parm## p1 '"m#"' p2"
        End
        Else data="Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm#=Strip(p1) Strip(p2)
        If dt='NUM' & Datatype(px)/='NUM' Then Return negr
        Else                                   Return px
    End
    Return negr

ext1:
    Exit

/*--------------------------------------------------------------------*/
/* Help instructions.                                                 */
/*--------------------------------------------------------------------*/
help:

ms=mark(2)
/*

   (C) Copyright 1996 ASYSTS Pty. Ltd.

   MACRO:     XD

   PURPOSE:   Exclude duplicate entires from member being edited.

              The default range is all lines, however, you may enter
              a block command 'CC' or 'Cnnnn' line range. If this
              feature is used, you should issue an explicit 'RESET'
              command before using this macro.

              Acceptable parameters:
                sc   - Starting column. Default is col 1.
                ec   - Ending column. Default is LRECL. If ending
                       column is to be specified, starting column
                       MUST be entered.
                sc-ec
                     - Alternative to above, you can pass start column
                       and end column with a '-' seperator.
                       Note: Cannot process strings > 128 bytes. Use
                             column delimiters to confine to 128 bytes.
                /B   - Batch execute indicator. Must also supply
                       parameter '/D'. (Not yet developed).
                /C   - Contiguous lines only. Only exclude if
                       matches previous line.
                /D   - Delete all duplicated lines (and original if
                       '/O' option used).
                /E   - Exit edit session once macro terminates.
                       Required in batch jobs.
                /IS(string)
                     - Ignore string. Ignores duplication if string
                       is found in the compare columns. If /IS() is
                       used to ignore implied spaces, the whole range
                       (start col to end col) must be spaces.
                       You may use this parameter repeatedly for
                       multi ignore paterns.
                       Notes :-
                       1. The 'string' is case sensitive.
                       2. /IS must be all in eith upper or lower case.
                          Do not mix case.
                /K   - Back up member being edited using macro
                       'BU /P #'.
                /MS  - Exclude duplicates that match selected lines.
                       Use the 'CC' or 'Cnnn' line command to select
                       lines to match. These lines will be matched
                       for duplicates. Processing will stop after
                       last selected line processed.
                       Note: This is a top down process so no test is
                             made for matches before the 1st.  line
                             in the selection. To ensure all the
                             lines are processed, ensure that the
                             selected lines are at the top of the
                             list.
                /O   - Eclude original line as well as duplicates.
                /T=nn- Trace. (Testing only and 'nn' represents the
                       number of lines to process prior to outputing
                       a trace counter.)

*/
me=mark(-2)

    #tr=Trace('O')
    "(caps)=CAPS";"CAPS=OFF"
    x=nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=ms To me
        line = Sourceline(i)
        Do While Index(line,chgchar)>0
            Interpret "Parse VAR line p1 '"chgcgar"' var '.' p2"
            Interpret 'line=p1||'var'||p2'
        End
        x=nl('*'Substr(line,1,70)'*')
    End
    x=nl('*'Copies('-',70)'*')
    "CAPS=(caps)"
    Return 0

nl:xx=Arg(1);"LINE_BEFORE .ZFIRST= NOTELINE (xx)";Return 0
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
