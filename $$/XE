/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* Routine to edit a dataset from any session by invoking it from the */
/* command line. You may specify an alias for the dataset or pass the */
/* full dataset(member_list).                                         */
/*                                                                    */
/* The following members are required to package this routine:        */
/*   REXX:                                                            */
/*     XE       - Driver                                              */
/*                                                                    */
/*   Panels:                                                          */
/*     XE1P     - Alias/dataset entry panel #1 (screen size 24)       */
/*     XE2P     - Alias/dataset entry panel #2 (screen size 24)       */
/*     XE3P     - Alias/dataset entry panel #3 (screen size 24)       */
/*     XE431P   - Alias/dataset entry panel #1 (screen size 43)       */
/*     XE432P   - Alias/dataset entry panel #2 (screen size 43)       */
/*     XE433P   - Alias/dataset entry panel #3 (screen size 43)       */
/*     XE434P   - Alias/dataset entry panel #4 (screen size 43)       */
/*     XEH0*P   o Tutorial panels                                     */
/*                                                                    */
/*   The following customised IBM panels are required if you wish     */
/*   To use the ISPF 3.4 parameter passing option.                    */
/*     ISRUDLP  o IBM cucsomised panel                                */
/*     ISRUDSL0 o IBM customised panel                                */
/*                                                                    */
/*   You also need the CSMDSN packaging if you want to use the        */
/*   Multi-Procs features. (Refer to CSMDSN packaging.)               */
/*                                                                    */
/*--------------------------------------------------------------------*/
    xe_ver='2.09'
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    Arg parm#;If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS";If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=;zerralrm='NO';zerrhm='*'
    Parse SOURCE . . xcmd .

    Parse Upper VAR parm# parm1 parm2 parm3 parm4 parm5 parm6
    Parse Upper VAR parm# . '/' facti .
    If parm1/='' Then,
        If Wordpos(parm1,'? /?')>0 Then Do
            zcmd=;"SELECT CMD(%HELPDRVR XEDH)";Return 0
        End

    "VGET (ZAPPLID) ASIS";tapplid='CSM'
    If zapplid/=tapplid Then Do
        "SELECT CMD(%"xcmd parm#") NEWAPPL("tapplid")";Return 0
    End

    timeo='+10.00'                          /* U=Y   A=Y              */
    timeo='+11:00'                          /* U=N   A=Y              */
    timeo='+09:00'                          /* U=Y   A=N              */
    timeo='+10:00'                          /* U=N   A=N              */

    userid=Userid();sysp=Sysvar(Syspref)
    sysp=$alkhlq()
    "VGET (ZENVIR ZSCREEND)"
    ver=Substr(zenvir,6,1)
    If ver<4 Then browser='BROWSE';Else browser='VIEW'

    xeall='XED0 XEDSCR XEDATE',
        'XED1 XEA1 XED2 XEA2  XED3 XEA3 XED4 XEA4 XED5 XEA5',
        'XED6 XEA6 XED7 XEA7  XED8 XEA8 XED9 XEA9 XED10 XEA10',
        'XED11 XEA11 XED12 XEA12  XED13 XEA13 XED14 XEA14 XED15 XEA15',
        'XED16 XEA16 XED17 XEA17  XED18 XEA18 XED19 XEA19 XED20 XEA20',
        'XED21 XEA21 XED22 XEA22  XED23 XEA23 XED24 XEA24 XED25 XEA25',
        'XED26 XEA26 XED27 XEA27  XED28 XEA28 XED29 XEA29 XED30 XEA30'
    xeall1=,
        'XED31 XEA31 XED32 XEA32  XED33 XEA33 XED34 XEA34 XED35 XEA35',
        'XED36 XEA36 XED37 XEA37  XED38 XEA38 XED39 XEA39 XED40 XEA40',
        'XED41 XEA41 XED42 XEA42  XED43 XEA43 XED44 XEA44 XED45 XEA45',
        'XED46 XEA46 XED47 XEA47  XED48 XEA48 XED49 XEA49 XED50 XEA50',
        'XED51 XEA51 XED52 XEA52  XED53 XEA53 XED54 XEA54 XED55 XEA55',
        'XED56 XEA56 XED57 XEA57  XED58 XEA58 XED59 XEA59 XED60 XEA60'
    xeall2=,
        'XED61 XEA61 XED62 XEA62  XED63 XEA63 XED64 XEA64 XED65 XEA65',
        'XED66 XEA66 XED67 XEA67  XED68 XEA68 XED69 XEA69 XED70 XEA70',
        'XED71 XEA71 XED72 XEA72  XED73 XEA73 XED74 XEA74 XED75 XEA75',
        'XED76 XEA76 XED77 XEA77  XED78 XEA78 XED79 XEA79 XED80 XEA80',
        'XED81 XEA81 XED82 XEA82  XED83 XEA83 XED84 XEA84 XED85 XEA85',
        'XED86 XEA86 XED87 XEA87  XED88 XEA88 XED89 XEA89 XED90 XEA90'
    xeall3=,
        'XED91 XEA91 XED92 XEA92  XED93 XEA93 XED94 XEA94',
        'XEOPR OPT34R XESETNO XEHLQ1 XEHLQ2 XEHLQ3'
    If zscreend=43 Then Do
       xeall4=,
        'XED95 XEA95 XED96 XEA96 XED97 XEA97  XED98 XEA98 XED99 XEA99',
        'XED100 XEA100',
        'XED101 XEA101 XED102 XEA102 XED103 XEA103 XED104 XEA104 XED105 XEA105',
        'XED106 XEA106 XED107 XEA107 XED108 XEA108 XED109 XEA109 XED110 XEA110',
        'XED111 XEA111 XED112 XEA112 XED113 XEA113 XED114 XEA114 XED115 XEA115',
        'XED116 XEA116 XED117 XEA117 XED118 XEA118 XED119 XEA119 XED120 XEA120',
        'XED121 XEA121 XED122 XEA122 XED123 XEA123 XED124 XEA124 XED125 XEA125',
        'XED126 XEA126 XED127 XEA127 XED128 XEA128 XED129 XEA129 XED130 XEA130',
        'XED131 XEA131 XED132 XEA132 XED133 XEA133 XED134 XEA134 XED135 XEA135',
        'XED136 XEA136 XED137 XEA137 XED138 XEA138 XED139 XEA139 XED140 XEA140',
        'XED141 XEA141 XED142 XEA142 XED143 XEA143 XED144 XEA144 XED145 XEA145',
        'XED146 XEA146 XED147 XEA147 XED148 XEA148 XED149 XEA149 XED150 XEA150',
        'XED141 XEA141 XED142 XEA142 XED143 XEA143 XED144 XEA144 XED145 XEA145',
        'XED146 XEA146 XED147 XEA147 XED148 XEA148 XED149 XEA149 XED150 XEA150',
        'XED151 XEA151 XED152 XEA152 XED153 XEA153 XED154 XEA154 XED155 XEA155',
        'XED156 XEA156 XED157 XEA157 XED158 XEA158 XED159 XEA159 XED160 XEA160',
        'XED161 XEA161 XED162 XEA162 XED163 XEA163 XED164 XEA164 XED165 XEA165',
        'XED166 XEA166 XED167 XEA167 XED168 XEA168 XED169 XEA169 XED170 XEA170',
        'XED171 XEA171 XED172 XEA172 XED173 XEA173 XED174 XEA174 XED175 XEA175',
        'XED176 XEA176 XED177 XEA177 XED178 XEA178 XED179 XEA179 XED180 XEA180',
        'XED181 XEA181 XED182 XEA182 XED183 XEA183 XED184 XEA184'
        panpref='XE43'
        #t  = 184                           /* Number of parameters   */
        #pl = 4                             /* Number of long parms   */
        #sc = 4                             /* Number of screens      */
        'VGET ('xeall4') PROFILE'
    End
    Else Do
        xeall4=;panpref='XE'
        #t  = 93                            /* Number of parameters   */
        #pl = 3                             /* Number of long parms   */
        #sc = 3                             /* Number of screens      */
    End
    xeall=xeall xeall1 xeall2 xeall3
    'VGET ('xeall xelev') PROFILE'

    If opt34r='' Then opt34r='Y'

    If xedate/=Date('e') Then Do
        xedate=Date('e');xelev=1;"VPUT (XEDATE) PROFILE"
    End
    Else xelev=xelev+1
    "VPUT (XELEV) PROFILE"
    xelev#=xelev
    If xesetno='' Then xesetno=1

    If xeopr='' Then xeopr=browser
    If Datatype(xedscr)/='NUM' Then xedscr=1

    opr    =xeopr
    #p     =#t+1                            /* Number of parameters   */
    parsed ='N'
    hlqsi  ='\'                             /* HLQ Substitute Indic   */
    Parse VALUE '' With p34 parms fldcsr c_oper i_mac fact
    uc='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lc='abcdefghijklmnopqrstuvwxyz'
    nat=uc||lc||'0123456789@#$'

    Call parse_parms
    If Substr(parm1,1,1)='#' Then parm1=Substr(parm1,2) parm2 parm3 parm4
    x=Trace(#tr)

    dsname=XED0;csr1='ZCMD'

    If parm1='3.4' Then Do
        Call ispf_opt34
        If opt34q='Y' Then Signal exi1;Else Signal scr1
    End

    If Wordpos(parm1,'* . / =')>0 Then Do
        opt34a='Y'
        If parm2='' Then Signal scr1
        Else Do
            p34=parm2;Call ispf_opt34;Signal exi1
        End
    End
    If parm1='' Then Signal dals2

    Select
        When (Substr(parm1,1,2)='/@') Then Do
            retparm='Y';parm1=Substr(parm1,3)
        End
        When (Substr(parm1,1,1)='?') Then Do
            retparm='Y';parm1=Substr(parm1,2)
        End
        Otherwise retparm='N'
    End
    Signal dals0

scr1:
    If retparm='Y' Then Do
        xedsname=dsname;"VPUT (xedsname) SHARED";Return 0
    End
    zcmd=;panel=panpref||xedscr'P'
    "VGET (ZPF01) PROFILE";"VGET (XELEV) PROFILE"
    xldis=Right(xesetno'/'xelev#'/'xelev,6,'-')

scr1a:
    time=eval_time()
    xldis=Right(xldis,Length(time),'-')
    headline=time||Centre(' Alias Edit/Browse ',79-Length(time||xldis),'-')xldis

/*  spf01 = zpf01                                                     */
/*  zpf01 = 'HELPD'                                                   */
/*  "VPUT (zpf01) PROFILE"                                            */
    'DISPLAY PANEL(&PANEL) CURSOR(&CSR1)'
    rc1=rc
    "VGET (zverb)"
    If zverb='RETURN' Then Do;"CONTROL NONDISPL END";Signal exi1;End
/*  zpf01=spf01;"VPUT (zpf01) PROFILE"                                */
    If rc1=8 Then Signal exi1
    Parse VAR zcmd cmd1 cmd2 cmd3 cmd4,
              1 cch1 +1 1 cch2 +2 1 cch3 +3 1 cch4 +4 1 cch5 + 5

    If cmd1='TRACE' Then Do
        Select
            When cmd2='OFF' Then #tr='O'
            When cmd2='ON'  Then #tr='R'
            Otherwise Do                    /* Toggle                 */
                #tr=Trace()
                If Verify(#tr,'NO')=0 Then #tr='R';Else #tr='O'
            End
        End
        x=Trace(#tr);Signal scr1
    End

    If Wordpos(Strip(cch4),'HELP ?')>0 Then Do
        zcmd=
        "SELECT CMD(%HELPDRVR XEDH)"
        Signal scr1a
    End
    zedsmsg=;zerralrm='NO';zerrhm='*';c_oper=
    If Wordpos(cmd1,'/PUT /EXP')>0 Then Do
        Call export_matrix
        Signal scr1
    End
    If Wordpos(cmd1,'/GET /GETC /IMP')>0 Then Do
        Call import_matrix
        Signal scr1
    End
    If fldcsr/='' Then Do
        zcmd=Eval_cont(Value(''Strip(fldcsr)''))
        If zcmd=8 Then Signal scr1
    End
    parm#=zcmd;parsed='N'
    Parse VAR parm# zcmd zcmdr
    Parse VAR parm# parm1 parm2 parm3 parm4

    If cch3='CAN' | cch2='/C' Then Signal exi2

    If cch3 = '/SA' Then Do
        If Substr(parm2,1,3) = 'SET' Then Do
            Call process_set
            Signal scr1
        End
        Else Do
            zdlvol = #zdlvol
            XED0 = dsname
            'VPUT ('xeall') PROFILE'
            Signal scr1
        End
    End

    If zcmd='/1' | zcmd='/2' | zcmd='/3' Then Do
        xedscr=Substr(zcmd,2);If xedscr>#sc Then xedscr=#sc
        Signal scr1
    End

    "VGET (zverb) ASIS"
    If zverb = 'UP' | zverb = 'DOWN' |,
       zverb = 'LEFT' | zverb = 'RIGHT' Then Call scroll

    csr1 = 'ZCMD'

    If parm1 = '34' | zcmd = '' Then Do
        Call ispf_opt34
        Signal scr1
    End

dals0:
    If Verify(#tr,'R','M')>0 Then Say zcmd
    Select
        When (zcmd = '/SORT') Then
            Call sort_them
        When (zcmd = '/ADD')  Then
            Call add_new_alias
        When (cch3 = '/P ') Then
            Call prefix_dsn
        When (cch5 = '/R34=' |,
              cch5 = '/34R=') Then Do
            y = Substr(zcmd,6)
            If y = '' Then y = '?'
            If y/='?' Then opt34r=y
            zedlmsg = "Opt 3.4 Return set to '"opt34r"'."
            Signal msgscr1
        End
        When (zcmd = '/IL' | zcmd = '/LI') Then Do
            xelev  = 1
            xelev# = 1
            "VPUT (XELEV) PROFILE"
            zedlmsg = "Nesting level reset to 1."
            Signal msgscr1
        End
        When (cch1 = '<') Then Do
            suff = Substr(zcmd,2)
            If Datatype(suff) = 'CHAR' | Index(suff,'.') > 0 Then Do
                zedlmsg = "'<' parameter must be numeric."
                Signal msgscr1
            End
            data = "zcmd = XED"suff
            Interpret data
            Signal scr1a
        End
        When (Index(zcmd,'~') > 0) Then
            Call swap_vars

/*--------------------------------------------------------------------*/
/*   Place all '/' prefixed commands before the next test             */
/*--------------------------------------------------------------------*/
        Otherwise     NOP
    End

    If cch3='HLQ' Then Do
        x=set_hlqs();If x=0 Then Signal msgscr1
    End

    If Index(zcmd,'=') > 0 Then Signal clone_it

    If Verify(#tr,'R','M')>0 Then parm#=parm# 'TRACE'
    If parsed = 'N' Then Call parse_parms

dals1:
    If parm1 = '.' Then parm1 = '.'sysp
    Select
        When (Datatype(parm1) = 'NUM') Then Do
            If Substr(parm1,1,1) = '.' Then Do
                i     = Substr(parm1,2)
                parm1 = i
                p34   = 'Y'
            End
            Else Do
                i   = parm1
                p34 = 'N'
            End
            If Substr(parm1,Length(parm1),1) = '.' Then Do
                i   = Substr(parm1,1,Length(parm1)-1)
                p34 = 'Y'
            End
            If i > #t | i = 0 Then Do
                zedlmsg = 'Invalid numeric range. Keep it between 1 and',
                        #t'.'
                Signal msgscr1
            End
            dsname = Value('xed'i)
            y = Value('xea'i)
            If dsname = '' Then Do
                zedlmsg = 'Alias/DSN combination not defined.'
                Signal msgscr1
            End
            If Substr(y,1,1) = '.' Then parm1 = y
        End
        Otherwise Do
            If parm1 /= '' Then Do
                If Substr(parm1,Length(parm1),1) = '.' Then Do
                    parm1 = Substr(parm1,1,Length(parm1)-1)
                    p34 = 'Y'
                End
                If Substr(parm1,Length(parm1),1) = '.' Then Do
                    parm1 = Substr(parm1,1,Length(parm1)-1)
                    dotcmd = 'Y'
                End
                Else dotcmd = 'N'
            End
            Else dotcmd = 'N'
            dsname = eval_alias(parm1)
            If p34 = 'Y' Then Do
                If Substr(dsname,1,1) = "'" Then,
                     dsname = '.'Substr(dsname,2,Length(dsname)-2)
                Else dsname = '.'sysp'.'dsname
            End
        End
    End

    dsname=Eval_cont(dsname)
    If Index(dsname,hlqsi)>0 Then Do
        x=eval_hlqs();If x/=0 Then Signal msgscr1
    End
    If dsname = 8 Then Signal scr1

    If Index(dsname,'!')>0 Then Call eval_exclam

    If Verify(#tr,'R','M')>0 Then Say dsname
    If Index(dsname,'+') > 0 Then Do
        x_x = Translate(dsname,' ','+')
        parsea = Substr(dsname,1,1)
        If parsea = '#' Then x_x = Substr(x_x,2)
        x_y = ''
        Do Forever
            Parse var x_x dsname x_x
            If parsea = '#' Then dsname = eval_alias(dsname)
            If Substr(dsname,1,1) = '.' Then Do
                zedlmsg = "Cannot concatenate '.' datasets."
                Signal msgscr1
            End
            If Substr(dsname,1,1) /= "'" Then,
                dsname = "'"sysp"."dsname"'"
            If Index(dsname,'&') > 0 Then Call eval_dsname
            If volume/='' Then Call test_dsn_volume
            Else If Sysdsn(dsname)/="OK" Then Do
                zedlmsg = "Dataset "dsname" not found."
                Signal msgscr1
            End
            x_y = x_y dsname
            If x_x = '' Then Leave
        End
        dsname   = Strip(x_y)
        conc_dsn = 'Y'
        mds      = ''
        If revcc = 'Y' Then Do
            w = dsname
            dsname = ''
            j = Words(w)
            Do j=j By -1 Until j=1
                dsname = dsname Word(w,j)
            End
            dsname = Strip(dsname)
            zedlmsg = 'Reversed:' dsname
        End
        Else,
            zedlmsg = dsname
            "SETMSG MSG(ISRZ001)"
    End
    Else conc_dsn = 'N'

dals2:
    If dsname = '' Then Do
        dsname = parm1
        If dsname = '' Then Do
            zedlmsg = 'Dataset name not defined for alias/slot.'
            Signal msgscr1
        End
    End

test_qa:
    If Index(dsname,'&') > 0 Then Call eval_dsname
    If conc_dsn='N' Then Do
        If Substr(parm1,1,1) = '.' | Substr(dsname,1,1) = '.' Then Do
            If Substr(dsname,1,1) = '.' Then p34 = Substr(dsname,2)
            Else                             p34 = dsname
            If Substr(dsname,1,1) = "'" Then ,
                dsname = Substr(dsname,2,Length(dsname)-2)
            Call ispf_opt34
            p34   = ''
            If opt34r = 'Y' Then Signal scr1
            Else Signal exi1
        End

        Parse VAR dsname dsname parm@;Parse VAR parm@ parm# '(' i_mac ')' parm#2
        parm#=Space(parm# parm#2);If i_mac/='' Then i_mac='MACRO('i_mac')'
        If Wordpos(Word(parm#,1),'/B /V /E')>0 Then,
            fact=$Ttrunc(Word(parm#,1),2,'/E,EDIT /V,VIEW /B,BROWSE')
        Else fact=
        If Datatype(qual_trim,'w') Then Do
            If Substr(dsname,1,1)="'" Then Do
                dsname=Strip(dsname,,"'");dlim="'"
            End;Else dlim=
            dsname=Translate(dsname,' ','.')
            dsname=dlim||Space(Subword(dsname,1,qual_trim),1,'.')dlim
        End
        If facti/='' Then,
            If Wordpos(facti,'B V E')>0 Then Do
                fact=$Ttrunc(facti,,'E,EDIT V,VIEW B,BROWSE');facti=
            End
        If parm# /= '' & c_oper /= 'Y' Then Call parse_parms

        If Substr(parm1,1,1) = '+' | Substr(parm1,1,1) = '-' Then Do
            diff  = parm1
            parm2 = ''
            alk32dsn = dsname
            Call ResVolParse
            If result = 0 Then dsname = alk32dsn
        End
        If Substr(parm2,1,1) = '+' | Substr(parm2,1,1) = '-' Then Do
            diff  = parm2
            parm3 = ''
            alk32dsn = dsname
            Call ResVolParse
            If result = 0 Then dsname = alk32dsn
        End
    End

mds_call:
    If mds='' Then Do
        Parse VAR dsname p1 +2 alk32vol p34
        If p1='V=' Then Do
            alk32enq='Y';alk32dsn=
            "CONTROL NONDISPL ENTER"
            Call ispf_opt34_V
            p34=
            If opt34r='Y' Then Signal scr1
            Else Signal exi1
        End
        If conc_dsn = 'N' Then Do
            If Substr(dsname,1,1) = "'" Then ,
                dsname = Substr(dsname,2,Length(dsname)-2)
            Else dsname = sysp'.'dsname
            If Index(dsname,'(') > 0 Then,
                Parse VAR dsname dsname '(' parm2 ')'
            If volume/='' Then Call test_dsn_volume
            Else If Sysdsn("'"dsname"'")/="OK" Then Do
                zedlmsg = "Dataset '"dsname"' not found."
                Signal msgscr1
            End

            x = Listdsi("'"dsname"' NORECALL" volume)
            If sysreason = 22 Then Do
                zedlmsg = "Volume '"volume"' not mounted or defined to the",
                        "system."
                "SETMSG MSG(ISRZ001)"
                Exit
            End
            edtvol  = sysvolume
            #zdlvol = zdlvol
            zdlvol  = sysvolume

            If parm2/='' Then,
                If $vername(parm2,'M')='OK' Then dsname=dsname'('parm2')'
        End

        If retparm = 'Y' Then Do
            xedsname = dsname
            "VPUT (xedsname) SHARED"
            Return 0
        End

/*--------------------------------------------------------------------*/
/* Toggle line 274 If you wish to browse datasets with hlq/=sysp.     */
/*--------------------------------------------------------------------*/
        If conc_dsn = 'N' Then dsname = "'"dsname"'"

        If moper/='' Then Do
            mopero = 2
            Call M_oper
        End
        Else Do
            Signal ON ERROR NAME err2
            Call select_action
            If conc_dsn = 'Y' Then Call process_dsname
            Else Do
                Call select_action
                If i_mac/='' Then Do
                    Parse VAR i_mac '(' # ')'
                    zedlmsg='Edit macro "'#'" executed prior to this display.'
                    'SETMSG MSG(ISRZ001) MSGLOC()'
                End
                Signal OFF ERROR
                '&ACTION DATASET(&DSNAME) &VOLUME' i_mac
                Signal ON ERROR NAME err2
                If rc>12 & Datatype(parm2)='NUM' Then Do
                    dsn=Strip(dsname,,"'")'('parm2')'
                    "&ACTION DATASET('&DSN') &VOLUME" i_mac
                End
            End
        End
        SIGNAL OFF ERROR
        'VPUT (LASTXE&SUF) PROFILE'
        SIGNAL OFF ERROR
        If opt34r = 'Y' & opt34a = 'Y' Then Signal scr1
    End
    Else Do
        If Substr(dsname,1,1)="'" Then dsname=Strip(dsname,,"'")
        Else Do
             If Wordpos(f00,'QP PQ')=0 Then dsname=sysp'.'dsname
        End
        If parm2/='' Then,
            If $vername(parm2,'M')='OK' Then parm4="'"dsname"("parm2")'"
            Else parm4="'"dsname"'"
        Else parm4="'"dsname"'"
        p0   ='?'
        parm1='%MDS'
        parm2=p0
        parm3=f00
        parm5=Strip(parms)
        If volume/='' Then Do;Parse VAR volume '(' volume ')'
            parm6='V='volume;End;Else parm6=
        parm7=szcmd
        parm7=;parm8=
        "SELECT CMD(%CSMDSN" parm1 parm2 parm3,
            parm4 parm5 parm6 parm7 parm8")"
        If opt34r = 'Y' & opt34a = 'Y' Then Signal scr1
    End

exi1:
    zdlvol = #zdlvol
    XED0 = dsname
exi2:
    If xelev > 0 Then xelev = xelev - 1
    "VPUT (XELEV) PROFILE";"VPUT ("xeall") PROFILE"
    If zscreend=43 Then "VPUT ("xeall4") PROFILE"
    Exit

msgscr1:
    zedsmsg  = ''
    zerralrm = 'NO'
    zerrhm   = '*'
    "SETMSG MSG(ISRZ001)"
    Signal scr1

err1:
    "SETMSG MSG(ISRZ001)"
    Return 4

err2:
    rc1 = rc
    SIGNAL OFF ERROR
    If rc1>4 Then 'SETMSG MSG(&ZERRMSG)'
    If opt34r = 'Y' & opt34a = 'Y' Then Signal scr1
    Signal exi1

/*--------------------------------------------------------------------*/
/*  Volume specified  entered. Test if on that volume                 */
/*--------------------------------------------------------------------*/
test_dsn_volume:
    xx=Listdsi("'"dsname"'" volume" NORECALL")
    If xx>4 Then Do
        zedlmsg="Dataset '"dsname"' not found on" volume"."
        Signal msgscr1
    End
    Return 0

/*--------------------------------------------------------------------*/
/*  Evaluate If alias entered.                                        */
/*--------------------------------------------------------------------*/
eval_alias:
    ARG evalias
    Trace Off
    Do i=1 Until i>#p
        x = 'xea'i
        If Value(x) = evalias Then Do
            x = 'xed'i;evalias = Value(x)
            If dotcmd = 'Y' & substr(evalias,1,1) /= '.' Then,
                evalias = '.'evalias
            Leave
        End
    End
    If Verify(#tr,'R','M')>0 Then Say evalias

    Return evalias

/*--------------------------------------------------------------------*/
/*  Evaluate action                                                   */
/*--------------------------------------------------------------------*/
select_action:
    If fact/='' Then Do;action=fact;Return 0;End
    If opr='V' & sysp=Substr(dsname,2,Length(sysp)) Then opr='E'
    If opr = 'B' Then browser = 'BROWSE'
    Select
        When (sysrecfm = 'U') Then action = browser
        When (opr = 'E') Then action = 'EDIT'
        When (opr = 'B') Then action = browser
        When (opr = 'V') Then action = 'VIEW'
        Otherwise Do
/*         Parse VAR dsname "'" dsnpref '.' .                         */
/*         If dsnpref = sysp | dsnpref = userid Then action = 'EDIT'  */
           If sysp = Substr(dsname,2,Length(sysp)) Then action = 'EDIT'
           Else action = browser
        End
    End

    Return 0

/*--------------------------------------------------------------------*/
/*  Process dataset according to action required                      */
/*--------------------------------------------------------------------*/
process_dsname:
    Call select_action
    If forceb = 'Y' Then action = 'BROWSE'
    ddname = 'XE'Time('s')
    Address TSO "ALLOC F("ddname") DA("dsname") SHR REU"
    "LMINIT DATAID(DATA1) DDNAME(&DDNAME)"
    rc1 = rc
    If rc1/=0 Then Do
        Address TSO "FREE F("ddname")"
        "SETMSG MSG(&ZERRMSG)"
        Signal err2
    End
    Signal ON ERROR NAME err2
    "&ACTION DATAID(&DATA1)"
    Signal OFF ERROR
    "LMFREE DATAID(&DATA1)"
    Address TSO "FREE F("ddname")"

    Return 0

/*--------------------------------------------------------------------*/
/*  Establish and substitute exclamation values.                      */
/*--------------------------------------------------------------------*/
eval_exclam:
    Do While Index(dsname,'!')>0
        Parse Var dsname p1 '!' exv
        lc=Verify(exv' ',nat,'N')
        If Substr(exv,lc,1)='.' Then p2=Substr(exv,lc+1);Else p2=Substr(exv,lc)
        exv='!'Substr(exv,1,lc-1)
        alias=eval_alias(exv)
        If alias=exv Then Do
            zedlmsg="Alias '"exv"' not found.";Signal msgscr1
        End
        dsname=p1 || alias || p2
    End

    Return 0

/*--------------------------------------------------------------------*/
/*  Establish and substitute qualifiers for '`'.                      */
/*--------------------------------------------------------------------*/
Eval_hlqs:
    dot=
    If xehlq1='' Then xehlq1=Sysvar(Syspref);If xehlq2='' Then xehlq2=userid
    Do i=1 To 3
        ex=Index(dsname,hlqsi);If ex=0 Then Leave
        Interpret 'val=XEHLQ'i
        If val='' Then Do
            zedlmsg="'HLQ"i"' not defined. Cannot complete",
                    "substutution for" zcmd"."
            Return 8
        End
        en=Index(dsname,hlqsi,ex+1)
        dsname=$cstring(dsname,hlqsi,dot || val)
        If en=ex+1 Then dot='.'
    End

    Return 0

/*--------------------------------------------------------------------*/
/*  Routine called to swap two variables during a display SORT.       */
/*--------------------------------------------------------------------*/
Eval_cont: ARG pasdv
    Do Forever
        If Index(pasdv,'>') = 0 Then Leave
        Parse var pasdv pasdv '>' seqn .
        If seqn = '' Then seqn = i +1
        If Datatype(seqn) = 'NUM' & Index(seqn,'.') = 0 & seqn > 0 &,
           seqn <= #t Then Nop
        Else Do
            zedlmsg = "Invalid continuation value of '"seqn"'. Must be",
                     "a valid number."
            "SETMSG MSG(ISRZ001)"
            Return 8
        End
        data = 'pasdv = pasdv XED'seqn
        Interpret data
    End

    Return pasdv

/*--------------------------------------------------------------------*/
/*  Set HLQ's                                                         */
/*--------------------------------------------------------------------*/
Set_hlqs:
    If Substr(zcmd,5,1)/='=' Then Return 8
    ch4=Substr(zcmd,4,1);If Verify(ch4,'123')/=0 Then Return 8
    Parse VAR zcmd v1 '=' v2 .
    If v2='' Then Do
        If v1='HLQ1' Then v2=Sysvar(Syspref)
        If v1='HLQ2' Then v2=userid
    End
    If v2='?' Then Interpret 'v2=XE'v1;Else Interpret 'XE'v1'='v2
    zedlmsg="'"v1"' set to '"v2"'."

    Return 0

/*--------------------------------------------------------------------*/
/*  Routine called to swap two variables during a display SORT.       */
/*--------------------------------------------------------------------*/
swap:
    f3 = f2
    data = 'XEA'j+1' = f1'
    Interpret data
    data = 'XEA'j'   = f3'
    Interpret data

    data = 'f1 = XED'j
    Interpret data
    data = 'f2 = XED'j+1
    Interpret data
    f3 = f2
    data = 'XED'j+1' = f1'
    Interpret data
    data = 'XED'j'   = f3'
    Interpret data
    Return 0

/*--------------------------------------------------------------------*/
/* ISPF option 3.4 routine                                            */
/*--------------------------------------------------------------------*/
ispf_opt34:
    alk32vol=
    If p34/='' Then Do
        If Index(p34,' V=')>0 Then Parse VAR p34 p34 . 1 ' V=' alk32vol .
        alk32enq='Y';alk32dsn=Strip(p34,,"'")
    End
    Else Do
        alk32enq=;alk32dsn=
    End
ispf_opt34_V:
    If Substr(parm2,1,1)='+' | Substr(parm2,1,1)='-' Then Do
        diff=parm2;Call ResVolParse
    End
    Else If Substr(parm3,1,1)='+' | Substr(parm3,1,1)='-' Then Do
             diff=parm3;Call ResVolParse
         End
    If alk32vol='' Then,
        "SELECT PGM(ISRDSLST) PARM(DSL '"alk32dsn"')"
    Else Do
        "VPUT (ALK32DSN ALK32ENQ ALK32VOL) SHARED"
        "SELECT PGM(ISRUDL) PARM(ISRUDLP)"
        alk32dsn=;alk32enq=
    End
    opt34a='Y'
#tr=Trace('o')
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
ResVolParse:
    If Datatype(diff)/='NUM' Then diff=Substr(diff,1,1) || 1
    Parse VAR alk32dsn hlq '.' rest
    rv  = Substr(hlq,Length(hlq)-1,2)
    If Datatype(rv)/='NUM' Then rv=Substr(hlq,Length(hlq),1)
    If Datatype(rv)/='NUM' Then Do
        zedlmsg = 'Cannot change hlq suffix as non numeric.'
        'ISPEXEC SETMSG MSG(ISRZ001)'
        Return 4
    End
    rl = Length(rv)
    data = 'rv = rv' diff
    Interpret data
    hlq = Substr(hlq,1,Length(hlq)-rl) || Right(rv,rl,'0')
    alk32dsn = hlq'.'rest
    Return 0

/*--------------------------------------------------------------------*/
/* Parse parameters                                                   */
/*--------------------------------------------------------------------*/
parse_parms:
    volume = ''
    forceb = 'N'
    mds    = ''
    moper  = ''                             /* Multi (loop) operation */
    skip   = 0                              /* Members skip b4 loop   */
    parsed = 'Y'
    revcc  = 'N'                            /* Reverse concatenation  */

    #tr=Trace()
    x=Wordpos('TRACE',parm#)
    If x>0 Then Do;parm#=Delword(parm#,x,1);#tr='R';End
    If parm#='' Then Return 0

    x = Index(parm#,'V=')
    If x > 0 '' Then Do
        Parse VAR parm# . 'V=' v .
        volume = 'VOLUME('v')'
        parm# = Strip(Delstr(parm#,x,8))
    End
    If parm# = '' Then Return 0

    Do Forever
        x = Index(' 'parm#,' //')
        If x = 0 Then Leave
        Parse VAR parm# . '//' parm .
        l = Length(parm)
        parm# = Strip(Delstr(' 'parm#,x,l+3))
        If Substr(parm,1,1) = 'P' Then Do
            y     = Substr(parm,2,1)
            If y/='' Then Do
                opr   = Substr(x,4,1)
                xeopr = opr
            End
        End
    End

    Do Forever
        If c_oper = 'N' Then c_oper = 'Y'
        If c_oper = '' Then c_oper = 'N'
        x = Index(' 'parm#,' /')
        If x = 0 Then Leave
        If c_oper = 'N' Then c_oper = 'Y'
        Parse VAR parm# . '/' parm .
        Parse VAR parm pref +1 suf
        If parm='EM' Then Parse Value '' With pref suf
        If pref = 'V' & suf = 'C' Then pref = VC
        If pref = 'V' & suf = 'P' Then pref = VP
        l = Length(parm)
        Select
            When (parm = 'VB') Then Do;mds='MDS';f00=parm;End
            When (parm = 'EQ') Then Do;mds='MDS';f00=parm;End
            When (parm = 'EQ') Then Do;mds='MDS';f00=parm;End
            When (pref = 'E' | pref = 'B' | pref = 'V') Then Do
                opr = pref
                If suf = 'P' Then xeopr = opr
                If opr = 'B' Then forceb = 'Y'
            End
            When (pref = '*') Then Do
                moper = parm
                Parse VAR suf suf ')' .
                If Datatype(suf) = 'NUM' & Index(suf,'.') = 0 Then,
                    skip = suf
            End
            When Substr(parm,1,2)='QT(' Then Parse VAR parm '(' qual_trim ')'
            Otherwise Do
                If parm = 'R' Then revcc = 'Y'
                If mds = '' Then Do
                    mds = 'MDS'
                    f00 = parm
                End
            End
        End
        parm# = Strip(Delstr(' 'parm#,x,l+2))
    End

/*--------------------------------------------------------------------*/
/* Allow for XE of 'IND$FILE GET dsn' format input with 'xe ' over-   */
/* write.                                                             */
/*--------------------------------------------------------------------*/
    If Index(parm#,'$FILE') > 0 Then Do
        Parse VAR parm# . '$FILE' . parm1 .
        If parm1/='' Then Do
            If Substr(parm1,1,1) = "'" Then Return 0
            Parse VAR parm1 q2 '.' q3
            If q2 = userid Then parm1 = q3
            Return 0
        End
    End

    Parse VAR parm# parm1 parm2 parm3 parm4

    Return 0

/*--------------------------------------------------------------------*/
/*  Sort variables into descending sequence (spaces at end)           */
/*--------------------------------------------------------------------*/
sort_them:
    data = 'XEA'#p' = ""'
    Interpret data
    k = #p -(#pl+2)
    Select
        When (parm2 = 'DSN') Then Do
            Do i=1 to #p-(#pl+1)
                Do j=1 to k
                    data = 'x1 = XED'j
                    Interpret data
                    data = 'x2 = XED'j+1
                    Interpret data
                    data = 'f1 = XEA'j
                    Interpret data
                    data = 'f2 = XEA'j+1
                    Interpret data
                    If parm3 = 'D' Then Do
                        If x1 = '' Then Call swap
                        Else If x1 < x2 Then Call swap
                    End
                    Else Do
                        If x2 = '' Then Leave
                        Else If x1 > x2 Then Call swap
                    End
                End
            End
        End
        When  (parm2 = 'D') Then Do
            Do i=1 to #p-(#pl+1)
                Do j=1 to k
                    data = 'f1 = XEA'j
                    Interpret data
                    data = 'f2 = XEA'j+1
                    Interpret data
                    If f1 = '' Then Call swap
                    Else If f1 < f2 Then Call swap
                End
            End
        End
        Otherwise Do
            Do i=1 to #p-(#pl+1)
                Do j=1 to k
                    data = 'f1 = XEA'j
                    Interpret data
                    data = 'f2 = XEA'j+1
                    Interpret data
                    If f1 > f2 Then Do
                        If f2 = '' Then Iterate
                        Call swap
                    End
                End
            End
        End
    End
    Signal scr1

/*--------------------------------------------------------------------*/
/*  Add a new alias and dataset combination                           */
/*--------------------------------------------------------------------*/
add_new_alias:
    If parm2 = '' | parm2 = '/SORT' Then Do
        zedlmsg = 'Alias name missing.'
        Signal msgscr1
    End
    If parm3 = '' | parm3 = '/SORT' Then Do
        zedlmsg = 'Dataset name missing.'
        Signal msgscr1
    End
    Do i=1 To #p-#pl
        If Value('XEA'i) /= '' Then Iterate
        data = 'XEA'i" = parm2"
        Interpret data
        data = 'XED'i" = parm3"
        Interpret data
        zedlmsg = 'New relationship added. You may need to re /SORT.'
        Signal msgscr1
    End
    zedlmsg = 'No empty spots left.'
    Signal msgscr1

/*--------------------------------------------------------------------*/
/* Set prefix on or remove prefix                                     */
/*--------------------------------------------------------------------*/
prefix_dsn:
    prefa='O'
    If parm2='/OFF' Then Do
        prefa='X';parm2=parm3
    End
    If parm3='/OFF' Then prefa='X'
    If parm2='/ON' Then Do
        prefa='O';parm2=parm3
    End
    If parm3='/ON' Then prefa='O'
    If parm2/='' Then pref=parm2;Else pref=sysp
    If pref/='' Then If $vername(pref)/='OK' Then Do
        zedlmsg='Invalid prefix parameter passed.'
        Signal msgscr1
    End
    prefq="'"pref"."
    l=Length(prefq)
    Do i=1 to #p-1
        xxx=Value('XED'i);If xxx='' Then Iterate
        yyy=Value('XEA'i);If Substr(yyy,1,1)='.' Then Iterate
        If prefa='O' Then,
           If Substr(xxx,1,1)/="'" Then xxx="'"pref"."xxx"'"
        Else If Index(xxx,prefq)>0 Then,
                xxx=Substr(xxx,l+1,Length(xxx)-(l+1))
        data='XED'i'=xxx'
        Interpret data
    End
    Signal scr1

/*--------------------------------------------------------------------*/
/*  Swap variables using the '~' command...                           */
/*--------------------------------------------------------------------*/
swap_vars:
    q = Index(zcmd,'~')
    q1 = Substr(zcmd,1,q-1)
    q2 = Substr(zcmd,q+1,LENGTH(zcmd)-q)
    data = 'f1 = XEA'q1
    Interpret data
    If q2 = '' Then f2 = ''
    Else Do
        data = 'f2 = XEA'q2
        Interpret data
    End
    f3 = f2
    data = 'XEA'q2' = f1'
    Interpret data
    data = 'XEA'q1' = f3'
If i_m/='' Then i_mac='MACRO('i_m')';

    data = 'f1 = XED'q1
    Interpret data
    If q2 = '' Then f2 = ''
    Else Do
        data = 'f2 = XED'q2
        Interpret data
    End
    f3 = f2
    data = 'XED'q2' = f1'
    Interpret data
    data = 'XED'q1' = f3'
    Interpret data
    Signal scr1

/*--------------------------------------------------------------------*/
/*  Set variables to another's value                                  */
/*--------------------------------------------------------------------*/
clone_it:
    Parse VAR zcmd q1 '=' q2 moveit
    If Wordpos(moveit,'/M M')>0 Then moveit=1
    Else Do
        If Substr(q2,Length(q2),1)='M' Then Do
            Parse VAR q2 q2 '/M';Parse VAR q2 q2 'M'
            moveit=1
        End
        Else moveit=0
    End
    Interpret 'f1=XEA'q1
    If q2='' Then f2=;Else Interpret 'f2 = XEA'q2
    Interpret 'XEA'q1'=f2'

    Interpret 'f1=XED'q1
    If q2='' Then f2=;Else Interpret 'f2=XED'q2
    Interpret 'XED'q1'=f2'
    If moveit Then Do;Interpret 'XEA'q2'=';Interpret 'XED'q2'=';End
    csr1='XEA'q1
    Signal scr1

/*--------------------------------------------------------------------*/
/* Scroll screen left/right                                           */
/*--------------------------------------------------------------------*/
scroll:
    "ISPEXEC VGET (zscrolla) ASIS"
    If Datatype(zscrolla) = 'CHAR' Then Do
        If zverb =  'UP' | zverb = 'LEFT' Then pfamt = -1
        Else                                   pfamt = 1
        xedscr = (xedscr + pfamt) // #sc
        If xedscr = 0 Then xedscr = #sc
        If xedscr < 0 Then xedscr = #sc + xedscr
    End
    Else Do
        If zscrolla < 1 | zscrolla > #sc Then Do
            zedlmsg = "Invalid panel number."
            "ISPEXEC SETMSG MSG(ISRZ001)"
        End
        Else
            xedscr = zscrolla +0
    End
    Signal scr1

/*--------------------------------------------------------------------*/
/* Multi operation. Permits action against all members until the      */
/* isuue of TSO QUIT * command.                                       */
/*--------------------------------------------------------------------*/
M_oper:
    wild = ''
    lb = Index(dsname,'(')
    If lb > 0 Then Do
        Parse VAR dsname dsname '(' member ')' .
        dsname = "'"dsname"'"
        as = Index(member,'*')
        If as > 0 Then member = Substr(member,1,as-1)
        wild = member
    End

    If mopero/=2 Then Signal already_allocd

    If volume = '' Then,
        ISPEXEC "LMINIT DATAID(data1) DATASET(&DSNAME)"
    Else,
        ISPEXEC "LMINIT DATAID(data1) DATASET(&DSNAME)",
                "VOLUME(&ALKVOL)"
    ISPEXEC "LMOPEN DATAID(&data1) OPTION(INPUT)"

already_allocd:
    SIGNAL OFF ERROR
    Call select_action
    If skip > 0 Then xtra = ' after skipping' skip 'members'
    Else xtra = ''
    zedlmsg = "Looping '"action || xtra'.',
            "Enter ""TSO QUIT *"" to terminate loop."
    ISPEXEC "SETMSG MSG(ISRZ001)"
    reit = 'N'
    Do Forever
        skip = skip -1
        ISPEXEC "LMMLIST DATAID(&data1) OPTION(LIST)",
                "MEMBER(MEMBER)  STATS(NO)"
        If rc/=0 Then Leave
        If wild/='' Then Do
            If Substr(member,1,Length(wild)) < wild Then Iterate
            If reit/='Y' Then,
                If Substr(member,1,Length(wild)) > wild Then Leave
        End
        If skip < 0 Then,
            "ISPEXEC &ACTION DATAID(&DATA1) MEMBER(&MEMBER)"
        "ISPEXEC VGET MULTQUIT SHARED"
        If Substr(multquit,1,1) = '*' Then Do
            skip = Substr(multquit,2)
            multquit = ''
            "ISPEXEC VPUT MULTQUIT SHARED"
            If skip = '' Then Leave
            If Datatype(skip) = 'NUM' & Index(skip,'.') = 0 Then Iterate
            If Datatype(skip) = 'CHAR' Then Do
                wild = skip
                as = Index(wild,'*')
                If as > 0 Then wild = Substr(wild,1,as-1)
                Else           wild = Substr(wild,1,8)
                member = wild
                skip = 0
                reit = 'Y'
                Iterate
            End
            Leave
        End
    End
    ISPEXEC "LMMLIST DATAID(&data1) OPTION(FREE)"
    ISPEXEC "LMCLOSE DATAID(&data1)"

    Return 0

/*--------------------------------------------------------------------*/
/* Process SET's of screen names.                                     */
/*--------------------------------------------------------------------*/
process_set:
    set# = Right(Strip(Substr(parm2,4,3)),3,'0')
    If Datatype(set#) /= 'NUM' | Index(set#,'.') > 0 Then Do
        zedlmsg = "Invalid set number '"set#"' entered."
        "ISPEXEC SETMSG MSG(ISRZ001)"
        Return 8
    End
    setable = 'XESET'set#
    If parm3 = 'LOAD' Then Do
        "ISPEXEC TBOPEN &SETABLE NOWRITE"
        If rc /= 0 Then Do
            zedlmsg = "Invalid set number '"set#"' entered."
            "ISPEXEC SETMSG MSG(ISRZ001)"
            Return 8
        End
        Trace Off
        Do j=1 To #t
            "ISPEXEC TBSKIP &SETABLE"
            If rc /= 0 Then Leave
            If parm4 = 'MIX' & setalias = '' Then Iterate
            data = 'XED'j' = setdsn'
            Interpret data
            data = 'XEA'j' = setalias'
            Interpret data
        End
        x=Trace(#tr)
    End
    Else Do
        "ISPEXEC TBCREATE &SETABLE KEYS(SEQ#) NAMES(SETDSN,SETALIAS)",
            "REPLACE"
        If rc > 4 Then Do
            zedlmsg = "Could not create set number '"set#"'."
            "ISPEXEC SETMSG MSG(ISRZ001)"
            Return 8
        End
        Trace Off
        Do j=1 To #t
            seq# = j
            data = 'setdsn = XED'j
            Interpret data
            data = 'setalias = XEA'j
            Interpret data
            "ISPEXEC TBADD  &SETABLE"
        End
        x=Trace(#tr)
    End
    "ISPEXEC TBCLOSE &SETABLE"
    xesetno = set# +0

    Return 0

/*--------------------------------------------------------------------*/
/*  Set variables to another's value                                  */
/*--------------------------------------------------------------------*/
clone_it:
    q = Index(zcmd,'=')
    q1 = Substr(zcmd,1,q-1)
    q2 = Substr(zcmd,q+1,LENGTH(zcmd)-q)
    data = 'f1 = XEA'q1
    Interpret data
    If q2 = '' Then f2 = ''
    Else Do
        data = 'f2 = XEA'q2
        Interpret data
    End
    data = 'XEA'q1' = f2'
    Interpret data

    data = 'f1 = XED'q1
    Interpret data
    If q2 = '' Then f2 = ''
    Else Do
        data = 'f2 = XED'q2
        Interpret data
    End
    data = 'XED'q1' = f2'
    Interpret data
    csr1     = 'XEA'q1
    Signal scr1

/*--------------------------------------------------------------------*/
/* Scroll screen left/right                                           */
/*--------------------------------------------------------------------*/
scroll:
    "ISPEXEC VGET (zscrolla) ASIS"
    If Datatype(zscrolla) = 'CHAR' Then Do
        If zverb =  'UP' | zverb = 'LEFT' Then pfamt = -1
        Else                                   pfamt = 1
        xedscr = (xedscr + pfamt) // #sc
        If xedscr = 0 Then xedscr = #sc
        If xedscr < 0 Then xedscr = #sc + xedscr
    End
    Else Do
        If zscrolla < 1 | zscrolla > #sc Then Do
            zedlmsg = "Invalid panel number."
            "ISPEXEC SETMSG MSG(ISRZ001)"
        End
        Else
            xedscr = zscrolla +0
    End
    Signal scr1

/*--------------------------------------------------------------------*/
/* Multi operation. Permits action against all members until the      */
/* isuue of TSO QUIT * command.                                       */
/*--------------------------------------------------------------------*/
M_oper:
    wild = ''
    lb = Index(dsname,'(')
    If lb > 0 Then Do
        Parse VAR dsname dsname '(' member ')' .
        dsname = "'"dsname"'"
        as = Index(member,'*')
        If as > 0 Then member = Substr(member,1,as-1)
        wild = member
    End

    If mopero/=2 Then Signal already_allocd

    If volume = '' Then,
        ISPEXEC "LMINIT DATAID(data1) DATASET(&DSNAME)"
    Else,
        ISPEXEC "LMINIT DATAID(data1) DATASET(&DSNAME)",
                "VOLUME(&ALKVOL)"
    ISPEXEC "LMOPEN DATAID(&data1) OPTION(INPUT)"

already_allocd:
    SIGNAL OFF ERROR
    Call select_action
    If skip > 0 Then xtra = ' after skipping' skip 'members'
    Else xtra = ''
    zedlmsg = "Looping '"action || xtra'.',
            "Enter ""TSO QUIT *"" to terminate loop."
    ISPEXEC "SETMSG MSG(ISRZ001)"
    reit = 'N'
    Do Forever
        skip = skip -1
        ISPEXEC "LMMLIST DATAID(&data1) OPTION(LIST)",
                "MEMBER(MEMBER)  STATS(NO)"
        If rc/=0 Then Leave
        If wild/='' Then Do
            If Substr(member,1,Length(wild)) < wild Then Iterate
            If reit/='Y' Then,
                If Substr(member,1,Length(wild)) > wild Then Leave
        End
        If skip < 0 Then,
            "ISPEXEC &ACTION DATAID(&DATA1) MEMBER(&MEMBER)"
        "ISPEXEC VGET MULTQUIT SHARED"
        If Substr(multquit,1,1) = '*' Then Do
            skip = Substr(multquit,2)
            multquit = ''
            "ISPEXEC VPUT MULTQUIT SHARED"
            If skip = '' Then Leave
            If Datatype(skip) = 'NUM' & Index(skip,'.') = 0 Then Iterate
            If Datatype(skip) = 'CHAR' Then Do
                wild = skip
                as = Index(wild,'*')
                If as > 0 Then wild = Substr(wild,1,as-1)
                Else           wild = Substr(wild,1,8)
                member = wild
                skip = 0
                reit = 'Y'
                Iterate
            End
            Leave
        End
    End
    ISPEXEC "LMMLIST DATAID(&data1) OPTION(FREE)"
    ISPEXEC "LMCLOSE DATAID(&data1)"

    Return 0

/*--------------------------------------------------------------------*/
/* Process SET's of screen names.                                     */
/*--------------------------------------------------------------------*/
process_set:
    set# = Right(Strip(Substr(parm2,4,3)),3,'0')
    If Datatype(set#) /= 'NUM' | Index(set#,'.') > 0 Then Do
        zedlmsg = "Invalid set number '"set#"' entered."
        "ISPEXEC SETMSG MSG(ISRZ001)"
        Return 8
    End
    setable = 'XESET'set#
    If parm3 = 'LOAD' Then Do
        "ISPEXEC TBOPEN &SETABLE NOWRITE"
        If rc /= 0 Then Do
            zedlmsg = "Invalid set number '"set#"' entered."
            "ISPEXEC SETMSG MSG(ISRZ001)"
            Return 8
        End
        Trace Off
        Do j=1 To #t
            "ISPEXEC TBSKIP &SETABLE"
            If rc /= 0 Then Leave
            If parm4 = 'MIX' & setalias = '' Then Iterate
            data = 'XED'j' = setdsn'
            Interpret data
            data = 'XEA'j' = setalias'
            Interpret data
        End
        x=Trace(#tr)
    End
    Else Do
        "ISPEXEC TBCREATE &SETABLE KEYS(SEQ#) NAMES(SETDSN,SETALIAS)",
            "REPLACE"
        If rc > 4 Then Do
            zedlmsg = "Could not create set number '"set#"'."
            "ISPEXEC SETMSG MSG(ISRZ001)"
            Return 8
        End
        Trace Off
        Do j=1 To #t
            seq# = j
            data = 'setdsn = XED'j
            Interpret data
            data = 'setalias = XEA'j
            Interpret data
            "ISPEXEC TBADD  &SETABLE"
        End
        x=Trace(#tr)
    End
    "ISPEXEC TBCLOSE &SETABLE"
    xesetno = set# +0

    Return 0

eval_dsname:
    Do Forever
        Parse Var dsname v1 '&' var '.' v2
        If var='' | Length(var)>8 Then Leave
        xxx=Mvsvar(Symdef,var)
        If xxx='' Then Do
            col#=Verify(var,nat'*','N')
            If col#>0 Then Do;v2=Substr(var,col#)v2;var=Substr(var,1,col#-1);End
            Interpret 'xxx='var
            If xxx=var | xxx='' Then Leave
        End
        dsname=v1 || xxx || v2
    End
    Return 0

eval_time:
    time = time('l')
    Parse VAR time hh ':' mm ':' .;Parse VAR timeo h1 ':' m1 ':' .
    xx=hh':'mm
    If \Datatype(h1,'w') Then timeo=0;If \Datatype(m1,'w') Then timeo=0
    If timeo/=0 Then Do
        If h1<0 Then m1=m1*-1
        hh=(hh+h1)*60;mm=mm+m1+hh
        hh=hh%60
        Select
            When hh>24 Then Do;hh=hh-24;dof='+';End
            When hh<0 Then  Do;hh=hh+24;dof='-';End
            Otherwise dof=
        End
        mm=Right(mm//60,2,0)
    End

    Return xx'('hh':'mm||dof')'

import_matrix:
    dsn=cmd2
    If Substr(dsn,1,1)/="'" Then dsn="'"$alkhlqu()"."dsn"'"
    If Sysdsn(dsn)/='OK' Then Do
        zedlmsg="Could not allocate dataset "dsn". Correct and try again."
        "SETMSG MSG(ISRZ001)";Signal scr1
    End
    dd='XE'Time('s')
    Address TSO "ALLOC F("dd") DSN("dsn") SHR REU"
    If rc/=0 Then Do
        zedlmsg="Could not allocate dataset '"dsn"'. Correct and try again."
        "SETMSG MSG(ISRZ001)";Signal scr1
    End
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    If cmd1/='/GETC' Then;Do i=1 To #t;Interpret "XEA"i"=;XED"i"=";End
    Do j=1 To linei.0
        line=linei.j
        xx=Words(line)
        yy=Subword(line,xx-1);zz=Delword(line,xx-1)
        Parse VAR yy i yy;If \Datatype(i,'w') Then Iterate
        If cmd1='/GETC' Then Interpret "If XEA"i"/='' Then Iterate"
        Interpret "XEA"i"=yy;XED"i"=zz"
    End
    zedlmsg="Updated from dataset "dsn"."
    "SETMSG MSG(ISRZ001)"
    Return 0

export_matrix:
    Address TSO "NEWSTACK"
    Do i=1 To #t
        Interpret "If XED"i"/='' Then",
                       "Queue Substr(XED"i",1,46) Right(i,3) XEA"i
    End
    Queue ''
    dd='XE'Time('s')
    "VGET ZTEMPF";"CONTROL ERRORS CANCEL"
    Address TSO "ALLOC F("dd") DSN('"ztempf"') SHR REU"
    Address TSO "EXECIO * DISKW "dd" (FINIS"
    "LMINIT DATAID(DATAID) DDNAME("dd")"
    Address ISPEXEC "VIEW DATAID(&DATAID)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE F("dd")"
    Return 0

Get_dataset: Arg a_dsn,a_memb
    xxx=$ddalloc(a_dsn,U)
    Do While xxx/=''
        Parse Var xxx xx xxx
        If Sysdsn("'"xx"("a_memb")'")='OK' Then Return xx
    End
    Return 'Missing.dataset'

