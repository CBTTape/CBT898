/*--------------------------ooo00 REXX 00ooo--------------------------*/
/* Sample REXX routine to simply demonstrate using REXX to access     */
/* storage in another address space.                                  */
/*                                                                    */
/* The sample dialog will get the "users" security name from their    */
/* ACEE.  Suggest keeping to TSO user address spaces to test asis.    */
/* Set variable "parm#" to the address space's "jobname" and "ASIDX"  */
/* (in HEX notation).                                                 */
/*                                                                    */
/* NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE       */
/*                                                                    */
/* Watch the write to memory feature of the processing program.       */
/* When invoked, you are in supervisor state and even though you are  */
/* writing to the other address space, you may be creaming a          */
/* legitimate MVS control block visible (though theoretically storage */
/* protected) to all address spaces.  The program has no smarts and   */
/* will write where you tell it if it can and 99% of the time IT CAN. */
/*                                                                    */
/*--------------------------------------------------------------------*/
Arg parm#
    If parm#='' Then Do
/*        Then TSO Uid ASIDX                                          */
/*             -------  ----                                          */
/*      parm#='CATALOG  0023'                                         */
        parm#='ALEX   0032'
        parm#='ALEX   003F'
    End

    authxmem="'AKOS.$LOAD(XMEMSTOR)'"
authxmem="'DNDCICS.CICS310.AUTHLIB(IEBCOPY)'"
authxmem="'AKOS.$LOAD(XMEMSTOR)'"

    Parse Value '0 N Y' With xm_rc dsect_only xmem_av xmem_d

    audit=0                                 /* 1 OR 0                 */
    If Sysdsn(authxmem)/='OK' Then Do
        zedlmsg=authxmem '-' Sysdsn(authxmem)'.'
        Signal erx1
    End

$Whois:
    Parse Upper VAR parm# jbnm asidx .
    sysauth.asid=x2c(asidx)
    If audit Then Say asidx x2c(asidx) '<- asidx'
    ascb=Storage_R('224',4,'A')
    If xm_rc/=0 Then Signal xmemstor_error
    If audit Then Say ascb c2x(ascb) '<- ascb'
    asxb=Storage_R(d2x(c2d(ascb)+x2d('6C')),4,'A')
    If audit Then Say asxb c2x(asxb) '<- asxb'
    acee=Storage_R(d2x(c2d(asxb)+x2d('C8')),4,'A')
    If audit Then Say acee c2x(acee) '<- acee'
    acee_data=Storage_R(c2x(acee),512,'A')
    If audit Then Say acee_data
    nam@=Storage_R(d2x(c2d(acee)+x2d('64')),4)
    If audit Then Say nam@ c2x(nam@)
    name=Storage_R(c2x(nam@),30)
    len=c2d(Substr(name,1,1));name=Substr(name,2,len-1)
    Say 'Identified ->' name

/*--------------------------------------------------------------------*/
/* The following code may be executed provided you do not uncomment   */
/* the line with the "STORAGE_W" statement.                           */
/*                                                                    */
/* The following code demonstrates how you would change 1 byte in the */
/* foreign address space.  For the demo purposes it will turn the     */
/* special attribute flag OFF for the user.  Once turned off you/them */
/* may looses all access and you may need to log back on.            */
/*--------------------------------------------------------------------*/
    acee_auth@=d2x(c2d(acee)+x2d('26'))
    athf=Storage_R(acee_auth@,1,'A')
    l_st=mark(1)                            /* Mark Start

*----------------------------------------------------------------------*
Offset Field          Value                Description
------ --------       -----                -----------------------------
000026 ACEEFLG1 DS    B                    USER FLAGS
       ACEESPEC EQU   X'80'                1 - SPECIAL ATTRIBUTE
       ACEEADSP EQU   X'40'                1 - AUTOMATIC DATA SECURITY
       ACEEOPER EQU   X'20'                1 - OPERATIONS ATTRIBUTE
       ACEEAUDT EQU   X'10'                1 - AUDITOR ATTRIBUTE
       ACEELOGU EQU   X'08'                1 - USER IS TO HAVE MOST RACF
       ACEEPRIV EQU   X'02'                1 - USER IS A STARTED PROCEDU
       ACEERACF EQU   X'01'                1 - RACF DEFINED USER
The following ACEE flag has been extracted for user. The sample code,
if executed would turn "special attribute" off if already set.
*----------------------------------------------------------------------*
*/; l_en=mark(-1)                           /* Mark End               */
    Do i=l_st To l_en;Say Substr(Sourceline(i),1,79);End
    Say c2x(athf) '<- ACEE user flag #1'
    rep_with=Bitxor(athf,'80'x)
/*  rep_with=Bitxor(athf,'A0'x)                                       */
    Say c2x(rep_with) '<- ACEE user flag #1 (with special XOR toggled)'
    If audit Then Say acee_auth@,
        Length(rep_with) rep_with "x'"c2x(rep_with)"'"
/*--------------------------------------------------------------------*/
/* Uncomment the following line at your peril.  However, if you do,   */
/* change Userid & ASIDX to yours (or a close friend) and whoever it  */
/* is, be prepared to log back on to restore your ACEE settings.      */
/* If it doesn't cream your authority you can run this as often as    */
/* you like and it will toggle your authority run this as often as    */
/*--------------------------------------------------------------------*/
/*  xx=Storage_W(acee_auth@,Length(rep_with),rep_with)                */

    athf=Storage_R(acee_auth@,1,'A')
    Say c2x(athf) '<- ACEE user flag #1 (after change)'

    Exit


xmemstor_error:
    zedlmsg='XMEMSTOR returned RC='xm_rc'. Userid and/or ASIDX may be wrong.'
erx1:
    zedsmsg=
    Address ISPEXEC "SETMSG MSG(ISRZ001)";Exit
Mark:Arg diff;If \Datatype(diff,'W') Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Get storage. If variable 'sysauth.asid' is non blank then we are   */
/* accessing another address space and we need to invoke program      */
/* XMEMSTOR to get the storeage using cross-memory.                   */
/* If variable 'xmem_av="Y"' then the cross-memory program is         */
/* available.                                                         */
/* Paremeters to this routine are:                                    */
/*    1 - Address                                                     */
/*    2 - Length of data to get.                                      */
/*    3 - Flag: 'B' - Bulk get (returns 640 bytes ,16 * 40, screen    */
/*                    regardless of length.                           */
/*              'A' - ASIS, get length.                               */
/*--------------------------------------------------------------------*/
Storage_R: ARG ad1,len,qual
    Select
        When (dsect_only)='Y'  Then Return Storage_D(ad1,len)
        When (sysauth.asid)='' Then Do
            x_x=Storage(ad1,len)
            If x_x='' Then x_x=Storage_I(ad1,len)
            Return x_x
        End
        Otherwise Do
            If xmem_av/='Y' Then Signal no_auth_access
            If qual/='B' Then Do
                sysauth.mode='R'
                sysauth.leng=d2c(len)
                sysauth.addr=x2c(Right(ad1,8,'0'))
                #msg=Msg('Off');Address TSO "PROFILE NOWTPMSG"
                Address TSO "TSOEXEC CALL "authxmem
                xm_rc=rc
                x=Msg(#msg);Address TSO "PROFILE WTPMSG"
                Return xmemstor
            End
            Else Do
                If xmem_d='' Then Do
                    sysauth.mode='R'
                    sysauth.leng='0280'X
                    sysauth.addr=x2c(Right(ad1,8,'0'))
                    #msg=Msg('Off');Address TSO "PROFILE NOWTPMSG"
                    Address TSO "TSOEXEC CALL "authxmem
                    xm_rc=rc
                    x=Msg(#msg);Address TSO "PROFILE WTPMSG"
                    xmem_d=xmemstor
                End
                If xmem_d/='' Then Do
                    xmem_x=Substr(xmem_d,1,len)
                    xmem_d=Substr(xmem_d,len+1)
                End
                Else xmem_x=
                Return xmem_x
            End
        End
    End

Storage_D: ARG ad1,len,qual
    d_o_dsl=x2d(o_dsl)
    d_ad1=x2d(ad1)
    If d_o_dsl/=d_ad1 Then Do
        If d_o_dsl+Length(code)<d_ad1 Then Do
            zedlmsg =,
               ad1 "past the data (+ it's length) passed to routine."
            "SETMSG MSG(ISRZ001)"
            Exit
        End
        Say d_ad1-d_o_dsl len
        Return Strip(Substr(code,d_ad1-d_o_dsl+1,len))
    End
    Else Return code

/*--------------------------------------------------------------------*/
/* Non-xmem invalid address (ESTAE) encountered.  Loop decrementing   */
/* storage required by 16 bytes for each pass until loop exhausted or */
/* storage is within vaid accessable address range and data is        */
/* returned.                                                          */
/*--------------------------------------------------------------------*/
Storage_I: ARG ad1,len
    i=(len%16)*16
    Do While i>16
        x_x=Storage(ad1,i)
        If x_x/='' Then Leave
        i=i-16
    End
    Return x_x

Storage_W:
    Parse ARG ad1,len,rep_d
    If sysauth.asid='' Then Return Storage(ad1,len,rep_d)
    Else Do
        If xmem_av/='Y' Then Signal no_auth_access
        sysauth.mode='W'
        sysauth.leng=d2c(len)
        sysauth.addr=x2c(Right(ad1,8,'0'))
        sysauth.repd=rep_d
        #msg=Msg('Off')
        Address TSO "TSOEXEC CALL "authxmem
        x=Msg(#msg)
        Return rc
    End

no_auth_access:
    zedlmsg="Protected storage, and",
            "cross-memory (authorised access) is not available."
    Address ISPEXEC "SETMSG MSG(ISRZ001)"
    Return ''
