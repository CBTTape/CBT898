XMEMSTOR ReadMe:
----------------

   Member "XMEMSTE1" is a sample REXX routine to simply demonstrate
   using REXX to access storage in another address space.

   The sample dialog will get the "users" security name from their
   ACEE.  Suggest keeping to TSO user address spaces to test asis.
   Set variable "parm#" to the address space's "jobname" and "ASIDX"
   (in HEX notation).
   If you uncomment the suggested line it will turns the "special
   attribute" byte flag off in the ACEE for the users session.
   Re-running (provided you haven't creamed all your authority, in
   which case you will need to logoff/on) will toggle it back on.

   Create the load module for cross-memory API using REXX by issuing the
   TSO RECEIVE command on member "XMEMSTOL".

   For a quick try without stirring the possum, copy it into an APF
   authorised (non-linklisted) library under an authorised program
   name (suggest IEBCOPY) and modify variable "authxmem" accordingly
   (in EX#01).
   Change "parm#" to a valid TSO userid (other than yourself) and the
   respective ASIDX (in HEX representation), to return their name and
   have REXX say it.  If trying the write feature use your own as an
   alternative guinea-pig may not appreciate having to logoff/on before
   you get a chance to reset it.  If you bhave 2 userids all the better.

   NN        NN   OOOOOOOOOO   TTTTTTTTTTTT  EEEEEEEEEEEE      !!!!
   NNN       NN  OOOOOOOOOOOO  TTTTTTTTTTTT  EEEEEEEEEEEE      !!!!
   NNNN      NN  OO        OO       TT       EE                !!!!
   NN NN     NN  OO        OO       TT       EE                !!!!
   NN  NN    NN  OO        OO       TT       EE                !!!!
   NN   NN   NN  OO        OO       TT       EEEEEEEE          !!!!
   NN    NN  NN  OO        OO       TT       EEEEEEEE          !!!!
   NN     NN NN  OO        OO       TT       EE                !!!!
   NN      NNNN  OO        OO       TT       EE
   NN       NNN  OO        OO       TT       EE
   NN        NN  OOOOOOOOOOOO       TT       EEEEEEEEEEEE      !!!!
   NN         N   OOOOOOOOOO        TT       EEEEEEEEEEEE      !!!!

   Watch the write to memory feature of this function.

   When invoked, you are in supervisor state and even though you are
   writing to the other address space, you may be creaming a legitimate
   MVS control block (which would be normally storage protected) as you
   have access to all available (non-swapped viewable) storage.

   The program has no smarts and will write where you tell it if it can
   and 99% of the time IT CAN.

   After evaluation, if used, I suggest:
   1. RACF protecting the program.
   2. Consider disabling the write feature, depending on intended use
      and audience.
      Change line 72 in program XMEMSTOR to an unconditional branch:-
      From:
        000072          BNE   @ADDR                      N. Bypass getting
      To:
        000072          B     @ADDR                      N. Bypass getting

  --------------------------------------------------------------------
