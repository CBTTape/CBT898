/*--------------------------ooo00 REXX 00ooo--------------------------*/
/*                                                                    */
/* XSITC: eXclude SIT Common entries.                                 */
/*                                                                    */
/* Exclude lines from SIT override that are the same as in the        */
/* "COMMON" member. Similar lines will be Excluded while same parm    */
/* will be placed as a noteline above.                                */
/*                                                                    */
/* Special treatment:                                                 */
/*   BMS     - blank third parm same as default UNALIGN and treated   */
/*             as a match                                             */
/*   CSDDSN  - New name convention inserted % needs to be changed     */
/*   GRPLIST - Expanded                                               */
/*                                                                    */
/*--------------------------------------------------------------------*/
xsitc_ver='1.02'
    ARG parm#
    Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/='' Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */

ini1:
    zedsmsg=;panel='XSITP'
    "VGET (xsitdsn) PROFILE"
    If xsitdsn='' Then Do
        member='COMMON';"ISREDIT (xsitdsn)=DATASET"
        xsitdsn="'"Strip(xsitdsn,,"'")"("member")'"
        xsitdsn="'DNTCICS.CICSZOS.V310.SYSIN(COMMON)'"
    End
    Call build_panel;#popr=1;#popc=3
scr1:
    zcmd=;Parse Value Strip(xsitdsn,,"'") With xsitdsn '(' member ')'
    xsitdsn="'"xsitdsn"'"
    "ADDPOP ROW(&#POPR) COLUMN(&#POPC)"
    "DISPLAY PANEL(&PANEL)  CURSOR(&CSR1) CSRPOS(&CPO1                  )"
    rc1=rc;Address ISPEXEC "REMPOP"
    If rc1/=0 Then Signal exi1
    xsitdsn="'"Strip(xsitdsn,,"'")"("member")'"
    If Sysdsn(xsitdsn)/='OK' Then Do
        zedlmsg="Common dataset" xsitdsn "not found."
        Signal scr1
    End
    "VPUT (xsitdsn) PROFILE"
    Address ISREDIT;"(status)=USER_STATE"
    "X '*' 1 ALL";"SORT NX";"(line)=LINE 1";"(member)=MEMBER";"CAPS=OFF"
    "(dataset)=DATASET"
    If Substr(line,1,1)/='*' Then Do
        sep='*'Copies('-',70)'*'
        "LINE_BEFORE .ZFIRST=(sep)"
        linex='*'Substr(' SIT override' member,1,70)'*'
        "LINE_BEFORE .ZFIRST=(LINEX)"
        "LINE_BEFORE .ZFIRST=(sep)"
    End
    "RESET"
    dd='EI'Time('s')
    Address TSO "ALLOC F("dd") DSN("xsitdsn") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM linei. FINIS)"
    Address TSO "FREE F("dd")"
    ignore='GRPLIST CSDDSN'
    Do i=1 To linei.0
        If Substr(linei.i,1,1)='*' Then Iterate
        find=Word(linei.i,1)
/*      "X '"find"' 1 FIRST"                                          */
        Parse Var find pref '=' .
        If Wordpos(pref,ignore)>0 Then Iterate
        "F '&PREF' 1 FIRST"
        If rc=0 Then Do
            "(line)=LINE .ZCSR"
            orig=Word(line,1)
            If orig=find Then "XSTATUS .ZCSR=X"
            Else Do
                "LINE_BEFORE .ZCSR=NOTELINE (find)"
            End
        End
    End

f_grplist:
    zedlmsg=
    find='GRPLIST='
    "F '&FIND' 1 FIRST"
    If rc=0 Then Do
        "(line)=LINE .ZCSR"
        linex='GRPLIST=(DFHLIST,'member',COMMON)'
        "LINE .ZCSR=(LINEX)"
        "LINE_BEFORE .ZCSR=NOTELINE (line)"
        "C '&LINEX' '&LINEX' ALL"
    End
    Else zedlmsg='"GRPLIST" not found. '

f_csddsn:
    find='CSDDSN='
    "F '&FIND' 1 FIRST"
    If rc=0 Then Do
        Parse VAR dataset hlqc '.' .
hlqc='DN%CICS'
        "(line)=LINE .ZCSR"
        linex='CSDDSN='hlqc'.'member'.DFHCSD'
        "LINE .ZCSR=(LINEX)"
        "LINE_BEFORE .ZCSR=NOTELINE (line)"
        "C '&LINEX' '&LINEX' ALL"
    End
    Else zedlmsg=zedlmsg'"CSDDSN" not found. '

f_bms:
    seek='BMS='
    "SEEK '&SEEK' 1 FIRST"
    If rc=0 Then Do
        "(XS)=XSTATUS .ZCSR"
        If xs='NX' Then Do
            "(line)=LINE .ZCSR"
            If Strip(Substr(line,1,72))='BMS=(FULL,COLD,,NODDS)' Then,
                "XSTATUS .ZCSR=X"
            Else Do
                linex='BMS=(FULL,COLD,UNALIGN,NODDS)'
                "LINE_BEFORE .ZCSR=NOTELINE (line)"
            End
        End
    End

    "USER_STATE=(status)"
    Address ISPEXEC "SETMSG MSG(ISRZ001)"

exi1:
    #msg=Msg('Off')
    Address ISPEXEC "LIBDEF ISPPLIB";Address TSO "DELETE '"pandsn"'"
    Exit
/*--------------------------------------------------------------------*/
/* Allocate panel                                                     */
/*--------------------------------------------------------------------*/
build_panel:
    u=Sysvar(Sysuid);p=Sysvar(Syspref);If u/=p&p/='' Then u=p'.'u;hlq=u
    pandsn= hlq'.$$$TEMP.XSITCOMM'
    #msg=Msg('Off')
    Address TSO
    "DELETE '"pandsn"'"
    "ALLOC DA('"pandsn"') NEW CATALOG TRACK SPACE(1,1)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(1)",
       "RECFM(F B) REU"
    "FREE DA('"pandsn"')"
    "NEWSTACK"
    Call make_mem_1;#tr=Trace('o')
    Do i=n_st To n_en;Queue Sourceline(i);End;Queue ''
    x=Trace(#tr)
    "ALLOC F("dd") DA('"pandsn"("panel")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    Address
    "LIBDEF ISPPLIB DATASET ID('&PANDSN') STACK"
    x=Msg(#msg)
    Return 0

/*--------------------------------------------------------------------*/
/* Create help panel(s) from sourcelines between the '/* */'          */
/*--------------------------------------------------------------------*/
make_mem_1:n_st=mark(2)                     /* Mark start of data     */
/*
)ATTR
  _ TYPE(INPUT) CAPS(ON) JUST(LEFT)  COLOR(RED) HILITE(USCORE)
  ? TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(BLUE)
  % TYPE(TEXT) INTENS(HIGH) SKIP(ON) COLOR(YELLOW)
  + TYPE(TEXT) INTENS(LOW) SKIP(ON)  COLOR(GREEN)
)BODY WINDOW(62,9) EXPAND(\\)
%&SID ===>_ZCMD                                              +
?
+Common SIT override member:
+  Dsn.........._XSITDSN                                     +
+  Member......._MEMBER  +
+
+
+Use%END+PF key to abandon processing.
)INIT
&ZWINTTL='SIT override compare'
&SID=&ZSYSID
)PROC
VER(&XSITDSN,NB,DSNAMEQ)
VER(&MEMBER,NB,NAME)
)END
*/
n_en=mark(-2);Return 0                      /* Mark end of data       */
Mark:If Datatype(Arg(1))/='NUM' Then Arg(1)=1;Return sigl+Arg(1)
