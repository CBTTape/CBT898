/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/* (C) Copyright 1996 ASYSTS Pty. Ltd.                                */
/*                                                                    */
/* XV: eXclude Vertically.                                            */
/*                                                                    */
/* Marco to remove data from a range of columns and replace the data  */
/* with an exclusion indicator.                                       */
/* The default indicator is '<|>' - 3 char position.                  */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Arg parm#;Address ISPEXEC;"CONTROL ERRORS RETURN";ima_macro=0
    If parm#/="" Then Signal byp1
    "ISREDIT MACRO (parm#) NOPROCESS"
    If rc=0 Then ima_macro=1

byp1:
/*  "CONTROL ERRORS CANCEL"                                           */
    Parse Upper VAR parm# parm1 parm2 parm3

ini1:
    Address ISREDIT
    If Wordpos(parm1,'? /? HELP /H')>0 Then Signal help
    excli=':'
    excli='<|>'
    If Substr(parm3,1,3)='NUL' Then excli=''
    Else If parm3/='' Then Do
             Select
                 When (Substr(parm3,1,1) = "'") Then,
                     excli=Substr(parm3,2,Length(parm3)-2)
                 When (Substr(parm3,1,1) = '"') Then,
                     excli=Substr(parm3,2,Length(parm3)-2)
                 Otherwise excli=parm3
             End
         End
    "(lrecl)=LRECL"
    parm1=ver_parm(parm1);If parm1='Error' Then Signal err1
    If parm1=1 Then sl='L'
    parm2=ver_parm(parm2);If parm2='Error' Then Signal err2
    If parm2=lrecl Then sl='R'

    "(status)=USER_STATE"
    "(labf)=LINENUM .ZFIRST";"(labt)=LINENUM .ZLAST"
    "PROCESS RANGE C";"(cmd)=RANGE_CMD"
    If cmd='C' Then Do
        "(labf)=LINENUM .ZFRANGE";"(labt)=LINENUM .ZLRANGE"
    End

    If parm1='' Then parm1=1
    If parm2='' Then parm2=lrecl
    If parm2/='' & parm2<parm1 Then Signal err3
    "(lvar,rvar)=BOUNDS"
    Do i=labf To labt
        "(line)=LINE &I"
        Select
            When (sl='L') Then line=excli || Substr(line,parm2+1)
            When (sl='R') Then line=Substr(line,1,parm1-1) || excli
            Otherwise Do
                p1=Substr(line,1,parm1-1)
                p2=Substr(line,parm2+1)
                line=p1 || excli || p2
            End
        End
        "LINE &I=(line)"
    End
    gc009='Columns' parm1 '-' parm2 'excluded and replaced by',
          'exclusion indicator "'excli'".'
    Signal ext1

err1:
    gc009='Start column must be numeric.'
    Signal ext1
err2:
    gc009='End column must be numeric.'
    Signal ext1
err3:
    gc009='End column must be > start.'

ext1:
    "USER_STATE=(status)"
    Address ISPEXEC "SETMSG MSG(GC009)"
    Exit

ver_parm:ARG parmx;If Datatype(parmx,'W') Then Return parmx;Else Return 'Error'

/*--------------------------------------------------------------------*/
/* Help instructions.                                                 */
/*--------------------------------------------------------------------*/
help:

noteline_1:
    n_st = mark(2)                          /* Mark next line         */
/*

   Â© Copyright 1996 ASYSTS Pty. Ltd.

   MACRO:     XV

   PURPOSE:   eXclude Vertically colums in edited/viewed member.

              NOTE:  This is a destructive macro and should only be
                     viewed or cancelled out of.

              Acceptable positional parameters:
                sc   - Starting column. Default is col 1.
                ec   - Ending column. Default is LRECL. If ending
                       column is to be specified, starting column
                       MUST be entered.
                sep  - Seperator/split indicator.
                       Default is "<|>" - 3 char position.

   *******    NOTE: CANCEL IF UNDER EDIT     **************

*/
    n_en = mark(-2)                         /* Mark prev 2 line       */

    "(caps)=CAPS";"CAPS=OFF"
    x=nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End
    x=nl('*'Copies('-',70)'*')
    "CAPS=(caps)"
    Return 0

errproc:Call Off Error;Return Sigl
nl:Parse Arg noteline;"LINE_BEFORE .ZFIRST = NOTELINE (noteline)";Return 0
Mark:Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
