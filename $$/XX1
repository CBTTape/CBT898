%headline=' Dynamic Tutorial Sample "HELPTT" '
.1. Features:
    This facility permits the building of dynamic panels in a "free form text"
    conscept as opposed to static panels.
    Pros:
     1. All tutorials in 1 member.
     2. Free form text that is dynamically modifiable/expandable without
        restriction.
     3. Option to colourise extensively, minimally or not at all. The latter
        option makes this feature a childs play.
     4. Dynamically build pointers to key poinst(word) or paragraphs (index
        numbers). Both words and index numbers make up a keyword list that can
        be used for fast tracking to that part or the tutorial.
     5. No restricted by static panel sizes and different terminal model types.
     6. Can dynamically link related tutorials and readily interface with
        "traditional" existing static tutorials (including ISPF).
     7. Attribute characters are not interspersed with data.

    Cons:
     1. All tutorials in 1 big member. Kill 1 and you've killed them all. (We do
        do backups. Don't we.)
     2. If exploited with extensive colourisation, may look congested.
     3. Requires it's own external infrastructure. (Refer below.)

    Infrastructure:
     HELPDRVR - REXX generic driver.
                Parameters accepted (variables set):
                  1. helpmemb - Dynamic text member name (defaults to HELPTT).
                  2. fastrack - Tag to fast track to on entry (defaults to
                                Index if present or 0(top of tutorial).
                                (This variable can be doctored during testing).
     HELPDRVP o Dynamic display panel
     HELPDRVS o Skeleton used to generate printable text
     HELPTT   - This tutorial text for tutorial on this feature and can be used
                as a sample template for user customisation.
     HELPTBLD o Table display panel (non colourised)
     HELPTN   o Dynamic tutorial's tutorial navigaton text.
    Members marked with the o (seperator) are optional and if not present will
    be generated by HELPDRVR (at an overhead each time the tutorial is invoked).


.1a.Defining tutorial text:
%slasha="/* .. */";s='/*';a='*/'
&   Type free format text between a block of comment controls (&SLASHA.). Avoid
&   the use of the comment characters &S. and &A. within the text. If it is
    required use the variable substitution feature described below.

    Note - Column 1 is reserved for a control character.  Also note, that column
           1 would normally be taken up by an attribute byte in an ISPF panel.

.1b.Defining colors(attribute characters):
    Once you have finished your freeform text, insert attribute lines only after
    lines that are to have text colour highlighted.

    These attribute lines are identified by a ! in column 1 and one of the
    following characters representing the character attribute immediately below
    the appropriate character. A change in attribute character will be
    replicated until the next non-blank character.  Leading spaces will default
    to the default character defined in this REXX routine by the variable
    defcol (default is b),eg. %defcol=g
    The following are valid attribute characters:

     b - blue     B - reverse blue     1 - uscore blue    a - blink blue
     g - green    G - reverse green    2 - uscore green   c - blink green
     p - pink     P - reverse pink     3 - uscore pink    d - blink pink
     r - red      F - reverse red      4 - uscore red     e - blink red
     t - turq     T - reverse turq     5 - uscore turq    f - blink turq
     w - white    W - reverse white    6 - uscore white   h - blink white
     y - yellow   Y - reverse yellow   7 - uscore yellow  i - blink yello
    Any other character will result in the following highlight ("v" was used).
    The limitation of the alphabet restricted characters for uscore and blink
    representation. However, number used are in sorted color order for uscore
    and the characters not used in normal color in alphabetic order for blink.

.1c.Sample text line and attribute line entry:

    You would enter a line as follows (the grid is provided for column placing):
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
                This is an input line with character colors bgprtwy giving:
           !g                                               bgprtwyg

    This is an input line with character colors bgprtwy giving:
    Note - After the "y" the following text's color "b" has to be re-directed
           otherwise the following will be displayed:

    This is an input line with character colors bgprtwy giving:

.1d.Instream REXX commands:
    You can also execute REXX commands built into the comments from lines
    identified by a % in column 1. That line will be INTERPRETed.
    This feature was used to dynamicaly build the index access (by code
    selection) using the instream REXX (again the grid is provided for clarity
    only):

    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
           %"TBQUERY &TABLE ROWNUM(rownum)"
           %line.tag.end=rownum;tag='1D';tagged=tagged tag;line.1d=rownum
            1d.Instream REXX commands:
    The above code queries the number of rows in the table (number of actual
    screen lines generated) so far and places it into stem variable line.1d
    which will be used to position the table at the correct row when 1D is
    entered on the command line in the tutorial.

    This same feature was used to define variable slasha which will be displayed
    as &SLASHA..
    Note - This could have been done in the REXX proper as it is a constant and
           does not need to be dynamically set.

    Word of warning. If exploited, this REXX feature can be a very powerful
    control tool but it has the potential to cream REXX variables used by the
    driver which could produce unpredictable results. Consequenlty the
    following is a list of internal variables that should be avoided in
    use in REXX % comamnds and paragraph/tag names:
        defcol  = 'b' /* Default color 'blue'                  */
        chgchar = '&' /* Variable substitution identifier      */
        rexchar = '%' /* REXX command identifier               */
        atrchar = '!' /* Attribute line identifier             */
        ignchar = '*' /* Ignore line identifier                */
        parchar = '.' /* Parameter identifier                  */
        hidchar = '#' /* Hidden tag identifier                 */
        tagchar = '?' /* Link tutorial  identifier             */
        patchar = '=' /* Change Pattern identifier             */

        cname         /* Users Christian name                  */
        sname         /* Users Surname                         */

        #hide, hidden, linked, tagged and rownum


.1e.Instream documentation:
    You can also include instream documentation in the text by a * in column 1.
    These lines will be ignored.

.2. Scrolling:
    Sample dialogue $HELPDYN demonstrates scrolling control for a dynamic panel
    making it usable on all model (screen size) terminals.
    Under Customisation Option 2(CO2) the scrolling is transparent.

.3. Invocation.
    There are basically 2 ways of invoking this dialog using a REXX command when
    the HELP PF key is entered. The method used is governed by the type of panel
    design is used. The following are thed designs and appropriate code:

.3a.Panels using action bars (with Help action):
    Use an action bar definition as per the following example. Our contribution
    is the yellow entry:
      )ABC DESC('Help') MNEM(1)
      PDC DESC('Dynamic Help') MNEM(1) ACTION
          RUN(ISRROUTE) PARM('SELECT CMD(%xxxx)')
      PDC DESC('General') MNEM(1) ACTION RUN(TUTOR) PARM(...
      )ABCINIT
      .ZVARS=....

.3b.Panels NOT using action bars:
    The invoking dialogue must be initiated by a REXX routine displaying a
    panel.
    Code the following in the REXX:
      fkeys = 'ZPF01,zpf13'
      "VGET (&FKEYS) PROFILE"
      szpf01 = zpf01
      szpf13 = zpf13
&     zpf01  = '&XCMD.'
      zpf13  = zpf01
      "VPUT (&FKEYS) PROFILE"
&     Address TSO "ALLOC F(MYHELP) DA('&CNAME..&SNAME..TUTES') SHR      REU"
      .....
      Scr1: "DISPLAY PANEL(&PANEL)"
      If rc /= 0 Then Signal exit1
&     If zcmd = '&XCMD.' Then Do
        "SELECT CMD(%xxxx)"
        Signal scr1
      End
      ....
      exit1:
      zpf01 = szpf01
      zpf13 = szpf13
      "VPUT (&FKEYS) PROFILE"
      Address TSO "FREE F(MYHELP)"
      Exit

    In both cases above xxxx above can have two formats:
      yyyy                    for CO1 or
&     &XCMD. yyyy)          for CO2 using default SYSEXEC or
&     &XCMD. ISPPLIB=yyyy)  for CO2 using ISPPLIB or
&     &XCMD. MYHELP=yyyy)   for CO2 using own allocations
    where yyyyy is the name of your dynamic tutorial member.


.4. Index usage:
    The Index conscept is an optional feature of this facility.  The index is
    realy part of the text with special options used.
    It is recommended that the Index be the last part of the text and tagged
    using the "hidden text" feature so that it does not become part of the
    normal scrollable text (refer to discussion on hidden text).
    This index feature is actually recording pointers to specifically identified
    paragraphs/lines. You then text an Index to let the user know of these fast
    path codes.
    Paragraphs can be automaticaly detected and recorded by the use of the
    paragraph identifier character in column 1 which is .(dot) by default.
    For Indexes, the hidden paragraph identifier of # is recommended. If this
    feature is used, the format must be:

    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
           #cc. Paragraph header....
    where cc is any paragraph number/1st. word (trailing dot is optional but a
    space before the description IS required.
    Do not forget to manually update the Index text. (Auto update with
    next release.) cc does not need to start in column 2.

    Individual lines can be manually Indexed (tagged) as follows:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
           ?N1
?N1
            This is a special line that is not a paragraph but should be indexed
    The above line will now be fast trackable using N1 on the command line. It
    is recommended that some reference to this be made somewhere to let the user
    know of it. Hence the Index. Go ahead, try N1 on the command line!
    Note - Index entry of 0 should not be used as it is the default top of
           tutorial as set by this routine.
    It is recommended that the following entry be added to an Index to include a
    predefined Tutorial Navigation text:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
           ?TN (HELPTN) *
                TN - Tutorial Navigation.
           !y      b
    Here it is:
?TN (HELPTN) *
     TN - Tutorial Navigation.
    Try it using TN.


.5. Special characters (in column 1):
    The following is a list of the special characters for use in column 1 and
    their affect:
          Blank. Normal text line that will be displayed after color mods.
        . Dot. Paragraph identifier. Record the line number (actually the
          previous line - 'last line before') and parse the line to extract the
          "indexing" value (between the two dots) and permit fast path using
          this indexing value. Indexing value is added to the KEYWord list.
        # Hash. Hidden paragraph identifier. Same as for the paragraph
          identifier but the lines are tagged with the "indexing" value to
          permit display of only those lines belonging to taht particular
          paragraph. Refer further to "hidden paragraphs.  Indexing value is
          added to the KEYWord list.
        ? At. Tag the line with word 1 as the keyword following the identifier.
          This tag is added to the KEYWord list. If word 2 is present, it will
          be treated as a linked turial (refer to "Linked Tutorials" below).
        ! Exclamation. Used to identify colouring masks. Should immediately
          follow the line it is to mask with the appropriate color below the
          characters.
        = Equal. Used to set/change the default colouring mask. Has the same
          affect as a ! mask without the need to repeat after each line. This
          will stay in affect and applied to all text without a following ! mask
          until a = (with the rest of the line blank) is encountered.
          Note - This mask MUST be set BEFORE the text to be affected as apposed
                 to the ! which must be after the text.
        % Percent. String of syntactically correct REXX command(s) to be
          interpreted.  Usually commands to set variables and record positions
          for lines/paragraphs and their end.
        $ Ampersand. Perform variable substitution on the line.  Replaces all
          occurences of &VARNAME. with the value of varname.
          Note - To identify a substitutable variable, it must start with an &
                 and terminate with a ..  If you actually need a dot at the end
                 after substitution double up, eg &ENDTEXT...
        * Asterisk. Instream documentation. Permits the interrnal documentation
          of the REXX driver. All lines with * in col 1 will be ignored.


.6. Linked Tutorials:
    One tutorial may need to reference another tutorial.
    This can be achieved as follows:
    1. Notate the line using the tag feature ?xx in column 1. The 2nd. word
       should identify the link and the link type. Without this it would just be
       a fast track tag.  You can pass an optional * as the 3rd. word to
       indicate stay where I am on return from the link. Without this * the
       display will be repositioned to where the tag was defined.

    2. Precede the above line with the following one of the following:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
           ?XX1 (SYSEXEC=HELPXX1) *  (for CO2    -or-   )
           ?XX2 HELPXX2              (for CO1           )
           .         XX1 - Invoke Sample tutorial #1 (using CO2) and stay.
           .         XX2 - Invoke Sample tutorial #2 (using CO1) and return.
       where XXx is the name of another dynamic tutorial.
       Note - CO2 is identified by the (.). What is between the brackets
              indicates alternative member source.
?XX1 (HELPXX1) *
.          XX1 - Invoke Sample tutorial #1 (using CO2) and stay.
?XX2  HELPXX2
.          XX2 - Invoke Sample tutorial #2 (using CO1) and return.
?XX3 (HELPXX3) *
.          XX3 - Invoke Missing tutorial #1 (using CO2) and stay.

       Go ahead go to the Index and enter XX1 or XX2 on the command line.

    You can link to a static Tutorial panel by inserting ISPF as the 3rd. word.
    If you wish to stay on return you will need the * as the 4th. word. The
    following demonstrates a link to the ISPF View/Browse tutorial:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
           ?IB1 ISR10000 ISPF
           .         IB1 - Invoke ISPF View Tutorial (Scroll)
           ?IB2 ISR10002 ISPF *   (note use of * to leave return display asis)
           .         IB2 - Invoke ISPF Browse Introduction-Tutorial (stay)
    Here they are:
?IB1 ISR10000 ISPF
       IB1 - Invoke ISPF View Tutorial (scroll)
?IB2 ISR10002 ISPF *
       IB2 - Invoke ISPF Browse-Introduction Tutorial (stay)
    Dont't forget to try both IB1 and IB2.


.C. Customisation Option (CO) - Building User defined tutorials:
    This can be achiedev by one of two ways:
    1. CO1.
       Customise member $HELPDYN. Look for the eyecatchers Customise here \|/
       and /|\ flags. All other code should be left ASIS with the exception of
       The REXX code. Note this member is self contained and contains all the
       processing infrastructure to execute the tutorial asis.
    2. CO2.
?M01
       Take a copy of member HELPTT and customise it with your desired text.
&      The customisation need to be a unique member in the &DEF#DD.
       concatenation (first hit).  To invoke it, code:

           "SELECT CMD(%HELPDRVR p1 p2)"
       where,
&          p1 - Name of your tutorial member in &DEF#DD.. Alternatively
                it can be in any DD concatenation but then it must be
                coded as follows: DDname=p1.
?C16
                Note - To use this feature there MUST not be more than 16
                       members in the DD concatenation. ISPPLIB tends to be more
&                      than &DEF#DD. so it became the dafault. Prior to invoking
                       the tutorial you may allocate any DD either temporarily
                       or permanently at logon.
                       LIBDEFs are not recognised.
           p2 - First tagged line to be displayed (optional). Default top.

       You can pre allocate the tutorial dataset in your processing dialogue as
       follows:
&          Address TSO "ALLOC F(MYHELP) DA('&CNAME..&SNAME..TUTES') SHR REU"
           Address ISPEXEC
           .......
           "SELECT CMD(%HELPDRVR HELPME=MYTUTE1)"
           .......
           Address TSO "FREE  F(MYHELP)"
           Exit

    Watch the following:
    Ca.For CO2, include a REXX set headline statement as follows:
          ~headline=' Your desired tutorial headline. '
    Cb.Use the ., # or ? features only if you need an Index or fast path.
       Note - The ? statement should be BEFORE the actual line.
    Cc.Hidden paragraphs should be contiguous at the end with the Index being
       the last hidden paragraph.
    Cd.You can change the default color dynamically by ~defcol=g. Don't forget
       to set it back. (Easier to use the = in col 1 option.)

.T. Testing:
    For CO1, modify and execute.
    For CO2, modify your member, save it and in split screen mode enter command
&   TSO &XCMD. library=yyyy on the command line where library is either your
    defined DD or defaulted and yyyy is your member name.  Modify your member
    and enter REFRESH t on the command line to refresh without exiting. t can be
    an optional fast path to text being tested. t could be tagged with the ?t
    command.
    Enter ASIS on the command line to display the tutorial in a non colorised
    display.

    During development you can fast track to your developing text by tagging the
    spot, eg. ?QM1 and at the top of the text insert a temporary REXX code
    %fastrack='QM1' which will fast track to tag identified by variable
    fastrack.

    GOTCHA:
    Ta.It is recommended that tagged text be placed at the end so as not to
       interfere with scrolling of non tagged text. This includes  any End-off
       text. (For details on hidden text, enter H on the command line - refer to
       Index).
    Tb.Tagged text may cause unpredictable results in maximum scrollings.
    Tc.While the Index is documented as selectable display that is only
       by way of design as t the end so as not to


&                     (End of instructions. Bye &CNAME..)
*
#H. Hidden text:
    For the purposes of this tutorial, hidden text will be refered to as text
    that is not presented in sequence but MUST be explicitly refered to by it's
    code. Text is not protected but rather a method of selective display as
    prompted/identified through the Index.

    This feature is redundant if Indexes are not used and may cause
    unpredictable results.

    Text may be hidden by using the # paragraph indentifier or by executing
    the following REXX commands:

      %"TBQUERY &TABLE ROWNUM(rownum)"
      %line.#hide.end=rownum;#hide=xx;line.#hide=rownum
      %hidden=hidden #hide;tagged=tagged #hide
    where xx is the tag value (in this case we would use H). The tagged variable
    variable is used to keep track of all lines tagged either explicitly
    or implicitly using ./#. The hidden variable keeps track of all the hidden
    entries only. The #hide variable is used to record the tag given.
    Note - With hidden the stem variable line.#hide.end is set to terminate
           scrolling at the end of that topic.
         - With hidden text, the next topic is not shown if the hidden topic
           does not fill the entire screen as in normal text where the full
           screen is filled with the following topic(s).

    Another method of hiding text is to tag a line passing a # (hide paragraph)
    identifier as the 2nd. word.
    This is useful when a paragraph needs to be tagged at the preamble
    preceeding it. Eg. creating an index:
    =COLS> ----+----1----+----2----+----3----+----4----+----5----+----6----+----
           ?I #                 (tag with I and hide)
           &  Hello &CNAME..
            The following is the index which can be used to fast track
            through this tutorial.
              I. Index
           !G
    This way the index paragraph conscept is maintained but I will display the
    greeting preamble.


                              (End of Hidden text)
*
#HB. Hidden text (Big):
    The following text comprises of 80 more lines to demonstrate > 1 screen
    handling. All set up using the REXX command feature.
 Do y=1 to 80;line='   Cont line #'y;linea='!'Copies('p',11)w;"TBMOD &TABLE";End
%Do y=1 to 80;line='   Cont line #'y;linea='!'Copies('p',11)w;"TBMOD &TABLE";End

&                            (End of Hide Big.)
*
* This should be the last entry.
*
* Note the index is not paragraphed but manually positioned as the
* start of the Index is before the "I.".
*
#                                  I. Index:
*  Hello &CNAME. on &TODAY..
&  Hello &CNAME..

   The following topics are presented in sequence or may be fast tracked by
   selcting from the codes below to demonstrate "index" control:

    1  - Features.
    1a - Defining tutorial text.
    1b - Defining colors(attribute characters).
    1c - Sample text line and attribute line entry.
    1d - Instream REXX commands.
    1e - Instream documentation:
    2  - Scroling.
    3  - Invocation.
    3a - Panels using action bars (with Help action).
    3b - Panels NOT using action bars.
    4  - Index usage.
    5  - Special characters (in column 1).
    6  - Linked Tutorials.
    C  - Customisation Option (CO) - Building User defined tutorials.
    T  - Testing.

   The following topics will not be presented in sequence but can be fast
   tracked by selcting from the codes below:

    I  - This Index (can use 0).
    H  - Hidden text.
    HB - Hidden text(Big).
?TN (HELPTN) *
    TN - Tutorial Navigation. (Linked tutorial 'HELPTN'.)

   Marked text:
   N1  - Marked to notate important line
   G16 - Text to display if DD concatenations is > 16.
   M01 - Text to display if tutorial member is not found and this defaulted.
   XX1 - Invoke sample CO2 tutorial. (Linked tutorial 'XX1'.)
   XX2 - Invoke sample CO1 tutorial. (Linked tutorial 'XX1'.)

                               (End of Index.)

