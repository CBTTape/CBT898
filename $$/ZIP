/******************************** REXX ********************************/
/*                                                                    */
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* If this is a package then do the following:                        */
/*   1. Enter 'F ! 1' on the command line - DO NOT HIT <ENTER>.       */
/*   2. Enter block command 'MM' on line 1 - HIT <ENTER>.             */
/*   3. Enter block command 'MM' on the line number column on the     */
/*      previous line.                                                */
/*   4. Enter 'CRE' on the command line and create member 'ZIP' in    */
/*      a dataset in either the 'SYSPROC' or 'SYSEXEC' concatenation. */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/* For further details, enter 'TSO ZIP ?' for help panels.            */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* The following members are only required to permit use of the 'L'   */
/* parameter or member list selection function:                       */
/*   REXX:                                                            */
/*     ZIPT     o Table processor                                     */
/*                                                                    */
/*   Panels:                                                          */
/*     MEMBLIST o Table display used by ZIPT exec.                    */
/*                                                                    */
/*   Tutorial panels (self generated from this routine):              */
/*     ZIPH1    - Tutorial panel (optional)                           */
/*     ZIPH2    - Tutorial panel (optional)                           */
/*     ZIPH3    - Tutorial panel (optional)                           */
/*     ZIPH4    - Tutorial panel (optional)                           */
/*     ZIPH5    - Tutorial panel (optional)                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
    ARG parm#
    If parm# ¬= "" Then Signal byp1
    Address ISPEXEC
    "ISPEXEC CONTROL ERRORS RETURN"
    "ISPEXEC ISREDIT MACRO (parm#) NOPROCESS"

byp1:
    Parse Upper VAR parm# parm#
    Parse VAR parm# parm1 parm2 parm3 parm4 parm5 parm6 parm7
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "ISPEXEC CONTROL ERRORS" cactn

ini1:
    zerrhm   = '*'
    zerralrm = 'NO'
    zerrsm   = ''

    hlq      = $alkhlq()
    dsn = hlq'.TEMP1'
    If parm1 = "?" | parm1 = "HELP" | parm1 = '/?' Then Signal help_ISPF

    "ISREDIT (status) = USER_STATE"
    "ISREDIT (caps#)  = CAPS"
    "ISREDIT CAPS = OFF"
    userid = Userid()

    Call parse_parms

    If trace = 'Y' Then Trace r

    uidstrng = 'MVS1    TSGAK        '||,
               'MVS2    TSGAK        '||,
               'EMPP    TSGAK        '||,
               'EMPD    TSGAK        '||,
               'MSPD    YZUAXK       '||,
               'PTC1    SYSSAXK      '||,
               'TSOB    TSGAK        '
    entstrng = 'TSOB    TSGAK        '

    Select
        When (listb   = 'Y') Then Call list_build
        When (addmemb = 'Y') Then Call add_memb
        When (xtract  = 'Y') Then Call x_tract
        When (verify  = 'Y') Then Call ver_PDS
        When (rebuild = 'Y') Then Call re_build
        When (ixbuild = 'Y') Then Call ix_build
        When (self    = 'Y') Then Call self_incl
        When (selfx   = 'Y') Then Call self_ext
        When (uidchg  = 'Y') Then Call change_userid
        When (uidchgb = 'Y') Then Call change_userid_body
        When (findm   = 'Y') Then Call find_member
        Otherwise NOP
    End

    "ISREDIT CAPS = (caps#)"
    "ISREDIT USER_STATE = (status)"

ext1:
    Address ISPEXEC "SETMSG MSG(ISRZ002)"
    Exit


/*--------------------------------------------------------------------*/
/* Use a member selection list to select packaged members.            */
/*--------------------------------------------------------------------*/
list_build:
    If newzip = 'Y' Then Call del_all
    "ISPEXEC CONTROL NONDISPL ENTER"
    "ISPEXEC DISPLAY PANEL(MEMBLIST)"
    If rc ¬= 0 Then Do
        zerrlm = "Missing panel 'MEMBLIST' and probably EXEC 'ZIPT',",
                "You must supply member name or get the above two",
                "members into your concatenation."
        Signal ext1
    End
    If INDEX(infile,'(') > 0 Then ,
         dsn = Substr(infile,1,Index(infile,'(')-1)_
    Else dsn = infile
    Address TSO 'ZIPT' dsn member
    If rc ¬= 0 Then Return
    "ISPEXEC VGET TABLE SHARED"
    "ISPEXEC TBTOP &TABLE"
    Do Forever
        "ISPEXEC TBSKIP &TABLE"
        If rc ¬= 0 Then Leave
        If selctd = '' Then Iterate
        infile = dsn'('member')'
        Call read_memb
        "ISREDIT F '!(Member) - ' 1 FIRST"
        If rc ¬= 0 Then w = 'LINE_AFTER 0'
        Else            w = 'LINE_BEFORE .ZCSR'
        "ISREDIT" w "= '!(I) "Copies(Substr(infile,1,37),2)"'"
        "ISREDIT LINE_AFTER .ZLAST = '!(Member) - "infile"'"
        "ISREDIT (dest) = LINENUM .ZLAST"
        Call read_stack
    END
    "ISPEXEC TBEND &TABLE"
    Return

/*--------------------------------------------------------------------*/
/* Append a single member                                             */
/*--------------------------------------------------------------------*/
add_memb:
    If newzip = 'Y' Then Call del_all
    infile = infile'('member')'
    Call read_memb
    "ISREDIT F '!(Member) - ' 1 FIRST"
    If rc ¬= 0 Then w = 'LINE_AFTER 0'
    Else            w = 'LINE_BEFORE .ZCSR'
    "ISREDIT" w "= '!(I) "Copies(Substr(infile,1,37),2)"'"
    "ISREDIT LINE_AFTER .ZLAST = '!(Member) - "infile"'"
    "ISREDIT (dest) = LINENUM .ZLAST"
    Call read_stack
    Return

/*--------------------------------------------------------------------*/
/* Add the packager 'ZIP' to the front of the member for unpackaging  */
/* (eXtraction) at the destination                                    */
/*--------------------------------------------------------------------*/
self_incl:
    infile = hlq".REXX(ZIP)"
    Call read_memb
    dest = 0
    Call read_stack
    Return

/*--------------------------------------------------------------------*/
/* Extract self copy from start                                       */
/*--------------------------------------------------------------------*/
self_ext:
    "ISREDIT F '!(I) ' 1 FIRST"
    "ISREDIT (last) = LINENUM .ZCSR"
    If last > 1 Then Do
        last = last - 1
        "ISREDIT CURSOR = &LAST 0"
        "ISREDIT DEL .ZFIRST .ZCSR"
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Re-build the package from the index portion                        */
/*--------------------------------------------------------------------*/
re_build:
    "ISREDIT RESET"
    "ISREDIT F '!(Member) - ' 1 FIRST"
    If rc = 0 Then Do
        "ISREDIT DEL ALL NX .ZCSR .ZLAST"
        "ISREDIT DEL ALL X  .ZCSR .ZLAST"
        "ISREDIT (last) = LINENUM .ZLAST"
    End
    Else Do
        "ISREDIT F '!(I) ' 1 LAST"
        If rc = 0 Then Do
            "ISREDIT DEL ALL NX .ZCSR .ZLAST"
            "ISREDIT DEL ALL X  .ZCSR .ZLAST"
            "ISREDIT (last) = LINENUM .ZLAST"
        End
    End
    Do j=1 To last
        "ISREDIT (line) = LINE &J"
        Parse VAR line v1 infile outfile .
        Call read_memb
        "ISREDIT LINE_AFTER .ZLAST = '!(Member) - "infile"'"
        "ISREDIT (dest) = LINENUM .ZLAST"
        Call read_stack
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Re-build the index from the members                                */
/*--------------------------------------------------------------------*/
ix_build:
    "ISREDIT RESET"
    "ISREDIT X '!(I) ' 1 ALL"
    "ISREDIT DEL ALL X"
    "ISREDIT CURSOR = 1 0"
    i = 0
    Do Forever
        "ISREDIT F '!(Member) - ' 1"
        If rc ¬= 0 Then Leave
        "ISREDIT (line) = LINE .ZCSR"
        Parse VAR line v1 v2 infile .
        i = i + 1
        line.i = "!(I) "Copies(Substr(infile,1,37),2)
    End
    Do Forever
        If i = 0 Then Leave
        "ISREDIT LINE_BEFORE .ZFIRST = '"line.i"'"
        i = i - 1
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Verify destination datasets                                        */
/*--------------------------------------------------------------------*/
ver_PDS:
    "ISREDIT RESET"
    "ISREDIT F '!(Member) - ' 1 FIRST"
    "ISREDIT (x) = LINENUM .ZCSR"
    last = x-1
    Do j=1 To last
        "ISREDIT (line) = LINE &J"
        Parse VAR line v1 infile outfile .
        outfile = Substr(outfile,1,INDEX(outfile,'(')-1)
        If SYSDSN("'"outfile"'") ¬= 'OK' Then Do
            zerrlm = "Destination '"outfile"' not found."
            ISPEXEC "SETMSG MSG(ISRZ002)"
            "ISREDIT FIND &OUTFILE 30 80 FIRST"
            Exit
        End
    End
    Return 0

/*--------------------------------------------------------------------*/
/* extrac the members and place in datasets as per index (2nd DSN)    */
/*--------------------------------------------------------------------*/
X_tract:
    Call find_range
    Do j=labf To labt
        "ISREDIT (line) = LINE &J"
        Parse VAR line v1 infile outfile .
        If overw = 'N' Then Do
            If SYSDSN("'"outfile"'") = 'OK' Then Do
               zerrlm = "Existing members found and were not replaced."
               "ISPEXEC SETMSG MSG(ISRZ002)"
               Iterate
            End
        End
        If existo = 'Y' Then ,
            If SYSDSN("'"outfile"'") ¬= 'OK' Then Iterate
        "ISREDIT F '!(Member) - "infile"' 1 FIRST"
        If rc ¬= 0 Then Do
            zerrlm = "Error extracting '"infile"'."
            Signal ext1
        End
        "ISREDIT (labf) = LINENUM .ZCSR"
        labf = labf + 1
        "ISREDIT F '!(Member) - ' 1 NEXT"
        If rc = 0 Then Do
            "ISREDIT (labt) = LINENUM .ZCSR"
            labt = labt - 1
        End
        Else "ISREDIT (labt) = LINENUM .ZLAST"
        zerrlm = "Extracting '"infile"'."
        "ISPEXEC SETMSG MSG(ISRZ002)"
        "ISPEXEC CONTROL DISPLAY LOCK"
        "ISPEXEC DISPLAY"
        zerrlm = ""
        Call bld_stack
        Call write_memb
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Change userid to curent userid index portion                       */
/*--------------------------------------------------------------------*/
change_userid:
    Call find_range
    Do j=labf To labt
        "ISREDIT (line) = LINE &J"
        "ISREDIT CURSOR = &J 0"
        Parse VAR line v1 infile outfile .
        If nhlq = '~' Then,
            "ISREDIT C &INFILE &OUTFILE ALL"
        Else Do
            Parse VAR outfile hlq '.' .
            "ISREDIT C &HLQ &nhlq 40 80 .ZCSR .ZCSR"
        End
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Change userid to curent userid in body                             */
/*--------------------------------------------------------------------*/
change_userid_body:
    "ISREDIT RESET"
    "ISREDIT X '!' 1 ALL"

    If altuid = '' Then Do
        sl   = Length(uidstrng)
        il   = Length(entstrng)
        chg# = 0

        Do i=1 By 16 Until i>sl
            altuid = Strip(Substr(uidstrng,i+8,il-8))
            "ISREDIT CURSOR = 1 0"
            "ISREDIT FIND" altuid nx
            If rc ¬= 0 Then Iterate
            "ISREDIT CHANGE "altuid userid" ALL NX"
            "ISREDIT (chg#) = CHANGE_COUNTS"
            Leave
        End
    End
    Else Do
        "ISREDIT CHANGE "altuid userid" ALL" nx
        "ISREDIT (chg#) = CHANGE_COUNTS"
    End
    "ISREDIT USER_STATE = (status)"
    chg# = chg# + 0
    zerrlm = chg# "occurences changed from '"altuid"' to '"userid"'."
    "ISPEXEC SETMSG MSG(ISRZ002)"
    Return 0

/*--------------------------------------------------------------------*/
/* Find a member from the index                                       */
/*--------------------------------------------------------------------*/
find_member:
    Call find_range
    "ISREDIT (line) = LINE &LABF"
    Parse VAR line v1 infile outfile .
    "ISREDIT F '!(Member) -" infile "'"
    "ISREDIT DOWN CURSOR"
    "ISREDIT (status) = USER_STATE"
    Return 0

/*--------------------------------------------------------------------*/
/* Read member and place in REXX Q.                                   */
/* If file allocation fails and create dataset switch used, create    */
/* dataset if it doesn't exist.                                       */
/*--------------------------------------------------------------------*/
read_memb:
    dd = "$D"SUBSTR(TIME(),1,2)||,
             SUBSTR(TIME(),4,2)||,
             SUBSTR(TIME(),7,2)
    x = MSG(Off)
    Address TSO "ALLOC F("dd") DA('"infile"') SHR REU"
    rc1 = rc
    If rc1 ¬= 0 Then Do
        zerrlm  = "Allocation of '"infile"' failed, rc="rc1"."
        Signal ext1
    End

    Address TSO "NEWSTACK"
    Address TSO "EXECIO * DISKR "dd" (STEM line. FINIS)"
    rc1 = rc
    Address TSO "FREE F("dd")"
    If rc1 ¬= 0 Then Do
        zerrlm = "Error reading '"infile"'."
        Signal ext1
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Write member from REXX Q                                           */
/*--------------------------------------------------------------------*/
write_memb:
    Queue ""                                /* Dummy last             */
    dd = "$D"SUBSTR(TIME(),1,2)||,
             SUBSTR(TIME(),4,2)||,
             SUBSTR(TIME(),7,2)
    x = MSG(Off)
    Address TSO "ALLOC F("dd") DA('"outfile"') SHR REU"
    rc1 = rc
/*--------------------------------------------------------------------*/
    If rc1 ¬= 0 Then Do
        If credsn = 'Y' Then Do
            rc1 = LISTDSI("'"infile"'")
            If rc1 ¬= 0 Then Do
                infilep = Substr(infile,1,Index(infile,'('))
                "ISREDIT F '!(Member) - "infilep"' 1 FIRST"
                "ISREDIT (#mem) = LINENUM .ZCSR"
                "ISREDIT F '!(Member) - "infilep"' 1 LAST"
                "ISREDIT F '!(Member) - ' NEXT"
                If rc = 0 Then "ISREDIT (#lin) = LINENUM .ZCSR"
                Else           "ISREDIT (#lin) = LINENUM .ZLAST"
                "ISREDIT (lrecl) = LRECL"
                "ISREDIT (thisdsn) = DATASET"
                dir  = (#mem % 7) +3
                prim = ((((#lin*80)%23476)%2)*120)%100
                sec  = (prim%10)+1
                x = LISTDSI("'"thisdsn"'")
                Parse Var sysrecfm 1 v1 +1 v2 +1 v3 .
                sysrecfm = Strip(v1 v2 v3)
                Address TSO "ALLOC F("dd") DA('"outfile"') NEW CATALOG",
                   "SPACE("prim sec") DIR("dir") RECFM("sysrecfm")",
                   "LRECL("lrecl") BLKSIZE(0)",
                   "TRACKS UNIT(SYSALLDA) DSORG(PO)"
                rc1 = rc
            End
        End
        If rc1 ¬= 0 Then Do
            Address TSO "DELSTACK"
            zerrlm  = "Allocation of '"outfile"' failed, rc="rc1"."
            Signal ext1
        End
    End
/*--------------------------------------------------------------------*/

    Address TSO "EXECIO * DISKW "dd" (FINIS"
    rc1 = rc
    Address TSO "DELSTACK"
    If rc1 = 1 Then rc1 = 0                 /* Data truncated         */
    Address TSO "FREE F("dd")"

    Return 0

/*--------------------------------------------------------------------*/
/* Finde the processing line range                                    */
/*--------------------------------------------------------------------*/
find_range:
    "ISREDIT PROCESS RANGE C"
    "ISREDIT (cmd) = RANGE_CMD"
    If cmd = 'C' Then Do
        "ISREDIT (labf) = LINENUM .ZFRANGE"
        "ISREDIT (labt) = LINENUM .ZLRANGE"
        "ISREDIT (line1) = LINE .ZFRANGE"
        "ISREDIT (line2) = LINE .ZLRANGE"
        If Substr(line1,1,1) ¬= '!' | Substr(line2,1,1) ¬= '!' Then Do
            zerrlm = "Copy lines do not appear to be from the 'index'."
            Signal ext1
        End
    End
    Else Do
        "ISREDIT (labf) = LINENUM .F"
        If rc = 0 Then Do
            "ISREDIT (labt) = LINENUM .T"
            If rc ¬= 0 Then,
                "ISREDIT (labt) = LINENUM .ZLAST"
        End
        Else Do
            "ISREDIT F '!(Member) - ' 1 FIRST"
            "ISREDIT (last) = LINENUM .ZCSR"
            labf = 1
            labt = last - 1
        End
    End
    Return 0

/*--------------------------------------------------------------------*/
/* REad data from REXX Q and place at end of file                     */
/*--------------------------------------------------------------------*/
read_stack:
    "ISREDIT (cap#) = CAPS"
    "ISREDIT CAPS = OFF"

    ADDRESS TSO
    "NEWSTACK"
    Trace Off

    DO i=1 TO line.0
        linex = line.i
        If trace = 'Y' Then Say linex
        Address ISPEXEC ,
         "ISREDIT LINE_AFTER "dest+i-1" = (linex)"
    END

    If trace = 'Y' Then Trace r
    Address TSO "DELSTACK"
/*  "ISREDIT CAPS = (cap#)"                                           */
    Return 0

/*--------------------------------------------------------------------*/
/* Builf REXX Q for exporting to destination                          */
/*--------------------------------------------------------------------*/
bld_stack:
    ADDRESS TSO
    "NEWSTACK"
    Trace Off

    Do i=labf to labt
        Address ISPEXEC "ISREDIT (line) = LINE &I"
        If all ¬= 'ALL' Then Do
            Address ISPEXEC "ISREDIT (xstat) = XSTATUS &I"
            If xstat = "X"  & all = "NX" Then Iterate
            If xstat = "NX" & all = "X" Then Iterate
        End
        Queue line
    End
    Return 0

/*--------------------------------------------------------------------*/
/* Delete all lines                                                   */
/*--------------------------------------------------------------------*/
del_all:
    "ISREDIT DEL ALL NX"
    "ISREDIT DEL ALL X"
    Return 0

/*--------------------------------------------------------------------*/
/* Test for output class other than 'A'                               */
/*--------------------------------------------------------------------*/
parse_parms:

    xtract  = "N"
    verify  = "N"
    uidchg  = "N"
    uidchgb = "N"
    altuid  = ''

    existo  = "N"

    trace   = parse_cons('TRACE',,,2)
    rebuild = parse_cons('/R')
    ixbuild = parse_cons('/I')
    addmemb = parse_cons('/A')
    self    = parse_cons('/S')
    listb   = parse_cons('/L')
    overw   = parse_cons('/O')
    verify  = parse_cons('/V')
    findm   = parse_cons('/F')
    credsn  = parse_cons('/C')
    newzip  = parse_cons('/N')

    selfx   = parse_cons('/SX')
    If selfx = 'N' Then selfx = parse_cons('/XS')

    xtract  = parse_cons('/X')
    If xtract = 'Y' Then overw = 'N'

    existo  = parse_cons('/E')
    If existo = 'Y' Then overw = 'Y'

    uidchgb = parse_varb('/UB')             /* Process before '/U'    */
    If uidchgb /= 'N' Then Do
        If Substr(uidnhgb,1,1) /= '=' Then altuid = ''
        Else Do
            Parse VAR uidchgb . '=' altuid '/' userid
            If userid = '' Then userid = Userid()
        End
        uidchgb = 'Y'
    End

    uidchg = parse_varb('/U')               /* Process AFTER '/UB'    */
    If uidchg /= 'N' Then Do
        Select
            When (Substr(uidchg,1,1) = 'S') Then nhlq = '~'
            When (Substr(uidchg,1,1) = '=') Then
                Parse VAR uidchg . '=' nhlq .
            Otherwise                       nhlq = Userid()
        End
        uidchg = 'Y'
    End

/*--------------------------------------------------------------------*/
/* Undefined '/' parameter                                            */
/*--------------------------------------------------------------------*/
    xx = parse_varb('/')
    If xx /= 'N' Then Do
        zerrlm = "Invalid '/"xx"' parameter."
        Signal ext1
    End

/*--------------------------------------------------------------------*/
/* Last paramater assumed member or DSN(Member)                       */
/*--------------------------------------------------------------------*/
    Parse VAR parm# parm1 .
    If parm1 /= '' Then Do
        If Substr(parm1,1,1) = '*' Then Do
            "ISREDIT (p1) = DATASET"
            If parm2 = '' Then parm1 = "'"p1"'"
            Else               parm1 = "'"p1"("parm2")'"
            parm2 = ''
        End

        If SUBSTR(parm1,1,1) = "'" Then ,
             infile = SUBSTR(parm1,2,LENGTH(parm1)-2)
        Else infile = hlq"."parm1

        lb = Index(infile,'(')
        If lb  > 0 Then Do
            member = Substr(infile,lb+1,Length(infile)-(lb+1))
            infile = Substr(infile,1,lb-1)
        End
        Else member = ''
        If parm2 ¬= '' Then member = parm2
        If member = '' | Index(member,'*') > 0 Then Do
            listb   = 'Y'
            tfile   = infile
        End
        Else Do
            addmemb = 'Y'
            tfile   = infile'('member')'
        End

        If sysdsn("'"tfile"'") ¬= 'OK' Then Do
            zerrlm = sysdsn("'"tfile"'")"."
            "SETMSG MSG(ISRZ002)"
            Signal ext1
        End
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to 'Y' if found. Can pass positive/negative result    */
/* substitution as the 2 and 3 parameter. Defaults are Y and N.       */
/* Can set null return value for either by passing 'NULL'. Can set    */
/* either to the original mask by entering '*' (suggest 'NULL' for the*/
/* other value).                                                      */
/* Can pass a mask length as fourth parameter. Comma delimit to pad   */
/* out if prior parameters are not supplied.                          */
/* Can pass 'WORD' as fourth parameter to return the word that        */
/* contain that mask.                                                 */
/*--------------------------------------------------------------------*/
parse_cons: Procedure Expose parm#
    Arg mask,posr,negr,maskl
    If posr = ''     Then posr = 'Y'
    If negr = ''     Then negr = 'N'
    If posr = 'NULL' Then posr = ''
    If negr = 'NULL' Then negr = ''
    If posr = '*'    Then posr = mask
    If negr = '*'    Then negr = mask
    Select
        When (maskl = 'WORD') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Index(x_x,mask) > 0 Then Do
                    y# = i
                    posr = x_x
                    Leave
                End
            End
        End
        When (Datatype(maskl) = 'NUM') Then Do
            y#  = 0
            xxx = parm#
            Do i=1 To Words(xxx)
                Parse VAR xxx x_x xxx
                If Substr(x_x,1,maskl) = Substr(mask,1,maskl) Then Do
                    y# = i
                    Leave
                End
            End
        End
        Otherwise y# = Wordpos(mask,parm#)
    End

    If y# > 0 Then Do
        parm# = Delword(parm#,y#,1)
        Return posr
    End
    Return negr

/*--------------------------------------------------------------------*/
/* Parse string 'parm#' with 'mask'. Result set to 'N' if mask not    */
/* found or set to next space delimeted value immediately following   */
/* the mask (NULLs is a valid value).                                 */
/* Can pass positive/negative result substitution as the 2 parameter. */
/* Can pass 'NUM' as third parameter to check for numerics and return */
/* negative result if not numeric.                                    */
/*--------------------------------------------------------------------*/
parse_varb: Procedure Expose parm#
    Arg mask,negr,dt
    If negr = '' Then negr = 'N'
    parm## = ' 'parm#
    m#     = ' 'mask
    y# = Index(parm##,m#)
    If y# > 0 Then Do
        If Substr(parm##,y#+Length(m#),1) = '' Then Do
            px = ''
            data = "Parse VAR parm## p1 '"m#"' p2"
        End
        Else data = "Parse VAR parm## p1 '"m#"' px p2"
        Interpret data
        parm# = Strip(p1) Strip(p2)
        If dt = 'NUM' & Datatype(px) /= 'NUM' Then Return negr
        Else                                       Return px
    End
    Return negr

Help_ISPF:
    mempref   = 'HZIP'
    forchar.0 = 2
    chgchar.0 = '`'
    forchar.1 = '`'
    subchar.1 = mempref
    forchar.2 = '~'
    subchar.2 = '/'
    #panel1   = 1                           /* First panel number     */
    #panels   = 5                           /* Number of panels       */

    x   = Msg('Off')
    Address TSO
    "DELETE '"dsn"'"
    dd  = 'IA'Time('s')
    "ALLOC DA('"dsn"') NEW CATALOG CYL SPACE(10,2)",
       "DSORG(PO) LRECL(80) BLKSIZE(0) UNIT(SYSALLDA) DIR(2)",
       "RECFM(F B) REU"
    "FREE  DA('"dsn"')"

    Do i=#panel1 To #panels
        member = mempref||i
        Interpret "Call make_mem_"i
        Call build_queue
    End


    Address ISPEXEC
    "LIBDEF ISPPLIB DATASET ID('&DSN') STACK"
    "SELECT PGM(ISPTUTOR) PARM(&MEMPREF.1)"
    "LIBDEF ISPPLIB"

    Address TSO "DELETE '"dsn"'"

    Exit


/*--------------------------------------------------------------------*/
/* Populate the queue from the source lines                           */
/*--------------------------------------------------------------------*/
build_queue:
    "NEWSTACK"

    #i_backup = i
    #j_backup = j
    Do i=n_st To n_en
        If forchar.0 > 0 Then Do
            If Substr(Sourceline(i),1,1) = chgchar.0 Then Do
                line = Substr(Sourceline(i),2)
                DO j=1 To forchar.0
                    line = $cstring(line,forchar.j,subchar.j)
                End
                Queue line
            End
            Else Queue Sourceline(i)
        End
        Else Queue Sourceline(i)
    End
    Queue ''
    i = #i_backup
    j = #j_backup

    "ALLOC F("dd") DA('"dsn"("member")') SHR REU"
    "EXECIO * DISKW "dd" (FINIS"
    "FREE  F("dd")"
    "DELSTACK"

    Return 0

Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

/*--------------------------------------------------------------------*/
/* Change string                                                      */
/*--------------------------------------------------------------------*/
$cstring:
    PArse ARG string,fstrg,tstrg,start,rep
    Numeric Digits 10
    If rep = '*' Then rep = 9999999999
    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 1
    If Datatype(start) /= 'NUM' | Index(start,'.') > 0 Then start = 1
    fl = Length(fstrg)
    tl = Length(tstrg)
    Do While rep > 0
        start = Index(string,fstrg,start)
        If start = 0 Then Leave
        string = Delstr(string,start,fl)
        string = Insert(tstrg,string,start-1,tl)
        rep = rep -1
        start = start + tl
    End
    Return string

/*--------------------------------------------------------------------*/
/* Create member "CONFH1" from sourcelines between the '/* */'        */
/*--------------------------------------------------------------------*/
make_mem_1: n_st = mark(1);/*
)ATTR
   @  TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(\\)
@Tutorial-----\-\ Object Packager \-\(1/5)Tutorial
%COMMAND%===>_ZCMD
%
+The function of this routine is to package multiple members, from various
+datasets into one member for transferring to another system using PC
+download/upload facilities. The routine can then be used at the destination to
+seperate the members into their respective datasets.
+
+The following are the valid parameters:
@  member+- Dataset(Member) name. If not quoted, your userid will prefix the
+           name. You may use@*(member)+to signify from the current dataset.
@  PDS   +- Dataset name. If not quoted, your userid will prefix the name. You
+           may use@*+to signify current dataset. This option will present a
+           selection list. (Covered in more detail later on.)
@  /C    +- Create destination PDS if it doesn't exist. Used with the@X+option.
@  /E    +- Overwrite existing member only. Used with the@X+option.
+           (Ignores new members.)
@  /I    +- Rebuild Index. Uses the member name lines.
@  /L    +- Build package from member List. Requires REXX EXEC@ZIPT+and panel
@           MEMBLIST+.
@  /N    +- New package. Delete existing lines.
@  /O    +- Overwrite existing member. Only used with the@X+option.
@  /R    +- Rebuild package. Uses the Index part at the start.
+\ \(Continued next screen.)\ \
)REINIT
)PROC
` &ZUP   = `1
` &ZCONT = `2
)END
*/;n_en = mark(-1);Return 0

make_mem_2: n_st = mark(1);/*
)ATTR
   @  TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(\\)
@Tutorial-----\-\ Object Packager \-\(2/5)Tutorial
%COMMAND%===>_ZCMD
%
+Valid parameters (cont'd):
@  /R    +- Rebuild package. Uses the Index part at the start.
@  /S    +- Include a copy of this macro at the start of the package to be used
+           to segregate the members on the receiving system.
@  /U{=hlq}
+         - Change the@hlq+of output dataset name in the@index+, to the your
+           userid.  If you wish to use another hlq, add@=newhlq+immediately
+           after the switch, ie.@/U=SYS3+.
+           You may use the@C+or block@CC+line commands in the@index+to
+           selectively change hlqs.
@  /UB{=ouid/nuid}
+         - Change the old userid@ouid+to the new userid@nuid+in the body (not
+           index) of the member.@nuid+is the default userid on the system.
+           Use@/+to seperate the to values. If no@ouid+is supplied, code as
@           /UB=/nuid+.
@  /US   +- Make the source the same as the destination (in the Index part).
@  /V    +- Verify destination datasets.
+
+\ \(Continued next screen.)\ \
)REINIT
)PROC
` &ZUP   = `1
` &ZCONT = `3
)END
*/;n_en = mark(-1);Return 0

make_mem_3: n_st = mark(1);/*
)ATTR
   @  TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(\\)
@Tutorial-----\-\ Object Packager \-\(2/5)Tutorial
%COMMAND%===>_ZCMD
%
+Valid parameters (cont'd):
@  /X    +- Extract members from the packaging and distribute as defined in the
+           index as per the 2nd. parameter.  Consequently this should be
+           modified to reflect the valid destination.
+           You may use the@C+or block@CC+line commands in the@index+to
+           selectively extract.
@  /XS|SX+- Extract (delete) the self part of ZIP.
+
+If no member is specified, a member selection list is presented. For this
+option you will need access to EXEC@ZIPT+and panel@MEMBLIST+.
+
+
+\ \(Continued next screen.)\ \
)REINIT
)PROC
` &ZUP   = `2
` &ZCONT = `4
)END
*/;n_en = mark(-1);Return 0

make_mem_4: n_st = mark(1);/*
)ATTR
   @  TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(\\)
@Tutorial-----\-\ Object Packager \-\(3/5)Tutorial
%COMMAND%===>_ZCMD
%
+The following are valid selections:
@  B     +- Browse member.
@  D     +- Delete table entry (does not delete member).
@  E     +- Edit member.
@  S     +- Select member for packaging
@  X|U   +- Un-select selected member
+
+
+Valid commands:
@  ALL   +- Select all.
@  CAN   +- Cancell member list selection.
@  D=date+- Slect all members with date equal to (formay yy/mm/dd)
@  D>date+- Slect all members with date greater than (formay yy/mm/dd)
@  D<date+- Slect all members with date less than (formay yy/mm/dd)
@  L memb+- Locate member.
@  SORT p+- Sort the member list. The following are valid@p+parameters:
@           CHANGED+- data member changed in descending sequence.
@           ID     +- userid.
@           blank  +- member name.
+
+\ \(Continued next screen.)\ \
)REINIT
)PROC
` &ZUP   = `3
` &ZCONT = `5
)END
*/;n_en = mark(-1);Return 0

make_mem_5: n_st = mark(1);/*
)ATTR
   @  TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)
)BODY EXPAND(\\)
@Tutorial-----\-\ Object Packager \-\(5/5)Tutorial
%COMMAND%===>_ZCMD
%
+
+Valid commands (cont'd):
@  TAG   +- Look for existing members in package and tag with the next parameter
+           if passed or by@<--<+by default.
@  U=user+- Select all members with Userid of@user+.
+
%Note+- Date will be as displayed in table. If you edit/update using the@E
+       option, the changed date will not be reflected in the table without a
+       rebuild.
+
+
+
+
+\ \(End of instructions.)\ \
)REINIT
)PROC
` &ZUP   = `4
` &ZCONT = `1
)END
*/;n_en = mark(-1);Return 0
