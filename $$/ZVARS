/******************************** REXX ********************************/
/**********************************************************************/
/* TRACE r                                                            */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* ZVARS:                                                             */
/* This is a routine to calculate the number of ZVARS in an ISPF panel*/
/* and generate/replace a ".ZVARS" entry in the panel's ")INIT"       */
/* section.                                                           */
/*                                                                    */
/*--------------------------------------------------------------------*/
    "ISREDIT MACRO (parm#)"

ini1:
    "ISREDIT (status) = USER_STATE"
    Address ISPEXEC
    erract = 'CANCEL'
    erract = 'RETURN'
    "ISPEXEC CONTROL ERRORS" erract

ini2:
    Parse Upper VAR parm# parm1 parm2 parm3
    If parm1 = '?' Then Signal build_help_noteline

    If parm1 = '/R' Then replace = 'Y'

    zerrhm   = '*'
    zerralrm = 'NO'
    zerrsm   = ''
/*  zvarp    = 'FIELDZ'                                               */
    zvarp    = 'S4Z'
/*--------------------------------------------------------------------*/
    attr# = 0
    body# = 0
    init# = 0
    "ISREDIT FIND ')ATTR ' FIRST"
    If rc = 0 Then "ISREDIT (attr#) = LINENUM .ZCSR"
    "ISREDIT FIND ')BODY ' FIRST"
    If rc = 0 Then Do
        "ISREDIT (body#) = LINENUM .ZCSR"
        "ISREDIT (line)  = LINE .ZCSR"
        Parse VAR line 'EXPAND(' exp ')'
        exp = Substr(exp,1,1)
    End
    "ISREDIT FIND ')INIT ' FIRST"
    If rc /= 0 Then Do
        gc009 = 'Must have ")INIT" sction for ZVARS.'
        Signal erx1
    End
    "ISREDIT (init#) = LINENUM .ZCSR"

    atrb = '%+_'
    atrt = 'TTI'
    If attr# = 0 Then Signal find_zvars
    "ISREDIT (line) = LINE" attr#
    Parse VAR line . 'DEFAULT(' ab ')' .
    If ab /= '' Then atrb = Substr(ab,1,1) ||,
                            Substr(ab,2,1) ||,
                            Substr(ab,3,1)
    If attr#+1 >= body# Then Signal find_zvars
/*--------------------------------------------------------------------*/
/* Get all user defined attributes if they exist.                     */
/*--------------------------------------------------------------------*/
    Do i=attr#+1 To body#-1
        "ISREDIT (line) = LINE" i
        line = Translate(line)
        Parse VAR line ab .
        If ab = '/*' Then Iterate
        Parse VAR line . 'TYPE(' tp ')' .
        If tp = ''    Then tp = 'TEXT'
        ap = Index(atrb,ab)
        If ap = 0 Then Do
            atrb = atrb || ab
            atrt = atrt || Substr(tp,1,1)
        End
        Else  atrt = Overlay(Substr(tp,1,1),atrt,ap)
    End
find_zvars:
/*--------------------------------------------------------------------*/
/* Locate existing .ZVARS and build new string                        */
/*--------------------------------------------------------------------*/
    lin#z = init# +1
    #zvars = ''
    If init# > 0 Then Do
        "ISREDIT CURSOR = 1 0"
        Do Forever
            "ISREDIT FIND '.ZVARS'"
            If rc /= 0 Then Leave
            "ISREDIT (lin#z) = LINENUM .ZCSR"
            "ISREDIT LABEL .ZCSR = .STAZV"
            If lin#z > init# Then Leave
        End
        If rc = 0 Then Do
            "ISREDIT (line) = LINE .ZCSR"
            lin# = lin#z
            Do Forever
                #zvars = #zvars Strip(line)
                zl = Length(#zvars)
                If Substr(#zvars,zl,1) = "'" Then Leave
                If Substr(#zvars,zl,1) = "+" Then #zvars =,
                   Substr(#zvars,1,zl-1)
                lin# = lin# +1
                "ISREDIT (line) = LINE" lin#
            End
            "ISREDIT LABEL" lin# "= .ENDZV"
        End
    End
    zvars = ''
    zi = 1
    Do i=body#+1 To init#-1
        "ISREDIT (line) = LINE" i
        j = 0
        k = 1
        Do Forever
            If k > 80 Then Leave
            j = k
            j = Verify(line,atrb,'M',j)
            If j = 0 Then Leave
            atr = Substr(line,j,1)
            tp  = Index(atrb,atr)
            ab  = Substr(atrt,tp,1)
            k = Verify(line,atrb,'M',j +1)
            If k = 0 Then Do
                k = 81
                If p_ab = '' Then Leave
            End
            If ab = 'T' Then Iterate
            var = Substr(line,j+1,k-j-1)
            If Strip(var) = 'Z' Then Do
                zvars = zvars 'ZV#'Right(i-(body#),2,'0')Right(j,2,'0')
            End
        End
    End

    If #zvars /= '' Then Do
        "ISREDIT DELETE ALL NX .STAZV .ENDZV"
        #zvars = Translate(Strip(#zvars),' ',',')
    End
    If zvars /= '' Then Do
        If replace /= 'Y' Then Do
            Parse var #zvars '(' #zvars ')' .
            @zvars = Strip(zvars)
            nn = Words(@zvars)
            no = Words(#zvars)
            If nn > no Then loop# = nn
            Else            loop# = no
            zvars = ''
            Do loop#
                Parse VAR @zvars zn @zvars
                Parse VAR #zvars zo #zvars
                If zo = '' Then zvars = zvars zn
                Else            zvars = zvars zo
            End
        End
        zvars = Strip(zvars)
        zvars = Translate(Strip(zvars),',',' ')
        zvars = ".ZVARS = '("Strip(zvars)")'"
        lin# = init#
        Do Forever
            Parse VAR zvars line 62 xtra ',' zvars
            If zvars = '' Then Leave
            line = line || xtra', +'
            "ISREDIT LINE_AFTER" lin# "= (line)"
            lin# = lin# +1
            zvars = "           "zvars
        End
        line = line || xtra
        "ISREDIT LINE_AFTER" lin# "= (line)"
        lin# = lin# +1
    End

erx1:
    "ISPEXEC SETMSG MSG(GC009)"

ext1:
    "ISREDIT USER_STATE = (Status)"
    Exit

build_help_noteline:
    x_msg = Msg()
    x     = Msg('Off')
    Trace o
    Call On Error Name errproc;get_me_this_line_number;n_st = sigl +2
/*

   ZVARS macro is used to generate/maintain a list of ZVARS for an
   ISPF panel.  It will ensure that you never get a unmatched ZVAR
   condition when trying to test/display a panel.

   The macro will look for an existing ".ZVAR" entry and after
   accumulating the ZVARS in the panel body reconcile with the
   original and write the new definition immediately after the
   ")INIT" statement.

   If the original is longer than it will truncate. If it is longer
   it will append the missing variable names.  The generated
   variable will be of the format:
       "Fn"  where:
              F   - Literal identifying Field.
              n   - numeric digit starting from 1.
   Eg. If the original ZVARS equate had 9 fields and 3 new ones have
       been detected in the body (ie. 12 Z place holders), fields
       F10 F11 and F12 will be appended to the existing list.

   You can force replacement rather than the above adjustment with
   the "/R" parameter. However, watch this option as meaingfull ZVAR
   names may be replaced by grid references.  For further details see
   the GOTCHAS below.

   This is a handy tool when creating ISPF panels for BMS map
   generation especially when the "namegen" feature is used. (For
   more derails on this execute BFI ?.)

   GOTCHAS:
    1. Name generated bears no resemblance to actual variable name.
       Use only for .ZVAR generation and placeholder substitution.
    2. If number of ZVARS decreases, may affect cursor positioning.
    3. As the names generated reflect screen positioning missing
       variables added in may cause field name duplication. To avoid
       this use the "/R" parameter which will replace the ".ZVARS"
       list from scratch.

   Parameters:
     ?      - How the hell do you reckon you got here.
     /R     - Replace rather than adjust the ZVARS name list.

*/
    Call On Error Name errproc;get_me_this_line_number;n_en = sigl -2
    Trace
    x = Msg(x_msg)
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        x = nl('*'Substr(Sourceline(i),1,70)'*')
    End
    x = nl('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"
    Return 0

nl:
    Parse Arg noteline
    "ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (noteline)"
    Return 0

errproc:
    Call Off Error
    Return Sigl

