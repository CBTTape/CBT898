***********************************************************************
** CROSS MEMORY ACCESS FACILITY.                                     **
** READ REXX VARIABLES SYSAUTH.ASID, ADDR, LENG AND VALIDATE.        **
** XMS TO READ DATA.                                                 **
** WRITE REXX VARIABLE XMEMSTOR.                                     **
***********************************************************************
         TITLE 'CROSS MEMORY ACCESS ROUTINE'
         LCLC  &MODULE
&MODULE  SETC  'XMEMSTOR'
&MODULE  CSECT
&MODULE  AMODE 31
&MODULE  RMODE 24
*
         SAVE  (14,12)
         USING &MODULE.,R12
         LR    R12,R15
         LR    R14,R13
         LA    R13,SAVE
         ST    R13,8(,R14)
         ST    R14,4(,R13)
*
** READ SYSAUTH.ASID
*
@ASID    MVC   NAME,=CL12'SYSAUTH.ASID' VARIABLE NAME
         MVC   NL,=F'12'               VARIABLE NAME LENGTH
         MVC   VL,=F'2'                VARIABLE LENGTH
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         L     R9,VP                   POINTER TO VARIABLE
         MVC   XMASID,0(R9)            GET VALUE FROM REXX
         MVC   REQASID,XMASID
*
** READ SYSAUTH.ADDR - PAD TO FULLWORD
*
@ADDR    MVC   NAME,=CL12'SYSAUTH.ADDR'
         MVC   NL,=F'12'
         MVC   VL,=F'4'
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         L     R8,VP
         MVC   XMADDR,0(R8)
         L     R9,VL
         LA    R8,4
@AEQ4    CR    R8,R9
         BNH   @LENG
         LA    R7,XMADDR
         MVC   3(0,R7),2(R7)
         MVC   2(0,R7),1(R7)
         MVC   1(0,R7),0(R7)
         MVI   0(R7),X'00'
         LA    R9,1(R9)
         B     @AEQ4
*
** READ SYSAUTH.LENG - PAD TO FULLWORD
*
@LENG    MVC   NAME,=CL12'SYSAUTH.LENG'
         MVC   NL,=F'12'
         MVC   VL,=F'4'
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         L     R8,VP
         MVC   XMLENG,0(R8)
         L     R9,VL
         LA    R8,4
@LEQ4    CR    R8,R9
         BNH   @CHK64
         LA    R7,XMLENG
         MVC   3(0,R7),2(R7)
         MVC   2(0,R7),1(R7)
         MVC   1(0,R7),0(R7)
         MVI   0(R7),X'00'
         LA    R9,1(R9)
         B     @LEQ4
*
** CHECK LENGTH REQUESTED <- LIMIT
*
@CHK64   L     R9,XMLENG
         LH    R8,MAXLENG              LOAD LENGTH LIMIT
         CR    R8,R9
         BNL   @XMEM
@LENERR  MVC   XMSTOR(40),=CL40'ERROR - REQUESTED LENGTH > 4096'
         B     @ERROR
*
** CROSS MEMORY CALL
*
@XMEM    XR    R2,R2                   ZERO REG 2
         ESAR  R2                      OBTAIN OUR ADDR SP NUMBER
         ST    R2,OURASN               SAVE IT
*
*---------------------------------------------------------------------*
* PREPARE FOR "ESTAE" WHEN END OF ADDRESS SPACE IS REACHED.           *
*---------------------------------------------------------------------*
         AMODECHG 31,ST=AMODEST        SWITCH TO 31 BIT ADDRESS MODE
*---------------------------------------------------------------------*
         L     R9,=V(PROCESTA)      LOAD EXTERNAL "ESTAE" ADDRESS
         USING PROCESTA,R9          ADDRESSABILITY
         STM   R10,R13,BASES#1      STORE REGISTERS IN ESTAE SAVER
         LA    R1,ESTAEOF1          RETURN ADDRESS
         ST    R1,RETNADR1          STORE RETURN ADDRESS
         DROP  R9
         ESTAE (9)                  TRAP "ABEND"
*---------------------------------------------------------------------*
         MODESET KEY=ZERO,MODE=PROB    KEY ZERO, PROB STATE
*        MODESET KEY=ZERO              KEY ZERO, PROB STATE
         BAL   R14,@INXMEM
*
         XR    R1,R1                   REG 1 - 0
         L     R9,XMADDR               ADDRESS TO READ FROM
         L     R2,XMLENG               TOTAL LENGTH TO READ
         LA    R8,XMSTOR               POINTER TO DESTINATION
         XR    R5,R5                   MOVE LENGTH COUNTER
MOVELOOP DS    0H
         LR    R3,R2                   INCREMENTAL READ
         CH    R3,=H'16'               Q. LARGER THAN INCREMET
         BNH   OK2MOVE                    N. USE VALUE
         LH    R3,=H'16'               FIXED LENGTH
OK2MOVE  DS    0H
         MVCP  0(R3,R8),0(R9),R1
         AR    R5,R3                   ADD LENGTH MOVED
         ST    R5,XMLENG               SAVE IN CASE OF S0C4
         AR    R8,R3                   POINT PAST DATA MOVED
         AR    R9,R3                   POINT PAST DATA MOVED
         SR    R2,R3                   Q. AFTER -LENGTH STILL +VE
         BP    MOVELOOP                   Y. LOOP
*
         BAL   R14,@OUTXMEM
         MODESET KEY=NZERO,MODE=PROB   KEY USER, PROB STATE
*        MODESET KEY=NZERO             KEY USER, PROB STATE
*---------------------------------------------------------------------*
ESTAEOF1 DS    0H
         AMODECHG O,ST=AMODEST         RESTORE ORIGINAL ADDRESS MODE
         ESTAE 0                       TURN ESTAE OFF
*---------------------------------------------------------------------*
*

** MOVE RETURNED DATA TO REXX VARIABLE XMEMSTOR
@UPDTRX  MVC   NAME,=CL8'XMEMSTOR'
         MVC   NL,=F'8'
         MVC   VL,XMLENG
         LA    R8,XMSTOR
         ST    R8,VP
         LINK  EP=IKJCT441,PARAM=(ECU,NP,NL,VP,VL,TK),VL=1
         B     @FINISH
*
@ERROR   MVC   NAME,=CL8'XMEMSTOR'
         MVC   NL,=F'8'
         MVC   VL,=F'40'
         LA    R8,XMSTOR
         ST    R8,VP
         LINK  EP=IKJCT441,PARAM=(ECU,NP,NL,VP,VL,TK),VL=1
*
@FINISH  L     R13,SAVE+4
         RETURN (14,12),RC=0
*
** SUBROUTINE - INTO CROSS MEMORY MODE **************************
*
@INXMEM  LA    R2,1                    REG 2 - 1
         AXSET AX=(R2)                 AUTH INDEX - 1
         L     R2,REQASN               INTO XMEM MODE
         SSAR  R2
@INXEND  BR    R14
*
** SUBROUTINE - OUT OF CROSS MEMORY MODE ************************
*
@OUTXMEM L     R2,OURASN               OUT OF XMEM MODE
         SSAR  R2
         XR    R2,R2                   REG 2 - 0
         AXSET AX=(R2)                 AUTH INDEX - 0
@OUTXEND BR    R14                     RETURN TO CALLER
*
         CALL  PROCESTA             ESTABLISH EXTERNAL ADDRESS
**********************************************************************
*
*
** STORAGE      ******************************************************
*
         LTORG
*
         DS    0D
SAVE     DS    18F
AMODEST  DS    F                        ADDRESSING MODE SAVER
XMSLPT   DS    F
OURASN   DS    F
REQASN   DS    0F
         DC    XL2'0'
REQASID  DS    H
MAXLENG  DC    H'4096'                  LENGTH LIMIT
XMASID   DS    XL2
XMADDR   DS    F
XMLENG   DS    F
*
         DS    0D
NAME     DS    CL12
NP       DC    A(NAME)                 VARIABLE NAME POINTER
NL       DS    F                       NAME LENGTH
VL       DS    F                       VARIABLE LENGHT
VP       DS    F                       VARIABLE POINTER
TK       DC    F'0'
ECR      DC    A(TSVERETR)             RETRIEVE FUNCTION
ECU      DC    A(TSVEUPDT)             UPDATE FUNCTION
XMSTOR   DS    CL4096                  VARIABLE INTERFACE
*
*---------------------------------------------------------------------*
PROCESTA CSECT
*        PRINT NOGEN
         LR    R2,R15                   R1 SET AS BASE
         USING PROCESTA,R2              BASE REGISTER
         LM    R10,R13,12(R15)          RESTORE REGISTERS FROM "BASES1"
         B     MOVEERR                  BYPASS R10 - R13 SAVE AREA
BASES#1  DS    4F
RETNADR1 DS    F
*---------------------------------------------------------------------*
MOVEERR  DS    0H
         STM   R0,R13,BASES#2           STORE REGISTERS INTO "BASES2"
         L     R9,RETNADR1
         ST    R9,RETNADR2
*---------------------------------------------------------------------*
*                                                                     *
*        CONTROL GETS HERE IF THE AN ABEND OCCURED DURING A MOVE      *
*        FROM SECONDARY TO PRIMARY. USUALLY CAUSED BY AN ADDRESS      *
*        EXCEPTION ERROR.                                             *
*                                                                     *
*---------------------------------------------------------------------*
         CL    R0,=F'12'                  Q. SDWA CREATED BY RTM2
         BE    MESTAER2                      N. DO NOT RETRY
*---------------------------------------------------------------------*
* SDWA OK.
*---------------------------------------------------------------------*
         SETRP WKAREA=(R9),RC=0,DUMP=NO
         LA    R15,MESTAER               ADDRESABILITY BY R15
MESTAER  DS    0F
         LM    R0,R13,8(R15)             RESTORE REGISTERS
         B     MESTAER2                  BRANCH PAST DATA
BASES#2  DS    14F
RETNADR2 DS    F
MESTAER2 DS    0H
*---------------------------------------------------------------------*
         L     R1,RETNADR2              LOAD RETURN ADDRESS
         BR    R1                       BRANCH TO RETURN ADDRESS
*=====================================================================*
*---------------------------------------------------------------------*
         LTORG
         PRINT NOGEN
         IKJTSVT
         IHASDWA DSECT=YES             ENTRY : SDWA
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
