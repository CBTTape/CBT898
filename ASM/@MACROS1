*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*                                                                     *
*  General macros used in programs written by ASYSTS Pty. Ltd.        *
*                                                                     *
*  SUMMARY:                                                           *
*  ~~~~~~~~                                                           *
*    1. KICKOFF  - Initial program entry housekeeping.                *
*    2. RACKOFF  - Final program exit housekeeping.                   *
*    3. UNPACK   o Convert HEX numerics to display format             *
*    4. CLEARV   o Move blanks to variable field (> 255 bytes).       *
*    5  AMODECHG o Addressing MODE CHanGe                             *
*    6. HEXCHMAC o Convert HEX to character.                          *
*    7. CHHEXMAC o Convert character to HEX.                          *
*    8. ISPVDEFX o Define ISPF variables (ISPVDEF) to program.        *
*    9. ISPEXEC  o Invoke ISPLINK using 'ISPEXEC' format commands.    *
*   10. PUTL     o Issue a PUTLINE command within a command processor *
*   11. ADYN     o DYNAMIC allocation/deallocation etc...             *
*   12. PDUMPR   o Program dump with REXX/ISPF presentation.          *
*   13. PDUMP    o Program dump with 3270 datastream presentation.    *
*                                                                     *
*   3270 Data Stream macros:                                          *
*   14. CADC     o Character Attribute Define Constant                *
*   15. ICDC     o Insert Character Define Constant                   *
*   16. RADC     o Repeat to Address Define Constant                  *
*   17. SBA      o Set Buffer Address                                 *
*   18. SBADC    o Set Buffer Address Define Constant                 *
*   19. WCCDC    o Write Control Character Define Constant            *
*       --------
*                                                                     *
*  This member can be rebuilt using the MACBUILD edit macro. To make  *
*  a sub-set, change the '-' after the macro name to the optional     *
*  indicator 'o'.  This will leave the entry without including the    *
*  member. Alternatively pass parameter of ALL to MACBUILD to include *
*  all assembler macros.                                              *
*                                                                     *
*  To find the start of the appropriate macro, enter "F 'MACRO n'".   *
*                                                                     *
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*------- Macro  1. KICKOFF -------------------------------------------*
         MACRO
&NAME    KICKOFF &BASE,&GETMAINS,&GETMAINL,&LIST=NO,&HELP=NO,&DREG=,   X
               &AMODE=31,&RMODE=ANY,&SAVE=,&LOC=
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'KICKOFF' parameters    *
* and it's use, pass parameter of 'HELP=Yes'.                         *
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
* Macro to generate all the house keeping etc.. at start of a program,*
* either re-entrant or not.                                           *
* This macro works in conjunction with the 'RACKOFF' macro.           *
*                                                                     *
* PARAMETERS:
* 1. Base register(s) - Format "(Rx,Ry,Rz)" or "Rx". May have up to   *
*                       3 base registers specified. R13 may not be    *
*                       used for re-entrant programs (refer 2 below). *
*                       For non re-entrant programs, if R13 is used   *
*                       as one of the base registers, it will be used *
*                       as the first base regardless of it's position *
*                       in the parameter string, and the initial base *
*                       will be the conventional register save area   *
*                       NOT the start of the program.                 *
*                       Default is "(R11,R12)".                       *
* 2. First variable,s name in the DSECT of a GETMAINEd area.  This    *
*    parameter is optional, however, if it used (eg. re-entrant       *
*    programs), R13 may not be used as a base register and the first  *
*    18 full words must be used for register save and linkage         *
*    conventions.                                                     *
* 3. Length of the GETMAINEd area (must be an "EQU" variable) and must*
*    be supplied if variable name parameter is supplied.              *
* 4. AMODE=..  - Addressing mode '24/31' (default = 31)               *
* 5. DREG=Rn   - Additional DSECT register on GETMAINEd area. (Use    *
*                only if you have addressability problems on the      *
*                GETMAINE'd DSECT. Do not enclose in brackets.)       *
* 6. HELP=...  - Display help comments. 'YES/NO' (default = NO).      *
* 7. LIST=...  - Display code generated. 'YES/NO' (default = YES).    *
* 8. LOC=....  - Optional loaction for the GETMAINed area if that     *
*                option is used. It must be a valid parameter as      *
*                defined by the IBM GETMAIN macro.                    *
* 9. RMODE=..  - Load  mode '24/ANY' (default = ANY)                  *
*10. SAVE=...  - Variable name of register save area if you wish to   *
*                control it's name. (useful if specialised exit       *
*                in-lieu of 'RACKOFF'.                                *
*                                                                     *
* GENERATES:                                                          *
* 1. Inserts a "program_date_time" stamp at start of module.          *
* 2. Sets up all the register equates.                                *
* 3. Saves callers registers R14 thru R12.                            *
* 4. Points R13 to the programs savearea.                             *
* 5. Establishes addresability thru supplied register(s) or default   *
*     base registers R11 + R12.                                       *
* 6. Workarea is GETMAINEd and the conventional linkage pointers,     *
*     registers saved and R13 pointed to the start of the work area.  *
* 7. As R0 + R1 are used as work registers at start, they are restored*
*     from callers savearea.                                          *
*                                                                     *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         AIF   ('&LIST'(1,1) NE 'N').A$XX
         PUSH  PRINT
         PRINT NOGEN
.A$XX    ANOP
         GBLB  &KO1STR1
         GBLC  &R,&GETMADR,&GETMADL,&SAVREGS
         LCLC  &E,&BASE1,&BASE2,&BASE3,&BASE#,&#DREG,&#GMM
         LCLA  &A,&#BASES,&GETMLEN
         AIF   (T'&GETMAINS EQ 'O').NRENT
         AIF   (T'&GETMAINL EQ 'O').ERR2
.NRENT   ANOP
&GETMADR SETC  '&GETMAINS'
&GETMADL SETC  '&GETMAINL'
.*--------------------------------------------------------------------*
         AIF   (T'&SAVE EQ 'O').DEFSRG      BYPASS IF DEFAULT SAVE NAME
&SAVREGS SETC  '&SAVE'
         AGO   .A$$XX                       BYPASS DEFAULT NAME
.DEFSRG  ANOP
&SAVREGS SETC  '$SAV'.'&SYSNDX'
.A$$XX   ANOP
.*--------------------------------------------------------------------*
         LCLC  &TNAME
         AIF   (T'&BASE EQ 'O').DEFAULT
&BASE1   SETC  '&SYSLIST(1,1)'
&BASE2   SETC  '&SYSLIST(1,2)'
&BASE3   SETC  '&SYSLIST(1,3)'
&#BASES  SETA  N'&SYSLIST(1)
         AIF   (T'&GETMAINS EQ 'O').A$00    NON-R BYPASS
         AIF   ('&BASE1' EQ 'R13').ERRR13
         AIF   ('&BASE2' EQ 'R13').ERRR13
         AIF   ('&BASE3' EQ 'R13').ERRR13
         AIF   ('&BASE1' EQ '13').ERRR13
         AIF   ('&BASE2' EQ '13').ERRR13
         AIF   ('&BASE3' EQ '13').ERRR13
.A$00    ANOP
         AIF   ('&BASE2' EQ 'R13').BASE213
         AIF   ('&BASE2' EQ '13').BASE213
         AIF   ('&BASE3' EQ 'R13').BASE313
         AIF   ('&BASE3' EQ '13').BASE313
         AGO   .CONT1
.BASE213 ANOP
&BASE#   SETC  '&BASE1'
&BASE1   SETC  '&BASE2'
&BASE2   SETC  '&BASE#'
         AGO   .CONT1
.BASE313 ANOP
&BASE#   SETC  '&BASE1'
&BASE1   SETC  '&BASE3'
&BASE3   SETC  '&BASE#'
         AGO   .CONT1
.DEFAULT ANOP
&#BASES  SETA  2
&BASE1   SETC  'R11'
&BASE2   SETC  'R12'
.CONT1   ANOP
         AIF   (T'&GETMAINS EQ 'O').NONR0   NON-R BYPASS
         AIF   (T'&DREG EQ 'O').NONR0       NO 2ND.DSECT REG, BYPASS
         AIF   ('&DREG' EQ '&BASE1').ERDREG IF SAME AS BASE 1, ERROR
         AIF   ('&DREG' EQ '&BASE2').ERDREG IF SAME AS BASE 2, ERROR
         AIF   ('&DREG' EQ '&BASE3').ERDREG IF SAME AS BASE 3, ERROR
         AIF   ('&DREG' EQ 'R13').ERDREG    IF R13, ERROR
         AIF   ('&DREG' EQ '13').ERDREG     IF R13, ERROR
         AIF   ('&DREG' EQ 'RD').ERDREG     IF R13, ERROR
&#DREG   SETC  ',&DREG'                     SET SECONDARY DSECT REG
.NONR0   ANOP
.*--------------------------------------------------------------------*
         AIF      ('&NAME' EQ '').NONAME
&E       SETC     '&NAME'
         AGO      .A
.NONAME  ANOP
&E       SETC    'NULL&SYSNDX'
.A       ANOP
&E       CSECT
.TAMODE  ANOP
         AIF ('&AMODE' NE '31').AM24$
&E       AMODE  31                          AMODE OF 31
         AGO    .TRMODE                     Continue
.AM24$   ANOP
&E       AMODE  24                          AMODE OF 24 REQUESTED
&E       RMODE  24                          RMODE OF 24 FORCED
         AGO    .BYP#10                     Continue
.TRMODE  ANOP
         AIF ('&RMODE' NE 'ANY').RM24$$
&E       RMODE  ANY                         RMODE OF ANY
         AGO    .BYP#10                     Continue
.RM24$$  ANOP
&E       RMODE  24                          RMODE OF 24 REQUESTED
.BYP#10  ANOP
&R       SETC     'R'
         AIF ('&BASE1' EQ 'R13').SAVANCH
         AIF ('&BASE1' NE '13').TEST1ST
.SAVANCH ANOP
&E       SETC     '&SAVREGS'                SET REGISTER SAVE AREA BASE
.*--------------------------------------------------------------------*
.TEST1ST ANOP
         AIF   (&KO1STR1).C                 FIRST TIME THRU
&KO1STR1 SETB 1
R0       EQU    0
R1       EQU    1
R2       EQU    2
R3       EQU    3
R4       EQU    4
R5       EQU    5
R6       EQU    6
R7       EQU    7
R8       EQU    8
R9       EQU    9
R10      EQU   10
RA       EQU   10
R11      EQU   11
RB       EQU   11
R12      EQU   12
RC       EQU   12
R13      EQU   13
RD       EQU   13
R14      EQU   14
RE       EQU   14
R15      EQU   15
RF       EQU   15
*---------------------------------------------------------------------*
.C       ANOP
         B     30(&R.15)                    BRANCH AROUND P/D/T STAMP
         DC    CL8'&NAME'                   PROGRAM STAMP
         DC    C'_'                         DELIMITER
         DC    CL8'&SYSDATE'                DATE STAMP
         DC    C'_'                         DELIMITER
         DC    CL8'&SYSTIME'                TIME STAMP
         STM   &R.14,&R.12,12(&R.13)        SAVE REGISTERS
         AIF   (T'&GETMAINS EQ 'O').NONR1   NON-R BYPASS
.*--------------------------------------------------------------------*
.*      RE-ENTRANT PROG                                               *
.*--------------------------------------------------------------------*
         LR    2,15                         LOAD R2 WITH START OF PR
         USING &NAME,2                      USE R2 AS TEMPORARY BASE
.*--------------------------------------------------------------------*
         AIF (T'&LOC EQ 'O').NOGMLOC
*        GETMAIN R,LV=&GETMAINL,&LOC        GETMAIN AREA
         GETMAIN R,LV=&GETMAINL,&LOC        GETMAIN AREA
         AGO   .A$$000
.NOGMLOC ANOP
*        GETMAIN R,LV=&GETMAINL             GETMAIN AREA
         GETMAIN R,LV=&GETMAINL             GETMAIN AREA
.A$$000  ANOP
.*--------------------------------------------------------------------*
         ST    &R.13,4(&R.1)                BACKWARD CHAIN
         ST    &R.1,8(&R.13)                FORWARD CHAIN
.*--------------------------------------------------------------------*
.* The next line does horrible things with 31 bit addressing.         *
.*       NI    12(&R.13),X'00'              CLEAR TRACE BITS
.*--------------------------------------------------------------------*
         LR    &R.13,&R.1                   SAVE AREA @
         AIF   (T'&DREG EQ 'O').NDREG1      NO 2ND.DSECT REG, BYPASS
         LA    &DREG,4095(&R.13)            POINT 2ND. REG 1K PAST
         LA    &DREG,1(&DREG)                 1ST. DSECT BASE
.NDREG1  ANOP
         USING &GETMADR,&R.13&#DREG         ADDRESABILITY TO GETMAIN
         LR    &BASE1,&R.2                  &BASE1 IS 1ST. BASE REG
         DROP  &R.2                         DROP REGISTER 15 AS BASE
         AIF      (&#BASES GT 1).TWOBASE
         USING &E,&BASE1                    USING ONE BASE REGISTER
         AGO      .RESTR0R2
.NONR1   ANOP
.*--------------------------------------------------------------------*
.*      NON RE-ENTRANT PROG                                           *
.*--------------------------------------------------------------------*
         USING &NAME,15                     USE R15 AS TEMPORARY BASE
         ST    &R.13,&SAVREGS.+4            BACKWARD CHAIN
         LA    &R.0,&SAVREGS                OUR SAVEAREA ADDRESS
         ST    &R.0,8(&R.13)                FORWARD CHAIN
.*--------------------------------------------------------------------*
.* The next line does horrible things with 31 bit addressing.         *
.*       NI    12(&R.13),X'00'              CLEAR TRACE BITS
.*--------------------------------------------------------------------*
         LR    13,0                         R13 POINT TO OUR SAVEAREA
         AIF ('&E' EQ '&SAVREGS').NOLOAD1   BUPASS BASE LOAD
         LR    &BASE1,15                    &BASE1 IS 1ST. BASE REG
.NOLOAD1 ANOP
         AIF      (&#BASES GT 1).TWOBASE
         DROP  15                           RELINQUISH ADDRESSABILITY
         USING &E,&BASE1                    USING ONE BASE REGISTER
         AGO      .ADROK
.TWOBASE ANOP
         LA    &BASE2,4095(&BASE1)          POINT 2ND. REG 1K PAST
         LA    &BASE2,1(&BASE2)               1ST. BASE
         AIF      (&#BASES GT 2).THRBASE
         DROP  15                           RELINQUISH ADDRESSABILITY
         USING &E,&BASE1,&BASE2             USING TWO BASE REGISTERS
         AGO      .ADROK
.THRBASE ANOP
         LA    &BASE3,4095(&BASE2)          POINT 3RD. REG 1K PAST
         LA    &BASE3,1(&BASE3)               2ND. BASE
         DROP  15                           RELINQUISH ADDRESSABILITY
         USING &E,&BASE1,&BASE2,&BASE3      USING THREE BASE REGISTERS
.*       AGO      .ADROK
.ADROK   ANOP
         AIF   (T'&GETMAINS NE 'O').RESTR0R2 RE-ENT PROCESSING
         LA    1,&E                         ADDRESS OF CSECT
         LA    0,&SAVREGS                   NEW BASE ADDRESS
         SR    1,0                          SUBTRACT THE DIFFERENCE
         STH   1,KOFFCOMP                   STORE UNDER @ COMPENSATOR
         B     &SAVREGS.+74                 BRANCH AROUND SAVE AREA
&SAVREGS DS    18F
KOFFCOMP DS    H                            KICKOFF BASE @ COMPENSATOR
         XR    &R.0,&R.0                    ZERO REGISTER 0
         ST    &R.0,&SAVREGS.+8             CLEAR FORWARD CHAIN
         L     &R.1,4(&R.13)                LOAD CALLERS SAVEAREA @
         LM    &R.0,&R.1,20(&R.1)           RESTORE PARM REGISTERS
         AGO   .MEXIT1
.*--------------------------------------------------------------------*
.RESTR0R2 ANOP
.*--------------------------------------------------------------------*
.*      RE-ENTRANT PROG                                               *
.*--------------------------------------------------------------------*
         XR    &R.0,&R.0                    ZERO REGISTER 0
         ST    &R.0,8(&R.13)                CLEAR FORWARD CHAIN
         L     &R.1,4(&R.13)                LOAD CALLERS SAVEAREA @
         LM    &R.0,&R.2,20(&R.1)           RESTORE PARM REGISTERS
         AGO   .MEXIT1
.*--------------------------------------------------------------------*
.ERR     MNOTE 8,'MUST SUPPLY WORK-AREA DSECT FOR GETMAIN.'
         AGO   .MEXIT1
.ERR2    MNOTE 8,'MUST SUPPLY WORK-AREA DSECT LENGTH FOR GETMAIN.'
         AGO   .MEXIT1
.ERR3    MNOTE 8,'NO MATCHING RACKOFF FOR PREVIOUS KICKOFF.'
         AGO   .MEXIT1
.ERRR13  MNOTE 8,'R13 CANNOT BE USED AS BASE FOR RE-ENTRANT MACRO.'
         AGO   .MEXIT1
.ERDREG  MNOTE 8,'XTRA DSECT REGISTER MUST NOT BE A BASE OR R13.'
         AGO   .MEXIT1
.MEXIT1  ANOP
         AIF   ('&LIST'(1,1) NE 'N').MEXIT9
         POP PRINT
.MEXIT9  ANOP
*---------------------------------------------------------------------*
         MEXIT
.*--------------------------------------------------------------------*
         MEND
*---------------------------------------------------------------------*
*------- Macro  2. RACKOFF -------------------------------------------*
         MACRO                                                          RAC00010
&NAME    RACKOFF &RC=0,&LIST=NO,&R1=,&HELP=NO                           RAC00020
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'RACKOFF' parameter     *
* and it's use, pass parameter 'HELP=Yes'.                            *
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
* Parameters:                                                         *
*                                                                     *
*        RC=n       - Numeric return code (default = 0)               *
*                             - or -                                  *
*                     RC=(R15) if R15 contains the return code        *
*        LIST=Y/N   - Generate code from macro expansion (def = NO)   *
*        HELP=Y/N   - Display this help box (def = Yes)               *
*        R1=PASS    - 'PASS' infers that R1 contains return parameter *
*                     value to the caller and is to remain as is. Any *
*                     other value will include R1 in the register     *
*                     restoration command 'LM  R14,R12,....'          *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         PUSH  PRINT
         AIF   ('&LIST'(1,1) NE 'N').A$XX
         PRINT NOGEN
.A$XX    ANOP
         AIF   (T'&NAME EQ 'O').NONAME
&NAME    DS    0H                                                       RAC00020
.NONAME  ANOP
         GBLC  &R,&GETMADR,&GETMADL,&SAVREGS
&KO1STR  SETB 0                             TURN 1ST TIME THRU OFF
         AIF   (T'&GETMADL EQ 'O').A$10     NON-R BYPASS
         AIF   (T'&R1 EQ 'O').A$00          DO NOT PASS R1
         AIF   ('&R1' NE 'PASS').A$00       IF R1¬=PASS DO NOT PASS R1
         LR    &R.3,&R.1                    SAVE REGISTER 1 IN CASE
.A$00    ANOP
         LR    &R.1,&R.13                   LOAD GETMAINED AREA ADDRESS
         LR    &R.2,&R.15                   SAVE REGISTER 15 IN CASE
.A$10    ANOP
         L     &R.13,4(&R.13)               LOAD CALLERS SAVEAREA @     RAC00040
         AIF   (T'&GETMADL EQ 'O').A$20     NON-R BYPASS
*        FREEMAIN R,LV=&GETMADL,A=(1)
         FREEMAIN R,LV=&GETMADL,A=(1)
.A$20    ANOP
         AIF   (T'&R1 EQ 'O').A$21          DO NOT PASS R1
         AIF   ('&R1' NE 'PASS').A$21       IF R1¬=PASS DO NOT PASS R1
         LR    &R.1,&R.3                    RESTORE R1
.A$21    ANOP
         AIF   ('&RC' EQ '(R15)').SPEC      R15 CONTAINS RC             RAC00050
         AIF   ('&RC' EQ '(15)').SPEC R15 CONTAINS RC                   RAC00060
         AIF   (T'&R1 EQ 'O').A$22          DO NOT PASS R1
         AIF   ('&R1' NE 'PASS').A$22       IF R1¬=PASS DO NOT PASS R1
         LM    &R.14,&R.0,12(&R.13)         RESTORE REGISTERS 14-0      RAC00070
*                                           LEAVE R1 AS IS
         LM    &R.2,&R.12,28(&R.13)         RESTORE REGISTERS 2-12      RAC00070
         AGO   .A$23                                                    RAC00090
.A$22    ANOP
         LM    &R.14,&R.12,12(&R.13)        RESTORE REGISTERS 14-12     RAC00070
.A$23    ANOP
         LA    &R.15,&RC                    SET RETURN CODE             RAC00080
         AGO   .RET1                                                    RAC00090
.SPEC    ANOP                                                           RAC00100
         AIF   (T'&GETMADL EQ 'O').A$30     NON-R BYPASS
         LR    &R.15,&R.2                   RESTORE R15 FROM ABOVE SAVE RAC00100
.A$30    ANOP
         L     &R.14,12(&R.13)              RESTORE R14                 RAC00100
         AIF   (T'&R1 EQ 'O').A$32          DO NOT PASS R1
         AIF   ('&R1' NE 'PASS').A$32       IF R1¬=PASS DO NOT PASS R1
         L     &R.0,20(&R.13)               RESTORE REGISTER 0          RAC00110
*                                           LEAVE R1 AS IS
         LM    &R.2,&R.12,28(&R.13)         RESTORE REGISTERS 2-12      RAC00110
         AGO   .RET1                                                    RAC00090
.A$32    ANOP
         LM    &R.0,&R.12,20(&R.13)         RESTORE REGISTERS 0-12      RAC00110
.RET1    ANOP                                                           RAC00120
.*--------------------------------------------------------------------*
.* The next line does horrible things with 31 bit addressing.         *
.*       MVI   12(&R.13),X'FF'              SET TRACE BITS ON           RAC00120
.*--------------------------------------------------------------------*
         BR    &R.14                        RETURN                      RAC00130
         POP   PRINT
*---------------------------------------------------------------------*
         MEXIT
.*--------------------------------------------------------------------*
.E1      POP   PRINT
         MNOTE 8,'MACRO KICKOFF MUST BE USED WITH THIS MACRO.'
         MEXIT
.*--------------------------------------------------------------------*
         MEND                                                           KIC00710
*---------------------------------------------------------------------*
