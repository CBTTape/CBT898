*        CSECT <- For GoAK'ing
*                                                                     *
*  Title   : ALKLMDAT.                                                *
*  Module  : ALKLMDAT.                                                *
*  Program : ALKLMDAT.                                                *
*  Function: Program to scan a load library and list the names of all *
*            members link-edited later than or equal to a date        *
*            supplied on the exec card.                               *
*            Members with no time against them were assembled using   *
*            an old version of the assembler (IEV90).                 *
*                                                                     *
*            JCL to run the program:-                                 *
*              //userid  JOB .....                                    *
*              //STEP010  EXEC PGM=ALKLMDAT,PARM='ddmmyy,program*'    *
*              //STEPLIB  DD  DISP=SHR,DSN=userid.LOADLIB             *
*              //LMODLIB  DD  DISP=SHR,DSN=the.loadlib.to.be.scanned  *
*              //LMODLIST DD  SYSOUT=*                                *
*                                                                     *
*            Macro HEXCHMAC has been move instream to minimise        *
*            packaging.                                               *
*                                                                     *
*  Company : ASYSTS Pty. Ltd.                                         *
*  Author  : A. Kara                                                  *
*  Date    : 29/08/1995                                               *
*                                                                     *
***********************************************************************
         MACRO
&NAME    HEXCHMAC &SOURCE,&TARGET,&LENGTH,&MF=,&LIST=NO,&LABEL=YES,    +
               &HELP=NO,&INIT=NO,&DSECT=NO
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'HEXCHMAC' parameter    *
* and it's use, pass parameter 'HELP=Yes'.                            *
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
*                                                                     *
* CONVERT HEX TO CHARACTERS.                                          *
* --------------------------                                          *
*           N O T E - N O T E - N O T E - N O T E - N O T E           *
*                                                                     *
*   This routine saves and uses general registers 1, 14 & 15.         *
*   14 will be altered on return from the macro.                      *
*   Do NOT use registers 14 or 15 as addresses for passed parameters. *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*   Parameters:-                                                      *
*       1. Source                                                     *
*       2. Target (the target needs 2 times the length of source)     *
*       3. Length                                                     *
*       4. MF=E/L -  Macro format for re-entrant programs             *
*       5. LABEL=YES/NO - Generate data labels. Used for re-entrant   *
*                         programs with MF=L and you wish to move the *
*                         constant value from the CSECT over the      *
*                         the GETMAIN'ed DSECT.                       *
*                         The default is 'YES'. The parameter can be  *
*                         ignored if NOTE 2 option is observed.       *
*       6. LIST=YES/NO - Option to generate macro expansion or not    *
*       7. HELP=YES/NO - Option to print these help details. Default  *
*                        is 'YES'.                                    *
*       8. INIT=YES/NO - Initialise MF=E macro to repeat common code  *
*                        for multi-DSECT programs. 'NO' is the        *
*                        default.                                     *
*       9. DSECT=Y/N   - If DSECT=Y, the translate table is defided   *
*                        as storage (DS) not constant (DC).           *
*                        Should be used with MF=L.                    *
*                                                                     *
*   NOTE:-                                                            *
*       1. Parameters may be passed in registers using the (Rn)       *
*          notation (Note cannot have digits).                        *
*       2. For execute form of the macro (MF=E) the first occurence of*
*          the macro must be the first one executed. If a branch      *
*          causes a initial loop around it, insert a dummy macro to   *
*          perform a conversion into work areas or use the LABEL=NO   *
*          parameter.                                                 *
*                                                                     *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         AIF   ('&LIST'(1,1) NE 'N').A$XX
         PUSH  PRINT
         PRINT NOGEN
.A$XX    ANOP
&NAME    DS    0H
         LCLC  &#LENGTH,&#SOURCE,&#TARGET
         LCLA  &LEN
         GBLC  &XNAME,&XCBAL,&XCBYPAS,&XCLOOP
         GBLC  &XCBYTES,&XCBYTE1,&XCBYTE2,&XCTABLE,&XCRETAD
         GBLB  &XC1ST,&XC1NAME
.*--------------------------------------------------------------------*
         GBLC  &REGSAVR,&REGSMCR
         GBLB  &REGSFLG,&REGDFLG
         AIF   ('&INIT'(1,1) NE 'Y').A$YY  BYPASS IF NOT INITIALISE
&XC1ST   SETB  0
&XNAME   SETC  'XC'.'&SYSNDX'
&XCBAL   SETC  '&XNAME'.'06'
&XCLOOP  SETC  '&XNAME'.'07'
&XCBYPAS SETC  '&XNAME'.'08'
&XCRETRN SETC  '&XNAME'.'EX'
.A$YY    ANOP
.*--------------------------------------------------------------------*
         AIF   (&REGSFLG).A$RS
&REGSAVR SETC  'GB'.'&SYSNDX'.'#'
&REGSMCR SETC  'HEXCHMAC'
&REGSFLG SETB  1
.A$RS    ANOP
.*--------------------------------------------------------------------*
         AIF   (&XC1NAME).A$$0
&XNAME   SETC  'XC'.'&SYSNDX'
&XCRETAD SETC  '&XNAME'.'01'
&XCTABLE SETC  '&XNAME'.'02'
&XCBYTES SETC  '&XNAME'.'03'
&XCBYTE1 SETC  '&XNAME'.'04'
&XCBYTE2 SETC  '&XNAME'.'05'
&XCBAL   SETC  '&XNAME'.'06'
&XCLOOP  SETC  '&XNAME'.'07'
&XCBYPAS SETC  '&XNAME'.'08'
&XCRETRN SETC  '&XNAME'.'EX'
&XC1NAME SETB  1
         AGO   .A$$0
.*--------------------------------------------------------------------*
.A$$0    ANOP
&XCRETRN SETC  'XC'.'&SYSNDX'.'EX'
.A$$1    ANOP
         AIF   ('&MF' EQ 'L').RENT1    IF MF=L PARAMETER PASSED BYPASS
         AIF   (T'&SOURCE EQ 'O').E1   IF PARM 1 NOT PASSED ERROR
         AIF   (T'&TARGET EQ 'O').E2   IF PARM 2 NOT PASSED ERROR
         AIF   (T'&LENGTH EQ 'O').E3   IF PARM 3 NOT PASSED ERROR
         AIF   ('&SOURCE'(1,1) EQ '(').A$01
&#SOURCE SETC  '&SOURCE'
         AGO   .A$02
.A$01    ANOP
&#SOURCE SETC  '0(&SOURCE(1))'
.A$02    ANOP
         AIF   ('&TARGET'(1,1) EQ '(').A$03
&#TARGET SETC  '&TARGET'
         AGO   .A$04
.A$03    ANOP
&#TARGET SETC  '0(&TARGET(1))'
.A$04    ANOP
         AIF   (&XC1ST).A$11           IF NOT 1ST. TIME THRU
         AIF   (T'&MF EQ 'O').NONR1    IF NON-RE PROGRAM BYPASS
*  EXEC FORM OF MACRO 'HEXCHMAC'                                      *
*---------------------------------------------------------------------*
.*       MVC   &XCTABLE.(16),=C'0123456789ABCDEF'
         B     &XCBYPAS                BYPASS COMMON CODE
         AGO   .RENT2                  BYPASS NON-RE PROCESS
.NONR1   ANOP
*  NORMAL FORM OF MACRO 'HEXCHMAC'                                    *
*---------------------------------------------------------------------*
         B     &XCBYPAS                BYPASS DATA + COMMON CODE
*---------------------------------------------------------------------*
         AGO   .NONR2                  BYPASS RE-ENT PROCESS
.RENT1   ANOP
*---------------------------------------------------------------------*
*  List form of macro 'HEXCHMAC'                                      *
*---------------------------------------------------------------------*
.NONR2   ANOP
         AIF   (T'&MF EQ 'O').LABON1
         AIF   ('&LABEL'(1,1) EQ 'Y').LABON1
         DS    0F                      WORD ALIGN
         DS    F                       RETURNN ADDRESS SAVE AREA
         AIF   (T'&DSECT EQ 'O').DCTT1
         AIF   ('&DSECT'(1,1) EQ 'N').DCTT1
         DS    CL16                    TRANSLATE TABLE
         AGO   .DCTT1D
.DCTT1   ANOP
         DC    C'0123456789ABCDEF'     TRANSLATE TABLE
.DCTT1D  ANOP
         DS    0CL2                    BYTE SAVE AREA
         DS    CL1                     1ST. BYTE
         DS    CL1                     2ND. BYTE
         AGO   .LABDONE
.LABON1  ANOP
         DS    0F                      WORD ALIGN
&XCRETAD DS    F                       RETURNN ADDRESS SAVE AREA
         AIF   (T'&DSECT EQ 'O').DCTT2
         AIF   ('&DSECT'(1,1) EQ 'N').DCTT2
&XCTABLE DS    CL16                    TRANSLATE TABLE
         AGO   .DCTT2D
.DCTT2   ANOP
&XCTABLE DC    C'0123456789ABCDEF'     TRANSLATE TABLE
.DCTT2D  ANOP
&XCBYTES DS    0CL2                    BYTE SAVE AREA
&XCBYTE1 DS    CL1                     1ST. BYTE
&XCBYTE2 DS    CL1                     2ND. BYTE
.LABDONE ANOP
.*--------------------------------------------------------------------*
.*    IF GLOBAL REGISTER SAVE AREA DEFINED, BYPASS                    *
.*--------------------------------------------------------------------*
         AIF   (&REGDFLG).A$RD
         AIF   ('&LABEL'(1,1) EQ 'Y').LABON2 BYPASS IF LABEL REQUIRED
         AIF   ('&REGSMCR' NE 'HEXCHMAC').A$RD
         DS    0F                      WORD ALIGN
         DS    16F                     REGISTER SAVE AREA
         AGO   .A$RD                   DO NOT SET FLAG IF LABEL REQD
.LABON2  ANOP
&REGDFLG SETB  1
         DS    0F                      WORD ALIGN
&REGSAVR DS    16F                     REGISTER SAVE AREA
.A$RD    ANOP
.*--------------------------------------------------------------------*
.RENT2   ANOP
*---------------------------------------------------------------------*
         AIF   ('&MF' EQ 'L').EXIT
*                                                                     *
*        Convert HEX to characters.                                   *
*                                                                     *
*         R1=source, R14=target, R15=length                           *
*                                                                     *
*---------------------------------------------------------------------*
&XCBAL   DS    0H
         XR    0,0                     INITIALISE REGISTER
         AIF   (T'&MF EQ 'O').NONR3    IF NON-RE PROGRAM BYPASS
         MVC   &XCTABLE.(16),=C'0123456789ABCDEF'
.NONR3   ANOP
&XCLOOP  DS    0H
         IC    0,0(1)                  INSERT CHARACTER FOR TRANS'TN
         SRL   0,4                     GET RID OF RIGHT NIBBLE
         STC   0,&XCBYTE1              STORE LEFT NIBBLE
         TR    &XCBYTE1,&XCTABLE       TRANSLATE NIBBLE TO CHATACTER
         MVC   0(1,14),&XCBYTE1        MOVE TO DESTINATION
         MVC   &XCBYTE1,0(1)           MOVE CHARACTER TO WORK AREA
         NI    &XCBYTE1,15             AND WITH X'0F' REMOVE LEFT NIB
         TR    &XCBYTE1,&XCTABLE       TRANSLATE TO CHARACTER
         MVC   1(1,14),&XCBYTE1        MOVE CHAR TO DESTINATION
         LA    1,1(1)                  UP SOURCE BY 1
         LA    14,2(14)                UP DESTINATION BY 2
         BCT   15,&XCLOOP              BRANCH TILL END
         L     14,&XCRETAD             LOAD RETURN ADDRESS
         BR    14                      RETURN TO CALLER
&XCBYPAS DS    0H
.A$11    ANOP
         STM   14,12,&REGSAVR          SAVE REGISTERS
         LA    14,&XCRETRN             LOAD RETURN ADDRESS
         ST    14,&XCRETAD             STORE RETURN ADDRESS
         LA    14,&#TARGET             SET UP DESTINATION ADDRESS
         AIF   ('&LENGTH'(1,1) NE '(').ACTLEN
&LEN     SETA  K'&LENGTH-2
&#LENGTH SETC  '&LENGTH'(2,&LEN)       REGISTER
         LR    15,&#LENGTH             LENGTH TO BE CONVERTED
         AGO   .FINLMV  ANOP           PASS AROUND
.ACTLEN  ANOP
         LA    15,&LENGTH              LENGTH TO BE CONVERTED
.FINLMV  ANOP
         LA    1,&#SOURCE              SET UP TO SOURCE ADDRESS
         B     &XCBAL                  GO TO HEX => CHAR ROUTINE
&XCRETRN DS    0H
         LM    14,12,&REGSAVR          RESTORE REGISTERS
*---------------------------------------------------------------------*
&XC1ST   SETB  1
         AGO   .EXIT
.*--------------------------------------------------------------------*
.*       ERROR MESSAGES                                               *
.*--------------------------------------------------------------------*
.E1      MNOTE 8,'HEXCHMAC requires a SOURCE field'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E2      MNOTE 8,'HEXCHMAC requires a TARGET field'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E3      MNOTE 8,'HEXCHMAC requires a LENGTH'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E4      MNOTE 8,'Invalid "MF" parameter passed'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.EXIT    ANOP
         AIF   ('&LIST'(1,1) NE 'N').EXIT9
         POP   PRINT
.EXIT9   ANOP
         MEXIT
         MEND
***********************************************************************
R0       EQU   0      SYSTEM PARM REG
R1       EQU   1      SYSTEM PARM REG
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11     INTERNAL RETURN ADDR.
R12      EQU   12     BASE REG
R13      EQU   13     SAVEAREA ADDR
R14      EQU   14     SYSTEM RETURN ADDR
R15      EQU   15     STANDARD BRANCH ADDR REG
*
ALKLMDAT CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         LA    R10,4095(R12)       Give it another
         LA    R10,1(R10)            base for flexibility
         USING ALKLMDAT,R12,R10
         LA    R14,SAVEAREA
         ST    R14,8(R13)
         ST    R13,SAVEAREA+4
         LA    R13,SAVEAREA
*
*        OPEN FILES AND PROCESS PARM FIELD
*
         L     R3,0(R1)            SAVE PARM ADDRESS
         OPEN  (PRINTLIN,OUTPUT)
         MVI   PRINTBUF,C' '       BLANK BUFFER
         MVC   PRINTBUF+1(L'PRINTBUF-1),PRINTBUF
         LH    R4,0(R3)            LOAD LENGTH OF PARM
         CH    R4,=H'6'            6 BYTE PARM PASSED?
         BNL   GO001               YES - PARM OK
         MVC   PRINTBUF(L'EMSG01),EMSG01  ERROR MESSAGE TO PRINTLINE
         BAL   R11,PRINTIT         AND PRINT IT
         B     FINISH              AND THEN FINISH UP
*
GO001    DS    0H
         CH    R4,=H'6'            6 BYTE PARM PASSED?
         BE    GO009               YES - PARM OK
         CLI   8(R3),C','          Q. SEPERATOR
         BNE   GO009               NO - IGNORE REST
         CH    R4,=H'7'            NO ADDITIONAL PARAMETER
         BE    GO009               YES - PARM OK
         SH    R4,=H'7'            GET LENGTH OF DATA
         BE    GO009               YES - PARM OK
         CH    R4,=H'8'            FULL LENGTH
         BNH   GO002               YES - PARM OK
         LA    R4,8                FORCE LENGTH OF 8
GO002    DS    0H
FINDELM0 TRT   9(0,3),STARTAB          FIND COMMA/SPACE IN NAME
         BCTR  4,0                     -1 BECAUSE OF NEXT +1
         EX    4,FINDELM0              FIND DELIMITERS
         BZ    GO003                   BYPASS IF FULL LENGTH USED
         LR    4,1                     DETERMINE LENGTH OF THIS FIELD
         LA    1,9(3)                  START OF DATA
         SR    4,1                     LENGTH OF DATA
         BCTR  4,0                     POINT BEFORE DELIMITER
GO003    DS    0H
         LA    4,1(4)                  RESTORE TO ACTUAL LENGTH
         STH   4,MASKL                 SAVE MASK LENGTH
         BCTR  4,0                     PREPARE FOR EX COMMAND
MOVELEN0 MVC   MASK(*-*),9(3)
         EX    4,MOVELEN0
GO009    DS    0H
GO010    DS    0H
         XR    R4,R4               ZERO REG 4
         LR    R5,R4               ZERO REG 5
         LR    R6,R4               ZERO REG 6
         STM   R4,R6,POINTRSV      INIT. POINTER SAVE AREA TO 0
         MVI   DIRFLAG,X'00'       INIT. DIRECTORY EOF FLAG
         RDJFCB LOADLIB            READ JFCB FOR DSN
         MVI   PRINTBUF,C' '
         MVC   PRINTBUF+1(L'PRINTBUF-1),PRINTBUF  ALL SPACES
         MVC   PRINTBUF(L'HEADER1),HEADER1 MOVE HEADER TO PRINTLINE
         TIME
         ST    R1,WDATSTOR         SAVE PACK DEC JUL DATE
         BAL   R11,JULGRG          CONVERT TO GREGORIAN
         UNPK  ZDATOUT(7),DAT(4)   UNPACK IT FOR DISPLAY
         MVC   PRINTBUF+14(2),ZDATOUT+5  TODAY DAY
         MVC   PRINTBUF+17(2),ZDATOUT+3  TODAY MONTH
         MVC   PRINTBUF+20(2),ZDATOUT+1  TODAY YEAR
         MVC   PRINTBUF+65(2),2(R3)    MOVE IN DAY
         MVC   PRINTBUF+68(2),4(R3)    MOVE IN MONTH
         MVC   PRINTBUF+71(2),6(R3)    MOVE IN YEAR
         MVC   ZDATIN(2),6(R3)         MOVE IN YEAR
         MVC   ZDATIN+2(2),4(R3)       MOVE IN MONTH
         MVC   ZDATIN+4(2),2(R3)       MOVE IN DAY
         PACK  PDATIN(4),ZDATIN(6)     AND PACK IT FOR COMPARES
         BAL   R11,PRINTIT         AND PRINT HEADLINE
         CLC   PDATIN(2),=X'0700'      Q. AFTER YEAR 70
         BH    CONT#100                   Y. MUST BE IN 1900's
         OI    PDATIN,X'20'            SET Y2K
CONT#100 DS    0H
         MVC   PRINTBUF+26(L'HEADER2),HEADER2 MOVE HEADER TO PRINTLINE
         LA    3,44                    MAXIMUM LENGTH
         BCTR  3,0                     PREPARE FOR EX COMMAND
FINDELIM TRT   BUFFER(*-*),COMMATAB    FIND COMMA/SPACE IN NAME
         EX    3,FINDELIM              FIND DELIMITERS
         BZ    MOVLENOK                BYPASS IF FULL LENGTH USED
         LR    3,1                     DETERMINE LENGTH OF THIS FIELD
         LA    1,BUFFER                START OF DATA
         SR    3,1                     LENGTH OF DATA
         BCTR  3,0                     PREPARE FOR EX COMMAND
MOVLENOK DS    0H
         LA    11,PRINTBUF+L'HEADER2+26 POINT PAST HEADER
MOVEDSN1 MVC   0(0,11),BUFFER          MOVE ON EXECUTE
         EX    3,MOVEDSN1              EXECUTE THE MOVE
         AR    11,3                    ADD LENGTH OF DATA
         LA    11,1(11)                POINT TO NEXT AVAILABLE BYTE
         MVC   0(2,11),=C'''.'         SET CLOASING BRACKETS
         BAL   R11,PRINTIT             AND PRINT HEADLINE
         MVI   PRINTBUF+1,C'-'         UNDERLINE HEADLINE
         MVC   PRINTBUF+2(78),PRINTBUF+1
         BAL   R11,PRINTIT         AND PRINT UNDERLINE
         BAL   R11,PRINTIT         AND PRINT BLANK LINE
*
         OPEN  (LOADLIB,INPUT,DIRECTRY,INPUT)
*
*        GET NEXT DIRECTORY ENTRY - REG 2 WILL POINT TO NAME
*
NXTENTRY DS    0H
         BAL   R11,GETENTRY        GET ENTRY FROM DIRECTORY BLOCK
         CLI   DIRFLAG,DIREOF      END OF FILE ON DIRECTORY?
         BE    CLOSEINP            YES - FINISH UP
         TM    11(R2),X'80'        IS IT AN ALIAS?
         BO    NXTENTRY            YES.. GET NEXT ENTRY
         MVC   MEMBER,0(R2)        SAVE MEMBER NAME
         CLC   MASKL(2),=H'0'      Q. ANY MASK
         BE    OK4DATEC               N. TEST DATE
         LH    11,MASKL            LOAD MASK LENGTH
         BCTR  11,0                PREPARE FOR EX COMMAND
MASKCOMP CLC   MEMBER(*-*),MASK    Q. TEST WITH MASK
         EX    11,MASKCOMP         TEST MASK
         BL    NXTENTRY            NEXT IF LOWER
         BH    CLOSEINP            EXIT IF HIGHER
OK4DATEC DS    0H
         MVC   MEMTTR(3),8(R2)          MODULE START TTR
         POINT LOADLIB,MEMTTR      POINT TO FIRST LMOD RECORD
         BAL   R11,LMODSCAN
         B     NXTENTRY            AND GET NEXT ENTRY NAME
*
*
CLOSEINP DS    0H                  NORMAL EXIT - CLOSE INPUT FILES
         CLOSE (LOADLIB,,DIRECTRY)
*
FINISH   DS    0H
         CLOSE (PRINTLIN,)
         L     R13,SAVEAREA+4
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
*
*
*        SUBROUTINES
*
*
*        RETURN ADDRESS OF NEXT DIRECTORY ENTRY NAME IN REG 2
*
GETENTRY DS    0H
         LM    R2,R4,POINTRSV      LOAD POINTERS
*                                  R2 > NAME IN DIR BLOCK
*                                  R3 > LAST BYTE IN DIR BLOCK
*                                  R4 = # OF BYTES IN DIR ENTRY
         LA    R2,12(R2,R4)        BUMP R2 TO NEXT ENTRY
         CR    R2,R3               R2 UP TO END OF BLOCK YET?
         BL    UPDPOINT            NO  - GO UPDATE POINTERS
         GET   DIRECTRY,DIRBUF     YES - GET THE NEXT DIR BLOCK
         LA    R2,DIRBUF+2         ADJ R2 TO POINT TO NAME
         LH    R3,DIRBUF           NUMBER OF BYTES IN BLOCK
         LTR   R3,R3               IS BLOCK EMPTY
         BZ    UPDPT01             YES - SET EOF FLAG
         LA    R3,DIRBUF(R3)       NO  - ADD BYTES TO START ADDR
UPDPOINT DS    0H                  UPDATE POINTERS
*        LAST NAME IN LAST BLOCK IS X'FFFFFFFFFFFFFFFF'
         CLI   0(R2),X'FF'         IS IT END OF DIRECTORY
         BNE   UPDPT02             NO.. CONTINUE
UPDPT01  DS    0H                  YES..
         MVI   DIRFLAG,DIREOF      SET FLAG TO SHOW EOF ON DIR.
         B     GETENTXX            AND RETURN
UPDPT02  DS    0H
         IC    R4,11(R2)           NO. OF HALFWORDS
         LA    R5,X'1F'            SET MASK
         NR    R4,R5               AND TO REMOVE OTHER FLAGS
         SLL   R4,1                HALFWORDS X 2 FOR BYTES
         STM   R2,R4,POINTRSV      SAVE POINTERS
GETENTXX DS    0H
         BR    R11                 RETURN
*
*
*        SCAN THE LOAD MODULE FOR DATE RECORD AND COMPARE
*
LMODSCAN DS    0F
         STM   R0,R3,LMSAVE        SAVE REGISTERS
         LR    R3,R11              SAVE RETURN ADDRESS
*
LMBLKRD  DS    0H
         LA    R2,LMODBUF
         READ  RDECB,SF,LOADLIB,(R2),'S'
         CHECK RDECB
         CLI   0(R2),X'80'         IS IT REQUIRED RECORD TYPE?
         BNE   LMBLKRD             NO
         MVI   ASMA90F,C'Y'        Set ASMA90 assembler flag
         CLI   1(R2),X'15'         IS IT THE DATE RECORD? (ASMA90)
         BE    DATERECD            YES
         CLI   1(R2),X'11'         IS IT THE DATE RECORD?
         BNE   LMBLKRD             NO
         MVI   ASMA90F,C'N'        Set ASMA90 assembler flag off
DATERECD DS    0H
         L     R0,14(R2)           PICK UP 3 BYTE JUL PACKED DATE
*                                   WITH LEADING UNWANTED BYTE
         N     R0,=X'00FFFFFF'     ZERO HIGH BYTE
         ST    R0,WDATSTOR         AND SAVE DATE
         BAL   R11,JULGRG          CONVERT JUL TO GREG DATE
         CLC   DAT,PDATIN          COMPARE DATES
         BL    LMSCANXX            OUT OF RANGE - RETURN
         MVC   PRINTBUF+1(8),MEMBER
         MVC   DISPDAT+9(2),ZDATOUT+5
         MVC   DISPDAT+12(2),ZDATOUT+3
         MVC   DISPDAT+15(2),ZDATOUT+1
         MVC   PRINTBUF+12(L'DISPDAT),DISPDAT
*---------------------------------------------------------------------*
         CLI   ASMA90F,C'N'        Q. ASMA90 assembler flag off
         BE    PRINTIT1               Y. Go print it
         L     R0,18(R2)           Pick up 4 byte time
*                                   with leading unwanted nibble
         ST    R0,WDATSTOR         AND SAVE DATE
         HEXCHMAC WDATSTOR,WTIMSTOR,4,LIST=Y
         MVC PRINTBUF+30(2),WTIMSTOR+1
         MVI PRINTBUF+32,C':'
         MVC PRINTBUF+33(2),WTIMSTOR+3
         MVI PRINTBUF+35,C':'
         MVC PRINTBUF+36(2),WTIMSTOR+5
PRINTIT1 DS 0h
         BAL   R11,JULGRG          CONVERT JUL TO GREG DATE
*---------------------------------------------------------------------*
         BAL   R11,PRINTIT         PRINT THE MEMBER NAME
LMSCANXX DS    0H
         LR    R11,R3              RESTORE RETURN ADDRESS
         LM    R0,R3,LMSAVE
         BR    R11
*
*
*        PRINT LINE OF OUTPUT AND CLEAR TO SPACES
*
PRINTIT  DS    0H
         LR    R2,R11              SAVE RETURN ADDRESS
         PUT   PRINTLIN,PRINTBUF   PRINT THE OUTPUT
         MVI   PRINTBUF,C' '
         MVC   PRINTBUF+1(L'PRINTBUF-1),PRINTBUF  ALL SPACES
         LR    R11,R2              RESTORE RETURN ADDRESS
         BR    R11                 AND RETURN
*
*
*        CONVERT PACKED DECIMAL JULIAN DATE TO DISPLAY GREGORIAN
*
JULGRG   DS    0H
         STM   R1,R14,SAVE2        SAVE REGISTERS
*
         LA    R11,WDATSTOR
         MVC   WMDAYS(48),MDAYS COPY DAYS CONSTANTS TO WORK AREA
         L     R2,WDATSTOR
         L     R4,=F'4'         DIVISOR 4 FOR LEAPYEAR CHECK
         SRDL  R2,44
         O     R3,=X'0000000F'  LOW ORDER NIBBLE FOR PACKED DEC.
         STM   R2,R3,WYEAR
         CVB   R2,WYEAR
         SRDL  R2,32
         DR    R2,R4            REMAINDER IN REG 2
         C     R2,=F'0'         IF ZERO THEN LEAP YEAR
         BNE   MON01
         L     R2,=F'29'        SET DAYS IN FEB
         ST    R2,WMDAYS+4
*
MON01    L     R3,WDATSTOR
         N     R3,=X'0000FFFF'  ZERO HIGH ORDER 16 BITS
         L     R2,=F'0'         ZERO REG 2
         STM   R2,R3,WDAYS
         CVB   R2,WDAYS
         L     R6,=F'12'
         LA    R7,WMDAYS
         L     R4,=F'1'         MONTH NUMBER
MON02    C     R2,0(R7)
         BNH   MON03
         S     R2,0(R7)
         A     R4,=F'1'
         LA    R7,4(R7)
         BCT   R6,MON02
MON03    CVB   R7,WYEAR         BINARY YEAR IN REG 7
         M     R6,=F'10000'     MULTIPLY YEAR BY 10000
         AR    R7,R2            ADD DAYS
         LR    R5,R4
         M     R4,=F'100'       MULTIPLY MONTH BY 100
         AR    R7,R5            ADD MONTH
         CVD   R7,WYEAR         SAVE WHOLE DATE AS PD IN YEAR
         MVC   DAT(4),WYEAR+4
         L     R0,DAT
         N     R0,=X'0FFFFFFF'  TURN OFF HIGH NIBBLE
         O     R0,=X'0000000F'  FIX SIGN NIBBLE
         ST    R0,DAT
         UNPK  ZDATOUT(7),DAT(4)
         CLC   DAT(2),=X'0700'     Q. AFTER YEAR 70
         BH    CONT#200               Y. MUST BE IN 1900's
         OI    DAT,X'20'           SET Y2K
CONT#200 DS    0H
         LM    R1,R14,SAVE2        RESTORE REGISTERS
         BR    R11                 AND RETURN
*
*
*
*
SAVEAREA DS    18F
SAVE2    DS    18F
LMSAVE   DS    4F
BUFFER   DS    64F                 JFCB & DIRECTORY BUFFER.
DIRBUF   EQU   BUFFER
POINTRSV DS    3F                  DIRECTORY POINTER SAVE
MASKL    DC    H'0'                NAME OF MEMBER
MEMBER   DS    CL8                 NAME OF MEMBER
MASK     DC    CL8' '              NAME OF MEMBER
MEMTTR   DS    F                   SAVE TTR ADDRESS OF LMOD
PDATIN   DS    CL4                 PACKED PARMDATE IN 0YYMMDDF
ZDATIN   DS    CL6                 ZONED PARMDATE IN YYMMDD
ZDATOUT  DS    CL7                 DISPLAY DATE IN 0YYMMDD
         DS    0F
DAT      DS    CL4
ASMA90F  DS    CL1                 ASMA90 indicator flag
WMDAYS   DS    12F
WTIMSTOR DS    1D
WDAYS    DS    1D
WYEAR    DS    1D
WDATSTOR DS    1F
DIRFLAG  DS    C
DIREOF   EQU   X'FF'
*
PRINTBUF DC    CL132' '
EMSG01   DC    CL39' Six byte date parm (DDMMYY) not passed'
HEADER1  DS    0CL77
         DC    CL25'1ALKLMDAT run DD/MM/YY - '
         DC    CL40' List of load modules link-edited since '
         DC    CL12'DD/MM/YY in'
HEADER2  DC    C'dataset : '''
DISPDAT  DC    CL17' Changed DD/MM/YY'
*
MDAYS    DC    F'31',F'28',F'31',F'30',F'31',F'30'
         DC    F'31',F'31',F'30',F'31',F'30',F'31'
*
*
DCBEXIT  DS    0F
         DC    X'07'
         DC    AL3(BUFFER)
         DC    X'80000000'
*
COMMATAB DC    XL256'00'
         ORG   COMMATAB+C','
         DC    C','
         ORG   COMMATAB+C' '
         DC    C' '
         ORG
*
STARTAB  DC    XL256'00'
         ORG   STARTAB+C'*'
         DC    C','
         ORG   STARTAB+C' '
         DC    C' '
         ORG
*
         LTORG
         PRINT GEN
PRINTLIN DCB   DDNAME=LMODLIST,DSORG=PS,MACRF=PM,                      C
               RECFM=FBA,LRECL=80,BLKSIZE=6160
*
LOADLIB  DCB   DDNAME=LMODLIB,DSORG=PO,MACRF=R,EXLST=DCBEXIT,          C
               EODAD=NXTENTRY
*
DIRECTRY DCB   DDNAME=LMODLIB,DSORG=PS,MACRF=GM,EODAD=CLOSEINP,        C
               RECFM=F,BLKSIZE=256,LRECL=256
*
         DS    0D
LMODBUF  DS    32000C
*
         END
