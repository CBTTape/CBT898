*---------------------------------------------------------------------*
*                                                                     *
* PLTPI program to be executed at CICS initialisation time to define  *
* the type of action/non-action to be taken when a System or TRans-   *
* action abenDs of concern are encountered during the normal course   *
* of processing.                                                      *
* There is a matrix for both types of abends that identify the        *
* abend and the number of system/trans or both (where applicable) are *
* to be takend when they occur.                                       *
* The matrix is terminated by 4 bytes of high-values.                 *
*                                                                     *
* This program requires in-house macro HEXCHMAC to convert hex        *
* response codes to displayable character format.                     *
*                                                                     *
*---------------------------------------------------------------------*
         PRINT OFF
         COPY  @MACROS
         PRINT ON
*---------------------------------------------------------------------*
* Dynamic storage                                                     *
*---------------------------------------------------------------------*
DFHEISTG DSECT
SYSDUMP  DS    F                       System dump request CVDA
TRANDUMP DS    F                       Transaction dump request CVDA
         ORG   TRANDUMP
STARTUPT DS    F                       CICS startup type
         ORG
MESS1    DC    CL132' '                Generic mesage buffer

         HEXCHMAC MF=L,LIST=Y
*---------------------------------------------------------------------*
* Register equates                                                    *
*---------------------------------------------------------------------*
         DFHREGS ,                     Register equates
EIBREG1  EQU   11                      EIB  register #1
CODEREG1 EQU   12                      Base register #1
DATAREG1 EQU   13                      Data register #1
*---------------------------------------------------------------------*
* Interfacing with CICS                                               *
*---------------------------------------------------------------------*
CGUSTRDX DFHEIENT CODEREG=CODEREG1,DATAREG=DATAREG1,EIBREG=EIBREG1

         MVC   MESS1(11),=C'CGUSTRDX - '

*---------------------------------------------------------------------*
* Determine startup type.                                             *
* Only execute if if COLD start as supressions will be reset from     *
* previous settings.                                                  *
*---------------------------------------------------------------------*
         EXEC  CICS INQUIRE SYSTEM STARTUP(STARTUPT)                   X
               NOHANDLE
         CLC   STARTUPT,DFHVALUE(COLDSTART) Q. Cold start
         BE    PROCESS                         N. GoTo process
         MVC   MESS1+11(58),=C'Not cold start. Dump suppression active +
               from last session.'
         EXEC  CICS WRITEQ TD QUEUE('CSML') FROM(MESS1) LENGTH(=H'69')
         B     EXITPGM0                Exit program


*---------------------------------------------------------------------*
* Process transaction table                                           *
*---------------------------------------------------------------------*
PROCESS  DS    0H
         MVC   MESS1+11(31),=C'Dump suppression being started.'
         EXEC  CICS WRITEQ TD QUEUE('CSML') FROM(MESS1) LENGTH(=H'42')

         LA    R2,TDTABLE              Point to transaction table
         USING TDDSECT,R2              Addresability to table entries
TDLOOP   DS    0H
         CLC   TDABEND,=X'FFFFFFFF'    Q. End of table indicator
         BE    TDLOOPEX                   Y. Exit loop
TDTESTT  DS    0H
         MVC   TRANDUMP,DFHVALUE(NOTRANDUMP) Set transaction dump OFF
         CLI   TDTRAND,C'Y'            Q. Transaction dump required
         BNE   TDTESTS                    N. Test for system dump
         MVC   TRANDUMP,DFHVALUE(TRANDUMP) Set transaction dump ON
TDTESTS  DS    0H
         MVC   SYSDUMP,DFHVALUE(NOSYSDUMP) Set system dump OFF
         CLI   TDSYSD,C'Y'             Q. System dump required
         BNE   TDTESTX                    N. Next test (if any)
         MVC   SYSDUMP,DFHVALUE(SYSDUMP) Set system dump ON
TDTESTX  DS    0H

*---------------------------------------------------------------------*
* Issue the command to set dumpoptions for specific transaction abend *
*---------------------------------------------------------------------*
         EXEC  CICS SET TRANDUMPCODE(TDABEND) ADD MAXIMUM(TDMAX)       X
               TRANDUMPING(TRANDUMP) SYSDUMPING(SYSDUMP)               X
               NOHANDLE

*---------------------------------------------------------------------*
* Test if duplicate condition and notify.                             *
*---------------------------------------------------------------------*
         CLC   EIBRESP,DFHRESP(NORMAL) Q. Sucessful SET command
         BE    TDNEXTEN                   Y. Get next entry
         MVC   MESS1+11(61),=C'Error setting TRANDUMPCODE(....), RESP=X+
               ''....'' RESP2=X''....''.'
         MVC   MESS1+38(4),0(R2)       Move trans code
         HEXCHMAC EIBRESP+2,MESS1+52,2,MF=E  Convert Hex to Character
         HEXCHMAC EIBRESP2+2,MESS1+66,2,MF=E Convert Hex to Character
         EXEC  CICS WRITEQ TD QUEUE('CSML') FROM(MESS1) LENGTH(=H'72')
TDNEXTEN DS    0H          Y. Get next entry
*---------------------------------------------------------------------*
         LA    R2,TDENTRYL(R2)         Point to next table entry
         B     TDLOOP                  Go process next table entry
TDLOOPEX DS    0H

*---------------------------------------------------------------------*
* Process system table                                                *
*---------------------------------------------------------------------*
         LA    R2,SDTABLE              Point to system table
         USING SDDSECT,R2              Addresability to table entries
SDLOOP   DS    0H
         CLC   SDABEND(4),=X'FFFFFFFF' Q. End of table indicator
         BE    SDLOOPEX                   Y. Exit loop
SDTESTS  DS    0H
         MVC   SYSDUMP,DFHVALUE(NOSYSDUMP) Set system dump OFF
         CLI   SDSYSD,C'Y'             Q. System dump required
         BNE   SDTESTX                    N. Next test (if any)
         MVC   SYSDUMP,DFHVALUE(SYSDUMP) Set system dump ON
SDTESTX  DS    0H

*---------------------------------------------------------------------*
* Issue the command to set dumpoptions for specific system abend      *
*---------------------------------------------------------------------*
         EXEC  CICS SET SYSDUMPCODE(SDABEND) ADD MAXIMUM(SDMAX)        X
               SYSDUMPING(SYSDUMP)                                     X
               NOHANDLE

*---------------------------------------------------------------------*
* Test if duplicate condition and notify.                             *
*---------------------------------------------------------------------*
         CLC   EIBRESP,DFHRESP(NORMAL) Q. Sucessful SET command
         BE    SDNEXTEN                   Y. Get next entry
         MVC   MESS1+11(64),=C'Error setting SYSDUMPCODE(........), RES+
               P=X''....'' RESP2=X''....''.'
         MVC   MESS1+37(8),0(R2)       Move sysdump code
         HEXCHMAC EIBRESP+2,MESS1+55,2,MF=E  Convert Hex to Character
         HEXCHMAC EIBRESP2+2,MESS1+69,2,MF=E Convert Hex to Character
         EXEC  CICS WRITEQ TD QUEUE('CSML') FROM(MESS1) LENGTH(=H'75')
SDNEXTEN DS    0H          Y. Get next entry
*---------------------------------------------------------------------*
         LA    R2,SDENTRYL(R2)         Point to next table entry
         B     SDLOOP                  Go process next table entry
SDLOOPEX DS    0H
         MVC   MESS1+11(34),=C'Dump suppression processing ended.'
         EXEC  CICS WRITEQ TD QUEUE('CSML') FROM(MESS1) LENGTH(=H'45')
EXITPGM0 DS    0H

         EXEC  CICS RETURN
*=====================================================================*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
TDTABLE  DS    0F                          Transaction dump table
*              Abend     #Dumps  Sys  Tran
*              --------- ------- ---- ----
         DC    CL4'ASRA',F'0999',C'N',C'Y',CL2' ' All ASRA (default)
         DC    CL4'DAID',F'0000',C'N',C'N',CL2' ' No  DAID
         DC    CL4'ATNI',F'0000',C'N',C'N',CL2' ' No  ATNI
         DC    CL4'ATZI',F'0000',C'N',C'N',CL2' ' No  ATZI
         DC    CL4'ATZ6',F'0000',C'N',C'N',CL2' ' No  ATZ6
         DC    X'FFFFFFFF'                 End of table marker

SDTABLE  DS    0F                          Systen dump table
*              Abend       #Dumps  Sys
*              ----------  ------- ----
         DC    CL8'AP0001',F'0000',C'Y',CL3' ' Abend or prog check
         DC    CL8'SM0102',F'0003',C'Y',CL3' ' Storage Violations
         DC    CL8'SR0001',F'0000',C'Y',CL3' ' Abend or prog check
         DC    X'FFFFFFFF'                 End of table marker

TDDSECT  DSECT                             Map of trans dump table
TDABEND  DS    CL4                         Abend code
TDMAX    DS    F                           Max no. of abends to dump
TDSYSD   DS    CL1                         Gen system dump for abend
TDTRAND  DS    CL1                         Gen tran dump for abend
         DS    CL2                         Filler
TDENTRYL EQU   *-TDDSECT                   Length of each entry

SDDSECT  DSECT                             Map of system dump table
SDABEND  DS    CL8                         Abend code
SDMAX    DS    F                           Max no. of abends to dump
SDSYSD   DS    CL1                         Gen system dump for abend
         DS    CL3                         Filler
SDENTRYL EQU   *-SDDSECT                   Length of each entry

         END
