*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       Title:    'DASD blocking'
**       System:   N/A
**       Module:   DASDBLKG
**       Program:  DASDBLKG
**       Function: Display efficient blocking factors for DASD usage.
**
**                 This program should be invoked by a CLIST/REXX
**                 rather than through a command processor
**                 1. Parameters:
**                    ISPF variables passed through "VGET":
**                     'LRECL', 'BSTART', 'BEND' and 'EONLY'.
**                 2. Return code of '8' if no parameters passed.
**
**       Author:   J. Hastewell.
**       Modified: A. Kara. - Changed fullscreen TPUTs to ISPF tables
**                            to permit scrolling and ISPF splits.
**                          - Added 3390 support.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*        PRINT OFF
*        COPY  @MACROS                 COMMON MACROS
*        PRINT ON
DASDBLKG KICKOFF (R12,R11),LIST=NO
*---------------------------------------------------------------------*
* Alocate ISPF requirements                                           *
*---------------------------------------------------------------------*
         ISPEXEC INIT=Y                SET UP ISPF INTERFACE
         ISPVDEFX INM=(EONLY),ANM=EONLY,FORMAT=CHAR,LEN=4
         ISPVDEFX INM=(LENCHG),ANM=LENCHG,FORMAT=CHAR,LEN=1
         ISPVDEFX INM=(KEEPTB),ANM=KEEPTB,FORMAT=CHAR,LEN=1
         ISPVDEFX INM=(TABLE),ANM=TABLE,FORMAT=CHAR,LEN=8
         ISPVDEFX INM=(BSTART),ANM=BSTART,FORMAT=CHAR,LEN=5
         ISPVDEFX INM=(BEND),ANM=BEND,FORMAT=CHAR,LEN=5
         ISPVDEFX INM=(BLKSZ),ANM=BLKSZ,FORMAT=CHAR,LEN=5
         ISPVDEFX INM=(LRECL),ANM=LRECL,FORMAT=CHAR,LEN=5
         ISPVDEFX INM=(ENTRY),ANM=ENTRY,FORMAT=CHAR,LEN=5
         ISPVDEFX INM=(EFFIC),ANM=EFFIC,FORMAT=CHAR,LEN=5
         ISPVDEFX INM=(EFFIC2),ANM=EFFIC2,FORMAT=CHAR,LEN=5
         ISPVDEFX INM=(BPT90),ANM=BPT90,FORMAT=CHAR,LEN=2
         ISPVDEFX INM=(PCT90),ANM=PCT90,FORMAT=CHAR,LEN=3
         ISPVDEFX INM=(BPT80),ANM=BPT80,FORMAT=CHAR,LEN=2
         ISPVDEFX INM=(PCT80),ANM=PCT80,FORMAT=CHAR,LEN=3
         ISPVDEFX INM=(BPT50),ANM=BPT50,FORMAT=CHAR,LEN=17
         ISPVDEFX INM=(PCT50),ANM=PCT50,FORMAT=CHAR,LEN=3
         ISPVDEFX INM=(ZCMD),ANM=ZCMD,FORMAT=CHAR,LEN=79
                                                                SPACE 1
         ISPEXEC 'VGET (TABLE KEEPTB LRECL EONLY) SHARED'
         CLI KEEPTB,C' '               Q. KEEP TABLE PARAMETER PASSED
         BE    TESTTABL                   N. BYPASS
         MVC   KEEPTB+1(1),KEEPTB      STORE PARAMETER
         MVI   KEEPTB,C' '             CLEAR FLAG
         ISPEXEC 'VPUT (KEEPTB) SHARED'
TESTTABL DS    0H
         CLI   TABLE,C' '              Q. TABLE NNAME PASSED
         BNE   RECALC                     Y. BYPASS
         MVC   TABLE(8),=CL8'DASDBLKG' SET DEFAULT
                                                                SPACE 1
RECALC   DS    0H
         ISPEXEC 'VGET (BSTART BEND) SHARED'
         MVI   LENCHG,C'N'             SET LRECL CHANGED FLAG OFF
         CLC   LRECL(5),HEX00          Q. ANY PARAMETER PASSED
         BE    NOPARM                     N. GO SET ERROR
         CLC   LRECL(5),SPACES         Q. ANY PARAMETER PASSED
         BE    NOPARM                     N. GO SET ERROR
         LA    R3,4                    LOOP CNTR (MUST BE > 0)
         LA    R2,LRECL+4              LOAD ADDRESS OF DATA END
LOOP#10  DS    0H
         CLI   0(R2),C' '              Q. IS CHARACTER A SPACE
         BNE   ELOOP#10                   Y. EXIT LOOP
         BCTR  R2,0                    POINT TO PREVIOUS CHARACTER
         BCT   R3,LOOP#10              LOOP TILL END
ELOOP#10 DS    0H
         LA    R2,LRECL                LOAD ADDRESS OF DATA TO MOVE
         EX    R3,PACKIT               PACK LRECL INTO DOUBLE WORD
         CVB   R1,D                    CONVERT TO BINARY
         ST    R1,LRECL0               STORE RECORD LENGTH
         LA    R3,4                    LOOP CNTR (MUST BE > 0)
         LA    R2,BSTART+4             LOAD ADDRESS OF DATA END
LOOP#11  DS    0H
         CLI   0(R2),C' '              Q. IS CHARACTER A SPACE
         BNE   ELOOP#11                   Y. EXIT LOOP
         BCTR  R2,0                    POINT TO PREVIOUS CHARACTER
         BCT   R3,LOOP#11              LOOP TILL END
ELOOP#11 DS    0H
         LA    R2,BSTART               LOAD ADDRESS OF DATA TO MOVE
         EX    R3,PACKIT               PACK LRECL INTO DOUBLE WORD
         CVB   R1,D                    CONVERT TO BINARY
         ST    R1,BSTART               STORE RECORD LENGTH
         LA    R3,4                    LOOP CNTR (MUST BE > 0)
         LA    R2,BEND+4               LOAD ADDRESS OF DATA END
LOOP#12  DS    0H
         CLI   0(R2),C' '              Q. IS CHARACTER A SPACE
         BNE   ELOOP#12                   Y. EXIT LOOP
         BCTR  R2,0                    POINT TO PREVIOUS CHARACTER
         BCT   R3,LOOP#12              LOOP TILL END
ELOOP#12 DS    0H
         LA    R2,BEND                 LOAD ADDRESS OF DATA TO MOVE
         EX    R3,PACKIT               PACK LRECL INTO DOUBLE WORD
         CVB   R1,D                    CONVERT TO BINARY
         ST    R1,BEND                 STORE RECORD LENGTH
                                                                SPACE 1
REDISP   DS    0H
         ISPEXEC 'TBCREATE &&TABLE KEYS(ENTRY) NAMES(BLKSZ EFFIC       X
                BPT90 BPT80 BPT50 PCT90 EFFIC2 PCT80 PCT50) NOWRITE'
         L     R5,BSTART               LOAD STARTING BLOCK SIZE
         LTR   R5,R5                   Q. ZERO STARTING BLKSIZE
         BZ    NEXT1                      Y. LEAVE IF WE DO.....
                                                                SPACE 1
         XR    R3,R3                   CLEAR R3
         XR    R6,R6                   FOR BLK FACTOR CALC
         L     R4,LRECL0               GET LRECL
BXLE     LA    R6,1(R6)                BLK-FACTR + 1
         BXLE  R3,R4,BXLE              R3+R4<=R5?
         SR    R3,R4                   BACK UP 1
         LR    R2,R3                   PUT RESULT IN BLKSIZE REG
         BCTR  R6,0                    BACK UP 1
         B     BLKSTRT
                                                                SPACE 1
*---------------------------------------------------------------------*
* Start to build a screen full of information                         *
*---------------------------------------------------------------------*
NEXT1    DS    0H
         XR    R6,R6              CLEAR R6 FOR BLOCKING FACTOR
         XR    R2,R2              CLEAR R2 FOR BLKSIZE
LOOP     DS    0H
         LA    R6,1(R6)           INCREASE BLOCKING FACTOR + 1
         A     R2,LRECL0          INCREASE BLKSIZE BY LRECL
BLKSTRT  DS    0H
         LA    R3,TABLE80         REFERENCE TABLE80 @
         C     R2,=F'32768'       IF LRECL > 32768
         BH    TBT1                       THEN GET OUT OF HERE
         ST    R2,ABLOCK          STORE ACTUAL BLOCK
*---------------------------------------------------------------------*
* Find the table entry for this LRECL                                 *
*---------------------------------------------------------------------*
LOOPX    CLM   R2,3,0(R3)         LOOK AT START SIZE
         BL    INCR               IF LESS INC AND RETRY
         CLM   R2,3,2(R3)         IF EQUAL OR LOWER THAN END SIZE
         BNH   HERE               THIS IS THE ENTRY WE WANT
INCR     LA    R3,6(R3)           POINT TO NEXT TABLE ENTRY
         B     LOOPX              TRY AGAIN
                                                                SPACE 1
*---------------------------------------------------------------------*
* Calculate 3380 % utilization                                        *
*---------------------------------------------------------------------*
HERE     XR    R4,R4              NOW R3 POINTS TO TABLE ENTRY
         ICM   R4,3,4(R3)         GET THE NUMBER OF BLOCKS/TRACK
         LR    R5,R2              INTO R4 & PUT BLKSIZE INTO R5
         MH    R5,4(R3)           BLKSIZ*BLKS/TRK=BYTES/TRK
         LR    R9,R5              PREPARE FOR DIVIDE
         XR    R8,R8              TO CALCULATE % UTILIZATION
         MH    R9,=H'100'         BYTES/TRK*100/MAX BYTES/TRK=%UTIL
         D     R8,=F'47476'       DIVIDE BY TRACK CAPACITY
         LR    R7,R9              R7 = 3380 % UTILIZATION
                                                                SPACE 1
*---------------------------------------------------------------------*
* Format current screen line                                          *
*---------------------------------------------------------------------*
         CVD   R6,D               FORMAT 3380 % UTILIZATION
         UNPK  S,D
         OI    S+15,C'0'
         MVC   ENTRY(5),S+11
*
         CVD   R2,D               FORMAT BLKSIZE
         UNPK  S,D
         OI    S+15,C'0'
         MVC   BLKSZ(5),S+11
*
         CVD   R4,D               FORMAT REC/TRACK
         UNPK  S,D
         OI    S+15,C'0'
         MVC   BPT80(2),S+14
*
         CVD   R7,D               FORMAT BLOCKING FACTOR
         UNPK  S,D
         OI    S+15,C'0'
         MVC   PCT80(2),S+14
         MVI   PCT80+2,C'%'
                                                                SPACE 1
*---------------------------------------------------------------------*
* Now do 3390 Calculations                                            *
*---------------------------------------------------------------------*
DO3390   STM   R0,R10,SAVE3390
         LA    R3,TABLE90         REFERENCE TABLE90 @
*---------------------------------------------------------------------*
* Find the table entry for this lrecl                                 *
*---------------------------------------------------------------------*
LOOPX9   CLM   R2,3,0(R3)         LOOK AT START SIZE
         BL    INCR9              IF LESS INC AND RETRY
         CLM   R2,3,2(R3)         IF EQUAL OR LOWER THAN END SIZE
         BNH   HERE9              THIS IS THE ENTRY WE WANT
INCR9    LA    R3,6(R3)           POINT TO NEXT TABLE ENTRY
         B     LOOPX9             TRY AGAIN
                                                                SPACE 1
*---------------------------------------------------------------------*
* Calculate 3390 % utilization                                        *
*---------------------------------------------------------------------*
HERE9    XR    R4,R4              NOW R3 POINTS TO TABLE ENTRY
         ICM   R4,3,4(R3)         GET THE NUMBER OF BLOCKS/TRACK
         LR    R5,R2              INTO R4 & PUT BLKSIZE INTO R5
         MH    R5,4(R3)           BLKSIZ*BLKS/TRK=BYTES/TRK
         LR    R9,R5              PREPARE FOR DIVIDE
         XR    R8,R8              TO CALCULATE % UTILIZATION
         MH    R9,=H'100'         BYTES/TRK*100/MAX BYTES/TRK=%UTIL
         D     R8,=F'56664'       DIVIDE BY TRACK CAPACITY
         LR    R7,R9              R7 = 3380 % UTILIZATION
                                                                SPACE 1
*---------------------------------------------------------------------*
* Format 3390 current screen line details                             *
*---------------------------------------------------------------------*
         CVD   R4,D               FORMAT REC/TRACK
         UNPK  S,D
         OI    S+15,C'0'
         MVC   BPT90(2),S+14
*
         CVD   R7,D               FORMAT BLOCKING FACTOR
         ST    R7,SAVE90PC        SAVE 3390 PERCENT FOR EFFIC REP
         UNPK  S,D
         OI    S+15,C'0'
         MVC   PCT90(2),S+14
         MVI   PCT90+2,C'%'
         LM    R0,R10,SAVE3390
                                                                SPACE 1
*---------------------------------------------------------------------*
* Now do 3350 calculations                                            *
*---------------------------------------------------------------------*
         MVC   BPT50(14),SPACES   INITIALISE FIELD
         C     R2,=F'19069'       Q. BLKSIZE > 19069
         BNH   GODO3350              N. CONTINUE PROCESSING
         MVC   BPT50(3),=C'NOT'   TELL OF IMPOSSIBLE COMPINATION
         MVC   PCT50(3),=C'POS'   TELL OF IMPOSSIBLE COMPINATION
         B     T3380PC            GO PROCESS 3380 EFFICIENCY
                                                                SPACE 1
GODO3350 EQU   *
         BAL   R14,DO3350         GO DO THE 3350 CALC'S
                                                                SPACE 1
         L     R8,RPT3350         FORMAT 3350 REC/TRACK
         CVD   R8,D
         UNPK  S,D
         OI    S+15,C'0'
         MVC   BPT50(2),S+14
                                                                SPACE 1
         L     R8,PCNT3350        FORMAT 3350 % UTILIZATION
         CVD   R8,D
         UNPK  S,D
         OI    S+15,C'0'
         MVC   PCT50(2),S+14
         MVI   PCT50+2,C'%'
                                                                SPACE 1
*---------------------------------------------------------------------*
* This is where we do the tricky little display stuff                 *
*---------------------------------------------------------------------*
T3380PC  MVC   EFFIC(5),=C'  -  '      INITIALISE FIELD
         MVC   EFFIC2(5),=C'  -  '     INITIALISE FIELD
         C     R7,MINPRCNT             Q. LOWER THAN MINIMUM EFFIC %
         BL    T3390PC                    Y. DO NOT TAG AS EFFICIENT
         MVC   EFFIC(2),=C'$$'         TAG BOTH COLUMNS
         MVC   EFFIC2+3(2),=C'$$'      AS EFFICIENT
         C     R7,MINPRCN$             Q. MORE EFFICIENT
         BL    T3390PC                    N. BYPASS TAG UPGRADE
         MVC   EFFIC(2),=C'**'         UPGRADE BOTH TAGS AS MORE
         MVC   EFFIC2+3(2),=C'**'      EFFICIENT
T3390PC  DS    0H
         L     R7,SAVE90PC             RESTORE 3390 PERCENT
         C     R7,MINPRCNT             Q. LOWER THAN MINIMUM EFFIC %
         BL    T3350PC                    Y. DO NOT TAG AS EFFICIENT
         MVC   EFFIC2(2),=C'$$'        TAG ONLY COLUMN AS EFFICIENT
         C     R7,MINPRCN$             Q. MORE EFFICIENT
         BL    T3350PC                    N. BYPASS TAG UPGRADE
         MVC   EFFIC2(2),=C'**'        UPGRADE ONLY TAGS AS MORE
T3350PC  DS    0H
         C     R2,=F'19069'            Q. 3350'S TRACK CAPACITY REACHED
         BH    PUT                     Y. BYPASS
         C     R8,MINPRCNT             Q. MORE EFFICIENT
         BL    PUT                        N. BYPASS TAG UPGRADE
         MVC   EFFIC+3(2),=C'$$'       TAG ONLY COLUMN AS EFFICIENT
         C     R8,MINPRCN$             Q. MORE EFFICIENT
         BL    PUT                        N. BYPASS TAG UPGRADE
         MVC   EFFIC+3(2),=C'**'       UPGRADE ONLY TAGS AS MORE
*        B     PUT
PUT      DS    0H
         CLI   EONLY,C'N'              Q. DISPLAY ONLY EFFICIENT ENTS
         BE    CONT#10                    N. BYPASS TEST
*---------------------------------------------------------------------*
         CLC   EFFIC2(1),EONLY+1       Q. 3390 EFFICIENT WITH TARGET
         BL    CONT#20                    N. DON'T DISPLAY
EFT3380  DS    0H
         CLC   EFFIC2+3(1),EONLY+2     Q. 3380 EFFICIENT WITH TARGET
         BL    CONT#20                    N. DON'T DISPLAY
EFT3350  DS    0H
         CLC   EFFIC+3(1),EONLY+3      Q. 3350 EFFICIENT WITH TARGET
         BL    CONT#20                    N. DON'T DISPLAY
*---------------------------------------------------------------------*
CONT#10  DS    0H
         ISPEXEC 'TBMOD &&TABLE'       MODIFY ISPF TABLE
CONT#20  DS    0H
         L     R1,ABLOCK               LOAD  ACTUAL BLOCK
         C     R1,BEND                 Q. LRECL > BLOCK END
         BH    TBT1                       Y. GET OUT OF HERE
BLANKLN  EQU   *
         ISPEXEC 'TBVCLEAR &&TABLE' CLEAD VARIABLES FOR NEXT ROW
         B     LOOP                    PROCESS NEXT ROW
         EJECT
*---------------------------------------------------------------------*
* Display screen and get a PF key replay                              *
*---------------------------------------------------------------------*
TBT1     DS    0H
         CLI   KEEPTB+1,C'Y'           Q. KEEP TABLE
         BE    EXIT                       N. EXIT ROUTINE
         ISPEXEC 'TBTOP &&TABLE'       SKIP TO TOP OF TABLE
SCR1     DS    0H
         MVC   ZCMD,SPACES             CLEAR COMMAND LINE
         ISPEXEC 'TBDISPL &&TABLE PANEL(DASDBLK2)'
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   ENDIT                      N. EXIT ROUTINE
         CLI   LENCHG,C'Y'             Q. LRECL CHANGED
         BE    DEL4RED                    Y. GO AND DELETE FOR RECREATE
         CLC   ZCMD(2),=C'/A'          Q. REQ ALL DISPLAY
         BE    EFLYOFF                    Y. SET EFFICIENCY ON
         CLC   ZCMD(3),=C'ALL'         Q. REQUESTING ALL DISPLAY
         BNE   TESTEONL                   N. TEST FOR EFFICIENT
EFLYOFF  DS    0H
         MVI   EONLY,C'N'              SET EFFICIENT ONLY FLAG OFF
         B     DEL4RED                 GO AND DELETE FOR RECREATE
TESTEONL DS    0H
         CLC   ZCMD(2),=C'/E'          Q. REQUESTING EFFICIENT DISPLAY
         BE    EFLYON                     Y. SET EFFICIENCY ON
         CLC   ZCMD(5),=C'EONLY'       Q. REQUESTING EFFICIENT DISPLAY
         BNE   SCR1                       N. REDISPLAY SCREEN
EFLYON   DS    0H
         MVI   EONLY,C'Y'              SET EFFICIENT ONLY FLAG
         MVC   EONLYF(3),ZCMD+2        MOVE DEVICE EFFICIENCY MASK
DEL4RED  DS    0H
         ISPEXEC 'TBEND &&TABLE'       END TABLE
         CLI   LENCHG,C'Y'             Q. LRECL CHANGED
         BE    RECALC                     Y. GO RCALCULATE RECL
         B     REDISP                  REBUILD TABLE WITH EFFIC ONLY
ENDIT    DS    0H
         ISPEXEC 'TBEND &&TABLE'       END TABLE
                                                                SPACE 1
*---------------------------------------------------------------------*
* Ways out of the program                                             *
*---------------------------------------------------------------------*
EXIT     DS    0H
         RACKOFF RC=0
                                                                SPACE 1
*
NOPARM   DS    0H
         MVC   HEX00,SPACES            DATA AREA NO LONGER REQUIRED
         MVC   HEX00(46),=C'Do not invoke direct. ISPF parameter requir+
               ed.'
         TPUT  HEX00,79,EDIT,WAIT,,BREAKIN,HIGHP
EXIT8    DS    0H
         RACKOFF RC=8
                                                                SPACE 1
*---------------------------------------------------------------------*
* 3350 calculations                                                   *
*---------------------------------------------------------------------*
DO3350   STM   R0,R10,SAVE3350
         LA    R3,185(R2)
         XR    R6,R6
         L     R7,=F'19254'
         DR    R6,R3
         LR    R3,R7         NUMBER OF RECORDS PER TRACK IN R3
         XR    R6,R6
         MR    R6,R2         MULTIPLY BY THE BLOCK SIZE
         M     R6,=F'100'    MULTIPLY BY 100
         D     R6,=F'19096'  DIVIDE BY MAX RECORD SIZE
         ST    R3,RPT3350
         ST    R7,PCNT3350
         LM    R0,R10,SAVE3350
         BR    R14
                                                                SPACE 1
*---------------------------------------------------------------------*
PACKIT   PACK  D,0(*-*,R2)   PACK DATA INTO DOUBLE WORD
*---------------------------------------------------------------------*
*                                                                     *
* Constants, tables etc...                                            *
*                                                                     *
*---------------------------------------------------------------------*
D        DS    D                       DOUBLE WORK WORK AREA
S        DS    CL16                    WORK AREA AVE AREA 1
SAVE3350 DS    16F                     REG SAVE ARE FOR 3350 PROCESSING
SAVE3390 DS    16F                     REG SAVE ARE FOR 3390 PROCESSING
SAVE90PC DS    F                       SAVE AREA FOR 3390 % USAGE
PCNT3350 DC    F'00'
RPT3350  DC    F'00'
MINPRCNT DC    F'85'                   MIN EFFICIENT PERCENTAGE
MINPRCN$ DC    F'95'                   MORE EFFICIENT PERCENTAGE
ABLOCK   DS    F
         DS    0D
*---------------------------------------------------------------------*
* Matrix for 3380 capacities:                                         *
*     Min block size block (in bytes)                                 *
*     Max block size block (in bytes)                                 *
*     Records per block                                               *
*---------------------------------------------------------------------*
TABLE80  DC    AL2(0),AL2(20),AL2(93)
         DC    AL2(21),AL2(52),AL2(88)
         DC    AL2(53),AL2(84),AL2(83)
         DC    AL2(85),AL2(116),AL2(78)
         DC    AL2(117),AL2(148),AL2(74)
         DC    AL2(149),AL2(180),AL2(71)
         DC    AL2(181),AL2(212),AL2(68)
         DC    AL2(213),AL2(244),AL2(65)
         DC    AL2(245),AL2(276),AL2(62)
         DC    AL2(277),AL2(308),AL2(59)
         DC    AL2(309),AL2(340),AL2(57)
         DC    AL2(341),AL2(372),AL2(55)
         DC    AL2(373),AL2(404),AL2(53)
         DC    AL2(405),AL2(436),AL2(51)
         DC    AL2(437),AL2(468),AL2(49)
         DC    AL2(469),AL2(500),AL2(48)
         DC    AL2(501),AL2(532),AL2(46)
         DC    AL2(533),AL2(564),AL2(45)
         DC    AL2(565),AL2(596),AL2(44)
         DC    AL2(597),AL2(628),AL2(42)
         DC    AL2(629),AL2(660),AL2(41)
         DC    AL2(661),AL2(692),AL2(40)
         DC    AL2(693),AL2(724),AL2(39)
         DC    AL2(725),AL2(756),AL2(38)
         DC    AL2(757),AL2(788),AL2(37)
         DC    AL2(789),AL2(820),AL2(36)
         DC    AL2(821),AL2(852),AL2(35)
         DC    AL2(853),AL2(916),AL2(34)
         DC    AL2(917),AL2(948),AL2(33)
         DC    AL2(949),AL2(980),AL2(32)
         DC    AL2(981),AL2(1044),AL2(31)
         DC    AL2(1045),AL2(1076),AL2(30)
         DC    AL2(1077),AL2(1140),AL2(29)
         DC    AL2(1141),AL2(1204),AL2(28)
         DC    AL2(1205),AL2(1268),AL2(27)
         DC    AL2(1269),AL2(1332),AL2(26)
         DC    AL2(1333),AL2(1396),AL2(25)
         DC    AL2(1397),AL2(1492),AL2(24)
         DC    AL2(1493),AL2(1588),AL2(23)
         DC    AL2(1589),AL2(1684),AL2(22)
         DC    AL2(1685),AL2(1780),AL2(21)
         DC    AL2(1781),AL2(1876),AL2(20)
         DC    AL2(1877),AL2(2004),AL2(19)
         DC    AL2(2005),AL2(2164),AL2(18)
         DC    AL2(2165),AL2(2324),AL2(17)
         DC    AL2(2325),AL2(2484),AL2(16)
         DC    AL2(2485),AL2(2676),AL2(15)
         DC    AL2(2677),AL2(2932),AL2(14)
         DC    AL2(2933),AL2(3188),AL2(13)
         DC    AL2(3189),AL2(3476),AL2(12)
         DC    AL2(3477),AL2(3860),AL2(11)
         DC    AL2(3861),AL2(4276),AL2(10)
         DC    AL2(4277),AL2(4820),AL2(9)
         DC    AL2(4821),AL2(5492),AL2(8)
         DC    AL2(5493),AL2(6356),AL2(7)
         DC    AL2(6357),AL2(7476),AL2(6)
         DC    AL2(7477),AL2(9076),AL2(5)
         DC    AL2(9077),AL2(11476),AL2(4)
         DC    AL2(11477),AL2(15476),AL2(3)
         DC    AL2(15477),AL2(23476),AL2(2)
         DC    AL2(23477),AL2(47476),AL2(1)
                                                                SPACE 1
*---------------------------------------------------------------------*
* Matrix for 3390 capacities:                                         *
*     Min block size block (in bytes)                                 *
*     Max block size block (in bytes)                                 *
*     Records per block                                               *
*---------------------------------------------------------------------*
TABLE90  DC    AL2(1),AL2(22),AL2(86)
         DC    AL2(23),AL2(56),AL2(82)
         DC    AL2(57),AL2(90),AL2(78)
         DC    AL2(91),AL2(124),AL2(75)
         DC    AL2(125),AL2(158),AL2(72)
         DC    AL2(159),AL2(192),AL2(69)
         DC    AL2(193),AL2(226),AL2(66)
         DC    AL2(227),AL2(254),AL2(64)
         DC    AL2(255),AL2(288),AL2(61)
         DC    AL2(289),AL2(322),AL2(59)
         DC    AL2(323),AL2(356),AL2(57)
         DC    AL2(357),AL2(390),AL2(55)
         DC    AL2(391),AL2(424),AL2(54)
         DC    AL2(425),AL2(458),AL2(52)
         DC    AL2(459),AL2(486),AL2(50)
         DC    AL2(487),AL2(520),AL2(49)
         DC    AL2(521),AL2(554),AL2(48)
         DC    AL2(555),AL2(588),AL2(46)
         DC    AL2(589),AL2(622),AL2(45)
         DC    AL2(623),AL2(656),AL2(44)
         DC    AL2(657),AL2(690),AL2(43)
         DC    AL2(691),AL2(718),AL2(42)
         DC    AL2(719),AL2(752),AL2(41)
         DC    AL2(753),AL2(786),AL2(40)
         DC    AL2(787),AL2(820),AL2(39)
         DC    AL2(821),AL2(854),AL2(38)
         DC    AL2(885),AL2(888),AL2(37)
         DC    AL2(889),AL2(950),AL2(36)
         DC    AL2(951),AL2(984),AL2(35)
         DC    AL2(985),AL2(1018),AL2(34)
         DC    AL2(1019),AL2(1086),AL2(33)
         DC    AL2(1087),AL2(1154),AL2(32)
         DC    AL2(1155),AL2(1182),AL2(31)
         DC    AL2(1183),AL2(1250),AL2(30)
         DC    AL2(1251),AL2(1318),AL2(29)
         DC    AL2(1319),AL2(1386),AL2(28)
         DC    AL2(1387),AL2(1482),AL2(27)
         DC    AL2(1483),AL2(1550),AL2(26)
         DC    AL2(1551),AL2(1646),AL2(25)
         DC    AL2(1647),AL2(1748),AL2(24)
         DC    AL2(1749),AL2(1850),AL2(23)
         DC    AL2(1851),AL2(1946),AL2(22)
         DC    AL2(1947),AL2(2082),AL2(21)
         DC    AL2(2083),AL2(2212),AL2(20)
         DC    AL2(2213),AL2(2376),AL2(19)
         DC    AL2(2377),AL2(2546),AL2(18)
         DC    AL2(2547),AL2(2710),AL2(17)
         DC    AL2(2711),AL2(2942),AL2(16)
         DC    AL2(2943),AL2(3174),AL2(15)
         DC    AL2(3175),AL2(3440),AL2(14)
         DC    AL2(3441),AL2(3768),AL2(13)
         DC    AL2(3769),AL2(4136),AL2(12)
         DC    AL2(4137),AL2(4566),AL2(11)
         DC    AL2(4567),AL2(5064),AL2(10)
         DC    AL2(5065),AL2(5726),AL2(9)
         DC    AL2(5727),AL2(6518),AL2(8)
         DC    AL2(6519),AL2(7548),AL2(7)
         DC    AL2(7549),AL2(8906),AL2(6)
         DC    AL2(8907),AL2(10796),AL2(5)
         DC    AL2(10797),AL2(13682),AL2(4)
         DC    AL2(13683),AL2(18452),AL2(3)
         DC    AL2(18453),AL2(27998),AL2(2)
         DC    AL2(27999),AL2(56664),AL2(1)
         LTORG
LRECL0   DC    F'0'
BSTART   DS    CL5
         DS    0F
BEND     DS    CL5
ENTRY    DS    CL5
BLKSZ    DS    CL5
LRECL    DS    CL5
BPT90    DS    CL2
PCT90    DS    CL3
BPT80    DS    CL2
PCT80    DS    CL3
BPT50    DS    CL17
         ORG   BPT50
         DS    CL14
PCT50    DS    CL3
         ORG
TRACE    DC    C'Y'                    TRACE FLAG USED FOR 'PDUMP' DEBU
EONLY    DC    CL1'N'                  EFFICIENT ONLY
EONLYF   DC    CL3'   '                EFFICIENT ONLY DEVICE MARKERS
EFFIC2   DS    CL5
EFFIC    DS    CL5
TABLE    DC    CL8'DASDBLKG'
KEEPTB   DC    CL2'NN'                 KEEP TABLE
LENCHG   DC    CL1'N'                  LENGTH CHANGED FLAG
ZCMD     DC    CL79' '
SPACES   DC    CL256' '
HEX00    DC    XL80'00'
         END
