***********************************************************************
*                        LOCAL DATE EXIT.                             *
*                                                                     *
* 1.INPUT FORMAT                                                      *
*   ------------                                                      *
*   CONVERT LOCAL DATE FORMATS TO ISO FORMATS ETC.                    *
*                                                                     *
* - INPUT LOCAL FORMAT YYYYDDD (JULIAN)                               *
* - INPUT LOCAL FORMAT YYYYMMDD(EUROPEAN)                          AK#1
*   THE TWO INPUT FORMATS ARE DIFERENTIATED BY A TRAILING "SPACE"  AK#1
*   FOR JULIAN FORMAT.                                             AK#1
*                                                                     *
* - DATES WITH '-','/' OR '.' IN POSITION 3 OR 5 ARE IGNORED BY EXIT  *
*   E.G. 01.12.1991,  OR  1991-12-31                                  *
*   (THESE CORRESPOND TO NORMAL DB2 STANDARD DATES. IF THEY ARE STILL *
*   IN WRONG FORMAT, DB2 WILL REJECT THEM.                            *
*                                                                     *
* 2. OUTPUT FORMAT                                                    *
*    -------------                                                    *
*                                                                     *
*   CONVERT DB2 DATE FORMAT TO JULIAN DATE AS THE LOCAL FORMAT.       *
*                                                                     *
*   CODE HAS BEEN INSERTED (BUT COMMENTED OUT) TO CONVERT DB2 DATE AK#1
*   TO EUROPEAN DATE. TO MAKE THIS THE ACTIVE CONVERSION UNCOMMENT AK#1
*   THE APPROPRIATE LINES AT THE INDICATED PLACE (REFER INSTREAM   AK#1
*   DOCO).                                                         AK#!
*                                                                     *
*   CHANGE SUMMARY:                                                   *
*   ==============                                                    *
*   #  BY  REASON                                                     *
*   01 GF  A CLEAN EXIT FOR VIG                                       *
*   02 GF  MERGE IN ORACLEGW DATE EXIT CODE.                          *
*   03 NH  ADD SUPPORT FOR Y2K (OLD SOURCE SAVED AS DSNXVD2O)         *
*   04 AK  ALLOW FOR EUROPEAN DATE LOCAL FORMAT. CLEAN UP DATE     AK#1
*          VALIDATION PROCESSING.                                  AK#1
*          CHANGES MADE CAN BE IENTIFIED BY THE EYECATCHER 'AK#1'. AK#1
*                                                                     *
***********************************************************************
*------------------------------------------------------------------AK#1
*******************************************************************AK#1
*        TO CHANGE THE DECODE TO LOCAL FORMAT FROM JULIAN TO       AK#1
*        EUROPEAN FORMAT TOGGLE THE COMMENT INDICATOR ON THE LINES AK#1
*        BELOW,                                                    AK#1
*******************************************************************AK#1
         LCLC  &@DECODE                                            AK#1
*@DECODE SETC  '@DECODEE'          DECODE TO EUROPEAN FORMAT       AK#1
&@DECODE SETC  '@DECODEJ'          DECODE TO JULIAN FORMAT         AK#1
*------------------------------------------------------------------AK#1
R00      EQU   00                  WORK
R01      EQU   01                  WORK
R02      EQU   02                  WORK
R03      EQU   03                  EXPL
R04      EQU   04                  DTXP
R05      EQU   05                  ISODATE
R06      EQU   06                  STRING & JULDATE
R07      EQU   07                  WORK
R08      EQU   08                  WORK
R09      EQU   09                  WORK
R10      EQU   10                  EXTDATE & JULDATE
R11      EQU   11                  EXPL WORKAREA
R12      EQU   12                  BASE
R13      EQU   13
R14      EQU   14
R15      EQU   15
***********************************************************************
ISODATE  DSECT
ISOYYYY  DS    CL4
ISOHYPNA DS    CL1
ISOMM    DS    CL2
ISOHYPNB DS    CL1
ISODD    DS    CL2
ISOLEN   EQU   *-ISODATE
***********************************************************************
*   LOCAL OUTPUT FORMAT  YYYYDDD
***********************************************************************
JULDATE  DSECT
JULYYYY  DS     CL4
JULDDD   DS     CL3
         DS     CL3
         ORG    JULDATE
JUL1     DS     CL1
JUL2     DS     CL1
JUL3     DS     CL1
JUL4     DS     CL1
JUL5     DS     CL1
JUL6     DS     CL1
JUL7     DS     CL1
JULLEN   EQU    *-JULDATE
*---------------------------------------------------------------------*
JUL8     DS     CL1                (ADDED FOR COMPLETENESS         AK#1
         ORG   ,                                                   AK#1
         ORG   JULDATE                                             AK#1
EURDATE  DS    0CL8                                                AK#1
EURYYYY  DS    CL4                                                 AK#1
EURMM    DS    CL2                                                 AK#1
EURDD    DS    CL2                                                 AK#1
         ORG   ,                                                   AK#1
*---------------------------------------------------------------------*
***********************************************************************
EXTDATE  DSECT
***********************************************************************
STRING   DSECT
CURRBYTE DS     X
NEXTBYTE DS     X
THRDBYTE DS     X
***********************************************************************
EXITPL   DSECT                     PARMLIST
EXPLPTR  DS     A                  ADDR OF EXPL
PPLPTR   DS     A                  ADDR OF PPL
***********************************************************************
*        LOCALLEN INCREASED FROM 10 TO 27 FOR ORACLEGW SUPPORT        *
***********************************************************************
LOCALLEN EQU    27                 MINIMUM AREA LENGTH FOR THIS EXIT
CORRECT0 EQU    0                  NO ERRORS
INV4     EQU    4                  INVALID DATE OR TIME VALUE
INV8     EQU    8                  DATE OR TIME VALUE NOT IN VALID FORM
ERROR12  EQU    12                 ERROR IN EXIT
***********************************************************************
LEN      EQU    0                  LENGTH OF EXTDATE(LOCAL FORMAT)
FUNC     EQU    0                  FUNCTION CODE FROM THE CALLER
***********************************************************************
EXPLW    DSECT                     EXPL WORK AREA OF 512 BYTES
SAVEAREA DS     18F
WORK     DS     10F
PACKYYYY DS     PL8
PACKMM   DS     PL8
PACKDD   DS     PL8
DECYYYY  DS     PL8
DECDDD   DS     PL8
MONTHDAYS DS    H
LEAPVAL  DS     H
***********************************************************************
*        ORACLE GW SUPPORT                                            *
***********************************************************************
LOCLEN   DS    F                   LOCAL FORMAT LENGTH
DTXODWD  DS    D                   DOUBLEWORD WORK AREA
DTXODATE DS    CL10                10 BYTE WORK AREA FOR DATE
         ORG   DTXODATE
DTXOYEAR DS    CL4                 YEAR (0001 - 9999)
DTXODSH1 DS    CL1                 DASH
DTXOMNTH DS    CL2                 MONTH (01-12)
DTXODSH2 DS    CL1                 DASH
DTXODAY  DS    CL2                 DAY (01-31)
***********************************************************************
         EJECT
DSNXVDTX CSECT
DSNXVDTX AMODE 31
DSNXVDTX RMODE ANY
         USING *,R15
         B     @PROLOG
         DC    AL1(16)
         DC    C'DSNXVDTX  &SYSDATE &SYSTIME '
         DROP  R15
         DS    0H
@PROLOG  STM   R14,R12,12(R13)
         LR    R12,R15
         USING DSNXVDTX,R12        MAKE R12 ADDRESSABLE TO THIS PROGRAM
         USING EXITPL,R01          MAKE PARM LIST ADDRESSABLE
         L     R03,EXPLPTR         GET ADDR OF EXPL
         USING EXPL,R03            MAKE EXPL ADDRESSABLE
         L     R04,PPLPTR          GET ADDR OF PPL
         USING DTXP,R04            MAKE PPL ADDRESSABLE
         DROP  R01
         L     R11,EXPLWA          GET ADDR OF EXPLW
         USING EXPLW,R11           MAKE ESPLWORK AREA ADDRESSABLE
         ST    R13,SAVEAREA+4      SAVE ADDR OF CALLERS SAVEAREA
         ST    R11,8(,R13)         SAVE ADDR OF SAVEAREA INTO CALLER
         LR    R13,R11             R13 POINTS SAVEAREA TO THIS PROGRAM
***********************************************************************
*        VERIFY LENGTH                                                *
***********************************************************************
         L     R10,DTXPLN          GET ADDR OF LOCAL FORMAT LENGTH
         LH    R09,LEN(,R10)       GET LOCAL FORMAT LENGTH DEFINED BY
*                                  THE INSTALLATION
         ST    R09,LOCLEN          SAVE IT
***********************************************************************
*        CHECK FUNCTION CODE                                          *
*        X'0004'  CONVERT LOCAL TO ISO    CALL ENCODE HERE (TO DB2)   *
*        X'0008'  CONVERT ISO TO LOCAL    CALL DECODE HERE (FROM DB2) *
***********************************************************************
         L     R05,DTXPISO         GET ADDR OF ISODATE
         USING ISODATE,R05         MAKE ISODATE AREA ADDRESSABLE
         SPACE 1
         L     R10,DTXPLOC         GET ADDR OF EXTDATE(LOCAL) AREA
         USING EXTDATE,R10
         SPACE 1
         L     R09,DTXPFN          GET ADDR OF FUNC CODE
         LH    R09,FUNC(,R09)      GET FUNCTION CODE
         SPACE 1
         C     R09,ENCODE          'CONVERT LOCAL TO ISO' REQUEST
         BE    @ENCODE             YES, GO TO THE ENCODE ROUTINE
         C     R09,DECODE          'CONVERT ISO TO LOCAL' REQUEST
         BE    &@DECODE            YES GO TO THE DECODE ROUTINE.   AK#1
         B     @RET12              INVALID FUNCTION CODE.
***********************************************************************
*        CONVERTING FROM LOCAL FORMAT TO ISO FORMAT                   *
***********************************************************************
@ENCODE  EQU   *                   CONVERT VARIOUS LOCAL TYPES TO ISO.
***********************************************************************
         LA    R06,EXTDATE         GET ADDR OF LOCAL AREA
         USING STRING,R06
         LA    R08,LOCALLEN        LOCAL AREA LENGTH REQ. BY THIS EXIT
         C     R08,LOCLEN          CHECK TO SEE IF CORRECT LENGTH  AK#1
         BE    TRYORACL            YES - OK. ORACLE GATEWAY        AK#1
***********************************************************************
*        CHECK IF NORMAL DATE                                         *
***********************************************************************
*<=====  CLI    STRING+2,C'.'      EUR ?                           AK#1
*<=====  BE     @ENDIPT            YES - OK.                       AK#1
*<=====  CLI    STRING+2,C'/'      USA ?                           AK#1
*<=====  BE     @ENDIPT            YES - OK.                       AK#1
*<=====  CLI    STRING+1,C'-'      ORACLE ?                        AK#1
*<=====  BE     TRYORACL           YES - OK.                       AK#1
*<=====  CLI    STRING+2,C'-'      ORACLE ?                        AK#1
*<=====  BE     TRYORACL           YES - OK.                       AK#1
*<=====  CLI    STRING+4,C'-'      ORACLE OR ISO ?                 AK#1
*<=====  BE     TRYORACM           YES - OK.                       AK#1
*<=====  CLI    STRING+4,C'.'      EUR ?                           AK#1
*<=====  BE     @ENDIPT            YES - OK. (INVALID !)           AK#1
*<=====  CLI    STRING+4,C'/'      USA ?                           AK#1
*<=====  BE     @ENDIPT            YES - OK. (INVALID !)           AK#1
***********************************************************************
*        START JULIAN DATE INPUT                                      *
***********************************************************************
         USING  JULDATE,R06
*------------------------------------------------------------------AK#1
         LA    R01,7                   LENGTH FOR 'EX' COMMAND     AK#1
         CLI   EXTDATE+7,C' '          Q. DATE LENGTH 8            AK#1
         BNE   VERDATE                    Y. VERIFY DATE           AK#1
         BCTR  R01,0                   -1 FOR JULIAN LENGTH        AK#1
VERDATE  DS    0H                                                  AK#1
         TRT   EXTDATE(*-*),TNUMDASH   TEST FOR NUMERIC            AK#1
         EX    R01,VERDATE             Q. ALL NUMERIC              AK#1
         BNZ   @ENDIPT                    N. END PROCESSING        AK#1
*                                                                  AK#1
         ZAP   PACKYYYY,=PL8'0'        SET TO 0                    AK#1
         ZAP   PACKDD,=PL8'0'          SET TO 0                    AK#1
         PACK  PACKYYYY+5(3),JULYYYY(4) PACK YYYY INTO DECIMAL     AK#1
         PACK  PACKDD+6(2),JULDDD(3)   PACK DD INTO DECIMAL        AK#1
         BAL   R09,@LEAPCHK            CHECK IF LEAPYEAR.          AK#1
*                                      (LEAPVAL = 1 OR 0)          AK#1
         CLI   EXTDATE+7,C' '          Q. DATE LENGTH 8            AK#1
         BE    JDATEFMT                   N. JULIAN FORMAT         AK#1
EDATEFMT DS    0H                                                  AK#1
         CLC   EURMM,=CL2'01'          Q. MONTH < 1                AK#1
         BL    @ENDIPT                    Y. END PROCESSING        AK#1
         CLC   EURMM,=CL2'12'          Q. MONTH > 12               AK#1
         BH    @ENDIPT                    Y. END PROCESSING        AK#1
*                                                                  AK#1
         CLC   LEAPVAL,=H'1'           Q. LEAP YEAR ?              AK#1
         BE    CONT#010                   Y. BYPASS                AK#1
         MVI   MONTHARR+15,C'8'        SET NO OF FEB DAYS = (2)8   AK#1
CONT#010 DS    0H                                                  AK#1
         CLC   EURDD,=CL2'01'          Q. DAY < 1                  AK#1
         BL    @ENDIPT                    Y. END PROCESSING        AK#1
         PACK  PACKMM(8),EURMM(2)      PACK MONTH                  AK#1
         CVB   R01,PACKMM              CONVERT TO BINARY           AK#1
         BCTR  R01,0                   RELATIVE MONTH #            AK#1
         SLL   R01,3                   RELATIVE OFFSET             AK#1
         LA    R00,MONTHARR            START OF TABLE              AK#1
         AR    R01,R00                 ADD OFFSET INTO TABLE       AK#1
         CLC   EURDD,6(R01)            Q. DAY > DAYS IN MONTH      AK#1
         BH    @ENDIPT                    Y. END PROCESSING        AK#1
         MVC   ISOMM,EURMM             MOVE MONTH TO CHARS IN ISO  AK#1
         MVC   ISODD,EURDD             MOVE MONTH TO CHARS IN ISO  AK#1
         B     MOVESEPS                GO MOVE SEPERATORS (& YEAR) AK#1
*                                                                  AK#1
JDATEFMT DS    0H                                                  AK#1
         CLC   JULDDD,=CL3'001'        Q. DAY < 1                  AK#1
         BL    @ENDIPT                    Y. END PROCESSING        AK#1
***********************************************************************
*        JULIAN DATE FOUND                                            *
***********************************************************************
         CLC   LEAPVAL,=H'1'           Q. LEAP YEAR ?              AK#1
         BNE   NONLEAPT                   N. NON LEAP LIMIT TEST   AK#1
         CLC   JULDDD,=CL3'366'        Q. DAY > 366                AK#1
         BH    @ENDIPT                    Y. END PROCESSING        AK#1
         B     LEAPDDD0                CONTINUE PROCESSING         AK#1
NONLEAPT DS    0H                                                  AK#1
         CLC   JULDDD,=CL3'365'        Q. DAY > 365                AK#1
         BH    @ENDIPT                    Y. END PROCESSING        AK#1
LEAPDDD0 DS    0H                                                  AK#1
*------------------------------------------------------------------AK#1
*                                  (LEAPVAL = 1 OR 0)
         CVB    R08,PACKDD         GET DAYS  INTO R7
         LA     R07,12             SET R07 TO 12
         LH     R09,=H'02'         INITIALISE R09 POINTER INTO TABLE
***********************************************************************
*        GO THROUGH MONTHTAB - SUB EACH MONTH IN TURN STARTING IN JAN.*
*        TO OBTAIN CURRENT MONTH . *
***********************************************************************
@LOOPDDD EQU    *
         SH     R08,MONTHTAB(R09)  SUBTRACT #DAYS IN MONTH
         CH     R09,=H'4'          POINTING TO FEBRUARY ?
         BNE    @NOTFEB1           NO - SKIP
         SH     R08,LEAPVAL        YES- SUBSTRACT 1 IF LEAPYEAR.
@NOTFEB1 EQU    *
         LTR    R08,R08            IS THIS -VE ?
         BNP    @FOUNDMM           FOUND MONTH FOR THIS DATE.
         AH     R09,=H'02'         POINT TO NEXT ENTRY IN MONTHTAB
         BCT    R07,@LOOPDDD       ADD #DAYS IN PREV. MONTH TILL 0.
@FOUNDMM EQU    *
         AH     R08,MONTHTAB(R09)  ADD #DAYS IN MONTH BACK AGAIN
         CH     R09,=H'4'          POINTING TO FEBRUARY ?
         BNE    @NOTFEB2           NO - SKIP
         AH     R08,LEAPVAL        YES- ADD 1 IF LEAPYEAR.
@NOTFEB2 EQU    *
         SRL    R09,1              HALVE R9 ==> MONTH #
         CVD    R09,PACKMM         SAVE CURRENT MONTH
         CVD    R08,PACKDD         SAVE # DAYS IN THIS MONTH
*<=====  MVC    ISOYYYY,JULYYYY    ISO YEARS                       AK#1
         UNPK   ISOMM(2),PACKMM    UNPK MONTH TO CHARS  IN ISO
         OI     ISOMM+1,X'F0'      ENSURE CHAR DISPLAY.
         UNPK   ISODD(2),PACKDD    UNPK MONTH TO CHARS  IN ISO
         OI     ISODD+1,X'F0'      ENSURE CHAR DISPLAY.
MOVESEPS EQU    *                                                  AK#1
         MVC    ISOYYYY,JULYYYY    ISO YEARS                       AK#1
         MVI    ISOHYPNA,C'-'
         MVI    ISOHYPNB,C'-'
***********************************************************************
*        END  JULIAN DATE INPUT                                       *
***********************************************************************
@ENDIPT  EQU    *                  RETURN
         MVC    EXTDATE(LOCALLEN),BLANKS CLEAR INPUT AREA FOR NEXT
         B      @RET0
***********************************************************************
*        CHECK FOR ORACLE DATE FORMAT DD-MON-YY OR D-MON-YY           *
*        SUPPORT FOR ORACLEGW PRODUCT                                 *
***********************************************************************
TRYORACL MVC   DTXODATE,=C'1900-00-00'    SETUP BACKGROUND PATTERN
         SLR   R02,R02             ZERO R2
         LR    R01,R10             ADDRESS OF LOCAL DATE
         SL    R01,=F'1'           -1 FOR EXECUTED TRT
         LR    R09,R10             GET ADDRESS OF DAY
         LA    R07,2               SCAN FIRST 3 (LEN-1) BYTES OF
         EX    R07,TNDTRT          DATE FOR "DD-" OR "D-"
         BC    2,DTX1000           CC2 MEANS "NN-"
         BC    11,@ENDIPT          CC1 MEANS "N-"  (PROBABLY)
         LR    R00,R01
         SR    R00,R09
         C     R00,=F'1'           LENGTH OF "N" MUST BE 1
         BNE   @ENDIPT
         MVC   DTXODAY+1(1),0(R09) MOVE IN 1 BYTE OF DAY
         B     DTX1100
DTX1000  MVC   DTXODAY,0(R09)      MOVE IN 2 BYTE DAY
DTX1100  C     R02,=F'1'
         BNE   @ENDIPT             LAST CHAR NOT A DASH "-"
         SLR   R08,R08             ZERO R8
         LA    R09,1(,R01)         GET ADDRESS OF MONTH ABBREV
         LA    R07,3               SCAN NEXT 4 (LEN-1) BYTES OF
         EX    R07,TADTRT          DATE FOR "MON-" OR "MN-"
*            (SOME LANGUAGES HAVE 2 CHARACTER ABBREVIATIONS FOR MONTHS)
         BC    2,DTX1200           CC2 MEANS "AAA-"
         BC    11,@ENDIPT          CC1 MEANS "AA-"  (PROBABLY)
         LR    R00,R01
         SR    R00,R09
         C     R00,=F'2'           LENGTH OF "AA" MUST BE 2
         BNE   @ENDIPT
         ICM   R08,B'1100',0(R09)  INSERT MN INTO R8 - MNXX
         O     R08,=X'40400000'    CHEAP WAY TO UPPERCASE A-Z
         B     DTX1300
DTX1200  ICM   R08,B'1110',0(R09)  INSERT MON INTO R8 - MONX
         O     R08,=X'40404000'    CHEAP WAY TO UPPERCASE A-Z
DTX1300  LA    R09,1(,R01)         GET ADDRESS OF YEAR
         LA    R07,2               SCAN NEXT 3 (LEN-1) BYTES OF
         EX    R07,TNDTRT          DATE FOR "YY " OR "Y "
         BC    2,DTX1400           CC2 MEANS "NN "
         BC    11,@ENDIPT          CC1 MEANS "N "  (PROBABLY)
         LR    R00,R01
         SR    R00,R09
         C     R00,=F'1'           LENGTH OF "N" MUST BE 1
         BNE   @ENDIPT
         MVC   DTXOYEAR+3(1),0(R09) MOVE IN 1 BYTE OF YEAR
         B     DTX1500
DTX1400  MVC   DTXOYEAR+2(2),0(R09) MOVE IN 2 BYTE YEAR
*                      Y2K RELATED CHANGE
         CLC   DTXOYEAR+2(2),YEAR2000     IS 2 CHAR YEAR = 29
         BH    DTX1500                    IF HIGHER LEAVE AS 1900
         MVC   DTXOYEAR(2),Y2000          ELSE MOVE IN 20 PREFIX
*                      Y2K RELATED CHANGE
DTX1500  C     R02,=F'3'
         BNE   @ENDIPT             LAST CHAR NOT A BLANK
         LR    R07,R10             ADDRESS OF LOCAL DATE
         AL    R07,LOCLEN          ADD LENGTH OF LOCAL DATE
         SLR   R07,R01             CALCULATE BYTES LEFT
         SL    R07,=F'1'           - 1 FOR CLC
         EX    R07,CLCBLANK        TEST REMAINDER FOR BLANKS
         BNE   @ENDIPT
         LA    R07,12
         LA    R09,MONTHARR
DTX1600  C     R08,0(,R09)         MONTH EQUAL?
         BE    DTX1700
         LA    R09,8(,R09)         BUMP TO NEXT TABLE ENTRY
         BCT   R07,DTX1600
         B     @ENDIPT             MONTH NOT IN TABLE
DTX1700  CLC   DTXODAY,6(R09)      IF DAY > DAYS IN MONTH
         BH    @ENDIPT             NOT VALID
         MVC   DTXOMNTH,4(R09)     MOVE IN MONTH FROM TABLE
         MVC   0(10,R05),DTXODATE  RETURN DATE/FALL THRU TO 0
         B     @ENDIPT             MONTH NOT IN TABLE
***********************************************************************
*        CHECK FOR ORACLE DATE FORMAT YYYY-MM-DD-HH.MM.SS.UUUUUU      *
*        NOTE THAT ORACLE DATES CAN ACUALLY INCLUDE A TIME. THEY DO   *
*        NOT HAVE A TIMESTAMP FORMAT. ALSO THE TIME IS NOT MANDATORY. *
*        ALSO THE MM AND THE DD MAU NOT HAVE LEADING ZEROES.          *
*        SUPPORT FOR ORACLEGW PRODUCT                                 *
***********************************************************************
TRYORACM SLR   R02,R02             ZERO R2
         LR    R01,R10             ADDRESS OF LOCAL DATE
         SL    R01,=F'1'           -1 FOR EXECUTED TRT
         LA    R07,4               SCAN FIRST 5 (LEN-1) BYTES OF
         EX    R07,TNDTRT          TIMESTAMP FOR "YYYY-"
         BC    13,@ENDIPT          ONLY CC2 MEANS "NNNN-"
         C     R02,=F'1'
         BNE   @ENDIPT             LAST CHAR NOT A DASH "-"
         LA    R09,1(,R01)         GET ADDRESS OF MONTH
         LA    R07,2               SCAN NEXT 3 (LEN-1) BYTES OF
         EX    R07,TNDTRT          TIMESTAMP FOR "MM-" OR "M-"
         BC    2,DTX0100           CC2 MEANS "NN-"
         BC    11,@ENDIPT          CC1 MEANS "N-"  (PROBABLY)
         LR    R00,R01
         SR    R00,R09
         C     R00,=F'1'           LENGTH OF "N" MUST BE 1
         BNE   @ENDIPT
DTX0100  C     R02,=F'1'
         BNE   @ENDIPT             LAST CHAR NOT A DASH "-"
         LA    R09,1(,R01)         GET ADDRESS OF DAY OF MONTH
         LA    R07,2               SCAN NEXT 3 (LEN-1) BYTES OF
         EX    R07,TNDTRT          TIMESTAMP FOR "DD-" OR "D-"
         BC    2,DTX0200           CC2 MEANS "NN-"
         BC    11,@ENDIPT          CC1 MEANS "N-"  (PROBABLY)
         LR    R00,R01
         SR    R00,R09
         C     R00,=F'1'           LENGTH OF "N" MUST BE 1
         BNE   @ENDIPT
DTX0200  C     R02,=F'1'
         BNE   @ENDIPT             LAST CHAR NOT A DASH "-"
         LR    R07,R01
         SR    R07,R06
         BCTR  R07,R00             LENGTH - 1 FOR MVC
         MVC   0(10,R05),BLANKS40  BLANK OUT DTXPISO FIRST
         EX    R07,MVCDATE         N BYTES OF DTXPLOC TO DTXPISO
         LA    R09,1(,R01)         GET ADDRESS OF HOUR
         LA    R07,2               SCAN NEXT 3 (LEN-1) BYTES OF
         EX    R07,TNDTRT          TIMESTAMP FOR "HH." OR "H."
         BC    2,DTX0300           CC2 MEANS "NN."
         BC    11,@ENDIPT          CC1 MEANS "N."  (PROBABLY)
         LR    R00,R01
         SR    R00,R09
         C     R00,=F'1'           LENGTH OF "N" MUST BE 1
         BNE   @ENDIPT
DTX0300  C     R02,=F'2'
         BNE   @ENDIPT             LAST CHAR NOT A PERIOD "."
         LA    R07,2               SCAN NEXT 3 (LEN-1) BYTES OF
         EX    R07,TNDTRT          TIMESTAMP FOR "MI."
         BC    13,@ENDIPT          ONLY CC2 MEANS "NN."
         C     R02,=F'2'
         BNE   @ENDIPT             LAST CHAR NOT A PERIOD "."
         LA    R07,2               SCAN NEXT 3 (LEN-1) BYTES OF
         EX    R07,TNDTRT          TIMESTAMP FOR "SS." OR "SS "
         BC    13,@ENDIPT          ONLY CC2 MEANS "NN." OR "NN "
         C     R02,=F'2'
         BNE   DTX0500             LAST CHAR NOT A PERIOD "."
         LR    R07,R06             ADDRESS OF LOCAL DATE
         AL    R07,LOCLEN          ADD LENGTH OF LOCAL DATE
         SLR   R07,R01             CALCULATE BYTES LEFT
         C     R07,=F'8'           IF FEWER THAN 7 BYTES, USE IT
         BL    DTX0400
         LA    R07,8               SCAN NEXT 7
DTX0400  S     R07,=F'2'           - 1 FOR TRT, -1 FOR OFFSET
         BM    @ENDIPT             NOTHING LEFT, IT IS OK
         EX    R07,TNDTRT          SCAN TIMESTAMP FOR "UUUUUU "
         BC    8,@ENDIPT           ONLY CC0 MEANS "UUUUUU"
         BC    2,DTX0500           ONLY CC2 MEANS "UUUUUU "
*                                  CC1 PROBABLY MEANS WE FOUND
*                                  A BLANK EARLY - " ", "U " UP
*                                  TO "UUUUU "
DTX0500  C     R02,=F'3'
         BNE   @ENDIPT             LAST CHAR NOT A BLANK " "
         LR    R07,R06             ADDRESS OF LOCAL DATE
         AL    R07,LOCLEN          ADD LENGTH OF LOCAL DATE
         SLR   R07,R01             CALCULATE BYTES LEFT
         SL    R07,=F'1'           - 1 FOR CLC
         EX    R07,CLCBLANK        TEST REMAINDER FOR BLANKS
         BE    @ENDIPT
         B     @ENDIPT
*------------------------------------------------------------------AK#1
*******************************************************************AK#1
*        CONVERTING INTERNAL ISO FORMAT TO LOCAL (EUROPIAN) FORMAT AK#1
***********************************************************************
@DECODEE EQU    *                                                  AK#1
         MVC    EURYYYY,ISOYYYY    MOVE YEAR INTO LOCAL DATE.      AK#1
         MVC    EURMM,ISOMM        MOVE MONTH INTO LOCAL DATE.     AK#1
         MVC    EURDD,ISODD        MOVE MONTH INTO LOCAL DATE.     AK#1
         MVC    EURDATE+8(2),=CL2' ' BLANK OUT REST.               AK#1
         B      @RET0              RETURN CODE 0                   AK#1
*------------------------------------------------------------------AK#1
***********************************************************************
*        CONVERTING INTERNAL ISO FORMAT TO LOCAL (JULIAN) FORMAT      *
***********************************************************************
@DECODEJ EQU    *                                                  AK#1
         USING  JULDATE,R10        MAKE EXTDATE ADDRESSABLE AS LOCAL
         ZAP    PACKYYYY,=PL8'0'   SET TO 0
         ZAP    PACKMM,=PL8'0'     SET TO 0
         ZAP    PACKDD,=PL8'0'     SET TO 0
         PACK   PACKYYYY+5(3),ISOYYYY(4) PACK YYYY INTO DECIMAL
         PACK   PACKMM+6(2),ISOMM(2)     PACK MM INTO DECIMAL
         PACK   PACKDD+6(2),ISODD(2)     PACK DD INTO DECIMAL
         CVB    R07,PACKMM         GET MONTH INTO R7
         S      R07,=F'1'          SUBTRACT 1 FOR CURRENT MONTH
         SR     R08,R08            SET R08 TO 0.
         LTR    R07,R07            IS R7 0 ALREADY ?
         BZ     @ADD#DD            YES - JUST ADD # DAYS.
         LH     R09,=H'02'         INITIALISE R09 POINTER INTO TABLE
***********************************************************************
*GO THROUGH MONTHTAB - ADD EACH MONTH IN TURN STARTING AT HIGHEST MONTH
*UNTIL JAN TO OBTAIN TOTAL # DAYS UP TO CURRENT MONTH.
***********************************************************************
@LOOPMM  EQU    *
         AH     R08,MONTHTAB(R09)  ADD #DAYS IN MONTH TO TOTAL
         AH     R09,=H'02'         POINT TO NEXT ENTRY IN MONTHTAB
         BCT    R07,@LOOPMM        ADD #DAYS IN PREV. MONTH TILL 0.
         STH    R08,MONTHDAYS      SAVE # DAYS IN MONTHS ONLY
         BAL    R09,@LEAPCHK       GO CHECK LEAPYEAR.
         LH     R08,MONTHDAYS      GET # DD IN PRIOR MONTHS
         CH     R08,=H'59'         IS DATE PAST 29TH FEB ?
         BL     @DONTADD           DATE TOO LOW
         AH     R08,LEAPVAL        ADD THE LEAP YEAR VALUE TO TOTAL
*                                  1 IF LEAP, 0 IF NOT.
@DONTADD EQU    *
***********************************************************************
*        ADD DD TO # OF DAYS IN MONTHS SO FAR.                        *
***********************************************************************
@ADD#DD  EQU    *
         CVB    R07,PACKDD         GET DAYS INTO R07
         AR     R08,R07            ADD TO TOTAL DAYS SO FAR.
         CVD    R08,DECDDD         DECIMAL VALUE FOR DDD
         OI     DECDDD+7,X'0F'     SET SIGN DIGIT TO F
         UNPK   JULDDD(3),DECDDD+6(2)  CHAR FORMAT INTO JULDDD
         MVC    JULYYYY,ISOYYYY    MOVE YEAR INTO LOCAL DATE.
         MVC    JULDATE+7(3),=CL3' '   BLANK OUT REST.
***********************************************************************
*        JULIAN DATE FORMAT - END                                     *
***********************************************************************
@RET0    LA     R00,CORRECT0
@END     EQU    *
         STH    R00,EXPLRC1        SET THE RETURN CODE
         L      R13,SAVEAREA+4     MOVE MONTH PORTION
         LM     R14,R12,12(R13)
         BR     R14
@RET8    LA     R00,INV8           SET RETURN CODE TO 8
         B      @END
@RET12   LA     R00,ERROR12        SET RETURN CODE TO 12
         B      @END
***********************************************************************
*        LEAPYEAR SUBROUTINE                                          *
***********************************************************************
@LEAPCHK EQU    *
*        LEAPYEAR IF DIVISIBLE BY 400
         ZAP    DECYYYY,PACKYYYY   MOVE YEAR TO DECYYYY WORK AREA
         DP     DECYYYY,=PL4'400'  DIVIDE BY 400
         CP     DECYYYY+4(4),=PL4'0'  IS REMAINDER ZERO ?
         BZ     @LEAP              YES - ITS A LEAPYEAR !
*
*        NO LEAPYEAR IF DIVISIBLE BY 100
         ZAP    DECYYYY,PACKYYYY   MOVE YEAR TO DECYYYY WORK AREA
         DP     DECYYYY,=PL4'100'  DIVIDE BY 100
         CP     DECYYYY+4(4),=PL4'0'  IS REMAINDER ZERO ?
         BZ     @NOLEAP            YES - ITS NOT A LEAPYEAR !
* *
*        LEAPYEAR IF DIVISIBLE BY 4
         ZAP    DECYYYY,PACKYYYY   MOVE YEAR TO DECYYYY WORK AREA
         DP     DECYYYY,=PL4'4'    DIVIDE BY 4
         CP     DECYYYY+4(4),=PL4'0'  IS REMAINDER ZERO ?
         BNZ    @NOLEAP            NO  - ITS NOT A LEAPYEAR !
@LEAP    EQU    *
         MVC    LEAPVAL,=H'1'      SET LEAPVAL TO 1
         B      @LEAPRET           GOTO RETURN
@NOLEAP  EQU    *
         MVC    LEAPVAL,=H'0'      SET LEAPVAL TO 0
@LEAPRET EQU    *
         BR     R09                BACK TO CALLING ADDRESS
***********************************************************************
@INVDATE EQU    @RET8
***********************************************************************
*        CONSTANTS FOR BASE EXIT                                      *
***********************************************************************
N01      DC      CL2'01'
N12      DC      CL2'12'
N31      DC      CL2'31'
N32      DC      CL2'32'
N99      DC      CL2'99'
BLANKS   DC      CL10' '
ENCODE   DC      F'4'              CONVERT LOCAL TO ISO REQUEST
DECODE   DC      F'8'              CONVERT ISO TO LOACL REQUEST
MONTHTAB DC      H'0,31,28,31,30,31,30,31,31,30,31,30,31'
ZDTBL    DC      240X'FF',10X'00',6X'FF'
         DS      0F
***********************************************************************
*        CONSTANTS FOR ORACLE GATEWAY SUPPORT                         *
***********************************************************************
MVCDATE  MVC   0(0,R05),0(R10)     N BYTES OF DTXPLOC TO DTXPISO
CLCBLANK CLC   0(0,R01),BLANKS40   COMPARE 0(R1) AGAINST BLANKS
TNDTRT   TRT   1(0,R01),TNUMDASH
TADTRT   TRT   1(0,R01),TALPDASH
BLANKS40 DC    40C' '
*                      Y2K RELATED CHANGE
YEAR2000 DC    2C'30'                2 DIGIT NUMB FOR YEAR BREAK
Y2000    DC    2C'20'                2 DIGIT NUMB FOR YEAR 2000 PREFIX
*                      Y2K RELATED CHANGE
TNUMDASH DC    256XL1'FF'
         ORG   TNUMDASH+C'0'
         DC    AL1(0,0,0,0,0,0,0,0,0,0)   NUMBERS 0 TO 9 ARE CODE 0
         ORG   TNUMDASH+C'-'
         DC    AL1(1)                     DASH IS CODE 1
         ORG   TNUMDASH+C'.'
         DC    AL1(2)                     PERIOD IS CODE 2
         ORG   TNUMDASH+C' '
         DC    AL1(3)                     BLANK IS CODE 3
         ORG
*
* SPECIAL NOTE: FOR NATIONAL LANGUAGE SUPPORT, THE FOLLOWING TABLE
* WILL NEED TO HAVE 0'S PLACED IN ANY LOCATIONS THAT ARE VALID
* ALPHABETIC CHARACTERS IN THE LANGUAGE TO BE SUPPORTED
*
TALPDASH DC    256XL1'FF'
         ORG   TALPDASH+C'A'
         DC    AL1(0,0,0,0,0,0,0,0,0)     LETTERS A TO I ARE CODE 0
         ORG   TALPDASH+C'J'
         DC    AL1(0,0,0,0,0,0,0,0,0)     LETTERS J TO R ARE CODE 0
         ORG   TALPDASH+C'S'
         DC    AL1(0,0,0,0,0,0,0,0)       LETTERS S TO Z ARE CODE 0
         ORG   TALPDASH+C'A'
         DC    AL1(0,0,0,0,0,0,0,0,0)     LETTERS A TO I ARE CODE 0
         ORG   TALPDASH+C'J'
         DC    AL1(0,0,0,0,0,0,0,0,0)     LETTERS J TO R ARE CODE 0
         ORG   TALPDASH+C'S'
         DC    AL1(0,0,0,0,0,0,0,0)       LETTERS S TO Z ARE CODE 0
         ORG   TALPDASH+C'-'
         DC    AL1(1)                     DASH IS CODE 1
         ORG
         DS    0D                         FORCE TABLE TO DOUBLEWORD
MONTHARR DC    C'JAN',AL1(0),C'01',C'31'
         DC    C'FEB',AL1(0),C'02',C'29'
         DC    C'MAR',AL1(0),C'03',C'31'
         DC    C'APR',AL1(0),C'04',C'30'
         DC    C'MAY',AL1(0),C'05',C'31'
         DC    C'JUN',AL1(0),C'06',C'30'
         DC    C'JUL',AL1(0),C'07',C'31'
         DC    C'AUG',AL1(0),C'08',C'31'
         DC    C'SEP',AL1(0),C'09',C'30'
         DC    C'OCT',AL1(0),C'10',C'31'
         DC    C'NOV',AL1(0),C'11',C'30'
         DC    C'DEC',AL1(0),C'12',C'31'
***********************************************************************
         EJECT
         LTORG
         PRINT   GEN
         DSNDEXPL                     DSECT FOR EXPL LIST
         DSNDDTXP                     DSECT FOR PARM LIST
         END     DSNXVDTX
