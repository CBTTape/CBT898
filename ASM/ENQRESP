*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       Title:    'DISPLAY RESERVES'
**       System:   N/A
**       Module:   ENQRESP
**       Program:  ENQRESP
**       Function: Provides all reserve details by task.
**
**                 This program may be run under the following
**                 environments:
**                 1. TSO - Either direct "ENQRESP parameter"
**                    "CALL 'Loadlibrary(ENQRESP)' 'parameter'"
**                    Permissable parameter under TSO is "ISPF".
**                    If the parameter is not passed, the display will
**                    be through line by line TPUTS. With the para-
**                    meter, under an ISPF environment with panel
**                    "ENQRES" in the 'ispplib' concatenation, the
**                    data will be presented in either a table or a
**                    panel display if no enq's found.
**                 2. BATCH - Either as a job or as a started task:
**                    JCL required is,
**                    //STEP1    EXEC  PGM=ENQENQP,PARM='SDSF'
**                    //STEPLIB  DD DISP=SHR,DSN=loadlib.dsn
**
**       AUTHOR:   A. KARA.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*        PRINT OFF
*        COPY  @MACROS                 COMMON MACROS
*        PRINT ON
ENQRESP  KICKOFF (R11,R12),WORKAREA,WORKLEN,LIST=NO,HELP=NO
*---------------------------------------------------------------------*
START    DS    0H
         LR    R7,R1                   CPPL ADDR
         ST    R1,CPPLSAVR             STORE REGISTER 1 LATER USE
         USING CPPL,R7                 ADDRESABILITY TO CPPL
         BAL   R14,GETMAIN1            GO AND GET WORK AREA
RETGETM  DS    0H
         MVC   GQSCAN1(GQSCANL),GQSCANF MOVE LIST AREA TO GETMAIN
         ZAP   SEQ#(3),=PL3'0'         INITIALISE SEQUENCE NUMBER
         MVI   SORTFLAG,C'Y'           TURN SORT FLAG ON
         MVI   ENVMNT,C'N'             SIGNAL NON-ISPF ENVIRONMENT
         MVC   MESSAGEH(79),=C'----------------------------- ENQUEUE ACT
               TIVITY --------------------------------'
         MVI   MESSAGET,C'-'           CLEAR MESSAGE TAIL
         MVC   MESSAGET+1(78),MESSAGET     AREA
         MVC   TIME(8),=C'..:..:..'    TIME TEMPLATE
         BAL   R14,TIMERTN             FORMAT TIME INTO VAR TIME
         MVC   MESSAGEH(8),TIME        MOVE TIME TO HEADER
         MVI   MESSAGEH+8,C' '         MOVE SEPERATOR
         LA    R1,TPUTRTN              LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE ROUTINE ADDRESS
         ST    R1,RTNADRS2             STORE ROUTINE ADDRESS
*        MVI   ENVMNT,C'I'             SIGNAL ISPF ENVIRONMENT
*        B     CONT#11                 CONTINUE PROCESSING
         L     R6,CPPLCBUF             GET COMMAND BUFFER ADDR
*---------------------------------------------------------------------*
*  BEFORE PROCESSING COMMAND BUFFER TEST IF CONVENTINOAL PARAMETER
*  PASSED THROUG A JOB OR STC...
*---------------------------------------------------------------------*
         L     R7,0(R7)                LOAD ADDRESS OR PARAMETER
         LH    R9,0(R7)                LOAD LENGTH OF PARAMETER
         LTR   R9,R9                   Q. IS PARAMETER LENGTH ZERO
         BZ    NOPARAM                    Y. GO PROCESS 'SYSIN'
         LA    R8,2(R7)                POINT PAST PARAMETER LENGTH
         MVC   DWORK8(4),0(R8)         MOVE PARAMETER PASSED
         OC    DWORK8(4),SPACES        CONVERT TO UPPER CASE
TSTISPF1 DS    0H
         CLC   DWORK8(4),=C'ISPF'      Q. IN AN ISPF ENVIRONMENT
         BE    PROCISPF                   Y. GO PROCESS ISPF PARM
TSTSDSF1 DS    0H
         CLC   DWORK8(4),=C'SDSF'      Q. IN AN SDSF ENVIRONMENT
         BE    PROCSDSF                   Y. GO PROCESS SDSF PARM
TSTTSO1  DS    0H
         CLC   DWORK8(3),=C'TSO'       Q. IN AN TSO ENVIRONMENT
         BE    PROCTSO                    Y. GO PROCESS FOR TSO ENV
NOPARAM  DS    0H
         LH    R9,0(R6)                TOTAL COMMAND LENGTH
         SH    R9,=H'2'                SUBTRACT LENGTH OF ITSELF
         LH    R3,2(R6)                OPERAND DISPLACEMENT
         SR    R9,R3                   SUBTRACT LENGTH OF COMMAND PART
         BZ    PROCISPF                IF ZERO NO PARAMETER PASSED
         SH    R9,=H'2'                SUBTRACT LENGTH PARAMETER
         LA    R8,4(R6)                ADDR OF START OF COMMAND
         AR    R8,R3                   ADD DISPLACEMENT TO OPERAND
         STH   R9,TASKNAML             STORE TASK NAME
         MVC   DWORK8(4),0(R8)         MOVE PARAMETER PASSED
         OC    DWORK8(4),SPACES        CONVERT TO UPPER CASE
TSTISPF2 DS    0H
         CLC   DWORK8(4),=C'ISPF'      Q. IN AN ISPF ENVIRONMENT
         BE    PROCISPF                   Y. PROCESS ISPF
         CLC   DWORK8(4),=C'SDSF'      Q. IN AN SDSF ENVIRONMENT
         BE    PROCSDSF                   Y. PROCESS SDSF
         CLC   DWORK8(3),=C'TSO'       Q. IN AN TSO ENVIRONMENT
         BE    PROCTSO                    Y. PROCESS TSO
PROCISPF DS    0H
         ISPINIT MF=E                  INITIALISE PROGRAM'S ISPF ENV
         MVI   ENVMNT,C'I'             SIGNAL ISPF ENVIRONMENT
         LA    R1,TBADDRTN             LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE ROUTINE ADDRESS
         LA    R1,TBDISRTN             LINE MESSAGE ADDRESS
         ST    R1,RTNADRS2             STORE ROUTINE ADDRESS
         BAL   R14,DEFISPF             GO AND DEFINE ISPF AND TABLE
         CLI   ENVMNT,C'I'             Q. HAS ENVIRONMENT CHANGED
         BNE   PROCTSO                    Y. PROCESS NON-ISPF ACTION
         B     CONT#111                CONTINUE PROCESSING
PROCSDSF DS    0H
         MVI   ENVMNT,C'S'             SIGNAL SDSF ENVIRONMENT
         LA    R1,WTORTN               LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE ROUTINE ADDRESS
         ST    R1,RTNADRS2             STORE ROUTINE ADDRESS
         MVC   WTODET1(WTODETL),WTODETF MOVE WTO DATA TO GETMAINED
         MVC   MESSAGEH+72(7),SPACES   CLEAR LAST BIT OF MESSAGE LINE
         MVI   MESSAGEH,C'-'           REPLACE '-' OVER DATE AS SDSF
         MVC   MESSAGEH+1(8),MESSAGEH      ALREDY HAS TIME STAMP
         MVC   MESSAGET+72(7),SPACES   CLEAR LAST BIT OF MESSAGE LINE
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE AREA
         L     R15,RTNADRS1            LOAD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         B     CONT#11                 CONTINUE PROCESSING
PROCTSO  DS    0H
         L     R1,CPPLSAVR             RESTORE REGISTER 1 LATER USE
         CALL  CLEARSCR                CALL CLEAR SCREEN PROGRAM
CONT#11  DS    0H
         MVC   MESSAGEG(L'MESSAGEG),MESSAGEH MOVE HEADLINE
         L     R15,RTNADRS1            LOAD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
CONT#111 DS    0H
         MVI   SKEY,C'1'               SET SORTKEY
         MVI   SKEY1,C'1'              SET SORTKEY
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE AREA
*        MVC   MESSAGEG(11),=C'All tasks :'
*        L     R15,RTNADRS1            LOAD LINE ROUTINE ADDRESS
*        BALR  R14,R15                 PUT OUT LINE MESSAGE
         MVI   SKEY,C'2'               SET SORTKEY
         MVI   SKEY1,C'2'              SET SORTKEY
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE AREA
         L     R15,RTNADRS1            LOAD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         XC    TOKEN@,TOKEN@           INITIALISE TOKEN ADDRESS
         XC    RIBCNTR,RIBCNTR         INITIALISE RIB CNTR REPORT #
         MVI   SKEY,C'3'               SET SORTKEY
         MVI   SKEY1,C'3'              SET SORTKEY
ISSUE0   DS    0H
         BAL   R14,ISSUE1              GO ISSUE 'GQSCAN' MACRO
         XR    R15,R15                 INITIALISE R15
         ICM   R15,B'1111',MORERIBS    Q. MORE RIB'S RETURNED
         BNZ   ISSUE0                     Y. GOGET NEXT
FOUNDEQ DS    0H
         CLI   ENVMNT,C'I'             Q. ISPF ENVIRONMENT
         BNE   EXITPRG0                   Y. NO EXIT PROGRAM
LASTDISP DS    0H
         L     R15,RTNADRS2            LOAD FINAL MESSAGE ROUTINE
         BALR  R14,R15                 GO PERFORM FINAL ROUTINE
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    CONT#111                   Y. REDISPLAY
EXITPRG0 DS    0H
         L     R1,MYARPTR1             SET FREEMAIN ADDRESS
         FREEMAIN RC,LV=GETMAINL,A=(1) FREE THE WORK AREA
         RACKOFF RC=0
*---------------------------------------------------------------------*
GETOUT4  DS    0H
         RACKOFF RC=4                  GET OUT (OK TO USE NON-RE EXIT)
*---------------------------------------------------------------------*
EXITPRG8 DS    0H
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE
         MVC   MESSAGEG(19),=C'INVALID PARAMETER '''
         MVC   MESSAGEG+19(4),0(R8)    MOVE PASSED PARAMETER
         MVC   MESSAGEG+23(9),=C''' PASSED.'
         TPUT  MESSAGEG,79,EDIT,WAIT,,BREAKIN,HIGHP
         L     R1,MYARPTR1             SET FREEMAIN ADDRESS
         FREEMAIN RC,LV=GETMAINL,A=(1) FREE THE WORK AREA
GETOUT8  DS    0H
         RACKOFF RC=8
*=====================================================================*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
GETMAIN1 DS    0H
         GETMAIN RC,LV=GETMAINL        ACQUIRE A WORK AREA
         LTR   R15,R15                 Q. ZERO RETURN CODE FROM GETMAIN
         BNZ   GETOUT4                    Y. CONTINUE PROCESSING
         LR    R10,R1                  USE R10 AS GETMAIN POINTER
         USING GETMAINA,R10            ESTABLISH ADDRESABILITY
         ST    R10,MYARPTR1            STORE GETMAIN ADDRESS
         B     RETGETM                 RETURN TO CALLER
*---------------------------------------------------------------------*
GETMLENG DC    A(GETMAINL)             GET MAIN LENGTH
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*   ISSUE THE QSCAN MACRO AND PARSE THE DATA RETURNED, FORMAT IT AND  *
*   DISPLAY IT.                                                       *
*   PARSE THE RETURNED RESOURCE AND IF THE LENGTH IS GREATER THAN     *
*   63 CHARACTERS, REPLACE THE LAST BYTE BY '>' TO UNDICATE TRUNCATION*
*   HAS OCCURED.                                                      *
*---------------------------------------------------------------------*
ISSUE1   DS    0H
         STM   R14,R12,SAVSUBR1        SAVE REGISTERS
         L     R2,GETMLENG             SET R2 FOR LENGTH OF AREA
         LA    R9,TOKEN@               LOAD TOKEN'S ADDRESS
         LA    R5,GQSCAN1              LOAD ADDRESS OF GQSCAN AREA
         GQSCAN AREA=((R10),(R2)),TOKEN=(R9),RESERVE=YES,              X
               MF=(E,(R5))            ISSUE GQSCAN
         ST    R0,R0SAVER              SAVE REG 0
         ST    R1,R1SAVER              SAVE REG 1
         L     R9,#OFRIBS              LOAD NUMBER OF RIBS RETURNED
         ICM   R9,B'1111',#OFRIBS      Q. Any RIBS RETURNED
         BNZ   HAVERIBS                   Y. GO PROCESS THEM
         XC    MORERIBS,MORERIBS       SET TO NO MORE RIBS
         MVC   MESSAGEG(18),=C'No Reserves found.'
         L     R15,RTNADRS1            LOAD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         B     RETMAIN1                EXIT ROUTINE
HAVERIBS DS    0H
         ST    R15,MORERIBS            SAVE REG 15
         L     R6,MYARPTR1             START ADDRESS OF DATA RETURNED
RIBLOOP  DS    0H
         USING RIB,R6                  ESTABLISH ADDRESABILITY TO RIB
*  PDUMP (R6),QUIT=EXITPRG0,REGS=N    <=====
         MVC   RESOURCL(1),RIBRNMLN    MOVE RNAME LENGTH
         MVC   RESOURCE,SPACES         CLEAR RESOURCE
         XR    R1,R1                   INITIALISE REGISTER
         IC    R1,RESOURCL             LOAD LENGTH OF NAME
         CH    R1,=H'53'               Q. LENGTH > DISPLAY LIMIT
         BNH   DSNLENOK                   N. BYPASS
         LA    R1,52                   MOVE SHORTENED LENGTH
         MVI   RESOURCE+52,C'>'        MOVE MORE CHAR INDICATOR
DSNLENOK DS    0H
         BCTR  R1,0                    RELATIVE LENGTH
         LR    R2,R6                   POINT TO RIB START
         AH    R2,#RIBFLEN             ADD LENGTH OF RIB => VAR PART
         EX    R1,MOVEDSN2             MOVE DATASET NAME
         MVC   QNAME,RIBQNAME          MOVE QNAME
         L     R1,RIBTRIBE             LOAD TOTAL # OF RIBES
         S     R1,RIBNRIBE             SUBTRACT RIBES RETURNED
         STH   R1,#RIBNR               STORE #LEFT DUE TO LACK OF AREA
         L     R8,RIBNRIBE             LOAD # OF RIBES TO PROCESS
         LH    R1,RIBVLEN              LOAD LENGTH OF VARIABLE PART
         AH    R6,#RIBFLEN             POINT PAST FIXED PART OF RIBE
         AR    R6,R1                   POINT PAST VARIABLE PART
         DROP  R6                      DROP ADDRESABILITY TO RIB
RIBELOOP DS    0H
*---------------------------------------------------------------------*
*        CLI   ENVMNT,C'I'             Q. ISPF ENVIRONMENT
*        BNE   NPROGREP                   N. BYPASS PROGRESSIVE REPLY
*        XR    R14,R14                 INIT EVEN PAIR
*        L     R15,RIBCNTR              LOAD RIB COUNTER
*        LA    R15,1(R15)                BUMP COUNTER
*        ST    R15,RIBCNTR              STORE RIB COUNTER
*        D     R14,=F'500'             DIVIDE BY 100
*        LTR   R14,R14                 Q. ANY REMAINDER
*        BNZ   NPROGREP                   N. BYPASS
*       MVC   GC009+8(56),=C' of ???? records processed. However action
*              n is happening.'
*        L     R15,RIBCNTR              LOAD RIB COUNTER
*        UNPACK R15,8,GC009,MF=E       UNPACK COUNTER
*        ISPEXEC 'SETMSG MSG(GC009Q)'
*        ISPEXEC 'CONTROL DISPLAY LOCK'
*        ISPEXEC 'DISPLAY'
NPROGREP DS    0H
*---------------------------------------------------------------------*
         USING RIBE,R6                 ADDRESABILITY TO RIBE
*        CLC   TASKNAME,RIBEJBNM       Q. MATCHING JOB NAME
*        BNE   CONT#35                    N. BYPASS
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE
         MVC   JOB#,RIBEJBNM           MOVE JOB NAME
         MVC   MESSAGEG(8),JOB#        MOVE JOB NAME TO DISPLAY
         MVC   MESSAGEG+9(3),=C'SHR'   MOVE SHARE DISPOSITION
         TM    RIBERFLG,X'80'          Q. IS RIBE TYPE SHARE
         BO    CONT#20                    Y. BYPASS
         MVC   MESSAGEG+9(4),=C'EXCL'  MOVE SHARE DISPOSITION
CONT#20  DS    0H
         MVC   MESSAGEG+17(8),QNAME    MOVE QUEUE NAME
         MVC   MESSAGEG+26(53),RESOURCE MOVE MESSAGE TO OUTPUT AREA
         MVC   SKEY+1(53),RESOURCE     SET SORTKEY
         HEXCHMAC MESSAGEG+26,HEXL,53,MF=E
         LA    R14,HEXL1+9             DESTINATION LEFT NIBBLE
         LA    R15,HEXL2+9             DESTINATION RIGHT NIBBLE
         LA    R7,HEXL                 SOURCE DATA
         LA    R1,53                   LENGTH
HEXLOOP  DS    0H
         MVC   0(1,R14),0(R7)          MOVE LEFT NIBBLE
         MVC   0(1,R15),1(R7)          MOVE RIGHT NIBBLE
         LA    R14,1(R14)              POINT TO NEXT BYTE
         LA    R15,1(R15)              POINT TO NEXT BYTE
         LA    R7,2(R7)                POINT PAST SOURCE CHAR
         BCT   R1,HEXLOOP              LOOP TILL END
CONT#22  DS    0H
         TM    RIBERFLG,RIBERESC       Q. IS RESERVE CONVERTED TO ENQ
         BNO   CONT#24                    N. BYPASS
         MVC   MESSAGEG+14(2),=C'CR'   MOVE MESSAGE TO OUTPUT AREA
         B     CONT#30                 MOVE ON
CONT#24  DS    0H
         TM    RIBERFLG,RIBERESV       Q. IS IT A RESERVE REQUEST
         BNO   CONT#26                    N. BYPASS
         MVC   MESSAGEG+14(2),=C'RR'   MOVE MESSAGE TO OUTPUT AREA
         B     CONT#30                 MOVE ON
CONT#26  DS    0H
         MVC   MESSAGEG+14(2),=C'NR'   MOVE NOT RESERVE
CONT#30  DS    0H
         L     R15,RTNADRS1            LOAD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
CONT#35  DS    0H
         AH    R6,#RIBELEN             POINT PAST THAT RIBE
         BCT   R8,RIBELOOP             LOOP TILL END OF RIBES
NEXTRIB  DS    0H
         BCT   R9,RIBLOOP              LOOP TILL END OF RIB
RETMAIN1 DS    0H
         LM    R14,R12,SAVSUBR1        RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*---------------------------------------------------------------------*
         USING RIBVAR,R2               ADDRESABILITY TO VAR PART OF RIB
MOVEDSN2 MVC   RESOURCE(0),RIBRNAME    MOVE RESOURCE
         DROP  R2                      DROP ADDRESABILITY
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DEFINE ISPF ENVIRONMENT AND CREATE A TABLE                         *
*  TRY TO DUMMY DISPLAY THE PANEL, AND IF RETURN CODE IS NOT 0, IE.   *
*  PANEL NOT FOUND, CONVERT TO NON-ISPF ENVIRONMENT.                  *
*  AS TABLE IS CREATED AS NOWRITE, THE SHARE OPTION IS REDUNDANT AND  *
*  TABLE CANNOT BE SHARED. IF AN ATTEMPT IS MADE TO DOUBLE CREATE     *
*  THE TABLE (EG. SPLIT SVREEN MODE - OTHER SESSION) THE SECOND       *
*  SESSION WILL BE CONVERTED TO NON-ISPF MODE.                        *
*---------------------------------------------------------------------*
DEFISPF  DS    0H
         STM   R14,R12,SAVSUBR1        SAVE REGISTERS
*        ISPINIT MF=E                  INITIALISE PROGRAM'S ISPF ENV
         ISPEXEC 'CONTROL ERRORS RETURN'
         ISPEXEC 'CONTROL NONDISPL ENTER'
         ISPEXEC 'DISPLAY PANEL(CONFLICT)'
         LTR   R15,R15                 Q. COULD DISPLAY THE PANEL
         BZ    PANELFND                   Y. CAN DISPLAY PANEL - BYPASS
TRNISPOF DS    0H
         MVI   ENVMNT,C'N'             SET NON-ISPF ENVIRONMENT
         LA    R1,TPUTRTN              NEW LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE NEW ROUTINE ADDRESS
         ST    R1,RTNADRS2             STORE NEW ROUTINE ADDRESS
         B     RETMAIN2                EXIT ROUTINE
PANELFND DS    0H
         ISPEXEC 'TBEND ENQALL'
         ISPEXEC 'CONTROL ERRORS CANCEL'
         ISPVDEFX INM=(TIME),ANM=TIME,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(GC009),ANM=GC009,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(GC009Q),ANM=GC009,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(MESSAGEG),ANM=MESSAGEG,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(JOB#),ANM=JOB#,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(SKEY),ANM=SKEY,FORMAT=CHAR,LEN=66,MF=E
         ISPVDEFX INM=(SKEY1),ANM=SKEY1,FORMAT=CHAR,LEN=1,MF=E
         ISPVDEFX INM=(ZCMD),ANM=ZCMD,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(ZTEMPF),ANM=ZTEMPF,FORMAT=CHAR,LEN=44,MF=E
         ISPVDEFX INM=(SEQ#),ANM=SEQ#,FORMAT=CHAR,LEN=3,MF=E
         ISPVDEFX INM=(CROW),ANM=CROW,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(SROW),ANM=SROW,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(HEXL1),ANM=HEXL1,FORMAT=CHAR,LEN=60,MF=E
         ISPVDEFX INM=(HEXL2),ANM=HEXL2,FORMAT=CHAR,LEN=60,MF=E
         ISPEXEC 'TBCREATE ENQALL KEYS(SKEY,SKEY1,JOB#,SEQ#)           +
                 NAMES(MESSAGEG,HEXL1,HEXL2) NOWRITE SHARE'
         LTR   R15,R15                 Q. COULD CREATE A TABLE
         BNZ   TRNISPOF                   N. GO AND TURN ISPF OFF
         MVC   SORT21,SORT11           MOVE SORT AREA
         MVC   SORT22,SORT12           MOVE SORT AREA
         MVC   SORT23,SORT13           MOVE SORT AREA
         MVC   EDIT2,EDIT1             MOVE EDIT AREA
         MVC   TBSKIP2(TBSKIP1L),TBSKIP1 MOVE SKIP AREA
         MVC   WHOHAS2(WHOHAS2L),WHOHAS1 MOVE SKIP AREA
         MVC   TBDISP2,TBDISP1         MOVE DISPLAY AREA
         ISPEXEC SORT21,L'SORT21       SORT DATA
         MVC   HEXL1,SPACES            MOVE SPACES TO HEXLINE1
         MVC   HEXL2,SPACES            MOVE SPACES TO HEXLINE1
         OI    HEXFL,HEXOFF            TURN HEX OFF
RETMAIN2 DS    0H
         LM    R14,R12,SAVSUBR1        RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY NON-ISPF ENVIRONMENT ROUTINES 1 AND 2.                     *
*---------------------------------------------------------------------*
TPUTRTN  DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         TPUT  MESSAGEG,79,EDIT,WAIT,,BREAKIN,HIGHP
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         LA    R15,4                   SET NON ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY ISPF ENVIRONMENT ROUTINE 1.                                *
*---------------------------------------------------------------------*
TBADDRTN DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         AP    SEQ#(3),=PL1'1'         ADD 1 TO SEQUENCE NUMBER
         ISPEXEC 'TBADD ENQALL ORDER'
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY ISPF ENVIRONMENT ROUTINE 2.                                *
*  DISPLAYS THE TABLE CREATED. IF <ENTER> IS HIT, REDISPLAY THE       *
*  UPDATED DETAILS (NEW DETAILS IF COMMAND LINE IS NOT BLANK - TREATED*
*  AS NEW DATASET NAME). EXIT IF 'END' PF KEY IS USED.                *
*---------------------------------------------------------------------*
TBDISRTN DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         ISPEXEC 'TBTOP ENQALL'
DISPTAB  DS    0H
         ISPEXEC TBDISP2,L'TBDISP2      DISPLAY TABLE
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   ENDTABLE                   N. EXIT W/O RETURN FOR REDISP
         OC    ZCMD(8),SPACES          CONVERT TO UPPER CASE
         CLC   ZCMD(06),=C'SORT J'     Q. TURN SORT ON JOB NAME
         BE    SORTONJ                    Y. TURN SORT ON
         CLC   ZCMD(06),=C'SORT R'     Q. TURN SORT ON
         BE    SORTON                     Y. TURN SORT ON
         CLC   ZCMD(06),=C'SORT A'     Q. TURN SORT ON
         BE    SORTONA                    Y. TURN SORT ON
         CLC   ZCMD(04),=C'PRNT'       Q. PRINT DATASET
         BE    PRINTD                     Y. TURN SORT ON
         CLC   ZCMD(03),=C'WHO'        Q. WHOHAS
         BE    WHOHAS                     Y. TURN SORT ON
         CLC   ZCMD(06),=C'HEX OF'     Q. TURN HEXX OFF
         BE    THEXOFF                    Y. TURN HEX OFF
         CLC   ZCMD(04),=C'HEX '       Q. TURN HEXX ON
         BE    THEXON                     Y. TURN HEX ON
         B     DISPRET                 BYPASS
THEXOFF  DS    0H
         OI    HEXFL,HEXOFF            TURN HEX FLAG OFF
         MVC   TBDISP2+21(8),=C'CONFLICT'
         B     DISPTAB                 REDISPLAY NORMAT TABLE
THEXON   DS    0H
         OI    HEXFL,HEXON             TURN HEX FLAG ON
         MVC   TBDISP2+21(8),=C'CONFLICX'
         B     DISPTAB                 REDISPLAY HEX TABLE
SORTONJ  DS    0H
         MVC   SORT21(L'SORT21),SORT11 SET SORT KEY SORTKEY
         ISPEXEC SORT21,L'SORT21       SET SORT TABLE
         B     SORTIT                  GO AND SORT IT
SORTONA  DS    0H
         MVC   SORT23(L'SORT23),SORT13 SET SORT KEY SORTKEY
         ISPEXEC SORT23,L'SORT23       SET SORT TABLE
         B     SORTIT                  GO AND SORT IT
SORTON   DS    0H
         MVC   SORT22(L'SORT22),SORT12 SET SORT KEY SORTKEY
         ISPEXEC SORT22,L'SORT22       SET SORT TABLE
SORTIT   DS    0H
         ISPEXEC 'TBMOD ENQALL ORDER'
         B     DISPTAB                 REDISPLAY SORTED/UNSORTED TABLE
*---------------------------------------------------------------------*
WHOHAS   DS    0H
         CLC   CROW(8),=C'00000003'    Q. LOOKING AT DUMMY ROWS
         BNL   SETWHO                     N. BYPASS
         MVC   GC009,SPACES            CLEAR MESSAGE AREA
         MVC   GC009(24),=C'INVALID CURSOR POSITION.'
         ISPEXEC 'SETMSG MSG(GC009)'   SET MESSAGE FOR NEXT DISPLAY
         B     DISPTAB                 REDISPLAY TABLE
SETWHO   DS    0H
         ISPEXEC TBSKIP2,TBSKIP1L      SKIP TO APPROPRIATE ROW
         MVC   PARM2+1(45),SPACES      CLEAR PARAMETER AREA
         MVC   PARM2+1(44),MESSAGEG+26 MOVE RESOURCE NAME
         LA    R15,PARM2+44            POINT TO LAST CHARACTER
         LA    R14,44                  LOOP COUNTER
DSNLOP1  DS    0H
         CLI   0(R15),C' '             Q. CHARACTER A SPACE
         BNE   DSNLOP1E                   N. EXIT LOOP
         BCTR  R15,0                   POINT TO PREVIOUS CHARACTER
         BCT   R14,DSNLOP1             LOOP TILL END
         MVC   GC009,SPACES            CLEAR MESSAGE AREA
         MVC   GC009(30),=C'DATASET NAME WAS ALL SPACES???'
         ISPEXEC 'SETMSG MSG(GC009)'   SET MESSAGE FOR NEXT DISPLAY
         B     DISPTAB                 REDISPLAY TABLE
DSNLOP1E DS    0H
         MVI   1(R15),C''''            MOVE TRAILING APOSTROPHE
         LH    R1,WHOHAS2              LOAD COMMAND LENGTH
         SH    R14,=H'44'              SUBTRACT ORIGINAL LENGTH
         AR    R1,R14                  SUBTRACT MISSING CHARACTERS
         STH   R1,WHOHAS2              STORE COMMAND LENGTH
         L     R7,CPPLSAVR             RESTORE CPPL POINTER
         L     R1,12(R7)               LOAD 'ECT' ADDRESS
         MVC   12(8,R1),=CL8'WHOHAS'   MOVE PROGNAME TO X'12' FROM ECT
         LA    R1,WHOHAS2              LOAD PARAMETER LIST ADDRESS
         ST    R1,0(R7)                STORE PARML @ IN CBUFFER
         LOAD  EP=WHOHASP              LOAD THE "WHOHAS" ROUTINE
         LR    R15,R0                  ADDRESS OF MODULE
         LR    R1,R7                   POINT TO CAOMMNAD BUFFER
         BALR  R14,R15                 CALL "WHOHAS"
         B     DISPTAB                 REDISPLAY TABLE
*---------------------------------------------------------------------*
PRINTD   DS    0H
         ISPEXEC 'FTOPEN TEMP'         OPEN FILE TAILORING
         ISPEXEC 'FTINCL ENQALLK'      INCLUDE SKELETON
         ISPEXEC 'FTCLOSE'             CLOSE FILE TAILORING
         ISPEXEC 'VGET ZTEMPF'         GET TEMPORARY FILE
         MVC   EDIT2+14(36),ZTEMPF     GET TEMPORARY FILE
         LA    R8,EDIT2+49             POINT TO LATST BYTE
LOOP#01  DS    0H
         CLI   0(R8),C' '              Q. CHAR SPACE
         BNE   LOOP#01E                   N. EXIT LOOP
         BCT   R8,LOOP#01              LOOP TILL NON SPACE
LOOP#01E DS    0H
         MVC   1(3,R8),=C''') '        MOVE DELIMITERS
         ISPEXEC EDIT2,L'EDIT2         SET EDIT DATA
         B     DISPTAB                 REDISPLAY SORTED/UNSORTED TABLE
DISPRET  DS    0H
         ISPEXEC 'TBEND ENQALL'        END THE TABLE
         ISPEXEC 'TBCREATE ENQALL KEYS(SKEY,SKEY1,JOB#,SEQ#)           +
                 NAMES(MESSAGEG,HEXL1,HEXL2) NOWRITE SHARE'
         ISPEXEC SORT21,L'SORT21       SET SORT TABLE
         MVC   HEXL1,SPACES            MOVE SPACES TO HEXLINE1
         MVC   HEXL2,SPACES            MOVE SPACES TO HEXLINE1
         MVC   GC009,SPACES            INITIALISE FIELD
         MVC   GC009(23),=C'** REFRESHED DETAILS **'
GETTIME  DS    0H
         ISPEXEC 'SETMSG MSG(GC009)'   SET MESSAGE FOR NEXT DISPLAY
         BAL   R14,TIMERTN             FORMAT TIME INTO VAR TIME
         XR    R15,R15                 SET ZERO RETURN CODE
         B     DISPEXIT                EXIT WITH ZERO RETURN CODE
ENDTABLE DS    0H
         ISPEXEC 'TBEND ENQALL'        END THE TABLE
         LA    R15,4                   SET NON ZERO RETURN CODE
DISPEXIT DS    0H
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY SDSF ENVIRONMENT ROUTINES 1 AND 2.                         *
*---------------------------------------------------------------------*
WTORTN   DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         LA    R5,WTODET1              LOAD ADDRESS OF WTO AREA
         MVC   WTODET1+4(73),MESSAGEG  MOVE MESSAGE DETAILS
         WTO   MF=(E,(R5))             ISSUE MSG
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         LA    R15,4                   SET NON ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*       GET AND CONVERT TIME DO DISPLAYABLE FORMAT                    *
*---------------------------------------------------------------------*
TIMERTN  DS    0H
         STM   R14,R12,SAVSUBR2        SAVE REGISTERS
         TIME  DEC                     GET TIME  => IN R0
         ST    R0,DWORK8               SAVE TIME IN FULLWORD
         HEXCHMAC DWORK8,GC009,3,MF=E  CONVERT HEX TO CHAR
         MVC   TIME(2),GC009           INSERT HH
         MVC   TIME+3(2),GC009+2       INSERT MM
         MVC   TIME+6(2),GC009+4       INSERT SS
         LM    R14,R12,SAVSUBR2        RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*=====================================================================*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
SPACES   DC    CL256' '
PATTERN  DC    X'40202120'
WTODETF  DS    0F
         WTO   '                                                       *
                                 ',                                    *
               ROUTCDE=(2,12),DESC=(7),                                *
               MF=L
WTODETL  EQU   *-WTODETF
GQSCANF  GQSCAN SCOPE=ALL,RESERVE=YES,MF=L
GQSCANL  EQU   *-GQSCANF
SORT11   DC    C'TBSORT ENQALL FIELDS(SKEY1,C,A,JOB#,C,A,SKEY,C,A)'
SORT12   DC    C'TBSORT ENQALL FIELDS(SKEY,C,A)'
SORT13   DC    C'TBSORT ENQALL FIELDS(SEQ#,C,A)'
EDIT1    DC    C'EDIT DATASET(''                                      '
TBSKIP1  DC    C'TBSKIP ENQALL ROW(00000016)'
TBSKIP1L EQU   *-TBSKIP1
TBDISP1  DC    C'TBDISPL ENQALL PANEL(CONFLICT) POSITION(SROW)'
WHOHAS1  DC    AL2(WHOHAS2L)
         DC    AL2(CMDL2)
         DC    C'WHOHASP '
         DC    C'ISPF'
         DC    CL46''' '
WHOHAS1L EQU   *-WHOHAS1
*---------------------------------------------------------------------*
WORKAREA DSECT
$REGSAVE DS    18F                  LINKAGE STD REG SAVE AREA
SAVSUBR1 DS    15F                  SUBROUTINE REGISTER SAVE AREA
SAVSUBR2 DS    15F                  SUBROUTINE REGISTER SAVE AREA
TIME     DC    CL8'..:..:..'        GENERAL COMMENT
RTNADRS1 DS    A                    ADDRESS ENQ MSG ISSUE ROUTINE
RTNADRS2 DS    A                    ADDRESS FINAL MSG ISSUE ROUTINE
DWORK8   DS    PL8
MYARPTR1 DS    F
TASKNAML DS    H
TASKNAME DS    CL8
QNAME    DS    CL8                  MAJOR RESOURCE NAME
JOB#     DS    CL8                  MAJOR RESOURCE NAME
RESOURCL DS    H
SKEY1    DS    CL1                  RESOURCE SORT FIELD
SKEY     DS    0CL64                RESOURCE SORT FIELD
         DS    CL1                  RESOURCE SORT FIELD
RESOURCE DS    CL63
MESSAGEG DS    CL79                 GENERAL MESSAGE LINE
MESSAGEH DS    CL79                 GENERAL HEAD LINE
MESSAGET DS    CL79                 GENERAL TAIL LINE
GC009    DS    CL79                 GENERAL COMMENT
ZCMD     DS    CL79                 GENERAL COMMENT
ZTEMPF   DS    CL44                 GENERAL COMMENT
SEQ#     DS    PL3                  SEQUENCE NUMBER FOR NON-SORT
SORTFLAG DS    CL1                  SORT FLAG INDICATOR
R0SAVER  DS    0F
#RIBFLEN DS    H
#RIBELEN DS    H
CPPLSAVR DS    F
R1SAVER  DS    0F
#OFRIBS  DS    F
RIBCNTR  DS    F
#RIBNR   DS    H
R14SAVER DS    F
MORERIBS DS    F
ENQFND   DS    CL1
ENVMNT   DS    CL1
TOKEN@   DS    F
WTODET1  DS    0F
         WTO   '                                                       *
                                 ',                                    *
               ROUTCDE=(2,12),DESC=(7),                                *
               MF=L
GQSCAN1  GQSCAN SCOPE=ALL,RESERVE=YES,MF=L
ISPINIT1 ISPINIT  MF=L
ISPVDEF1 ISPVDEFX MF=L
HEXCHMC1 HEXCHMAC MF=L
UNPACK1  UNPACK   MF=L
SORT21   DC    C'TBSORT ENQALL FIELDS(SKEY1,C,A,JOB#,C,A,SKEY,C,A)'
SORT22   DC    C'TBSORT ENQALL FIELDS(SKEY,C,A)'
SORT23   DC    C'TBSORT ENQALL FIELDS(SEQ#,C,A)'
TBDISP2  DC    C'TBDISPL ENQALL PANEL(CONFLICT) POSITION(SROW)'
EDIT2    DC    C'EDIT DATASET(''                                      '
TBSKIP2  DC    C'TBSKIP ENQALL ROW(00000016)'
         ORG   TBSKIP2
         DS    CL18
CROW     DS    CL8
         DS    CL1
         ORG
SROW     DS    CL8
         DS    0H
WHOHAS2  DC    AL2(WHOHAS2L)
         DC    AL2(CMDL2)
CMD2     DC    C'WHOHASP '
CMDL2    EQU   *-CMD2
PARM1    DC    C'ISPF'
PARM2    DC    CL46''' '
WHOHAS2L EQU   *-WHOHAS2
HEXFL    DS    XL1
HEXOFF   EQU   X'00'
HEXON    EQU   255-X'00'
HEXL1    DS    CL79
HEXL2    DS    CL79
HEXL     DS    CL158
WORKLEN  EQU   *-WORKAREA
*---------------------------------------------------------------------*
GETMAINA DSECT
DATAGOT  DS    CL30000
         DS    CL30000
         DS    CL30000
GETMAINL EQU   *-GETMAINA
*---------------------------------------------------------------------*
RIB      DSECT
         ISGRIB
         IKJCPPL COMMAND           PROCESSOR PARAMETER LIST
*---------------------------------------------------------------------*
         END
