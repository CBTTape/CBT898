***********************************************************************
*    Module:   EXECSTC                                                *
*    Program:  EXECSTC                                                *
*                                                                     *
*    Function: Tests for the execution of a STC and set the return    *
*              code accordingly.                                      *
*              This differs from 'EXECJOB' because jobs/users with    *
*              the same jobid/userid will not execute concurrently    *
*              as STC's may. Consequently you need to be able to      *
*              differentiate between 1 STC which would be the         *
*              current one and > 1 which means another STC is         *
*              executing.                                             *
*                                                                     *
*              Program may be invoked through a command processor     *
*              or it may be called (batch job) with conventional      *
*              paramerter passing.                                    *
*                                                                     *
*    Parameters:                                                      *
*              byte 1 - Return code to return if STC is found         *
*                       found.                                        *
*              byte 2 - No. of started tasks executing for above      *
*                       return code to take affect (greater or equal) *
*              byte 3 - 10                                            *
*                     - Up to 8 character STC to test for.            *
*    Return code:                                                     *
*              If parameter rc = 0:                                   *
*                      0 - If # of STC executing do not exceed        *
*                          byte 2                                     *
*                      8 - If # of STC executing exceed byte 2        *
*              If parameter rc > 0:                                   *
*                      0 - If # of STC executing exceed byte 2        *
*                     rc - If # of STC executing do not exceed        *
*                          byte 2                                     *
*    Author:   A. Kara. (ASYSTS Pty. Ltd.)                            *
*    Date  :   16/07/91.                                              *
*                                                                     *
***********************************************************************
*
         COPY  @MACROS                 COMMONLY USED MACROS
*
EXECSTC  KICKOFF (R11),WORKAREA,WORKLEN,LIST=YES
*
PARMT1   DS    0H                   PARAMETER TYPE 1
         LR    R7,R1                CPPL ADDR
         CLI   0(R7),X'80'          Q. CONVENTIONAL PARAMETER TYPE
         BE    PARMT2                  Y. PROCESS PARAMETER LIST
         USING CPPL,R7              ADDRESABILITY TO CPPL
         L     R6,CPPLCBUF          GET COMMAND BUFFER ADDR
         LH    R1,0(R6)             TOTAL COMMAND LENGTH
         SH    R1,=H'2'             SUBTRACT LENGTH OF ITSELF
         LH    R3,2(R6)             OPERAND LENGTH
         SR    R1,R3                Q. ANY PARAMETER LENGTH
         BZ    EXITPR12                N. ERROR EXIT
         SH    R1,=H'2'             SUBTRACT LENGTH OF OPERAND
         LA    R2,4(R6)             ADDR OF START OF COMMAND
         AR    R2,R3                ADD DISPLACEMENT OF OPERAND
         B     PROCESS              GO PROCESS PARAMETER
PARMT2   DS    0H                   PARAMETER TYPE 2
         L     R7,0(R7)             LOAD ADDRESS OR PARAMETER
         LH    R1,0(R7)             LOAD LENGTH OF PARAMETER
         LTR   R1,R1                Q. IS PARAMETER LENGTH ZERO
         BZ    EXITPR12                 N. ERROR EXIT
         LA    R2,2(R7)             POINT PAST PARAMETER LENGTH
PROCESS  DS    0H
         CLI   0(R2),C'0'           Q. NON NUMERIC RETURN CODE
         BL    EXITPR08                 Y. ERROR EXIT
         PACK  DWORK8(8),0(1,R2)    PACK RETURN CODE
         CVB   R9,DWORK8            CONVERT TO BINARY
         STH   R9,RCODE             STORE RETURN CODE
         BCTR  R1,0                 SUBTRACT 1 FOR RCODE LENGTH
         CLI   1(R2),C'0'           Q. NON NUMERIC # OF STC
         BL    EXITPR08                 Y. ERROR EXIT
         PACK  DWORK8(8),1(1,R2)    PACK # OF STC
         CVB   R9,DWORK8            CONVERT TO BINARY
         STH   R9,#OFSTC            STORE R# OF STC
         BCTR  R1,0                 SUBTRACT 1 FOR RCODE LENGTH
         BCTR  R1,0                 RELATIVE LENGTH
         MVC   JOBNAME,SPACES       CLEAR JOBNAME
         EX    R1,MOVEJOB           MOVE JOB NAME
         B     GETJOBS              BYPASS EX
*---------------------------------------------------------------------*
MOVEJOB  MVC   JOBNAME(0),2(R2)     MOVE JOB NAME
*---------------------------------------------------------------------*
GETJOBS  DS    0H
         L     R2,16                GET CVT ADDRESS
         USING CVT,R2               ADDRESABILITY TO CVT
         L     R2,CVTASVT           GET ADDRESS OF ASVT
         DROP  R2                   RELINQUISH CVT ADDRESABILITY
         USING ASVT,R2              ADDRESABILITY TO ASVT
         L     R4,ASVTMAXU          GET NUMBER OF ADDRESS SPACES
         LA    R2,ASVTENTY          POINT TO FIRST ENTRY
         XR    R7,R7                INITIALISE COUNTER
ASVTLOOP DS    0H
         USING ASCB,R1              ADDRESABILITY TO ASCB
         ICM   R1,B'1111',0(R2)     GET ASCB ADDRESS
         BM    NEXTASVT             NOT ACTIVE, GO GET NEXT ONE
*        ICM   R3,B'1111',ASCBJBNI  GET ADDRESS OF INITIATED TASK NAME
*        BNZ   TESTASCB             GOT, GO GET TEST NAME
         ICM   R3,B'1111',ASCBJBNS  GET ADDRESS OF STARTED TASK NAME
         BZ    NEXTASVT             NONE, GO GET NEXT ONE
TESTASCB DS    0H
         CLC   0(8,R3),JOBNAME      Q. JOB NAMES EQUAL
         BNE   NEXTASVT                Y. GO PROCESS
         LA    R7,1(R7)             UP COUNTER BY 1
NEXTASVT DS    0H
         LA    R2,4(R2)             POINT TO NEXT ASVT ENTRY
         BCT   R4,ASVTLOOP          LOOP TILL END
HAVMATCH DS    0H
         LH    R15,RCODE            LOAD RETURN CODE
         CH    R7,#OFSTC            Q. EQUAL/LESS # OF STC'S
         BNH   EXITPR                  Y. EXIT WITH REQT'D CODE
NOMATCH  DS    0H
         CLC   RCODE(2),=H'0'       Q. 0 RCODE IF FOUND
         BE    EXITPR08                Y. 8 RCODE AS NOT FOUND
         B     EXITPR00             N. THEREFORE 0 RCODE AS NOT FOUND
EXITPR   RACKOFF RC=(R15)           EXIT WITH RC IN R15 SET
EXITPR00 RACKOFF RC=0               EXIT WITH RETURN CODE 0
EXITPR08 RACKOFF RC=8               EXIT WITH RETURN CODE 8
EXITPR12 RACKOFF RC=12              EXIT WITH RETURN CODE 12
*=====================================================================*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
SPACES   DC    CL256' '
*---------------------------------------------------------------------*
WORKAREA DSECT
         DS    18F                  REGISTER SAVE AREA
DWORK8   DS    D
#OFSTC   DS    H
RCODE    DS    H
JOBNAME  DS    CL8
WORKLEN  EQU   *-WORKAREA
*---------------------------------------------------------------------*
         CVT   DSECT=YES            ENTRY : CVT
         IHAASVT                    ENTRY : ASVT
         IHAASCB                    ENTRY : ASCB
         IKJCPPL COMMAND            PROCESSOR PARAMETER LIST
*---------------------------------------------------------------------*
         END
