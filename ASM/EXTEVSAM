*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       TITLE:    'VSAM EDITOR.'
**       SYSTEM:   N/A
**       MODULE:   EXTEVSAM
**       PROGRAM:  EXTEVSAM
**       FUNCTION: EDIT A VSAM DATASET USING THE ISPF 'EDIF' SERVICE.
**                 RECOVERY IS AUTOMATICALLY TURNED ON.
**
**                 FOR FURTHER DETAILS INVOKE THE ONLINE ISPF
**                 TUTORIAL BY ISSUING THE FOLLOWING COMMANDS:
**                    'TSO TUTON EXTEH000' - FOR EDIT TUTORIAL
**                    'TSO TUTON EXTBH000' - FOR BROWSE TUTORIAL.
**                 THE TUTORIALS SHOULD GIVE A INSIGHT INTO THE
**                 CAPABILITIES AND LIMITATIONS THEREBY DETAILING THE
**                 LOGIC USED IN THIS PROGRAM.
**
**                 THE VSAM MACROS USED ARE DETAILED IN:
**                  1. VSAM ADMINISTRATION: MACRO INSTRUCTION REFERENCE
**                     REFERENCE NUMBER: GC26-4152-3
**                  2. VSAM ADMINISTRATION GUIDE
**                     REFERENCE NUMBER: GC26-4151-5
**
**                 PROGRAM IS NOT RE-ENTRANT.
**
**       AUTHOR:   A. KARA.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
EXTEVSAM KICKOFF (R10,R11,R12),AMODE=31,LIST=YES
         ST    R10,DDATA               SAVE BASE REG IN DIALOG DATAREA
         ISPEXEC INIT=Y,MF=E           INITIALISE ISPF ENVIRONMENT
VDEFVGET DS    0H
         ISPVDEFX INM=(DDVSAM),ANM=DDNAME,FORMAT=CHAR,LEN=8,MF=E,      X
               LIST=NO
         ISPVDEFX INM=(DSVSAM),ANM=DSNAME,FORMAT=CHAR,LEN=44,MF=E,     X
               LIST=NO
         ISPVDEFX INM=(KEYLEN),ANM=KEYLEN,FORMAT=CHAR,LEN=4,MF=E,      X
               LIST=NO
         ISPVDEFX INM=(KEYPOS),ANM=KEYPOS,FORMAT=CHAR,LEN=4,MF=E,      X
               LIST=NO
         ISPVDEFX INM=(MAXCCO),ANM=MAXCCO,FORMAT=CHAR,LEN=4,MF=E,      X
               LIST=NO
         ISPVDEFX INM=(EXTEDLEN),ANM=EXTEDLEN,FORMAT=CHAR,LEN=3,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(EXTERECL),ANM=EXTERECL,FORMAT=CHAR,LEN=6,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(EXTECONT),ANM=EXTECONT,FORMAT=CHAR,LEN=1,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(EXTESPLT),ANM=EXTESPLT,FORMAT=CHAR,LEN=1,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(EXTEESUD),ANM=EXTEESUD,FORMAT=CHAR,LEN=1,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(VSAMTYPE),ANM=VSAMTYPE,FORMAT=CHAR,LEN=1,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(EXTERECF),ANM=EXTERECF,FORMAT=CHAR,LEN=2,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(RRDSSLTS),ANM=RRDSSLTS,FORMAT=CHAR,LEN=8,MF=E,  X
               LIST=NO
         ISPVDEFX INM=(EXTEESLT),ANM=EXTEESLT,FORMAT=CHAR,LEN=12,MF=E, X
               LIST=NO
         ISPVDEFX INM=(GC009),ANM=GC009,FORMAT=CHAR,LEN=79,MF=E,       X
               LIST=NO
         ISPVDEFX INM=(ESLOT255),ANM=KEY1,FORMAT=CHAR,LEN=255,MF=E,    X
               LIST=NO
         ISPEXEC 'VGET (DDVSAM DSVSAM) SHARED'
         ISPEXEC 'VGET (EXTEDLEN EXTECONT EXTEESLT EXTEESUD) PROFILE'
         ISPEXEC 'VGET (EXTERECF) SHARED'
         MVC   ORIGESUD,EXTEESUD       SAVE ORIGINAL ESDS UPDATE FLAG
         MODCB ACB=ACB1,DDNAME=(*,DDNAME)
OPEN     DS    0H
         OPEN  ACB1                    OPEN VSAM DATASET
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    SHOWCB                     Y. GO SHOW CB
OPENERR1 DS    0H
         SHOWCB ACB=ACB1,AREA=ERROR,LENGTH=4,FIELDS=ERROR
         LA    R3,116
         C     R3,ERROR                Q. VERIFY NEEDED
         BNE   STMSGOPN                   N. PROCESS OTHER ERROR
VERIFY   DS    0H
         VERIFY RPL=RPLVER,ACTION=REFRESH
         LA    R3,1
         ST    R3,VERIFIED             SET VERIFIED FLAG ON
         L     R3,OPNAGAIN             LOAD REOPEN FALG
         LTR   R3,R3                   Q. ALREADY RETRIED
         BZ    CLOSE                      N. GOTO CLOSE + RETRY OPEN
STMSGOPN DS    0H
         ISPEXEC 'SETMSG MSG(VSAM005)' NOT OPEN ERROR MESSAGE
         B     CLOSE                   GO CLOSE DATASET
SHOWCB   DS    0H
         ISPEXEC 'VGET KEYPOS SHARED'
         CLC   KEYPOS(4),=C'TEST'
         BNE   DONTDUMP
         PDUMP ACB1
DONTDUMP DS    0H
         SHOWCB ACB=ACB1,AREA=NLOGR,LENGTH=16,                         X
               FIELDS=(NLOGR,LRECL,KEYLEN,RKP)
         L     R1,LRECL                LOAD RECORD LENGTH
         C     R1,=F'10'               Q. RECORD LENGTH < 10
         BNL   VALOWLEN                   N. BYPASS
         MVC   GC009(46),=C'RECORD EXPANDED TO 10 BYTES FOR EDIT PURPOSE
               ES.'
         ISPEXEC 'SETMSG MSG(GC009)'
         LA    R1,10                   SET LENGTH TO 10
VALOWLEN DS    0H
         ST    R1,EDLEN                STORE EDITOR LENGTH
         UNPACK R1,6,EXTERECL,MF=E     UNPACK RECORD LENGTH
         C     R1,=F'255'              Q. WITHIN EDIT LIMIT
         BNH   EDITLOK                    Y. BYPASS
         CLC   EXTEDLEN,SPACES         Q. CHARS PER LINE PASSED
         BE    DEFELEN                    N. SET DEFAULT CHARS/LINE
         PACK  DWORK8(8),EXTEDLEN(3)   PACK CHARS/LINE
         CVB   R1,DWORK8               CONVER TO BINARY
         B     CALLINPR                GO CALCULATE LINES/RECORD
DEFELEN  DS    0H
         LA    R1,72                   SET DEFAULT LENGTH
CALLINPR DS    0H
         XR    R14,R14                 INITIALISE EVEN PAIR
         L     R15,LRECL               LOAD RECORD LENGTH
         ST    R1,EDLEN                STORE EDITOR LENGTH
         BCTR  R1,0                    LESS 1 FOR CONTINUATION INDIC
         BCTR  R15,0                   LESS 1 FOR FULL LENGTH LINE 1
         STH   R1,EXTEDLEN             STORE CHAR/LINE (BAR LINE 1)
         MVI   EXTESPLT,C'Y'           SET SPLIT RECORD INDICATOR
EDITLOK  DS    0H
         L     R1,EDLEN                LOAD RECORD LENGTH
         BCTR  R1,0                    LENGTH FOR 'EX' OPERATION LATER
         STH   R1,ESLOTLEN             STORE 'EX' LENGTH
         ISPEXEC 'VPUT (EXTERECL EXTESPLT) SHARED'
         CLI   EXTECONT,C' '           Q. CONTINUATION INDICATOR PASSED
         BNE   HAVECON                    Y. BYPASS
         MVI   EXTECONT,C'+'           SET CONTINUATION INDICATOR
HAVECON  DS    0H
         CLI   EXTERECF,C' '           Q. RECFM PASSED
         BNE   HAVERECF                   Y. BYPASS
         MVI   EXTERECF,C'F'           SET FIXED RECFM
HAVERECF DS    0H
         L     R1,KEYPOS               LOAD RELATIVE KEY POSITION
         ST    R1,RKP                  STORE RELATIVE KEY POSITION
         LR    R2,R1                   SAVE RKP FOR LATER
         LA    R1,1(R1)                +1 FOR RELATIVE POSITION
         UNPACK R1,4,KEYPOS,MF=E       UNPACK RKP
         MVI   KEYPOS+4,C' '           MOVE SPACE TO KEY POSITION
         LA    R1,3                    LOOP COUNTER
         LA    R3,KEYPOS               START OF POINTER
RIPPLE1  DS    0H
         CLI   0(R3),C'0'              Q. LEADING ZERO
         BH    RIPPLE1E                   N. EXIT LOOP
         MVC   0(4,R3),1(R3)           MOVE ALLONG 1 BYTE
         BCT   R1,RIPPLE1
RIPPLE1E DS    0H
         MVC   KEYL(4),KEYLEN          SAVE KEY LENGTH
         A     R2,KEYLEN               ADD KEYLENGTH TO RKP
         UNPACK R2,3,KEYLEN,MF=E       UNPACK KEYLENGTH
         MVI   KEYLEN+3,C' '           MOVE SPACE TO KEY POSITION
         LA    R1,2                    LOOP COUNTER
         LA    R3,KEYLEN               START OF POINTER
RIPPLE2  DS    0H
         CLI   0(R3),C'0'              Q. LEADING ZERO
         BH    RIPPLE2E                   N. EXIT LOOP
         MVC   0(3,R3),1(R3)           MOVE ALLONG 1 BYTE
         BCT   R1,RIPPLE2
RIPPLE2E DS    0H
         L     R3,NLOGR                LOAD NO OF LOGICAL RECORDS
         LTR   R3,R3                   Q. EMPTY DATASET
         BNZ   EDIRECI                    N. GOTO EDIT INITIAL RECORD
         MVC   EMPTYDS(4),=F'1'        SET EMPTY DATASET FLAG
EDIRECI  DS    0H
         UNPACK R3,8,RRDSSLTS,MF=E     UNPACK NUMBER OF RECORDS
         CALL  ISPLINK,(EDIREC,INIT),VL
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    TESTTYPE                   Y. GO EDIT W/O RECOVERY
         ISPVDEFX INM=(ZEITDSN),ANM=TDSNAME,FORMAT=CHAR,LEN=44,MF=E
EDIRECQ  DS    0H
         CALL  ISPLINK,(EDIREC,QUERY),VL
         LTR   R15,R15                 Q. NON PENDING RECOVERY
         BZ    TESTTYPE                   Y. GO EDIT W/O RECOVERY
         C     R15,RC4                 Q. PENDING RECOVERY
         BE    CKTDSN                     Y. GO CHECK TARGET DSN
         ISPEXEC 'SETMSG MSG(VSAM006)' SET EDIREC SEVERE ERROR MESSAGE
         B     CLOSE                   SEVERE ERROR
CKTDSN   DS    0H
         CLC   DSNAME(44),TDSNAME      Q. SAME DATASET
         BE    SAME                       Y. GO EDIT WITH RECOVERY=YES
         CALL  ISPLINK,(EDIREC,DEFER),VL
         B     EDIRECQ                 CHECK NEXT ENTRY IN RECOV TABLE
SAME     DS    0H
         ISPEXEC 'SETMSG MSG(VSAM007)' DATASET RECOVERED MESSAGE
EDIFRY   DS    0H
         CALL  ISPLINK,(VDEL,ZEITDSN),VL
         CALL  ISPLINK,(EDIF,DSNAME,,RECFM,EDLEN,RADDR,WADDR,,         X
               DDATA,,,,,,YES),VL
         B     CLOSE
TESTTYPE DS    0H
         CLC   EXTEESLT(12),SPACES     Q. EMPTY-SLOT INDICATOR PASSED
         BE    TESTKSDS                   N. LEAVE AS IS
         L     R1,AREA2@               LOAD EMPTY-SLOT STRING START
         MVC   0(12,R1),EXTEESLT       MOVE EMPTY-SLOT INDICATOR
         MVC   80(12,R1),EXTEESLT      MOVE EMPTY-SLOT INDICATOR
         MVC   160(12,R1),EXTEESLT     MOVE EMPTY-SLOT INDICATOR
         MVC   240(12,R1),EXTEESLT     MOVE EMPTY-SLOT INDICATOR
TESTKSDS DS    0H
         TESTCB ACB=ACB1,ATRB=KSDS     Q. KSDS DATASET
         BNE   TESTRRDS                   N. TEST FOR RRDS
         MODCB RPL=RPLSEQ,ARG=KEY1
         B     POSTTYPE                GO POST VSAM TYPE
TESTRRDS DS    0H
         L     R1,AREA2@               LOAD EMPTY-SLOT ADDRESS
         MVC   KEY1(255),0(R1)         MOVE EMPTY-SLOT INDICATOR
         ISPEXEC 'VPUT (ESLOT255) SHARED'
         MVI   VSAMTYPE,C'R'           SET RRDS DATASET TYPE
         TESTCB ACB=ACB1,ATRB=RRDS     TEST DATASET
         BNE   ESDSVSAM                   Y. BYPASS SORT SETUP
RRDSVSAM DS    0H
         MODCB ACB=ACB1,MACRF=(KEY)
         MODCB RPL=RPLSEQ,ARG=LASTRRNO,OPTCD=(KEY,SEQ)
         MODCB RPL=RETRVE,ARG=LASTRRNO,OPTCD=(KEY,SEQ,FWD)
         MODCB EXLST=EXLST1,EODAD=EODADRRR
         B     POSTTYPE                GO POST VSAM TYPE
ESDSVSAM DS    0H
         MVI   VSAMTYPE,C'E'           SET ESDS DATASET TYPE
         MODCB RPL=RETRVE,ARG=LASTRRNO,OPTCD=(ADR,SEQ,FWD)
POSTTYPE DS    0H
         ISPEXEC 'VPUT (KEYLEN KEYPOS VSAMTYPE RRDSSLTS) SHARED'
EDIFRN   DS    0H
         CALL  ISPLINK,(VDEL,ZEITDSN),VL
         CALL  ISPLINK,(EDIF,DSNAME,PROF,RECFM,EDLEN,RADDR,WADDR,,     X
               DDATA,EDLEN,EXTEPANL),VL
CLOSE    DS    0H
         CLOSE ACB1                    CLOSE VSAM DATA SET
         L     R3,OPNAGAIN             LOAD RE-OPEN FLAG
         LTR   R3,R3                   Q. ALREADY RETRIED
         BNZ   EXITPR00                   Y. EXIT
         LA    R3,1
         ST    R3,OPNAGAIN             SET OPEN RETRY FLAG
         L     R3,VERIFIED
         LTR   R3,R3                   Q. VERIFY DONE
         BNZ   OPEN                       Y. RETRY OPEN
EXITPR00 DS    0H
         RACKOFF RC=0
*=====================================================================*
*    READ ROUTINE                                                     *
*=====================================================================*
READRTN  DS    0H
         SAVE  (14,12)
         LM    R4,R7,0(R1)
         L     R10,0(R7)               ESTABLISH ADDRESABILITY
         LA    R11,4095(R10)               "          "
         LA    R11,1(R11)                  "          "
         LA    R12,4095(R11)               "          "
         LA    R12,1(R12)                  "          "
         ST    R13,RSAVE+4             STORE EDIF RTN SAVE AREA ADDRESS
         LA    R15,RSAVE
         ST    R15,8(R13)              SAVE NEW SAVE AREA ADDRESS
         LR    R13,R15                 POINT TO NEW SAVE AREA
*---------------------------------------------------------------------*
         L     R3,AREA1@               LOAD ADDRESS OF INPUT REC AREA
         ST    R3,0(R4)                STORE ADDRESS BACK TO EDIF
         L     R3,EMPTYDS              LOAD EMPTY INDICATOR
         LTR   R3,R3                   Q. EMPTY DATASET
         BNZ   EODADR                     Y. RETURN WITH RC=8
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'E'           Q. ESDS TYPE DATASET
         BNE   READNEXT                   N. BYPASS NEW PARM TEST
         CLI   EXTEESUD,C'N'           Q. ESDS UPDATE TYPE NEW ONLY
         BNE   READNEXT                   N. BYPASS NEW PARM TEST
         MVI   EXTEESUD,C'A'           SET ESDS UPDATE TYPE TO APPEND
         MODCB RPL=RETRVE,OPTCD=(LRD,BWD) SETUP FOR POINTING AND
         POINT RPL=RETRVE          GETTING THE LAST
         GET   RPL=RETRVE          RECORD FOR APENDING
         MODCB RPL=RETRVE,OPTCD=(ARD,FWD)
         GET   RPL=RETRVE          GET NEXT TO FORCE EOF
         B     EODADR              RETURN WITH RC=8
*---------------------------------------------------------------------*
READNEXT DS    0H
*---------------------------------------------------------------------*
         LH    R1,LINE#                LOAD LINE NUMBER BEING PROCD
         LTR   R1,R1                   Q. ZERO LINE NO (NEW RECORD)
         BZ    GETNEXTR                   Y. GET NEXT RECORD
         LR    R3,R1                   LOAD R3 WITH LAST LINE DISPD
         MH    R3,EXTEDLEN             MULTIPLY BY DISP LENGTH
         LA    R3,1(R3)                ADD 1 FOR NON-CONT CHAR LINE 1
         C     R3,ALENGTH              Q. DISPLAYED FULL RECORD
         BNL   GETNEXTR                   Y. GET NEXT RECORD
         L     R2,AREA1@               LOAD ADDRESS OF INPUT REC AREA
         AR    R2,R3                   ADD DISPLACEMENT INTO AREA1
         BCTR  R2,0                    POINT BACK 1 CHARACTER
         MVC   0(1,R2),EXTECONT        SET CONTINUATION INDICATOR
         ST    R2,0(R4)                STORE ADDRESS BACK TO EDIF
         LH    R2,EXTEDLEN             SET DISPLAYABLE LENGTH
         AR    R3,R2                   ADD DISPLAYED LENGTH
         LA    R1,1(R1)                UP LINE NUMBER COUNTER
         C     R3,ALENGTH              Q. POINT PAST END OF RECORD
         BNH   FULLLINE                   Y. LEAVE LENGTH
         S     R3,ALENGTH              CALCULATE OVER DISPLAY
         XR    R1,R1                   INDICATE NEW RECORD NEEDED
         SR    R2,R3                   SUBTRACT LENGTH
FULLLINE DS    0H
         LA    R2,1(R2)                ALLOW FOR THE CONT SIGN
         ST    R2,0(R5)                STORE RECORD LENGTH BACK 2 EDIF
         STH   R1,LINE#                STORE LINE NUMBER DISPLAYED
         B     NOTPARTR                PREPARE TO RETURN TO EDIC
*---------------------------------------------------------------------*
GETNEXTR DS    0H
         CLI   RRAHEAD,C'Y'            Q. HAVE AN RRDS RECORD AHEAD
         BE    DONTINI1                   Y. BYPASS INIT AREA1
         L     R1,AREA1@               LOAD ADDRESS OF INPUT REC AREA
         MVC   0(255,R1),SPACES        INITIALISE INPUT AREA
         CLI   VSAMTYPE,C'R'           Q. RRDS DATASET
         BNE   NOTRRDSR                   N. NOT RRDS READ, BYPASS
DONTINI1 DS    0H
         L     R9,CURRRPTR             LOAD CURRENT RRNO POINTER
         C     R9,NLOGR                Q. PAST HIGHEST RRNO
         BNL   EODADR                     Y. SIGNAL END OF DATASET
         LA    R9,1(R9)                POINT TO NEXT RECORD
         ST    R9,CURRRPTR             STORE CURRENT RRNO POINTER
         CLI   RRAHEAD,C'Y'            Q. HAVE AN RRDS RECORD AHEAD
         BE    GOTRRDS1                   Y. BYPASS GET RECORD
         GET   RPL=RETRVE              READ RECORD
         B     GOTRRDS1                GOT RECORD
EODADRRR DS    0H
         L     R1,NLOGR                LOAD NO OF RECORDS
         LA    R1,1(R1)                BUMP NUMBER OF RECORDS
         ST    R1,LASTRRNO             STORE LAST KEY GOT
GOTRRDS1 DS    0H
         CLC   LASTRRNO,CURRRPTR       Q. KEY = REQUEST
         BH    ESLOTP                     N. PROCESS EMPTY-SLOT
         MVI   RRAHEAD,C'N'            TURN READ AHEAD RECORD GOT OFF
         B     GETLENG1                GET LENGTH AND PROCESS
ESLOTP   DS    0H
         MVI   RRAHEAD,C'Y'            TURN READ AHEAD RECORD GOT ON
         MVC   0(4,R4),AREA2@          MOVE EMPTY-SLOT ADDRESS
         L     R3,EDLEN                LOAD RECORD LENGTH
         B     GOTLENG2                PROCESS RECORD
NOTRRDSR DS    0H
*---------------------------------------------------------------------*
         GET   RPL=RETRVE              READ RECORD
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   GETERCK                    N. GET ERROR CODE
GETLENG1 DS    0H
         SHOWCB RPL=RETRVE,AREA=ALENGTH,LENGTH=4,FIELDS=(RECLEN)
GOTLENG1 DS    0H
         CLI   VSAMTYPE,C'E'           Q. ESDS TYPE DATASET
         BNE   CHECKLEN                   N. GO AND CHECK LENGTH
         L     R14,AREA1@              LOAD DATA ADDRESS
         L     R15,AREA2@              LOAD EMPTY-SLOT LITERAL ADDRESS
         LH    R1,ESLOTLEN             LOAD RRDS RECORD LENGTH
         EX    R1,RRDSESLT             Q. EMPTY SLOT INDICATED
         BNE   CHECKLEN                   N. GO AND CHECK LENGTH
         ST    R15,0(R4)               STORE EMPTY-SLOT ADDR AS DATA@
         MVC   ALENGTH(4),EDLEN        MOVE DISPLAY LENGTH TO RECLEN
CHECKLEN DS    0H
         L     R3,ALENGTH              LOAD RECORD LENGTH
GOTLENG2 DS    0H
         ST    R3,0(R5)                STORE RECORD LENGTH BACK 2 EDIF
         C     R3,EDLEN                Q. RETURNED LENGTH > EDIT LENGTH
         BNH   NOTPARTR                   N. BYPASS PART RECORD
         MVC   0(4,R5),EDLEN           STORE RECORD LENGTH BACK 2 EDIF
         LA    R1,1                    SET LINE NUMBER DISPLAYED
         STH   R1,LINE#                STORE LINE NUMBER DISPLAYED
NOTPARTR DS    0H
         XC    EDIFRC,EDIFRC           SET ZERO RETURN CODE
         B     TOEDIFR                 GO BACK TO EDIF
GETERCK  DS    0H
         CH    R15,=H'8'               Q. RC=8
         BNE   GETERR01                   N. GO DISPLAY GET ERROR
         SHOWCB RPL=RETRVE,AREA=AFDBK,LENGTH=4,FIELDS=(FDBK)
         LA    R3,116
         C     R3,AFDBK                Q. INITIAL LOAD NEEDED
         BNE   GETERR02                   N. GO DISPLAY FEEDBACK ERROR
         LA    R3,1                    SET FLAG TO INDICATE
         ST    R3,INITLDFG                  INITIAL LOAD NEEDED
         B     GETERR02                GO DISPLAY FEEDBACK ERROR
GETERR01 DS    0H
         ISPEXEC 'SETMSG MSG(VSAM009)' GET ERROR
         B     EODADR                  RETURN WITH ERROR
GETERR02 DS    0H
         MVC   GC009(33),=C'FDBK FROM GET ERROR IS .. (READ).'
         HEXCHMAC AFDBK+3,GC009+23,1,MF=E
         ISPEXEC 'SETMSG MSG(GC009)'   GENERIC MESSAGE
EODADR   DS    0H
         MVI   EDIFRC,X'08'            SET RC=8
*---------------------------------------------------------------------*
TOEDIFR  DS    0H
         CLC   LRECL(4),=F'10'         Q. RECORDS LENGTH < ISPF LIMIT
         BNL   TOEDIFR1                   N.BYPASS
         MVC   0(4,R5),=F'10'          SET MINIMUM RECORD LENGTH
TOEDIFR1 DS    0H
         L     R13,RSAVE+4             RESTORE EDIF ROUTINE SAVE AREA @
         L     R14,12(R13)
         XR    R15,R15                 INITIALISE REGISTER
         IC    R15,EDIFRC              LOAD RETURN CODE
         LM    R0,R12,20(R13)
         BR    R14                     RETURN TO EDIF
*---------------------------------------------------------------------*
MOVEESLT MVC   0(0,R14),0(R15)         MOVE EMPTY SLOT
*=====================================================================*
*    WRITE ROUTINE                                                    *
*=====================================================================*
WRITRTN  DS    0H
         SAVE  (14,12)
         LM    R4,R8,0(R1)
         L     R10,0(R8)               ESTABLISH ADDRESABILITY
         LA    R11,4095(R10)               "          "
         LA    R11,1(R11)                  "          "
         LA    R12,4095(R11)               "          "
         LA    R12,1(R12)                  "          "
         ST    R13,WSAVE+4             STORE EDIF RTN SAVE AREA ADDRESS
         LA    R15,WSAVE
         ST    R15,8(R13)              SAVE NEW SAVE AREA ADDRESS
         LR    R13,R15                 POINT TO NEW SAVE AREA
*---------------------------------------------------------------------*
         L     R4,0(R4)                R4 HAS ADDRESS OF RECORD
         L     R5,0(R5)                R5 HAS LENGTH  OF RECORD
         L     R6,0(R6)                LOAD FW OF SOURCE AND CHG BITS
         L     R7,0(R7)                LOAD FW BINARY REQUEST CODE
*
         PDUMP MSG='R7=ACTION,WRITER',LIST=NO        <======
         LR    R3,R7
         N     R3,ALLDEL               Q. ALL RECORDS SHOULD BE DELETED
         BNZ   INITLD                     Y. GOTO DELETE PROCESS
         LR    R3,R7
         N     R3,FIRSTW               Q. FIRST ENTRY TO WRITE RTN
         BZ    GOAHEAD                    N. GOAHEAD
INITLD   DS    0H
         ISPEXEC 'VGET (EXTECONT EXTEESLT EXTEESUD) PROFILE'
         CLI   ORIGESUD,C'N'           Q. ORIGINAL ESDS UPDATE NEW
         BNE   ESUDNOTN                   N. BYPASS RESETTING
         MVI   EXTEESUD,C'A'           Q. SET ESDS UPDATE TO APPEND
ESUDNOTN DS    0H
         CLC   EXTEESLT(12),SPACES     Q. EMPTY-SLOT INDICATOR PASSED
         BE    HAVEESLT                   N. LEAVE AS IS
         L     R1,AREA2@               LOAD EMPTY-SLOT STRING START
         MVC   0(12,R1),EXTEESLT       MOVE EMPTY-SLOT INDICATOR
HAVEESLT DS    0H
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'E'           Q. ESDS DATASET
         BNE   TESTRRWR                   N. TEST RRDS WRITE
         CLI   EXTEESUD,C'A'           Q. ESDS UPDATE IS 'APPEND'
         BE    GOAHEAD                    Y. ONLY APPEND
         MODCB EXLST=EXLST1,EODAD=EODADWE1
         MODCB RPL=RETRVE,ARG=LASTRRNO,OPTCD=(ADR,SEQ,FWD,UPD)
         XC    LASTRRNO,LASTRRNO       INITIALISE POINTER
         POINT RPL=RETRVE              POINT TO START OF ESDS DATASET
         B     GOAHEAD                 GO AND PROCESS RECORDS
EODADWE1 DS    0H
         CLI   EXTEESUD,C'Y'           Q. LAST PUT RECORD
         BE    PUTREC21                   Y. GO PUT LAST RECORD
         MODCB RPL=RETRVE,AREA=AREA1,OPTCD=(NUP)
         MVI   EXTEESUD,C'A'           SET ESDS UPDATE TYPE TO APPEND
         CLI   RECFM,C'V'              Q. VARIABLE RECORDS
         BNE   PUTVSAM1                   N. GO PUT ESDS RECORD
         B     PUTREC11                GO PUT VARIABLE LENGTH RECORD
TESTRRWR DS    0H
*---------------------------------------------------------------------*
         MODCB EXLST=EXLST1,EODAD=EODADW
         CLI   VSAMTYPE,C'R'           Q. RRDS DATASET
         BNE   TESTILOD                   N. BYPASS
         CLC   NLOGR(4),=F'0'          Q. EMPTY DATASET ORIGINALLY
         BE    EODADW                     Y. GO TO END OF DATASET
RRDSPTLP DS    0H
         XC    LASTRRNO,LASTRRNO       INITIALISE LASTRRNO
         POINT RPL=RPLSEQ              POINT TO RECORD
         CLC   NLOGR(4),LASTRRNO       Q. LASTRRNO RETURNDED > NLOGR
         BL    EODADW                     Y. GO TO END OF DATASET
TESTILOD DS    0H
         L     R3,INITLDFG             LOAD INITIAL LOAD NEEDED FLAG
         LTR   R3,R3                   Q. INITIAL LOAD NEEDED
         BZ    DELALL                     N. DELETE ALL RECORDS
         XC    INITLDFG,INITLDFG       RESET INIT LOAD FLAG
         L     R3,LRECL                SET RECORD LENGTH
         MODCB RPL=RETRVE,RECLEN=(R3)  MODIFY CB FOR NEW RECLEN
         L     R1,AREA1@               LOAD AREA1 ADDRESS
         MVC   0(L'DUMMYREC,R1),DUMMYREC MOVE DUMMY RECORD TO AREA
         PUT   RPL=RETRVE              WRITE DUMMY RECORD
         CLOSE ACB1                    CLOSE DATASET
         OPEN  ACB1                    DELETE DATASET
         B     DELLOOP                 GO DELETE ALL
DELALL   DS    0H
         L     R3,EMPTYDS
         LTR   R3,R3                   Q. EMPTY DATASET
         BNZ   EMPTVSAM                   N. BYPASS DELETE ALL
         MVC   EMPTYDS(4),=F'1'        SET EMPTY DATASET FLAG
*        MVI   FIRSTWRT,C'Y'           TURN FIRST WRITE FLAG ON
         B     DELLOOP                 DELETE ALL RECORDS
EMPTVSAM DS    0H
         LR    R3,R5                   LOAD RECORD LENGTH
         L     R1,RKP                  LOAD RELATIVE RECORD POSIT
         A     R1,KEYL                 ADD KEY LENGTH
         CR    R5,R1                   Q. RECORD LENGTH > PAST KEY
         BNL   LENGOK01                   Y. LENGTH OK
         LR    R3,R1                   SET NEW LENGTH
LENGOK01 DS    0H
         MODCB RPL=RETRVE,RECLEN=(R3)  SET RECORD LENGTH
         B     GOAHEAD                 GO AHEAD
DELLOOP  DS    0H
         GET   RPL=RPLSEQ
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    ERASERC                     Y. GO ERASE RECORD
         SHOWCB RPL=RPLSEQ,AREA=AFDBK,LENGTH=4,FIELDS=(FDBK)
         MVC   GC009(34),=C'FDBK FROM GET ERROR IS .. (DELETE).'
         HEXCHMAC AFDBK+3,GC009+23,1,MF=E
         ISPEXEC 'SETMSG MSG(GC009)'   GENERIC MESSAGE
         CLOSE ACB1                    CLOSE VSAM DATA SET
         LA    R15,8                   LOAD RETURN CODE
         B     RETURN1                 GO BACK TO EDIF WITH ERORR
ERASERC  DS    0H
         ERASE RPL=RPLSEQ              ERASE ALL RECORDS
         B     DELLOOP
EODADW   DS    0H
         ENDREQ RPL=RPLSEQ             RELEASE LAST CI PROCESSED
         CLI   VSAMTYPE,C'R'           Q. RRDS TYPE DATASET
         BNE   GOAHEAD                    N. BYPASS
         XC    LASTRRNO,LASTRRNO       INITIALISE LASTRRNO FOR RRDS
         MODCB RPL=RETRVE,ARG=LASTRRNO,OPTCD=(KEY,DIR)
         MODCB RPL=RETRVE,MSGAREA=GC009,MSGLEN=150
GOAHEAD  DS    0H
         LR    R3,R7
         N     R3,ALLDEL               Q. ALL RECORDS DELETED
         BNZ   EXITMSG                    Y. GO BACK TO EDIF
INSERT   DS    0H
*---------------------------------------------------------------------*
         CLC   LRECL(4),=F'255'        Q. WITHIN EDIT LIMIT
         BH    SPLITREC                   N. PROCESS SPLIT RECORDS
         L     R1,AREA1@               LOAD AREA1 ADDRESS
         MVC   0(255,R1),0(R4)         MOVE RECORD TO BE WRITTEN
         C     R5,=F'10'               Q. LRECL < ISPF LIMIT
         BH    TESTVARR                   N. TEST FOR VARIABLE RECORD
         L     R5,LRECL                LOAD LOGICAL RECORD LENGTH
TESTVARR DS    0H
         CLI   RECFM,C'V'              Q. VARIABLE RECORDS
         BNE   TSTWTYP1                   N. GO TEST DATASET TYPE
         MODCB RPL=RETRVE,RECLEN=(R5)  SET RECORD LENGTH
TSTWTYP1 DS    0H
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'E'           Q. ESDS DATASET
         BNE   TSTRRDS1                   N. TEST RRDS
         CLI   EXTEESUD,C'O'           Q. ESDS UPDATE IS 'OVERWRITE'
         BNE   PUTVSAM1                   N. GO AND APPEND
         MODCB RPL=RETRVE,AREA=AREA3   SET RECORD LENGTH
         GET   RPL=RETRVE              GET FOR UPDATE
         MODCB RPL=RETRVE,AREA=AREA1   SET RECORD LENGTH
         B     PUTVSAM1                GO AND UPDATE
TSTRRDS1 DS    0H
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'R'           Q. RRDS DATASET
         BNE   PUTVSAM1                   N. NOT RRDS READ, BYPASS
         L     R9,LASTRRNO             LOAD LAST RECORD RETRIEVED
         LA    R9,1(R9)                POINT TO NEXT RECORD
         ST    R9,LASTRRNO             LOAD LAST RECORD RETRIEVED
         L     R14,AREA1@              LOAD DATA ADDRESS
         L     R15,AREA2@              LOAD EMPTY-SLOT LITERAL ADDRESS
         LH    R1,ESLOTLEN             LOAD RRDS RECORD LENGTH
         EX    R1,RRDSESLT             Q. EMPTY SLOT INDICATED
         BE    TOEDIFW                    Y. BYPASS
PUTVSAM1 DS    0H
         PUT   RPL=RETRVE              INSERT RECORD
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    TOEDIFW                    Y. BYPASS
         B     GETAFDBK                GO GET FEED BACK
*---------------------------------------------------------------------*
SPLITREC DS    0H
         MVI   CONTCOMP+1,X'00'        CONT MARKER COMPENSATOR
         LR    R3,R7                   LOAD REQUEST INDICATOR
         N     R3,FIRSTW               Q. FIRST ENTRY TO WRITE RTN
         BZ    TESTCONT                   N. TEST CONTINUATION
*        CLI   FIRSTWRT,C'Y'           Q. FIRST WRITE
*        BNE   TESTCONT                   N. TEST CONTINUATION
*        MVI   FIRSTWRT,C'N'           TURN FIRST WRITE FLAG OFF
         LA    R5,1(R5)                +1 FOR LINE 1 AS -1 IN BUILD
         BCTR  R4,0                    POINT BACK 1 CHAR FOR +1 BUILD
         MVI   CONTCOMP+1,X'01'        CONT MARKER COMPENSATOR
         CLI   RECFM,C'F'              Q. FIXED RECORDS
         BNE   BLDRECRD                   N. GO BUILD RECORD
         L     R3,LRECL                LOAD RECORD LENGTH
         MODCB RPL=RETRVE,RECLEN=(R3)  SET RECORD LENGTH
         B     BLDRECRD                GO BUILD RECORD
TESTCONT DS    0H
         CLC   0(1,R4),EXTECONT        Q. 1ST CHAR CONTINUATION INDIC
         BE    BLDRECRD                   Y. GO CONTINUE BUILD RECORD
PUTRECRD DS    0H
         CLI   RECFM,C'F'              Q. FIXED RECORDS
         BE    PUTREC10                   Y. GO PUT RECORD
         L     R3,LASTRECL             LOAD BUILT RECORD LENGTH
         C     R3,LRECL                Q. RECORD BUILT > LRECL
         BNH   LENGOK10                   N. LENGTH OK
         L     R3,LRECL                LOAD LRECL
         B     LENGOK11                GO MODCB NEW LENGTH
LENGOK10 DS    0H
         L     R1,RKP                  LOAD RELATIVE RECORD POSIT
         A     R1,KEYL                 ADD KEY LENGTH
         CR    R3,R1                   Q. RECORD LENGTH > PAST KEY
         BNL   LENGOK11                   Y. LENGTH OK
         LR    R3,R1                   INIT NEW RECORD LENGTH
LENGOK11 DS    0H
         MODCB RPL=RETRVE,RECLEN=(R3)  SET RECORD LENGTH
PUTREC10 DS    0H
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'E'           Q. ESDS DATASET
         BNE   TSTRRDS2                   N. TEST RRDS
         CLI   EXTEESUD,C'O'           Q. ESDS UPDATE IS 'OVERWRITE'
         BNE   PUTREC11                   N. GO AND APPEND
         MODCB RPL=RETRVE,AREA=AREA3   SET RECORD LENGTH
         GET   RPL=RETRVE              GET FOR UPDATE
         MODCB RPL=RETRVE,AREA=AREA1   SET RECORD LENGTH
         B     PUTREC11                GO AND UPDATE
TSTRRDS2 DS    0H
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'R'           Q. RRDS DATASET
         BNE   PUTREC11                   N. NOT RRDS READ, BYPASS
         L     R9,LASTRRNO             LOAD LAST RECORD RETRIEVED
         LA    R9,1(R9)                POINT TO NEXT RECORD
         ST    R9,LASTRRNO             LOAD LAST RECORD RETRIEVED
*        PDUMP MSG='R9=LASTRR,R3=LENGTH',LIST=NO        <======
         L     R14,AREA1@              LOAD DATA ADDRESS
         L     R15,AREA2@              LOAD EMPTY-SLOT LITERAL ADDRESS
         LH    R1,ESLOTLEN             LOAD RRDS RECORD LENGTH
         EX    R1,RRDSESLT             Q. EMPTY SLOT INDICATED
         BE    INIREC11                   Y. BYPASS PUT RECORD
PUTREC11 DS    0H
*---------------------------------------------------------------------*
  PDUMP AREA1,MSG='ABOUT TO PUT',LIST=NO        <======
         PUT   RPL=RETRVE              INSERT RECORD
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   GETAFDBK                   N. GET FEED BACK
INIREC11 DS    0H
         XC    BLDLEN,BLDLEN           INITIALISE BUILD LENGTH
         LA    R5,1(R5)                +1 FOR LINE 1 AS -1 IN BUILD
         BCTR  R4,0                    POINT BACK 1 CHAR FOR +1 BUILD
         MVI   CONTCOMP+1,X'01'        CONT MARKER COMPENSATOR
BLDRECRD DS    0H
         L     R2,AREA1@               LOAD DESTINATION ADDRESS
         L     R3,BLDLEN               LOAD BUILD LENGTH
         LR    R1,R3                   SAVE BUILD LENGTH
         AH    R3,EXTEDLEN             ADD DISPLAY LENGTH
         AH    R3,CONTCOMP             SUBTRACT COMPENSATOR
         ST    R3,BLDLEN               STORE BUILD LENGTH
         AR    R2,R1                   POINT PAST LAST BUILT CHARACTER
         BCTR  R5,0                    REMOVE CONT INDICATOR
         AR    R1,R5                   ADD LENGTH
         ST    R1,LASTRECL             STORE LAST LENGTH PROCESSED
         BCTR  R5,0                    -1 FOR 'EX' INSTRUCTION
         MVC   0(255,R2),SPACES        INITIALISE AREA
         LTR   R5,R5                   Q. ANY LENGTH RETURNED
         BNP   TOEDIFW                    N. RETURN TO EDIF
         EX    R5,BUILDREC             GO BUILD RECORD
         B     TOEDIFW                 RETURN TO EDIF
GETAFDBK DS    0H
*---------------------------------------------------------------------*
         SHOWCB RPL=RETRVE,AREA=AFDBK,LENGTH=4,FIELDS=(FDBK)
         CLC   AFDBK(4),MAXCCO         Q. HAVE HIGHER RETURN CODE
         BNH   TOEDIFW                    N. BYPASS
         MVC   MAXCCO(4),AFDBK         MOVE TO HIGHER RETURN CODE
TOEDIFW  DS    0H
         LR    R3,R7
         N     R3,LASTW                Q. LAST ENTRY TO WRITE ROUTINE
         BZ    RETURN                     N. RETURN
         CLC   LRECL(4),=F'255'        Q. WITHIN EDIT LIMIT
         BNH   SAVEDMSG                   Y. WRITE SAVED MESSAGE
         CLI   RECFM,C'F'              Q. FIXED RECORDS
         BE    PUTREC20                   Y. GO PUT RECORD
         L     R3,LASTRECL             LOAD BUILT RECORD LENGTH
         C     R3,LRECL                Q. RECORD BUILT > LRECL
         BNH   LENGOK20                   N. LENGTH OK
         L     R3,LRECL                LOAD LRECL
         B     LENGOK21                GO MODCB NEW LENGTH
LENGOK20 DS    0H
         L     R1,RKP                  LOAD RELATIVE RECORD POSIT
         A     R1,KEYL                 ADD KEY LENGTH
         CR    R3,R1                   Q. RECORD LENGTH > PAST KEY
         BNL   LENGOK21                   Y. LENGTH OK
         LR    R3,R1                   INIT NEW RECORD LENGTH
LENGOK21 DS    0H
         MODCB RPL=RETRVE,RECLEN=(R3)  SET RECORD LENGTH
PUTREC20 DS    0H
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'E'           Q. ESDS DATASET
         BNE   TSTRRDS3                   N. TEST RRDS
         CLI   EXTEESUD,C'O'           Q. ESDS UPDATE IS 'OVERWRITE'
         BNE   PUTREC21                   N. GO AND APPEND
         MODCB RPL=RETRVE,AREA=AREA3   SET RECORD LENGTH
         GET   RPL=RETRVE              GET FOR UPDATE
         MODCB RPL=RETRVE,AREA=AREA1   SET RECORD LENGTH
         B     PUTREC21                GO AND UPDATE
TSTRRDS3 DS    0H
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'R'           Q. RRDS DATASET
         BNE   PUTREC21                   N. NOT RRDS READ, BYPASS
         L     R9,LASTRRNO             LOAD LAST RECORD RETRIEVED
         LA    R9,1(R9)                POINT TO NEXT RECORD
         ST    R9,LASTRRNO             LOAD LAST RECORD RETRIEVED
         L     R14,AREA1@              LOAD DATA ADDRESS
         L     R15,AREA2@              LOAD EMPTY-SLOT LITERAL ADDRESS
         LH    R1,ESLOTLEN             LOAD RRDS RECORD LENGTH
         EX    R1,RRDSESLT             Q. EMPTY SLOT INDICATED
         BE    SAVEDMSG                   Y. BYPASS PUT RECORD
PUTREC21 DS    0H
*---------------------------------------------------------------------*
         PUT   RPL=RETRVE              INSERT RECORD
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    SAVEDMSG                   Y. BYPASS
         SHOWCB RPL=RETRVE,AREA=AFDBK,LENGTH=4,FIELDS=(FDBK)
         CLC   AFDBK(4),MAXCCO         Q. HAVE HIGHER RETURN CODE
         BNH   SAVEDMSG                   N. BYPASS
         MVC   MAXCCO(4),AFDBK         MOVE TO HIGHER RETURN CODE
SAVEDMSG DS    0H
         L     R3,MAXCCO               LOAD MAX RETURN CODE
         LTR   R3,R3                   Q. ZERO RETURN CODE
         BNZ   ERROREXT                   N. TEL OF ERROR
         ISPEXEC 'SETMSG MSG(VSAM008)' DATASET SAVED MESSAGE
         B     EXITMSG                 EXIT WITH MESSAGE SET
ERROREXT DS    0H
         UNPACK R3,4,MAXCCO,MF=E       UNPACK DATA
         ISPEXEC 'VPUT (MAXCCO) SHARED'
         ISPEXEC 'SETMSG MSG(VSAM008A)' DATASET SAVED MESSAGE
EXITMSG  DS    0H
         LA    R3,0                    RESET EMPTY DATASET FLAG
         ST    R3,EMPTYDS
*---------------------------------------------------------------------*
         CLI   VSAMTYPE,C'E'           Q. ESDS DATASET
         BNE   RETURN                     N. RETURN TO EDIF
         CLI   EXTEESUD,C'A'           Q. ESDS UPDATE IS 'APPEND'
         BE    RETURN                     N. RETURN TO EDIF
         MODCB EXLST=EXLST1,EODAD=RETURN
EMPTREST DS    0H
         MODCB RPL=RETRVE,AREA=AREA1   SET RECORD INPUT DEST
         GET   RPL=RETRVE              GET FOR UPDATE
  PDUMP AREA1,MSG='EMPTREST LOOP',LIST=NO        <======
         MODCB RPL=RETRVE,AREA=AREA2   SET RECORD OUTPUT SOURCE
         PUT   RPL=RETRVE              UPDATE RECORD WITH EMPTY-SLOT
         B     EMPTREST                LOOP TILL END
*---------------------------------------------------------------------*
RETURN   DS    0H
         LA    R15,0                   LOAD RETURN CODE
RETURN1  DS    0H
         L     R13,RSAVE+4             RESTORE EDIF ROUTINE SAVE AREA @
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14                     RETURN TO EDIF
*---------------------------------------------------------------------*
BUILDREC MVC   0(0,R2),1(R4)           BUILD RECORD
RRDSESLT CLC   0(0,R14),0(R15)         Q. EMPTY SLOT INDICATED
*=====================================================================*
*    VSAM CONTROL BLOCKS                                              *
*=====================================================================*
ACB1     ACB   EXLST=EXLST1,                                           X
               MACRF=(ADR,KEY,SEQ,SKP,IN,OUT),                         X
               BUFND=5,                                                X
               BUFNI=2,                                                X
               RMODE31=ALL
EXLST1   EXLST EODAD=(EODADR,A)
RETRVE   RPL   ACB=ACB1,                                               X
               AREA=AREA1,                                             X
               AREALEN=32760,                                          X
               OPTCD=SEQ
RPLVER   RPL   ACB=ACB1,                                               X
               AREA=AREA1,                                             X
               AREALEN=32760,                                          X
               OPTCD=CNV
RPLSEQ   RPL   ACB=ACB1,                                               X
               AREA=AREA1,                                             X
               AREALEN=32760,                                          X
               OPTCD=(KEY,SEQ,KEQ,UPD)
*             ARG=KEY1,                                               X
*=====================================================================*
*    WORK AREAS AND CONSTANTS                                         *
*=====================================================================*
         LTORG
*---------------------------------------------------------------------*
DWORK8   DS    D
SAVE1    DC    18F'0'               REGISTER SAVE AREA
RSAVE    DC    18F'0'               REGISTER SAVE AREA
WSAVE    DC    18F'0'               REGISTER SAVE AREA
*
VDEL     DC    CL8'VDELETE'
DSNAME   DC    CL44' '
DDNAME   DC    CL8' '
ZEITDSN  DC    CL8'ZEITDSN'
TDSNAME  DC    CL44' '
*
EXTEPANL DC   CL8'EXTEPANL'
EDIREC   DC   CL8'EDIREC'
INIT     DC   CL8'INIT'
QUERY    DC   CL8'QUERY'
DEFER    DC   CL8'DEFER'
*
EDIF     DC   CL8'EDIF'
RKP      DC   F'0'
KEYL     DC   F'0'
NLOGR    DC   F'0'
LRECL    DC   F'255'
KEYLEN   DC   F'0'
KEYPOS   DC   F'0'
         DC   C' '
EXTERECF DS   0CL2
RECFM    DC   CL2'V'
RADDR    DC   AL4(READRTN)
WADDR    DC   AL4(WRITRTN)
EDLEN    DC   F'255'
PROF     DC   CL8'EXTEPROF'
DDATA    DC   F'0'
YES      DC   CL8'YES'
*
LASTRRNO DC   F'0'
CURRRPTR DC   F'0'
RRDSAHDL DC   F'0'
ALENGTH  DC   F'0'
AFDBK    DC   F'0'
ERROR    DC   F'0'
VERIFIED DC   F'0'
OPNAGAIN DC   F'0'
EMPTYDS  DC   F'0'
INITLDFG DC   F'0'
RC4      DC   F'4'
MAXCCO   DC   F'0'
EXTEDLEN DC   F'0'
BLDLEN   DC   F'0'                     BUILD LENGTH (1 FOR FIRST LINE)
LASTRECL DC   F'0'                     LAST PROCESSED LENGTH
FIRSTW   DC   X'00000001'
LASTW    DC   X'00000002'
ALLDEL   DC   X'00000004'
LINE#    DC   H'0'                     LINE NUMBER
CONTCOMP DC   H'0'                     CONTINUATION MARKER COMPENSATOR
ESLOTLEN DC   H'0'                     LENGTH TO TEST EMPTY-SLOTS
VSAMTYPE DC   CL1'K'                   DATASET TYPE INDICATOR
EXTECONT DC   CL1'+'                   LINE CONTINUATION INDICATOR
FIRSTWRT DC   CL1'Y'                   FIRST WRITE INDICATOR
EXTESPLT DC   CL1'N'                   EDIT SPLIT INDICATOR
EXTEESUD DC   CL1'A'                   ESDS UPDATE ACTION INDICATOR
ORIGESUD DC   CL1'A'                   ESDS UPDATE ACTION INDICATOR
*                                       (APPEND OR OWERWRITE)
EXTERECL DC   CL6'256'                 RECORD LENGTH
RRDSSLTS DC   CL8'0'                   NUMBER OF RECORDS
DEFSET   DC   CL1'N'                   DEFAULTS SET INDICATOR
RRAHEAD  DC   CL1'N'                   GOT AN AHEAD RRDS RECORD
EDIFRC   DS   CL1                      RETURN CODE FOR EDIF RETURN
AREA1@   DC   A(AREA1)
AREA2@   DC   A(AREA2)
AREA3@   DC   A(AREA3)
EXTEESLT DS   CL12
*---------------------------------------------------------------------*
         ISPEXEC  INIT=Y,MF=L
         ISPVDEFX MF=L
         UNPACK   MF=L
         HEXCHMAC MF=L
*---------------------------------------------------------------------*
KEY1     DC   XL255'0000000000000000'
DUMMYREC DS   0CL255
         DC   CL72'DUMMY RECORD FOR INITIAL LOAD'
         DC   CL8'00000010'
GC009    DC   CL175' '
SPACES   DC   CL255' '
HEX00    DC   XL255'00'
*---------------------------------------------------------------------*
AREA1    DS   CL32760
*AREA2  DC   4XL80'4DC5D4D7E3E860E2D3D6E35D000000000000000000000000000+
*             00000000000000000000000000000000000000000000000000000000+
*              00000000000000000000000000000000000000000000000000000'
AREA2    DC   5CL80'(EMPTY-SLOT)                                       +
                                            '
AREA3    DS   CL32760
*---------------------------------------------------------------------*
         END
*=====================================================================*
