***********************************************************************
*                                                                     *
*    Title:    'RETURN ISPF DATASET NAME or SCREEN LINE'              *
*    System:   N/A                                                    *
*    Module:   GETDSN                                                 *
*    Program:  GETDSN                                                 *
*    Function: The purpose of this program is to acquire the dataset  *
*              name (and member if applicable) from the headline of   *
*              the ISPF panel currently being displayed.              *
*                                                                     *
*              The program establishes the current session if in      *
*              split screen mode and extracts the dataset name from   *
*              the appropriate screen display.                        *
*                                                                     *
*              For meaningfull parsing, the top line of the screen    *
*              display must have the following pattern:               *
*                                                                     *
*                  ? -? dataset.name(member) -?                       *
*              where '?' are wildcard character(s)...                 *
*                                                                     *
*              You may request the return of a particular line in     *
*              the range of 1 to nn (where nn is the max screen       *
*              depth) by setting the variable LINE to the desired     *
*              line number and placing it in the ISPF shared          *
*              profile.  The line value is placed into the variable   *
*              back in the shared pool. Any errors will leave the     *
*              origanal value intact.                                 *
*              By default, screen 1 will be processed. You may        *
*              specify screen 2 by setting variable SCREEN to 2 and   *
*              placing it in the shared pool.                         *
*                                                                     *
*              Output parameters:                                     *
*                1. Variable DATASET (max 54 characters) will be      *
*                   placed in the ISPF shared pool if a format match  *
*                   is found on the first logocal display line.       *
*                   Invalid format will return all spaces.            *
*                2. Variable HEADLINE (79 characters) will be         *
*                   placed in the ISPF shared pool regardless of the  *
*                   the parsing outcome.                              *
*                                                                     *
*              Program return code:                                   *
*                 0  - Pattern match found and DSN (hopefully) has    *
*                      been extracted and returned in the ISPF        *
*                      variable.                                      *
*                 4  - No pattern match found but a valid TLDn screen *
*                      has been identified. The active screen's       *
*                      headline is in the variable 'HEADLINE'.        *
*                 8  - No valid TLDn screen found hanging off the     *
*                      current TCB.                                   *
*                                                                     *
*    Notes:    Program is re-entrant                                  *
*              AMODE 31, RMODE Any.                                   *
*    Authors:  ASYSTS Pty. Ltd. (A. Kara)                             *
*    Date:     20th October, 1993                                     *
*                                                                     *
***********************************************************************
*         PRINT OFF
*         COPY  @MACROS                 COMMON MACROS
*         PRINT ON
***********************************************************************
                                                                SPACE 1
GETDSN   KICKOFF (R11,R12),WORKAREA,WORKAREL,AMODE=31,LIST=N
                                                                SPACE 1
*---------------------------------------------------------------------*
* Initialise ISPF environment etc....                                 *
*---------------------------------------------------------------------*
*        PDUMP MSG='ENTRY INTO GETDSN',MF=E FOR DEBUGING
         ISPINIT  MF=E,LIST=NO
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(DATASET),ANM=DATASET,LEN=54
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(HEADLINE),ANM=HEADLINE,LEN=79
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(LINE),ANM=LINE,LEN=80
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(SCREEN),ANM=SCREEN,LEN=1
                                                                SPACE 1
         MVC   DATASET,SPACES          INITIALISE DATASET NAME
         MVC   RCODE,=H'4'             SET ERROR RETURN CODE
                                                                SPACE 1
*---------------------------------------------------------------------*
* Point to the ISPF screen image buffer                               *
*      0      ---> PSA                                                *
*  + 218?     ---> Current TCB                                        *
*  +  54?     ---> TLD (4th. byte is scrren number 1 or 2)            *
*  +  20?     ---> TCT                                                *
*  + 150?     ---> TPP                                                *
*  +  20?     ---> Screen buffer                                      *
*---------------------------------------------------------------------*
* Consider:                                                           *
*      0      ---> PSA                                                *
*  + 218?     ---> Current TCB                                        *
*  +  54?     ---> TLD (4th. byte is scrren number 1 or 2)            *
*  +  80?     ---> Screen buffer                                      *
*     A6?     ---> Cursor position in screen (???)                    *
*---------------------------------------------------------------------*
         L     R2,X'218'               LOAD CURRENT TCB ADDRESS (MINE)
         L     R2,X'54'(R2)            POINT TO TLD
         CLC   =C'TLD',0(R2)           Q. VALID EYECATCHER
         BNE   EXITRC08                   N. EXIT WITH APPROPRIATE RC
         MVC   SESSION(1),3(R2)        MOVE SCREEN SESSION ID (1 or 2)
         L     R2,X'20'(R2)            POINT TO TLD
         L     R2,X'150'(R2)           POINT TO TLD
         L     R2,X'20'(R2)            POINT TO TLD
*---------------------------------------------------------------------*
*  Move data (max screen size of 43 x 80)                             *
*---------------------------------------------------------------------*
         XR    R4,R4                   INITIALISE EVEN PAIR
         LA    R5,3440                 MAX SCREEN SIZE OF 43 X 80
         LA    R1,256                  MAX MOVE SIZE
         DR    R4,R1                   GET LOOP DETAILS
         LA    R6,WORK1                DESTINATION ADDRESS
MOVLOP   DS    0H
         MVC   0(256,R6),0(R2)         MOVE DATA
         LA    R2,256(R2)              UP SOURCE
         LA    R6,256(R6)              UP DESTINATION
         BCT   R5,MOVLOP               LOOP TILL END
MOVEREST MVC   0(0,R6),0(R2)           MOVE DATA
         BCTR  R4,0                    ADJUST FOR 'EX' COMMAND
         EX    R4,MOVEREST             MOVE REST OF DATA
                                                                SPACE 1
         LA    R2,WORK1                LOAD ADDRESS OF WORK AREA
         CLI   SESSION,C'1'            Q. IN SCREEN 1
         BE    PROCESS                    Y. PROCESS
*---------------------------------------------------------------------*
*  For bottom screen session, look for screen seperator of            *
*  '.  .  .' etc...                                                   *
*---------------------------------------------------------------------*
         LA    R7,3440                 LOAD MAX SIZE
         SH    R7,=AL2(L'SEPERATR)     SUBTRACT LENGTH OF SEPERATOR
LOOP1    DS    0H
         CLC   0(L'SEPERATR,R2),SEPERATR Q. SPLIT SCREEN HIT
         BNE   NEXTCHR1                     N. BUMP POINTERS
         LA    R2,79(R2)               POINT PAST SPLIT SEPERATOR
         B     PROCESS                 GO PROCESS
NEXTCHR1 DS    0H
         LA    R2,1(R2)                NEXT CHARACTER
         BCT   R7,LOOP1                LOOP TILL END
         LA    R2,WORK1                NO SPLIT SCREEN
*---------------------------------------------------------------------*
*  Look for the following patern:                                     *
*   ???? --- dataset.name(member) -??????                             *
*  Note, if the pattern is not matched, the headline is still         *
*  returned.                                                          *
*---------------------------------------------------------------------*
PROCESS  DS    0H
         MVC   HEADLINE,0(R2)          MOVE HEALINE TO OUTPUT ARE
         ISPEXEC 'VPUT HEADLINE SHARED' TELL ISPF
*---------------------------------------------------------------------*
*  See if a line value was requested on variable 'LINE'               *
*---------------------------------------------------------------------*
         ISPEXEC 'VGET (LINE,SCREEN) SHARED'  GET LINE PARAMETER
                                                                SPACE 1
         CLI   LINE,C' '               Q. LINE PARAMETER PASSED
         BE    NOLINEQ                    N. BYPASS
         CLI   LINE,C'0'               Q. FIRST CHAR NUMERIC
         BL    NOLINEQ                    N. BYPASS
         XR    R9,R9                   INITIALISE MOVE LENGTH
         CLI   LINE+1,C' '             Q. SECOND CHAR SPACE
         BE    TESTLINE                   Y. PROCESS DATA
         CLI   LINE+1,C'0'             Q. SECOND CHAR NUMERIC
         BL    NOLINEQ                    N. BYPASS
         LA    R9,1(R9)                BUMP COUNTER
         CLI   LINE+2,C' '             Q. THIRD CHAR NUMERIC
         BNE   NOLINEQ                    N. BYPASS
TESTLINE DS    0H
         MVI   LINE#,C'0'              INITIALISE FIELD
         LA    R3,LINE#+1              LOAD LAST BYTE  OF LINE #
         SR    R3,R9                   BACK BACK NO OF CHARS > 1
         EX    R9,MOVELIN#             MOVE LINE NUMBER
         PACK  DWORK8(8),LINE#(2)      PACK LINE NUMBER
         CVB   R9,DWORK8               CONVERT TO BINARY
         MVC   GTERMW(GTERMCL),GTERMC  INITIALISE GET TERM AREA
*---------------------------------------------------------------------*
         LA    R7,NSIZE                LOAD SCREEN SIZE DEST
         LA    R8,ASIZE                LOAD ALTERNATE SIZE DEST
         LA    R1,GTERMW               POINT TO STORAGE
         GTTERM PRMSZE=(R7),ALTSZE=(R8),MF=(E,(R1)) GET DETAILS
*---------------------------------------------------------------------*
         XR    R1,R1
         IC    R1,ASIZE
         CR    R9,R1                   Q. NUMBER > SCREEN SIZE
         BH    NOLINEQ                    Y. BYPASS
         BCTR  R9,0                    RELATIVE NUMBER
         MH    R9,=H'80'               BUMP BY CHARS PER LINE
         CLI   SCREEN,C'2'             Q. SECOND SCREEN REQUESTED
         BE    SCREQ2                     Y. GO PROCESS SCREEN 2
SCREQ1   DS    0H
         LR    R1,R2                   POINT TO 2ND SCREEN AREA
         B     POSINSCR                GO POSITION IN SCREEN
SCREQ2   DS    0H
         LA    R1,WORK1                LOAD ADDRESS OF WORK AREA
POSINSCR DS    0H
         AR    R9,R1                   POINT INTO DATA AREA
         LA    R1,WORK1                POINT TO START OF BUFFER
         LA    R1,3440(R1)             POINT TO END OF BUFFER
         CR    R9,R1                   Q. PAST END OF BUFFER
         BH    NOLINEQ                    Y. SIGNAL AS IN ERROR
         MVC   LINE,0(R9)              MOVE LINE TO OUTPUT ARE
NOLINEQ  DS    0H
         ISPEXEC 'VPUT LINE SHARED'    TELL ISPF
*---------------------------------------------------------------------*
         LA    R8,80                   MUST BE IN 1ST. 80 BYTES
LOOP2    DS    0H
         CLI   0(R2),C'-'              Q. DELIMIT CHARACTER
         BE    LOOP2E                     Y. EXIT LOOP
         LA    R2,1(R2)                BUMP CHARACTER POINTER
         BCT   R8,LOOP2                LOOP TILL FOUND
         B     EXITPROG                EXIT W/O PATTERN MATCH
LOOP2E   DS    0H
         LA    R2,1(R2)                POINT PAST 1ST. '-'
         BCTR  R8,0                    LESS 1 FOR ABOVE '-'
LOOP3    DS    0H
         CLI   0(R2),C' '              Q. DELIMIT CHARACTER
         BE    LOOP3E                     Y. EXIT LOOP
         LA    R2,1(R2)                BUMP CHARACTER POINTER
         BCT   R8,LOOP3                LOOP TILL FOUND
         B     EXITPROG                EXIT W/O PATTERN MATCH
LOOP3E   DS    0H
         LA    R2,1(R2)                POINT PAST 1ST. '-'
         BCTR  R8,0                    LESS 1 FOR ABOVE '-'
LOOP4    DS    0H
         CLI   0(R2),C' '              Q. SPACE FILLERS
         BNE   LOOP4E                     N. EXIT LOOP
         LA    R2,1(R2)                BUMP CHARACTER POINTER
         BCT   R8,LOOP3                LOOP TILL FOUND
         B     EXITPROG                EXIT W/O PATTERN MATCH
LOOP4E   DS    0H
         XR    R9,R9                   LENGTH COUNTER
         LA    R3,DATASET              DESTINATION LENGTH
LOOP5    DS    0H
         MVC   0(1,R3),0(R2)           MOVE A CHARECTER
         LA    R9,1(R9)                BUMP LENGTH COUNTER
         BCT   R8,LOOP5C               CONTINUE IF CHARS LEFT
         B     LOOP5E                  EXIT LOOP
LOOP5C   DS    0H
         LA    R2,1(R2)                BUMP CHARACTER POINTER
         LA    R3,1(R3)                BUMP CHARACTER POINTER
         CLI   0(R2),C' '              Q. SPACE DELIMITER
         BNE   LOOP5                      N. NEXT CHARACTER
LOOP5E   DS    0H
                                                                SPACE 1
*---------------------------------------------------------------------*
* Pass datase to ISPF in variable 'DATASET' in the shared pool        *
*---------------------------------------------------------------------*
PASSDSN  DS    0H
         ISPEXEC 'VPUT DATASET SHARED' TELL ISPF
         XC    RCODE,RCODE             INITIALISE RETURN CODE
*---------------------------------------------------------------------*
* Exit program                                                        *
*---------------------------------------------------------------------*
EXITPROG DS    0H
         LH    R15,RCODE               LOAD RETURN CODE
         RACKOFF RC=(R15),LIST=NO      RETURN
                                                                SPACE 1
EXITRC08 DS    0H
         MVC   RCODE,=H'8'             SET ERROR RETURN CODE
         B     EXITPROG                GO TO COMMON EXIT
                                                                SPACE 1
*---------------------------------------------------------------------*
MOVELIN# MVC   0(0,R3),LINE            MOVE LINE NUMBER REQUESTED
*---------------------------------------------------------------------*
*=====================================================================*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
SPACES   DC    CL256' '
SEPERATR DS    0CL79                   SPLIT SCREEN SEPERATOR
         DC    26C'.  '
         DC    C'.'
GTERMC   GTTERM PRMSZE=(R7),ALTSZE=(R8),MF=L
GTERMCL  EQU   *-GTERMC
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
WORKAREA DSECT
         DS    18F                     REGISTER SAVE AREA
DWORK8   DS    D                       DOUBLE WORD WORK AREA
         ORG   DWORK8
NSIZE    DC    H'0'
ASIZE    DC    H'0'
         ORG
RCODE    DS    H                       RETURN CODE STORAGE
LINE#    DS    CL2                     LINE NUMBER REQUESTED
SESSION  DS    CL1                     SCREEN SESSION
SCREEN   DS    CL1                     SCREEN SESSION REQUEST
DATASET  DS    CL54                    DATASET(MEMBER) NAME
HEADLINE DS    CL79                    HEADLINE FOR PARSING
LINE     DS    CL80                    REQUESTED LINE
GTERMW   GTTERM PRMSZE=(R7),ALTSZE=(R8),MF=L
         ISPINIT  MF=L,LIST=NO         ISPF ENVIRONMENT INITIALISATION
         ISPVDEFX MF=L,LIST=NO         DEFINE INTERFACE
*        PDUMP MF=L                    FOR DEBUGING
WORK1    DS    CL3440                  WORK AREA FOR 4 X 80 CHARACTERS
*---------------------------------------------------------------------*
WORKAREL EQU   *-WORKAREA
                                                                SPACE 1
*=====================================================================*
*---------------------------------------------------------------------*
         END
