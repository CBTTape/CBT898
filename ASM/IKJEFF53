*  **PROPRIETARY_STATEMENT********************************************
* *01* PROPRIETARY STATEMENT=                                        *
*                                                                    *
*                                                                    *
*   LICENSED MATERIALS - PROPERTY OF IBM                             *
*   THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      *
*   5685-025 (C) COPYRIGHT IBM CORP. 1989,1992                       *
*   SEE COPYRIGHT INSTRUCTIONS                                       *
*                                                                    *
*   STATUS= HTE24D2                                                  *
*                                                                    *
*  **END_OF_PROPRIETARY_STATEMENT*************************************
         TITLE 'IKJEFF53 - IBM-SUPPLIED FIB INSTALLATION EXIT'
***********************************************************************
*
*   MODULE NAME = IKJEFF53
*      LOAD MODULE NAME = IKJEFF53
*
*   DESCRIPTIVE NAME = IBM-supplied version of FIB installation exit
*                      for systems using JESJOBS and JESSPOOL
*
*
*
*   FUNCTION =
*      Validity checks JOBNAME entered on a CANCEL, OUTPUT, or
*      STATUS FIB (Foreground Initiated Background) command.
*      The TSO user is restricted from canceling or accessing
*      output from a job that does not belong to the user.  An
*      installation-supplied version of IKJEFF53 could do other
*      types of validity checks.  See IKJEFFIE macro for details.
*
*      Note - For the CANCEL command, if the RACF JESJOBS class
*      is active, then no checking will be done.  For the OUTPUT
*      command, if the RACF JESSPOOL class is active, then no
*      checking will be done.
*
*   OPERATION =
*
*         If the command is STATUS, return control to the caller
*         of this routine.  Any JOBNAME is allowed.
*
*         If the command is CANCEL or OUTPUT, compare the USERID
*         with the JOBNAME passed.  If the JOBNAME is not the
*         USERID plus at least one character for CANCEL, or does
*         not start with the USERID for OUTPUT, the JOBNAME is
*         rejected.  Error message text and return code (indicating
*         to issue PUTLINE MESSAGE) are passed back to the caller.
*         Then this exit is called again so that it may free the
*         message buffer and return the code that rejects the JOBNAME.
*
*         Note:
*         The OUTPUT command allows the JOBNAME to be the USERID (the
*         JOBNAME for the user's LOGON session) so the TSO user
*         may access sysout data sets generated during foreground
*         processing.
*
*   NOTES =
*
*      DEPENDENCIES =
*         CHARACTER CODE DEPENDENCIES = EBCDIC.
*
*      RESTRICTIONS = N/A
*
*      REGISTER CONVENTIONS = STANDARD
*
*   PATCH LABEL = PATCH (UNUSED AND INITIALIZED TO 'ZAP'S)
*
*   MODULE TYPE = PROCEDURE
*
*      PROCESSOR = Assembler H
*
*      MODULE SIZE = See assembler listing.
*
*   ATTRIBUTES = RES:PROB.PGM.REGION, REFRESHABLE,
*                KEY 8, Authorized
*
*   ENTRY POINT = IKJEFF53 (only entry point)
*
*      PURPOSE = SEE FUNCTION
*
*      LINKAGE =
*         From IKJEFF51 (CANCEL or STATUS COMMAND) via CALL.
*         From IKJCT469 (OUTPUT command) via CALL.
*
*      INPUT = REGISTER 1 points to the parameter list
*              For a description of the parm list, see IKJEFFIE macro
*
*      REGISTERS SAVED = 0 - 12 and 14 - 15
*      REGISTERS USED =  All
*      REGISTERS RESTORED = 0 - 14
*
*   EXIT - NORMAL = at end of program, to caller via BR 14
*      CONDITIONS = See OPERATION
*      OUTPUT = NONE
*      RETURN CODE = ZERO
*
*   EXIT - ERROR =  at end of program, to caller via BR 14
*      CONDITIONS = See OPERATION
*      OUTPUT = MESSAGEP set in the input parameter list
*      RETURN CODE = (possible return codes)
*          4 - Issue PROMPT message and return reply
*          8 - Issue PUTLINE message and return
*         12 - Reject this job and continue processing
*         16 - Terminate the command
*         (This version of IKJEFF53 uses codes 8 and 12)
*
*   EXTERNAL REFERENCES =
*
*      ROUTINES = NONE
*
*      DATA AREAS = NONE
*
*      CONTROL BLOCKS = NONE
*
*      TABLES = NONE
*
*   MACROS = MODID, GETMAIN, FREEMAIN, RACROUTE               @YA64055
*      SERIALIZATION = NONE
*
*   MESSAGES =
*      No messages are issued by this module.
*
*      However the following message texts are passed to the caller,
*      which issues PUTLINE message IKJ56208I (if CANCEL) or message
*      IKJ56328I (if OUTPUT) -
*
*         JOB <JOBNAME> REJECTED - JOBNAME MUST BE YOUR USERID
*         PLUS AT LEAST ONE CHARACTER                    (for CANCEL)
*
*         JOB <JOBNAME> REJECTED - JOBNAME MUST BE YOUR USERID OR
*         MUST START WITH YOUR USERID                    (for OUTPUT)
*
*      This module could also pass the caller text to be inserted
*      into PUTGET message IKJ56208A or IKJ56328A.
*
*   ABEND CODES = NONE
*
*   CHANGE ACTIVITY =
*     @E21X2B1 - TSO/E Version 2 Release 1.1                  @E21X2B1
*     @PMH0156 - Change RACSTAT macro to RACROUTE             @PMH0156
*                (Sug APAR OY55619)                           @PMH0156
*     @OY64055 - Copy the static RACROUTE parameter list      @YA64055
*                into the dynamic storage parameter list      @YA64055
***********************************************************************
*-----\|/--------------------<=====-----------------------------------*
*   IN-HOUSE MODIFICATIONS:
*     Check for OPERATOR privilidges to issue the TSO OUTPUT command
*     on any held output.
*-----/|\--------------------<=====-----------------------------------*
***********************************************************************
         EJECT
IKJEFF53 CSECT ,
         USING *,R15
         MODID
         DROP  R15
         STM   R14,R12,12(R13)      Save the registers
         LR    R12,R15              Set the base register
         USING IKJEFF53,R12
         L     R00,DYNSIZE          Size for GETMAIN
         GETMAIN  R,LV=(0)          Get dynamic area
         LR    R11,R01              Set the data register
         USING DYNAREA,R11
         ST    R13,SAVEAREA+4       Save backward pointer
         LM    R00,R01,20(R13)      Restore regs used by GETMAIN
         ST    R11,8(,R13)          Save forward pointer
         LR    R13,R11              Set savearea pointer
*
INITIALIZE EQU *
*                                                             @YA64055
* Copy the static RACROUTE parameter list into the dynamic    @YA64055
* storage parameter list                                      @YA64055
*                                                             @YA64055
         LA    R04,STATWAD          Load the address of the   @YA64055
*                                   dynamic storage paramater @YA64055
*                                   list                      @YA64055
         LA    R06,STATWAS          Load the address of the   @YA64055
*                                   static storage parameter  @YA64055
*                                   list                      @YA64055
         L     R05,STATWAL          Load the length of the    @YA64055
*                                   parameter list            @YA64055
         LR    R07,R05              Copy the length into R07  @YA64055
*                                   for the MVCL              @YA64055
         MVCL  R04,R06              Copy the static parameter @YA64055
*                                   into the dynamically      @YA64055
*                                   allocated storage         @YA64055
*-----\|/--------------------<=====-----------------------------------*
         MVC   EXTLISTD(EXTLISTL),EXTLISTS   Copy static to Dynamic
*-----/|\--------------------<=====-----------------------------------*
         LR    IEPTR,R01            Input parameter pointer
         SLR   RETCODE,RETCODE      Initialize return code to "OK"
*
* Only do processing if caller is CANCEL or OUTPUT command
*
         L     R10,CODEP(,IEPTR)
         CLI   CMNDCODE(R10),CANCEL Command is CANCEL
         BE    CANCEL_OR_OUTPUT     Yes
         CLI   CMNDCODE(R10),OUTPUT Command is OUTPUT
         BNE   RETURN_TO_CALLER     No
CANCEL_OR_OUTPUT EQU *
         CLI   CMNDCODE(R10),CANCEL Command is CANCEL
         BE    ISCANCEL             Yes
*
* For the OUTPUT command, check to see if the JESSPOOL class is active.
* If it is, no JOBNAME checking will be done.  This will be to ensure
* that the feature of JESSPOOL output "ownership" is not restricted by
* this exit to JOBNAMEs that begin with USERID.
*
         RACROUTE REQUEST=STAT,     Request status            @PMH0156 +
               CLASS=SPOOL,         Check JESSPOOL class      @PMH0156 +
               RELEASE=1.9,         Use proper release        @PMH0156 +
               WORKA=SAFWA,         Supply a work area        @PMH0156 +
               MF=(E,STATWAD)       Specify status work area  @YA64055
         LTR   R15,R15              Check for request done    @PMH0156
         BNZ   CHECK_JOBNAME        Request not done, we must @PMH0156
*                                   do the checking           @PMH0156
         LA    R10,STATWAD          Get SAF parameter area    @YA64055
         USING SAFP,R10             Establish addressability  @PMH0156
         L     R09,SAFPRRET         Get STAT return code      @PMH0156
         LTR   R09,R09              Check for class active    @PMH0156
         BZ    RETURN_TO_CALLER     Class is active, nothing to do
         B     CHECK_JOBNAME        Class is not active, do checking
ISCANCEL EQU   *                    Command is CANCEL
*
* For the CANCEL command, check to see if the JESJOBS class is active.
* If it is, no JOBNAME checking will be done.  This will be to ensure
* that the feature of JESJOBS job "ownership" is not restricted by
* this exit to JOBNAMEs that begin with USERID.
*
         RACROUTE REQUEST=STAT,     Request status            @PMH0156 +
               CLASS=JOBS,          Check JESJOBS class       @PMH0156 +
               RELEASE=1.9,         Use proper release        @PMH0156 +
               WORKA=SAFWA,         Supply a work area        @PMH0156 +
               MF=(E,STATWAD)       Specify status work area  @YA64055
         LTR   R15,R15              Check for request done    @PMH0156
         BNZ   CHECK_JOBNAME        Request not done, we must @PMH0156
*                                   do the checking           @PMH0156
         LA    R10,STATWAD          Get SAF parameter area    @YA64055
         USING SAFP,R10             Establish addressability  @PMH0156
         L     R09,SAFPRRET         Get STAT return code      @PMH0156
         LTR   R09,R09              Check for class active    @PMH0156
         BZ    RETURN_TO_CALLER     Class is active, nothing to do
CHECK_JOBNAME EQU *
*
* If no message issued for last entry
*
         L     R10,MESSAGEP(,IEPTR)
         LTR   R10,R10              Is message buffer empty
         BNZ   REJECT_COMMAND       Message was issued
*
* Check whether JOBNAME is valid
*
         L     R10,IDLENPTR(,IEPTR)
         CLI   IDLENGTH(R10),0      Check USERID length
         BE    JOBNAME_INVALID      If zero, command is invalid
         L     R01,CODEP(,IEPTR)
         CLI   CMNDCODE(R01),CANCEL Command is CANCEL
         BNE   CHECK_OUTPUT_JOBNAME
         L     R01,NAMELENP(,IEPTR)
         SLR   R02,R02
         IC    R02,IDLENGTH(,R10)   Get USERID length
         CH    R02,JOBNAMEL(,R01)   Compare with JOBNAME length
         BNL   JOBNAME_INVALID      Invalid if USERID ¬< JOBNAME length
         L     R10,USERIDP(,IEPTR)
         L     R01,JOBNAMEP(,IEPTR) Get JOBNAME length
         BCTR  R02,0                Subtract for "execute"
         EX    R02,COMPARE_USERID_AND_JOBNAME Compare
         BNE   JOBNAME_INVALID      Invalid if not equal
         B     RETURN_TO_CALLER     Else return
CHECK_OUTPUT_JOBNAME EQU *
         L     R10,NAMELENP(,IEPTR)
         L     R01,IDLENPTR(,IEPTR)
         SLR   R02,R02
         IC    R02,IDLENGTH(,R01)   Get USERID length
         CH    R02,JOBNAMEL(,R10)   Compare with JOBNAME length
         BH    JOBNAME_INVALID      Invalid if USERID > JOBNAME length
*-----\|/--------------------<=====-----------------------------------*
         EXTRACT PSCBADDR,'S',FIELDS=PSB,MF=(E,EXTLISTD)
*                                   Get address of Protected Step
*                                   Control Block
         L     R01,PSCBADDR         Load pointer to PSCB
         USING PSCB,R01             Establish addressability
         TM    PSCBATR1,PSCBCTRL    See if user has operator priv.
         BO    RETURN_TO_CALLER     Valid if equal
         DROP  R01
*-----/|\--------------------<=====-----------------------------------*
         L     R10,USERIDP(,IEPTR)
         L     R01,JOBNAMEP(,IEPTR) Get JOBNAME length
         BCTR  R02,0                Subtract for "execute"
         EX    R02,COMPARE_USERID_AND_JOBNAME Compare
         BE    RETURN_TO_CALLER     Valid if equal
JOBNAME_INVALID EQU *
*
* Jobname is invalid.  Build message saying JOBNAME is rejected
*
         L     R00,GETMINFO         Subpool and length of message area
         GETMAIN R,LV=(0)               GET MESSAGE BUFFER
         ST    R01,MESSAGEP(,IEPTR) Move msg buff ptr to parm list
         L     R10,MESSAGEP(,IEPTR)
         MVI   REJMSG(R10),C' '     Move in one blank
         MVC   REJMSG+1(83,R10),REJMSG(R10) Init buffer with blanks
         MVC   REJMLEN(2,R10),MSGLENTH Maximum length
         MVI   REJJOB+3(R10),C' '   Move in one blank
         MVC   REJJOB(3,R10),JOBCONST Put in "JOB"
         L     R01,NAMELENP(,IEPTR)
         LH    R02,JOBNAMEL(,R01)   Get JOBNAME length
         LR    R03,R02              Make a copy
         BCTR  R03,0                Subtract for "execute"
         L     R01,JOBNAMEP(,IEPTR)
         EX    R03,MOVE_JOBNAME     Insert the bad JOBNAME
         AL    R02,TWO              Get offset of blank after JOBNAME
         LR    TEMPOFST,R02         Index past blank after JOBNAME
         L     R01,CODEP(,IEPTR)
         CLI   CMNDCODE(R01),CANCEL Command is CANCEL
         BNE   DO_OUTPT             Must be OUTPUT
         ALR   R10,TEMPOFST
         MVC   REJSLOT-1(66,R10),REJTEXT1 Move in reason for rejection
         B     SET_RC
DO_OUTPT L     R10,MESSAGEP(,IEPTR)
         ALR   R10,TEMPOFST
         MVC   REJSLOT-1(69,R10),REJTEXT2 Move in reason for rejection
SET_RC   LA    RETCODE,8            Set return code
         B     RETURN_TO_CALLER
REJECT_COMMAND EQU *
*
* Second time entry (free message buffer and reject JOBNAME)
*
         LA    RETCODE,12           Set return code
         L     R01,MESSAGEP(,IEPTR) Get message buffer
         L     R00,GETMINFO         Subpool and length of message area
         FREEMAIN  R,LV=(0),A=(1)   Free message buffer
         SLR   R10,R10
         ST    R10,MESSAGEP(,IEPTR) Reset message buffer
RETURN_TO_CALLER EQU *
*
* Return to caller (STATUS, CANCEL, or OUTPUT command)
*
         L     R13,4(,R13)          Get previous savearea
         L     R00,DYNSIZE          Size for FREEMAIN
         LR    R01,R11              Address for FREEMAIN
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,RETCODE          Set Return Code
         L     R14,12(,R13)         Restore Retreg
         LM    R00,R12,20(R13)      Restore rest of regs
         BR    R14                  Return
*
* Dynamic area of module data
*
DYNAREA  DSECT
SAVEAREA DS    18F
INPPARMS DS    1F
SAFWA    DS    CL512                   SAF work area          @PMH0156
STATWAD  RACROUTE REQUEST=STAT,     Request status            @YA64055 +
               CLASS='JESSPOOL',    Check JESSPOOL class      @PMH0156 +
               RELEASE=1.9,         Use proper release        @PMH0156 +
               WORKA=*-*,           Supply a work area        @YA64055 +
               MF=L                 Specify List form         @PMH0156
         DS    0D
         ORG   *+1-(*-DYNAREA)/(*-DYNAREA) INSURE DSECT DATA
*-----\|/--------------------<=====-----------------------------------*
PSCBADDR DS    F
EXTLISTD EXTRACT MF=L
*-----/|\--------------------<=====-----------------------------------*
ENDDYN   EQU   *
         ICHSAFP                    SAF parameter mapping     @PMH0156
*-----\|/--------------------<=====-----------------------------------*
         IKJPSCB
*-----/|\--------------------<=====-----------------------------------*
*
* Static area of module constants
*
IKJEFF53 CSECT
STATAREA DS    0H
STATWAS  RACROUTE REQUEST=STAT,     Request status            @YA64055 +
               CLASS='JESSPOOL',    Check JESSPOOL class      @YA64055 +
               RELEASE=1.9,         Use proper release        @YA64055 +
               WORKA=*-*,           Supply a work area        @YA64055 +
               MF=L                 Specify List form         @YA64055
STATWAL  DC    A(*-STATWAS)                                   @YA64055
*-----\|/--------------------<=====-----------------------------------*
EXTLISTS EXTRACT MF=L
EXTLISTL EQU   *-EXTLISTS
*-----/|\--------------------<=====-----------------------------------*
MSGLENTH DC    H'84'
COMPARE_USERID_AND_JOBNAME CLC USERID(0,R10),IEJOBNM(R01)
MOVE_JOBNAME MVC REJSLOT(0,R10),IEJOBNM(R01)
TWO      DC    F'2'
         DS    0F
DYNSIZE  DC    AL1(0)
         DC    AL3(((ENDDYN-DYNAREA+7)/8)*8)
         DS    0D
JOBCONST DC    C'JOB'
REJTEXT1 DC    CL66'REJECTED - JOBNAME MUST BE YOUR USERID PLUS AT LEASC
               T ONE CHARACTER'
REJTEXT2 DC    CL69'REJECTED - JOBNAME MUST BE YOUR USERID OR MUST STARC
               T WITH YOUR USERID'
         DS    CL2
GETMINFO DS    CL4
         ORG   GETMINFO
GETMSP   DC    AL1(0)
GETMLEN  DC    AL3(84)
         ORG   GETMINFO+4
PATCH    DS    CL21
         ORG   PATCH
PTCHINIT DC    7CL3'ZAP'
         ORG   PATCH+21
SPOOL    DC    CL8'JESSPOOL'           Class is JESSPOOL      @PMH0156
JOBS     DC    CL8'JESJOBS '           Class is JESJOBS       @PMH0156
R00      EQU   00                      EQUATES FOR REGISTERS 0-15
R01      EQU   01
R02      EQU   02
R03      EQU   03
R04      EQU   04
R05      EQU   05
R06      EQU   06
R07      EQU   07
R08      EQU   08
R09      EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
TEMPOFST EQU   R05
RETCODE  EQU   R05
IEPTR    EQU   R04
CANCEL   EQU   4
OUTPUT   EQU   8
REJMSG   EQU   0
REJMLEN  EQU   REJMSG
REJJOB   EQU   REJMSG+2
REJSLOT  EQU   REJMSG+6
PARMLIST EQU   0
JOBNAMEP EQU   PARMLIST
NAMELENP EQU   PARMLIST+4
USERIDP  EQU   PARMLIST+8
IDLENPTR EQU   PARMLIST+12
MESSAGEP EQU   PARMLIST+16
REPLYP   EQU   PARMLIST+20
CODEP    EQU   PARMLIST+24
JOBIDP   EQU   PARMLIST+28
JIDLENP  EQU   PARMLIST+32
IEOUTPLP EQU   PARMLIST+36
IEJOBNM  EQU   0
JOBNAMEL EQU   0
USERID   EQU   0
IDLENGTH EQU   0
CMNDCODE EQU   0
MESSAGE  EQU   0
IEREPLY  EQU   0
IEOUTPL  EQU   0
IESYNTAX EQU   IEOUTPL+16
IEJOBID  EQU   0
JIDLEN   EQU   0
PARM     EQU   0
         DS    0D
ENDSTAT  EQU   *
         END   IKJEFF53
