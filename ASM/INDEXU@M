*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*                                                                     *
**  Title:    'Unformatted dataset Index generator'                   *
**  System:   N/A                                                     *
**  Module:   INDEXUFM                                                *
**  Program:  INDEXUFM                                                *
**  Function: Read the '$$$INDEX' member (if it exists) of a PDS with *
**            DSORG=U, pass the details to ISPF's editor interface    *
**            'EDIF', modify the Index under editor using the 'INDEX' *
**            edit-macro and then re-writing the Index so that it can *
**            be readily browsed using ISPF's browse function.        *
**                                                                    *
**  Parms:    Parameter are passed via the ISPF shared variable pool. *
**                                                                    *
**              Input: DSNAME - Fully qualified unquoted dataset name *
**                                                                    *
**                     VOLUME - 6 character volume id. This parm is   *
**                              required to allow for uncatalogued    *
**                              datasets.                             *
**                                                                    *
**                     UNIT   - 8 character unit name (SYSALLDA)      *
**                                                                    *
**             Output: INDEXUB- Flag to indicate to the 'INDEX' macro *
**                              that this is an unformatted dataset   *
**                                                                    *
**                     GC009  - Error message (message set on exit)   *
**                                                                    *
**            This program is NOT re-entrant.                         *
**                                                                    *
**  Author:   ASYSTS Pty. Ltd. (A. Kara).                             *
*                                                                     *
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*        PRINT OFF
*        COPY  @MACROS                 COMMON MACROS
*        PRINT ON
INDEXUFM KICKOFF (R11,R12),AMODE=31,LIST=NO
         ST    R11,DDATA               SAVE BASE REG IN DIALOG DATAREA
                                                                SPACE 1
*---------------------------------------------------------------------*
* INITIALISE ISPF ENVIRONMENT AND ESTABLISH ADDRESABILITY TO          *
* VARIABLES.                                                          *
*---------------------------------------------------------------------*
         ISPEXEC  INIT=Y,MF=E          INITIALISE ISPF ENVIRONMENT
*  PDUMPR 0(R11),ISPI=N,MSG='START'
   B   XXXX
YYYY     DS  5F
XXXX     DS  0F
*   HEXCHMAC YYYY,YYYY+4,4,MF=E
         ISPVDEFX LIST=YE,FORMAT=CHAR,MF=E,                            +
               INM=(GC009),ANM=GC009,LEN=79
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(DSNAME),ANM=YDSN,LEN=44
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(VOLUME),ANM=YVOLSER,LEN=6
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(UNIT),ANM=YUNIT,LEN=8
         ISPVDEFX LIST=NO,FORMAT=CHAR,MF=E,                            +
               INM=(INDEXUB),ANM=INDEXUB,LEN=1
                                                                SPACE 1
         ISPEXEC 'VGET (DSNAME VOLUME) SHARED'
         ISPEXEC 'VPUT (INDEXUB) SHARED'
                                                                SPACE 1
         MVC   DSNAME,YDSN             MOVE DSNAME
         LA    R8,DSNAME+43            POINT TO LAST CHARACTER POSIT
         LA    R9,44                   MAX LENGTH (LOOP COUNTER)
DSNLOOP1 DS    0H
         CLI   0(R8),C' '              Q. CHARACTER A SPACE
         BNE   DSNLOP1E                   N. EXIT LOOP
         BCTR  R8,0                    POINT TO PREVIOUS CHARACTER
         BCT   R9,DSNLOOP1             LOOP TILL NO MORE SPACES
DSNLOP1E DS    0H
         ST    R9,DSLEN                STORE DATASET LENGTH
*  PDUMPR DSNAME,ISPI=N,MSG='DSNAME'
                                                                SPACE 1
*
* CALCULATE TIME FOR UNIQUE DDNAME                             *
*
         TIME  DEC                     GET TIME  => IN R0
         ST    R0,AREA1                SAVE TIME IN FULLWORD
         HEXCHMAC AREA1,AREA1+10,3,MF=E CONVERT HEX TO CHARACTER
         MVC   YDD+2(2),AREA1+10       INSERT HH
         MVC   YDD+4(2),AREA1+12       INSERT MM
         MVC   YDD+6(2),AREA1+14       INSERT SS
         MVC   YDD(2),=C'$I'           SET DD PREFIX
                                                                SPACE 1
         LA    R1,DISKFIND             ADDRESS OF DCB
         USING IHADCB,R1               ESTABLISH ADDRESABILITY
         MVC   DCBDDNAM,YDD            MOVE DDNAME TO DCB
         DROP  R1                      RELINQUISH ADDRESABILITY
         LA    R1,DISKIN               ADDRESS OF DCB
         USING IHADCB,R1               ESTABLISH ADDRESABILITY
         MVC   DCBDDNAM,YDD            MOVE DDNAME TO DCB
         DROP  R1                      RELINQUISH ADDRESABILITY
         LA    R1,DISKOUT              ADDRESS OF DCB
         USING IHADCB,R1               ESTABLISH ADDRESABILITY
         MVC   DCBDDNAM,YDD            MOVE DDNAME TO DCB
         DROP  R1                      RELINQUISH ADDRESABILITY
                                                                SPACE 1
*---------------------------------------------------------------------*
* DYNAMICALLY ALLOCATE DATASET, OPEN AS DSORG=PO AND FIND MEMBER      *
* '$$$INDEX'. IF NOT FOUND SET INDEXEX (INDEX EXISTS) FLAG TO 'N'.    *
*---------------------------------------------------------------------*
         MVC   GC009(36),=C'         - ERROR ALLOCATING DATASET.'
         LA    R10,SVC99WRK            ADDRESABILITY TO SVC99 WORK AREA
                                                                SPACE 1
         ADYN  ACTION=ALLOC,                                           +
               DD=$I$TIME,                                             +
               DSN=(DSNAME),                                           +
               DISP=SHR,                                               +
               VOLSER=VOLUME,                                          +
               UNIT=SYSALLDA,                                          +
               REUSE=YES,                                              +
               UCLOSE=YES,                                             +
               BASE=R10,                                               +
               PARMT=DATA,                                             +
               MF=E
                                                                SPACE 1
         LTR   R15,R15                 Q. DATASET ALLOCATED
         BNZ   EXITPR12                   N. EXIT PROGRAM
         MVC   DISK(DISKL),DISKFIND    MOVE TO GENERIC DISK AREA
         OPEN  (DISK,INPUT)            OPEN DATASET TO FIND INDEX
         LTR   R15,R15                 Q. ZERO RETURN CODE FROM OPEN
         BNZ   OPENERR1                   N. PROCESS ERROR
         FIND  DISK,MEMBER,D           Q. FIND MEMBER
         LTR   R15,R15                 Q. MEMBER FOUND
         BZ    CLOSFIND                   Y. CLOSE FILE
         MVI   INDEXEX,C'N'            SET INDEX DOESN'T EXIST FLAG
CLOSFIND DS    0H
         CLOSE (DISK)                  CLOSE DATASET
                                                                SPACE 1
*---------------------------------------------------------------------*
* DYNAMICALLY ALLOCATE DATASET, AND MEMBER '$$$INDEX' AS DSORG=PS AND *
* OPEN FOR INPUT IF THE INDEX EXISTS.                                 *
*---------------------------------------------------------------------*
         MVC   GC009(37),=C'         - ERROR ALLOCATING ''$INDEX''.'
                                                                SPACE 1
         ADYN  ACTION=ALLOC,                                           +
               DD=$I$TIME,                                             +
               DSN=(DSNAME),                                           +
               MEMBER=$$$INDEX,                                        +
               VOLSER=VOLUME,                                          +
               UNIT=SYSALLDA,                                          +
               BASE=R10,                                               +
               PARMT=DATA,                                             +
               MF=E
                                                                SPACE 1
         LTR   R15,R15                 Q. DATASET ALLOCATED
         BNZ   EXITPR12                   N. EXIT PROGRAM
                                                                SPACE 1
OPEN     DS    0H
         MVC   DISK(DISKL),DISKIN      MOVE TO GENERIC DISK AREA
         CLI   INDEXEX,C'Y'            Q. INDEX EXISTS
         BNE   EDIRECI                    N. BYPASS OPEN
         OPEN  (DISK,INPUT)
         LTR   R15,R15                 Q. ZERO RETURN CODE FROM OPEN
         BZ    EDIRECI                    Y. BYPASS
OPENERR1 DS    0H
         MVC   GC009(23),=C'ERROR OPENING ''$INDEX''.'
         B     EXITPR08            EXIT WITH ERROR
                                                                SPACE 1
*---------------------------------------------------------------------*
* INITIALISE EDIT RECOVERY AND CALL EDIF INTERFACE                    *
*---------------------------------------------------------------------*
EDIRECI  DS    0H
         MVI   GC009,C' '              INITIALISE MESSAGE AREA
         MVC   GC009+1(78),GC009       INITIALISE MESSAGE AREA
         L     R9,DSLEN                LOAD DATASET LENGTH
         LA    R8,DSNAME               POINT TO START OF DSNAME
         AR    R8,R9                   POINT TO END OF DSNAME
         MVC   0(10,R8),=C'($$$INDEX)' MOVE INDEX NAME
         LA    R9,10(R9)               ADD MEMBER NAME LENGTH
         ST    R9,DSLEN                STORE DATASET LENGTH
                                                                SPACE 1
         CALL  ISPLINK,(EDIREC,INIT),VL
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    EDIFRN                     Y. GO EDIT W/O RECOVERY
         ISPVDEFX INM=(ZEITDSN),ANM=TDSNAME,FORMAT=CHAR,LEN=44,MF=E
EDIRECQ  DS    0H
         CALL  ISPLINK,(EDIREC,QUERY),VL
         LTR   R15,R15                 Q. NON PENDING RECOVERY
         BZ    EDIFRN                     Y. GO EDIT W/O RECOVERY
         C     R15,RC4                 Q. PENDING RECOVERY
         BE    CKTDSN                     Y. GO CHECK TARGET DSN
         ISPEXEC 'SETMSG MSG(VSAM016)' SET EDIREC SEVERE ERROR MESSAGE
         B     CLOSE                   SEVERE ERROR
CKTDSN   DS    0H
         CLC   DSNAME(54),TDSNAME      Q. SAME DATASET
         BE    SAME                       Y. GO EDIT WITH RECOVERY=YES
         CALL  ISPLINK,(EDIREC,DEFER),VL
         B     EDIRECQ                 CHECK NEXT ENTRY IN RECOV TABLE
SAME     DS    0H
         MVC   GC009(19),=C'''$INDEX'' RECOVERED.'
         ISPEXEC 'SETMSG MSG(GC009)'   DATASET RECOVERED MESSAGE
EDIFRY   DS    0H
         CALL  ISPLINK,(VDEL,ZEITDSN),VL
         CALL  ISPLINK,(EDIF,DSNAME,,RECFM,EDLEN,RADDR,WADDR,,         X
               DDATA,,,,,,YES),VL
         B     CLOSE
EDIFRN   DS    0H
*  PDUMPR DSNAME,ISPI=N,MSG='EDUIFR'
         CALL  ISPLINK,(VDEL,ZEITDSN),VL
         CALL  ISPLINK,(EDIF,DSNAME,PROF,RECFM,EDLEN,RADDR,WADDR,,     X
               DDATA,EDLEN,EXTEPANL),VL
*---------------------------------------------------------------------*
* CLOSE DATASET. IF INDEX JUST CREATED AND EDIT SESSION CANCELLED,    *
* BYPASS CLOSE.                                                       *
*---------------------------------------------------------------------*
CLOSE    DS    0H
         CLI   INDEXEX,C'Y'            Q. INDEX EXISTS/CREATED
         BNE   EXITPR00                   N. BYPASS CLOSE
         CLOSE (DISK)                  CLOSE DATASET
         ADYN  ACTION=FREE,DD=$I$TIME,BASE=R10,PARMT=DATA,MF=E
                                                                SPACE 1
EXITPR00 DS    0H
         XR    R15,R15                 SET RETURN CODE
         B     EXITPROG                GO TO COMMON EXIT
EXITPR08 DS    0H
         LA    R15,8                   SET RETURN CODE
         B     EXITPROG                GO TO COMMON EXIT
EXITPR12 DS    0H
         ST    R0,AREA1                SAVE ADYN RETURN CODE
         HEXCHMAC AREA1,GC009,4,MF=E   CONVERT HEX TO CHARACTER
         LA    R15,12                  SET RETURN CODE
         B     EXITPROG                GO TO COMMON EXIT
EXITPROG DS    0H
         MVI   INDEXUB,C'N'            SET INDEX UNFORMATTED FLAG OFF
         ISPEXEC 'VPUT (INDEXUB) SHARED'
         ISPEXEC 'SETMSG MSG(GC009)'
         RACKOFF RC=(R15),LIST=NO      EXIT PROGRAM
                                                                SPACE 1
*=====================================================================*
*    READ ROUTINE                                                     *
*---------------------------------------------------------------------*
READRTN  DS    0H
         SAVE  (14,12)
         LM    R4,R7,0(R1)
         L     R11,0(R7)               ESTABLISH ADDRESABILITY
         LA    R12,4095(R11)               "          "
         LA    R12,1(R12)                  "          "
         ST    R13,RSAVE+4             STORE EDIF RTN SAVE AREA ADDRESS
         LA    R15,RSAVE
         ST    R15,8(R13)              SAVE NEW SAVE AREA ADDRESS
         LR    R13,R15                 POINT TO NEW SAVE AREA
*---------------------------------------------------------------------*
*        BAL   R14,BELOW               SWITCH TO 24 BIT ADDRESS MODE
         LA    R3,AREA1                LOAD ADDRESS OF INPUT REC AREA
         ST    R3,0(R4)                STORE ADDRESS BACK TO EDIF
         CLI   INDEXEX,C'Y'            Q. INDEX EXISTS/CREATED
         BNE   EODADR                     N. SIMULATE EOF 1ST READ
READNEXT DS    0H
*---------------------------------------------------------------------*
         READ  RDDECB,SF,DISK,AREA1,120
         CHECK RDDECB
         LH    R3,=H'80'               LOAD RECORD LENGTH
         ST    R3,0(R5)                STORE RECORD LENGTH BACK 2 EDIF
         XR    R10,R10                 SET ZERO RETURN CODE
         B     TOEDIFR                 GO BACK TO EDIF
EODADR   DS    0H
         LA    R10,8                   SET RC=8
*---------------------------------------------------------------------*
TOEDIFR  DS    0H
*        BAL   R14,ABOVE               SWITCH TO 31 BIT ADDRESS MODE
         L     R13,RSAVE+4             RESTORE EDIF ROUTINE SAVE AREA @
         L     R14,12(R13)
         LR    R15,R10                 LOAD RETURN CODE
         LM    R0,R12,20(R13)
         BR    R14                     RETURN TO EDIF
                                                                SPACE 1
*=====================================================================*
*    WRITE ROUTINE                                                    *
*---------------------------------------------------------------------*
WRITRTN  DS    0H
         SAVE  (14,12)
         LM    R4,R8,0(R1)
         L     R11,0(R8)               ESTABLISH ADDRESABILITY
         LA    R12,4095(R11)               "          "
         LA    R12,1(R12)                  "          "
         ST    R13,WSAVE+4             STORE EDIF RTN SAVE AREA ADDRESS
         LA    R15,WSAVE
         ST    R15,8(R13)              SAVE NEW SAVE AREA ADDRESS
         LR    R13,R15                 POINT TO NEW SAVE AREA
*PDUMPR 0(R4),ISPI=NO,MSG='Writertn'
*---------------------------------------------------------------------*
*        BAL   R14,BELOW               SWITCH TO 24 BIT ADDRESS MODE
         L     R4,0(R4)                R4 HAS ADDRESS OF RECORD
         L     R5,0(R5)                R5 HAS LENGTH  OF RECORD
         L     R6,0(R6)                LOAD FW OF SOURCE AND CHG BITS
         L     R7,0(R7)                LOAD FW BINARY REQUEST CODE
*
         LR    R3,R7
         N     R3,ALLDEL               Q. ALL RECORDS SHOULD BE DELETED
         BNZ   INITLD                     Y. GOTO DELETE PROCESS
         LR    R3,R7
         N     R3,FIRSTW               Q. FIRST ENTRY TO WRITE RTN
         BZ    GOAHEAD                    N. GOAHEAD
INITLD   DS    0H
         CLI   INDEXEX,C'Y'            Q. INDEX EXISTS/CREATED
         BNE   OPEN4WRT                   N. GO OPEN FOR WRITE
         CLOSE (DISK)                  CLOSE DATASET
OPEN4WRT DS    0H
         MVI   INDEXEX,C'Y'            SET INDEX EXISTS/CREATED FLAG
         MVC   DISK(DISKL),DISKOUT     MOVE OUTPUT DEFS
         OPEN  (DISK,OUTPUT)
*---------------------------------------------------------------------*
GOAHEAD  DS    0H
         LR    R3,R7
         N     R3,ALLDEL               Q. ALL RECORDS DELETED
         BNZ   TOEDIFW                    Y. GO BACK TO EDIF
PUTREC01 DS    0H
*PDUMPR 0(R4),ISPI=NO,MSG='utrec01'
         STM   R10,R13,BASES#1         STORE MAIN REGISTERS
         LA    R1,TOEDIFW              RETURN ADDRESS
         ST    R1,ESTAERTN             STORE RETURN ADDRESS
         LA    R5,PROCESTA
         ESTAE (5)                     TRAP "ABEND"
         WRITE WRDEC1,SF,DISK,(R4),80  WRITE RECORD
         CHECK WRDEC1                  WAIT FOR WRITE TO COMPLTE
*---------------------------------------------------------------------*
TOEDIFW  DS    0H
         ESTAE 0                       TURN ABEND OFF
         LR    R3,R7
         N     R3,LASTW                Q. LAST ENTRY TO WRITE ROUTINE
         BZ    RETURN                     N. RETURN
SAVEDMSG DS    0H
         MVI   GC009,C''''             MOVE QUOTE TO MESSAGE AREA
         LA    R2,GC009+1              LOAD DESTINATION ADDRESS
         L     R1,DSLEN                LOAD DATASET LENGTH
MOVEDSN  MVC   0(0,R2),DSNAME          MOVE DATASET NAME
         BCTR  R1,0                    LESS 1 FOR 'EX' COMMAND
         EX    R1,MOVEDSN              MOVE DATASET NAME
         AR    R2,R1                   POINT PAST DATASET NAME
         MVI   1(R2),C''''             MOVE DELIMITING QUOTE
         MVC   2(16,R2),=C' HAS BEEN SAVED.'
         ISPEXEC 'SETMSG MSG(GC009)'   DATASET SAVED MESSAGE
*---------------------------------------------------------------------*
RETURN   DS    0H
*        BAL   R14,ABOVE               SWITCH TO 31 BIT ADDRESS MODE
         LA    R15,0                   LOAD RETURN CODE
         L     R13,RSAVE+4             RESTORE EDIF ROUTINE SAVE AREA @
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14                     RETURN TO EDIF
*---------------------------------------------------------------------*
                                                                SPACE 1
*=====================================================================*
ABOVE    DS    0H
*                                                                     *
*  --->  CHANGE TO 31 BIT ADDRESSING MODE IN STREAM                   *
*---------------------------------------------------------------------*
         LA    R1,0(R14)           RETURN ADDRESS
         O     R1,=X'80000000'     SET 32ND BIT FOR SWAP TO 31 BIT MODE
         BSM   R0,R1               CHANGE MODE TO 31 BIT
                                                                SPACE 1
*---------------------------------------------------------------------*
BELOW    DS    0H
*                                                                     *
*  --->  CHANGE TO 24 BIT ADDRESSING MODE IN STREAM                   *
*---------------------------------------------------------------------*
         LA    R1,0(R14)           RETURN ADDRESS
         BSM   R0,R1               CHANGE MODE TO 24 BIT
                                                                SPACE 1
*=====================================================================*
* ESTAE ROUTINE TO BE PROCESSED IN CASE OF AN ABEND (NOT USED)        *
*---------------------------------------------------------------------*
PROCESTA DS    0F
         LR    R2,R15                   R1 SET AS BASE
         USING PROCESTA,R2              BASE REGISTER
         LM    R10,R13,12(R15)          RESTORE REGISTERS FROM "BASES1"
         B     MOVEERR                  BYPASS R10 - R13 SAVE AREA
BASES#1  DS    4F
SYSRCODE DS    CL2                      SYSTEM RUTURN CODE SAVE AREA
*---------------------------------------------------------------------*
MOVEERR  DS    0H
         STM   R0,R15,BASES#2           STORE REGISTERS INTO "BASES2"
*---------------------------------------------------------------------*
*                                                                     *
*        CONTROL GETS HERE IF THE AN ABEND OCCURED DURING A MOVE      *
*        FROM SECONDARY TO PRIMARY. USUALLY CAUSED BY AN ADDRESS      *
*        EXCEPTION ERROR.                                             *
*                                                                     *
*---------------------------------------------------------------------*
         LR    R9,R1
         USING SDWA,R9                    SDWA MAPPING
         L     R3,SDWAABCC                LOAD USER/SYSTEM ABEND CODE
         SRL   R3,12                      MOVE OUT USER CODE.
         STCM  R3,3,SYSRCODE              EXTRACT SYSTEM RETURN CODE.
*        PDUMP SYSRCODE,MSG='ESTAE ROUTINE ENTERED'    <------
         LM    R0,R15,BASES#2             RESTORE BEFORE 'WTO'
         C     R0,=F'12'                  Q. SDWA CREATED BY RTM2
         BE    MESTAER2                      N. BYPASS PROCESSING
*---------------------------------------------------------------------*
         SETRP FRESDWA=YES,RC=4,RETADDR=MESTAER,DUMP=NO
         BR    R14                       RETURN
MESTAER  DS    0F
         LM    R0,R13,8(R15)             RESTORE REGISTERS
         B     MESTAER2
BASES#2  DS    16F
MESTAER2 DS    0H
*---------------------------------------------------------------------*
         L     R1,ESTAERTN              LOAD ESTAE RETURN ADDRESS
         BR    R1                       CONTINUE
ESTAERTN DS    A                        RETURN ADDRESS FROM ESTAE
*---------------------------------------------------------------------*
                                                                SPACE 1
*=====================================================================*
*    VSAM CONTROL BLOCKS                                              *
*---------------------------------------------------------------------*
DISKFIND DCB   DDNAME=$I$TIME,DSORG=PO,MACRF=(R),EODAD=CLOSFIND
DISKIN   DCB   DDNAME=$I$TIME,DSORG=PS,MACRF=(R),EODAD=EODADR
DISKOUT  DCB   DDNAME=$I$TIME,DSORG=PS,MACRF=(W)
DISK     DCB   DDNAME=$I$TIME,DSORG=PS,MACRF=(R),EODAD=EODADR
DISKL    EQU   *-DISK
                                                                SPACE 1
*=====================================================================*
*    WORK AREAS AND CONSTANTS                                         *
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
         DS    0D
RSAVE    DC    18F'0'               REGISTER SAVE AREA (READ ROUTINE)
WSAVE    DC    18F'0'               REGISTER SAVE AREA (WRITE ROUTINE)
*
RADDR    DC    AL4(READRTN)         READ ROUTINE ADDRESS
WADDR    DC    AL4(WRITRTN)         WRITE ROUTINE ADDRESS
EDLEN    DC    F'80'
RC4      DC    F'4'
DSLEN    DC    F'54'
DDATA    DC    F'0'
FIRSTW   DC    X'00000001'
LASTW    DC    X'00000002'
ALLDEL   DC    X'00000004'
*
VDEL     DC    CL8'VDELETE'
DSNAME   DC    CL44' '
         DC    CL10' '
VOLUME   DC    CL6' '
ZEITDSN  DC    CL8'ZEITDSN'
TDSNAME  DC    CL54' '
MEMBER   DC    CL8'$$$INDEX'
*
EXTEPANL DC    CL8'EXTEPANL'
EDIREC   DC    CL8'EDIREC'
INIT     DC    CL8'INIT'
QUERY    DC    CL8'QUERY'
DEFER    DC    CL8'DEFER'
*
EDIF     DC    CL8'EDIF'
RECFM    DC    CL2'F'
PROF     DC    CL8'EXTEPROF'
YES      DC    CL8'YES'
*
INDEXEX  DC    C'Y'                  INDEX EXIXTS FLAG
INDEXUB  DC    C'Y'                  INDEX EXIXTS FLAG
GC009    DS    CL79
                                                                SPACE 1
ALLOC1   ADYN  DD=$I$TIME,                                             +
               DSN=DSNAME,                                             +
               MEMBER=$$$INDEX,                                        +
               DISP=SHR,                                               +
               VOLSER=VOLUME,                                          +
               UNIT=SYSALLDA,                                          +
               REUSE=YES,                                              +
               UCLOSE=YES,                                             +
               DATA=VARIABLE,                                          +
               MF=L
                                                                SPACE 1
SVC99WRK DS    CL400
         ISPEXEC  INIT=Y,MF=L
         ISPVDEFX MF=L,LIST=Y
         HEXCHMAC MF=L
*---------------------------------------------------------------------*
         DS    0F
AREA1    DS    CL32760
*---------------------------------------------------------------------*
IHADCB   DCBD    DSORG=PS           DCB MAP
         IHASDWA DSECT=YES          ENTRY : SDWA
         ADYN  DATA=IBM
         END
*=====================================================================*
