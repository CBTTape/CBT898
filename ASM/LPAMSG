* FUNC    Message format and display routine
* MACROs  DJSRENTR, DJSREXIT
* RTNS    None
* ATTRIB  RENT,REUSE,REFR,AC(0).AMODE(24),RMODE(24)
*  Savearea chaining
                                                                SPACE 1
LPAMSG   KICKOFF (R12),MSGDSECT,MSGDSECL,LIST=Y
                                                                SPACE 1
*   Locate message
         LR    R2,R1                   ->INPUT PARAMETER LIST
         L     R4,0(,R2)               ->MESSAGE TABLE
MSGLOOP2 CLC   10(2,R2),0(R4)          MATCH ON MESSAGE NUMBER?
         BE    MSGSCAN                 (YES)
         SR    R1,R1                   CLEAR FOR ICM
         ICM   R1,3,2(R4)              LENGTH OF CURRENT MESSAGE
         LA    R4,4(R4,R1)             ->NEXT MESSAGE
         CLC   0(4,R4),MSGHEXFF        END OF TABLE?
         BNE   MSGLOOP2                (NO )-KEEP LOOKING
         B     MSGERR1                 (YES)-MESSAGE NOT FOUND
*    Start  of message build and substitution
MSGSCAN  LA    R5,4(,R4)               ->START OF TEXT
         SR    R1,R1                   CLEAR FOR ICM
         ICM   R1,3,2(R4)              LENGTH OF CURRENT MESSAGE
         LA    R6,0(R1,R5)             ->END OF TEXT
         L     R3,16(,R2)              ->START OF VARIABLE LIST
         LA    R7,MSGBUFR              ->START OF OUTPUT BUFFER
         LA    R8,MSGBUFR+L'MSGBUFR    ->END OF OUTPUT BUFFER
         B     *+8
MSGLOOP3 LA    R5,1(,R5)               ->NEXT BYTE OF MESSAGE
         CR    R5,R6                   END OF TEXT?
         BE    MSGTPUT                 (YES)
         CLC   0(1,R5),13(R2)          SUBSTITUTION CHARACTER?
         BE    MSGCHAR                 (YES)
         MVC   0(1,R7),0(R5)           ADD FIXED TEXT TO BUFFER
         LA    R7,1(,R7)               INCREMENT OUTPUT BUFFER POINTER
         B     MSGLOOP3                PROCESS NEXT CHARACTER
*    Format substitution as character data
MSGCHAR  CLI   6(R3),1                 CHARACTER DISPLAY?
         BNE   MSGHEX                  (NO )
         LH    R15,4(,R3)              LENGTH OF FIELD
         L     R14,0(,R3)              ->FIELD
         LA    R0,0(R7,R15)            ->END OF FIELD
         CR    R0,R8                   ROOM FOR FIELD?
         BNL   MSGERR5                 (NO )
         BCT   R15,*+10                ADD TO OUTPUT BUFFER
         MVC   0(*-*,R7),0(R14)
         EX    R15,*-6
         LA    R7,1(R15,R7)            INCREMENT OUTPUT BUFFER POINTER
         LA    R3,8(,R3)               ->NEXT VARIABLE IN LIST
         B     MSGLOOP3                PROCESS NEXT CHARACTER
*    Format substitution as hexadecimal data
MSGHEX   CLI   6(R3),2                 HEXADECIMAL DISPLAY?
         BNE   MSGDEC                  (NO )
         LH    R15,4(,R3)              LENGTH OF FIELD
         LA    R0,0(R7,R15)
         AR    R0,R15                  ->END OF FIELD
         CR    R0,R8                   ROOM FOR FIELD?
         BNL   MSGERR5                 (NO )
         L     R14,0(,R3)              ->FIELD
         LA    R3,8(,R3)               ->NEXT VARIABLE IN LIST
         LA    R15,0(R14,R15)          ->END OF FIELD
         B     *+12
MSGLOOP4 LA    R7,2(,R7)               ->NEXT BYTE IN OUTPUT FIELD
         LA    R14,1(,R14)             ->NEXT BYTE IN INPUT FIELD
         CR    R14,R15                 END OF INPUT FIELD?
         BE    MSGLOOP3                (YES)
         UNPK  0(3,R7),0(2,R14)        CONVERT TO EBCDIC
         TR    0(2,R7),MSGHEXTR
         B     MSGLOOP4                PROCESS NEXT CHARACTER
*    Format substitution as decimal data
MSGDEC   CLI   6(R3),3                 DECIMAL DISPLAY?
         BNE   MSGBIN                  (NO )
         LH    R15,4(,R3)              LENGTH OF FIELD
         LA    R0,0(R7,R15)            ->END OF FIELD
         CR    R0,R8                   ROOM FOR FIELD?
         BNL   MSGERR5                 (NO )
         L     R14,0(,R3)              ->FIELD
         LA    R3,8(,R3)               ->NEXT VARIABLE IN LIST
         MVC   MSGWORK,MSGMASK         ADD EDIT MASK
         ED    MSGWORK,0(R14)          FORMAT
         LA    R1,MSGWORK+16           ->END OF WORK FIELD
         SR    R1,R15                  ->START OF REDD BIT OF WORK FIEL
         BCT   R15,*+10                ADD TO OUTPUT BUFFER
         MVC   0(*-*,R7),0(R1)
         EX    R15,*-6
         LA    R7,1(R15,R7)            INCREMENT OUTPUT BUFFER
         B     MSGLOOP3                PROCESS NEXT BYTE
*    Format substitution as binary data
MSGBIN   CLI   6(R3),4                 BINARY FULLWORD DISPLAY?
         BE    MSGBINW                 (YES)
         CLI   6(R3),5                 BINARY HALFWORD DISPLAY?
         BE    MSGBINH                 (YES)
         B     MSGDUMP                 TRY OTHER TYPES
MSGBINW  L     R14,0(,R3)              ->FIELD
         L     R0,0(,R14)              -FIELD
         B     *+12
MSGBINH  L     R14,0(,R3)              ->FIELD
         LH    R0,0(,R14)              -FIELD
         CVD   R0,MSGDW                CONVERT TO DECIMAL
         LH    R15,4(,R3)              LENGTH OF FIELD
         LA    R0,0(R7,R15)            ->END OF FIELD
         CR    R0,R8                   ROOM FOR FIELD?
         BNL   MSGERR5                 (NO )
         LA    R3,8(,R3)               ->NEXT VARIABLE IN LIST
         MVC   MSGWORK,MSGMASK         ADD EDIT MASK
         ED    MSGWORK,MSGDW           FORMAT
         LA    R1,MSGWORK+16           ->END OF WORK FIELD
         SR    R1,R15                  ->START OF REQD BIT OF WORK FIEL
         BCT   R15,*+10                ADD TO OUTPUT BUFFER
         MVC   0(*-*,R7),0(R1)
         EX    R15,*-6
         LA    R7,1(R15,R7)            INCREMENT OUTPUT BUFFER
         B     MSGLOOP3                PROCESS NEXT BYTE
*    Format substitution as dump data
MSGDUMP  CLI   6(R3),6                 DUMP DISPLAY?
         BNE   MSGERR2                 (NO )
         LH    R15,4(,R3)              LENGTH OF FIELD
         CH    R15,=Y(16)              TRUNCATE IF NECESSARY
         BNH   *+8
         LA    R15,16
         LA    R0,56(,R7)              ->END OF FIELD
         CR    R0,R8                   ROOM FOR FIELD?
         BNL   MSGERR5                 (NO )
         L     R14,0(,R3)              ->FIELD
         MVI   36(R7),C'*'             ADD CHARACTER TO OUTPUT
         BCT   R15,*+10
         MVC   38(*-*,R7),0(R14)
         EX    R15,*-6
         MVI   55(R7),C'*'
         LA    R15,1(R14,R15)          ->END OF FIELD
         MVI   MSGWORK,64              CLEAR WORK FIELD
         MVC   MSGWORK+1(L'MSGWORK-1),MSGWORK
         LA    R1,MSGWORK              ->START OF WORK FIELD
         B     *+12
MSGLOOP5 LA    R1,2(,R1)               ->NEXT BYTE IN OUTPUT FIELD
         LA    R14,1(,R14)             ->NEXT BYTE IN INPUT FIELD
         CR    R14,R15                 END OF INPUT FIELD?
         BE    MSGDUMP1                (YES)
         UNPK  0(3,R1),0(2,R14)        CONVERT TO EBCDIC
         TR    0(2,R1),MSGHEXTR
         B     MSGLOOP5                PROCESS NEXT CHARACTER
MSGDUMP1 MVC   0(8,R7),MSGWORK         ADD TO OUTPUT BUFFER
         MVC   9(8,R7),MSGWORK+8
         MVC   18(8,R7),MSGWORK+16
         MVC   27(8,R7),MSGWORK+24
         LA    R7,56(,R7)              INCREMENT OUTPUT BUFFER
         LA    R3,8(,R3)               ->NEXT VARIABLE IN LIST
         B     MSGLOOP3                PROCESS NEXT MESSAGE BYTE
*    Display message using TPUT
MSGTPUT  CLI   12(R2),1                DISPLAY USING TPUT?
         BNE   MSGWTO                  (NO )
         LA    R1,MSGBUFR              ->START OF OUTPUT BUFFER
         SR    R7,R1                   =LENGTH OF OUTPUT BUFFER
         LR    R0,R7                   MOVE FOR TPUT
         TPUT  (1),(0),R               DISPLAY MESSAGE
         SR    R15,R15                 CLEAR RETURN CODE
         B     MSGEXIT                 TERMINATE PROGRAM
*    Display message using WTO
MSGWTO   CLI   12(R2),2                DISPLAY USING WTO?
         BNE   MSGBUF                  (NO )
         LA    R1,MSGBUFR              ->START OF OUTPUT BUFFER
         SR    R7,R1                   -LENGTH OF OUTPUT BUFFER
         MVC   MSGEXWTO(MSGWTOL),MSGMFWTO RESET WORKAREA
         CH    R7,=Y(120)              TRUNCATE MESSAGE IF NECESSARY
         BNH   *+8
         LA    R7,120
         BCT   R7,*+10                 ADD MESSAGE TO WORKAREA
         MVC   MSGEXWTO+4(*-*),0(R1)
         EX    R7,*-6
         WTO   MF=(E,MSGEXWTO)         ISSUE MESSAGE USING WTO
         SR    R15,R15                 CLEAR RETURN CODE
         B     MSGEXIT                 TERMINATE PROGRAM
*       Build   buffer and      return it to caller
MSGBUF   CLI   12(R2),3                RETURN BUFFER TO CALLER?
         BNE   MSGERR3                 (NO )
         LA    R8,MSGBUFR              ->START OF OUTPUT BUFFER
         SR    R7,R8                   -LENGTH OF OUTPUT BUFFER
         LA    R7,7(,R7)               ROUND UP TO NEAREST DOUBLEWORD
         SRL   R7,3
         SLL   R7,3
         STH   R7,8(,R2)               SAVE LENGTH FOR CALLER
         GETMAIN RC,LV=(R7)            GET BUFFER FOR CALLER
         LTR   R15,R15                 GETMAIN OK?
         BNZ   MSGERR4                 (NO )
         ST    R1,4(,R2)               SAVE ADDRESS OF BUFFER FOR CALLE
         BCT   R7,*+10                 ADD MESSAGE TO BUFFER
         MVC   0(*-*,R1),0(R8)
         EX    R7,*-6
         B     MSGEXIT                 TERMINATE PROGRAM
*        Error routines
MSGERR1  LA    R15,4                   SET MESSAGE NOT FOUND CODE
         B     MSGEXIT                 TERMINATE PROGRAM
MSGERR2  LA    R15,8                   SET FORMAT NOT RECOGNIZED CODE
         B     MSGEXIT                 TERMINATE PROGRAM
MSGERR3  LA    R15,12                  SET TYPE NOT RECOGNIZED CODE
         B     MSGEXIT                 TERMINATE PROGRAM
MSGERR4  LA    R15,16                  SET GETMAIN FAILED CODE
         B     MSGEXIT                 TERMINATE PROGRAM
MSGERR5  LA    R15,20                  SET MESSAGE TOO LONG CODE
         B     MSGEXIT                 TERMINATE PROGRAM
*    Set return code and return to caller
MSGEXIT  RACKOFF RC=(R15)              SET RETURN CODE AND EXIT
*    Literal pool
         LTORG ,
*    Constants
*
MSGHEXFF DC    X'FFFFFFFF'
MSGMASK  DC    X'40202020202020202020202020202120'
         DC    C'0123456789ABCDEF'
MSGHEXTR EQU   *-256
MSGMFWTO WTO   '                                                       +
                                                                       +
                       ',ROUTCDE=11,MF=L
*    GETMAINED workarea map
MSGDSECT DSECT ,
         DS    18F
MSGDW    DS    D
MSGBUFR  DS    CL256
MSGWORK  DS    CL16
MSGEXWTO WTO   '                                                       +
                                                                       +
                       ',ROUTCDE=11,MF=L
MSGWTOL  EQU   *-MSGEXWTO
MSGDSECL EQU   *-MSGDSECT
         END
