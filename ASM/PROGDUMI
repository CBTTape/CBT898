***********************************************************************
*                                                                     *
*  Title   : PROGDUMP DEBUGGER                                        *
*  System  : Program debugging                                        *
*  Module  : PROGDUMI                                                 *
*  Program : PROGDUMP                                                 *
*  Function:                                                          *
*            Executes the parse input data. Removed because of        *
*            addressability error.                                    *
*  Company : ASYSTS Pty. Ltd.                                         *
*  Author  : A. Kara                                                  *
*  Date    : 08/09/94                                                 *
*                                                                     *
***********************************************************************
*#####################################################################*
PROGDUMI KICKOFF (R12),WORKARE1,WORK1LEN,LIST=NO
         LR    R10,R1                  PARAMETER ADDRESS
         LA    R11,4095(R10)           USE R11 AS SECOND BASE
         LA    R11,1(R11)              USE R11 AS SECOND BASE
         USING WORKAREA,R10,R11        ADDREASSABILY TO CALLERS DATA
         MVC   SCRNMSG,SPACES          CLEAR MESSAGE AREA
         MVI   RCODE,C'0'              SET ZERO RETURN CODE
         MVI   TRACEIT,C'Y'            INITIALISE PDUMP TRACE FLAG
                                                                SPACE 1
         BAL   R14,PARS4INT            PARSE FOR INTERNAL ADDRESS'G
                                                                SPACE 1
EXITPR00 DS    0H
         RACKOFF RC=0,LIST=NO          RETURN TO CALLER
                                                                SPACE 1
*#####################################################################*
PARS4INT DS    0H
         STM   R0,R14,SAVSUB11         STORE SAVED REGISTERS
         CLI   STACKEDF,C'Y'           Q. IS STACKED CMDS FLAG ON
         BE    TSTSTACK                   Y. BYPASS
         MVC   REPLYQ(60),TARGET       STORE LAST INPUT FOR RECALL
TSTSTACK DS    0H
         BAL   R14,PARSESTK            R1 POINTS TO COMMON AREA
         LTR   R15,R15                 Q. 0 RETURN CODE
         BNZ   ENADEXIT                   N. ERROR EXIT
*---------------------------------------------------------------------*
TRBRAC   DS    0H
         CLI   TARGET,C'('             Q. ADDRESS FROM ADDRESS
         BNE   TPLUSRB
         MVI   DELIMITR,C')'           SET DELIMITER IDENTIFIER
         LA    R7,TARGET+1             SET POINTER PAST '('
         BAL   R4,PARSADR
         L     R2,PROGADRS             Y. SET CURRENT BASE
         A     R2,FULLWORD             ADD OFFSET ADDRESS
         L     R2,0(R2)                LOAD NEW ADDRESS
         ST    R2,PROGADRS             STORE NEW ADDRESS
         B     NADEXIT3                EXIT
TPLUSRB  DS    0H
         CLC   TARGET(2),=C'+('        Q. ADDRESS PLUS DISPLACEMENT
         BNE   TPOSNEWB
         MVI   DELIMITR,C')'           SET DELIMITER IDENTIFIER
         LA    R7,TARGET+2             SET POINTER PAST '('
         BAL   R4,PARSADR
         L     R2,PROGADRS             SET CURRENT BASE
         LR    R1,R2                   SET CURRENT BASE
         A     R1,FULLWORD             ADD OFFSET ADDRESS
         AH    R2,0(R1)                ADD THE LENGTH TO OFFSET
         ST    R2,PROGADRS             STORE NEW ADDRESS
         B     NADEXIT3                EXIT
TPOSNEWB DS    0H
         CLI   TARGET,C'+'             Q. POSITIVE NEW BASE
         BNE   TMINURB
         MVI   DELIMITR,C' '           SET DELIMITER IDENTIFIER
         LA    R7,TARGET+1             SET POINTER PAST '('
         BAL   R4,PARSADR
         L     R2,PROGADRS             LOAD CURRENT BASE ADDRESS
         A     R2,FULLWORD             ADD OFFSET ADDRESS
         ST    R2,PROGADRS             SAVE NEW BASE ADDRESS
         B     NADEXIT3                EXIT
TMINURB  DS    0H
TNEGNEWB EQU   *
         CLI   TARGET,C'-'             Q. NEGATIVE NEW BASE
         BNE   NEWADDR
         MVI   DELIMITR,C' '           SET DELIMITER IDENTIFIER
         LA    R7,TARGET+1             SET POINTER PAST '('
         BAL   R4,PARSADR
         L     R2,PROGADRS             LOAD CURRENT BASE ADDRESS
         S     R2,FULLWORD             ADD OFFSET ADDRESS
         ST    R2,PROGADRS             SAVE NEW BASE ADDRESS
         B     NADEXIT3                EXIT
NEWADDR  DS    0H
         LA    R7,TARGET               START OF SCAN
         BAL   R4,GETPARM              GO PARSE PARAMETER
         CLI   RCODE,C'8'              Q. ERROR RETURN CODE
         BE    ENADEXIT                   Y. ERROR RETURN
         CLI   TARGET+7,C'-'           Q. LAST CHAR PAGE SKIP INDIC
         BE    MULTPAGE                   Y. PROCESS MULTI PAGE
         CLI   TARGET+7,C'+'           Q. LAST CHAR PAGE SKIP INDIC
         BE    MULTPAGE                   Y. PROCESS MULTI PAGE
         CLC   TARGET(8),SPACES        Q. NO PARAMETER ENTERED
         BE    NADEXIT3                   Y. EXIT WITH SAME ADDRESS
         CHHEXMAC TARGET,TARGETX,8,INVALADR,MF=E
         MVC   PROGADRS(4),TARGETX     MOVE NEW ADDRESS
         B     NADEXIT3                EXIT
INVALADR DS    0H
         MVC   SCRNMSG(15),=C'Invalid option '
         MVC   SCRNMSG+15(63),TARGET   MOVE DATA ENTERED
         B     ENADEXIT                GO TO ERROR EXIT
*---------------------------------------------------------------------*
MULTPAGE DS    0H
         LA    R2,1                    FORWARD SKIP INDICATOR
         CLI   TARGET+7,C'+'           Q. FORWARD SKIP
         BE    CONT#1                     Y. BYPASS
         XR    R2,R2                   ZEROISE SKIP INDICATOR
         BCTR  R2,0                    NEGATE SKIP INDICATOR
CONT#1   DS    0H                      TARGET = "00000NN+"
         CLI   TARGET+4,C'0'           Q. ONLY TWO DIGITS ENTERED
         BNE   INVPGSKP                   N. INVALID PAGE SKIP
         CLI   TARGET+5,C'0'           Q. ONLY 2ND DIGIT NUMERIC
         BL    INVPGSKP                   N. INVALID PAGE SKIP
         CLI   TARGET+6,C'0'           Q. ONLY 1ST DIGIT NUMERIC
         BL    INVPGSKP                   N. INVALID PAGE SKIP
         PACK  DWORK8(8),TARGET+5(2)   PACK THE NO OF PAGES
         CVB   R1,DWORK8               CONVERT TO BINARY
         MH    R2,=H'4096'             ADD PAGE VALUE TO +/- SIGN
         STH   R2,HALFWORD             STORE TO ELIMINATE MR
         MH    R1,HALFWORD             # PAGES BY +/- PAGESIZE
         L     R2,PROGADRS             CURRENT ADDRESS POINTER
         AR    R2,R1                   ADD NEW DISPLACEMENT
         ST    R2,PROGADRS             STORE NEW ADDRESS
         B     NADEXIT3                RETURN
INVPGSKP DS    0H
         MVC   SCRNMSG(31),=C'Invalid multi-page skip "....".'
         MVC   SCRNMSG+25(4),TARGET+4  MOVE OFFENDING FIELD
         B     ENADEXIT                ERROR RETURN
                                                                SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  THIS ROUTINE PARSES THE VARIABLE POINTED TO BY R7.                 *
*                                                                     *
*  ONCE THE DELIMITER/8 BYTES ARE  REACHED, THE REST IS SPACE FILLED. *
*                                                                     *
*  IT IS THE PLACED IN A 8 CHAR FIELD CALLED "TARGET" RIGHT           *
*  JUSTIFIED AND CONVERTED TO HEX. IF INVALID CHAR FOUND, NOTIFY.     *
*                                                                     *
*  IF DISPALCEMENT > X'1000' NOTIFY.                                  *
*                                                                     *
*---------------------------------------------------------------------*
PARSADR  DS    0H
         STM   R0,R14,SAVSUB12         SAVE REGISTERS
         LR    R6,R7                   USE R6 AS POINTER
         LA    R8,9                    LOOP COUNTER (8 CAHRS + DELIM)
PARSLOP1 DS    0H
         CLC   0(1,R6),DELIMITR        Q. DELIMITER
         BE    PARSEND1                   Y. CONTINUE
         LA    R6,1(R6)                INCREMENT POINTER
         BCT   R8,PARSLOP1             LOOP
         BNE   PARSBAD                 NO DELIMITER
PARSEND1 DS    0H
         MVC   0(8,R6),SPACES          CLEAR REST OF FIELD
         OC    0(8,R7),SPACES          TURN LOWER TO UPPER
         BAL   R4,GETPARM              PUT INTO TARGET (LAST 4)
         CHHEXMAC TARGET,FULLWORD,8,BADCHAR2,MF=E
         L     R3,DATALEN              LOAD LENGTH OF DATA MOVED
         SH    R3,=H'4'                LAST 4 BYTE ADDRESS LESS
         C     R3,FULLWORD             Q. LARGER THAN AREA
         BL    PARSBAD                    Y. ERROR
         LM    R0,R14,SAVSUB12         RESTORE REGISTERS
         BR    R4                      RETURN
                                                                SPACE 1
*---------------------------------------------------------------------*
PARSBAD  DS    0H
         MVC   SCRNMSG,SPACES          CLEAR MESSAGE AREA
         MVC   SCRNMSG(40),=C'Invalid parameter. Max value (........).'
         ST    R3,FULLWORD             STORE MAX LENGTH
         HEXCHMAC FULLWORD,SCRNMSG+30,4,MF=E
         B     ENADEXIT
                                                                SPACE 1
*---------------------------------------------------------------------*
BADCHAR2 DS    0H
         MVC   SCRNMSG(17),=C'Invalid address "'
         LA    R7,TARGET               SOURCE
         LA    R8,SCRNMSG+17           DESTINATION
         LA    R9,8                    LOOP COUNTER
LOOPMOV3 DS    0H
         CLI   0(R7),C' '              Q. CHARACTER SPACE
         BE    EXLOOP3                    Y. EXIT LOOP
         MVC   0(1,R8),0(R7)           MOVE CHARACTER
         LA    R7,1(R7)                UP COUNTER
         LA    R8,1(R8)                UP COUNTER
         BCT   R9,LOOPMOV3             LOOP
EXLOOP3  DS    0H
         MVC   0(10,R8),=C'" ENTERED.'
ENADEXIT DS    0H
         MVI   RCODE,C'8'              ERROR FOUND
         B     RETMAIN1                BYPASS
NADEXIT0 DS    0H
         MVI   RCODE,C'0'              SET INTERNAL PROCESS INDICATOR
         B     RETMAIN1                BYPASS
NADEXIT3 DS    0H
         MVI   RCODE,C'3'              SET INTERNAL PROCESS INDICATOR
RETMAIN1 DS    0H
         LM    R0,R14,SAVSUB11         STORE SAVED REGISTERS
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*  THIS ROUTINE PARSES THE VARIABLE "REPLYQ" FOR CHARACTER ";"        *
*                                                                     *
*  WHICH IS THE COMMAND STACKER INDICATOR.                            *
*                                                                     *
*  IT SPACES FILLS MOVES ALL CHARACTERS AFTER ";" TO VARIABLE "REPLYC"*
*  AND SPACE FILLS "CICSINPT"                                         *
*                                                                     *
*---------------------------------------------------------------------*
PARSESTK DS    0H
         STM   R0,R14,SAVSUB12      STORE SAVED REGISTERS
         LA    R7,60                LOOP COUNTER (LENGTH OF CICSINPT)
         LA    R8,0                 CHARCTER COUNTER
         LA    R2,REPLYQ            START ADDRESS OF SCAN
         CLI   STACKEDF,C'N'        Q. STACKED FLAG OFF
         BE    STAKOFF                 Y. NO MOVE
STAKON   DS    0H
         LH    R9,STACKPTR          LOAD STACK POINTER
         AR    R2,R9                PLACE POINTER AT NEXT COMMAND
         MVC   TARGET(60),0(R2)     MOVE NEXT COMMAND TO INPUT AREA
         MVI   STACKEDF,C'N'        TURN STACKED FLAG OFF
         B     FIRSTCHR
STAKOFF  DS    0H
         XR    R9,R9                CLEAR STACK POINTER
FIRSTCHR DS    0H
         CLI   TARGET,C';'          Q. FIRST CHAR ";"
         BE    STACKERR                Y. STACK ERROR
         SR    R7,R9                DECREMENT LOOP COUNTER ACCORDINGLY
FSTKRLOP DS    0H
         CLI   0(R2),C';'           Q. STACKER INDICATOR
         BE    ITISSTKD                Y. PROCESS NEXT COMMAND
         LA    R2,1(R2)             INCREMENT POINTER
         LA    R8,1(R8)             CHARACTER COUNTER
         LA    R9,1(R9)             UP STACK POINTER BY 1
         BCT   R7,FSTKRLOP          LOOP
         B     MCSEXIT              END OF LOOP RETURN
ITISSTKD DS    0H
         LA    R9,1(R9)             COUNT PAST ";"
         LA    R3,TARGET            INCREMENT COUNTER
         AR    R3,R8                OFFSET INTO INPUT
         MVI   0(R3),C' '           MOVE SPACE OVER ";"
         BCT   R7,MSTKRLOP          MOVE LOOP (IF LAST CHAR)
         B     MSTKREND             END OF MOVE
MSTKRLOP DS    0H
         MVI   0(R3),C' '           MOVE SPACE OVER SOURCE CHAR
         LA    R3,1(R3)             INCREMENT DESTINATION
         BCT   R7,MSTKRLOP          MOVE LOOP
MSTKREND DS    0H
         CLI   1(R2),C';'           Q. FIRST CHAR AFTER STACKER ANOTHER
         BE    STACKERR                Y. STACK ERROR
         CLC   1(31,R2),SPACES      Q. CHARS OFTER STACKER SPACES
         BE    STACKERR                Y. STACK ERROR
         MVI   STACKEDF,C'Y'        SET STACKED FLAG
         STH   R9,STACKPTR          SAVE STACK POINTER
         B     MCSEXIT              EXIT ROUTINE
STACKERR DS    0H       Y. STACK ERROR
         MVC   SCRNMSG(31),=C'Illegal use of command-stacker.'
         B     EMCSEXIT             ERROR EXIT
MCSEXIT  DS    0H                   NORMAL EXIT
         XR    R15,R15              RETURN CODE OF "0"
         B     RETMAIN2             EXIT USING R14 AS RETURN ADDRESS
EMCSEXIT DS    0H                   ERROR EXIT
         LA    R15,8                RETURN CODE OF "8"
RETMAIN2 DS    0H
         LM    R0,R14,SAVSUB12         STORE SAVED REGISTERS
         BR    R14                  EXIT USING R14 AS RETURN ADDRESS
                                                                SPACE 1
*---------------------------------------------------------------------*
*                                                                     *
*        ROUTINE USED TO EXTRACT ASSUMED 8 CHAR ADDRESS.              *
*                                                                     *
*        SCANS 'SOURCE' FOR  MAXIMUM OF 32 CHARACTERS.                *
*        FIRST 8 NONBLANK CHARS ARE SELECTED.                         *
*        SCAN STOPS AFTER FIRST BLANK AND IF TARGET < 8 CHARS, IT     *
*        RIGHT JUSTIFIED WITH LEADING ZEROS.                          *
*                                                                     *
*        R6=SCAN LENGTH, R7=SOURCE, R8=TARGET, R9=LENGTH              *
*                                                                     *
*---------------------------------------------------------------------*
GETPARM  DS    0H
         STM   R0,R14,SAVSUB13         STORE CALLERS REGISTERS
         LA    R6,32                   SCAN LENGTH => LOOP COUNTER
         MVI   REPLY,C' '              SPACE FILL TARGET FOR
         MVC   REPLY+1(7),REPLY           8 CHARACTERS
         LA    R8,REPLY                TARGET ADDRESS
         XR    R9,R9                   INITIALISE LENGTH
PMLOOP1  DS    0H
         CLI   0(R7),X'00'             Q. CHAR NULLS
         BE    TESTLENG                   Y. TEST LENGTH
         CLI   0(R7),C' '              Q. CHAR SPACE
         BNE   MVCHAR                     Y. MOVE CHARACTER
         LA    R7,1(R7)                POINT TO NEXT CHAR
         BCT   R6,PMLOOP1              GET NEXT CHAR
         B     TESTLENG                   Y. TEST LENGTH
PMLOOP2  DS    0H
         CLI   0(R7),C'_'              Q. CHAR PAD CHAR
         BE    TESTLENG                   Y. TEST LENGTH
         CLI   0(R7),C' '              Q. CHAR SPACE
         BE    TESTLENG                   Y. TEST LENGTH
         CLI   0(R7),X'00'             Q. CHAR NULLS
         BE    TESTLENG                   Y. TEST LENGTH
MVCHAR   DS    0H
         MVC   0(1,R8),0(R7)           MOVE CHAR TO TARGET
         CH    R9,=H'7'                Q. 8 CHARACTERS MOVED
         BNL   TESTLENG                   Y. RETURN
         LA    R7,1(R7)                INCREMENT SOURCE POINTER
         LA    R8,1(R8)                INCREMENT TARGET POINTER
         LA    R9,1(R9)                ADD 1 TO LENGTH
         BCT   R6,PMLOOP2              TEST NEXT CHAR
TESTLENG DS    0H
         LTR   R9,R9                   Q. ANY PARAMETER PASSED
         BNZ   HAVELENG                   Y. PROCESS PARAMETER
         HEXCHMAC PROGADRS,TARGETX,4,MF=E REINSTATE OLD ADDRESS
         BR    R4                      RETURN
HAVELENG DS    0H
         CH    R9,=H'7'                Q. ADDRESS 8 CHARS LONG
*<=====  BE    R4                         Y. RETURN
         BE    RETMAIN3                   Y. RETURN
         MVC   TARGETX(8),=C'00000000' ZERO FILL TARGET TRANFER
         LR    R5,R9                   SET LENGTH OF PASSED ADDRESS
         LNR   R5,R5                   NEGATE LENGTH
         AH    R5,=H'8'                MISSING # OF LEADING CHARS
         LA    R6,TARGETX              ADDRESS OF TRANSFER TARGET
         AR    R6,R5                   STRAT ADDRESS OF MOVE
*        BCTR  R9,0                    DECREMENT PARM LENGTH FOR MOVE
         EX    R9,MOVECHAR             EXECUTE THE MOVE
         MVC   TARGET(8),TARGETX       RESET TARGET WITH NEW EXP ADRS
         B     RETMAIN3                GO TO COMMON RETURN SPOTS
*---------------------------------------------------------------------*
MOVECHAR MVC   0(0,R6),REPLY           SHIFT TARGET TO TRANFER
*---------------------------------------------------------------------*
BADCHAR  DS    0H
         MVC   SCRNMSG(34),=C'Invalid address "........" entered.'
         MVI   RCODE,C'8'              SET ZERO RETURN CODE
RETMAIN3 DS    0H
         LM    R0,R14,SAVSUB13         RESTORE CALLERS REGISTERS
         BR    R4                      RETURN
*=====================================================================*
*#####################################################################*
         LTORG
*---------------------------------------------------------------------*
SPACES   DC    CL80' '                 SPACES
*---------------------------------------------------------------------*
WORKARE1 DSECT
         DS    18F                     REGISTER SAVE AREA ON ENTRY
TRACEIT  DS    CL1
WORK1LEN EQU   *-WORKARE1
                                                                SPACE 1
*---------------------------------------------------------------------*
         COPY  PROGDUMA             COMMON WORK AREA
*---------------------------------------------------------------------*
         PUSH PRINT
         PRINT NOGEN
*
         IHASDWA DSECT=YES          ENTRY : SDWA
*
         POP PRINT
*---------------------------------------------------------------------*
         END
