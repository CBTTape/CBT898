***********************************************************************
*                                                                     *
*  Title   : PROGDUMP DEBUGGER                                        *
*  System  : Program debugging                                        *
*  Module  : PROGDUMO                                                 *
*  Program : PROGDUMP                                                 *
*  Function: Parses for predefined commands of the format '.COMD'     *
*  Company : ASYSTS Pty. Ltd.                                         *
*  Author  : A. Kara                                                  *
*  Date    : 08/09/94                                                 *
*                                                                     *
***********************************************************************
*#####################################################################*
PROGDUMO KICKOFF (R12),WORKARE1,WORK1LEN,LIST=NO
         LR    R10,R1                  PARAMETER ADDRESS
         LA    R11,4095(R10)           USE R11 AS SECOND BASE
         LA    R11,1(R11)              USE R11 AS SECOND BASE
         USING WORKAREA,R10,R11        ADDREASSABILY TO CALLERS DATA
         MVI   RCODE,C'0'              SET ZERO RETURN CODE
         MVI   TRACEIT,C'Y'            INITIALISE PDUMP TRACE FLAG
                                                                SPACE 1
*        AMODECHG 31                   FORCE 31 BIT ADDRESSING
         BAL   R14,TEST4INT            PARSE FOR INTERNAL ADDRESS'G
                                                                SPACE 1
EXITPR00 DS    0H
*        CLI   AMODE#,X'31'            Q. ALREADY IN 31 BIT ADDRESSING
*        BE    AMODESK2                   Y. BYPASS MODE CHANGE
*        AMODECHG 24                   RESTORE ADDRESSING MODE
AMODESK2 DS    0H
         RACKOFF RC=0,LIST=NO          RETURN TO CALLER
                                                                SPACE 1
*#####################################################################*
TEST4INT DS    0H
         STM   R0,R14,SAVSUB11         STORE SAVED REGISTERS
         ICM   R3,B'1111',COMDADRS     Q. GOT COMMAND GETMAINED ADDRESS
         BNZ   GOTADDRS                   Y. BYPASS
         ICM   4,B'1111',DUMK@         Q. GOT PROGDUMK@ (MANUAL LOAD)
         BNZ   GOTDUMK1                   Y. BYPASS
         LOAD  EP=PROGDUMK             LOAD PROGRAM DUMP
         LR    R4,R0                   LOAD ENTRY POINT OF PROGRAM
GOTDUMK1 EQU   *
         LH    R9,0(R4)                LOAD NUMBER OF ENTRIES
         LR    R2,R9                   LOAD # OF CURRENT ENTRIES
         LA    R2,100(R2)              ALLOW 100 USER ENTRIES
         LH    R5,2(R4)                LOAD EACH ENTRIES LENGTH
         LR    R8,R5                   LOAD EACH ENTRIES LENGTH
         BCTR  R8,0                    PREPARE FOR 'EX' COMMAND
         MH    R2,2(R4)                MULTIPLY BY EACH ENTRIES LENGTH
         LA    R2,6(R2)                ADD 6 FOR STATS FIELDS
         ST    R2,COMDADRL             LOAD GETMAINED LENGTH
         GETMAIN RC,LV=(2),LOC=ANY     GET STORAGE AREA
         LTR   R15,R15                 Q. GOT AREA
         BZ    GETMNOK                    Y. CONTINUE
         MVC   SCRNMSG(63),=C'GETMAIN failed in module ''PROGDUMO''. Rep
               port problem to systems.'
         MVI   RCODE,C'8'              SET ERROR RETURN CODE
         B     EXITPR00                EXIT ROUTINE
GETMNOK  EQU   *
         LR    R3,R1                   POINT TO GETMAINED AREA
         ST    R3,COMDADRS             STORE GETMAINED ADDRESS
         STH   R9,0(R3)                STORE # OF ENTIRES IN GOT AREA
         LR    R2,R9                   LOAD # OF CURRENT ENTRIES
         LA    R2,100(R2)              ALLOW 100 USER ENTRIES
         STH   R2,2(R3)                STORE ALLOWABLE ENTRIES
         STH   R5,4(R3)                STORE ENTRY LENGTH
         LA    R3,6(R3)                POINT PAST STATS FIELDS
         LA    R4,4(R4)                POINT PAST COUNTER/LENGTH
POPLOOP1 DS    0H
         EX    R8,MOVECMD1             REPLACE COMMAND
         AR    R3,R5                   BUMP BY ENTRY LENGTH
         AR    R4,R5                   BUMP BY ENTRY LENGTH
         BCT   R9,POPLOOP1             LOOP TILL END
         ICM   14,B'1111',DUMK@        Q. GOT PROGDUMK@ (MANUAL LOAD)
         BNZ   GOTDUMK2                   Y. BYPASS
         DELETE EP=PROGDUMK            REMOVE PROGRAM
GOTDUMK2 EQU   *
         L     R3,COMDADRS             RESTORE GETMAINED ADDRESS
                                                                SPACE 1
GOTADDRS DS    0H
         CLC   =C'.. ',REPLY+6         Q. DISPLAY REQUESTED
         BNE   BYPDISP1                   N. BYPASS
         MVC   REPLY,SPACES            CLEAR FIELD
         MVC   TARGET,SPACES           CLEAR FIELD
         LA    R3,6(R3)                POINT PAST STATS AREA
         ST    3,TARGET                SAVE POINTER
         HEXCHMAC TARGET,REPLY+6,4,MF=E
         MVC   TARGET(8),REPLY+6       MOVE TO BACKUP FIELD
*        MVI   AMODE#,X'31'            FORCE INTO 31 BIT ADDRESSING
         B     EXITPR00                EXIT ROUTINE
BYPDISP1 DS    0H
         LH    R9,0(R3)                LOAD NUMBER OF ENTRIES
         LH    R5,4(R3)                LOAD ENTRY LENGTH
         LA    R3,6(R3)                POINT PAST COUNTER/LENGTH
         BAL   R14,TESTEQAT            TEST FOR EQUATION (R8=DISP)
         BCTR  R8,0                    PREPARE FOR EX COMMAND
SRCLOOP1 DS    0H
         EX    R8,TESTMTCH             Q. MATCH
         BE    MATCHCMD                   Y. EXIT COMMAND
         AR    R3,R5                   NEXT ENTRY
         BCT   R9,SRCLOOP1             LOOP TILL END
                                                                SPACE 1
*---------------------------------------------------------------------*
* No match, add to the end and bump counter                           *
*---------------------------------------------------------------------*
         CLI   DELIMFND,C'='           Q. REPLACE ENTRY DELIMITER
         BE    REPLCMD                    Y. GO REPLACE COMMAND
         MVC   SCRNMSG(18),=C'Command not found.'
         MVI   RCODE,C'8'              SET ERROR RETURN CODE
         B     EXITPR00                EXIT ROUTINE
REPLCMD  DS    0H
         L     R1,COMDADRS             RESTORE GETMAINED ADDRESS
         CLC   0(2,R1),2(R2)           Q. MAX COMMANDS IN TABLE
         BL    NOTMAXES                   N. BYPASS
         MVC   SCRNMSG(28),=C'Maximum entry limit reached.'
         MVI   RCODE,C'8'              SET ERROR RETURN CODE
         B     EXITPR00                EXIT ROUTINE
NOTMAXES DS    0H
         LA    R4,SPACES               POINT TP SPACES
         LH    R1,4(R1)                LOAD LENGTH OF TABLE ENTRY
         BCTR  R1,0                    PREPARE FOR 'EX' COMMAND
         EX    R8,MOVECMD1             MOVE SPACES
         LA    R4,REPLY+6              REPLACE COMMAND AREA
         EX    R8,MOVECMD1             REPLACE COMMAND
         AR    R4,R8                   POINT PAST THE COMMAND
         LA    R4,2(R4)                REST 'EX' PREP AND PASS THE '='
         MVC   L'ENTCMD+L'ENTDESC(60,R3),0(R4) REPLACE COMMAND AREA
         MVC   L'ENTCMD(18,R3),=C'** User defined **'
         L     R1,COMDADRS             RESTORE GETMAINED ADDRESS
         LH    R9,0(R1)                LOAD NUMBER OF ENTRIES
         LA    R9,1(R9)                BUMP COUNTER
         STH   R9,0(R1)                SAVE NEW COUNTER
         B     MOVE2INP                BYPASS MATCHED
MATCHCMD DS    0H
         CLI   DELIMFND,C'='           Q. REPLACE FLAG SET
         BE    REPLACIT                   Y. GO REPLACE IT
         CLI   DELIMFND,C'?'           Q. ECHO FLAG SET
         BNE   MOVE2INP                   N. BYPASS
         MVC   ZCMD(60),L'ENTCMD+L'ENTDESC(R3) MOVE IN COMMAND
         MVC   SCRNMSG(L'ENTDESC),L'ENTCMD(R3) MOVE IN DESCRIPTION
         MVI   RCODE,C'8'              SET ERROR RETURN CODE
         B     EXITPR00                EXIT ROUTINE
REPLACIT DS    0H
         LA    R4,REPLY+6              REPLACE COMMAND AREA
         AR    R4,R8                   POINT PAST THE COMMAND
         LA    R4,2(R4)                REST 'EX' PREP AND PASS THE '='
         MVC   L'ENTCMD+L'ENTDESC(L'ENTSTACK,R3),SPACES CLEAR STACK
         MVC   L'ENTCMD+L'ENTDESC(60,R3),0(R4) REPLACE COMMAND AREA
         MVC   L'ENTCMD(L'ENTDESC,R3),SPACES INITIALISE FIELD
         MVC   L'ENTCMD(14,R3),=C'** Replaced **'
MOVE2INP DS    0H
         MVC   REPLY+6(L'REPLY-6),SPACES CLEAR REPLY AREA
         MVC   REPLY+6(60),L'ENTCMD+L'ENTDESC(R3) MOVE IN COMMAND
         MVC   TARGET(60),L'ENTCMD+L'ENTDESC(R3) MOVE IN COMMAND
RETSUBR1 DS    0H
         LM    R0,R14,SAVSUB11         RESTORE SAVED REGISTERS
         BR    R14                     RETTURN TO CALLER
                                                                SPACE 1
TESTMTCH CLC   0(0,R3),REPLY+6         TEST FOR MATCH
MOVECMD1 MVC   0(0,R3),0(R4)           REPLACE COMMAND
*---------------------------------------------------------------------*
* TEST FOR NEW ASSIGNMENT VALUE, IE. .COMD=0;(218);ETC...             *
*---------------------------------------------------------------------*
TESTEQAT DS    0H
         ST    R14,RSAVER21            SAVE RETURN RETISTER
         LA    R7,9                    LOOP COUNTER
         LA    R2,REPLY+7              POINT PAST '.'
EQUSLOP  DS    0H
         CLI   0(R2),C'='              Q. EQUATE FOUND
         BE    RETSUBR2                   Y. EXIT WITH ZERO R-CODE
         CLI   0(R2),C'?'              Q. REPEAT FOUND
         BE    RETSUBR2                   Y. EXIT WITH ZERO R-CODE
         CLI   0(R2),C' '              Q. SPACE FOUND
         BE    RETSUBR2                   Y. EXIT WITH NON ZERO RC
         LA    R2,1(R2)                POINT TO NEXT BYTE
         BCT   R7,EQUSLOP              LOOP TILL END
         MVC   SCRNMSG(26),=C'Error parsing ''.'' command.'
         MVI   RCODE,C'8'              SET ERROR RETURN CODE
         B     EXITPR00                EXIT ROUTINE
RETSUBR2 DS    0H
         MVC   DELIMFND(1),0(R2)       SET DELIMITER FOUND
         LA    R8,10                   MAX LENGTH ('.CCCCCCCC=')
         SR    R8,R7                   SUBTRACT # LEFT IN LOOP
         L     R14,RSAVER21            RESTORE RETURN REGISTER
         BR    R14                     RETURN TO CALLER
*=====================================================================*
*#####################################################################*
         LTORG
*---------------------------------------------------------------------*
SPACES   DC    CL80' '                 SPACES
*---------------------------------------------------------------------*
WORKARE1 DSECT
         DS    18F                     REGISTER SAVE AREA ON ENTRY
RSAVER21 DS    F                       RETURN ADDRESS SAVE AREA
TRACEIT  DS    CL1
DELIMFND DS    CL1                     DELIMETER FOUND
WORK1LEN EQU   *-WORKARE1
                                                                SPACE 1
CMDTABLE DSECT
#OFENTS  DS    H                       NO OF TABLE ENTRIES
MAXENTRY DS    H                       PERMISSABLE TABLE ENTRIED
ENTRYLEN DS    H                       TABLE ENTRY LENGTH
ENTCMD   DS    CL16                    COMMAND (8 BYTES USED)
ENTDESC  DS    CL32                    DESCRIPTION
ENTSTACK DS    CL64                    STACK COMMANDS (60 BYPES USED)
*---------------------------------------------------------------------*
         COPY  PROGDUMA             COMMON WORK AREA
*---------------------------------------------------------------------*
         PUSH PRINT
         PRINT NOGEN
*
         IHASDWA DSECT=YES          ENTRY : SDWA
*
         POP PRINT
*---------------------------------------------------------------------*
         END
