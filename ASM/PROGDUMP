***********************************************************************
*
**       Title:    Online Program DUMP
**       System:   Debugging
**       Module:   PROGDUMP
**       Program:  PROGDUMP
**       Function: Display the registers and data of a program
**                 executing on-line.
**                 Used for debugging.
**                 Invoked by macro 'PDUMP'. The following is an
**                 extract of the 'PDUMP' macro:
*---------------------------------------------------------------------*
*  Macro to provide a formatted screen display of either the program  *
*    or selected data area.                                           *
*                                                                     *
*  PARAMETERS:                                                        *
*    1. Display address. This may be any A-type address or register   *
*       (2) - (13).                                                   *
*    2. Length of data to be displayed. Without this parameter you    *
*       may scroll down untill an addressing exception (0C4) occurs.  *
*    3. LIST=Yes/No                                                   *
*             Default is 'NO'                                         *
*    4. TRACES=address                                                *
*             Trace supervisor address. Pointer to a flag indicating  *
*             trace status. 'N' indicates off, Any-Other-value implies*
*             on.                                                     *
*             This flag is turned of by the 'TRACE OFF' command or    *
*             explicitly setting it to 'N' while specifying the       *
*             parameter.                                              *
*             Flag is turned on by a PDUMP macro without the flag or  *
*             using PDUMP with a diferent parameter address.          *
*    5. VTAML=.....                                                   *
*             Reserved for 'HALKEY' VTAM debuging                     *
*    6. AUTH=Y/N                                                      *
*             Authorised request. Permit authorised zapping of        *
*             normally unaccessible addresses. The calling program    *
*             must be authorised.                                     *
*    7. QUIT=address                                                  *
*             Adress to branch to if progdump is terminated           *
*             using the 'QUIT' command rather than END/PF3.           *
*    8. MSG='text'                                                    *
*             Initial message to be displayed.                        *
*    9. MF=E/L                                                        *
*             For re-entrant programs.                                *
*   10. REGS=Yes/No; parameter value of NO will suppress the initial  *
*             Parameter value of NO will suppress the initial         *
*             registers display screen on entry into the debugger.    *
*                                                                     *
*  If no parameter is supplied, the start is the start of the program *
*    (assuming normal linkage procedures. This called routine assumes *
*    that R15 in the SAVEAREA of the program that called the program  *
*    calling this routine points to the start address of the program  *
*    that called this routine. <It does make sence if you read it a   *
*    couple of times>)                                                *
*    The end of display is reached on the first storage violation.    *
*                                                                     *
*  Parameters passed to PROGDUMP:                                     *
*    The following parameter list is pointed to by R1:                *
*    1.  0(4,Rx) - Full(X'00000000')/part('DATA') display indicator   *
*    2.  4(4,Rx) - Starting display address                           *
*    3.  8(4,Rx) - Length of display data                             *
*    4. 12(4,Rx) - Return address to branch to if 'QUIT' used         *
*    5. 16(4,Rx) - VTAM address, (reserved for HALKEY)                *
*    6. 20(1,Rx) - Display registers flag                             *
*       21(1,Rx) - Authorised request flag                            *
*       22(1,Rx) - CICS indicator flag (Y/N)                          *
*       23(1,Rx) - *** Spare ***                                      *
*    7. 24(4,Rx) - Trace supervisor flag's address                    *
*    8. 28(4,Rx) - PROGDUMK address if pre-loaded (CICS usage)        *
*                                                                     *
*---------------------------------------------------------------------*
**       Author:   ASYSTS Pty. Ltd. (A. Kara)
*
*---------------------------------------------------------------------*
*=====================================================================*
PROGDUMP KICKOFF (R11,R12),WORKAREA,WORKALEN,LIST=NO
         LR    R10,R1                  PARAMETER ADDRESS
         USING PDUMPPL,R10             ADDRESABILITY
         AMODECHG 31,ST=AMODEE         STORE AMODE ON ENTRY
         MVI   AMODE#,X'31'            SET 31 BIT ADDRESSING
*---------------------------------------------------------------------*
*  INITIALISE                                                         *
*---------------------------------------------------------------------*
         L     R2,PDUMPPL+24           LOAD TRACE SUPERVISOR ADDRESS
         MVC   DUMK@,PDUMPPL+28        STORE PROGDUMK ADDR FOR CICS USE
         MVC   CICSREQ(1),PDUMPPL+22   STORE CICS USAGE FLAG
         LTR   R2,R2                   Q. TRACE SUPERVISOR AREA SPEC'D
         BZ    NTRACESV                   N. BYPASS
         CLI   0(R2),C'N'              Q. TRACE SUPERVISOR SET TO NO
         BE    EXITPRXX                   Y. EXIT PROGDUMP
NTRACESV DS    0H
         MVI   TRACE,C'N'              TURN TRACE OFF
         MVC   AUTH(1),PDUMPPL+21      SET FOR DISPLAY OF REGISTERS
         TESTAUTH
         LTR   R15,R15                 Q. AUTHORISED
         BZ    CONT#000                   Y. CONTINUE PROCESSING
         MVI   AUTH,C'N'               SET AUTHORISED TO NO
CONT#000 DS    0H
*--------------------- SAMPLE TRACE ----------------------------------*
*        CLI   TRACE,C'Y'                                   <-----
*        BNE   CONT#900                                     <-----
*        ST    R3,TARGETX                                   <-----
*        L     R1,4(R13)                                    <-----
*        HEXCHMAC 64(R1),SCRNMSG,8,MF=E                     <-----
*        LA    R2,PROGDMP2                                  <-----
*        LA    R3,SCRSZ2                                    <-----
*        BAL   R14,TPUTSCR                                  <-----
CONT#900 DS    0H                                           <-----
*---------------------------------------------------------------------*
         ISPEXEC INIT=Y,LIST=YES       INITIALISE ISPF ENVIRONMENT
         MVC   PROCESTA(COMESTAL),COMMESTA
         LA    1,(CMDTRLEN-6)/4        LOAD NUMBER OF CMD TRACE ENTRIES
         STH   1,CMDTRAC#              STORE NUMBER OF ENTRIES
         MVC   CMDTRACE(CMDTRLEN-6),SPACES INITIALISE FIELD
         LA    R4,PROGDMPC             LOAD SCREEN DISPLAY CONSTANT
         LA    R2,PROGDMPD             LOAD SCREEN DISPLAY DSECT @
         LA    R3,SCRSZC               LOAD SCREEN SISE
         LR    R5,R3                   LOAD SCREEN SISE
         ICM   R5,B'1000',C' '         FILL CHARACTER
         MVCL  R2,R4                   MOVE SCREEN DISPLAY AREA
         XC    RETRY,RETRY             INITIALISE VARIABLES
         XC    STACKPTR,STACKPTR       INITIALISE VARIABLES
         XC    COMDADRS,COMDADRS       INITIALISE VARIABLES
         MVC   DATALEN(4),=X'7FFFFFFF' INITIALISE VARIABLES
         MVC   FNDINCR(4),=F'4096'     SET UP DEFAULT FIND INCREMENT
         MVC   USCRSIZE(2),=H'21'      INITIALISE VARIABLES
         MVC   STRING(160),SPACES      INITIALISE VARIABLES
         MVI   FOVERF,C'N'             INITIALISE VARIABLES
         MVI   ORIGPROG,C'Y'           INITIALISE VARIABLES
         MVC   PRINTER1(PRTDCBL1),PRTDCBS1 MOVE CONSTANT TO DSECT
         MVC   OPENWK1(OPENSKL1),OPENSK1   MOVE CONSTANT TO DSECT
         MVC   TPUTWK1(TPUTCONL),TPUTCON1  MOVE CONSTANT TO DSECT
         MVC   TGETWK1(TGETCONL),TGETCON1  MOVE CONSTANT TO DSECT
         CLI   TRACE,C'Y'              Q. TRACE ON
         BNE   NOTRACE1                   N. BYPASS
         LA    R1,OPENWK1              OPEN HALACCT IN EXTEND MODE
         LA    R2,PRINTER1             SO THAT THE NEW RECORD WOULD
         OPEN  ((R2),OUTPUT),MF=(E,(1)) BE ADDED AT THE END
         LTR   R15,R15                 WAS OPEN OK?
         BNZ   EXITPR08                GO TO EXIT PROGRAM
NOTRACE1 DS    0H
*---------------------------------------------------------------------*
         BAL   R14,INITPROG            GO TO INITIALISE
         BAL   R14,PUT2SCRN            GO OUTPUT SCREEN
         B     EXITPR00                GO TO EXIT PROGRAM
*---------------------------------------------------------------------*
PUT2SCRN DS    0H
         STM   R0,R14,SAVSUB11         STORE CALLERS REGISTERS
*---------------------------------------------------------------------*
WRITE    DS    0H
         CLI   STACKEDF,C'Y'           Q. STACKED FLAG SET
         BE    TESTCMDS                   Y. GO TEST NEXT ADDRESS
*<=====  MVI   STACKEDF,C'N'           SET STACKED FLAG OFF
WRITE#   DS    0H
         CLI   PDUMPPL+20,C'N'         Q. DISPLAY REGISTERS
         BNE   CONT#050                   Y. DISPLAY
         MVI   PDUMPPL+20,C'Y'         SET FOR DISPLAY OF REGISTERS
         MVC   REPLY,SPACES            MOVE SPACES TO REPLY
         MVI   REPLY,X'7D'             SET ENTER AID
         MVC   TARGET(L'REPLY-6),REPLY+6
         B     NEWDISPL                BYPASS SCREEN DISPLAY
CONT#050 DS    0H
         BAL   R14,DISPSCRN            LOAD SCREEN ADDRESS
         MVC   ZCMD,SPACES             CLEAR COMMAND LINE
         MVC   SCRNMSG,SPACES          CLEAR MESSAGE AREA
WHATKEY  DS    0H
         CLC   TARGET(5),=C'QUIT '     Q. QUIT ENTERED
         BE    EXITPR08                   Y. EXIT
         CLC   TARGET(4),=C'END '      Q. END ENTERED
         BE    EXITPR00                   Y. EXIT
         CLI   REPLY,X'7D'             Q. <ENTER> ENTERD
         BE    TESTQUIT                   Y. NEXT TEST
GETPFKEY DS    0H
         CLI   REPLY,X'F3'             Q. END ENTERD
         BE    EXITPR00                   Y. EXIT
TESTHELP DS    0H
         CLI   REPLY,X'F1'             Q. PF1 ENTERED
         BE    CALLHELP                   Y. CALL HELP PROGRAM
         CLC   TARGET(4),=C'HELP'      Q. HELP ENTERED
         BNE   TESTREPT                   N. NEXT TEST
CALLHELP DS    0H
         IC    1,CICSREQ               LOAD CICS USE FLAG
         CALL  PROGDUMT                CALL TUTORIAL PROGRAM
         B     WRITE                   GO REDISPLAY
TESTREPT DS    0H
         CLI   REPLY,X'F2'             Q. ENTRY = "REPEAT"
         BNE   TESTQUIT                   N. NEXT TEST
         CLI   SREPLY,X'F2'            Q. REPEAT ENTRY = "REPEAT"
         BNE   CONT#F20                   N. BYPASS
         MVC   SCRNMSG(45),=C'Repeating ''REPEAT'' would put you in a lo
               oop!!!'
         B     WRITE
CONT#F20 DS    0H
         MVC   TARGET,STARGET          MOVE SAVED REPLY TO REPLY
         MVC   REPLY,SREPLY            MOVE SAVED REPLY TO REPLY
TESTQUIT DS    0H
         CLI   REPLY+6,C'Q'            Q. QUIT ENTERED
         BNE   TCMDSCRD                   Y. NEXT TEST
         CLI   REPLY+7,C'1'            Q. QUIT CODE < 1
         BL    EXITPR00                   Y. ZERO EXIT
         PACK  DWORK8(8),REPLY+7(1)    PACK DATA
         CVB   R15,DWORK8              CONVERT TO BINARY
         B     EXITPRXX                EXIT PROGRAM
*---------------------------------------------------------------------*
TCMDSCRD DS    0H
         CLI   REPLY,X'4A'             Q. ENTRY = F22
         BNE   TCMDSCRU                   Y. NEXT TEST
         MVI   TARGET,C'U'             SET UP INDICATOR
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMS                CALL COMMAND STACK ROUTINE
         B     GOPHERIT                GO DISPLAY NEW SCREEN
TCMDSCRU DS    0H
         CLI   REPLY,X'4B'             Q. ENTRY = F23
         BNE   TCMDCSPL                   Y. NEXT TEST
         MVI   TARGET,C'D'             SET DOWN INDICATOR
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMS                CALL COMMAND STACK ROUTINE
         B     GOPHERIT                GO DISPLAY NEW SCREEN
TCMDCSPL DS    0H
         CLI   REPLY,X'4C'             Q. ENTRY = F24
         BNE   TCSRPF12                   Y. NEXT TEST
         MVI   TARGET,C'C'             SET DOWN INDICATOR
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMS                CALL COMMAND STACK ROUTINE
         B     GOPHERIT                GO DISPLAY NEW SCREEN
*---------------------------------------------------------------------*
* In the following, PROGDUMS is used to calculate cursor address as   *
* this program is to large to maintain addressability and I was too   *
* lazy to create a new module.                                        *
*---------------------------------------------------------------------*
TCSRPF12 DS    0H
         CLI   REPLY,X'7C'             Q. ENTRY = F12 (@)
         BNE   TESTTRAC                   Y. NEXT TEST
         MVI   TARGET,C'@'             SET F12 INDICATOR
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         LA    R6,LINE0402             SCREEN ADDRESS
         CALL  PROGDUMS                CALL COMMAND STACK ROUTINE
         B     GOPHERIT                GO DISPLAY NEW SCREEN
*---------------------------------------------------------------------*
TESTTRAC DS    0H
         CLC   REPLY+6(09),=C'TRACE OFF' Q. TRACE OFF REQUESTED
         BNE   TESTRFID                   N. NEXT TEST
         L     R15,PDUMPPL+24          LOAD TRACE SUPERVISOR ADDRESS
         LTR   R15,R15                 Q. HAVE TRACE SUPERVISOR ADDRESS
         BNZ   TRACEOFF                   Y. CONTINUE
         MVC   SCRNMSG(27),=C'Trace supervisor not active'
         B     WRITE GO TELL OF ERROR
TRACEOFF DS    0H
         MVI   0(R15),C'N'             SET TRACE SUPERVISOR SET TO NO
         MVC   SCRNMSG(42),=C'Future trace suspended till program reset.
               .'
*        B     WRITE
         B     NEWDISPL                REDISPLAY
*---------------------------------------------------------------------*
TESTRFID DS    0H
         MVC   SREPLY,REPLY            MOVE SAVED REPLY TO REPLY
         CLC   REPLY+6(7),=C'REFIND '  Q. REFIND ENTERED
         BE    TESTREFD                   Y. PROCESS REFIND
         CLI   REPLY,X'F5'             Q. ENTRY = REFIND IT
         BE    TESTREFD                   Y. PROCESS REFIND
         CLC   REPLY+6(3),=C'FN '      Q. ENTRY = FIND NEXT BLOCK
         BE    TESTREFD                   Y. PROCESS REFIND
         CLC   REPLY+6(3),=C'FP '      Q. ENTRY = FIND PREV BLOCK
         BE    TESTREFD                   Y. PROCESS REFIND
TESTFIND DS    0H
         CLC   TARGET(2),=C'F '        Q. IS REQUEST A FIND
         BE    CONTFIND                   Y. CONTINUE FIND
         B     TESTOVRL                NEXT TEST
TESTREFD DS    0H
         CLI   PARTDISP,C'Y'           Q. PART DISPLAY ONLY
         BNE   CONT#100                   N. BYPASS
         CLC   REPLY+6(3),=C'FN '      Q. FIND NEXT
         BE    INVREFND                   Y. INVALID REFIND
         CLC   REPLY+6(3),=C'FP '      Q. FIND PREV
         BNE   CONT#100                   N. BYPASS
INVREFND DS    0H
         MVC   SCRNMSG(14),=C'Cannot issue "'
         MVC   SCRNMSG+14(2),REPLY+6   MOVE INVALID COMMAND
         MVC   SCRNMSG+16(21),=C'" under PART dispaly.'
         B     WRITE
CONT#100 DS    0H
         CLC   STRING(80),SPACES       Q. FIND STRING = SPACES
         BNE   CONTFIND                   N. FIND IT
         MVC   SCRNMSG(23),=C'Enter "F string" first.'
         B     WRITE
CONTFIND DS    0H
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMF                CALL FIND ROUTINE
         CLI   RCODE,C'0'              Q. ZERO RETURN CODE
         BNE   WRITE                      N. GO TELL OF ERROR
         B     NEWDISPL                DISPLAY NEW DATA
TESTOVRL DS    0H
         CLI   FOVERF,C'N'             Q. NO OVERLAY
         BE    TESTISPF                   Y. NEXT TEST
         MVI   FOVERF,C'O'             SET OVERLAY OFF
TESTISPF DS    0H
         CLC   TARGET(4),=C'ISPF'      Q. ISPF ENTERED
         BNE   TESTREGS                   N. NEXT TEST
         ISPEXEC 'CONTROL DISPLAY REFRESH'
         ISPEXEC 'SELECT PANEL(ISR@PRIM)'
         B     WRITE                   SHOW DATA
TESTREGS DS    0H
         CLC   TARGET(4),=C'REGS'      Q. REGS ENTERED
         BNE   TESTMSGQ                   N. NEXT TEST
DISPREGS DS    0H
         BAL   R14,POPREGS             REGISTER SAVE AREA
         B     WRITE                   SHOW DATA
TESTMSGQ DS    0H
         CLC   TARGET(3),=C'MSG'       Q. REGS ENTERED
         BNE   TESTSCRL                   N. NEXT TEST
         LH    R1,PMESL                LOAD PARAMETER MESSAGE LENGTH
         LTR   R1,R1                   Q. ANY MESSAGE
         BZ    NOPRMSG1                   N. BYPASS
         BCTR  R1,0                    RELATIVE LENGTH
         EX    R1,MOVEPMES             MOVE PARAMETER MESSAGE
         B     WRITE                   BYPASS EX COMMAND
NOPRMSG1 DS    0H
         MVC   SCRNMSG(26),=C'No initial message passed.'
         B     WRITE                   SHOW DATA
TESTSCRL DS    0H
         LA    R7,REPLY+6
         CLI   REPLY,X'F7'             Q. ENTRY = "UP"
         BE    PERFSCRL                   Y. PROCESS SCROLL
         CLI   REPLY,X'F8'             Q. ENTRY = "DOWN'
         BE    PERFSCRL                   Y. PROCESS SCROLL
         CLI   REPLY,X'7A'             Q. ENTRY = "LEFT"
         BE    PERFSHFT                   Y. PROCESS SHIFT
         CLI   REPLY,X'7B'             Q. ENTRY = "LEFT"
         BE    PERFSHFT                   Y. PROCESS SHIFT
         CLI   REPLY,X'F2'             Q. ENTRY = "REPEAT"
         BNE   TESTENT0                   N. BYPASS
TESTENT0 DS    0H
         MVC   STARGET,TARGET          SAVE  REPLY
         CLC   TARGET(L'REPLY-6),SPACES Q. NOTHING ENTERED
         BE    NEWDISPL                    Y. REDISPLAY
*---------------------------------------------------------------------*
TESTPREV DS    0H
         CLC   TARGET(5),=C'PREV '     Q. CALLING PROGRAM
         BNE   TESTNEXT                   N. TEST WHAT ENETERD
GETPREV  DS    0H
         L     R2,LCALSAVR             LOAD ADDRESS TO FIND ENTRY
         L     R2,4(R2)                POINT R2 TO CALLERS  CALLER
         LTR   R2,R2                   Q. BACKWARD POINTER
         BNZ   CGETPREV                   Y. GET PREVIOUS SAVEAREA
         MVC   SCRNMSG(43),=C'Reached the start of the programming chain
               n.'
         B     WRITE
CGETPREV DS    0H
         MVI   ORIGPROG,C'N'           TURN ORIGINAL PROGRAM FLAG OFF
         ST    R2,LCALSAVR             STORE AS NEW CALLER
         L     R2,4(R2)                POINT R2 TO CALLERS  CALLER
         L     R15,16(R2)              LOAD R15 WITH ENTRY POINT
         ST    R15,PROGADRS            STORE PROGRAM ENTRY
         ST    R15,PROGENTR            STORE PROGRAM ENTRY
         BAL   R14,POPREGS             GO POPULATE NEW REGISTERS
         XC    TDISP,TDISP             SET UP TOP SCREEN POSITION
         XC    FDISP,FDISP             SET UP END SCREEN POSITION
         XC    SDISP,SDISP             SET UP SHIFT DISPLACEMENT
         XC    FNDNEXTB,FNDNEXTB       CLEAR FIND NEXT BLOCK COUNTER
         B     WRITE                   GO DISPLAY REGISTERS
TESTNEXT DS    0H
         CLC   TARGET(5),=C'NEXT '     Q. CALLED PROGRAM
         BNE   TESTASTR                   N. NEXT TEST
GETNEXT  DS    0H
         L     R2,LCALSAVR             LOAD ADDRESS TO FIND ENTRY
         LR    R3,R2                   SAVE ADDRESS TO FIND ENTRY
         L     R2,8(R2)                POINT R2 TO CALLED PROGRAM
         LTR   R2,R2                   Q. BACKWARD POINTER
         BNZ   CGETNEXT                   Y. GET PREVIOUS SAVEAREA
         MVC   SCRNMSG(42),=C'Reached the end of the programming chain..
                '
         B     WRITE
CGETNEXT DS    0H
         MVI   ORIGPROG,C'N'           TURN ORIGINAL PROGRAM FLAG OFF
         ST    R2,LCALSAVR             STORE AS NEW CALLER
         L     R15,16(R3)              LOAD R15 WITH ENTRY POINT
         ST    R15,PROGADRS            STORE PROGRAM ENTRY
         XC    TDISP,TDISP             SET UP TOP SCREEN POSITION
         XC    FDISP,FDISP             SET UP END SCREEN POSITION
         XC    SDISP,SDISP             SET UP SHIFT DISPLACEMENT
         XC    FNDNEXTB,FNDNEXTB       CLEAR FIND NEXT BLOCK COUNTER
         BAL   R14,POPREGS             GO POPULATE NEW REGISTERS
         B     WRITE                   GO DISPLAY REGISTERS
TESTASTR DS    0H
         CLI   REPLY+6,C'*'            Q. SET HOME ADDRESS
         BNE   TESTHOME                   N. NEXT TEST
         CHHEXMAC LINE0402,#ROGADRS,8,SAVEDADR,MF=E
SAVEDADR DS    0H
*        MVC   #ROGADRS(4),PROGADRS    SAVE PROG ADDRESS
         MVC   #SDISP(4),SDISP         SAVE SIDE DISPLAY
         MVC   #TDISP(4),TDISP         SAVE TOP DISPLAY
         MVC   SCRNMSG(25),=C'New home address set to '''
         MVC   SCRNMSG+25(8),LINE0402  MOVE NEW HOME ADDRESS TO DISP
         MVC   SCRNMSG+33(2),=C'''.'   SET DELIMITER
         B     WRITE
TESTHOME DS    0H
         CLC   REPLY+6(2),=C'H '       Q. GOTO HOME
         BNE   TESTDIHM                   N. NEXT TEST
         MVC   PROGADRS(4),#ROGADRS    SAVE PROG ADDRESS
         XC    SDISP,SDISP             INITIALISE DISE DISP
         XC    TDISP,TDISP             INITIALISE TOP DISP
         BAL   R14,GOFORIT             REFORMAT SCREEN
         MVC   SCRNMSG(25),=C'Returned to home address.'
         B     WRITE
TESTDIHM DS    0H
         CLC   REPLY+6(2),=C'?*'       Q. GOTO HOME
         BNE   TESTCHNG                   N. NEXT TEST
         MVC   SCRNMSG(17),=C'Home address is '''
         HEXCHMAC #ROGADRS,SCRNMSG+17,4,MF=E
         MVC   SCRNMSG+25(2),=C'''.'   SET DELIMITER
         B     WRITE
         CLC   STRING(40),SPACES       Q. FIND STRING = SPACES
         BNE   CONTFIND                   N. FIND IT
         MVC   SCRNMSG(23),=C'Enter "F string" first.'
         B     WRITE
TESTCHNG DS    0H
         CLC   REPLY+6(4),=C'ZAP '     Q. CHANGE DATA
         BNE   TESTREGI                   N. NEXT TEST
         CLI   ORIGPROG,C'Y'           Q. ORIGINAL PROGRAM
         BE    ZAPREGS                    Y. YOU CAN ZAP REGS
         MVC   SCRNMSG(56),=C'Cannot ZAP registers once PREV/NEXT comma+
               nd''s been used.'
         B     WRITE
ZAPREGS  DS    0H
         CLI   REGDISP,C'N'            Q. NON REGISTER DISPLAY
         BE    CHANGEDT                   Y. CAN GO AND ZAP
         LA    R1,WORKAREA             ADDRESABILITY TO WORKAREA
         CALL  PROGDUMR                CALL CHANGE REGISTERS
         BAL   R14,POPREGS             REGISTER SAVE AREA
         B     WRITE
CHANGEDT DS    0H
         LA    R1,WORKAREA             ADDRESABILITY TO WORKAREA
         CALL  PROGDUMC                CALL CHANGE MODULE
         BAL   R14,GOFORIT             SET UP DATA DISPLAY
         B     WRITE                   DISPLAY NEW SCREEN
*---------------------------------------------------------------------*
TESTREGI DS    0H
         CLI   REPLY+6,C'R'            Q. REGISTER MAYBE
         BNE   TESTRACE                   N. NEXT TEST
         CLC   REPLY+7(2),=C'0 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'1 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'2 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'3 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'4 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'5 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'6 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'7 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'8 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'9 '       Q. SPECIFIC REGISTER
         BE    SINGREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'10'       Q. SPECIFIC REGISTER
         BE    DUBLREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'11'       Q. SPECIFIC REGISTER
         BE    DUBLREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'12'       Q. SPECIFIC REGISTER
         BE    DUBLREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'13'       Q. SPECIFIC REGISTER
         BE    DUBLREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'14'       Q. SPECIFIC REGISTER
         BE    DUBLREGS                   Y. PROCESS SINGLE REGISTER
         CLC   REPLY+7(2),=C'15'       Q. SPECIFIC REGISTER
         BNE   TESTRACE                   N. NEXT TEST
DUBLREGS DS    0H
         PACK  DWORK8(8),REPLY+7(2)    PACK DATA
         B     GETRDISP                GO GET DIOSPLACEMENT
SINGREGS DS    0H
         PACK  DWORK8(8),REPLY+7(1)    PACK DATA
GETRDISP DS    0H
         CLC   REPLY+6(5),=C'TRACE'    Q. CHANGE DATA
         CVB   R1,DWORK8               CONVERT TO BINARY
         MH    R1,=H'72'  <-----       MULTIPLY BY REG DIFF (COLOR)
*        MH    R1,=H'52'  <-----       MULTIPLY BY REG DIFF (MONO)
         LA    R2,REG0                 LOAD PROGRAM REGISTERS
         AR    R2,R1                   POINT TO REGISTER VALUE
         CHHEXMAC (R2),PROGADRS,8,DISPRVAL,MF=E
DISPRVAL DS    0H
         BAL   R14,GOFORIT             GET DATA
         B     WRITE                   DISPAY DATA
*---------------------------------------------------------------------*
TESTRACE DS    0H
         CLC   REPLY+6(5),=C'TRACE'    Q. CHANGE DATA
         BNE   TESTEXT@                   N. NEXT TEST
         MVI   TRACE,C'Y'              TURN TRACE ON
         MVC   SCRNMSG(16),=C'Trace turned On.'
         CLC   REPLY+12(3),=C'OFF'     Q. TURN TRACE OFF
         BNE   WRITE                      N. REDISPLAY
         MVI   TRACE,C'N'              TURN TRACE ON
         MVC   SCRNMSG(16),=C'Trace turned off.'
         B     WRITE                   DISPLAY NEW SCREEN
*---------------------------------------------------------------------*
TESTEXT@ DS    0H
         CLC   REPLY+6(3),=C'?X '      Q. DISPLAY EXIT ADDRESS
         BNE   TESTDEXT                   N. NEXT TEST
         MVC   SCRNMSG(17),=C'Exit address is '''
         HEXCHMAC PROGEXIT,SCRNMSG+17,4,MF=E
         MVC   SCRNMSG+25(2),=C'''.'   SET DELIMITER
         B     WRITE
TESTDEXT DS    0H
         CLC   REPLY+6(5),=C'EXIT '    Q. DISPLAY EXIT ADDRESS
         BNE   TESTART                    N. NEXT TEST
         CLI   PARTDISP,C'Y'           Q. PART DISPLAY ONLY
         BNE   POSTEXIT                   N. GET PREVIOUS PROGRAM
         MVC   SCRNMSG(43),=C'Cannot get program exit under part display
               y.'
         B     WRITE
POSTEXIT DS    0H
         L     R5,PROGEXIT             LOAD PROGRAM EXIT
         S     R5,PROGENTR             SUBTRACT PROGRAM ENTRY
         XR    R4,R4                   INITIALISE EVEN PAIR
         D     R4,=F'16'               DIVIDE BY LINE LENGTH
         ST    R4,SDISP                STORE REMAINDER UNDER SIDE DISP
         ST    R5,TDISP                STORE QUOTIENT UNDER TOP DISP
         MVC   PROGADRS(4),PROGENTR    MOVE PROGRAM ENTRY TO TOP
         BAL   R14,GOFORIT             POPULATE SCREEN
         B     WRITE
TESTART  DS    0H
         CLC   REPLY+6(5),=C'START'    Q. DISPLAY EXIT ADDRESS
         BNE   TESTFREC                   N. NEXT TEST
         MVC   PROGADRS(4),PROGENTR    MOVE PROGRAM ENTRY TO TOP
         BAL   R14,GOFORIT             POPULATE SCREEN
         B     WRITE
TESTFREC DS    0H
         CLC   REPLY+6(3),=C'?F '      Q. DISPLAY LAST FIND
         BNE   TESTABOV                   N. NEXT TEST
         CLC   DSTRING(8),SPACES       Q. HAVE CHANGES BEEN REQUESTED
         BE    NOFNDREQ                   N. ERROR
         MVC   ZCMD(2),=C'F '
         LA    R2,ZCMD+2               DESTINATION ADDRESS
         CLI   FINDTYPE,C'X'           Q. WAS FIND TYPE HEX
         BNE   FINDLOWR                   N. TEST FOR LOWER
         MVC   0(2,R2),=C'X'''         SET HEX INDICATOR
         LA    R2,2(R2)                POINT PAST HEX INDICATOR
         B     MOVEFNDC                GO MOVE FIND STRING
FINDLOWR DS    0H
         CLI   FINDTYPE,C'L'           Q. WAS FIND TYPE LOWER CASE
         BNE   MOVEFNDC                   N. GO MOVE FIND STRING
         MVC   0(3,R2),=C'LC'''        SET LOWER CASE INDICATOR
         LA    R2,3(R2)                POINT PAST LOWER CASE INDICATOR
MOVEFNDC DS    0H
         MVC   0(60,R2),DSTRING        MOVE FIND STRING
         B     WRITE#                  DISPLAY WITHOUT CLEARING ZCMD
NOFNDREQ DS    0H
         MVC   SCRNMSG(23),=C'Enter "F string" first.'
         B     WRITE
*---------------------------------------------------------------------*
TESTABOV DS    0H
         CLC   =C'ABOVE',REPLY+6       Q. CHANGE ADDRESS MODE TO BELOW
         BNE   TESTBELO                   N. NEXT TEST
         AMODECHG 31                   CHANGE TO 31 BIT ADDRESSING
         MVI   AMODE#,X'31'            SET 31 BIT ADDRESSING
         B     TELLCHAN                TELL OF CHANGE
TESTBELO DS    0H
         CLC   =C'BELOW',REPLY+6       Q. CHANGE ADDRESS MODE TO ABOVE
         BNE   TESTLIMT                   N. NEXT TEST
         AMODECHG 24                   CHANGE TO 24 BIT ADDRESSING
         MVI   AMODE#,X'24'            SET 24 BIT ADDRESSING
TELLCHAN DS    0H
         MVC   SCRNMSG(24),=C'Addressing mode changed.'
         B     WRITE                   GO TELL OF CHANGE
*---------------------------------------------------------------------*
TESTLIMT DS    0H
         CLC   REPLY+6(8),=C'FINDLIM ' Q. DISPLAY LAST FIND
         BNE   TESTCMDS                   N. NEXT TEST
         LA    R2,REPLY+14             POINT PAST FINDLIM
         LA    R9,60                   LOOP LIMIT
LIMLOP1  DS    0H
         CLI   0(R2),C' '              Q. SPACE
         BNE   LIMLOP1E                   N. EXIT LOOP
         LA    R2,1(R2)                POINT TO NEXT CHAR
         BCT   R9,LIMLOP1              LOOP TILL END
         B     INVLIMT1                GO TO INVALID LIMIT
LIMLOP1E DS    0H
         LR    R3,R2                   SAVE START OF LOOP
         XR    R7,R7                   INITIALISE LENGTH COUNTER
         LA    R9,4                    LOOP COUNTER
LIMLOP2  DS    0H
         CLI   0(R2),C' '              Q. SPACE
         BE    LIMLOP2E                   Y. EXIT LOOP
         CLI   0(R2),C'0'              Q. LESS THAN SPACE
         BE    INVLIMT2                   Y. EXIT LOOP
         LA    R2,1(R2)                POINT TO NEXT CHAR
         LA    R7,1(R7)                INCREMENT LENGTH
         BCT   R9,LIMLOP1              LOOP TILL END
LIMLOP2E DS    0H
         MVC   DWORK8(8),=C'00000000'  INITIALISE WORK AREA
         LA    R8,DWORK8+4             DESTINATION
         AR    R8,R9                   REPOSIT PTR IF NOT 4 BYTES
         EX    R7,MOVELIMT             MOVE LIMIT
         CVB   R3,DWORK8               CONVERT TO BINARY
         C     R3,=F'1000'             Q. > 1000
         BH    INVLIMT3                   Y. DISPLAY INVALID LIMIT
         C     R3,=F'1'                Q. < 1
         BL    INVLIMT3                   Y. DISPLAY INVALID LIMIT
         SLL   R3,12                   MULTIPLY BY 4096
         ST    R3,FNDINCR              STORE FIND INCREMENT
         MVC   SCRNMSG(39),=C'Find limit increased to ........ bytes.'
         UNPACK R3,8,SCRNMSG+24,MF=E   UNPACK NEW VALUE TO MESSAGE
         B     WRITE
INVLIMT1 DS    0H
         MVC   SCRNMSG(19),=C'"FINDLIM" parameter'
         MVC   SCRNMSG+20(18),=C'requires an entry.'
         B     WRITE
INVLIMT2 DS    0H
         MVC   SCRNMSG(19),=C'"FINDLIM" parameter'
         MVC   SCRNMSG+20(16),=C'must be numeric.'
         B     WRITE
INVLIMT3 DS    0H
         MVC   SCRNMSG(40),=C'"FINDLIM" must be in the range 0 - 1000.'
         B     WRITE
*---------------------------------------------------------------------*
MOVELIMT MVC   0(0,R8),0(R3)           MOVE LIMIT
*---------------------------------------------------------------------*
TESTCMDS DS    0H
         CLI   REPLY+6,C'.'            Q. COMMAND REQUEST
         BNE   TESTADRS                   N. BYPASS
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMO                CALL TUTORIAL PROGRAM
         CLI   RCODE,C'8'              Q. SEVER ERROR CODE RETURNED
         BE    WRITE                      Y. TELL OF ERROR
*---------------------------------------------------------------------*
TESTADRS DS    0H
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMI                CALL ADDRESS PARSER MODULE
         CLI   RCODE,C'8'              Q. SEVER ERROR CODE RETURNED
         BE    WRITE                      Y. TELL OF ERROR
GOPHERIT DS    0H
         XC    TDISP,TDISP             INITIALISE TOP DISPLACEMENT
         XC    SDISP,SDISP             INITIALISE SIDE DISPLACEMENT
         BAL   R14,GOFORIT             SET UP DATA DISPLAY
         B     WRITE                   DISPLAY NEW SCREEN
*---------------------------------------------------------------------*
TESTNXTI DS    0H
INVALOPT DS    0H
         MVC   SCRNMSG(15),=C'Invalid option.'
         B     WRITE                   GO TELL OF ERROR ENTRY
PERFSCRL DS    0H
         BAL   R14,SCROLLIT            REPOPULATE THE SCREEN
         B     TRTNRET                 GO TEST RETURN FROM ROUTINE
PERFSHFT DS    0H
         BAL   R14,SHIFTIT             REPOPULATE THE SCREEN
         B     TRTNRET                 GO TEST RETURN FROM ROUTINE
TRTNRET  DS    0H
         CLI   RCODE,C'0'              Q. ZERO RETURN CODE
         BNE   WRITE                      N. TELL OF ERROR
NEWDISPL DS    0H
         BAL   R14,GOFORIT             REPOPULATE THE SCREEN
         B     WRITE                   GO DISPLAY THE SCREEN
RETMAIN0 DS    0H
         LM    R0,R14,SAVSUB11         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
INITPROG DS    0H
         STM   R0,R14,SAVSUB11         STORE CALLERS REGISTERS
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*                                                                     *
*        CONTROL GETS HERE IF THE CICS'S ASCB WAS FOUND.              *
*        THIS IS WHERE THE CORE GOT IS FORMATTED AND OUTPUT TO        *
*        THE SCREEN.                                                  *
*                                                                     *
*---------------------------------------------------------------------*
         MVC   SCRNMSG,SPACES          CLEAR MESSAGE AREA
*        MVI   CURTIME+2,C':'          INSERT DELIMITER
*        MVI   CURTIME+5,C':'          INSERT DELIMITER
*---------------------------------------------------------------------*
*        CALCULATE TIME FOR DISPLAY                                   *
*---------------------------------------------------------------------*
         TIME  DEC                     GET TIME  => IN R0
         ST    R0,TARGET+20            SAVE TIME IN FULLWORD
         HEXCHMAC TARGET+20,TARGET,3,MF=E
         MVC   CURTIME(2),TARGET       INSERT HH
         MVC   CURTIME+3(2),TARGET+2   INSERT MM
         MVC   CURTIME+6(2),TARGET+4   INSERT SS
         BAL   R14,PROGSTRT            GET START OF PROGRAM
*---------------------------------------------------------------------*
RETMAINI DS    0H
         LM    R0,R14,SAVSUB11         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
PROGSTRT DS    0H
*---------------------------------------------------------------------*
* GET ENTRY POINT OF CALLING PROGRAM:                                 *
*   IF THE ASSUMED CONVENTIONS ARE FOLLOWED                           *
*   1. 8(R13) => CALLERS SAVEAREA                                     *
*   2. 8(R13) OF CALLERS SAVEAREA => CALLER'S CALLER'S SAVEAREA       *
*      IN WHICH 16 INTO AREA IS R15 WHICH ON A BALR R14,R15           *
*      SHOULD BE THE ENTRY POINT TO THE CALLING PROGRAM.              *
*---------------------------------------------------------------------*
         STM   R0,R14,SAVSUB12         STORE CALLERS REGISTERS
         XC    TDISP,TDISP             SET UP TOP SCREEN POSITION
         XC    FDISP,FDISP             SET UP END SCREEN POSITION
         XC    SDISP,SDISP             SET UP SHIFT DISPLACEMENT
         XC    #TDISP,#TDISP           SAVE TOP SCREEN POSITION
         XC    #SDISP,#SDISP           SAVE UP SHIFT DISPLACEMENT
         XC    FNDNEXTB,FNDNEXTB       CLEAR FIND NEXT BLOCK COUNTER
         L     R2,4(R13)               POINT R2 TO CALLERS SAVEAREA
         ST    R2,LCALSAVR             ST PTR TO CALLERS SAVEAREA
         L     R15,12(R10)             LOAD EXIT ADDRESS
         ST    R15,PROGEXIT            STORE EXIT ADDRESS
         LH    R1,PMESL                LOAD PARAMETER MESSAGE LENGTH
         LTR   R1,R1                   Q. ANY MESSAGE
         BZ    NOPARMSG                   N. BYPASS
         BCTR  R1,0                    RELATIVE LENGTH
         EX    R1,MOVEPMES             MOVE PARAMETER MESSAGE
         B     NOPARMSG                BYPASS EX COMMAND
MOVEPMES MVC   SCRNMSG(0),PMESS        MOVE PARAMETER MESSAGE
NOPARMSG DS    0H
         CLC   0(4,R10),=C'DATA'       Q. ANY PARAMETERS PASSED
         BNE   FULLDISP                   N. FULL DISPLAY
         MVI   PARTDISP,C'Y'           SET PART DISPLAY ON
         L     R15,4(R10)              LOAD ENTRY TO CALLERS PROG
         ST    R15,PROGADRS            STORE CALLERS ENTRY
         ST    R15,#ROGADRS            STORE CALLERS ENTRY
         ST    R15,PROGENTR            STORE PROGRAM ENTRY
         A     R15,8(R10)              LOAD LENGTH OF ASKED DATA
         ST    R15,LDISP               STORE CALLERS LENGTH
         MVC   LDISP(4),=X'7FFFFFFF'    <-----
         L     R15,8(R10)              LOAD LENGTH OF ASKED DATA
         ST    R15,DATALEN             STORE DATA LENGTH
         MVC   DATALEN(4),=X'7FFFFFFF'    <-----
         BAL   R14,POPREGS             REGISTER SAVE AREA
         B     RETMAIN1                EXIT ROUTINE
FULLDISP DS    0H
         MVI   PARTDISP,C'N'           SET PART DISPLAY OFF
         L     R2,4(R2)                POINT R2 TO CALLERS CALLERS
         L     R15,16(R2)              LOAD ENTRY TO CALLERS PROG
         ST    R15,PROGADRS            STORE CALLERS ENTRY
         ST    R15,#ROGADRS            STORE CALLERS ENTRY
         ST    R15,PROGENTR            STORE PROGRAM ENTRY
         MVC   LDISP(4),=X'7FFFFFFF'   STORE HIGH VALUES IN MAX LENGTH
         BAL   R14,POPREGS             REGISTER SAVE AREA
RETMAIN1 DS    0H
         LM    R0,R14,SAVSUB12         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
POPREGS  DS    0H
*---------------------------------------------------------------------*
* CONVERT THE REGISTERS TO SCREEN OUTPUT                              *
*   ASSUMES THE CONVENTIONS OF:                                       *
*   1. STM   R14,R12,12(R13)                                          *
*   2. 4(R13) => FORWARD LINK                                         *
*   2. 8(R13) => BACKWARD LINK                                        *
*---------------------------------------------------------------------*
         STM   R0,R14,SAVSUB13         STORE CALLERS REGISTERS
         NI    LCALSAVR,X'7F'          TURN MOST SINIFICANT BIT OFF
         MVI   REGDISP,C'Y'            SET REGISTER DISPLAY FLAG
*---------------------------------------------------------------------*
         CLI   ORIGPROG,C'Y'           Q. ORIGINAL PROGRAM
         BNE   OTHERPRG                   N. GET REGS FROM R13 SAVEAREA
*---------------------------------------------------------------------*
INITLPRG DS    0H
         LA    R5,16                   LOOP COUNTER
         LA    R2,REG0                 R0 DESTINATION
         LA    R6,PREGS                POINT TO R0 SAVEAREA
REGLOP1  DS    0H
         HEXCHMAC 0(R6),0(R2),4,MF=E
         LA    R6,4(R6)                POINT TO NEXT REG SAVEAREA
         LA    R2,72(R2) <-----  COLOR NEXT REG DESTINATION
*        LA    R2,52(R2) <-----  MONO  NEXT REG DESTINATION
         BCT   R5,REGLOP1              LOOP TILL END
         B     MOVEREGS                GO MOVE REGISTER SCREEN
*---------------------------------------------------------------------*
OTHERPRG DS    0H
         L     R2,LCALSAVR             PTR CALLERS SAVEAREA ADDR (R13)
         HEXCHMAC LCALSAVR,REG13,4,MF=E
         HEXCHMAC 16(R2),REG15,4,MF=E
         HEXCHMAC 12(R2),REG14,4,MF=E
         CLC   REG14,REG15             Q. THIS REGISTER USED AS BASE
         BNE   NOTBASE                    N. BYPASS
NOTBASE  DS    0H
         LA    R6,20(R2)               POINT TO R0 SAVEAREA
         LA    R5,13                   LOOP COUNTER
         LA    R2,REG0                 R0 DESTINATION
REGLOP2  DS    0H
         HEXCHMAC 0(R6),0(R2),4,MF=E
         LA    R6,4(R6)                POINT TO NEXT REG SAVEAREA
         LA    R2,72(R2) <-----  COLOR NEXT REG DESTINATION
*        LA    R2,52(R2) <-----  MONO  NEXT REG DESTINATION
         BCT   R5,REGLOP2              LOOP TILL END
*---------------------------------------------------------------------*
MOVEREGS DS    0H
         CLEARV  LINE0402,MF=E          CLEAR
         LA    R2,LINE0402             DESTINATION ADDRESS
         LA    R3,SCRSZ1               LENGTH OF MOVE
         LA    R4,PROGDMP1             SOURCE ADDRESS
         LA    R5,SCRSZ1               SOURCE LENGTH
         ICM   R5,B'1000',SPACES       PAD CHARACTER
         MVCL  R2,R4                   MOVE DATA TO DISPLAY
         LA    R1,SCRSZ2A              LOAD SCREEN SIZE PART 1
         LA    R1,SCRSZ1(R1)           LOAD SCREEN SIZE PART 2
         STH   R1,SCRNSIZE             STORE SCREEN SIZE
RETMAIN2 DS    0H
         LM    R0,R14,SAVSUB13         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
DISPSCRN DS    0H
*---------------------------------------------------------------------*
* DISPLAY THE SCREEN AND GET THE RETURN                               *
*---------------------------------------------------------------------*
         STM   R0,R14,SAVSUB13         RESTORE CALLERS REGISTERS
*---------------------------------------------------------------------*
*        CALCULATE TIME FOR DISPLAY                                   *
*---------------------------------------------------------------------*
         TIME  DEC                     GET TIME  => IN R0
         ST    R0,TARGET+20            SAVE TIME IN FULLWORD
         HEXCHMAC TARGET+20,TARGET,3,MF=E
         MVC   CURTIME(2),TARGET       INSERT HH
         MVC   CURTIME+3(2),TARGET+2   INSERT MM
         MVC   CURTIME+6(2),TARGET+4   INSERT SS
         LA    R2,PROGDMP2             SCREEN ADDRESS
         LH    R3,SCRNSIZE             LOAD SCREEN SIZE
*<-----  BAL   R14,TPUTSCR             CALL TPUT ROUTINE
         CLEARV  REPLY,MF=E,PAD=00
         CLI   FOVERF,C'N'             Q. NO OVERLAY
         BE    BYPASFO                    Y. BYPASS OVERLAY
         CLI   FOVERF,C'Y'             Q. OVERLAY ON
         BNE   OVERLON                    N. SET OVERLAY OFF
         LA    R2,SCREENOX             SCREEN ADDRESS
         LA    R3,LSCROX               LOAD SCREEN SIZE
*<-----  BAL   R14,TPUTSCR             CALL TPUT ROUTINE
         B     BYPASFO                 BYPASS OVERLAY OFF
OVERLON  DS    0H
         LA    R2,SCREENBX             SCREEN ADDRESS
         LA    R3,LSCRBX               LOAD SCREEN SIZE
*<-----  BAL   R14,TPUTSCR             CALL TPUT ROUTINE
BYPASFO  DS    0H
*<-----  MVI   TARGET,C'O'             SET OVERLAY INDICATOR
*<-----  LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
*<-----  CALL  PROGDUMS                CALL COMMAND STACK ROUTINE
         BAL   R14,TPUTSCR             CALL TPUT ROUTINE
         LA    R2,REPLY                REPLY ADDRESS
         LA    R3,L'REPLY              REPLY LENGTH
         BAL   R14,TGETSCR             GET REPLY TO TPUT
         MVC   LCFIND(60),REPLY+8
         OC    REPLY(L'REPLY-6),SPACES LOWER TO UPPER
         MVC   TARGET(L'REPLY-6),REPLY+6
         MVC   SCRNMSG,SPACES          MOVE SPACES TO MESSAGE AREA
RETMAIN3 DS    0H
         MVI   WAITR,C'Y'              SET WAIT FOR REPLY ON
         LM    R0,R14,SAVSUB13         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
GOFORIT  DS    0H
         STM   R0,R14,SAVSUB13         RESTORE CALLERS REGISTERS
*---------------------------------------------------------------------*
* POPULATE MAIN SCREEN                                                *
*---------------------------------------------------------------------*
         MVI   REGDISP,C'N'            SET REGISTER DISPLAY FLAG OFF
         LA    R1,SCRSZ2               LENGTH OF SCREEN2
         BCTR  R1,0                    DECREASE LENGTH BY 1
         STH   R1,SCRNSIZE             STORE LENGTH OF SCREEN1
*---------------------------------------------------------------------*
         LH    R3,USCRSIZE             LOAD # OF OUTPUT LINES
         L     R6,PROGADRS             LOAD PROGRAM ENTRY
         L     R1,TDISP                LOAD TOP DISPLACEMENT
         SLL   R1,4                    MULTIPLY BY 16
         A     R1,SDISP                ADD SHIFT DISPOSITION
         AR    R6,R1                   INCREMENT BY DISPLACEMENT
         CLI   STACKEDF,C'Y'           Q. STACKED FLAG SET
         BE    BYPTRAC1                   Y. BYPASS COMMAND TRACE
         MVI   TARGET,C'N'             SET NEW @ INDICATOR
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMS                CALL COMMAND STACK ROUTINE
BYPTRAC1 DS    0H
         XR    R8,R8                   MOVE COUNT
         CLEARV  LINE0402,MF=E          CLEAR OUTPUT AREA
         LA    R2,LINE0402             R2 POINTS TO OUTPUT AREA
*---------------------------------------------------------------------*
* PREPARE FOR "ESTAE" WHEN END OF ADDRESS SPACE IS REACHED.           *
*---------------------------------------------------------------------*
         STM   R10,R13,BASES#1         STORE MAIN REGISTERS
         LA    R1,ESTAEOF1             RETURN ADDRESS
         ST    R1,ESTAERTN             STORE RETURN ADDRESS
         LA    R5,PROCESTA
         ESTAE (5)                     TRAP "ABEND"
         MVI   RCODE,C'0'              SET ZERO REURN CODE
LOOP1    DS    0H
         LA    R1,16(R6)               END OF TOP LINE BEING DISPLAYED
         C     R1,LDISP                Q. LAST LINE TO BE DISPLAYED
         BL    CONTMOV1                   N. CONTINUE
         CLC   SCRNMSG,SPACES          Q. MESSAGE ALREADY SET UP
         BE    FILLSCRE                   Y. EXIT LOOP WITH OLD MSG
         MVC   SCRNMSG(33),=C'End reached of selective display.'
         B     FILLSCRE                EXIT LOOP
CONTMOV1 DS    0H
         BAL   R14,MOV1LINE
         CLI   RCODE,C'0'              Q. ZERO RETURN CODE
         BNE   FILLSCRE                   N. EXIT LOOP
         LA    R6,16(R6)               POINT TO NEXT LOT OF DATA
         LA    R2,80(R2)               POINT TO NEXT SCREEN LINE
         LA    R8,1(R8)                UP MOVE COUNT BY 1
         BCT   R3,LOOP1                LOOP UNTIL SCREEN BUILT
*---------------------------------------------------------------------*
FILLSCRE DS    0H
         ESTAE 0                       TURN ESTAE OFF
         CLI   RCODE,C'E'              Q. ESTAE ROUTINE ENTERED
         BNE   NOESTAE1                   N. BYPASS
         MVC   SCRNMSG(72),=C'ESTAE routine entered. Most probably inval
               lid address ........ requested.'
         HEXCHMAC PROGADRS,SCRNMSG+53,4,MF=E
*        MVC   PROGADRS(4),#ROGADRS    RESTORE FROM LAST HOME
NOESTAE1 DS    0H
*---------------------------------------------------------------------*
         L     R1,TDISP                LOAD TOP DISPLACEMENT
         AR    R1,R8                   ADD NUMBER OF LINES MOVED
         C     R1,FDISP                Q. NEW END OF DISPLAY
         BNH   RETMAIN4                   N. BYPASS
         ST    R1,FDISP                STORE NEW FINAL DISPLAY
RETMAIN4 DS    0H
         LM    R0,R14,SAVSUB13         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
MOV1LINE DS    0H
         STM   R0,R14,SAVSUB14         STORE CALLERS REGISTERS
*---------------------------------------------------------------------*
* POPULATE MAIN SCREEN WITH ONE LINE OF DATA                          *
*---------------------------------------------------------------------*
         ST    R6,FULLWORD             STORE IN FULLWORD
         HEXCHMAC FULLWORD,0(R2),4,MF=E
         L     R1,TDISP                TOP LINE BEING DISPLAYED
         AR    R1,R8                   ADD LINE # IN THIS SCREEN
         SLL   R1,4                    MULTIPLY BY 16
         A     R1,SDISP                ADD SHIFT DISPLACEMENT
         ST    R1,FULLWORD             STORE IN HALFWORD
         HEXCHMAC FULLWORD+1,09(R2),3,MF=E
         HEXCHMAC 0(R6),TARGET,16,MF=E
         MVC   16(8,R2),TARGET         DISPALY TRAGET IN 4 BLOCKS
         MVC   25(8,R2),TARGET+8           OF 4 BYTES
         MVC   34(8,R2),TARGET+16
         MVC   43(8,R2),TARGET+24
         MVI   52(R2),C'*'             SET * AS BOUNDARY FOR CHAR DISP
         MVI   69(R2),C'*'             SET * AS BOUNDARY FOR CHAR DISP
         MVC   53(16,R2),0(R6)         TRANSLATE DATA FOR CHAR DISPLAY
         TR    53(16,R2),TRTABLE          ON RHS OF SCREEN
*---------------------------------------------------------------------*
ESTAEOF1 DS    0H
         CLI   RCODE,C'8'              Q. ENTERED ESTAE ROUTINE
         BNE   RETMAIN5                   N. BYPASS MESSAGE SETUP
         MVC   SCRNMSG(29),=C'End of address space reached.'
RETMAIN5 DS    0H
         LM    R0,R14,SAVSUB14         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
SCROLLIT DS    0H
         STM   R0,R14,SAVSUB12         STORE CALLERS REGISTERS
         MVI   RCODE,C'0'              SET ZERO RETURN CODE
*---------------------------------------------------------------------*
* TEST SCROLL AMOUNT                                                  *
*---------------------------------------------------------------------*
         CLI   0(R7),X'00'             Q. SCROLL AMOUNT MISSING
         BE    NOSCRLAM                   N. TEST UP INPUT EXPLICITLY
         CLI   0(R7),C' '              Q. SCROLL AMOUNT MISSING
         BNE   MAXMSCRL                   N. TEST UP INPUT EXPLICITLY
*---------------------------------------------------------------------*
NOSCRLAM DS    0H
         MVC   TARGETX(2),REPLY+1      MOVE CURSOR POS TO SOURCE
         FBA   TARGETX,TARGETX+4       GET CURSOR POSITION IN HEX
         LH    R1,TARGETX+4            MOVE CURSOR LINE TO R9
         CLC   TARGETX+4(2),=H'5'      Q. IS CURSOR BEFORE LINE 5
         BL    SCRNSCRL                   Y. FULL SCREEN SCROLL
         CLC   TARGETX+4(2),=H'23'     Q. IS CURSOR AFTER LINE 23
         BH    SCRNSCRL                   Y. FULL SCREEN SCROLL
         LH    R9,TARGETX+4            MOVE CURSOR LINE TO R9
         SH    R9,=H'4'                SUBTRACT NON DATA LINES
         CLI   REPLY,X'F8'             Q. SCROLL FORWARD
         BE    CALCSCRL                   Y. CONTINUE
         MH    R9,=H'-1'               N. NEGATE
         AH    R9,USCRSIZE             ADD LENGTH OF SCREEN
         BCTR  R9,0                    DECREMENT BY 1
         B     CALCSCRL                CALCULATE NEW TOP LINE
*---------------------------------------------------------------------*
SCRNSCRL DS    0H                      FULL SCREEN SCROLL
         LH    R9,USCRSIZE             LOAD LENGTH OF SCREEN
         B     CALCSCRL
MAXMSCRL DS    0H
         CLC   0(2,R7),=C'M '          Q. SCROLL MAX
         BNE   SCRL1CHR                   N. CALC SCROLL
         CLI   REPLY,X'F7'             Q. SCROLL BACKWARDS
         BNE   MAXSDOWN                   N. SCROLL FORWARDS MAX
MAXSUP   DS    0H
         XC    TDISP,TDISP             SET DISPLACEMENT TO TOP
         XC    SDISP,SDISP             POSITION TO TOP
         XC    FNDNEXTB,FNDNEXTB       CLEAR FIND NEXT BLOCK COUNTER
         B     RETMAIN6                GO FOR IT
MAXSDOWN DS    0H
         L     R8,FDISP                LOAD LAST LINE # GOT
         SH    R8,USCRSIZE             SUBTRACT ONE SCREEN FULL
         ST    R8,TDISP                STORE IT AS NEW TOP DISPLAY
         B     RETMAIN6                RECALC + DISPLAY
SCRL1CHR DS    0H
         XR    R8,R8                   CLEAR R8
         CLI   1(R7),C' '              Q. CHAR 2 SPACE
         BNE   SCRL2CHR                   N. AT LEAST 2 CAHRS ENTERED
         CLI   0(R7),C'0'              Q. IS CHAR < 0
         BL    INVSCRL                    Y. INVALID CHAR
         IC    R8,0(R7)                   Y. MOVE 1 CHAR
         B     EXPDSCRL                EXPAND SCROLL AMOUNT
SCRL2CHR DS    0H
         CLI   2(R7),C' '              Q. CHAR 3 SPACE
         BNE   SCRL3CHR                   N. 3 CAHRS ENTERED
         CLI   0(R7),C'0'              Q. IS CHAR < 0
         BL    INVSCRL                    Y. INVALID CHAR
         CLI   1(R7),C'0'              Q. IS CHAR < 0
         BL    INVSCRL                    Y. INVALID CHAR
         ICM   R8,3,0(R7)                 Y. MOVE 2 CHAR
         B     EXPDSCRL                EXPAND SCROLL AMOUNT
SCRL3CHR DS    0H
         CLI   0(R7),C'0'              Q. IS CHAR < 0
         BL    INVSCRL                    Y. INVALID CHAR
         CLI   1(R7),C'0'              Q. IS CHAR < 0
         BL    INVSCRL                    Y. INVALID CHAR
         CLI   2(R7),C'0'              Q. IS CHAR < 0
         BL    INVSCRL                    Y. INVALID CHAR
         ICM   R8,7,0(R7)                 Y. MOVE 3 CHAR
EXPDSCRL DS    0H
         ST    R8,FULLWORD             STORE CHARS MOVED
         PACK  DWORK8(8),FULLWORD+1(3) PACK
         CVB   R9,DWORK8               CONVERT TO BINARY
CALCSCRL DS    0H
TESTPF8  DS    0H
         CLI   REPLY,X'F7'             Q. SCROLL FORWARDS
         BE    TESTPF7                    N. GO TO "DOWN"
         A     R9,TDISP                ADD SCROLL AMT TO TOP DISPLMT
         ST    R9,TDISP                SAVEIT
         SH    R9,USCRSIZE             SUBTRACT ONE SCREEN FULL
         C     R9,FDISP                Q. NEW TOP > # GOT
         BNH   RETMAIN6                   N. SCROLL FORWARD
         CLI   PARTDISP,C'N'           Q. PART DISPLAY
         BE    FULLSCRL                   N. FULL SCROLL
         MVC   SCRNMSG(22),=C'*** BOTTOM OF PAGE ***'
         B     RETMAIN6                WRITE
FULLSCRL DS    0H
         MVC   SCRNMSG(26),=C'*** NEW BOTTOM OF PAGE ***'
         B     RETMAIN6                WRITE
TESTPF7  DS    0H
         L     R8,TDISP                GET TOP DISPLACEMENT
         CR    R8,R9                   Q. SCROLL >  TOP DISPLACEMENT
         BL    GOTOTOP                    Y. GO TO TOP
         SR    R8,R9                      N. SUBTRACT SCROLL FROM TOP
         ST    R8,TDISP                SAVE NEW DISPLACEMENT
         B     RETMAIN6                GO FOR IT
GOTOTOP  DS    0H
         XC    TDISP,TDISP             POSITION TO TOP
         XC    SDISP,SDISP             POSITION TO TOP
         XC    FNDNEXTB,FNDNEXTB       CLEAR FIND NEXT BLOCK COUNTER
         B     RETMAIN6                GO FOR IT
INVSCRL  DS    0H
         MVC   SCRNMSG(22),=C'Invalid scroll amount.'
         MVI   RCODE,C'8'              SET ERROR RETURN CODE
*---------------------------------------------------------------------*
RETMAIN6 DS    0H
         LM    R0,R14,SAVSUB12         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
SHIFTIT  DS    0H
         STM   R0,R14,SAVSUB12         STORE CALLERS REGISTERS
         MVI   RCODE,C'0'              SET ZERO RETURN CODE
*---------------------------------------------------------------------*
* TEST SHIFT AMOUNT                                                   *
*---------------------------------------------------------------------*
         CLI   0(R7),C' '              Q. SHIFT AMOUNT MISSING
         BE    INVSHIFT                   Y. ERROR
         B     SHFT1CHR                GO TEST IF SHIFT 1 CHAR
*---------------------------------------------------------------------*
         MVC   TARGETX+1(2),REPLY+1    MOVE CURSOR POS TO SOURCE
         MVI   TARGETX,X'11'           MOVE SBA TO FIRST BYTE
         FBA   TARGETX,TARGETX+4,X     GET CURSOR POSITION IN HEX
         LH    R1,TARGETX+4            MOVE CURSOR LINE TO R9
         CLC   TARGETX+4(2),=H'5'      Q. IS CURSOR BEFORE LINE 5
         BL    SCRNSHFT                   Y. FULL SCREEN SCROLL
         CLC   TARGETX+4(2),=H'23'     Q. IS CURSOR AFTER LINE 23
         BH    SCRNSHFT                   Y. FULL SCREEN SCROLL
         LH    R9,TARGETX+4            MOVE CURSOR LINE TO R9
         SH    R9,=H'4'                SUBTRACT NON DATA LINES
         CLI   REPLY,X'F8'             Q. SCROLL FORWARD
         BE    CALCSHFT                   Y. CONTINUE
         MH    R9,=H'-1'               N. NEGATE
         AH    R9,USCRSIZE             ADD LENGTH OF SCREEN
         BCTR  R9,0                    DECREMENT BY 1
         B     CALCSHFT                CALCULATE NEW TOP LINE
*---------------------------------------------------------------------*
SCRNSHFT DS    0H                      FULL SCREEN SCROLL
         LA    R9,16                   LOAD LENGTH OF LINE
         B     CALCSHFT
MAXMSHFT DS    0H
         CLC   0(2,R7),=C'M '          Q. SCROLL MAX
         BNE   SHFT1CHR                   N. CALC SCROLL
         CLI   REPLY,X'7A'             Q. SCROLL BACKWARDS
         BNE   MAXSRIGH                   N. SCROLL FORWARDS MAX
MAXSLFT  DS    0H
         XC    TDISP,TDISP             SET DISPLACEMENT TO TOP
         XC    SDISP,SDISP             SET SHIFT TO "COL 1"
         XC    FNDNEXTB,FNDNEXTB       CLEAR FIND NEXT BLOCK COUNTER
         B     RETMAIN7                GO FOR IT
MAXSRIGH DS    0H
         MVC   TDISP,FDISP             SET DISPLACEMENT TO LAST LINE
         XC    SDISP,SDISP             SET SHIFT TO "COL 1"
         B     RETMAIN7                RECALC + DISPLAY
SHFT1CHR DS    0H
         XR    R8,R8                   CLEAR R8
         CLI   1(R7),C' '              Q. CHAR 2 SPACE
         BNE   SHFT2CHR                   N. AT LEAST 2 CAHRS ENTERED
         CLI   0(R7),C'0'              Q. IS CHAR < 0
         BL    INVSHIFT                   Y. INVALID CHAR
         IC    R8,0(R7)                   Y. MOVE 1 CHAR
         B     EXPDSHFT                EXPAND SCROLL AMOUNT
SHFT2CHR DS    0H
         CLI   2(R7),C' '              Q. CHAR 3 SPACE
         BNE   SHFT3CHR                   N. 3 CAHRS ENTERED
         CLI   0(R7),C'0'              Q. IS CHAR < 0
         BL    INVSHIFT                   Y. INVALID CHAR
         CLI   1(R7),C'0'              Q. IS CHAR < 0
         BL    INVSHIFT                   Y. INVALID CHAR
         ICM   R8,3,0(R7)                 Y. MOVE 2 CHAR
         B     EXPDSHFT                EXPAND SCROLL AMOUNT
SHFT3CHR DS    0H
         CLI   0(R7),C'0'              Q. IS CHAR < 0
         BL    INVSHIFT                   Y. INVALID CHAR
         CLI   1(R7),C'0'              Q. IS CHAR < 0
         BL    INVSHIFT                   Y. INVALID CHAR
         CLI   2(R7),C'0'              Q. IS CHAR < 0
         BL    INVSHIFT                   Y. INVALID CHAR
         ICM   R8,7,0(R7)                 Y. MOVE 3 CHAR
EXPDSHFT DS    0H
         ST    R8,FULLWORD             STORE CHARS MOVED
         PACK  DWORK8(8),FULLWORD+1(3) PACK
         CVB   R9,DWORK8               CONVERT TO BINARY
CALCSHFT DS    0H
TESTPF11 DS    0H
         LA    R3,16                   # CHARS PER LINE
         XR    R8,R8                   CLEAR EVEN REGISTER
         DR    R8,R3                   DIVIDE BY # CHARS PER LINE
         CLI   REPLY,X'7A'             Q. SHIFT LEFT
         BE    TESTPF10                   Y. PROCESS SHIFT LEFT
         LR    R4,R9                   STORE QUOTIENT
         LR    R9,R8                   MOVE REM TO QUOTIENT
         A     R9,SDISP                ADD CURRENT SHIFT DISPLACEMENT
         XR    R8,R8                   CLEAR EVEN REGISTER
         DR    R8,R3                   DIVIDE BY CHARS PER LINE
         AR    R9,R4                   ADD SAVED QUOTIENT
         A     R9,TDISP                ADD #LINES TO SHIFT TO TOP
         ST    R9,TDISP                SAVE NEW TOP
         ST    R8,SDISP                SAVE NEW SIDE
         SH    R9,USCRSIZE             SUBTRACT ONE SCREEN FULL
         C     R9,FDISP                Q. NEW TOP > # GOT
         BNH   RETMAIN7                   N. SCROLL FORWARD
         CLI   PARTDISP,C'N'           Q. PART DISPLAY
         BE    FULLSHFT                   N. FULL SHIFT
         MVC   SCRNMSG(22),=C'*** BOTTOM OF PAGE ***'
         B     RETMAIN6                WRITE
FULLSHFT DS    0H
         MVC   SCRNMSG(26),=C'*** NEW BOTTOM OF PAGE ***'
         B     RETMAIN7                WRITE
TESTPF10 DS    0H
         L     R6,TDISP                LOAD TOP DISPLACEMENT
         L     R7,SDISP                LOAD SIDE DISPLACEMENT
         SR    R6,R9                   DECREMENT TOP DISP BY QUOTIENT
         CR    R7,R8                   Q. NEW SIDE 'GE' OLD
         BNL   NOLCOMP                    Y. BYPASS COMPENSATION
         LA    R7,16(R7)               ADD 1 LINES WORTH OF DISP
         BCTR  R6,0                    COMPENSATE FOR ABOVE IN TOP DISP
NOLCOMP  DS    0H
         SR    R7,R8                   GET NEW SIDE DISPLACEMENT
         C     R6,=F'0'                Q. LINES TO SHIFT PAST TOP
         BNH   SHIFTOP                    Y. GO TO TOP
         ST    R6,TDISP                STORE NEW TOP DISP
         ST    R7,SDISP                STORE NEW SIDE DISP
         B     RETMAIN7                GO FOR IT
SHIFTOP  DS    0H
         XC    TDISP,TDISP             POSITION TO TOP
         XC    SDISP,SDISP             POSITION TO TOP
         XC    FNDNEXTB,FNDNEXTB       CLEAR FIND NEXT BLOCK COUNTER
         B     RETMAIN7                GO FOR IT
INVSHIFT DS    0H
         MVC   SCRNMSG(21),=C'Invalid shift amount.'
         MVI   RCODE,C'8'              SET ERROR RETURN CODE
*---------------------------------------------------------------------*
RETMAIN7 DS    0H
         LM    R0,R14,SAVSUB12         RESTORE CALLERS REGISTERS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
*=====================================================================*
*=====================================================================*
TPUTSCR  DS    0H
         ST    R14,R14SAVER            STORE RETURN ADDRESS
         CLC   LINE0401(4),SPACES      Q. LINE 4 COL 1 BEEN CLOBERED
         BNE   L0401OK                    N. BYPASS
         MVC   LINE0401,LIN#0401       FIX IT UP
         MVC   SCRNMSG+63(16),=C'L0401 corrected.'
L0401OK  DS    0H
         MVI   TARGET,C'O'             SET OVERLAY INDICATOR
         LA    R1,WORKAREA             ADDRESS OF COMMON WORK AREA
         CALL  PROGDUMS                CALL COMMAND STACK ROUTINE
         B     LEAVTPUT                EXIT TPUT ROUTINE
                                                                SPACE 1
         CLI   CICSREQ,C'Y'            Q. CICS ENVIRONMENT
         BNE   TSOTPUT                    N. BYPASS
*---------------------------------------------------------------------*
*   CALL PROGRAM THAT ISSUES A 'EXEC CICS SEND' COMMAND               *
*---------------------------------------------------------------------*
         ST    2,TARGET                STORE SCREEN ADDRESS
         ST    3,TARGET+4              STORE SCREEN LENGHT
         ST    13,TARGET+8             STORE SCREEN LENGHT
         LA    1,TARGET                POINT TO PARAMETER LIST
         L     15,=V(PROGCPUT)         LOAD TPUT ADDRESS                DPSO7746
         BALR  14,15                   GO PUT TO SCREEN
         B     LEAVTPUT                EXIT TPUT ROUTINE
TSOTPUT  DS    0H
         TPUT  (R2),(R3),NOEDIT,WAIT,,BREAKIN,HIGHP,MF=(E,TPUTWK1)
LEAVTPUT DS    0H
         L     R14,R14SAVER            RESTORE RETURN ADDRESS
         BR    R14                     RETURN
*---------------------------------------------------------------------*
TGETSCR  DS    0H
         ST    R14,R14SAVER            STORE RETURN ADDRESS
         CLI   CICSREQ,C'Y'            Q. CICS ENVIRONMENT
         BNE   TSOTGET                    N. BYPASS
*---------------------------------------------------------------------*
*   CALL PROGRAM THAT ISSUES A 'EXEC CICS RECEIVE' COMMAND            *
*---------------------------------------------------------------------*
         ST    2,TARGET                STORE SCREEN ADDRESS
         ST    3,TARGET+4              STORE SCREEN LENGHT
         ST    13,TARGET+8             STORE SCREEN LENGHT
         LA    1,TARGET                POINT TO PARAMETER LIST
         L     15,=V(PROGCGET)                                          DPSO7746
         BALR  14,15
         B     LEAVTGET                EXIT TGET ROUTINE
TSOTGET  DS    0H
         TGET  (R2),(R3),ASIS,WAIT,MF=(E,TGETWK1)
LEAVTGET DS    0H
         L     R14,R14SAVER            RESTORE RETURN ADDRESS
         BR    R14                     RETURN
*=====================================================================*
EXITPR00 DS    0H
         CLI   TRACE,C'Y'                    Q. TRACE ON
         BNE   NOTRACE9                         N. BYPASS
         LA    R1,OPENWK1                    LOAD LIST FORM OF OPEN
         LA    R2,PRINTER1                   LOAD DCB
         CLOSE ((R2),REREAD),MF=(E,(1))      CLOSE DATASET
NOTRACE9 DS    0H
         XR    R15,R15                 ZERO RETURN CODE
         B     EXITPROG                EXIT PROGRAM
EXITPR08 DS    0H
         LA    R15,8                   SET RETURN CODE
         B     EXITPROG                EXIT PROGRAM
EXITPRXX DS    0H
EXITPROG DS    0H
         ICM   R3,B'1111',COMDADRS     Q. GOT COMMAND GETMAINED ADDRESS
         BZ    NOGADDRS                   N. BYPASS FREEMAIN
         AMODECHG 31                   FORCE 31 BIT ADDRESSING
         L     R1,COMDADRS             LOAD GETMAINED AREA ADDRESS
         L     R2,COMDADRL             LOAD GETMAINED LENGTH
         FREEMAIN RC,LV=(2),A=(1)
NOGADDRS DS    0H
         AMODECHG O,ST=AMODEE          RESTORE ORIGINAL AMODE
         RACKOFF RC=(R15),LIST=NO
*=====================================================================*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
         DS    0D
SPACES   DC    CL80' '
LIN#0401  SBADC 04,01,PLN,B,O
*---------------------------------------------------------------------*
TRTABLE  DC    16C'.'                       00-0F
         DC    16C'.'                       10-1F
         DC    16C'.'                       20-2F
         DC    16C'.'                       30-3F
         DC    C' .........¢.<(+|'          40-4F
         DC    C'&&.........!$*);¬'         50-5F
         DC    C'-/........¦,%_>?'          60-6F
         DC    C'..........:#@''="'         70-7F
         DC    C'.abcdefghi......'          80-8F
         DC    C'.jklmnopqr......'          90-9F
         DC    C'.~stuvwxyz......'          A0-AF
         DC    16C'.'                       B0-BF
         DC    C'{ABCDEFGHI......'          C0-CF
         DC    C'}JKLMNOPQR......'          D0-DF
         DC    C'\.STUVWXYZ......'          E0-EF
         DC    C'0123456789......'          F0-FF
*---------------------------------------------------------------------*
SCREENOX EQU   *                       STRING FOUND OVERLAY
         WCCDC W,,COLOR
SLO0451X SBADC 4,56,PHN,Y
         DC    C'>'
SLO0471X SBADC 4,75,PLN,B
LSCROX   EQU   *-SCREENOX
*---------------------------------------------------------------------*
SCREENBX EQU   *                       SCREEN OVERLAY TO OFF
         WCCDC W,,COLOR
SLO0451B SBADC 4,56,PLN,B
         DC    C'*'
LSCRBX   EQU   *-SCREENBX
*---------------------------------------------------------------------*
OPENSK1   OPEN (,OUTPUT),MF=L
OPENSKL1  EQU  *-OPENSK1
PRTDCBS1  DCB  DDNAME=PRINTER1,DSORG=PS,MACRF=(PM)
PRTDCBL1  EQU  *-PRTDCBS1
TPUTCON1  TPUT MF=L
TPUTCONL  EQU  *-TPUTCON1
TGETCON1  TGET MF=L
TGETCONL  EQU  *-TGETCON1
*---------------------------------------------------------------------*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
COMMESTA DS    0F
         LR    R2,R15                   R1 SET AS BASE
         USING PROCESTA,R2              BASE REGISTER
         LM    R10,R13,12(R15)          RESTORE REGISTERS FROM "BASES1"
         B     MOVEERR                  BYPASS R10 - R13 SAVE AREA
         DS    4F
         DC    CL20'ESTAE ROUTINE <-----' ESTAE EYE CATCHER
*---------------------------------------------------------------------*
         DS    0H
         STM   R0,R13,BASES#2           STORE REGISTERS INTO "BASES2"
*---------------------------------------------------------------------*
*                                                                     *
*        CONTROL GETS HERE IF THE AN ABEND OCCURED DURING A MOVE      *
*        FROM SECONDARY TO PRIMARY. USUALLY CAUSED BY AN ADDRESS      *
*        EXCEPTION ERROR.                                             *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R15,12
         CR    R0,R15                     Q. SDWA CREATED BY RTM2
         BE    MESTAER2                      N. DO NOT RETRY
         SETRP FRESDWA=YES,RC=4,RETADDR=MESTAER,DUMP=NO
         BR    R14                       RETURN
         DS    0F
         LM    R0,R13,8(R15)             RESTORE REGISTERS
         B     MESTAER2
         DS    14F
         DS    0H
         MVI   RCODE,C'E'               SET RETURN CODE
         L     R1,ESTAERTN              LOAD ESTAE RETURN ADDRESS
         BR    R1                       CONTINUE
         DS    A                        RETURN ADDRESS FROM ESTAE
COMESTAL EQU   *-COMMESTA
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*---------------------------------------------------------------------*
         COPY  PROGDMPC                 ISSUE AN ERASE/WRITE "WCC"
*---------------------------------------------------------------------*
         COPY  PROGDUMA                 COMMON WORK AREA
*=====================================================================*
PDUMPPL  DSECT
         DS    8F                       PARAMETER LIST AREA
PREGS    DS    16F                      REGISTER SAVE AREA
PMESL    DS    H                        MESSAGE LENGTH
PMESS    DS    CL79                     MESSAGE
*---------------------------------------------------------------------*
         PUSH PRINT
         PRINT NOGEN
*
         IHASDWA DSECT=YES              ENTRY : SDWA
*
         POP PRINT
*---------------------------------------------------------------------*
         END
