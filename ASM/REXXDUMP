*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*                                                                     *
*        Title:    'DUMP ALL REXX VARIABLES'                          *
*        System:   N/A                                                *
*        Module:   REXXDUMP                                           *
*        Program:  REXXDUMP                                           *
*        Function: Display all the variable allocated to a session    *
*                  running a REXX EXEC.                               *
*                  The variables are sorted prior to issuing a TPUT.  *
*                                                                     *
*        Parameters:                                                  *
*                  N/A.                                               *
*                                                                     *
*                                                                     *
*        Notes:    Program is re-entrant.                             *
*        Author:   A. Kara (ASYSTS P/L).                              *
*                  (Taken from MVS Update Issue 94.)                  *
*                                                                     *
*        Eg.                                                          *
*                  fred = 'MARY'                                      *
*                  Address TSO 'REXXDUMP FRED'                        *
*                                                                     *
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*        PUSH PRINT
*        COPY @MACROS                    COMMON USED MACROS
*        POP  PRINT
*---------------------------------------------------------------------*
REXXDUMP KICKOFF (R12),WORKAREA,WORKAREL
                                                                SPACE 1
         LR    R7,R1                   CPPL ADDR
         USING CPPL,R7                 ADDRESABILITY TO CPPL
         PUTL  LIST=YES,MF=E,CPPL=(R7) INITIALISE PUTL ROUTINE
         MVC   OUTPUT(2),=H'82'        STORE LENGTH
                                                                SPACE 1
         ST    R0,EVBLOCK
         LA    R6,SHRBUF
         USING SHVBLOCK,R6
         XR    R4,R4                      INITIALISE RECORD COUNTER
         LA    R3,DATA1                   POINT TO START OF DATA AREA
BEGIN    DS    0H
         MVI   SHVCODE,SHVNEXTV           WANT  A   FETCH-NEXT
         LA    R1,VARNAME                 LOAD A(VARIABLE NAME)
         ST    R1,SHVNAMA                 SAVE A(VARIABLE NAME)
         MVC   VARNAME,BLANKS             CLEAR NAME FIELD
         MVC   OUTBUF,BLANKS              CLEAR OUTPUT BUFFER
         MVC   VARVAL,BLANKS              CLEAR  VALUE   FIELD
         XC    SWITCH,SWITCH              CLEAR SWITCH
         LA    R1,NAMELEN                 LOAD  LENGTH(VARIABLE NAME)
         ST    R1,SHVUSER                 SAVE  LENGTH(VARIABLE NAME)
         LA    R1,VARVAL                  LOAD  VALUE(VARIABLE NAME)
         ST    R1,SHVVALA                 SAVE  VALUE(VARIABLE NAME)
         LA    R1,VALLEN                  LOAD  LENGTH(VARIABLE VALUE)
         ST    R1,SHVBUFL                 SAVE  LENGTH(VARIABLE VALUE)
         LA    R1,EXCOMPL                 LOAD  A(PLIST)
         L     R0,EVBLOCK                 LOAD  A(EVALBLOCK)
         LINK  EP=IRXEXCOM                LINK  TO IRXEXCOM
         LTR   R15,R15                    CHECK  RETURN   CODE
         BM    EXIT                       EXIT IF < 0
         CLI   SHVRET,SHVLVAR             END OF THE LINE
         BE    ENDOFVAR                   YES,   OUT  OF  HERE
         CLI   SHVRET,SHVBADF             INVALID FUNCTION CODE
         BE    NOTREXX                    YES, NOT IN REXX
         L     R9,SHVNAML                 GET LENGTH OF NAME
         C     R9,=A(NAMELEN)             IS IT  TOO  LONG
         BNH   NAMEOK                     NO, CONTINUE
         LA    R9,NAMELEN                 TRUNCATE IT
         OI    SWITCH,NAMTRUNC            TURN  ON  SWITCH
NAMEOK   DS    0H
         BCTR  R9,0                       MINUS ONE FOR EXECUTE
         EX    R9,MVCNAME                 MOVE  TO  OUTBUF
         LA    R9,1(R9)                   RESTORE   LENGTH
         TM    SWITCH,NAMTRUNC            WAS NAME TOO LONG
         BZ    NAMEOK2                    NO, SKIP TRUNCATE TRAILER
         MVC   OUTBUF+35(3),TRAILER       ELSE.  PUT OUT TRUNCATE FLAG
NAMEOK2  DS    0H
         LA    R8,OUTBUF(R9)              POINT PAST NAME
         MVC   0(L'EQSIGN,R8),EQSIGN      PUT IN EQUAL SIGN
         LA    R9,L'EQSIGN(R9)            ACCOUNT FOR = SIGN IN LENGTH
         LA    R8,L'EQSIGN(R8)            POINT PAST EQUAL SIGN
         L     R7,SHVVALL                 PICK  UP  VALUE  LENGTH
         C     R7,=A(VALLEN)              IS IT  TOO  LONG
         BNH   VALOK                      NO, CONTINUE
         LA    R7,VALLEN-3                TRUNCATE IT
         OI    SWITCH,VALTRUNC            TURN  ON  SWITCH
VALOK    DS    0H
         AR    R9,R7                      ADD TO TOTAL LENGTH
         BCTR  R7,0                       BUMP FOR EXECUTE
         LTR   R7,R7                      IS IT AN EMPTY VARIABLE
         BM    VALEND                     YES,  SKIP  MOVE
         EX    R7,MVCVAL                  MOVE  VALUE  TO  OUTBUF
         TM    SWITCH,VALTRUNC            WAS VALUE TOO LONG
         BZ    VALEND                     NO, SKIP
         MVC   35(3,R8),TRAILER           ELSE, PUT OUT TRUNCATE FLAG
VALEND   DS    0H
         MVC   0(80,R3),SPACES            INITIALISE OUTPUT AREA
         MVC   0(80,R3),OUTBUF            MOVE DATA
         LA    R3,80(R3)                  POINT TO NEXT SLOT
         LA    R4,1(R4)                   BUMP LOOP COUNTER
         B     BEGIN                      START OVER AGAIN
NOTREXX  DS    0H
         LR    R2,R15                     SAVE ERROR CODE
         TPUT  MSG1,L'MSG1                GIVE A MESSAGES
         LR    R15,R2                     RESTORE ERROR CODE FOR EXIT
         B     EXIT
*--------------------------------------------------------------------*
ENDOFVAR DS    0H
         LR    R10,R4                     LOAD LOOP COUNTER
         BCTR  R10,0                      DECREMENT BY 1
         LTR   R10,R10                    Q. ONLY 1 RECORD
         BZ    OUTPUTDP
OUTLOOP1 DS    0H
         LR    R9,R10                     LOAD LOOP COUNTER
         LA    R3,DATA1                   POINT TO START OF DATA AREA
INLOOP1  DS    0H
         CLC   0(80,R3),80(R3)            Q. FIRST HIGHER THAN NEXT
         BL    NEXTTBE                      Y. NEXT COMPARE
         MVC   OUTBUF(80),0(R3)           MOVE 1 TO SAVEAREA
         MVC   0(80,R3),80(R3)            SHUFFLE UP 1
         MVC   80(80,R3),OUTBUF           MOVE 1 FROM SAVEAREA
NEXTTBE  DS    0H
         LA    R3,80(R3)                  POINT TO NEXT TABLE ENTRY
         BCT   R9,INLOOP1                 LOOP TILL END
OUTLOOP2 DS    0H
         BCT   R10,OUTLOOP1               LOOP TILL END
*--------------------------------------------------------------------*
OUTPUTDP DS    0H
         LA    R3,DATA1                   POINT TO START OF DATA AREA
TPUTLOOP DS    0H
*        TPUT  (R3),80                    DUMP VARIABLE/VALUE
         MVC   OUTPUTA(80),0(R3)       TEST PUTLINE'
         PUTL  OUTPUT,LIST=YES,MF=E    PUTLINE
         LA    R3,80(R3)                  NEXT VARIABLE
         BCT   R4,TPUTLOOP                LOOP TILL END
         SR    R15,R15
EXIT     DS    0H
         RACKOFF RC=(R15),LIST=Y
*--------------------------------------------------------------------*
MVCNAME  MVC   OUTBUF(0),VARNAME          EXECUTED    INSTRUCTION
MVCVAL   MVC   0(0,R8),VARVAL             EXECUTED    INSTRUCTION
*--------------------------------------------------------------------*
         TITLE 'REXXDUMP  -  DATA  SECTION'
EVBLOCK  DC    A(0)                       A(EVALBLOCK)
EXCOMID  DC    CL8'IRXEXCOM'
SHRBUF   DC    XL32'0'                    SHARED VARIABLE PLIST AREA
MSG1     DC    C'REXXDUMP MUST BE CALLED FROM A REXX PROGRAM'
BLANKS   DC    CL80' '
VARNAME  DC    CL38' '                    REXX VARIABLE NAME GOES HERE
NAMELEN  EQU   *-VARNAME                  LENGTH OF VARIABLE NAME
VARVAL   DC    CL38' '                    VARIABLE VALUE GOES HERE
VALLEN   EQU   *-VARVAL                   LENGTH OF VARIABLE VALUE
OUTBUF   DC    CL80' '                    OUTPUT LINE
EQSIGN   DC    C' = '                     EQUAL SIGN
TRAILER  DC    C'...'                     TRUNCATION TRAILER
SWITCH   DC    X'00'                      SWITCHES
NAMTRUNC EQU   X'80'                      NAME TRUNCATION
VALTRUNC EQU   X'40'                      LENGTH TRUNCATION
EXCOMPL  DC    A(EXCOMID)                 A(EYECATCHER)-PARM 1 ------+
         DC    A(0)                       PARM2                      ¦
         DC    A(0)                       PARM3                      ¦
         DC    A(SHRBUF+X'80000000')      A(SHVBLOCK)-PARM 4  -------+
TRACE    DC    C'Y'
SPACES   DC    CL256' '
         PUTL  MF=L,LTYPE=CON,LIST=Y   CONSTANT FORMAT OF PUTL MACRO
WORKAREA DSECT
SAVE     DC    18F'0'                     STANDARD SAVE AREA
*---------------------------------------------------------------------*
OUTPUT   DS    H                       OUTPUT LENGTH FOR PUTLINE
OUTPUTA  DS    CL80                    TPUT BUILD AREA
         PUTL  MF=L,LTYPE=VAR,LIST=Y   VARIABLE FORMAT OF PUTL MACRO
*---------------------------------------------------------------------*
DATA1    DS    3CL32760
WORKAREL EQU   *-WORKAREA
*=====================================================================*
         PUTL  LTYPE=IBM,MF=L,LIST=Y   Required IBM DSECTs for putline
*---------------------------------------------------------------------*
         IRXSHVB
         IRXEXTE
         IRXENVB
         END
