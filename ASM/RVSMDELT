*-----------------------------<======---------------------------------*
**     PROBLEMS:              <======
**     2. WHEN NOT AT TOP OF PAGE, LAST IS OK HOWEVER KEYS/COLS LINE
**        SEEMS TO GET CORRUPTED.
**     3. NEED TO MAINTAIN ENTRIES IN SEQUENCE NUMBERS, (NON-RENUMBER
**        IN 'RVSMMDAT' OPTION) ???????.
**     4. IF CHAIN RECORD IS 'I' (IE. RECORD INSERTED) REMOVE CHAIN
**        RECORD.
*-----------------------------<======---------------------------------*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       TITLE:    'READ A VSAM DATASET'
**       SYSTEM:   N/A
**       MODULE:   RVSMDELT
**       PROGRAM:  RVSMREAD
**       FUNCTION: PROCESS DELETE ON SEQUENCE NUMBER.
**       AUTHOR:   A. KARA.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
RVSMDELT KICKOFF (R13,R12),LIST=NO
*---------------------------------------------------------------------*
START    DS    0H
         LR    R11,R1                  ADDRESS OF COMMON AREA
         USING RVSMCOMA,R11            ESTABLISH ADDRESABILITY
         ISPINIT                       INITIALISE ISPF ENVIRONMENT
         XC    RCODE,RCODE             INITIALISE RETURN CODE
         BAL   R14,PUT2CHAN            GO AND PLACE IN CHAIN
*---------------------------------------------------------------------*
EXITPR00 DS    0H
         XR    R15,R15                 INITIALISE RETURN REGISTER
         IC    R15,RCODE               SET RETURN CODE
         RACKOFF RC=(R15)              EXIT PROGRAM
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*     GET THE REQUIRED AREA OF MEMORY AND ADD IT INTO THE CHAIN
*     AND MARK IT DELETED.
*---------------------------------------------------------------------*
PUT2CHAN DS    0H
         STM   R14,R12,SAVSUBR1        STORE REGISTERS
         LA    R3,4(R4)                POINT TO THE START PAST RECLEN
         A     R3,RKP                  ADD RELATIVE KEY POSITION
         L     R2,KEYLEN               LOAD KEY LENGTH
         BCTR  R2,0                    -1 FOR 'EX' COMMAND
         BAL   R14,GETMAIN1            GET AREA AND MOVE DATA
         USING CHANGES,R10             ESTABLISH ADDRESABILITY
*---------------------------------------------------------------------*
         CLI   CHGINDIC,C'I'           Q. RECORD PREVIOUSLY INSERTED
         BNE   CONT#520                   N. LEAVE INDICATOR AS IS
*---------------------------------------------------------------------*
*        DELETE FROM CHAIN AS CHANGED KEY WAS INSERTED BEFORE AND DID
*        NOT PREVIOUSLY EXIST ON DATASET
         L     R5,CFWDPTR              LOAD FORWARD PTR FROM 2 BE DEL
         L     R3,CBWDPTR              LOAD BACKWARD PTR FROM 2 BE DEL
         LH    R2,CHGDRECL             LOAD DATA LENGTH
         LA    R2,16(R2)               ADD LENGTH OF XTRA ADDRESSES
         FREEMAIN RC,LV=(R2),A=(R10)   FREE THE WORK AREA
         LTR   R5,R5                   Q. ANY FORWARD POINTER
         BZ    UDFWDPTR                   N. GO UPDATE BACKWARD PTR
         LR    R10,R5                  POINT TO NEXT CHAIN
         ST    R3,CBWDPTR              STORE BACKWARD POINTER FROM DEL
UDFWDPTR DS    0H
         LR    R10,R3                  POINT TO PREV CHAIN
         ST    R5,CFWDPTR              STORE FORWARD POINTER FROM DEL
         B     CONT#530                BYPASS FLAG SET
CONT#520 DS    0H
         MVI   CHGINDIC,C'D'           SET DELETE INDICATOR
CONT#530 DS    0H
*---------------------------------------------------------------------*
         BAL   R14,REMARRAY            GO AND REMOVE FROM ARRAY
         BAL   R14,GETNXTRC            GO AND GET ANOTHER RECORD
*---------------------------------------------------------------------*
         LA    R1,RVSMCOMA    <======  ADDRESS OF COMMON AREA
         CALL  RVSMMDAT       <======  GO MOVE DATA
*---------------------------------------------------------------------*
         LM    R14,R12,SAVSUBR1        RESTORE REGISTERS
         BR    R14
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
GETMAIN1 DS    0H
         STM   R11,R9,SAVSUBR2         STORE REGISTERS
         L     R7,0(R4)                LOAD RECLEN
         AH    R7,=H'16'               ADD POINTER, FLAG + LENGTH XTRA
         USING CHANGES,R10             ESTABLISH ADDRESABILITY
         L     R10,CHGFWD@             LOAD 1ST FORWARD CHAIN
         LTR   R10,R10                 Q. 1ST CHANGE
         BNZ   CHGLOP01                   N. LOOP THROUGH CHANGES
         GETMAIN RC,LV=(R7),LOC=ANY    ACQUIRE ARRAY WORK AREA
         LTR   R15,R15                 Q. 0 RC FROM GETMAIN
         BNZ   GETMFAIL                   N. SET UP ERROR
         ST    R1,CHGFWD@              STORE 1ST FORWARD CHAIN
         ST    R1,CHGBWD@              STORE 1ST BACKWARD CHAIN
         XC    0(4,R1),0(R1)           INITIALISE FORWARD PTR
         LA    R8,CHGFWD@              LOAD START CHAIN ADDRESS
         ST    R8,4(R1)                STORE BACKWARD PTR IN CHAIN
         B     STORECH                 GO AND STAORE CHANGES
CHGLOP01 DS    0H
         LA    R5,CHGDATA              POINT TO THE START
         A     R5,RKP                  ADD RELATIVE KEY POSITION
         EX    R2,TESTKEY              Q. CHAIN KEY HIGHER THAN CHANGED
         BH    TESTCONT                   N. TEST FOR CONTINUATION
         BE    RETMAIN1                   E. EQUAL EXIT ROUTINE
         GETMAIN RC,LV=(R7),LOC=ANY    ACQUIRE ARRAY WORK AREA
         LTR   R15,R15                 Q. 0 RC FROM GETMAIN
         BNZ   GETMFAIL                   N. SET UP ERROR
         ST    R10,0(R1)               STORE FORWARD POINTER
         L     R8,CBWDPTR              LOAD OLD BACKWARD POINTER
         ST    R1,CBWDPTR              STORE NEW AREA IN BACKWARD PTR
         ST    R1,0(R8)                STORE NEW AREA IN OLD FORWARD
         ST    R8,4(R1)                STORE BACKWARD POINTER IN NEW
         B     STORECH                 GO STORE CHANGES
TESTCONT DS    0H
         CLC   CFWDPTR(4),=F'0'        Q. ANOTHER LINK IN CHAIN
         BNE   TNXTCHN                    Y. GET AND TEST NEXT CHAIN
         GETMAIN RC,LV=(R7),LOC=ANY    ACQUIRE ARRAY WORK AREA
         LTR   R15,R15                 Q. 0 RC FROM GETMAIN
         BNZ   GETMFAIL                   N. SET UP ERROR
         ST    R1,CFWDPTR              STORE FORWARD POINTER
         ST    R10,4(R1)               STORE BACKWARD POINTER
         ST    R1,CHGBWD@              STORE LAST BACKWARD CHAIN
         XC    0(4,R1),0(R1)           INITIALISE FORWARD PTR
         B     STORECH                 GO STORE CHANGES
TNXTCHN  DS    0H
         L     R10,CFWDPTR             LOAD NEXT FORWARD POINTER
         B     CHGLOP01                LOOP THROUGH CHANGES
STORECH  DS    0H
         LR    R10,R1                  LOAD R10 WITH GETMAIN ADDRESS
         LA    R6,CHGDRECL             LOAD DESTINATION
         SH    R7,=H'16'               SUBTRACT LENGTH OF XTRA AND REL
         LR    R5,R7                   SOURCE LENGTH
         ICM   R5,B'1000',C' '         SET SPACE PAD CHARACTER
         MVCL  R6,R4                   MOVE TO CHANGED
         B     RETMAIN1                GO TO COMMON EXIT POINT
GETMFAIL DS    0H
         MVC   GC011,SPACES            CLEAR MESSAGE AREA
         MVC   GC011(63),=C'INSUFFICIENT VIRTUAL STORAGE. FAILED GETTING
               G ......... GETMAIN.'
         UNPACK R7,9,GC011+45          UNPACK LENGTH TO MESSAGE
         MVI   RCODE,X'20'             MOVE ERROR RERURN CODE
         B     EXITPR00                RETURN WITH ERROR
RETMAIN1 DS    0H
         LM    R11,R9,SAVSUBR2         RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*---------------------------------------------------------------------*
TESTKEY  CLC   0(0,R3),0(R5)           TEST KEY
*---------------------------------------------------------------------*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*     PERCOLATE DATA UP THROUGH ARRAY
*---------------------------------------------------------------------*
REMARRAY DS    0H
         STM   R2,R9,SAVSUBR2          STORE REGISTERS
         L     R2,LRECL                LOAD LOGICAL RECORD LENGTH
         LA    R2,4(R2)                +4 FOR REC LEN
         LA    R8,0(R4)                LOAD ARRAY SOURCE
         AR    R8,R2                   POINT TO NEXT RECORD
PERCLOP1 DS    0H
         LR    R5,R2                   LOAD SOURCE LENGTH
         LR    R9,R2                   LOAD SOURCE LENGTH
         ICM   R9,B'1000',=X'00'       LOAD PAD CHARACTER
         MVCL  R4,R8                   MOVE DATA UP 1
         AR    R4,R5                   POINT TO NEXT DESTINATION
         AR    R8,R5                   POINT TO NEXT SOURCE
         LA    R7,1(R7)                ADD 1 TO LOOP COUNTER
         CH    R7,#MAXLINE             Q. PROCESSED ALL RECORDS
         BL    PERCLOP1                   N. GO PROCESS NEXT RECORD
RETMAIN2 DS    0H
         LM    R2,R9,SAVSUBR2          RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
GETNXTRC DS    0H
*     GO AND GET NEXT RECORD
*---------------------------------------------------------------------*
         STM   R14,R12,SAVSUBR2        STORE REGISTERS
         MVC   #ARRAY@(4),ARRAY@       SAVE ARRAY ADDRESS
         L     R9,LRECL                LOAD RECORD LENGTH
         LA    R9,4(R9)                +4 FOR RECLEN
         XR    R6,R6                   INITIALISE EVEN PAIR
         LH    R7,#MAXLINE             LOAD MAXIMUM LINES
         BCTR  R7,0                    RELATIVE NUMBER
         LA    R1,1                    ONE RECORD ONLY
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF DATA
         BNE   NOTATTOP                   N. BYPASS
         BCTR  R7,0                    COMPENSATE FOR COMPENSATION
         LA    R1,1(R1)                   PROCESSING IN 'RVSMNREAD'
NOTATTOP DS    0H
         ST    R1,#READ                STORE RECORDS TO GET
         MR    R6,R9                   DISPLACEMENT OF LAST ARRAY
         L     R6,ARRAY@               LOAD START OF ARRAY
         AR    R6,R7                   POINT TO LAST ARRA
         ST    R6,ARRAY@               STORE LAST ARRAY RECORD
         MVI   VSAMOPER,C'G'           SET GET RECORD OPERATION FLAG
         LA    R1,RVSMCOMA             LOAD COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         MVC   ARRAY@(4),#ARRAY@       RESTORE ARRAY ADDRESS
RETMAIN3 DS    0H
         LM    R14,R12,SAVSUBR2        RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
SAVSUBR1 DS    16F
SAVSUBR2 DS    16F
#ARRAY@  DS    F
*---------------------------------------------------------------------*
RVSMCOMA DSECT
         COPY  RVSMCOMA
DUMPL    EQU   *-RVSMCOMA
         END
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-*
