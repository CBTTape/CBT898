*-------------------------------<======-------------------------------*
*  PROBLEMS:
*    1. FOR INSERTS, PROPOGATE THE SEQUENCE NUMBER DOWN THE PAGE.
*-------------------------------<======-------------------------------*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       TITLE:    'READ A VSAM DATASET'
**       SYSTEM:   N/A
**       MODULE:   RVSMENTR
**       PROGRAM:  RVSMREAD
**       FUNCTION: DETERMINE WHAT HAS CHANGED IN THE SCREEN.
**       AUTHOR:   A. KARA.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
RVSMENTR KICKOFF (R13,R12),LIST=NO
*---------------------------------------------------------------------*
START    DS    0H
         LR    R11,R1                  ADDRESS OF COMMON AREA
         USING RVSMCOMA,R11            ESTABLISH ADDRESABILITY
         ISPINIT                       INITIALISE ISPF ENVIRONMENT
         MVI   TRTABE+X'22',X'22'      SET X'22' TRANSLATE VALUE
         MVI   RESTATTR,X'11'          SET RESET ATTRIBUTE BYTE VALUE
         MVI   INVALHEX,C'N'           SET INVALID HEX CHARACTER OFF
         MVI   #1STTIME,C'Y'           SET FIRST TIME TYHROUGH FLAG
         MVI   ERRORFND,C'N'           SET ERROR FOUND INDIC OFF
         MVI   MOVEDATA,C'N'           SET MOVE DATA FLAG OFF
         XC    RCODE,RCODE             INITIALISE RETURN CODE
         XC    PREVSEQ#,PREVSEQ#       INITIALISE PREVIOUS SEQ #
         MVC   GC011S,SPACES           INITIALISE MESSAGE AREA
         CLC   SCSR(7),=C'DISPLAY'     Q. IS CURSOR IN DISPLAY
         BNE   NOCSRREP                   N. DONT REPOSITION CURSOR
         PACK  DWORK8(8),SCSRP+4(4)    CONVERT TO PACKED FORMAT
         CVB   R4,DWORK8               CONVERT TO BINARY
         MVC   CSR(7),=C'DISPLAY'      PUT CURSOR IN DISPLAY
         CLI   HEXON,C'Y'              Q. IS HEX TURNED ON
         BNE   NOHEXCP1                   N. BYPASS HEX COMPENSATION
         LR    R3,R4                   LOAD CURSOR POSITION IN R3
         S     R3,=F'80'               ALLOW FOR COL POINTER
         CLC   ROWPTR(4),=F'0'         Q. TOP OF DATASET
         BNE   NOTATTOP                   N. BYPASS
         S     R3,=F'80'               ALLOW FOR TOP OF DATA
NOTATTOP DS    0H
         XR    R2,R2                   INITIALISE EVEN PAIR
         D     R2,=F'80'               DIVIDE BY LINE LENGTH
         XR    R2,R2                   INITIALISE EVEN PAIR
         D     R2,=F'4'                DIVIDE BY LINES / DISPLAY
         L     R3,=F'80'               LOAD ALFA LINE ADDITION
         C     R2,=F'0'                Q. ON ALFA LINE
         BE    ADHEXCP1                   Y. GO AND COMPENSATE
         L     R3,=F'-80'              LOAD HEX LINE 2 ADDITION
         C     R2,=F'2'                Q. ON HEX LINE 2
         BE    ADHEXCP1                   Y. GO AND COMPENSATE
         XR    R3,R3                   INITIALISE HEX LINE 1 ADDITION
ADHEXCP1 DS    0H
         AR    R4,R3                   ADD COMPENSATION
NOHEXCP1 DS    0H
         UNPACK R4,8,CSRP              UNPACK INTO DISPLAY AREA PTR
NOCSRREP DS    0H
         LH    R7,#MAXLINE             SET LOOP COUNTER
         CLC   ROWPTR(4),=F'0'         Q. TOP OF PAGE
         BNE   CONT#050                   N. BYPASS
         BCTR  R7,0                    SUB 1 FROM LOOP COUNT FOR TOP
CONT#050 DS    0H
         CLI   HEXON,C'Y'              Q. HEX ON
         BNE   CONT#100                   N. BYPASS
         LH    R7,#HEXLINE             LOAD NUMBER OF HEX LINES PER SCR
CONT#100 DS    0H
         STH   R7,RESTSEQ#             SAVE R7 FOR SEQUENCE RECONSTRUCT
         BAL   R14,TESTCHNG            GO AND TEST CHANGE
*---------------------------------------------------------------------*
         CLI   INVALHEX,C'Y'           Q. INVALID HEX CHARACTER
         BE    EXITPR00                   Y. EXIT PROGRAM
         BAL   R14,TESTSEQ#            GO CHECK SEQUENCE NUMBERS
*        MVC   ZCMD(11),=C'ALREADY SET' INDICATE ALL POINTERS SET
*        LA    R1,RVSMCOMA             ADDRESS OF COMMON AREA
*        CALL  RVSMMDAT                GO MOVE DATA
*---------------------------------------------------------------------*
EXITPR00 DS    0H
         XR    R15,R15                 INITIALISE RETURN REGISTER
         IC    R15,RCODE               SET RETURN CODE
         RACKOFF RC=(R15)              EXIT PROGRAM
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
TESTCHNG DS    0H
         ST    R14,SAVSUBR1            SAVE REGISTERS
         LA    R6,DISPLAY+87           LOAD DISPLAY ADDRESS PAST SEQ #
         L     R4,ARRAY@               LOAD ARRAY ADDRESS
         L     R8,LRECL                LOAD RECORD LENGTH
         LA    R8,4(R8)                ADD RECORD LENGTH HOLDER LENGTH
         CLC   ROWPTR(4),=F'0'         Q. TOP OF DATA
         BNE   TRTLOP10                   N. BYPASS
         AR    R4,R8                   POINT TO 2ND TABLE IN ARRAY
         LA    R6,80(R6)               POINT PAST DUMMY TO OF DATASET
TRTLOP10 DS    0H
         LA    R3,4(R4)                POINT TO THE START OF DATA
         AH    R3,COLPTR1              ADD DISPLACEMENT INTO RECORD
         BCTR  R3,0                    RELATIVE DISPLACEMENT POSITION
         MVC   ORIGIN1(72),0(R3)       STORE ORIGINAL VALUE 4 LATER
*---------------------------------------------------------------------*
         LA    R3,4(R4)                POINT TO THE START OF DATA
         A     R3,RKP                  ADD RELATIVE KEY POSITION
         L     R2,KEYLEN               LOAD KEY LENGTH
         BCTR  R2,0                    -1 FOR 'EX' COMMAND
         EX    R2,SAVEKEY              SAVE KEY
*---------------------------------------------------------------------*
         MVI   CHANGED,C'N'            SET CHANGED FLAG OFF
         MVC   MOVEL(2),=H'72'         SET MAX LINE LENGTH
         L     R3,0(R4)                LOAD RECLEN
         CH    R3,COLPTR2              Q. RIGHT PTR < RECLEN
         BNL   CONT#210                   N. HAVE MOVE LENGTH
         CH    R3,COLPTR1              Q. LEFT PTR > RECLEN
         BNL   CONT#200                   N. CALCULATE PART LENGTH
         XC    MOVEL,MOVEL             INITIALISE LINE LENGTH
         B     CONT#210                BYPASS
CONT#200 DS    0H
         SH    R3,COLPTR1              SUBTRACT LEFT POINTER
         LA    R3,1(R3)                COMP FOR RELATIVE LENGTH
         STH   R3,MOVEL                SAVE MOVE LENGTH
CONT#210 DS    0H
         LR    R5,R6                   CHANGEABLE DISPLAY POINTER
         CLC   MOVEL(2),=H'0'          Q. RECLEN < LEFT PTR
         BNE   TRTLOP11                   N. TEST IF DATA CHANGED
         CLI   HEXON,C'Y'              Q. HEX ON
         BNE   CONT#710                   N. PROCESS NEXT LOGICAL LINE
         LA    R5,240(R5)              COMPENSATE FOR HEX LINES
         B     CONT#710                PROCESS NEXT LOGICAL LINE
TRTLOP11 DS    0H
         LR    R9,R6                   START OF LINE
         AH    R9,MOVEL                LAST BYTE OF DATA
         BCTR  R9,0                    RELATIVE POINTER
         SR    R9,R5                   LAST BYTE OF DATA
         C     R9,=F'0'                Q. DATA STRING EXHAUSTED
         BL    ISHEXON1                   Y. EXIT LOOP WITHOUT CHANGE
         EX    R9,CHGDTST1             Q. GET FIRST CHANGE POINT
         BZ    ISHEXON1                   N. EXIT LOOP WITH NO CHANGE
         LA    R5,1(R1)                ADDRESS PAST THE ATTR BYTE
         CLM   R2,B'0001',=X'11'       NON CHANGED ATTRIBUTE
         BE    TRTLOP11                LOOP TILL END
         MVI   CHANGED,C'Y'            SET CHANGED FLAG OFF
         MVI   MOVEDATA,C'Y'           SET MOVE DATA FLAG
TRTLOP20 DS    0H
         LR    R9,R6                   START OF LINE
         AH    R9,MOVEL                LAST BYTE OF DATA
         BCTR  R9,0                    RELATIVE POINTER
         SR    R9,R5                   LAST BYTE OF DATA
         C     R9,=F'0'                Q. DATA STRING EXHAUSTED
         BL    TRTLP20E                   Y. EXIT LOOP WITH LAST CHANGE
         EX    R9,CHGDTST1             Q. GET FIRST CHANGE POINT
         BZ    TRTLP20E                   N. EXIT LOOP WITH LAST CHANGE
         STC   R2,ATTRBYTE             STORE ATTRIBUTE BYTE
         LA    R2,1(R1)                POINT PAST ATTR BYTE FOR NXT TRT
         BCTR  R1,0                    POINT BEFORE ATTR BYTE
         CR    R1,R5                   Q. START AND END BYTE THE SAME
         BNE   CONT#250                   N. BYPASS DECREMENT MOVE LEN
         BCTR  R1,0                    RELATIVE MOVE LENGTH
CONT#250 DS    0H
         SR    R1,R5                   SUBTRACT START FROM END
         LR    R10,R5                  DATA TO MOVE ADDRESS
         SR    R10,R6                  SUBTRACT START FOR DISPLACEMENT
         BCTR  R10,0                   RELATIVE DISPLACEMENT
         LA    R8,ORIGIN1              LOAD COPY AREA OF ARRAY
         AR    R10,R8                  POINT INTO COPY AREA
         EX    R1,MOVEDAT1             MOVE DATA TO ARRAY
         BCTR  R5,0                    POSITION ON ATTRIBUTE BYTE
         MVC   0(1,R5),RESTATTR        RESTORE ATTRIBUTE CHATRACTER
INCPTR20 DS    0H
         LR    R5,R2                   LOAD NEXT POSITION TO TEST
         CLI   ATTRBYTE,X'11'          Q. NON CHANGED ATTRIBUTE BYTE
         BE    TRTLOP11                   Y.TEST NEXT CHANGED ATTR BYTE
         B     TRTLOP20                NEXT TEST
TRTLP20E DS    0H
         LR    R10,R5                  DATA TO MOVE ADDRESS
         SR    R10,R6                  SUBTRACT START FOR DISPLACEMENT
         BCTR  R10,0                   RELATIVE DISPLACEMENT
         LA    R8,ORIGIN1              LOAD COPY AREA OF ARRAY
         AR    R10,R8                  POINT INTO COPY AREA
         LA    R2,71(R6)               LAST BYTE OF DATA
         SR    R2,R5                   LAST BYTE OF DATA
         EX    R2,MOVEDAT1             MOVE DATA TO ARRAY
         BCTR  R5,0                    POSITION ON ATTRIBUTE BYTE
         MVC   0(1,R5),RESTATTR        RESTORE ATTRIBUTE CHATRACTER
ISHEXON1 DS    0H
         LR    R5,R6                   USE R5 AS NEXT POINTER
         CLI   HEXON,C'Y'              Q. HEX ON
         BNE   TRTLP10E                   N. BYPASS HEX PROCESS
         STM   R0,R14,SAVSUBR3         STORE REGISTERS
*---------------------------------------------------------------------*
         LA    R1,4(R4)                POINT PAST RECLEN
         AH    R1,COLPTR1              ADD DISPLACEMENT INTO RECORD
         BCTR  R1,0                    RELATIVE DISPLACEMENT POSITION
         LH    R3,MOVEL                LOAD MAX PROCESSABLE LENGTH
         HEXCHMAC (R1),HEXAREA1,(R3)   CONVERT ARRAY DATA HEX TO CHAR
         HEXCHMAC ORIGIN1,HEXAREA2,(R3) CONVERT CHANGED HEX TO CHAR
         LA    R9,2                    LOOP COUNTER
         LA    R6,80(R6)               POINT PAST ALFA LINE
         BCTR  R3,0                    -1 FOR 'EX' COMMAND
TRTLOP30 DS    0H
         LA    R5,1(R6)                POINT PAST ATTR BYTE
         CLI   0(R6),X'22'             Q. ATTRIBUTE BYTE CHANGED
         BNE   CONT#300                   N. BYPASS
         MVI   CHANGED,C'X'            SET CHANGED FLAG OFF
         MVI   MOVEDATA,C'Y'           SET MOVE DATA FLAG
         EX    R3,TRANUPER             CONVERT TO UPPER CASE
         EX    R3,TSTVALDX             Q. VALID HEX REPRESENTATION
         BZ    CONT#300                   Y. CONTINUE
         CLI   #1STTIME,C'Y'           Q. FIRST TIME THROUGH
         BNE   CONT#300                   N. BYPASS
         MVI   ERRORFND,C'Y'           SET ERROR FOUND INDIC OFF
         MVI   RCODE,X'08'             SET ERROR FOUND INDIC OFF
         MVI   #1STTIME,C'N'           FIRST ERROR FLAG
         LA    R2,DISPLAY-1            LOAD START OF DISPLAY AREA
         SR    R2,R1                   SUBTRACT DISPLACEMENT INTO DISP
         UNPACK R2,8,CSRP              STORE CURSOR POSITION
         MVC   CSR(8),=C'DISPLAY '     PUT CURSOR ON DISPLAY
         MVC   GC011S(21),=C'INVALID HEX CHARACTER'
         MVC   GC011(81),=C'THE CHARACTER AT THE CURSOR POSITION IS NOTX
                A VALID HEX DIGIT (0123456789ABCDEF).'
         MVI   INVALHEX,C'Y'           SET INVALID HEX CHARACTER ON
         MVI   RESTATTR,X'22'          SET RESET ATTRIBUTE BYTE VALUE
CONT#300 DS    0H
         MVC   0(1,R6),RESTATTR        RESET ATTRIBUTE BYTE
         LA    R6,80(R6)               POINT TO THE NEXT LINE
         BCT   R9,TRTLOP30             LOOP TILL END
TRTLP30E DS    0H
*---------------------------------------------------------------------*
         SH    R5,=H'80'               POINT TO HEX LINE 1
         LA    R6,HEXAREA1             INITIAL UNCHANGED DATA XE
         LA    R7,HEXAREA2             CHANGED ALFA DATA XE
         LR    R8,R5                   POINT R8 TO THE
         SH    R8,=H'80'                   ALFA LINE
         LH    R9,MOVEL                LOOP COUNTER
         LA    R3,4(R4)                POINT PAST RECLEN
         AH    R3,COLPTR1              ADD DISPLACEMENT INTO RECORD
         BCTR  R3,0                    RELATIVE DISPLACEMENT POSITION
CMPLOP30 DS    0H
         CLI   CHANGED,C'X'            Q. DATA CHANGED IN HEX
         BNE   TALFA30                    N. BYPASS
         MVC   TWOBYTES(1),0(R5)       MOVE LEFT NIBLE HEX LINE 1
         MVC   TWOBYTES+1(1),80(R5)    MOVE RIGHT NIBLE HEX LINE 2
         CLC   TWOBYTES(2),0(R6)       Q. HEX DATA CHGD FROM ORIGINAL
         BE    TALFA30                    N. BYPASS
         CHHEXMAC TWOBYTES,(R8),2,'22' CONVERT TO HEX IN ALFA LINE
         MVC   0(1,R3),0(R8)           MOVE TO ARRAY (UN-TRANS)
         TR    0(2,R8),TRTABE          TRANSLATE (UNDER EDIT)
         B     INCPTR30                INCREMENT POINTER
TALFA30  DS    0H
         CLI   0(R8),X'11'             Q. ALFA LINE CHAR ATTR BYTE
         BE    INCPTR30                   Y. INCREMENT POINTER
         CLI   0(R8),X'22'             Q. ALFA LINE CHAR ATTR BYTE
         BE    INCPTR30                   Y. INCREMENT POINTER
         CLC   0(2,R7),0(R6)           Q. ALFA DATA CHGD FROM ORIGINAL
         BE    INCPTR30                   N. INCREMENT POINTER
         MVC   0(1,R5),0(R7)           MOVE LEFT NIBBLE TO HEX LINE 1
         MVC   80(1,R5),1(R7)          MOVE RIGHT NIBBLE TO HEX LINE 2
         MVC   0(1,R3),0(R8)           MOVE BYTE TO ARRAY
INCPTR30 DS    0H
         LA    R3,1(R3)                POINT TO NEXT X LINE 1 CHAR
         LA    R5,1(R5)                POINT TO NEXT X LINE 1 CHAR
         LA    R6,2(R6)                POINT TO NEXT INIT XE CHAR
         LA    R7,2(R7)                POINT TO NEXT ALFA XE CHAR
         LA    R8,1(R8)                POINT TO NEXT ALFA CHAR
         BCT   R9,CMPLOP30             LOOP TILL END
CONT#390 DS    0H
         LM    R0,R14,SAVSUBR3         RESTORE REGISTERS
         LA    R5,240(R6)              POINT PAST HEX 3 LINES
TRTLP10E DS    0H
         CLI   CHANGED,C'N'            Q. DATA CHANGED
         BE    CONT#700                   N. BYPASS
         LA    R3,4(R4)                POINT TO THE START PAST RECLEN
         A     R3,RKP                  ADD RELATIVE KEY POSITION
         L     R2,KEYLEN               LOAD KEY LENGTH
         BCTR  R2,0                    -1 FOR 'EX' COMMAND
         BAL   R14,GETMAIN1            GET AREA AND MOVE DATA
         USING CHANGES,R10             ESTABLISH ADDRESABILITY
         LA    R3,CHGDATA              POINT TO THE START
         A     R3,RKP                  ADD RELATIVE KEY POSITION
         EX    R2,COMPKEY              Q. KEY CHANGED
         BNE   KEYCHGED                   Y. PROCESS KEY CHANGE
         CLI   CHGINDIC,X'00'          Q. JUST SET CHANGED RECORD UP
         BNE   CONT#700                   N. LEAVE INDICATOR AS IS
         MVI   CHGINDIC,C'U'           SET CHANGE INDICATOR TO UPDATE
         B     CONT#700                BYPASS DELETE RECORD
KEYCHGED DS    0H
         CLI   CHGINDIC,C'D'           Q. KEY PREVIOUSLY CHANGED
         BNE   CONT#500                   N. LEAVE INDICATOR AS IS
         MVI   CHGINDIC,C'U'           SET TO UPDATED
         B     CONT#510                GET OLD DATA
CONT#500 DS    0H
         MVI   CHGINDIC,C'I'           SET CHANGE INDICATOR TO INSERT
CONT#510 DS    0H
         STM   R11,R9,SAVSUBR3         STORE REGISTERS
         LA    R3,KEYSAVED             POINT TO THE SAVED KEY ADDRESS
         BAL   R14,GETMAIN1            GET AREA
         LA    R3,CHGDATA              POINT TO THE START OF CHANGED
         A     R3,RKP                  ADD RELATIVE KEY POSITION
         EX    R2,RESTKEY              Q. RESTORE SAVED KEY
         CLI   CHGINDIC,C'I'           Q. RECORD PREVIOUSLY INSERTED
         BNE   CONT#520                   N. LEAVE INDICATOR AS IS
*---------------------------------------------------------------------*
*        DELETE FROM CHAIN AS CHANGED KEY WAS INSERTED BEFORE AND DID
*        NOT PREVIOUSLY EXIST ON DATASET
         L     R5,CFWDPTR              LOAD FORWARD PTR FROM 2 BE DEL
         L     R3,CBWDPTR              LOAD BACKWARD PTR FROM 2 BE DEL
         LH    R2,CHGDRECL             LOAD DATA LENGTH
         LA    R2,16(R2)               ADD LENGTH OF XTRA ADDRESSES
         FREEMAIN RC,LV=(R2),A=(R10)   FREE THE WORK AREA
         LTR   R5,R5                   Q. ANY FORWARD POINTER
         BZ    UDFWDPTR                   N. GO UPDATE BACKWARD PTR
         LR    R10,R5                  POINT TO NEXT CHAIN
         ST    R3,CBWDPTR              STORE BACKWARD POINTER FROM DEL
UDFWDPTR DS    0H
         LR    R10,R3                  POINT TO PREV CHAIN
         ST    R5,CFWDPTR              STORE FORWARD POINTER FROM DEL
         B     CONT#530                BYPASS FLAG SET
CONT#520 DS    0H
         MVI   CHGINDIC,C'D'           SET DELETE INDICATOR
CONT#530 DS    0H
         LM    R11,R9,SAVSUBR3         RESTORE REGISTERS
         DROP  R10                     DROP ADDRESABILITY
CONT#700 DS    0H
         LA    R6,80(R5)               INCLUDE THE ALFA LINE
         A     R4,LRECL                ADD LOGICAL RECORD LEN TO DATA
         LA    R4,4(R4)                +4 FOR RECLEN
         BCT   R7,TRTLOP10             PROCESS NEXT LINE TILL END
         L     R14,SAVSUBR1            RESTORE REGISTERS
         BR    R14                     RETURN TO WHERE CALLED FROM
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
TESTSEQ# DS    0H
         ST    R14,SAVSUBR1            SAVE REGISTERS
*---------------------------------------------------------------------*
         L     R4,ARRAY@               LOAD ARRAY ADDRESS
         L     R8,LRECL                LOAD RECORD LENGTH
         LA    R8,4(R8)                ADD RECORD LENGTH HOLDER LENGTH
         LA    R6,DISPLAY+80           LOAD DISPLAY ADDRESS OF SEQ #
         LA    R7,0                    LOOP COUNTER
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF DATA
         BE    CONT#800                   Y. BYPASS POINT TO LINE 1
         LA    R7,1                    LOOP COUNTER
CONT#800 DS    0H
         MVC   SEQ#RBLD(4),ROWPTR      STORE ROW PTR
*---------------------------------------------------------------------*
SEQLOP10 DS    0H
         CLI   0(R6),X'21'             Q. LAST CHANGE ERROR
         BE    CONT#710                   Y. SEQ CHANGE TEST
         CLI   0(R6),X'22'             Q. ANY ENTRY IN SEQ #
         BE    CONT#710                   Y. SEQ CHANGE TEST
         L     R1,SEQ#RBLD             LOAD REBUILD NUMBER
         CLI   1(R6),C'*'              Q. DUMMY SEQUENCE NUMBER
         BE    CONT#705                   Y. BYPASS
         UNPACK R1,6,DWORK8            UNPACK SEQUENCE NUMBER
         MVC   1(6,R6),DWORK8          MOVE SEQUENCE NUMBER
CONT#705 DS    0H
         LA    R1,1(R1)                BUMP SEQUENCE NUMBER BY 1
         ST    R1,SEQ#RBLD             STORE REBUILD NUMBER
         B     CONT#720                BYPASS SEQ CHANGE TEST
CONT#710 DS    0H
         BAL   R14,TSTSEQCH            GO TEST SEQ # CHANGE
         CLI   RCODE,X'00'             Q. ZERO RETURN CODE
         BNE   RETMAIN2                   N. GET OUT
CONT#720 DS    0H
*---------------------------------------------------------------------*
         LTR   R7,R7                   Q. PROCESSING TOP OF DATA
         BZ    NOHEXON2                   Y. BYPASS HEX COMPENSATE
         CLI   HEXON,C'Y'              Q. HEX ON
         BNE   NOHEXON2                   N. BYPASS
         LA    R6,240(R6)              ADD HEX LINE COMPENSATE
NOHEXON2 DS    0H
         A     R4,LRECL                ADD LOGICAL RECORD LEN TO DATA
         LA    R4,4(R4)                +4 FOR RECLEN
         LA    R6,80(R6)               INCLUDE THE ALFA LINE
         LA    R7,1(R7)                INCREMENT LOOP COUNTER BY 1
         CH    R7,RESTSEQ#             Q. REACHED END OF LOOP
         BNH   SEQLOP10                   N. PROCESS NEXT LINE
RETMAIN2 DS    0H
         L     R14,SAVSUBR1            RESTORE REGISTERS
         BR    R14                     RETURN TO WHERE CALLED FROM
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
TSTSEQCH DS    0H
         STM   R1,R14,SAVSUBR3         STORE REGISTERS
         MVI   0(R6),X'12'             RESET INPUT INDICATOR
*---------------------------------------------------------------------*
         L     R1,ROWPTR               LOAD TOP ROW POINTER
         AR    R1,R7                   ADD LINES PROCESSED
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF DATA
         BE    VALDSEQ#                   Y. GO SAVE SEQUENCE NUMBER
         BCTR  R1,0                    BRING BACK TO RELATIVE NUMBER
VALDSEQ# DS    0H
         C     R1,=F'0'                Q. IN DUMMY TOP LINE
         BNH   ASTRSEQ#                   Y. SET ASTER SEQUENCE NO
         C     R1,NLOGR                Q. IN DUMMY BOT LINE
         BL    SAVESEQ#                   N. SAVE SEQUENCE NUMBER
ASTRSEQ# DS    0H
         MVC   ORIGIN1(6),=C'******'   SET DUMMY SEQUENCE NUMBERS
         B     SAVEDSEQ                BYPAS SAVE SEQUENCE NUMBER
SAVESEQ# DS    0H
*---------------------------------------------------------------------*
         UNPACK R1,6,ORIGIN1           UNPACK LINE NUMBER
SAVEDSEQ DS    0H
         LA    R5,1(R6)                LOAD START OF SEQUENCE NUMBER
         LA    R9,6                    LOOP COUNTER
SEQ#LOP1 DS    0H
         CLI   0(R5),C' '              Q. SPACE SEQUENCE #
         BE    SEQ#NEXT                   Y. GO GET NEXT CHARACTER
         CLI   0(R5),C'0'              Q. NON NUMERIC SEQUENCE #
         BL    VERSEQ#                    Y. GO VERIFY LINE COMMAND
SEQ#NEXT DS    0H
         LA    R5,1(R5)                POINT TO NEXT DIGIT
         BCT   R9,SEQ#LOP1             LOOP TILL END
         LA    R8,DISPLAY              START OF DISPLAY AREA
         LR    R9,R6                   CURRENT POINTER
         SR    R9,R8                   SUBTRACT CURRENT CURSOR POSITION
         XR    R8,R8                   INITIALISE EVEN PAIR
         D     R8,=F'80'               DIVIDE BY LINE LIMIT
         M     R8,=F'80'               MULTIPLY BY LINE LIMIT
         LA    R9,9(R9)                POINT PAST ATTRIBUTE BYTE
         UNPACK R9,8,CSRP              UNPACK INTO CURSOR POSITION
         MVC   CSR(7),=C'DISPLAY'      PLACE CURSOR ON DISPLAY
         B     RESETSEQ                GO RESET SEQUENCE #
VERSEQ#  DS    0H
         OI    0(R5),C' '              CONVERT TO UPPER CASE
         MVC   1(1,R6),0(R5)           MOVE SEQUENCE INDICATOR
         MVC   2(5,R6),SPACES          SPACE FILL THE REST
         CLI   1(R6),C'D'              Q. FIRST NON NUMERIC 'DELETE'
         BE    PROCDELT                   Y. PROCESS DELETE
         CLI   1(R6),C'I'              Q. FIRST NON NUMERIC 'INSERT'
         BE    PROCINST                   Y. PROCESS INSERT
         CLI   1(R6),C'C'              Q. FIRST NON NUMERIC 'COPY'
         BE    PROCCOPY                   Y. PROCESS COPY
         CLI   1(R6),C'M'              Q. FIRST NON NUMERIC 'MOVE'
         BE    PROCMOVE                   Y. PROCESS MOVE
         CLI   1(R6),C'R'              Q. FIRST NON NUMERIC 'REPEAT'
         BE    PROCREPT                   Y. PROCESS REPEAT
         CLI   1(R6),C'B'              Q. FIRST NON NUMERIC 'BEFORE'
         BE    PROCBEFR                   Y. PROCESS BEFORE
         CLI   1(R6),C'A'              Q. FIRST NON NUMERIC 'AFTER'
         BE    PROCAFTR                   Y. PROCESS AFTER
         CLI   1(R6),C'X'              Q. FIRST NON NUMERIC 'EXCLUDE'
         BE    PROCEXCL                   Y. PROCESS EXCLUDE
         B     INVLINCM                GOTO IN INVALID LINE COMMAND
*---------------------------------------------------------------------*
PROCINST DS    0H
         LA    R1,RVSMCOMA             LOAD COMMON AREA ADDRESS
         CALL  RVSMISRT                CALL INSERT ROUTINE
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   RETMAIN3                   N. EXIT WITH ERROR CODE SET
         CLC   01(2,R6),=C''''''       Q. INSERTED LINE
         BNE   CONT#900                   N. BYPASS
         SH    R6,=H'80'               POINT TO PREVIOUS
         LR    R5,R6                   USE R5 AS DISPLAY POINTER
CONT#900 DS    0H
         MVC   01(6,R6),ORIGIN1        RESTORE NEXT LINE NUMBER
         MVI   0(R6),X'11'             RESET INDICATOR (INPUT/GREEN)
         MVI   RCODE,X'04'             SET ERROR RETURN CODE
         LA    R4,DISPLAY              LOAD DISPLAY ADDRESS
         SR    R5,R4                   SUBTRACT START OF DISPLAY
         XR    R4,R4                   INITIALISE EVEN REGISTER PAIR
         D     R4,=F'80'               GET NUMBER OF LINES
         XR    R4,R4                   INITIALISE EVEN REGISTER PAIR
         M     R4,=F'80'               MULTIPLY > NUMBER OF LINES
         LA    R5,89(R5)               PLACE CURSOR ON DATA POSIT
         UNPACK R5,8,CSRP              UNPACK CURSOR POSITION
         B     RETMAIN3                EXIT WITHOUT RESETING SEQUENCE
*---------------------------------------------------------------------*
PROCDELT DS    0H
         CLC   ORIGIN1(6),=C'******'   Q. ON DUMMY LINES
         BNE   CALLDELT                   N. GO CALL DELETE ROUTINE
         MVC   GC011S(20),=C'INVALID ON THIS LINE'
         MVC   GC011(65),=C'"." IS NOT A VALID ON THE LINE THAT IT WAS E
               ENTERED. BLANK IT OUT.'
         B     INVLINEX                GO TELL OF ERROR
CALLDELT DS    0H
         LA    R1,RVSMCOMA             LOAD COMMON AREA ADDRESS
         CALL  RVSMDELT                CALL DELETE ROUTINE
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   RETMAIN3                   N. EXIT WITH ERROR CODE SET
         LA    R4,DISPLAY              LOAD DISPLAY ADDRESS
         SR    R5,R4                   SUBTRACT START OF DISPLAY
         XR    R4,R4                   INITIALISE EVEN REGISTER PAIR
         D     R4,=F'80'               GET NUMBER OF LINES
         XR    R4,R4                   INITIALISE EVEN REGISTER PAIR
         M     R4,=F'80'               MULTIPLY > NUMBER OF LINES
         LA    R5,2(R5)                ADD 1 FOR RELATIVE COMPENSATE
         UNPACK R5,8,CSRP              UNPACK CURSOR POSITION
         B     RESETSEQ                FINISH SEQUENCE PROCESS
PROCCOPY DS    0H
PROCMOVE DS    0H
PROCREPT DS    0H
PROCBEFR DS    0H
PROCAFTR DS    0H
PROCEXCL DS    0H
INVLINCM DS    0H
FINSEQPR DS    0H
         MVC   GC011S(22),=C'COMMAND NOT RECOGNIZED'
         MVC   GC011(60),=C'"." IS NOT A VALID LINE COMMAND. CORRECT IT*
                OR BLANK IT OUT.'
INVLINEX DS    0H
         MVI   0(R6),X'21'             RESET INPUT INDIC (ERROR/RED)
         MVI   RCODE,X'04'             SET ERROR RETURN CODE
         MVC   GC011+1(1),0(R5)        MOVE INDICATOR
         LA    R4,DISPLAY              LOAD DISPLAY ADDRESS
         SR    R5,R4                   SUBTRACT START OF DISPLAY
         XR    R4,R4                   INITIALISE EVEN REGISTER PAIR
         D     R4,=F'80'               GET NUMBER OF LINES
         XR    R4,R4                   INITIALISE EVEN REGISTER PAIR
         M     R4,=F'80'               MULTIPLY > NUMBER OF LINES
         LA    R5,2(R5)                ADD 1 FOR RELATIVE COMPENSATE
         UNPACK R5,8,CSRP              UNPACK CURSOR POSITION
         B     RETMAIN3                GOTO COMMO EXIT POINT
*---------------------------------------------------------------------*
RESETSEQ DS    0H
         MVC   1(6,R6),ORIGIN1         RESTORE LINE NUMBER
RETMAIN3 DS    0H
         LM    R1,R14,SAVSUBR3         RESTORE REGISTERS
         BR    R14                     RETURN TO WHERE CALLED FROM
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
GETMAIN1 DS    0H
         STM   R11,R9,SAVSUBR3         STORE REGISTERS
         L     R7,0(R4)                LOAD RECLEN
         AH    R7,=H'16'               ADD POINTER, FLAG + LENGTH XTRA
         USING CHANGES,R10             ESTABLISH ADDRESABILITY
         L     R10,CHGFWD@             LOAD 1ST FORWARD CHAIN
         LTR   R10,R10                 Q. 1ST CHANGE
         BNZ   CHGLOP01                   N. LOOP THROUGH CHANGES
         GETMAIN RC,LV=(R7),LOC=ANY    ACQUIRE ARRAY WORK AREA
         LTR   R15,R15                 Q. 0 RC FROM GETMAIN
         BNZ   GETMFAIL                   N. SET UP ERROR
         ST    R1,CHGFWD@              STORE 1ST FORWARD CHAIN
         ST    R1,CHGBWD@              STORE 1ST BACKWARD CHAIN
         XC    0(4,R1),0(R1)           INITIALISE FORWARD PTR
         LA    R8,CHGFWD@              LOAD START CHAIN ADDRESS
         ST    R8,4(R1)                STORE BACKWARD PTR IN CHAIN
         B     STORECH                 GO AND STAORE CHANGES
CHGLOP01 DS    0H
         LA    R5,CHGDATA              POINT TO THE START
         A     R5,RKP                  ADD RELATIVE KEY POSITION
         EX    R2,TESTKEY              Q. CHAIN KEY HIGHER THAN CHANGED
         BH    TESTCONT                   N. TEST FOR CONTINUATION
         BE    RETMAIN1                   E. EQUAL EXIT ROUTINE
         GETMAIN RC,LV=(R7),LOC=ANY    ACQUIRE ARRAY WORK AREA
         LTR   R15,R15                 Q. 0 RC FROM GETMAIN
         BNZ   GETMFAIL                   N. SET UP ERROR
         ST    R10,0(R1)               STORE FORWARD POINTER
         L     R8,CBWDPTR              LOAD OLD BACKWARD POINTER
         ST    R1,CBWDPTR              STORE NEW AREA IN BACKWARD PTR
         ST    R1,0(R8)                STORE NEW AREA IN OLD FORWARD
         ST    R8,4(R1)                STORE BACKWARD POINTER IN NEW
         B     STORECH                 GO STORE CHANGES
TESTCONT DS    0H
         CLC   CFWDPTR(4),=F'0'        Q. ANOTHER LINK IN CHAIN
         BNE   TNXTCHN                    Y. GET AND TEST NEXT CHAIN
         GETMAIN RC,LV=(R7),LOC=ANY    ACQUIRE ARRAY WORK AREA
         LTR   R15,R15                 Q. 0 RC FROM GETMAIN
         BNZ   GETMFAIL                   N. SET UP ERROR
         ST    R1,CFWDPTR              STORE FORWARD POINTER
         ST    R10,4(R1)               STORE BACKWARD POINTER
         ST    R1,CHGBWD@              STORE LAST BACKWARD CHAIN
         XC    0(4,R1),0(R1)           INITIALISE FORWARD PTR
         B     STORECH                 GO STORE CHANGES
TNXTCHN  DS    0H
         L     R10,CFWDPTR             LOAD NEXT FORWARD POINTER
         B     CHGLOP01                LOOP THROUGH CHANGES
STORECH  DS    0H
         LR    R10,R1                  LOAD R10 WITH GETMAIN ADDRESS
         LA    R6,CHGDRECL             LOAD DESTINATION
         SH    R7,=H'16'               SUBTRACT LENGTH OF XTRA AND REL
         LR    R5,R7                   SOURCE LENGTH
         ICM   R5,B'1000',C' '         SET SPACE PAD CHARACTER
         MVCL  R6,R4                   MOVE TO CHANGED
         B     RETMAIN1                GO TO COMMON EXIT POINT
GETMFAIL DS    0H
         MVC   GC011,SPACES            CLEAR MESSAGE AREA
         MVC   GC011(63),=C'INSUFFICIENT VIRTUAL STORAGE. FAILED GETTING
               G ......... GETMAIN.'
         UNPACK R7,9,GC011+45          UNPACK LENGTH TO MESSAGE
         MVI   RCODE,X'20'             MOVE ERROR RERURN CODE
         B     EXITPR00                RETURN WITH ERROR
RETMAIN1 DS    0H
         LM    R11,R9,SAVSUBR3         RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*---------------------------------------------------------------------*
SAVEKEY  MVC   KEYSAVED(0),0(R3)       SAVE KEY
TRANUPER OC    0(0,R5),SPACES          CONVERT TO UPPER CASE
TSTVALDX TRT   0(0,R5),TRTHEXVL        VALID HEX REPRESENTATION
RESTKEY  MVC   0(0,R3),KEYSAVED        RESTORE KEY
TESTKEY  CLC   0(0,R3),0(R5)           TEST KEY
COMPKEY  CLC   0(0,R3),KEYSAVED        COMPARE KEY
CHGDTST1 TRT   0(0,R5),TRTATTRB        FIND NEXT CHANGED ATTRIBUTE
MOVEDAT1 MVC   0(0,R10),0(R5)          MOVE DATA TO ARRAY
*---------------------------------------------------------------------*
*=====================================================================*
         LTORG
*---------------------------------------------------------------------*
SAVSUBR1 DS    F
SAVSUBR2 DS    F
SAVSUBR3 DS    18F
R6SAVER  DS    F
DISPMRKR DS    F
MOVEL    DS    H
RESTATTR DS    CL1
#1STTIME DS    CL1
ERRORFND DS    CL1
CHANGED  DS    CL1
MOVEDATA DS    CL1
ATTRBYTE DS    CL1
TWOBYTES DS    CL2
ORIGIN1  DS    CL72
PREVSEQ# DS    CL6
HEXAREA1 DS    CL144
HEXAREA2 DS    CL144
KEYSAVED DS    CL256
         COPY  RVSMTRT2                COPY BOOK TO MAINTAIN CAPS ON
         COPY  RVSMTRTB                COPY BOOK TO MAINTAIN CAPS ON
*---------------------------------------------------------------------*
RVSMCOMA DSECT
         COPY  RVSMCOMA
DUMPL    EQU   *-RVSMCOMA
         END
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-*
