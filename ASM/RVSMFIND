*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       TITLE:    'READ A VSAM DATASET'
**       SYSTEM:   N/A
**       MODULE:   RVSMFIND
**       PROGRAM:  RVSMMAIN
**       FUNCTION: TO FIND A/NUMBER OF STRING OF DATA.
**                 SCROLLING ACTION.
**       AUTHOR:   A. KARA.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
RVSMFIND KICKOFF (R13,R12),LIST=NO
         LR    R11,R1                  ADDRESABILITY TO COMMON DATA
         USING RVSMCOMA,R11            ADDRESABILITY TO COMMON DATA
*---------------------------------------------------------------------*
         ISPINIT                       INITIALISE ISPF ENVIRONMENT
START    DS    0H
         MVC   GC011S,SPACES           CLEAR MESSAGE AREA
         MVC   GC011,SPACES            CLEAR MESSAGE AREA
         MVC   KEYTOPS,KEYTOP          SAVE KEY IF NOT FOUND
         MVI   POSATOP,C'N'            SET POSITION AT TOP FLAG OFF
         MVI   INDISPL,C'N'            SET IN DISPLAY FLAG OFF
         MVC   HOWMANY,SPACES          ONE FIND ON REFIND
         XC    REMAINDR,REMAINDR       INITIALISE REMAINDER
         CLC   SCSR(7),=C'DISPLAY'     Q. IS CURSOR IN DISPLAY AREA
         BNE   CONT#010                   N. SEARCH FROM TOP OF ARRAY
         PACK  DWORK8(8),SCSRP+4(4)    PACK CURSOR POSITION
         CVB   R9,DWORK8               CONVERT TO BINARY
         XR    R8,R8                   INITIALISE EVEN PAIR
         D     R8,=F'80'               DIVIDE BY 80
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF FILE
         BNE   CONT#000                   N. BYPASS
         BCTR  R9,0                    COMPENSATE FOR TOP OF DATASET
CONT#000 DS    0H
*---------------------------------------------------------------------*
*        LTR   R9,R9                   Q. ZERO DIVIDEND
*        BNZ   CONT#005                   N. BYPASS
         LTR   R8,R8                   Q. ZERO REMAINDER
         BNZ   CONT#005                   N. BYPASS
         LA    R8,80                   MOVE IN LENGTH OF LINE
CONT#005 DS    0H
*---------------------------------------------------------------------*
         SH    R8,EDITCOMP             SUBTRACT EDIT COMPENSATOR
         STH   R8,REMAINDR             STORE REMAINDER
         ST    R9,OFFSET               STORE NO OF LINES INTO DISPLAY
CONT#010 DS    0H
         CLI   ZCMD,C'R'               Q. REFIND
         BE    CONT#130                   N. CONTINUE
         MVI   BOTTOM,C'N'             BOTTOM REACHED INDICATOR OFF
         MVI   HEXFIND,C'N'            SET HEX FIND SRING OFF
         MVC   HOWMANY,SPACES          SET # FIRST FIND ONLY INDICATOR
*---------------------------------------------------------------------*
         CLC   PARM(5),=C'P''.'' '     Q. FIND UNPRINTABLE
         BNE   CONT#030                   N. BYPASS
         MVI   HOWMANY+1,C'.'          SET FIND UNPRINTABLE
         MVC   FINDLEN(2),=H'1'        SET LENGTH OF 1
         MVC   SPARM(3),=C'''.'''      SET SAVE PARAMETER
         MVC   FINDSTRG(5),=C'P''.'''  SET STRING PARAMETER
         MVC   SPARMLEN(2),=H'3'       SET SAVE PARM LENGTH OF 3
         LA    R9,69                   ALLOWABLE LENGTH TO INLUDE 'ALL'
         LA    R2,PARM+5               ADDRESS OF SCAN START
LOOP0    DS    0H
         CLI   0(R2),C' '              Q. CHARACTER A SPACE
         BNE   LOOP0END                   N. EXIT LOOP
         LA    R2,1(R2)                POINT TO NEXT CHARACTER
         BCT   R9,LOOP0                LOOP TILL END
         B     GOANDFND                GO AND FIND
LOOP0END DS    0H
         CLC   0(3,R2),=C'ALL'         Q. WANT ALL UNPRINTABLE
         BNE   ERROR1                     N. ERROR 1
         MVI   HOWMANY,C'A'            SET ALL INDICATOR
         B     GOANDFND                GO AND FIND
CONT#030 DS    0H
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
         LA    R2,PARM+76              LAST BYTE OF PARAMETER
         LA    R9,76                   LOOP/LENGTH COUNTER
LOOP1    DS    0H
         CLI   0(R2),C' '              Q. CHARACTER A SPACE
         BNE   LOOP1END                   N. EXIT LOOP
         BCTR  R2,0                    POINT TO PREVIOUS CAHARACTER
         BCT   R9,LOOP1                LOOP TILL NO SPACE FOUND
*  CONTROL SHOULD NOT REACH HERE AS PARM MUST NOT BE SPACES
LOOP1END DS    0H
         CH    R9,=H'4'                Q. PARM LENGTH => 5
         BL    CONT#100                   N. BYPASS
         LR    R4,R2                   USE R4 AS CHAR POINTER
         SH    R4,=H'3'                POINT BACK 4 CHARACTERS
         CLC   0(4,R4),=C' ALL'        Q. WANT ALL OCCURANCES
         BNE   CONT#100                   N. BYPASS
         MVI   HOWMANY,C'A'            MOVE ALL INDICATOR
         SH    R2,=H'3'                POINT BACK 4 BYTES
         SH    R9,=H'3'                DECREMENT LENGTH ACCORDINGLY
LOOP2    DS    0H
         CLI   0(R2),C' '              Q. CHARACTER A SPACE
         BNE   LOOP2EXT                   N. EXIT LOOP
         BCTR  R2,0                    POINT TO PREVIOUS CAHARACTER
         BCT   R9,LOOP2                LOOP TILL NO SPACE FOUND
*  CONTROL SHOULD NOT REACH HERE AS PARM MUST NOT BE SPACES
LOOP2EXT DS    0H
CONT#100 DS    0H
         MVC   LASTCHAR(1),0(R2)       STORE LAST CHARACTER FOR LATER
         LA    R1,1(R9)                MAKE UP FOR REAL LENGTH
         STH   R1,FINDLEN              STORE LENGTH
         LTR   R9,R9                   Q. RELATIVE LENGTH 0 (1 BYTE)
         BZ    LOOP3END                   Y. END OF SCAN
LOOP3    DS    0H
         CLI   0(R2),C' '              Q. IMBEDDED SPACES
         BE    TEST4QTS                   Y. EXIT LOOP
         BCTR  R2,0                    POINT TO PREVIOUS CAHARACTER
         BCT   R9,LOOP3                LOOP TILL NO SPACE FOUND
LOOP3END DS    0H
         CLI   LASTCHAR,C''''          Q. LAST CHAR QUOTE
         BE    TEST4QTS                   N. BYPASS
         CLI   PARM,C''''              Q. FIRST CHAR QUOTE
         BE    TEST4QTS                   N. BYPASS
         LH    R9,FINDLEN              LOAD LENGTH
         MVI   SPARM,C''''             SET DELIMITER
         LA    R2,SPARM+1              LOAD SAVE AREA
         LA    R3,PARM                 LOAD PARAMETER ADDRESS
         EX    R9,MOVEDATX             MOVE DATA
         AR    R2,R9                   POINT TO END OF STRING
         LA    R9,2(R9)                ADD 1 FOR CLOSING QUOTES
         STH   R9,SPARMLEN             LOAD LENGTH
         MVI   0(R2),C''''             SET DELIMITER
         LH    R9,FINDLEN              LOAD LENGTH
         B     CONT#120                MOVE DATA
TEST4QTS DS    0H
         CLC   LASTCHAR(1),PARM        Q. BOTH LAST CHAR + 1ST. QUOTES
         BE    PARSECHR                   Y. PARSE CHARACTERS
         CLC   PARM(2),=C'X'''         Q. START = X'
         BNE   ERROR1                     N. ERROR 1
PARSEHEX DS    0H
         LH    R9,FINDLEN              LOAD LENGTH
         STH   R9,SPARMLEN             LOAD LENGTH
         LA    R2,SPARM                LOAD SAVE AREA
         LA    R3,PARM                 LOAD PARAMETER ADDRESS
         EX    R9,MOVEDATX             MOVE DATA
         SH    R9,=H'3'                LESS 3 FOR QUOTES AND 'X'
         BCTR  R9,0                    RELATIVE LENGTH
         EX    R9,MOVEDAT1             MOVE DATA
         LA    R9,1(R9)                BACK TO NORMAL LENGTH
         LR    R2,R9                   SAVE REGISTER
         XR    R8,R8                   INIT EVEN PAIR
         D     R8,=F'2'                DIVIDE BY 2
         LTR   R8,R8                   Q. EVEN NUMBER OF HEX BYTES
         BNZ   ERROR4                     N. GO TELL OF ERROR
         CHHEXMAC PARM,GC011,(R2),ERROR5
         STH   R9,FINDLEN              STORE LENGTH
         BCTR  R9,0                    RELATIVE LENGTH
         EX    R9,MOVEDAT2             MOVE DATA
         MVI   HEXFIND,C'Y'            SET HEX FIND SRING ON
         B     CONT#125                BYPASS AND CONTINUE
*---------------------------------------------------------------------*
PARSECHR DS    0H
         LH    R9,FINDLEN              LOAD LENGTH
         STH   R9,SPARMLEN             LOAD LENGTH
         BCTR  R9,0                    RELATIVE LENGTH
         MVI   SPARM,C''''             SET DELIMITER
         LA    R2,SPARM+1              LOAD SAVE AREA
         LA    R3,PARM+1               LOAD PARAMETER ADDRESS
         EX    R9,MOVEDATX             MOVE DATA
         BCTR  R9,0                    LESS 1 MORE FOR THE QUOTES
         STH   R9,FINDLEN              STORE LENGTH
         AR    R2,R9                   POINT TO END OF STRING
         MVI   0(R2),C''''             SET DELIMITER
         BCTR  R9,0                    RELATIVE LENGTH
         EX    R9,MOVEDAT3             MOVE DATA
CONT#120 DS    0H
         LH    R9,FINDLEN              LOAD LENGTH
         BCTR  R9,0                    RELATIVE LENGTH
CONT#125 DS    0H
         EX    R9,MOVEDAT4             MOVE DATA
GOANDFND DS    0H
         CLI   HOWMANY,C'A'            Q. FIND ALL
         BNE   CONT#150                   N. SEARCH ARRAY FIRST
         B     CONT#400                SEARCH ARRAY FIRST
*---------------------------------------------------------------------*
CONT#130 DS    0H
         CLC   FINDSTRG,SPACES         Q. PREVIOUS FIND ISSUED BEFORE
         BNE   CONT#140                   Y. CONTINUE
         MVC   GC011S(20),=C'ENTER A FIND COMMAND'
         MVC   GC011(66),=C'THE RFIND KEY WORKS ONLY AFTER A FIND CHARAC
               CTER STRING IS ENTERED.'
         B     EXITPR08                ERROR EXIT
CONT#140 DS    0H
         MVC   PARM,FINDSTRG           MOVE FIND STRING
         CLC   FINDSTRG(4),=C'P''.'''  Q. FIND UNPRINTABLE
         BNE   C0NT#145                   N. BYPASS
         MVI   HOWMANY+1,C'.'          SET FIND UNPRINTABLE
         MVC   FINDLEN(2),=H'1'        SET LENGTH OF 1
         MVC   SPARM(3),=C'''.'''      SET SAVE PARAMETER
         MVC   SPARMLEN(2),=H'3'       SET SAVE PARM LENGTH OF 3
C0NT#145 DS    0H
         CLC   SCSR(7),=C'DISPLAY'     Q. IS CURSOR IN DISPLAY AREA
         BNE   CONT#400                   N. SEARCH FROM TOP OF ARRAY
         CLI   BOTTOM,C'Y'             Q. AT BOTTOM ON REFIND
         BNE   CONT#150                   N. SEARCH FROM TOP OF ARRAY
         MVC   #READ(4),ROWPTR         MOVE CURRENT ROW PTR TO # READ
         B     POSITOP                 START READING FROM TOP
CONT#150 DS    0H
         CLC   SCSR(7),=C'DISPLAY'     Q. IS CURSOR IN DISPLAY AREA
         BNE   CONT#400                   N. SEARCH FROM TOP OF ARRAY
         L     R9,OFFSET               LOAD NO OF LINES INTO DISPLAY
         L     R7,NLOGR                LOAD NUMBER OF RECORDS
         S     R7,ROWPTR               SUBTRACT ROW POINTER
         CH    R7,#MAXLINE             Q. HAVE MAXLINE # IN ARRAY
         BL    CONT#160                   N. LEAVE AS IS
         LH    R7,#MAXLINE             LIMIT OF ARRAY
CONT#160 DS    0H
*---------------------------------------------------------------------*
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF FILE
         BE    CONT#170                   Y. BYPASS
         BCTR  R9,0                    COMPENSATE FOR TOP OF DATASET
CONT#170 DS    0H
*---------------------------------------------------------------------*
         CLI   HEXON,C'N'              Q. HEX TURNED ON
         BE    CONT#180                   N. BYPASS RECALC CURSOR POS
         XR    R8,R8                   INITIALISE EVEN PAIR
         D     R8,=F'4'                DIVIDE BY 80 GIVE NEW VALUE R9
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF DATA
         BNE   CONT#180                   N. BYPASS TO OF COMPENSATE
         LA    R9,1(R9)                ADD 1 FOR TOP OF DATA
CONT#180 DS    0H
*---------------------------------------------------------------------*
         SR    R7,R9                   SUBTRACT STARTING POINT
         L     R1,LRECL                LOAD RECORD LENGTH
         LA    R1,4(R1)                +4 FOR RECLEN
         XR    R8,R8                   INITIALISE EVEN PAIR
         MR    R8,R1                   DISPLACEMENT INTO ARRAY
         L     R6,ARRAY@               START OF CURRENT ARRAY
         AR    R6,R9                   OFFSET INTO ARRAY
         LA    R5,FINDSTRG             FIND STRING ADDRESS
         B     CONT#410                GO POSITION INTO ARRAY LINE
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
*  SEARCH ARRAY
*---------------------------------------------------------------------*
CONT#400 DS    0H
         L     R7,NLOGR                LOAD NUMBER OF RECORDS
         S     R7,ROWPTR               SUBTRACT ROW POINTER
         CH    R7,#MAXLINE             Q. HAVE MAXLINE # IN ARRAY
         BL    CONT#405                   N. LEAVE AS IS
         LH    R7,#MAXLINE             LIMIT OF ARRAY
CONT#405 DS    0H
         LA    R5,FINDSTRG             FIND STRING ADDRESS
         L     R6,ARRAY@               START OF CURRENT ARRAY
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF FILE
         BNE   CONT#410                   N. BYPASS
         BCTR  R7,0                    COMPENSATE FOR TOP OF DATASET
         A     R6,LRECL                POINT PAST TOP OF FILE
         LA    R6,4(R6)                +4 FOR RECLEN
*---------------------------------------------------------------------*
CONT#410 DS    0H
         LH    R2,COLPTR1              LOAD LEFT COLUMN POINTER
         BCTR  R2,0                    RELATIVE POSITION
         AH    R2,REMAINDR             ADD REMAINDER (
         L     R3,0(R6)                LOAD RECORD LENGTH
         CLC   SCSR(7),=C'DISPLAY'     Q. IS CURSOR IN DISPLAY AREA
         BE    REMPTROK                   Y. BYPASS
         XR    R2,R2                   INITIALISE DISPLACEMENT IN REC
REMPTROK DS    0H
         SR    R3,R2                   SUBTRACT DISP INTO RECORD
         AR    R2,R6                   DISPLACEMNET INTO ARRAY
         LA    R2,4(R2)                +4 FOR RECLEN
         B     CONT#420                BYPASS SEARCH FROM START
*---------------------------------------------------------------------*
LOOP4    DS    0H
         L     R3,0(R6)                LOAD RECORD LENGTH
         LA    R2,4(R6)                SOURCE ADDRESS
CONT#420 DS    0H
         LH    R9,FINDLEN              LOAD FIND LENGTH
         LA    R3,1(R3)                MAKE UP FOR RELATIVE LENGTH
         CR    R3,R9                   Q. RECORD LEFT > STRING
         BNH   NEXTARR1                   N. GET NEXT ARRAY
         SR    R3,R9                   DEC SEARCH LEN BY STRING LEN
         BCTR  R9,0                    RELATIVE COMPARE LENGTH
FINDLOP1 DS    0H
         CLI   HOWMANY+1,C'.'          Q. FIND UNPRINTABLE
         BNE   PRINABLE                   N. GO FIND PRINTABLE
         ST    R2,R2SAVER              SAVE R2 CHANGED BY TRT
         EX    R9,TESTUNPR             Q. FIND PRINTABLE STRING
         L     R2,R2SAVER              RESTORE R2 CHANGED BY TRT
         BNZ   NOTFUND1                   Y. BYPASS
         B     FOUNDHIT                PROCESS HIT
PRINABLE DS    0H
         EX    R9,MOVEUCAS             MOVE TO UPPER CASE AREA
         CLI   HEXFIND,C'Y'            Q. HEX FIND
         BE    CONT#425                   N. BYPASS UPPER TRANSLATION
         EX    R9,TRANUCAS             MOVE TO UPPER CASE AREA
CONT#425 DS    0H
         EX    R9,SRCHSTRG             Q. FIND STRING
         BNE   NOTFUND1                   N. BYPASS
FOUNDHIT DS    0H
         LA    R1,4(R6)                LOAD START OF DATA ADDRESS
         LR    R10,R2                  LOAD CURRENT DATA POINTER
         SR    R10,R1                  GET DISPLACEMENT INTO DATA
         LA    R10,1(R10)              ADD 1 FOR RELATIVE POSITION
         ST    R10,OFFSET              STORE DISPLACEMENT
         L     R3,NLOGR                LOAD NUMBER OF RECORDS
         S     R3,ROWPTR               SUBTRACT ROW POINTER
         CH    R3,#MAXLINE             Q. HAVE MAXLINE # IN ARRAY
         BL    CONT#430                   N. LEAVE AS IS
         LH    R3,#MAXLINE             LIMIT OF ARRAY
CONT#430 DS    0H
         SR    R3,R7                   SUBTRACT LINES PROCESSED
         ST    R3,LINESPR              STORE LINES PROCESSED
*-----------------------------<=======--------------------------------*
*        CLC   ROWPTR(4),=F'0'         Q. AT TOP OF PAGE
*        BE    CONT#435                   Y. BYPASS
*        LA    R3,1(R3)                ADD 1 TO LINE PROCESSED
CONT#435 DS    0H
*---------------------------------------------------------------------*
         CH    R3,#OFLINES             Q. HIT IN DISPLAYABLE LINES
         BH    CONT#440                   N. GO EVALUATE REPOSIT
         MVI   INDISPL,C'P'            SET IN POSITION INDICATOR
         CLI   HOWMANY,C'A'            Q. FIND ALL
         BNE   POSPTRS                    N. SO POSITION LEFT POINTER
         MVC   #READ(4),NLOGR          READ ALL RECORDS
         B     POSITOP                 GO AND READ FROM TOP
CONT#440 DS    0H
         LA    R3,4(R6)                SOURCE ADDRESS
         AH    R3,RKP+2                ADD RELATIVE KEY POSITION
         L     R1,KEYLEN               LOAD KEY LENGTH
         BCTR  R1,0                    RELATIVE KEY LENGTH
         LA    R2,KEYTOP               POINT TO BOTTOM KEY
         EX    R1,MOVEKEY1             MOVE DATA
         MVI   INDISPL,C'1'            SET IN GET LINES INDICATOR
         CLI   HOWMANY,C'A'            Q. FIND ALL
         BNE   POS1HIT                    N. OFF SCREEN GET LINES
         MVC   #READ(4),NLOGR          READ ALL RECORDS
         B     POSITOP                 GO AND READ FROM TOP
NOTFUND1 DS    0H
         LA    R2,1(R2)                POINT TO NEXT CHAR
         BCT   R3,FINDLOP1             LOOP TILL END OF DATA
NEXTARR1 DS    0H
         A     R6,LRECL                POINT PAST TOP OF FILE
         LA    R6,4(R6)                +4 FOR RECLEN
         BCT   R7,LOOP4                LOOP TILL ARRAY EXHAUSTED
         MVC   #READ(4),NLOGR          SET READ LOOP TO END OF FILE
         B     FINDREAD                READ VSAM FOR HITS
*---------------------------------------------------------------------*
POSITOP  DS    0H
         MVI   POSATOP,C'Y'            SET POSITION AT TOP FLAG
         MVI   VSAMOPER,C'F'           FORWARD READ
         MVI   DIRC1GET,C'N'           DON'T GET FIRST RECORD
         MVC   KEYTOP,KEYTOPM          MOVE ABSOLUTE TOP TO TOP KEY
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
FINDREAD DS    0H
         MVC   ZCMD(2),FINDLEN         MOVE FIND STRING LENGTH
         MVC   ZCMD+2(2),HOWMANY       MOVE # TO FIND
         MVI   VSAMOPER,C'K'           FIND INDICATOR
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         CLC   ZCMD(4),=F'0'           Q. ANY RECORDS FOUND
         BE    ERROR2                     N. SET ERROR MESSAGE
         CLI   HOWMANY,C'A'            Q. ALL HITS
         BNE   CONT#600                   N. BYPASS
*---------------------------------------------------------------------*
         L     R1,ZCMD                 LOAD HITS
         UNPACK R1,8,DWORK8            UNPACK HITS
         LA    R9,8                   LOOP COUNTER
         LA    R3,DWORK8               LOOP COUNTER
HITSLOP1 DS    0H
         CLI   0(R3),C'0'              Q. LEADING ZERO
         BNE   HITSLOPE                   N. EXIT LOOP
         LA    R3,1(R3)                POINT TO NEXT CHARACTER
         BCT   R9,HITSLOP1             LOOP TILL NO LEADING ZERO
HITSLOPE DS    0H
         LA    R2,GC011S               DESTINATION ADDRESS
         LA    R8,1(R9)                LENGTH OF DATA MOVED + 1 SPACE
         BCTR  R9,0                    LESS 1 FOR EX COMMAND
         LR    R10,R3                  SAVE START ADDRESS
         EX    R9,MOVEDATX             MOVE DATA
         AR    R2,R8                   NEW DESTINATION
         MVC   0(5,R2),=C'CHARS'       MOVE LITERAL
         LA    R2,6(R2)                NEW DESTINATION
         LA    R8,6(R8)                LENGTH OF DATA MOVED SO FAR
         LA    R6,24                   MAX LENGTH
         SR    R6,R8                   SUBTRACT DATA MOVED
         CH    R6,SPARMLEN             Q. FIT ALL PARAMETER IN MSG
         BNH   CONT#500                   N. BYPASS
         LH    R6,SPARMLEN             LOAD PARAMETER LENGTH
CONT#500 DS    0H
         LA    R3,SPARM                LOAD SOURCE
         BCTR  R6,0                    RELATIVE LENGTH FOR EX COMMAND
         EX    R6,MOVEDATX             MOVE DATA
         AR    R2,R6                   ADD LENGTH OF MOVE
         LA    R2,2(R2)                ADD 2 FOR REL LENGTH AND SPACE
         MVC   0(5,R2),=C'FOUND'
         LA    R2,GC011                SOURCE ADDRESS
         MVC   GC011,SPACES            INITIALISE MESSAGE
         MVC   0(5,R2),=C'CHARS'       MOVE LITERAL
         LA    R2,6(R2)                POINT PAST DATA
         LH    R1,SPARMLEN             LOAD SAVED PARAMETER LENGTH
         CH    R1,=H'73'               Q. STRING > LIMIT
         BNH   CONT#510                   N. CONTINUE
         LA    R1,73                   SET TO LIMIT
CONT#510 DS    0H
         BCTR  R1,0                    LENGTH FOR EX COMMAND
         LA    R3,SPARM                SOURCE
         EX    R1,MOVEDATX             MOVE DATA
         LA    R1,1(R1)                ADD BACK CHARACTER
         AR    R2,R1                   ADD TO SOURCE
         MVC   1(5,R2),=C'FOUND'
         LA    R2,7(R2)                REPOSITION DESTINATION
         LR    R3,R10                  LOAD SOURCE OF # OF HITS
         EX    R9,MOVEDATX             MOVE DATA
         AR    R2,R9                   ADD LENGTH OF DATA MOVED
         MVC   R2(6,R2),=C'TIMES.'
*---------------------------------------------------------------------*
         B     CONT#700                POSIT ON FIRST HIT
CONT#600 DS    0H
         BAL   R14,FOUNDMSG            GO AND OUTPUT FOUND MESSAGE
CONT#700 DS    0H
         CLI   INDISPL,C'N'            Q. HIT IN CURRENT DISPLAY
         BE    CONT#710                   N. BYPASS IN DISPLAY TEST
         CLC   KEYTOP,KEYTOPS          Q. FIRST HIT OUTSIDE SCREEN
         BL    CONT#710                   Y. SCROLL UP
         MVC   KEYTOP,KEYBOT           MOVE BOTTOM KEY
         MVI   VSAMOPER,C'F'           FORWARD READ
         MVI   DIRC1GET,C'Y'           GET FIRST RECORD
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         MVC   KEYTOP,KEYTOPS          RESTORE TOP KEY
         CLI   INDISPL,C'P'            Q. IN DISPLAYABLE AREA
         BNE   POS1HIT                    N. REPOSITION IN ARRAY
         B     POSPTRS                 REPOSITION POINTERS
CONT#710 DS    0H
         L     R1,ZCMD+4               LOAD OFFSET INTO RECORD
         LA    R1,1(R1)                ADD 1 TO RELATIVE OFFSET
         ST    R1,OFFSET               STORE OFFSET INTO RECORD
         L     R1,ZCMD+8               LOAD NUMBER OF RECORDS PROC'D
         BCTR  R1,0                    RELATIVE # OF READS
         ST    R1,LINESPR              STORE NUMBER OF RECORDS PROC'D
         MVI   VSAMOPER,C'B'           BACKWARD READ
         MVI   DIRC1GET,C'Y'           GET FIRST RECORD
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         MVC   #READ(4),=F'1'          GET 1 RECORD
         MVI   VSAMOPER,C'G'           SET GET RECORD FLAG
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         L     R2,ROWPTR               LOAD ROW POINTER
         AH    R2,#MAXLINE             ADD LINES IN ARRAY ALREADY PROC
         CLI   POSATOP,C'Y'            Q. POSITIONED AT TOP
         BNE   CONT#720                   N. BYPASS
         LA    R2,1                    POINT TO ROW 1 (IT WORKS WITH
*                                        THE # RECORDS READ ETC.??)
CONT#720 DS    0H
         ST    R2,ROWPTR               STORE NEW ROW POINTER
         CLEARV  DISPLAY               CLEAR DISPLAY AREA
         B     SETFWDRD                CHANGE TO FORWARD READ
POS1HIT  DS    0H
         LR    R3,R6                   SOURCE ADDRESS
         S     R3,LRECL                SUB ARRAY LEN (AUTO BYPS RECLEN)
         AH    R3,RKP+2                ADD RELATIVE KEY POSITION
         L     R1,KEYLEN               LOAD KEY LENGTH
         BCTR  R1,0                    RELATIVE KEY LENGTH
         LA    R2,KEYTOP               POINT TO BOTTOM KEY
         EX    R1,MOVEKEY1             MOVE DATA
SETFWDRD DS    0H
         MVI   VSAMOPER,C'F'           FORWARD READ
         MVI   DIRC1GET,C'N'           DON'T GET FIRST RECORD
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         L     R1,ROWPTR               LOAD TOP ROW POINTER
         A     R1,LINESPR              ADD LINES PROCESSED
         BCTR  R1,0                    SUBTRACT 1 FOR BACKING UP 1 LINE
         ST    R1,ROWPTR               STORE ROW POINTER
         LH    R1,#MAXLINE             LOAD MOAX NO OF LINES
         ST    R1,#READ                STORE NUMBER READ
         MVI   VSAMOPER,C'G'           FORWARD READ
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMMDAT                CALL MOVE DATA ROUTINE
         MVC   LINESPR(4),=F'1'        INITIALISE LINES PROCESSED
POSPTRS  DS    0H
         L     R2,OFFSET               LOAD OFFSET INTO RECORD
         LH    R1,COLPTR1              LOAD LEFT POINTER
         CR    R1,R2                   Q. LEFT COMPARED TO OFFSET
         BH    SCRLEFT                    HIGHER SCROLL RIGHT
         LH    R1,COLPTR2              LOAD LEFT POINTER
         CR    R1,R2                   Q. LEFT COMPARED TO OFFSET
         BL    SCRRIGHT                   LOWER SCROLL RIGHT
         L     R2,LINESPR              STORE LINES PROCESSED
         CLI   HEXON,C'N'              Q. HEX ON
         BE    CONT#730                   N. BYPASS
         MH    R2,=H'4'                HEX LINES PER RECORD
         CLC   ROWPTR(4),=F'0'         Q. AT TOP OF DATASET
         BNE   CONT#730                   N. BYPASS TOP COMPENSATION
         SH    R2,=H'3'                COMPENSATE FOR TOP OF DATA
CONT#730 DS    0H
         LA    R2,1(R2)                ADD 1 FOR TOP OF PAGE
         MH    R2,=H'80'               LENGTH OF EACH LINE
         A     R2,OFFSET               ADD OFFSET INTO RECORD
         AH    R2,EDITCOMP             SUBTRACT EDIT COMPENSATOR
         SH    R2,COLPTR1              SUBTRACT LEFT COL POINTER
         LA    R2,1(R2)                COMPENSATE NON RELATIVE LEFT PTR
         MVC   CSR(7),=C'DISPLAY'      CURSOR POSITIONING
         UNPACK R2,8,CSRP              CURSOR POSITIONING
         B     EXITPR02                EXIT WITH LOW RETURN CODE
SCRRIGHT DS    0H
         L     R3,LINESPR              STORE LINES PROCESSED
         LTR   R3,R3                   Q. ALREADY ON LINE 0
         BZ    CONT#735                   Y. BYPASS -1
         BCTR  R3,0                    RELATIVE LINES PROCESSED
CONT#735 DS    0H
         CLI   HEXON,C'N'              Q. HEX ON
         BE    CONT#750                   N. BYPASS
CONT#740 DS    0H
         MH    R3,=H'4'                HEX LINES PER RECORD
         CLC   ROWPTR(4),=F'0'         Q. TOP OF DATA POINTER
         BNE   CONT#750                   N. BYPASS TOP COMPENSATOR
         LA    R3,1(R3)                ADD 1 FOR KEYS INDICATOR
CONT#750 DS    0H
         LA    R3,1(R3)                ADD 1 FOR KEYS INDICATOR
         MH    R3,=H'80'               LENGTH OF EACH LINE
         LA    R3,2(R3)                ADD 2 FOR 2ND CHAR NEXT LINE
         LH    R4,COLPTR1              LOAD LEFT POINTER
         SR    R2,R4                   SUBTRACT LEFT FROM OFFSET
         BCTR  R2,0                    SCROLL 1 LESS FOR MARGIN
         STH   R2,SCROLLN              STORE SCROLL AMOUNT
         MVC   ZSCROLLA(2),SCROLLN     ENSURE NOT 'CSR' SCROLL
         MVI   ZVERB,C'R'              SET SCROLL RIGHT
         MVC   CSR(7),=C'DISPLAY'      CURSOR POSITIONING
         CLI   PANELID,C'B'            Q. BROWSE
         BE    UPCSRP2                    Y. BYPASS
         AH    R3,EDITCOMP             ADD EDIT COMPENSATOR
UPCSRP2  DS    0H
         UNPACK R3,8,CSRP              CURSOR POSITIONING
         B     EXITPR02                EXIT PROGRAM
SCRLEFT  DS    0H
         L     R3,LINESPR              STORE LINES PROCESSED
         CLI   HEXON,C'N'              Q. HEX ON
         BE    CONT#800                   N. BYPASS
         MH    R3,=H'4'                HEX LINES PER RECORD
         CLC   ROWPTR(4),=F'0'         Q. TOP OF DATA POINTER
         BNE   CONT#800                   N. BYPASS TOP COMPENSATOR
         SH    R3,=H'3'                SUBTRACT 3 FOR TOP OF DATASET
CONT#800 DS    0H
         LA    R3,1(R3)                ADD 1 FOR TOP OF PAGE
         MH    R3,=H'80'               LENGTH OF EACH LINE
         LH    R4,COLPTR1              LOAD LEFT POINTER
         SR    R4,R2                   SUBTRACT OFFSET FROM LEFT
*---------------------------------------------------------------------*
         LH    R5,COLPTR1              LOAD LEFT POINTER
         SR    R5,R4                   SUBTRACT SCROLL AMOUNT
         LH    R2,COLPTR2              LOAD RIGHT POINTER
         SH    R2,EDITCOMP             SUBTRACT EDIT COMPENSATOR
         CR    R2,R5                   Q. WOULD CURSOR FIT IF LEFT=1
         BL    CONT#810                   N. BYPASS
         LH    R4,COLPTR1              SCROLL TO START OF LINE
         BCTR  R4,0                    LESS 1 FOR COL 1 POSIT
         A     R3,OFFSET               ADD OFFSET INTO RECORD
         B     CONT#820                BYPASS ADD 1 XTRA
CONT#810 DS    0H
         LA    R3,2(R3)                ADD 2 FOR 2ND CHAR NEXT LINE
         LA    R4,1(R4)                ADD 1 FOR SCROLL EXTRA CHAR
CONT#820 DS    0H
*---------------------------------------------------------------------*
         STH   R4,SCROLLN              STORE SCROLL AMOUNT
         MVC   ZSCROLLA(2),SCROLLN     ENSURE NOT 'CSR' SCROLL
         MVI   ZVERB,C'L'              SET SCROLL LEFT
         MVC   CSR(7),=C'DISPLAY'      CURSOR POSITIONING
         CLI   PANELID,C'B'            Q. BROWSE
         BE    UPCSRP3                    Y. BYPASS
         AH    R3,EDITCOMP             ADD EDIT COMPENSATOR
UPCSRP3  DS    0H
         UNPACK R3,8,CSRP              CURSOR POSITIONING
         B     EXITPR02                EXIT PROGRAM
*---------------------------------------------------------------------*
FOUNDMSG DS    0H
         MVC   GC011S(05),=C'CHARS'
         LH    R1,SPARMLEN             LOAD SAVED PARAMETER LENGTH
         CH    R1,=H'19'               Q. STRING > LIMIT
         BNH   FOUNDMC1                   N. CONTINUE
         LA    R1,19                   SET TO LIMIT
FOUNDMC1 DS    0H
         BCTR  R1,0                    LENGTH FOE EX COMMAND
         LA    R2,GC011S+6             DESTINATION
         LA    R3,SPARM                SOURCE
         EX    R1,MOVEDATX             MOVE DATA
         AR    R2,R1                   ADD MOVE LENGTH
         MVC   2(5,R2),=C'FOUND'
         LA    R2,GC011                SOURCE ADDRESS
         MVC   0(16,R2),=C'SEARCH FOR CHARS'
         LA    R2,17(R2)                POINT PAST DATA
         LH    R1,SPARMLEN             LOAD SAVED PARAMETER LENGTH
         CH    R1,=H'62'               Q. STRING > LIMIT
         BNH   FOUNDMC2                   N. CONTINUE
         LA    R1,62                   SET TO LIMIT
FOUNDMC2 DS    0H
         BCTR  R1,0                    LENGTH FOR EX COMMAND
         LA    R3,SPARM                SOURCE
         EX    R1,MOVEDATX             MOVE DATA
         LA    R1,1(R1)                ADD BACK CHARACTER
         AR    R2,R1                   ADD TO SOURCE
         MVC   1(15,R2),=C'WAS SUCCESSFUL.'
         BR    R14                     RETURN TO CALLER
*---------------------------------------------------------------------*
ERROR1   DS    0H
         MVC   GC011S(24),=C'PARAMETER NOT RECOGNISED'
         MVC   GC011(69),=C'CHECK FOR MISSPELLED KEYWORDS OR TOO MANY BO
               OUNDS OR RANGE PARAMETERS.'
         B     EXITPR08                ERROR EXIT
ERROR2   DS    0H
         MVC   KEYTOP,KEYBOT           RESET BOTTOM KEY FOR REPOSIT
         MVI   VSAMOPER,C'F'           FORWARD READ
         MVI   DIRC1GET,C'Y'           GET FIRST RECORD
         LA    R1,RVSMCOMA             COMMON AREA ADDRESS
         CALL  RVSMREAD                CALL I/O ROUTINE
         CLI   BOTTOM,C'Y'             Q. AT BOTTOM ALREADY
         BE    ERROR3                     Y. NEXT ERROR
         CLC   SCSR(7),=C'DISPLAY'     Q. CURSOR IN DISPLAY AREA
         BE    ERROR2C                    Y. TELL OF BOTTOM
         CLC   ROWPTR(4),=F'0'         Q. TOP OF DATA
         BE    ERROR3                     Y. NEXT ERROR
ERROR2C  DS    0H
         MVC   GC011S(24),=C'*BOTTOM OF DATA REACHED*'
         LA    R2,GC011                SOURCE ADDRESS
         MVC   0(5,R2),=C'CHARS'       MOVE LITERAL
         LA    R2,6(R2)                POINT PAST DATA
         LH    R1,SPARMLEN             LOAD SAVED PARAMETER LENGTH
         CH    R1,=H'73'               Q. STRING > LIMIT
         BNH   ERROR2C1                   N. CONTINUE
         LA    R1,73                   SET TO LIMIT
ERROR2C1 DS    0H
         BCTR  R1,0                    LENGTH FOR EX COMMAND
         LA    R3,SPARM                SOURCE
         EX    R1,MOVEDATX             MOVE DATA
         LA    R1,1(R1)                ADD BACK CHARACTER
         AR    R2,R1                   ADD TO SOURCE
         MVC   1(11,R2),=C'- NOT FOUND'
         MVC   13(41,R2),=C'. PRESS ''RFIND'' KEY TO CONTINUE FROM TOP..
               '
         MVI   BOTTOM,C'Y'             SET AT BOTTOM OF DATASET FLAG
         MVC   CSR(16),SCSR            RESTORE CURSOR POSITIONING
         CLC   CSR(4),=C'ZCMD'         Q. CURSOR ON COMMAND LINE
         BNE   EXITPR04                   N. ERROR EXIT
         MVC   CSRP,SPACES             INITIALISE POSITION
         B     EXITPR04                ERROR EXIT
ERROR3   DS    0H
         MVI   BOTTOM,C'N'             SET AT BOTTOM OFF
         MVC   GC011S(09),=C'NO CHARS '
         LH    R1,SPARMLEN             LOAD SAVED PARAMETER LENGTH
         CH    R1,=H'15'               Q. STRING > LIMIT
         BNH   ERROR3C1                   N. CONTINUE
         LA    R1,15                   SET TO LIMIT
ERROR3C1 DS    0H
         BCTR  R1,0                    LENGTH FOE EX COMMAND
         LA    R2,GC011S+9             DESTINATION
         LA    R3,SPARM                SOURCE
         EX    R1,MOVEDATX             MOVE DATA
         AR    R2,R1                   ADD MOVE LENGTH
         MVC   2(5,R2),=C'FOUND'
         MVC   GC011S(09),=C'NO CHARS '
         MVC   GC011,SPACES            INITIALISE MESSAGE AREA
         LA    R2,GC011                SOURCE ADDRESS
         MVC   0(5,R2),=C'CHARS'       MOVE LITERAL
         LA    R2,6(R2)                POINT PAST DATA
         LH    R1,SPARMLEN             LOAD SAVED PARAMETER LENGTH
         CH    R1,=H'73'               Q. STRING > LIMIT
         BNH   ERROR3C2                   N. CONTINUE
         LA    R1,73                   SET TO LIMIT
ERROR3C2 DS    0H
         BCTR  R1,0                    LENGTH FOR EX COMMAND
         LA    R3,SPARM                SOURCE
         EX    R1,MOVEDATX             MOVE DATA
         LA    R1,1(R1)                ADD BACK CHARACTER
         AR    R2,R1                   ADD TO SOURCE
         MVC   1(11,R2),=C'- NOT FOUND'
         MVC   13(13,R2),=C'ON ANY LINES.'
         MVC   CSR(16),SCSR            RESTORE CURSOR POSITIONING
         CLC   CSR(4),=C'ZCMD'         Q. CURSOR ON COMMAND LINE
         BNE   EXITPR04                   N. ERROR EXIT
         MVC   CSRP,SPACES             INITIALISE POSITION
         B     EXITPR04                ERROR EXIT
ERROR4   DS    0H
         MVC   GC011S(18),=C'INVALID HEX STRING'
         MVC   GC011(20),=C'THE HEX STRING MUST '
         MVC   GC011+20(34),=C'HAVE AN EVEN NUMBER OF HEX DIGITS.'
         B     SETCSRP1                GO SET CURSOR
ERROR5   DS    0H
         MVC   GC011S(18),=C'INVALID HEX STRING'
         MVC   GC011(20),=C'THE HEX STRING MUST '
         MVC   GC011+20(34),=C'CONTAIN ONLY HEX DIGITS (0-9,A-F).'
SETCSRP1 DS    0H
         MVC   CSR(4),=C'ZCMD'         PUT CURSOR ON ZCMD
         MVC   ZCMD+2(77),PARM         RESTORE ZCMD
         MVC   CSRP(8),=C'00000003'    PLACE CURSOR IN FIELD
         B     EXITPR08                ERROR EXIT
*---------------------------------------------------------------------*
EXITPR00 DS    0H
         XR    R15,R15                 SET RETURN CODE = 0
         ST    R15,R15SAVER            SAVE RETURN CODE
         B     EXITPROG                COMMON RETURN POINT
EXITPR02 DS    0H
         MVI   BOTTOM,C'N'             TURN AT BOTTOM OFF
         CLI   INDISPL,C'N'            Q. MESSAGE ALREADY SET
         BE    EXPR02C9                   Y. BYPASS MESSAGE REST
         CLI   HOWMANY,C'A'            Q. MESSAGE ALREADY SET BY ALL
         BE    EXPR02C9                   Y. BYPASS MESSAGE REST
         BAL   R14,FOUNDMSG            GO AND OUTPUT FOUND MESSAGE
EXPR02C9 DS    0H
         LA    R15,2                   SET RETURN CODE
         ST    R15,R15SAVER            SAVE RETURN CODE
         B     EXITPROG                COMMON RETURN POINT
EXITPR04 DS    0H
         LA    R15,4                   SET RETURN CODE
         ST    R15,R15SAVER            SAVE RETURN CODE
         B     EXITPROG                COMMON RETURN POINT
EXITPR08 DS    0H
         LA    R15,8                   SET RETURN CODE
         ST    R15,R15SAVER            SAVE RETURN CODE
EXITPROG DS    0H
         ISPEXEC 'SETMSG MSG(GC011)'
         L     R15,R15SAVER            LOAD RETURN CODE
         RACKOFF RC=(R15)              RETURN TO THE CALLER
*---------------------------------------------------------------------*
MOVEDAT1 MVC   PARM(0),PARM+2          MOVE DATA
MOVEDAT2 MVC   PARM(0),GC011           MOVE DATA
MOVEDAT3 MVC   PARM(0),PARM+1          MOVE DATA
MOVEDAT4 MVC   FINDSTRG(0),PARM        MOVE DATA
MOVEDATX MVC   0(0,R2),0(R3)           MOVE DATA
SRCHSTRG CLC   UPPER(0),0(R5)          COMPARE WITH FIND STRING
MOVEKEY1 MVC   0(0,R2),0(R3)           MOVE KEY
MOVEUCAS MVC   UPPER(0),0(R2)          MOVE KEY
TRANUCAS TR    UPPER(0),TRTUPPER       TRANSLATE TO UPPER CASE
TESTUNPR TRT   0(0,R2),TRTNONPR        FIND NON PRINTABLE STRING
*=====================================================================*
         LTORG
*---------------------------------------------------------------------*
R2SAVER  DS    F
         ORG   R2SAVER
R15SAVER DS    F
         ORG
OFFSET   DS    F
LINESPR  DS    F
REMAINDR DS    H
BOTTOM   DC    CL1'N'
POSATOP  DC    CL1'N'
INDISPL  DS    CL1
LASTCHAR DS    CL1
HOWMANY  DS    CL2
UPPER    DS    CL77
         COPY  RVSMTRTB
KEYTOPS  DS    CL256
*---------------------------------------------------------------------*
RVSMCOMA DSECT
         COPY  RVSMCOMA
         END
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-*
