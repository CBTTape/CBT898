*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       TITLE:    'READ A VSAM DATASET'
**       SYSTEM:   N/A
**       MODULE:   RVSMMDAT
**       PROGRAM:  RVSMREAD
**       FUNCTION: PERFORM ALL I/O (INCLUDING OPEN CLOSE ETC..) ON THE
**                 VSAM DATASET.
**       AUTHOR:   A. KARA.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
RVSMMDAT KICKOFF (R13),LIST=NO
*---------------------------------------------------------------------*
START    DS    0H
         LR    R12,R1                  ADDRESABILITY TO COMMON DATA
         USING RVSMCOMA,R12            ESTABLISH ADDRESABILITY
         MVI   TRTABE+X'22',X'11'      SET X'22' TRANSLATE VALUE
         CLI   RCODE,C'C'              Q. CHANCEL COL INDICATOR
         BE    KEYINDIC                   Y. JUST PROCESS COL INDICATOR
         CLEARV  DISPLAY               CLEAR DISPLAY AREA
*---------------------------------------------------------------------*
         CLI   EMPT1STI,C'Y'           Q. EMPTY + 1ST TIME THRU
         BNE   CONT#000                   N. BYPASS
         LA    R1,RVSMCOMA             ADDRESS OF COMMON AREA
         CALL  RVSMEMPT                CALL EMPTY EDIT ROUTINE
         B     EXITPR00                EXIT PROGRAM
CONT#000 DS    0H
*---------------------------------------------------------------------*
         LH    R7,#MAXLINE             SET LOOP COUNTER
         CLI   HEXON,C'Y'              Q. HEX ON
         BNE   CONT#100                   N. BYPASS
         LH    R7,#HEXLINE             LOAD NUMBER OF HEX LINES PER SCR
CONT#100 DS    0H
         LA    R4,DISPLAY+80           LOAD DISPLAY ADDRESS
         L     R6,ARRAY@               LOAD ARRAY ADDRESS
         L     R5,ROWPTR               SET ROW POINTER
         L     R8,LRECL                LOAD RECORD LENGTH
         LR    R9,R8                   LOAD RECORD LENGTH
         LA    R9,4(R9)                ADD RECORD LENGTH HOLDER LENGTH
         BCTR  R8,0                    RELATIVE RECORD LENGTH
         CLI   PANELID,C'E'            Q. EDITING
         BE    CONT#120                   Y. BYPASS
         UNPACK R5,8,DSNAME+49         UNPACK ROW PTR IN TOP DISPLAY
CONT#120 DS    0H
         LTR   R5,R5                   Q. ROW POINTER TOP
         BNZ   NOTMAXDN                   N. BYPASS
         MVC   1(79,R4),=C'****** *************************** TOP OF DAT
               TA ********************************'
         MVI   0(R4),X'12'             MOVE ATTRIBUTE BYTE
         MVI   7(R4),X'03'             MOVE ATTRIBUTE BYTE
         CLI   PANELID,C'E'            Q. EDITING
         BE    CONT#110                   Y. BYPASS
         MVC   0(8,R4),=C'********'    MOVE OVER EDIT DISPLAY
CONT#110 DS    0H
         AR    R6,R9                   UP BY LENGTH OF DATA
         AH    R4,=H'80'               POINT TO THE NEXT LINE
         LA    R5,1(R5)                INCREMENT ROW POINTER
         CLI   HEXON,C'Y'              Q. HEX ON
         BE    NOTMAXDN                   Y. BYPASS DECREMENT BY 1
         BCTR  R7,0                    DECREMENT LOOP COUNTER BY 1
NOTMAXDN DS    0H
         LA    R1,79                   LOAD MOVE LENGTH
         SH    R1,EDITCOMP             SUBTRACT EDIT COMPENSATOR
         STH   R1,MAXMOVEL             STORE MOVE LENGTH
         LH    R1,COLPTR2              LOAD RIGHT COL POINTER
         SH    R1,COLPTR1              SUBTRACT LEFT POINTER
         CH    R1,MAXMOVEL             Q. FULL DATA TO MOVE
         BNL   CONT#200                   Y. BYPASS
         STH   R1,MAXMOVEL             STORE NEW MOVE LENGTH
CONT#200 DS    0H
         MVI   RCODE,C'0'              SET ZERO RETURN CODE
MOVELOP1 DS    0H
         C     R5,NLOGR                Q. LAST RECORD
         BL    CONT#300                   N. BYPASS
         MVC   1(79,R4),=C'****** ************************* BOTTOM OF DA
               ATA *******************************'
         MVI   0(R4),X'12'             MOVE ATTRIBUTE BYTE (INPUT/RED)
         MVI   7(R4),X'03'             MOVE ATTRIBUTE BYTE
         CLI   PANELID,C'E'            Q. EDITING
         BE    CONT#210                   Y. BYPASS
         MVC   0(8,R4),=C'********'    MOVE OVER EDIT DISPLAY
CONT#210 DS    0H
         B     LOP1END                 EDIT DATA MOVE
CONT#300 DS    0H
         LR    R2,R4                   USE R2 FOR DESTINATION OF KEY
         CLI   PANELID,C'B'            Q. BROWSE
         BE    CONT#400                   Y. BYPASS SEQ NUMBER MOVE
         MVI   0(R2),X'11'             MOVE INDICATOR (INPUT/GREEN)
         UNPACK R5,6,DWORK8            UNPACK LINE NUMBER
         MVC   1(6,R2),DWORK8          UNPACK LINE NUMBER
         MVI   7(R2),X'11'             MOVE INDICATOR (INPUT/GREEN)
         AH    R2,EDITCOMP             ADD EDIT COMPENSATOR
CONT#400 DS    0H
         LH    R1,MAXMOVEL             LOAD MAXIMUM MOVE LENGTH
         L     R3,0(R6)                LOAD RECLEN
         CH    R3,COLPTR1              Q. LEFT PAST RECLEN
         BNL   CONT#405                   N. MOVE
         CLI   HEXON,C'Y'              Q. HEX ON
         BNE   LOP1CONT                   N. PROCESS NEXT LINE
         STM   R5,R14,SAVSUBR1         SAVE REGISTERS (SYNC W RESTORE)
*---------------------------------------------------------------------*
         CLI   PANELID,C'B'            Q. BROWSE
         BE    HEXMEND1                   Y. MOVE HEX SEPERATOR
         BCTR  R7,0                    POINT BACK OVER ATR BYTE
         MVI   0(R2),X'01'             MOVE INDICATOR (OUTPUT/GREEN)
         LA    R7,1(R7)                REPOSITION POINTER
*---------------------------------------------------------------------*
         B     HEXMEND1                MOVE HEX SEPERATOR
CONT#405 DS    0H
         SH    R3,COLPTR1              SUBTRACT LEFT POINTER
         CH    R3,MAXMOVEL             Q. LESS THAN MAX MOVE CALCULETED
         BNL   CONT#410                   N. BYPASS
         LR    R1,R3                   SET NEW TEMPORARY MOVE LENGTH
CONT#410 DS    0H
*---------------------------------------------------------------------*
         STH   R1,MOVEL                LOAD MOVE LENGTH
         LH    R3,COLPTR1              LOAD LEFT COL POINTER
         BCTR  R3,0                    RELATIVE POSITION
         AR    R3,R6                   OFFSET INTO DATA
         LA    R3,4(R3)                + 4 FOR RECLEN
         EX    R1,MOVEDAT1             MOVE LINE OF DATA
         CLI   PANELID,C'B'            Q. BROWSE
         BNE   CONT#415                   Y. TRANSLATE EDIT
         EX    R1,TRANDAT1             TRANSLATE LINE OF DATA (BROWSE)
         B     CONT#416                BYPASS
CONT#415 DS    0H
         EX    R1,TRANDAT2             TRANSLATE LINE OF DATA (EDIT)
*---------------------------------------------------------------------*
         CH    R1,=H'71'               Q. MOVE FULL LINE
         BE    CONT#416                   Y. BYPASS
         AR    R1,R2                   POINT IN LINE
         MVI   1(R1),X'01'             MOVE ATTRIBUTE (OUTPUT/GREEN)
*---------------------------------------------------------------------*
CONT#416 DS    0H
         CLI   HEXON,C'Y'              Q. HEX ON
         BNE   LOP1CONT                   N. PROCESS NEXT LINE
         STM   R5,R14,SAVSUBR1         SAVE REGISTERS
         LA    R8,HEXAREA              LOAD DESTINATION ADDRESS
         LH    R1,MOVEL                LOAD MOVELENGTH
         LA    R1,1(R1)                +1 FOR NON RELATIVE LENGTH
         HEXCHMAC (R3),(R8),(R1)       CONVERT TO CHARACTER
         LA    R5,HEXAREA              SOURCE
         LA    R7,80(R4)               DESTINATION LINE 1
         CLI   PANELID,C'B'            Q. BROWSE
         BE    CONT#420                   Y. BYPASS
         MVI   00(R7),X'01'            MOVE INDICATOR (OUTPUT/GREEN)
         MVI   07(R7),X'11'            MOVE INDICATOR (INPUT/GREEN)
         MVI   80(R7),X'01'            MOVE INDICATOR (OUTPUT/GREEN)
         MVI   87(R7),X'11'            MOVE INDICATOR (INPUT/GREEN)
CONT#420 DS    0H
         AH    R7,EDITCOMP             ADD EDIT COMTENSATOR
         LH    R9,MOVEL                MOVE LENGTH
         LA    R9,1(R9)                +1 ON RELATIVE LENGTH
HEXMLOP1 DS    0H
         MVC   0(1,R7),0(R5)           MOVE 1ST NIBBLE TO LINE1
         MVC   80(1,R7),1(R5)          MOVE 2ND NIBBLE TO LINE2
         LA    R7,1(R7)                NEXT CHAR POSITION LINE1
         LA    R5,2(R5)                NEXT CHAR POSITION SOURCE
         BCT   R9,HEXMLOP1             LOOP TILL END
*---------------------------------------------------------------------*
         CLI   PANELID,C'E'            Q. EDITING
         BNE   HEXMEND1                   N. BYPASS EDIT ATTR BYTE
         MVI   0(R7),X'01'             SET ATTRIBUTE BYTE (OUT/GREEN)
         MVI   80(R7),X'01'            SET ATTRIBUTE BYTE (OUT/GREEN)
*---------------------------------------------------------------------*
HEXMEND1 DS    0H
         LA    R4,240(R4)              UP DESTINATION BY 3 LINES
         MVI   0(R4),X'04'             ATTRIBUTE BYTE (OUT/WHITE)
         MVI   1(R4),C'-'              SEPERATOR
         MVC   2(78,R4),1(R4)          RIPPLE MOVE
         MVI   79(R4),X'03'            ATTRIBUTE BYTE (OUT/BLUE)
         LM    R5,R14,SAVSUBR1         RESTORE REGISTERS
LOP1CONT DS    0H
         LA    R4,80(R4)               POINT TO THE NEXT LINE
         AR    R6,R9                   UP BY LENGTH OF DATA
         LA    R5,1(R5)                INCREMENT ROW POINTER
         BCT   R7,MOVELOP1             LOOP TILL END
         C     R5,NLOGR                Q. LAST RECORD
         BL    LOP1END                    N. BYPASS
         MVC   1(79,R4),=C'****** ************************* BOTTOM OF DA
               ATA *******************************'
         MVI   0(R4),X'12'             MOVE ATTRIBUTE BYTE (INPUT/RED)
         MVI   7(R4),X'03'             MOVE ATTRIBUTE BYTE
         CLI   PANELID,C'E'            Q. EDITING
         BE    LOP1END                    Y. BYPASS
         MVC   0(8,R4),=C'********'    MOVE OVER EDIT DISPLAY
LOP1END  DS    0H
*---------------------------------------------------------------------*
KEYINDIC DS    0H
         MVC   DISPLAY(80),SPACES      CLEAD KEY INDICATOR
         CLI   PANELID,C'B'            Q. BROWSE
         BE    CONT#510                   Y. BYPASS
         MVI   DISPLAY,X'03'           ATTRIBUTE (OUTPUT/BLUE)
CONT#510 DS    0H
*---------------------------------------------------------------------*
*        CLI   COLON,C'N'              Q. COL INDICATOR ON
*        BE    MOVEKEYI                   N. JUST MOVE KEY
         LA    R9,DISPLAY              LOAD START OF SOURCE
         AH    R9,EDITCOMP             SUBTRACT EDIT COMPENSATOR
         LH    R10,COLPTR2             LOAD RIGHT POINTER
         C     R10,LRECL               Q. RIGHT PAST LOGIC REC LENGTH
         BNH   CONT#515                   N. BYPASS
         L     R10,LRECL               LOAD LOGICAL RECORD LENGTH
CONT#515 DS    0H
         SH    R10,COLPTR1             SUBTRACT LEFT POINTER
         LA    R10,1(R10)              ACTUAL LENGTH OF COL INDIC
         LH    R8,COLPTR1              VALUE OF LEFT POINTER
COLPLOP1 DS    0H
         XR    R6,R6                   INIT EVEN PAIR
         LR    R7,R8                   LOAD COL VALUE
         D     R6,=F'10'               DIVIDE BY 10
         LTR   R6,R6                   Q. ANY REMAINDER
         BNZ   COLPCON1                   Y. NOT DIVISIBLE BY 10
         XR    R6,R6                   INIT EVEN PAIR
         D     R6,=F'10'               DIVIDE BY 10
         UNPACK R6,1,DWORK8            STORE LAST DIGIT OF 10 DIVIDEND
         MVC   0(1,R9),DWORK8          STORE LAST DIGIT OF 10 DIVIDEND
         B     COLPCON5                EVAL NEXT CHAR
COLPCON1 DS    0H
         XR    R6,R6                   INIT EVEN PAIR
         LR    R7,R8                   LOAD COL VALUE
         D     R6,=F'5'                DIVIDE BY 5
         LTR   R6,R6                   Q. ANY REMAINDER
         BNZ   COLPCON2                   Y. NOT DIVISIBLE BY 5
         MVI   0(R9),C'+'              MOVE 5 INDICATOR
         B     COLPCON5                EVAL NEXT CHAR
COLPCON2 DS    0H
         MVI   0(R9),C'-'              MOVE DIGIT INDICATOR
COLPCON5 DS    0H
         LA    R9,1(R9)                NEXT COL POSITION
         LA    R8,1(R8)                NEXT COL VALUE
         BCT   R10,COLPLOP1            LOOP TILL END
*---------------------------------------------------------------------*
MOVEKEYI DS    0H
         L     R3,RKP                  LOAD RELATIVE KEY POSITION
*<=====  LA    R3,1(R3)                ADD 1 FOR ACTUAL POSITION
         CH    R3,COLPTR2              Q. RIGHT COLUMN < RKP
         BH    NOKEYIND                   N. NO KEY INDICATOR
         A     R3,KEYLEN               ADD KEY LENGTH TO RKP
         CH    R3,COLPTR1              Q. LEFT COLUMN > END OF KEY
         BL    NOKEYIND                   N. NO KEY INDICATOR
         L     R3,RKP                  LOAD RELATIVE KEY POSITION
         LA    R3,1(R3)                ACTUAL KEY POSITION
         LA    R2,DISPLAY              LOAD DISPLAY ADDRESS
         AH    R2,EDITCOMP             ADD EDIT COMPENSATOR
         CH    R3,COLPTR1              Q. RKP < LEFT POINTER
         BL    CONT#520                   Y. GO MOVE OFF SCREEN INDIC
         SH    R3,COLPTR1              SUBTRACT LEFT POINTER
         AR    R2,R3                   DISPLACEMENT INTO DISPLAY
         MVI   0(R2),C'|'              MOVE KEY START INDICATOR
         B     CONT#530                BYPASS POINTER INSIDE RKP
CONT#520 DS    0H
         MVI   0(R2),C'<'              MOVE OFF SCREEN INDICATOR
CONT#530 DS    0H
*---------------------------------------------------------------------*
         L     R3,RKP                  LOAD REL KEY POSISTION
         A     R3,KEYLEN               ADD KEY LENGTH
*<====== LA    R3,1(R3)                MAKE UP FOR RELATIVE POS
         CH    R3,COLPTR2              Q. IN DISPLAYABLE AREA
         BNH   CONT#552                   Y. GO MOVE TERMINATOR INDIC
         LA    R5,DISPLAY+79           LOAD DESTINATION
         MVI   0(R5),C'>'              MOVE CONT INDICATOR
         B     CONT#554                BYPASS TERMINATOR
CONT#552 DS    0H
         SH    R3,COLPTR1              SUBTRACT LEFT POINTER
         LA    R5,DISPLAY              LOAD START OF DISPLAY
         AH    R5,EDITCOMP             ADD ADIT COMPENSATOR
         AR    R5,R3                   DISPLACEMENT INTO DISPLAY
         MVI   0(R5),C'¦'              MOVE KEY INDICATOR
CONT#554 DS    0H
*---------------------------------------------------------------------*
         SR    R5,R2                   SUBTRACT START FROM END
         CH    R5,=H'3'                Q. KEY LOGER THAN 3 BYTES
         BNH   CONT#560                   N. BYPASS
         MVC   1(3,R2),=C'KEY'         MOVE KEY INDICATOR
CONT#560 DS    0H
         L     R1,RKP                  LOAD REL KEY POSISTION
         LA    R1,1(R1)                MAKE UP FOR RELATIVE POSITION
         CH    R1,COLPTR1              Q. HIGHER THAN LEFT COL PTR
         BNL   CONT#570                   N. BYPASS
         LA    R1,DISPLAY              LOAD DISPLAY ADDRESS
         AH    R1,EDITCOMP             ADD EDIT COMPENSATOR
         CLI   0(R1),C'¦'              Q. 1ST. BYTE TERMINATION CHAR
         BE    CONT#570                   Y. BYPASS
         MVI   0(R1),C'<'              MOVE MORE KEY INDICATOR
CONT#570 DS    0H
NOKEYIND DS    0H
         LH    R1,COLPTR1              LOAD COL POINTER START
         UNPACK R1,4,DSNAME+62         MOVE POINTER
         LH    R1,COLPTR2              LOAD COL POINTER END
         C     R1,LRECL                Q. RIGHT GREATER THAN LOGIC REC
         BNH   CONT#580                   N. BYPASS
         L     R1,LRECL                SET LOGIC RECLEN AS RIGHT PTR
         STH   R1,COLPTR2              STORE NEW RIGHT POINTER
CONT#580 DS    0H
         UNPACK R1,4,DSNAME+67         MOVE POINTER
*---------------------------------------------------------------------*
EXITPR00 DS    0H
         RACKOFF RC=0                  EXIT PROGRAM
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*---------------------------------------------------------------------*
MOVEDAT1 MVC   0(0,R2),0(R3)           MOVE DATA
TRANDAT1 TR    0(0,R2),TRTABLE         TRANSLATE (UNDER BROWSE)
TRANDAT2 TR    0(0,R2),TRTABE          TRANSLATE (UNDER EDIT)
MOVEIND1 MVC   1(0,R5),0(R5)           MOVE INDICATOR
*=====================================================================*
         LTORG
*---------------------------------------------------------------------*
MOVEL    DS    H                       MOVE LENGTH
MAXMOVEL DS    H                       MAXIMUM MOVE LENGTH
SAVSUBR1 DS    18F
HEXAREA  DS    2CL100
         COPY  RVSMTRTB                COPY BOOK TO MAINTAIN CAPS ON
*---------------------------------------------------------------------*
RVSMCOMA DSECT
         COPY  RVSMCOMA
DUMPL    EQU   *-RVSMCOMA
         END
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-*
