*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       Title:    'SUBSTRING RANGE FUNCTION'
**       System:   REXX Function
**       Module:   SUBSTRR
**       Program:  SUBSTRR
**       Function: The purpose of this program is to SUBSTR a string
**                 in much the same way as the SUBSTR command, except
**                 you pass it the start and end column rather than the
**                 start and length.
**
**                 Syntax:
**                    SUBSTRX(string,scol,ecol,pad)
**                      where: string - variable name of literal string
**                             scol   - starting column
**                             ecol   - ending column
**                             pad    - pad character
**
**                 Returned values:
**                    string
**
**                 Program return code:
**                    0  - along with a valid string
**                   20  - for invalid data causing the REXX EXEC to
**                         terminate
**                         The following circumstances will cause a
**                         RC=20:
**                           - Missing string
**                           - Missing start col
**                           - start column greater than end column
**
**       Macros:   The following macros have been used from @MACROS
**                   - KICKOFF
**                   - RACKOFF
**
**       Notes:    Program is re-entrant.
**       Author:   ASYSTS Pty. Ltd. (A. Kara)
**       Date:     18/08/93.
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*
*        COPY    @MACROS                    COMMON MACROS USED BY PROG
*
***********************************************************************
SUBSTRR  KICKOFF (R12),WORKAREA,WORKAREL,AMODE=31,RMODE=ANY
*
***********************************************************************
* Get the parameter info...                                           *
***********************************************************************
         LR    R11,R1                       EFPL ADDRESS
         USING EFPL,R11                     ESTABLISH ADDRESABILITY
         L     R10,EFPLARG                  ARGUMENT TABLE
         USING ARGTABLE_ENTRY,R10           ESTABLISH ADDRESABILITY
         L     R8,EFPLEVAL                  ADDRESS OF EVALBLOCK
         L     R9,0(0,R8)                   EVALBLOCK
         USING EVALBLOCK,R9                 ESTABLISH ADDRESABILITY
         MVI   PADCHAR,C' '                 INITIALISE PAD CHARACETER
***********************************************************************
* Get the string value passed                                         *
***********************************************************************
         L     R6,ARGTABLE_ARGSTRING_PTR    PARAMETER ADDRESS FIELD
         C     R6,=F'-1'                    Q. END OF PARMLIST ?
         BE    EXITPR20                        Y. EXIT WITH RC=20
         LTR   R8,R8                        Q. PARAMETER PRESENT
         BE    EXITPR20                        Y. EXIT WITH RC=20
         L     R7,ARGTABLE_ARGSTRING_LENGTH LENGTH OF STING FIELD
         LTR   R7,R7                        Q. IS LENGTH > 0 BYTES
         BZ    EXITPR20                        N. EXIT WITH RC=20
         ST    R7,LENGTH                    SAVE LENGTH OF STRING
***********************************************************************
* Get start column of substring...                                    *
***********************************************************************
         LA    R10,8(R10)                   POINT TO NEXT PARAMETER SET
         L     R8,ARGTABLE_ARGSTRING_PTR    START POINTER PARAMETER
         C     R8,=F'-1'                    Q. END OF PARMLIST ?
         BE    EXITPR20                        Y. EXIT WITH RC=20
         LTR   R8,R8                        Q. PARAMETER PRESENT
         BZ    EXITPR20                        N. EXIT WITH RC=20
         L     R7,ARGTABLE_ARGSTRING_LENGTH LENGTH OF STING FIELD
         LTR   R7,R7                        Q. IS LENGTH > 0 BYTES
         BZ    EXITPR20                        N. EXIT WITH RC=20
         MVI   DATA1,C'0'                   MOVE ZEROS TO
         MVC   DATA1+1(7),DATA1             TO WORK FIELD
         LA    R2,DATA1+8                   POINT PAST LAST CHAR
         SR    R2,R7                        SUBTRACT PARAMETER LENGTH
         BCTR  R5,0                         RELATIVE LENGTH
         EX    R7,MOVESTRT                  MOVE STARTING VALUE
         PACK  DWORK8(8),DATA1(8)           PACK START COLUMN
         CVB   R1,DWORK8                    CONVERT TO BINARY
         ST    R1,SCOL                      STORE STARTING COLUMN
***********************************************************************
* Get ending column of substring...                                   *
***********************************************************************
         LA    R10,8(R10)                   POINT TO NEXT PARAMETER SET
         L     R8,ARGTABLE_ARGSTRING_PTR    START POINTER PARAMETER
         LTR   R8,R8                        Q. PARAMETER PRESENT
         BZ    TESTPADC                        N. GO TEST FOR PAD CHAR
         C     R8,=F'-1'                    Q. END OF PARMLIST ?
         BE    GOTPARMS                        Y. GO PROCESS DATA
         L     R7,ARGTABLE_ARGSTRING_LENGTH LENGTH OF STING FIELD
         LTR   R7,R7                        Q. IS LENGTH > 0 BYTES
         BZ    TESTPADC                        Y. GO TEST PAC CHAR
         MVI   DATA1,C'0'                   MOVE ZEROS TO
         MVC   DATA1+1(7),DATA1             TO WORK FIELD
         LA    R2,DATA1+8                   POINT PAST LAST CHAR
         SR    R2,R7                        SUBTRACT PARAMETER LENGTH
         BCTR  R7,0                         RELATIVE LENGTH
         EX    R7,MOVESTRT                  MOVE STARTING VALUE
         PACK  DWORK8(8),DATA1(8)           PACK START COLUMN
         CVB   R1,DWORK8                    CONVERT TO BINARY
         ST    R1,ECOL                      STORE CALCULATED LENGTH
***********************************************************************
* Test if pad character passed.....                                   *
***********************************************************************
TESTPADC DS    0H
         LA    R10,8(R10)                   POINT TO NEXT PARAMETER SET
         L     R8,ARGTABLE_ARGSTRING_PTR    START POINTER PARAMETER
         LTR   R8,R8                        Q. PARAMETER PRESENT
         BZ    GOTPARMS                        N. GO PROCESS DATA
         C     R8,=F'-1'                    Q. END OF PARMLIST ?
         BE    GOTPARMS                        Y. GO PROCESS DATA
         L     R7,ARGTABLE_ARGSTRING_LENGTH LENGTH OF STING FIELD
         LTR   R7,R7                        Q. IS LENGTH > 0 BYTES
         MVC   PADCHAR(1),0(R8)             MOVE PAD CHARACETER
***********************************************************************
* Process data...                                                     *
***********************************************************************
GOTPARMS DS    0H
         L     R3,ECOL                      LOAD END COLUMN
         L     R2,SCOL                      LOAD START COLUMN
         CR    R2,R3                        Q. START > END
         BH    EXITPR20                        Y. EXIT WITH ERROR
         SR    R3,R2                        SUBTRACT START FROM END
         LA    R3,1(R3)                     ADD 1 FOR COMPENSATION
         ST    R3,EVALBLOCK_EVLEN           STORE RESULT LENGTH
         BCTR  R2,0                         RELATIVE POINTER
         AR    R6,R2                        OFFSET INTO DATA
         LA    R2,EVALBLOCK_EVDATA          POINT TO OUTPUT DATA
         XR    R7,R7                        INITIALISE SOURCE LENGTH
         CLC   SCOL(4),LENGTH               Q. START > LENGTH
         BH    MOVEPADC                        Y. BYPASS
         L     R7,LENGTH                    LOAD LENGTH OF STRING
         S     R7,SCOL                      SUBTRACT START
         LA    R7,1(R7)                     ADD 1 FOR COMPENSATION
MOVEPADC DS    0H
         ICM   R7,B'1000',PADCHAR           SET PAD CHARACTER OF SPACE
         MVCL  R2,R6                        MOVE DATA
EXITPR00 DS    0H
         SR    R15,R15                      SET ZERO RETURN CODE
         B     EXITPROG                     GO EXIT PROGRAM
EXITPR20 DS    0H
         LA    R15,20                       SET Error return code
EXITPROG DS    0H
         RACKOFF RC=(R15)                   EXIT WITH ZERO RETURN CODE
*=====================================================================*
***********************************************************************
* Literal pool...                                                     *
***********************************************************************
         LTORG
***********************************************************************
MOVESTRT MVC   0(0,R2),0(R8)                MOVE START COLUMN VALUE
***********************************************************************
WORKAREA DSECT
         DS    0D
REGSAVE$ DS    18F                          REGISTER SAVE AREA
DWORK8   DS    D
SCOL     DS    F
ECOL     DS    F
LENGTH   DS    F
PADCHAR  DS    CL1
DATA1    DS    CL32760
WORKAREL EQU   *-WORKAREA
***********************************************************************
* DSECTS...                                                           *
***********************************************************************
         IRXEFPL
         IRXARGTB
         IRXEVALB
*        YREGS
         END
