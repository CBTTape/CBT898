  EXTRACTING IEASYS PARAMETER AT IPL
  ----------------------------------

  It is often difficult to keep track of the IEASYS parameter used for
  the current IPL.  The days of paperwork, white boards updates and
  weak operator communications lines have been solved by this routine.

  At IPL time, this routine createss a user CVT, anchors it off the
  CVT, acquires the load and IEASYS parameters from the Master Trace
  Table (MTT) out off the *MASTER* address space and stores them in
  the user CVT for access by any user routine at a later date.

  A sample REXX/ISPF dialogue has been provided to retrieve and
  display the parameters (along with a sub-set of other usefull IPL
  details). The load and IEASYS parameters could then be used as
  as anchors for oad and IEASYS parameters could then be used as

  The following is required to make this function operational at your
  establishment:
     1. Assemble and link-edit programs SYSPGET and VRUSRCVT with AC(1)
        and AMODE=31 into an APF authorised library.
        (Include macro USERCVT in one of the libraries in the SYSLIB
        concatenation of the assembly step.)
     2. Include panel SYSPAN in your ISPF ISPPLIB concatenation.
     3. Include REXX EXEC SYSP in your SYSPROC or SYSEXEC concatenation.

  If your site is already using a user CVT area do the folllowing:
     1. Include the following contiguous fields into your user CVT
        DSECT,
              UCVTLOAD DS    CL2         IPL LOAD PARAMETER SUFFIX
              UCVTSYSP DS    CL2         IPL IEASYS PARAMETER SUFFIX
     2. Make the following changes to program SYSPGET:
        a) Change 2nd. line to prevent invocation of VRUSERCVT to
              &NEWUCVT SETC  'N'
        b) Change 3rd. line to reflect the name of your user CVT DSECT
              &USERVCT SETC  'USERCVT'
     3. Ignore program VRUSRCVT.

  For the pilot run, it is suggested that 'SYS1.PARMLIB(SCHEDnn)' be
  updated to increase the Master Trace to 256K to ensure the
  appropriate parameters are still in the MTT at time of processing by
  adding the following entry
          MT    SIZE(256K)
  The program will detect the current pointer in the MTT and display a
  message giving and approximate sizing value to subsequently
  initialise the MTT size during IPL.  If the new MTT size is deemed
  prohibitive, it may be restored by setting the &MTTSIZE variable in
  the program (line 4) to the required size (24K is the IBM default)
  or use another manual/automated method after the program terminates
  and leave the the variable set to '000' which does not resize the
  MTT.





 Program GETSYSP
 ~~~~~~~~~~~~~~~

         LCLC  &NEWUCVT,&USERCVT,&MTTZISE
&NEWUCVT SETC  'Y'            <--- change to 'N' if using user CVT
&USERCVT SETC  'USERCVT'      <--- change to user CVT name if different
&MTTSIZE SETC  '000'          <--- change to oper size req'd after IPL +
                                   (IBM default is 024)
***********************************************************************
*                                                                     *
*    Title:    'TRAP IPL IEASYS PARAMETER'                            *
*    System:   N/A                                                    *
*    Module:   SYSPGET                                                *
*    Program:  SYSPGET                                                *
*    Function: The purpose of this program is to trap the IEASYS      *
*              parameter from the Master Trace Table during IPL and   *
*              store it in the User CVT area for later use.           *
*                                                                     *
*              The program established the ASID of the *MASTER*       *
*              address space and uses cross-memory to access the      *
*              the Master Trace Table (MTT).                          *
*              1K lots of data are transferred using cross memory and *
*              scanned for messages IEA246I and IEA247I respectively. *
*              The data is scanned in reverse order (as it is stored  *
*              in the MTT).  If the site issues a lot of messages     *
*              prior to JES2 startup, and the appropriate messages    *
*              are not found at IPL time, increase the size of the    *
*              Trace table using the SCHEDnn member of 'SYS1.PARMLIB' *
*              and then reset it later on using the command 'TRACE    *
*              MT,nnnK'.                                              *
*              Under 'normal circumstances', the trace for this       *
*              program would be located between pages 125 and 145 in  *
*              the MTT. (This assumes not too many exceptional IPL    *
*              messages are issued and this routine is executed as    *
*              soon as JES2 is started.) It is suggested that the MTT *
*              size be set to a minimum of 150K. The following WTO is *
*              issued to indicate location within the MTT to be used  *
*              as a sizing parameter, 'PROCESSING IN MTT PAGE ...(K)'.*
*              If the size of the MTT is increased for the purposes   *
*              of this routine, it may be reset to is't normal value  *
*              by modifying the &MTTSIZE variable on line 3 or leave  *
*              as '000' and reset by other manual/automated means.    *
*                                                                     *
*              The program also calls program VRUSRCVT to issue a     *
*              GETMAIN for a user CVT area and chains it off the      *
*              CVTUSER field of the CVT.                              *
*                                                                     *
*              These parameter area may be zapped (initialised) by    *
*              passing a four byte parameter as follows:              *
*                 bytes 1-2 : Load parameter suffix                   *
*                 bytes 3-4 : IEASYS parameter suffix                 *
*                                                                     *
*              The CVT User fields are mapped using macro USERCVT.    *
*                                                                     *
*              Program return code:                                   *
*                 0  - Always set to zero. Any errors will issue a    *
*                      Write To Operator.                             *
*                                                                     *
*              Reserved register:                                     *
*                R11 - Base                                           *
*                R12 - Base                                           *
*                R13 - Register save and work area (getmain DSECT)    *
*                                                                     *
*    Notes:    Program is re-entrant                                  *
*              AMODE 31, RMODE any.                                   *
*    Authors:  ASYSTS Pty. Ltd.                                       *
*              (Alex Kara & Maurice Clark)                            *
*    Date:     02th September 1993                                    *
*                                                                     *
***********************************************************************
         YREGS                         REGISTER EQUATES
SYSPGET  CSECT
SYSPGET  AMODE 31
         B     30(R15)                 BRANCH AROUND P/D/T STAMP
         DC    CL8'SYSPGET'            PROGRAM STAMP
         DC    C'_'                    DELIMITER
         DC    CL8'&SYSDATE'           DATE STAMP
         DC    C'_'                    DELIMITER
         DC    CL8'&SYSTIME'           TIME STAMP
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R11,R15                 LOAD R11 WITH START OF PR
         LA    R12,4095(R11)           POINT 2ND. REG 1K PAST
         LA    R12,1(R12)                1ST. BASE
         USING SYSPGET,R11,R12         USING TWO BASE REGISTERS
         GETMAIN R,LV=WORKAREL         GETMAIN AREA
         ST    R13,4(R1)               BACKWARD CHAIN
         ST    R1,8(R13)               FORWARD CHAIN
         LR    R13,R1                  SAVE AREA @
         USING WORKAREA,R13            ADDRESABILITY TO GETMAIN
         XR    R0,R0                   ZERO REGISTER 0
         ST    R0,8(R13)               CLEAR FORWARD CHAIN
         L     R1,4(R13)               LOAD CALLERS SAVEAREA @
         LM    R0,R2,20(R1)            RESTORE PARM REGISTERS
                                                                SPACE 1
*---------------------------------------------------------------------*
* Test for Authorisation                                              *
*---------------------------------------------------------------------*
INITIAL  DS    0H
         LR    R7,R1                   SAVE PARAMETER ADDRESS
         TESTAUTH ,                    TEST AUTHORISATION
         LTR   R15,R15                 Q. AUTHORISED
         BNZ   NOTAUTHD                   N. EXIT WITH ERROR MESSAGE
*---------------------------------------------------------------------*
* Initialise parameters                                               *
*---------------------------------------------------------------------*
         MVC   PROCESTA(COMESTAL),COMMESTA
*                                      MOVE ESTAE TRAP ROUTINE
         MVC   WTODET1(WTODETL),WTODETF
*                                      MOVE WTO DATA TO GETMAINED
         XC    PARMVALS,PARMVALS       INITIALISE CVTUSER PARMS
         MVC   MESSAGEG,SPACES         INITIALISE MESSAGE AREA
         MVC   ESTAE(ESTAEL),ESTAEF    INITIALISE ESTAE AREA
*---------------------------------------------------------------------*
* Test for initialisation parameter                                   *
*---------------------------------------------------------------------*
         L     R7,0(R7)                LOAD PARAMETER LIST POINTER
         LH    R2,0(R7)                LOAD PARAMETER LENGTH
         LTR   R2,R2                   Q. ANY PARAMETER
         BZ    NOPARM                     N. NORMAL PROCESSING
         CH    R2,=H'4'                Q. PARAMETER LENGTH OF 4
         BNE   INVPARML                   N. SIGNAL INVALID PARM LENGTH
         L     R2,CVTPTR               CVT ADDRESS
         USING CVT,R2                  ADDRESABILITY TO CVT
         ICM   R2,B'1111',CVTUSER      Q. CVT USER AREA ESTABLISHED
         BZ    INVINITP                   N. GO TELL OF ERROR
         DROP  R2                      RELINQUISH ADDRESABILITY
*---------------------------------------------------------------------*
* Zap user CVT parameter area and exit                                *
*---------------------------------------------------------------------*
         MODESET KEY=ZERO              SET KEY OF ZERO
         USING &USERCVT,R2             ADDRESABILITY TO USERCVT
         MVC   UCVTLOAD(4),2(R7)       MOVE LOAD SUFFIX
         DROP  R2                      RELINQUISH ADDRESABILITY
         MODESET KEY=NZERO             TURN MODESET OFF
         MVC   MESSAGEG(24),=C'USER CVT INITIALISED TO '
         MVC   MESSAGEG+24(4),2(R7)    PARAMETER
         BAL   R14,WTORTN              GO ISSUE WTO
         B     EXITPROG                EXIT PROGRAM
*---------------------------------------------------------------------*
NOPARM   DS    0H
         BAL   R14,GETUCVT             GO GET USER CVT
         CLI   RCODE,C'0'              Q. ZERO RETURN CONE
         BNE   ERRUCVT                    N. SAY SO END EXIT
         BAL   R14,GETMASID            GO GET *MASTER* ASID
         CLI   RCODE,C'0'              Q. ZERO RETURN CONE
         BNE   JOBNFND                    N. SAY SO AND EXIT
*---------------------------------------------------------------------*
* Prepare for "ESTAE" when end of address space is reached.           *
*---------------------------------------------------------------------*
         STM   R11,R13,BASES#1         STORE MAIN REGISTERS
         LA    R1,ESTAEOF1             RETURN ADDRESS
         ST    R1,ESTAERTN             STORE RETURN ADDRESS
         LA    R5,PROCESTA             LOAD ESTAE ADDRESS
         ESTAE (R5),MF=(E,ESTAE)       TRAP "ABEND"
         MVI   RCODE,C'0'              SET ZERO REURN CODE
*---------------------------------------------------------------------*
* Prepare for cross-memory processing                                 *
*---------------------------------------------------------------------*
         MODESET KEY=ZERO              SET KEY OF ZERO
         LA    R0,1                    LOAD AUTHORISATION CODE
         AXSET AX=(0)                  SET AUTHORISATION INDEX
         ST    R0,PRIMAX               SAVE PRIMARY AX
         XR    R1,R1                   INITIALISE REGISTER
         ICM   R1,B'0011',USERASID     LOAD TARGET ASID
         SSAR  R1                      SET TARGET AS SECONDARY ASID
*---------------------------------------------------------------------*
*  Processing logic:---                                               *
*    0 + 10? + 94? +8C?       -----> MTT (Master Trace Table)         *
*    MTT + 4?                 -----> Current position pointer in MTT  *
*    MTT + 8?                 -----> First byte of MTT                *
*    MTT + C?                 -----> last byte of MTT + 1             *
*    MTT + 11? L(3)           -----> Table size                       *
*---------------------------------------------------------------------*
         LA    R2,4                    GET LENGTH OF DATA TO MOVE
         LA    R6,FULLWORD             WHERE TO MOVE
         L     R3,CVTPTR               LOAD CVT ADDRESS
         USING CVT,R3                  ADDRESSABILITY TO CVT
         XR    R0,R0                   SET KEY REGISTER
         L     R3,CVTMSER              LOAD MASTER SCHEDULER RESIDENT
*                                      DATA AREA POINTER
         DROP  R3                      RELINQUISH ADDRESSABILITY TO CVT
         USING BASE,R3                 ADDRESSABILITY TO MSER
         XR    R0,R0                   SET KEY REGISTER
         MVCP  0(R2,R6),BAMTTBL,R0     MOVE MASTER TRACE TABLE ADDRESS
         DROP  R3                      RELINQUISH ADDRESSAB. TO BASE
         USING MTTABLE,R3              ADDRESSABILITY TO MTT
         L     R3,FULLWORD             LOAD MTT ADDRESS
         XR    R0,R0                   SET KEY REGISTER
         MVCP  0(R2,R6),MTTCURPT,R0    CURRENT POINTER ADDRESS
         MVC   CURPTR,FULLWORD         STORE CURRENT POINTER
         XR    R0,R0                   SET KEY REGISTER
         MVCP  0(R2,R6),MTTENDPT,R0    LAST BYTE +1 ADDRESS
         MVC   ENDPTR,FULLWORD         STORE END POINTER
         LA    R6,MOVEDATA             WHERE TO MOVE
         XR    R0,R0                   SET KEY REGISTER
         MVCP  0(R2,R6),MTTLEN,R0      LENGTH OF TABLE (3 BYTES)
         DROP  R3                      RELINQUISH ADDRESSAB. TO MTT
         L     R3,FULLWORD             LOAD LAST BYTE +1 ADDRESS
*---------------------------------------------------------------------*
* Move and parse the MTT in 1K lots in reverse order...               *
*---------------------------------------------------------------------*
         XR    R8,R8                   INITIALISE REGISTER
         ICM   R8,B'0111',MOVEDATA     LOAD LENGTH OF MTT
         SRL   R8,10                   DIVIDE GET # OF 1K LOTS FOR
         STH   R8,#OF1KLOT             STORE NUMBER OF 1K MTT ENTRIES
         LA    R2,256                  LENGTH OF MOVE
*                                      OUTER LOOP
OUTRLOOP DS    0H
         LA    R1,MOVEDATA             WHERE TO MOVE
         LA    R6,1024(R1)             POINT TOATIVE PAGE # TO START
         MVC   0(132,R6),0(R1)         MOVE START PAGE TO END OF NEXT
         LA    R9,4                    LOOP COUNTER PER PAGE
INERLOOP DS    0H
         SR    R3,R2                   BACK UP BY MOVE LENGTH
         SR    R6,R2                   UP BY MOVE LENGTH
         XR    R0,R0                   SET KEY REGISTER
         MVCP  0(R2,R6),0(R3),R0       MOVE SECONDARY TO PRIMARY
         BCT   R9,INERLOOP             LOOP TILL END OF INNER LOOP
         BAL   R14,TEST4MSG            GO AND SCAN FOR MESSAGES
         CLI   RCODE,C'0'              Q. IEASYS FOUND
         BE    XMOVEND                    Y. EXIT OUTER LOOP
         BCT   R8,OUTRLOOP             LOOP TILL END OF OUTER LOOP
XMOVEND  DS    0H
         XR    R1,R1                   CLEAR REGISTER
         ICM   R1,B'0011',PRIMASID     GET PRIMARY ASID
         SSAR  R1                      SET SECONDARY BACK TO PRIMARY
         L     R0,PRIMAX               GET PRIMARY AX
         AXSET AX=(0)                  SET AUTHORISATION INDEX
         MODESET KEY=NZERO             TURN MODESET OFF
ESTAEOF1 DS    0H
         ESTAE 0,MF=(E,ESTAE)          TURN ESTAE OFF
         CLI   RCODE,C'E'              Q. ESTAE RETURN CONE
         BE    ESTAEHIT                   N. SAY SO AND EXIT
                                                                SPACE 1
*---------------------------------------------------------------------*
* Test for parameter hits and if found, move to user CVT area.        *
*---------------------------------------------------------------------*
TESTPRMF DS    0H
         LH    R2,PARMVALS+2           LOAD SYSP PARAMETER VALUES
         LTR   R2,R2                   Q. BOTH PARAMETERS FOUND
         BNZ   ZAPUCVT                    Y. GO ZAP WITHOUT WARNING
         MVC   MESSAGEG(31),=C'IEASYS MESSAGE NOT FOUND IN MTT'
         BAL   R14,WTORTN              GO ISSUE WTO
         LH    R2,PARMVALS             LOAD LOAD PARAMETER VALUES
         LTR   R2,R2                   Q. LOAD PARAMETERS FOUND
         BNZ   ZAPUCVT                    Y. GO ZAP WITHOUT WARNING
         MVC   MESSAGEG,SPACES         INITIALISE MESSAGE AREA
         MVC   MESSAGEG(29),=C'LOAD MESSAGE NOT FOUND IN MTT'
         BAL   R14,WTORTN              GO ISSUE WTO
         B     RESETMTT                EXIT WITHOUT ZAPPING
ZAPUCVT  DS    0H
         MODESET KEY=ZERO              SET KEY OF ZERO
         L     R1,UCVTPTR              LOAD USER CVT POINTER
         USING &USERCVT,R1             ADDRESABILITY TO USERCVT
         MVC   UCVTLOAD,PARMVALS       MOVE LOAD SUFFIX
         MVC   UCVTSYSP,PARMVALS+2     MOVE SYSP SUFFIX
         DROP  R1                      RELINQUISH ADDRESABILITY
         MODESET KEY=NZERO             TURN MODESET OFF
                                                                SPACE 1
         MVC   MESSAGEG,SPACES         INITIALISE MESSAGE AREA
         MVC   MESSAGEG(38),=C'USER CVT UPDATED WITH IPL PARAMETERS'
         BAL   R14,WTORTN              GO ISSUE WTO
*---------------------------------------------------------------------*
* Calculate and tell where we are in MTT to indicate minimum size     *
* required.                                                           *
*---------------------------------------------------------------------*
         L     R1,ENDPTR               LOAD END OF MTT POINTER
         S     R1,CURPTR               LOAD CURRENT MTT POINTER
         SRL   R1,10                   DIVIDE BY 1024
         CVD   R1,DWORD8               CONVERT TO DECIMAL               01-UNPAC
         OI    DWORD8+7,X'0F'          PREPARE FOR UNPACKING            01-UNPAC
         MVC   MESSAGEG,SPACES         INITIALISE MESSAGE AREA
         MVC   MESSAGEG(29),=C'PROCESSING IN MTT PAGE ...(K)'
         UNPK  MESSAGEG+23(3),DWORD8+5(3) UNPACK LAST 3 BYTES           01-UNPAC
         BAL   R14,WTORTN              GO ISSUE WTO
                                                                SPACE 1
RESETMTT DS    0H
         CLC   =C'000',=C'&MTTSIZE'    Q. RESET MTT SIZE ZERO
         BE    EXITPROG                   Y. EXIT PROGRAM
         MVC   MESSAGEG,SPACES         INITIALISE MESSAGE AREA
         MVC   MESSAGEG(21),=C'RESETTING MTT TO &MTTSIZE.K'
         BAL   R14,WTORTN              GO ISSUE WTO
         MVC   MESSAGE(13),=C'TRACE MT,&MTTSIZE.K'
         MVC   MESSAGEL(2),=H'17'      SET LENGTH INC LENGTH ITSELF
         XC    MESSAGEL+2(2),MESSAGEL+2
         MODESET KEY=ZERO,MODE=SUP     SUPERVISOR STATE FOR SVC CALL
         LA    R1,MESSAGEL             SET REGISTERS
         XR    R0,R0                     FOR SVC
         SVC   34                      ISSUE COMMAND
         MODESET KEY=NZERO,MODE=PROB RETURN TO PROBLEM STATE
                                                                SPACE 1
*---------------------------------------------------------------------*
* Exit program                                                        *
*---------------------------------------------------------------------*
EXITPROG DS    0H
         LR    R1,R13                  LOAD GETMAINED AREA ADDRESS
         LR    R2,R15                  SAVE REGISTER 15 IN CASE
         L     R13,4(R13)              LOAD CALLERS SAVEAREA @
         FREEMAIN R,LV=WORKAREL,A=(1)
         LM    R14,R12,12(R13)         RESTORE REGISTERS 14-12
         LA    R15,0                   SET RETURN CODE
         BR    R14                     RETURN
                                                                SPACE 1
*---------------------------------------------------------------------*
* Error messages                                                      *
*---------------------------------------------------------------------*
NOTAUTHD DS    0H
         MVC   MESSAGEG(22),=C'PROGRAM NOT AUTHORISED'
         B     ERRORMSG                GO ISSUE WTO
*---------------------------------------------------------------------*
ESTAEHIT DS    0H
         MVC   MESSAGEG(17),=C'ESTAE ENCOUNTERED'
         B     ERRORMSG                GO ISSUE WTO
*---------------------------------------------------------------------*
JOBNFND  DS    0H                      SHOULD NEVER HAPPEN
         MVC   MESSAGEG(26),=C'ADDRESS *MASTER* NOT FOUND'
         B     ERRORMSG                GO ISSUE WTO
*---------------------------------------------------------------------*
ERRUCVT  DS    0H                      SHOULD NEVER HAPPEN
         MVC   MESSAGEG(27),=C'ERROR ESTABLISHING USER CVT'
         B     ERRORMSG                GO ISSUE WTO
*---------------------------------------------------------------------*
INVPARML DS    0H
         MVC   MESSAGEG(24),=C'INVALID PARAMETER LENGTH'
         B     ERRORMSG                GO ISSUE WTO
*---------------------------------------------------------------------*
INVINITP DS    0H
         MVC   MESSAGEG(24),=C'USER CVT NOT INITIALISED'
         B     ERRORMSG                GO ISSUE WTO
*---------------------------------------------------------------------*
* Wite error message to log                                           *
*---------------------------------------------------------------------*
ERRORMSG DS    0H
         BAL   R14,WTORTN              GO ISSUE WTO
         B     RESETMTT                EXIT PROGRAM
                                                                SPACE 1
*=====================================================================*
*---------------------------------------------------------------------*
* Process the data in reverse order looking for message ids           *
* IEA246I and IEA247I. If found extract the appropriate value and     *
* store for later zap.                                                *
*---------------------------------------------------------------------*
TEST4MSG DS    0H
         ST    R14,SAVSUBR1            SAVE RETURN ADDRESS
         MVI   RCODE,C'4'              SET ERROR RETURN CODE
         LA    R6,MOVEDATA+1023        POINT TO END OF DATA
         LA    R9,1024                 LOOP COUNTER
         CLC   PARMVALS(2),=H'0'       Q. LOAD PARAMETER FOUND
         BNE   LOOP247                    Y. LOOK FOR IEASYS
LOOP246  DS    0H
         CLC   =C'IEA246I',0(R6)       Q. 1ND. REQUIRED MESSAGE
         BE    MSG246I                    Y. GO PROCESS MESSAGE
         BCTR  R6,0                    PREVIOUS CHARACTER
         BCT   R9,LOOP246              LOOP TILL END OR HIT
         B     RETNMSGT                RETURN FROM PARSING ROUTINE
MSG246I  DS    0H
         ST    R14,SAVSUBR1            SAVE RETURN ADDRESS
         MVC   PARMVALS(2),18(R6)      MOVE LOAD PARAMETER
         STH   R8,WHEREFND             STORE PAGE NUMBER
LOOP247  DS    0H
         CLC   =C'IEA247I',0(R6)       Q. 2ND. REQUIRED MESSAGE
         BE    MSG247I                    Y. GO PROCESS MESSAGE
         BCTR  R6,0                    PREVIOUS CHARACTER
         BCT   R9,LOOP247              LOOP TILL END OR HIT
         B     RETNMSGT                RETURN FROM PARSING ROUTINE
MSG247I  DS    0H
         MVC   PARMVALS+2(2),20(R6)    MOVE SYSP PARAMETER
         MVI   RCODE,C'0'              INDICATE BOTH FOUND IN RETCODE
RETNMSGT DS    0H
         L     R14,SAVSUBR1            RESTORE RETUN ADDRESS
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*---------------------------------------------------------------------*
* Routine to get user CVT area                                        *
*---------------------------------------------------------------------*
GETUCVT  DS    0H
         ST    R14,SAVSUBR1            SAVE RETURN ADDRESS
         MVI   RCODE,C'0'              SET ZERO RETURN CODE
         L     R1,CVTPTR               CVT ADDRESS
         USING CVT,R1                  ADDRESABILITY TO CVT
         ICM   R1,B'1111',CVTUSER      Q. CVT USER AREA AVAILABLE
         AIF ('&NEWUCVT' EQ 'Y').NEWUCVT   GET NEW USER CVT
.OLDUCVT ANOP
         BNZ   HAVECVT                    Y. GO STORE ADDRES
         DROP  R1                      RELINQUISH ADDRESABILITY TO CVT
         MVI   RCODE,C'4'              SET ERROR RETURN CODE
         B     RETUCVT                 RETURN TO CALLER
HAVECVT  DS    0H
         ST    R1,UCVTPTR              STORE USER CVT POINTER
                                                                SPACE 1
         AGO   .RETUCVT                BYPASS NEW USER CVT
.NEWUCVT ANOP
         BZ    ZAPCVT                     Y. GO GET NEW AREA
         DROP  R1                      RELINQUISH ADDRESABILITY TO CVT
         MVI   RCODE,C'4'              SET ERROR RETURN CODE
         B     RETUCVT                 RETURN TO CALLER
ZAPCVT   DS    0H
         LOAD  EP=VRUSRCVT             LOAD USER CVT ENTRY POINT
         LR    R15,R0                  LOAD ENTRY POINT
         XR    R1,R1                   INITIALISE PARAMETER LIST ADR
         BALR  R14,R15                 CALL ROUTINE
         ST    R1,UCVTPTR              STORE USER CVT POINTER
                                                                SPACE 1
         MVC   MESSAGEG,SPACES         INITIALISE MESSAGE AREA
         MVC   MESSAGEG(37),=C'USER CVT CREATED AND ANCHORED OFF CVT'
         BAL   R14,WTORTN              GO ISSUE WTO
                                                                SPACE 1
.RETUCVT ANOP
RETUCVT  DS    0H
         L     R14,SAVSUBR1            RESTORE RETUN ADDRESS
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*---------------------------------------------------------------------*
* Routine to get the ASID of the *MASTER* address space and the       *
* current job's asid to permit cross memory processing of the MTT.    *
*---------------------------------------------------------------------*
GETMASID DS    0H
         STM   R14,R12,SAVSUBR1        SAVE CALLERS REGS
         MVI   RCODE,C'0'              SET ZERO RETURN CODE
         L     R2,548                  GET PRIM ASCB ADDRESS (PSAAOLD)
         USING ASCB,R2                 ADDRESABILITY TO ASCB
         LH    R1,ASCBASID             GET PRIMARY ASID
         STH   R1,PRIMASID             SAVE IT
         DROP  R2
         L     R2,CVTPTR               GET CVT ADDRESS
         USING CVT,R2                  ADDRESABILITY TO CVT
         L     R2,CVTASVT              GET ADDRESS OF ASVT
         DROP  R2
         USING ASVT,R2                 ADDRESABILITY TO ASVT
         L     R4,ASVTMAXU             GET NUMBER OF ADDRESS SPACES
         LA    R2,ASVTENTY             POINT TO FIRST ENTRY
ASVTLOOP DS    0H
         USING ASCB,R1
         ICM   R1,B'1111',0(R2)        Q. ASCB ADDRESS
         BM    NEXTASVT                   N. GO GET NEXT ONE
         LH    R0,ASCBASID             GET ADDRESS SPACE ID
         ICM   R3,B'1111',ASCBJBNS     Q. ADDRESS OF STARTED TASK NAME
         BZ    NEXTASVT                   N. GO GET NEXT ONE
TESTASCB DS    0H
         STH   R0,USERASID             SAVE CICS ASID
         CLC   USERNAME,0(R3)          Q. IS THIS ONE SELECTED
         L     R0,ASCBASXB             GET ADDRESS OF ASXB
         BE    HAVETASK                   Y. CONTINUE
NEXTASVT DS    0H
         LA    R2,4(R2)                POINT TO NEXT ASVT ENTRY
         BCT   R4,ASVTLOOP             LOOP
         MVC   RCODE,C'4'              SET ERROR RETUYRN CODE
HAVETASK DS    0H
         LM    R14,R12,SAVSUBR1        RESTORE CALLERS REGISTER
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*=====================================================================*
*---------------------------------------------------------------------*
* *** CALLED ROUTINES ****                                            *
*---------------------------------------------------------------------*
* Write To Operator                                                   *
*---------------------------------------------------------------------*
WTORTN   DS    0H
         ST    R14,SAVSUBR2            STORE CALLERS REGISTER
         LA    R1,WTODET1              LOAD ADDRESS OF WTO AREA
         MVC   WTODET1+14(70),MESSAGEG  MOVE MESSAGE DETAILS
         WTO   MF=(E,(R1))             ISSUE MSG
         L     R14,SAVSUBR2            RESTORE CALLERS REGISTER
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*=====================================================================*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
SPACES   DC    CL256' '
USERNAME DC    CL8'*MASTER*'           MASTER ADDRESS SPACE ID
WTODETF  DS    0F
         WTO   'SYSPGET :                                              +
                                        ',                             +
               ROUTCDE=(2,12),DESC=(7),                                +
               MF=L
WTODETL  EQU   *-WTODETF
                                                                SPACE 1
ESTAEF   ESTAE 0,MF=L                  LIST FORM OF ESTAE
ESTAEL   EQU   *-ESTAEF
                                                                SPACE 1
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*---------------------------------------------------------------------*
* ESTAE routine without labels, to be copied into GETMAIN'ed area     *
*---------------------------------------------------------------------*
COMMESTA DS    0F
         LR    R2,R15                  R1 SET AS BASE
         USING PROCESTA,R2             BASE REGISTER
         LM    R11,R13,12(R15)         RESTORE REGISTERS FROM "BASES1"
         B     MOVEERR                 BYPASS R11 - R13 SAVE AREA
         DS    3F                      MAIN REGISTER SAVE AREA
*---------------------------------------------------------------------*
         DS    0H
         STM   R0,R13,BASES#2          STORE REGISTERS INTO "BASES2"
         LA    R15,12                  LOAD VALUE TO BE TESTED AGAINST
         CR    R0,R15                  Q. SDWA CREATED BY RTM2
         BE    MESTAER2                   N. DO NOT RETRY
         SETRP FRESDWA=YES,RC=4,RETADDR=MESTAER,DUMP=NO
         BR    R14                     RETURN
         DS    0F
         LM    R0,R13,8(R15)           RESTORE REGISTERS
         B     MESTAER2                BYPASS REGISTER SAVE AREA
         DS    14F                     REGISTER SAVE AREA
         DS    0H
*---------------------------------------------------------------------*
         MVI   RCODE,C'E'              SET RETURN CODE
         L     R1,ESTAERTN             LOAD ESTAE RETURN ADDRESS
         BR    R1                      CONTINUE
         DS    A                       RETURN ADDRESS FROM ESTAE
COMESTAL EQU   *-COMMESTA
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
                                                                SPACE 1
*---------------------------------------------------------------------*
WORKAREA DSECT
REGSAVER DS    18F                     REGISTER SAVE AREA
SAVSUBR1 DS    16F                     SUBROUTINE REGISTER SAVE AREA
SAVSUBR2 DS    2F                      SUBROUTINE REGISTER SAVE AREA
DWORD8   DS    D                       DOUBLEWORD DORAREA
PRIMAX   DS    F                       PRIMARY AUTHORISATION INDEX
FULLWORD DS    F
UCVTPTR  DS    F                       USER CVT POINTER
PARMVALS DS    F                       PARAMETER STOREGE AREA
CURPTR   DS    F                       POINTERS IN MTT WHEN THIS
ENDPTR   DS    F                          PROGRAM IS EXECUTING
WHEREFND DS    H                       WHERE FOUND
#OF1KLOT DS    H                       NUMBER OF 1K PAGES IN MTT
MESSAGEG DS    CL80                    MESSAGE BUFFER
USERASID DS    H                       SECONDARY ASID
PRIMASID DS    H                       PRIMARY ASID
PAGESTRT DS    H                       START ADDRESS OF GETMAIN
RCODE    DS    CL1                     INTERNAL RETURN CODE FLAG
MESSAGEL DS    AL2                  LENGTH OF COMMAND
         DC    AL2(0)               LENGTH OF COMMAND
MESSAGE  DS    0CL40                MESSAGE
         DS    CL40
*=====================================================================*
         DROP  R2
PROCESTA DS    0F
         LR    R2,R15                  R1 SET AS BASE
         USING PROCESTA,R2             BASE REGISTER
         LM    R11,R13,12(R15)         RESTORE REGISTERS FROM "BASES1"
         B     MOVEERR                 BYPASS R11 - R13 SAVE AREA
BASES#1  DS    3F                      MAIN REGISTER SAVE AREA
*---------------------------------------------------------------------*
MOVEERR  DS    0H
         STM   R0,R13,BASES#2          STORE REGISTERS INTO "BASES2"
*---------------------------------------------------------------------*
*                                                                     *
*        Control gets here if the an abend occured during a move      *
*        from secondary to primary. Usually caused by an address      *
*        exception error.                                             *
*                                                                     *
*---------------------------------------------------------------------*
         LA    R15,12                  LOAD VALUE TO BE TESTED AGAINST
         CR    R0,R15                  Q. SDWA CREATED BY RTM2
         BE    MESTAER2                   N. DO NOT RETRY
         SETRP FRESDWA=YES,RC=4,RETADDR=MESTAER,DUMP=NO
         BR    R14                     RETURN
MESTAER  DS    0F
         LM    R0,R13,8(R15)           RESTORE REGISTERS
         B     MESTAER2                BYPASS REGISTER SAVE AREA
BASES#2  DS    14F                     REGISTER SAVE AREA
MESTAER2 DS    0H
*---------------------------------------------------------------------*
         MVI   RCODE,C'E'              SET RETURN CODE
         L     R1,ESTAERTN             LOAD ESTAE RETURN ADDRESS
         BR    R1                      CONTINUE
ESTAERTN DS    A                       RETURN ADDRESS FROM ESTAE
***********************************************************************
                                                                SPACE 1
ESTAE    DS    0F
         DS    CL(ESTAEL)
                                                                SPACE 1
WTODET1  DS    0F
         WTO   'SYSPGET :                                              +
                                        ',                             +
               ROUTCDE=(2,12),DESC=(7),                                +
               MF=L
MOVEDATA DS    CL1024                  MTT TRANSFER AREA
WRAPARND DS    CL132                   WRAPAROUND AREA
*---------------------------------------------------------------------*
WORKAREL EQU   *-WORKAREA
                                                                SPACE 1
*=====================================================================*
         &USERCVT                      USER CVT
         CVT      DSECT=YES            CVT
         IEEBASEA ,                    MASTER SCHED RESIDENT DATA AREA
         IEEZB806 ,                    MASTER TRACE TABLE
         IHAASVT  DSECT=YES            ASVT
         IHAASCB  DSECT=YES            ASCB
         IHASDWA  DSECT=YES            SDWA
*---------------------------------------------------------------------*
         END





 Program VRUSRCVT
 ~~~~~~~~~~~~~~~~

***********************************************************************
*                                                                     *
*    Title:    ATTACH A USER CVT                                      *
*    System:   N/A                                                    *
*    Module:   VRUSRCVT                                               *
*    Program:  VRUSRCVT                                               *
*    Function: The purpose of this program is get a area of CSA       *
*              to be used as a user area and hang it off the CVTUSER  *
*              field of the CVT.                                      *
*              The subpool used is 227 (fixed, below the line).       *
*                                                                     *
*              The CVT User fields are mapped using macro USERCVT.    *
*                                                                     *
*              Program return code:                                   *
*                 0  - Always set to zero. Any errors will issue a    *
*                      Write To Operator.                             *
*                                                                     *
*              On exit, R1 contains the address of the GETMAIN'ed     *
*              area.                                                  *
*                                                                     *
*              Reserved register:                                     *
*                R12 - Base                                           *
*                R13 - Register save area                             *
*                                                                     *
*    Notes:    Program is re-entrant                                  *
*              AMODE 31, RMODE any.                                   *
*              Wrote based on code from GETUCVTR in CBT341.FILE172    *
*    Authors:  ASYSTS Pty. Ltd.                                       *
*              (Alex Kara & Maurice Clark)                            *
*    Date:     02th September 1993                                    *
*                                                                     *
***********************************************************************
                                                                SPACE 1
VRUSRCVT CSECT
VRUSRCVT AMODE 31
         B     30(R15)                 BRANCH AROUND P/D/T STAMP
         DC    CL8'VRUSRCVT'           PROGRAM STAMP
         DC    C'_'                    DELIMITER
         DC    CL8'&SYSDATE'           DATE STAMP
         DC    C'_'                    DELIMITER
         DC    CL8'&SYSTIME'           TIME STAMP
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 LOAD R2 WITH START OF PR
         USING VRUSRCVT,R12            USE R2 AS TEMPORARY BASE
         GETMAIN R,LV=WORKAREL         GETMAIN AREA
         ST    R13,4(R1)               BACKWARD CHAIN
         ST    R1,8(R13)               FORWARD CHAIN
         LR    R13,R1                  SAVE AREA @
         USING WORKAREA,R13            ADDRESABILITY TO GETMAIN
         XR    R0,R0                   ZERO REGISTER 0
         ST    R0,8(R13)               CLEAR FORWARD CHAIN
         L     R1,4(R13)               LOAD CALLERS SAVEAREA @
         LM    R0,R1,20(R1)            RESTORE PARM REGISTERS
*---------------------------------------------------------------------*
         L     R3,CVTPTR               FIND USERCVT
         USING CVT,R3                  ADDRESABILITY TO CVT
         ICM   R8,B'1111',CVTUSER      Q. CVTUSER ADDRESS AVAILABLE
         BNZ   LUCVTGOT                   Y. EXIT IF ALREADY PRESENT
         USING USERCVT,R8              ESTABLISH ADDRESSABILITY
                                                                SPACE 1
         GETMAIN RU,LV=USERCVTL,SP=227 GET USERCVT AREA
         LR    R2,R1                   COPY CVTUSER ADDRESS
         MODESET KEY=ZERO              SET KEY OF ZERO
         CS    R8,R2,CVTUSER           STORE ADDRESS OF GOTTEN AREA
         BNE   LUCVTGOT                OTHER PROCESSOR  GOT HERE FIRST
         LR    R8,R2                   COPY CVTUSER ADDRESS
         MVI   USERCVT,X'00'           CLEAR GETMAIN'ED
         MVC   USERCVT+1(USERCVTL-1),USERCVT AREA
         MVC   UCVTEYE,=C'USERCVT '    PUT IN EYECATCHER
         STCK  UCVTTMSP                PUT IN TIMESTAMP
                                                                SPACE 1
LUCVTGOT DS    0H                      USERCVT ADDRESS NOW IN R1
         MODESET KEY=NZERO             TURN MODESET OFF
         LR    R1,R8                   COPY CVTUSER ADDRESS
*---------------------------------------------------------------------*
         LR    R3,R1                   SAVE REGISTER 1
         LR    R1,R13                  LOAD GETMAINED AREA ADDRESS
         LR    R2,R15                  SAVE REGISTER 15 IN CASE
         L     R13,4(R13)              LOAD CALLERS SAVEAREA @
*        FREEMAIN R,LV=WORKAREL,A=(1)
         LR    R1,R3                   RESTORE R1
         LM    R14,R0,12(R13)          RESTORE REGISTERS 14-0
*                                      LEAVE R1 AS IS
         LM    R2,R12,28(R13)          RESTORE REGISTERS 2-12
         LA    R15,0                   SET RETURN CODE
         BR    R14                     RETURN
*---------------------------------------------------------------------*
         DROP  R3                      END CVT ADDRESSABILITY
         DROP  R8                      END UCVT ADDRESSABILITY
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
***********************************************************************
*        VARIABLES                                                    *
***********************************************************************
WORKAREA DSECT
$REGSAVE DS    18F                     REGISTER SAVE AREA
WORKAREL EQU   *-WORKAREA
                                                                SPACE 1
         USERCVT                       USER CVT
         CVT   DSECT=YES               ENTRY : CVT
         YREGS ,                       REGISTER EQUATES
                                                                SPACE 1
         END   VRUSRCVT




 USER CVT Macro
 ~~~~~~~~~~~~~~

         MACRO
&NAME    USERCVT
***********************************************************************
*        FORMAT OF USER CVT USED AT VIC ROADS                         *
***********************************************************************
                                                                SPACE 1
USERCVT  DSECT
UCVTEYE  DS    D                       EYECATCHER 'USERCVT '
UCVTTMSP DS    D                       TIMESTAMP - TOD CLOCK FORMAT
UCVTLOAD DS    CL2                     IPL LOAD PARAMETER SUFFIX
UCVTSYSP DS    CL2                     IPL IEASYS PARAMETER SUFFIX
         DS    5D'0'                   UNUSED - SET TO ZEROES
USERCVTL EQU   *-USERCVT               LENGTH OF USERCVT
                                                                SPACE 1
         MEND
*---------------------------------------------------------------------*





 REXX  SYSP
 ~~~~~~~~~~

/*    REXX                                                            */
/*
 * Program Name   : SYSP
 * Language       : REXX
 * Assoc Panels   : SYSPAN (Pop up window)
 * Assoc Messages : None
 * Assoc Tables   : None
 * Assoc Programs : None
 * Author         : Maurice L.Clark & Alex Kara
 * Company        : Thunderbird Computing Aust. P/L &  ASYSTS P/L
 * Date           : 09/20/93
 * Objective      : Do a bit of Control Block shopping to grab some
 *                : handy info about the last IPL...
 *
 */

load    = 10    /* The offset of the load parm in the USERCVT DSECT   */
sysp    = 12    /* The offset of the sysp parm in the USERCVT DSECT   */

cvt     = c2x(storage(10,4))                          /* The CVT      */
cvtpfx  = x2d(cvt)- x2d(100)
sprel   =     storage(c2x(d2c(cvtpfx + x2d(d8)) ),8)
mvsrel  =     storage(c2x(d2c(cvtpfx + x2d(fc)) ),4)
smpid   =     storage(c2x(d2c(cvtpfx + x2d(e0)) ),8)
xtnt2   = c2x(storage(d2x(x2d(cvt)   + x2d(148) ),4))
sysad   = c2x(storage(d2x(x2d(cvt)   + x2d(30)  ),4))
cvtoptb = c2x(storage(d2x(x2d(cvt)   + x2d(7b)  ),1))
smca    = c2x(storage(d2x(x2d(cvt)   + x2d(c5)  ),3))
csd     = c2x(storage(d2x(x2d(cvt)   + x2d(294) ),4))
ucvt    = c2x(storage(d2x(x2d(cvt)   + x2d(CC)  ),4)) /* The User CVT */
load    =     storage(d2x(x2d(ucvt)  + x2d(load)),2)  /* LOAD parm    */
sysp    =     storage(d2x(x2d(ucvt)  + x2d(sysp)),2)  /* IEASYS parm  */
nucid   =     storage(d2x(x2d(xtnt2) + x2d(04)  ),1)
iocid   =     storage(d2x(x2d(xtnt2) + x2d(06)  ),2)
resaddr =     storage(d2x(x2d(sysad) + x2d(0d)  ),3)
resvol  =     storage(d2x(x2d(sysad) + x2d(1c)  ),6)
smfid   =     storage(d2x(x2d(smca)  + x2d(10)  ),4)
ipltme  =     storage(d2x(x2d(smca)  + x2d(150) ),4)
ipldte  =     storage(d2x(x2d(smca)  + x2d(154) ),4)

ipldte  = insert('.',substr(c2x(ipldte),3,5),2)
iplhh   = right(c2d(ipltme) % 100 %  3600      ,2,'0')
iplmm   = right(c2d(ipltme) % 100 // 3600 % 60 ,2,'0')
iplss   = right(c2d(ipltme) % 100 // 60        ,2,'0')
ipltme  = iplhh || ':' || iplmm || ':' || iplss

Zwinttl = 'SYSTEM IPL INFORMATION'

Address ISPEXEC "Addpop Row(6) Column(16)"
Address ISPEXEC "VPUT (Zwinttl)"
Address ISPEXEC "Display Panel(ZSYSPAN)"
Address ISPEXEC "Rempop"

Exit



 Panel SYSPAN
 ~~~~~~~~~~~~

)ATTR DEFAULT(%+_)
)BODY  WINDOW(33,15) EXPAND(//)
+
%COMMAND ===>_ZCMD
+
+SMF Id         :%&SMFID        +
+MVS SP Release :%&SPREL        +
+MVS Fmid       :%&SMPID        +
+IPL Date       :%&IPLDTE       +
+IPL Time       :%&IPLTME       +
+Load Member    :%LOAD&LOAD     +
+Ieasys Member  :%IEASYS&SYSP   +
+Nucleus Member :%IEANUC0&NUCID +
+I O Config     :%CONFIG&IOCID  +
+Sysres Volume  :%&RESVOL       +
+Sysres Address :%&RESADDR
+
)PROC
)END



 Started Task SYSPGET
 ~~~~~~~~~~~~~~~~~~~~
//SYSPGET  PROC
//*********************************************************************
//* THIS PROCEDURE EXECUTES ASAP AFTER STARTUP OF JES2.
//* IT SERVES TWO PURPOSES:
//*    A)  CALLS PROGRAM 'VRUCVT' TO BUILD A USER CVT AREA AND
//*        HANG IT OFF THE CVTUSER FIELD OF THE CVT.
//*    B)  SCAN THE MASTER TRACE TABLE IN THE '*MASTER*' ADDRESS SPACE
//*        AND INTERCEPT THE LOAD AND IEASYS PARAMETERS USED AT IPL
//*        AND INSERT THEM INTO THE USER CVT AREA.
//*        (THE USER CVT IS MAPPED BY MACRO 'SYS3.SOURCE(USERCVT)'.)
//*********************************************************************
//*
//SYSPGET  EXEC PGM=SYSPGET
//STEPLIB  DD   DISP=SHR,DSN=ZTS.AUTH.LOADLIB
//
