*----------------------------------------------------------------
* PROGRAM : TSOSYM
* PURPOSE : RETURN VALUE OF VARIABLES IN THE MVS SYMBOL TABLE
*
* INPUTS  : PARAMETERS ON CALL INDICATE WHICH VARIABLES ARE
*           TO BE EXTRACTED
* OUTPUTS : TSO VARIABLES WITH THE SAME NAME AS THE INPUT PARMS.
*           THE VALUES WILL BE THOSE FROM THE SYMBOL TABLE OR BLANK.
*
*----------------------------------------------------------------
*   RMODE 24 NEEDED FOR DCB
TSOSYM CSECT
TSOSYM AMODE 24
TSOSYM RMODE 24
         USING *,R15                   ESTAB. ADDRESSABILITY.
         B     START
         DC    C'TSOSYM : DATE=&SYSDATE TIME=&SYSTIME '
START    DS    0H
         STM   R14,R12,12(R13)         SAVE REGS.
         LR    R12,R15
         DROP  R15
         USING TSOSYM,R12
*
*
         LR    R3,R1               SAVE PARAMETER LIST ADDRESS
         GETMAIN R,LV=WORKSIZE
         LR    R11,R1
         USING WORKAREA,R11
         LA    R15,SAVEAREA_PGM
         ST    R15,8(R13)
         ST    R13,4(R15)
         LR    R13,R15
*
         MVC   PATTERNEYE(8),EYE1
         MVC   TGTEYE(8),EYE2
         MVC   VAREYE(4),EYE3
        SPACE 3
*  --------------------------------------------------------
*  FIND THE ADDRESS OF THE PARAMETERS PASSED TO THE ROUTINE.
*  ON ENTRY:   R1 - ADDRESS OF CPPL
*  ON RETURN:  R1 - ADDRESS OF FIRST PARM
*              R2 - LENGTH OF PARM LIST
*  --------------------------------------------------------
         LR    R1,R3
         BAS   R14,FINDPARM
         LTR   R2,R2
         BZ    RETURN            NO PARAMETERS, EXIT
       EJECT
*  --------------------------------------------------------
*  LOOP THROUGH THE PARAMETERS AND EXTRACT THE NAMES OF ALL
*  VARIABLES FOR WHICH SUBSTITUTION SERVICES ARE REQUIRED.
*
*  THE SUBROUTINE WILL STORE THE ADDRESSES OF THE VARIABLE NAMES
*  AND THEIR LENGTHS INTO THE TABLE POINTED TO BY R9.
*
*  ON ENTRY : R1 - ADDRESS OF FIRST VARIABLE NAME
*             R2 - REMAINING LENGTH OF PARM LIST PASSSED TO PROGRAM
*             R9 - TABLE BASE
*  ON EXIT :  R1 - NUMBER OF VARIABLES IN THE PARM LIST
*             OTHER REGS AS ON ENTRY
*
* ------------------------------------------------------------
         LA    R9,VARTABLE
         BAS   R14,GETPARMS
         ST    R1,VARCOUNT
*
* -----------------------------------------------------------
*  NOW BUILD A 'PATTERN' LIST FOR PASSING TO THE SYMBOL
*  SUBSTITUTION SERVICE.
*
*  THE PATTERN IS OF FORM - &
*                           VARIABLE NAME
*                           .
*                           ,
*
*  THE SYMBOL SUBSTITUTION SERVICE REQUIRES THE & AND '.'
*  DELIMITERS.  THE ',' IS USEFUL WHEN EVALUATING THE LIST
*  RETURNED FROM THE SERVICE.
* -----------------------------------------------------------
         LA    R8,PATTERN       POINT TO PATTERN TO PASS TO SERVICE RTN
MAIN0    EQU   *
         L     R3,0(R9)         GET ADDRESS OF VARIABLE NAME
         L     R5,4(R9)         GET LENGTH OF VARIABLE NAME
         LR    R4,R5            AND SAVE IT
         BCTR  R5,0             DECREMENT FOR EXECUTE
*
         MVI   0(R8),C'&&'      SAVE INTO PATTERN FOR SUBSTITUTION
         LA    R8,1(R8)         POINT PAST THE &
         EX    R5,COPY_TO_PATTERN
         AR    R8,R4            POINT PAST THE NAME
         MVI   0(R8),C'.'       DELIMITER REQUIRED FOR SERVICE RTN
         MVI   1(R8),C','       DELIMITER REQUIRED FOR RETURN
         LA    R8,2(R8)         ALLOW FOR DELIMITERS AND &
*
         LA    R9,8(R9)         MOVE TO NEXT ENTRY IN VARIABLE TABLE
         BCT   R1,MAIN0         REACHED END OF VARIABLE NAMES?
         ST    R8,PATTERNEND    END OF LIST TO PASS TO SUBST SERVICE
       EJECT
*  --------------------------------------------------------
*  SET FOR THE CALL TO THE SYMBOL SUBSTITUTION SERVICE.
*
*  THIS PROGRAM IS ONLY INTERESTED IN MVS SYMBOLS SO WE CAN
*  INITIALISE THE PARM BLOCK TO ZEROES AND DO NOT HAVE TO
*  SET UP A USER SYMBOL TABLE.
*
*  R3 - SYMBOL PARAMETER BLOCK.
*  R4 - WORK REG
*  R5 - WORK REG
*  OTHER REGS AS BEFORE.
*  --------------------------------------------------------
         LA    R3,MYSYMBP
         USING SYMBP,R3
         XC    SYMBP(SYMBP_LEN),SYMBP   INITIALIZE TO ZERO
         LA    R4,PATTERN                ADDRESS OF PATTERN
         ST    R4,SYMBPPATTERN@          SAVE IN SYMBP AREA
         L     R5,PATTERNEND             END OF PATTERN
         SR    R5,R4                     CALC LENGTH OF PATTERN
         ST    R5,SYMBPPATTERNLENGTH     SAVE IN SYMBP AREA
         LA    R4,TARGET                 ADDRESS OF TARGET
         ST    R4,SYMBPTARGET@           SAVE IN SYMBP AREA
         LA    R4,LTARGET                GET LENGTH OF TARGET
         ST    R4,TARGETLEN              SET LENGTH OF TARGET
         LA    R4,TARGETLEN              ADDRESS OF TARGET LENGTH
         ST    R4,SYMBPTARGETLENGTH@     SAVE IN SYMBP AREA
*
         LA    R4,RETURNCODE             ADDRESS OF RETURN CODE
         ST    R4,SYMBPRETURNCODE@       SAVE IN SYMBP AREA
         DROP  R3
         LINK  EP=ASASYMBM,MF=(E,MYSYMBP)
       SPACE 2
* ---------------------------------------------------------
* GET ADDRESSES AND LENGTHS OF THE VALUES RETURNED FROM THE
* SUBSTITUTION SERVICE
* ----------------------------------------------------------
         LA    R2,LTARGET         MAX LENGTH OF TARGET AREA
         LA    R1,TARGET          ADDRESS OF TARGET AREA
         LA    R9,VALTABLE        ADDRESS OF TABLE FOR POINTERS
         BAS   R14,GETPARMS
       SPACE 2
*
*  GET SYSTEM VALUES REQUIRED FOR USING TSO SERVICE ROUTINE
*
       EJECT
*
* NOW BUILD THE PARAMETER TABLES
*
         L     R10,VARCOUNT        LOOP COUNTER
         LA    R14,VALTABLE        PTRS TO VARIABLE VALUES & LENGTHS
         LA    R9,VARTABLE         PTRS TO VARIABLE NAMES & LENGTHS
         LA    R8,ADDRTABLE        ADDRESSES TO PASS TO SERVICE RTN
         LA    R7,PARMTABLE        ACTUAL PARAMETERS FOR SERVICE RTN
         LA    R5,TSVEUPDT         CONSTANT - SERVICE TO REQUEST
         XR    R4,R4               CONSTANT - VALUE FOR SERVICE RTN
         L     R3,ECTPARM          CONSTANT - VALUE FOR SERVICE RTN
         LA    R1,4                POINTER INCREMENT VALUE
*
MAIN1    EQU   *
         ST    R5,0(R7)        (1) SERVICE BEING REQUESTED
         L     R2,0(R9)        (2) ADDRESS OF VARIABLE NAME
         ST    R2,4(R7)
         L     R2,4(R9)        (3) LENGTH OF VARIABLE NAME
         ST    R2,8(R7)
         L     R2,0(R14)       (4) ADDRESS OF VARIABLE VALUE
         ST    R2,12(R7)
         L     R2,4(R14)       (5) LENGTH OF VARIABLE VALUE
         ST    R2,16(R7)
         ST    R4,20(R7)       (6) TOKEN FOR SERVICE RTN
         ST    R3,24(R7)       (7) ECT PARAMETER FOR SERVICE RTN
         ST    R4,28(R7)       (8) RETURN CODE AREA FOR SERVICE RTN
         LA    R6,36(R8)
         ST    R6,32(R7)       (9) POINT TO NEXT SET OF PARMS
*
         LR    R6,R7               USE R6 AS A WORK POINTER
         ST    R7,0(R8)            ADDRESS OF PARM 1
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,4(R8)            ADDRESS OF PARM 2
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,8(R8)            ADDRESS OF PARM 3
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,12(R8)           ADDRESS OF PARM 4
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,16(R8)           ADDRESS OF PARM 5
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,20(R8)           ADDRESS OF PARM 6
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,24(R8)           ADDRESS OF PARM 7
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,28(R8)           ADDRESS OF PARM 8
         AR    R6,R1               INCREMENT TO NEXT ADDRESS
         ST    R6,32(R8)           ADDRESS OF PARM 9
         OI    32(R8),B'10000000' SET HIGH ORDER BIT ON LAST PARM
         LA    R14,8(R14)          GET NEXT VARIABLE VALUE ENTRIES
         LA    R9,8(R9)            GET NEXT VARIABLE NAME  ENTRIES
         LA    R8,36(R8)           UP TO NEXT FREE PRM TABLE ENTRIES
         LA    R7,36(R7)
         BCT   R10,MAIN1
         ST    R4,0(R6)       (8)  NEXT ADDRESS OF ZERO
*
         L      R1,16               ADDRESS OF CVT
         USING  CVT,R1
         L      R5,CVTTVT           TSVT  TSO VECTOR TABLE
         L      R5,TSVTVACC-TSVT(,R5) VARIABLE ACCESS RTN
         LTR    R5,R5               IS THERE A VALUE
         BNZ    CALL441             CALL IKJCT441
LINK441  LINK  EP=IKJCT441,         OTHERWISE LINK                     +
               MF=(E,ADDRTABLE)
         B     RET441
CALL441  LR    R15,R5
         CALL  (15),                                                   +
               MF=(E,ADDRTABLE)
RET441   EQU   *
*----------------------------------------------------------
*
*        OPEN  (SNAPDCB,(OUTPUT))
*        LA    R10,WORKSIZE
*        AR    R10,R11           CALCULATE ENDING ADDRESS TO DUMP
*      SNAP  DCB=SNAPDCB,PDATA=(REGS,PSW),                           +
*            STORAGE=((R11),(R10)),                                  +
*              STRHDR=(SNAP3)
*----------------------------------------------------------
*
RETURN   EQU   *
         L     R13,4(R13)
         FREEMAIN R,A=(11),LV=WORKSIZE
         LM    R14,R12,12(R13)
         XR    R15,R15                SET RETURN CODE
         BR    R14
        SPACE 3
*
FINDPARM EQU   *
         USING CPPL,R1               MAP CMD PROCESSOR PARM LIST
         L     R2,CPPLECT
         USING ECT,R2
         MVC   PGMNAME(8),ECTPCMD    NAME OF PRIMARY COMMAND
         DROP  R2
         L     R1,CPPLCBUF           ADDRESS OF COMMAND BUFFER
         LH    R2,0(0,R1)            LENGTH OF COMMAND BUFFER
         LA    R0,4
         AR    R1,R0                 POINT PAST FIRST WORD
         SR    R2,R0                 AND ALLOW FOR IT
         LA    R0,1                  COUNTER INCREMENT VALUE
FIND1    EQU   *
         CLC   PGMNAME(8),0(R1)
         BE    FIND2
         AR    R1,R0                 UP THE POINTER
         BCT   R2,FIND1              DECREMENT LENGTH OF PARM LIST
         BR    R14                   NO PARMS, EXIT
FIND2    EQU   *
         LA    R0,8
         AR    R1,R0                 POINT PAST PROGRAM NAME
         SR    R2,R0                 AND ALLOW FOR IT
         BR    R14
        SPACE  3
* -----------------------------------------------
*  THE GETPARMS ROUTINE LOADS THE ADDRESSES AND LENGTHS
*  OF THE REQUESTED VARIABLE NAMES INTO A TABLE
*  ON ENTRY:   R9 - ADDRESS OF TABLE
*              R1 - ADDRESS OF CURRENT PARM
*              R2 - LENGTH OF PARM LIST
*  ON RETURN:  R1 - NUMBER OF VARIABLES.
* -----------------------------------------------
GETPARMS EQU   *
         BAKR  R14,0                   SAVE REGS. ON THE STACK
*
         LA    R6,1            COUNTER INCREMENT VALUE
         XR    R5,R5           PARAMETER COUNTER
GETP01   EQU   *
         LR    R3,R1           SAVE ADDRESS OF CURRENT VARIABLE NAME
         BAS   R14,GETVALUE
         LR    R4,R1           SAVE POINTER TO NEXT PARM OR LAST CHAR
*                              OF FINAL PARM
         LTR   R2,R2           PROCESSING FINAL PARAMETER?
         BZ    GETP02
         BCTR  R4,0            - NO, BACKSPACE TO BEFORE DELIMITER
*
GETP02   EQU   *
         SR    R4,R3           CALCULATE LENGTH OF THE VARIABLE NAME
         ST    R3,0(R9)
         ST    R4,4(R9)
         LA    R9,8(R9)        INCREMENT TO NEXT FREE VALUE
         AR    R5,R6
         LTR   R2,R2           MORE TO PROCESS?
         BNZ   GETP01          - YES
*
         LR    R1,R5           SAVE COUNT OF PARAMETERS
         PR
         BR    R14
* -----------------------------------------------
*  THE GETVALUE ROUTINE WILL RETURN A PARAMETER VALUE. THE ROUTINE
*  ASSUMES THE LIST IS COMMA DELIMITED.
*  ON ENTRY:   R1 - ADDRESS OF CURRENT VALUE
*              R2 - LENGTH OF VALUE LIST
*  ON RETURN:  R1 - ADDRESS OF NEXT VALUE.
*              R2 - REMAINING LENGTH OF VALUE LIST
* -----------------------------------------------
GETVALUE EQU    *
         LA    R0,1
GETV01   EQU   *
         CLI   0(R1),C','            FOUND DELIMITER
         BE    GETV02
         AR    R1,R0                 UP THE POINTER
         BCT   R2,GETV01             DECREMENT LENGTH OF VALUE LIST
         BR    R14                   NO VALUES, EXIT
GETV02   EQU   *
         AR    R1,R0                 POINT PAST DELIMITER
         SR    R2,R0                 AND ALLOW FOR IT
         BR    R14
        SPACE 3
*    ---------------------------------------------
*    MOVE A COPY OF THE REQUESTED VARIABLE NAME
*    TO THE PATTERN TO PASS TO THE SERVICE ROUTINE.
*    ---------------------------------------------
COPY_TO_PATTERN MVC 0(0,R8),0(R3)
        EJECT
*----------------------------------------------------------
*SNAPDCB  DCB   DDNAME=SNAPDMP,DSORG=PS,MACRF=(W),RECFM=VBA,          +
*              LRECL=125,BLKSIZE=1632
*SNAP1    DC  AL1(L'SNAPHDR1)
*SNAPHDR1 DC  C'PARM LIST'
*SNAP2    DC  AL1(L'SNAPHDR2)
*SNAPHDR2 DC  C'COMMAND BUFFER'
*SNAP3    DC  AL1(L'SNAPHDR3)
*SNAPHDR3 DC  C'PROGRAM WORK AREA'
*
*   ------------------------------------------------------
*   THE FOLLOWING EQUATES ARE USED TO DEFINE THE SIZE OF
*   THE WORK AREA WHICH WILL BE GETMAINED.  THE VALUES ARE
*   BASED AROUND THE AMOUNT OF STORAGE REQUIRED TO PROCESS
*   EACH VARIABLE BEING PASSED TO THE PROGRAM.  IF THE
*   MAXIMUM NUMBER OF VARIABLE IS TO BE INCREASED, THEN ONLY
*   THE ONE EQUATE NEEDS TO BE ALTERED.
*   ------------------------------------------------------
*
MAXVARS  EQU 15             ALLOW FOR UP TO THIS MANY VARIABLES
*
PATTERNSIZE EQU 4*MAXVARS   SIZE OF PATTERN AREA TO PASS TO
*                           SYMBOL SUBSTITUTION ROUTINE
TARGETSIZE  EQU 4*MAXVARS   MAX SIZE OF AREA RETURNED FROM SYMBOL
*                           SUBSTITUTION ROUTINE
ADDRSIZE    EQU 9*MAXVARS   MAX SIZE OF AREAS FOR PASSING PARAMETERS
PARMSIZE    EQU 9*MAXVARS   TO THE TSO SERVICE ROUTINE.
*
VARSIZE     EQU 2*MAXVARS   SPACE REQUIRED FOR VARIABLE NAME TABLE
*
VALSIZE     EQU 2*MAXVARS   SPACE REQUIRED FOR VARIABLE VALUES TABLE
         DS  0F
ECTPARM  DC  X'FFFFFFFF'
EYE1     DC  C'PATTERN '
EYE2     DC  C'TARGET  '
EYE3     DC  C'LIST'
*----------------------------------------------------------
*
* -----------------
*   VARIABLE DATA
* -----------------
WORKAREA     DSECT
WORKSPACE    DS    0F
SAVEAREA_PGM DS    18F
PGMNAME      DS    2F               NAME USED TO INVOKE PGM
PATTERNEYE   DS    2F
PATTERNEND   DS    F                END OF VALUES IN PATTERN
PATTERN      DS    (PATTERNSIZE)F   SPACE TO STORE SYMBOLS TO BE PASSED
LPATTERN     EQU   *-PATTERN        TO THE SUBSTITUTION SERVICE ROUTINE
*
TGTEYE       DS    2F
TARGETLEN    DS    F
TARGET       DS   (TARGETSIZE)F     SPACE FOR RESOLVED SYMBOL STRING
LTARGET      EQU   *-TARGET
*
*     THE ADDRTABLE AND PARMTABLE STORAGE AREAS HOLD POINTERS AND
*     VALUES IN THE FORMAT REQUIRED FOR THE TSO SERVICE ROUTINE.
*     THEY ARE FILLED IN BY THE PROGRAM AS REQUIRED.  NINE WORDS
*     ARE REQUIRED IN EACH TABLE FOR EACH VARIABLE WHICH IS TO
*     BE PASSED BACK TO THE SERVICE ROUTINE.
*
ADDRTABLE    DS  (ADDRSIZE)F        ADDRESS OF PARMS FOR TSO SERVICE
*
PARMTABLE    DS  (PARMSIZE)F        PARMS FOR TSO SERVICE RTN
*
*      THE VARTABLE AND VALTABLE STORAGE AREAS ARE TABLES
*      CONTAINING POINTERS TO CHARACTER VALUES AND THE LENGTHS
*      OF THE VALUES.  TWO ADDRESSES ARE REQUIRED FOR EACH
*      POINTER - ONE FOR AN ADDRESS AND THE OTHER FOR A LENGTH.
VAREYE       DS    F
VARCOUNT     DS    F                NUMBER OF VARIABLES REQUESTED
VARTABLE     DS    (VARSIZE)F       PARAMETER VARIABLE NAME LIST
*
VALTABLE     DS    (VALSIZE)F       PTRS TO VALUES BACK FROM SUBST SERV
*
RETURNCODE   DS    F                RETURN CODE
*
MYSYMBP      DS    CL(SYMBP_LEN)    SYMBOL SUBST PARM BLOCK
*
WORKSIZE EQU   *-WORKSPACE
*
         PRINT NOGEN
*
         IHAPSA
*
         CVT DSECT=YES
*
*   ---------------------------------------
*   MAP THE SYMBOL SUBSTITUTION PARM LIST
*   ---------------------------------------
         ASASYMBP DSECT=YES,LIST=NO
*   ---------------------------------------
*   MAP THE TSO COMMAND PROCESSOR PARM LIST
*   ---------------------------------------
         IKJCPPL
*
*   ---------------------------------------
*   MAP THE TSO ENVIRONMENT CONTROL TABLE
*   ---------------------------------------
         IKJECT
*
         IKJTSVT
*
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                  WORK AREA (UPDATEABLE STORAGE)
R11      EQU   11                  PARM LIST
R12      EQU   12                  BASE REGISTER
R13      EQU   13                  STD USE
R14      EQU   14                  STD USE
R15      EQU   15                  STD USE
         END
