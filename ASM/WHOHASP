*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
**
**       Title:    'Display "WHO has" a resource (dataset) allocated.'
**       System:   N/A
**       Module:   WHOHASP
**       Program:  WHOHASP
**       Function: Provides all ENQ details by a dataset resource.
**
**                 Requires a parameter of dataset name at least.
**
**                 If you wish to process the table created, in another
**                 dialogue (eg. CLIST), set variable 'KEEPTB' to 'Y'
**                 and 'VPUT' it in the shared pool in the invoking
**                 dialogue.  On exit from this program, table
**                 'WHATHAS' will be kept open in no- write mode. It is
**                 up to the user to issue a 'TBEND' in his dialogue.
**
**                 This program may be run under the following
**                 environments:
**
**                 1. TSO - Either direct "WHOHASP name" or "CALL
**                    'loadlibrary(WHOHASP)' 'name'" where 'name' may
**                    be prefixed by "ISPF" or "SDSF".
**                    If no prefix is used, the display will be through
**                    line by line PUTLINEs which may be trapped using
**                    the REXX/CLIST OUTTRAP command.
**
**                    With the "ISPF" prefix, in an ISPF environment
**                    with panel "CONFLICT" in the 'ISPPLIB'
**                    concatenation, the data will be presented in
**                    either a table or a panel display if no ENQ's
**                    found.
**                    With the "SDSF" prefix, output will be directed
**                    to the system log.
**
**                 2. Batch - Either as a job or as a started task:
**                    JCL required is,
**                    //STEP1    EXEC  PGM=WHOHASP,PARM='SDSFtaskname'
**                    //STEPLIB  DD DISP=SHR,DSN=loadlib.dsn
**
**       Notes:    Program is re-entrant.
**
**       Author:   ASYSTS P/L, (A. Kara).
**
*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*        PRINT OFF
*        COPY  @MACROS                 COMMON MACROS
*        PRINT ON
WHOHASP  KICKOFF (R11,12),WORKAREA,WORKLEN,LIST=NO,HELP=NO
*---------------------------------------------------------------------*
START    DS    0H
         LR    R7,R1                   CPPL ADDR
         ST    R1,R1SAVER              STORE REGISTER 1 LATER USE
         ST    R7,DWORK8               STORE REGISTER
         TM    DWORK8,X'80'            Q. PARMLIST PASSED
         BNO   CMDPROC                    N. PROCESS COMMAND PROCEDURE
         MVC   SPACES(49),=C'Must invoke "WHOHAS" as a command processrr
               r only.'
         TPUT  SPACES,79,EDIT,WAIT,,BREAKIN,HIGHP
         LA    R15,16                  SET BAD RETURN CODE
         B     GETOUT                  GO EXIT PROGRAM
CMDPROC  DS    0H
         USING CPPL,R7                 ADDRESABILITY TO CPPL
         USING GETMAINA,R10            ESTABLISH ADDRESABILITY
         BAL   R14,GETMAIN1            GO AND GET WORK AREA
RETGETM  DS    0H
*---------------------------------------------------------------------*
         MVC   USERID,SPACES           CLEAR USERID
         L     R9,CPPLUPT              GET UPT ADDR
         USING UPT,R9                  ADDRESABILITY TO UPT
         LA    R5,USERID               DESTINATION ADDRESS
         LA    R6,UPTPREFX             GET PREFIX ADDR
         XR    R1,R1                   INITIALISE REGISTER
         IC    R1,UPTPREFL             GET LENGTH OF PREFIX
         LTR   R1,R1                   ANY LENGTH RETURNED
*        LA    R1,1(R1)                ADD 1 FOR RELATIVE LENGTH
         LTR   R1,R1                   Q. ANY LENGTH PASSED
         BZ    NOLENGTH                   N. GET USERID ANOTHER WAY
         STH   R1,USERIDL              STORE USERID LENGTH
         BCTR  R1,0                    RELATIVE LENGTH
         MVC   USERID,SPACES           CLEAR USERID
         EX    R1,MOVEGENR             MOVE USERID
         DROP  R9                      KILL ADDRESABILITY
         B     HAVEUID                 BYPASS ALTERNATIVE WAY
*---------------------------------------------------------------------*
NOLENGTH DS    0H
         L     R9,16                   CVT X'10' OFFSET FROM PSA
         USING CVT,R9                  R9 ON CVT DSECT
         L     R9,CVTTCBP
         L     R9,12(R9)               CURRENT ASCB ADDR
         USING ASCB,R9                 ESTABLISH ADDRESABILITY
         L     R2,ASCBJBNI             JOBNAME ADDR
         CLC   ASCBJBNI,=F'0'          Q. HAVE  ADDRESS
         BNE   GOTUSER                    Y. GO TO GET USERID
         L     R2,ASCBJBNS             STC/TSUNAME ADDR
         CLC   ASCBJBNS,=F'0'          Q. HAVE  ADDRESS
         BNE   GOTUSER                    Y. GO TO GET USERID
         MVC   USERID(7),SPACES        SPACE FILL USERID
         DROP  R9                      KILL ADDRESABILITY
         B     HAVEUID                 BYPASS GET USERID
GOTUSER  DS    0H
         MVC   USERID(7),0(R2)         7 BYTE USERID
         LA    R3,7                    MAX USERID LENGTH
         LA    R2,USERID+6             LAST BYTE OF USERID
UIDLOP1  DS    0H
         CLI   0(R2),C' '              Q. CHRACTER A SPACE
         BCTR  R2,0                    POINT TO PREVIOUS CHARACTER
         BNE   UIDLOP1E                   N. EXIT LOOP
         BCT   R3,UIDLOP1              LOOP TILL END
UIDLOP1E DS    0H
         STH   R3,USERIDL              STORE USERID LENGTH
HAVEUID  DS    0H
*---------------------------------------------------------------------*
         MVC   GQSCAN1(GQSCANL),GQSCANF MOVE LIST AREA TO GETMAIN
         MVI   ENVMNT,C'N'             SIGNAL NON-ISPF ENVIRONMENT
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         LA    R15,MYIOPL              LOAD ADDRESS TO IOPL
         USING IOPL,R15                ESTABLISH ADDRESABILITY
         MVC   IOPLUPT(4),CPPLUPT      MOVE ADDRESS OF UPT TO IOPL
         MVC   IOPLECT(4),CPPLECT      MOVE ADDRESS OF ECT TO IOPL
         LA    R0,MYECB                LOAD ADDRESS OF MY ECB
         ST    R0,IOPLECB              STORE ADDRESS IN IOPL
         XC    MYECB,MYECB             CLEAR ECB ADDRESS
         LA    R0,MYPTPB               LOAD @ OF PUTLINE PARM BLOCK
         ST    R0,IOPLIOPB             STORE IT IN IOPL
         DROP  R15                     LELINQUISH ADDRESABILITY
         L     R15,16                  CVT ADDRESS
         L     R15,0(R15)              POINT TO CVT
         TM    444(R15),X'80'          Q. IS PUTLINE LOADED? (MVS)
         BNO   PUTLOAD                    N. BRANCH TO LOAD
         L     R15,444(,R15)           USE CVTPUTL
         B     PUTLOADX                BRANCH AROUND LOAD
PUTLOAD  DS    0H
         LA    R0,=CL8'IKJPUTL '       LOAD PROGRAM NAME
         LOAD  EPLOC=(0)               LOAD PROGRAM
         LR    R15,R0                  GET ENTRY ADDRESS
         LA    R15,0(,R15)             CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX DS    0H
         ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
*---------------------------------------------------------------------*
         MVC   MESSAGEH(79),=C'----------------------------- ENQUEUE ACT
               TIVITY --------------------------------'
         MVI   MESSAGET,C'-'           CLEAR MESSAGE TAIL
         MVC   MESSAGET+1(78),MESSAGET     AREA
         MVC   TIME(8),=C'..:..:..'    TIME TEMPLATE
         BAL   R14,TIMERTN             GO PERFORM TIME ROUTINE
         MVC   MESSAGEH(8),TIME        MOVE TIME TO HEADER
         MVI   MESSAGEH+8,C' '         MOVE SEPERATOR
         LA    R1,TPUTRTN              LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE ROUTINE ADDRESS
         ST    R1,RTNADRS2             STORE ROUTINE ADDRESS
         L     R6,CPPLCBUF             GET COMMAND BUFFER ADDR
*---------------------------------------------------------------------*
*  BEFORE PROCESSING COMMAND BUFFER TEST IF CONVENTINOAL PARAMETER    *
*  PASSED THROUG A JOB OR STC... (DIFFERENT FORMAT TO COMMAND         *
*  PROCESSOR).                                                        *
*---------------------------------------------------------------------*
         L     R7,0(R7)                LOAD ADDRESS OR PARAMETER
         LH    R9,0(R7)                LOAD LENGTH OF PARAMETER
         LTR   R9,R9                   Q. IS PARAMETER LENGTH ZERO
         BZ    NOPARAM                    Y. GO PROCESS 'SYSIN'
         LA    R8,2(R7)                POINT PAST PARAMETER LENGTH
         MVC   DWORK8(4),0(R8)         MOVE PARAMETER PASSED
         OC    DWORK8(4),SPACES        CONVERT TO UPPER CASE
TSTSDSF1 DS    0H
         CLC   DWORK8(4),=C'SDSF'      Q. IN AN SDSF ENVIRONMENT
         BE    PROCSDSF                   Y. PROCESS SDSF ENVIRONMENT
TSTISPF1 DS    0H
         CLC   DWORK8(4),=C'ISPF'      Q. IN AN ISPF ENVIRONMENT
         BE    PROCISPF                   Y. PROCESS ISPF ENVIRONMENT
NOPARAM  DS    0H
         LH    R9,0(R6)                TOTAL COMMAND LENGTH
         SH    R9,=H'2'                SUBTRACT LENGTH OF ITSELF
         LH    R3,2(R6)                OPERAND DISPLACEMENT
         SR    R9,R3                   SUBTRACT LENGTH OF COMMAND PART
         BZ    CONT#10                 IF ZERO NO PARAMETER PASSED
         SH    R9,=H'2'                SUBTRACT LENGTH PARAMETER
         LA    R8,4(R6)                ADDR OF START OF COMMAND
         AR    R8,R3                   ADD DISPLACEMENT TO OPERAND
         STH   R9,RESOURCL             STORE DSNAME NAME LENGTH
         MVC   DWORK8(4),0(R8)         MOVE PARAMETER PASSED
         OC    DWORK8(4),SPACES        CONVERT TO UPPER CASE
TSTISPF2 DS    0H
         CLC   DWORK8(4),=C'ISPF'      Q. IN AN ISPF ENVIRONMENT
         BNE   TSTSDSF2                   N. NEXT TEST
PROCISPF DS    0H
         MVI   ENVMNT,C'I'             SIGNAL ISPF ENVIRONMENT
         LA    R8,4(R8)                POINT PAST 'ISPF'
         SH    R9,=H'4'                SUBTRACT LENGTH OF 'ISPF'
         STH   R9,RESOURCL             STORE DSNAME NAME LENGTH
         LA    R1,TBADDRTN             LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE ROUTINE ADDRESS
         LA    R1,TBDISRTN             LINE MESSAGE ADDRESS
         ST    R1,RTNADRS2             STORE ROUTINE ADDRESS
         BAL   R14,DEFISPF             GO AND DEFINE ISPF AND TABLE
         CLI   ENVMNT,C'I'             Q. HAS ENVIRONMENT CHANGED
         BNE   CONT#10                    Y. PROCESS NON-ISPF ACTION
         B     CONT#111                CONTINUE PROCESSING
TSTSDSF2 DS    0H
         CLC   DWORK8(4),=C'SDSF'      Q. IN AN ISPF ENVIRONMENT
         BNE   CONT#00                    N. NEXT TEST
PROCSDSF DS    0H
         MVI   ENVMNT,C'S'             SIGNAL SDSF ENVIRONMENT
         LA    R8,4(R8)                POINT PAST 'SDSF'
         SH    R9,=H'4'                SUBTRACT LENGTH OF 'SDSF'
         STH   R9,RESOURCL             STORE DSNAME NAME
         LA    R1,WTORTN               LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE ROUTINE ADDRESS
         ST    R1,RTNADRS2             STORE ROUTINE ADDRESS
         MVC   WTODET1(WTODETL),WTODETF MOVE WTO DATA TO GETMAINED
         MVC   MESSAGEH+72(7),SPACES   CLEAR LAST BIT OF MESSAGE LINE
         MVI   MESSAGEH,C'-'           REPLACE '-' OVER DATE AS SDSF
         MVC   MESSAGEH+1(8),MESSAGEH      ALREDY HAS TIME STAMP
         MVC   MESSAGET+72(7),SPACES   CLEAR LAST BIT OF MESSAGE LINE
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE AREA
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         B     CONT#11                 CONTINUE PROCESSING
CONT#00  DS    0H
         CLC   0(4,R8),SPACES          Q. SPACES PASSED
         BE    EXITPRG8                   N. INVALID PARM EXIT RC=8
CONT#10  DS    0H
         L     R1,R1SAVER              RESTORE REGISTER 1 LATER USE
         CALL  CLEAR                   CALL CLEAR SCREEN PROGRAM
*        CALL  CLEARSCR                CALL CLEAR SCREEN PROGRAM
CONT#11  DS    0H
         MVC   MESSAGEG(L'MESSAGEG),MESSAGEH MOVE HEADLINE
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
CONT#111 DS    0H
         MVC   RESOURCE,SPACES         CLEAR DSNAME
         LH    R9,RESOURCL             LOAD DSNAME LENGTH
         BCTR  R9,0                    ONE OFF FOR LENGTH OF DSNAME
         EX    R9,MOVEDSN1             MOVE DSNAME
         BAL   R14,PARSE0              MOVE DSNAME TO DISPLAY AREA
ISSUE0   DS    0H
         BAL   R14,ISSUE1              GO ISSUE 'GQSCAN' MACRO
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   FOUNDEQ                    N. BYPASS
XISSUE1  DS    0H
         BAL   R14,PARSE1              GO AND DISPLAY ALL ENQS
FOUNDEQ  DS    0H
         CLI   ENVMNT,C'I'             Q. ISPF ENVIRONMENT
         BE    LASTDISP                   Y. DISPLAY TABLE
         MVC   MESSAGEG(L'MESSAGET),MESSAGET MOVE TAIL MESSAGE
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         B     EXITPRG0                NO EXIT PROGRAM
LASTDISP DS    0H
         L     R15,RTNADRS2            LOAD FINAL MESSAGE ROUTINE
         BALR  R14,R15                 GO PERFORM FINAL ROUTINE
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BZ    CONT#111                   Y. REDISPLAY
EXITPRG0 DS    0H
         XR    R15,R15                 SET ZERO RETURN CODE
         B     EXITPROG                GOTO COMMPON EXIT
*---------------------------------------------------------------------*
EXITPRG8 DS    0H
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE
         MVC   MESSAGEG(19),=C'Invalid parameter '''
         MVC   MESSAGEG+19(4),0(R8)    MOVE PASSED PARAMETER
         MVC   MESSAGEG+23(9),=C''' passed.'
         LA    R15,TPUTRTN             LOAD TPUT ROUTINE ADDRESS
         BALR  R14,R15                 CALL TPUT ROUTINE
         LA    R15,8                   SET RETURN CODE
*---------------------------------------------------------------------*
EXITPROG DS    0H
         LR    R5,R15                  SAVE PRE-SET RETURN CODE
         L     R1,MYARPTR1             SET FREEMAIN ADDRESS
         FREEMAIN RC,LV=GETMAINL,A=(1) FREE THE WORK AREA
         LR    R15,R5                  RESTORE EXIT CODE
GETOUT   DS    0H
         RACKOFF RC=(R15)
*=====================================================================*
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
GETMAIN1 DS    0H
         GETMAIN RC,LV=GETMAINL        ACQUIRE A WORK AREA
         LTR   R15,R15                 Q. ZERO RETURN CODE FROM GETMAIN
         BNZ   GETOUT                     Y. CONTINUE PROCESSING
         LR    R10,R1                  USE R10 AS GETMAIN POINTER
         ST    R10,MYARPTR1            STORE GETMAIN ADDRESS
         B     RETGETM                 RETURN TO CALLER
*---------------------------------------------------------------------*
GETMLENG DC    A(GETMAINL)             GET MAIN LENGTH
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*   GET ENQ DETAILS. SET RC=0 IF ENQS FOUND OTHERWISE DISPLAY A NOT   *
*   FOUND MESSAGE.                                                    *
*---------------------------------------------------------------------*
ISSUE1   DS    0H
         STM   R0,R14,SAVSUBR1      SAVE REGISTERS
         L     R2,GETMLENG             SET R2 FOR LENGTH OF AREA
         LA    R4,GQSCAN1              LOAD ADDRESS OF GQSCAN AREA
         LH    R5,RESOURCL             LENGTH OF ABOVE DSNAME
         LA    R6,RESOURCE             ADDRESS OF RESOURCE
DSNSCAN  DS    0H
         GQSCAN AREA=((R10),(R2)),SCOPE=ALL,                           X
               RESNAME=(QUENAME,(R6),(R5)),                            X
               MF=(E,(R4))             ISSUE GQSCAN
         ST    R0,R0SAVER              SAVE REG FOR LATER USE
         ST    R1,R1SAVER              SAVE REG FOR LATER USE
         ST    R15,R15SAVER            SAVE REG FOR LATER USE
         MVI   ENQFND,C'Y'             SET ENQ FOUND FLAG
         LA    R15,0                   SET ZERO RETURN CODE
         LTR   R1,R1                   Q. ANY RID'S PASSED
         BNZ   RETMAIN1                   Y. BYPASS ERROR PROCESS
         MVI   ENQFND,C'N'             SET ENQ FOUND FLAG OFF
         MVC   MESSAGEG(30),=C'Dataset not found or not used.'
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         LA    R15,4                   SET ERROR RETURN CODE
RETMAIN1 DS    0H
         LM    R0,R14,SAVSUBR1         RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*   MOVE DATASET NAME TO HEADLINE AND DISPLAY                         *
*---------------------------------------------------------------------*
PARSE0   DS    0H
         STM   R0,R14,SAVSUBR1         SAVE REGISTERS
         BAL   R14,PARSEDSN            GO PARSE DATASET
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE
         LA    R2,MESSAGEG             ADDRESABILITY TO MESSAGE
         MVC   USERIDIS(9),SPACES      CLEAR JOB NAME
         MVI   USERIDIS,C'1'           SORT KEY
*        MVC   0(22,R2),=C'  Resource name ===> '''
*        LA    R2,22(R2)               POINT PAST DATA MOVED
         MVC   0(19,R2),=C'  Resource name : '''
         LA    R2,19(R2)               POINT PAST DATA MOVED
         LH    R9,RESOURCL             LOAD TASK NAME LENGTH
         BCTR  R9,0                    ONE OFF FOR LENGTH OF TASK
         EX    R9,MOVEDSN2             MOVE DSNAME NAME
         AH    R2,RESOURCL             ADD LENGTH OF RESOURCE
         MVI   0(R2),C''''             MOVE TERMINATING '
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE
         MVI   USERIDIS,C'2'           SORT KEY
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE
RETMAIN2 DS    0H
         LM    R0,R14,SAVSUBR1         RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*   FORMAT AND DISPLAY ALL ENQS FOUND.                                *
*---------------------------------------------------------------------*
PARSE1   DS    0H
         STM   R0,R14,SAVSUBR1         SAVE REGISTERS
         L     R7,R1SAVER              LOOP COUNTER - # OF RIB'S RET'D
         LA    R10,GETMAINA            ADDRESS OF GOTMAIN AREA
         USING RIB,R10                 ADDRESSABILITY TO RIB
RIBLOOP1 DS    0H
         LA    R2,MESSAGEG             OUTPUT ADDRESS OF DATA
         MVC   MESSAGEG,SPACES         CLEAR OUTPUT AREA
         L     R1,RIBNTO               NO OF OWNER TASKS
         CVD   R1,DWORK8               CONVERT TO DECIMAL
         MVC   8(4,R2),PATTERN         MOVE EDIT PATTERN TO OUTPUT AREA
         ED    8(4,R2),DWORK8+6        EDIT OVER PATTERN
         MVC   0(08,R2),=C'OWNERS ='
         L     R1,RIBNTWE              NO OF TASK WITH EXCLUSIVE WAITS
         CVD   R1,DWORK8               CONVERT TO DECIMAL
         MVC   25(4,R2),PATTERN        MOVE EDIT PATTERN TO OUTPUT AREA
         ED    25(4,R2),DWORK8+6       EDIT OVER PATTERN
         MVC   14(11,R2),=C'EXCL WAIT ='
         L     R1,RIBNTWS              NO OF TASK WITH SHARED WAITS
         CVD   R1,DWORK8               CONVERT TO DECIMAL
         MVC   41(4,R2),PATTERN        MOVE EDIT PATTERN TO OUTPUT AREA
         ED    41(4,R2),DWORK8+6       EDIT OVER PATTERN
         MVC   31(10,R2),=C'SHR WAIT ='
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         MVC   MESSAGEG,SPACES         CLEAR MESSAGE AREA
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         LR    R9,R10                  LOAD START OF RIB
         AH    R9,#RIBFLEN             ADD LENGTH OF RIB
         AH    R9,RIBVLEN              ADD VARIABLE PART OF RIB
         L     R8,RIBNRIBE             # OF RIBE'S RETURNED WITH RIB
         USING RIBE,R9                 ADDRESSABILITY TO RIBE
*        XR    R4,R4                   INIT LINE COUNTER
         LA    R2,MESSAGEG             OUTPUT AREA
         MVC   MESSAGEG,SPACES         CLEAR OUTPUT AREA
RIBELOOP DS    0H
         MVC   0(8,R2),RIBEJBNM        MOVE JOB NAME
         MVI   USERIDIS,C'3'           SORT KEY
         MVC   USERIDIS+1(8),RIBEJBNM  MOVE JOB NAME
         CLI   SORTFLAG,C'Y'           Q. TURN SORT FLAG ON
         BNE   NOTSORT1                   n. TURN SORT FLAG ON
         MVC   USERIDIS+5(4),SPACES    CLEAR USERID
         ST    R8,USERIDIS+1           STORE RIB#
         B     FIXDSORT                BYPASS NAME SETUP
NOTSORT1 DS    0H
         MVC   USERIDIS+1(8),RIBEJBNM  MOVE JOB NAME
FIXDSORT DS    0H
         HEXCHMAC RIBEASID,9(R2),2,MF=E CONVERT TO HEX
         MVC   15(8,R2),RIBESYSN       MOVE SYSTEM NAME
         MVC   25(3,R2),=C'SHR'        MOVE SHARE DISPOSITION
         TM    RIBERFLG,X'80'          Q. IS RIBE TYPE SHARE
         BO    CONT#20                    Y. BYPASS
         MVC   25(4,R2),=C'EXCL'       MOVE EXCLUSIVE DISPOSITION
         MVC   29(4,R2),=C'<==='       MOVE ARROW
CONT#20  DS    0H
         MVC   35(5,R2),=C'OWNER'      MOVE OWNER
         TM    RIBESFLG,RIBESTAT       Q. OWNER
         BO    CONT#22                    Y. BYPASS
         MVC   35(6,R2),=C'WAIT'       MOVE OWNER
CONT#22  DS    0H
         MVC   45(5,R2),=C'LOCAL'      MOVE LOCAL RESOURCE
         TM    RIBSCOPE,RIBGLBL        Q. SCOPE GLOBAL
         BNO   CONT#24                    N. BYPASS
         MVC   45(6,R2),=C'GLOBAL'     MOVE GLOBAL RESOURCE
CONT#24  DS    0H
         MVC   54(10,R2),=C'NOT M-COMP'  MOVE MUST COMPLETE
         TM    RIBERFLG,RIBEMC         Q. MUST COMPLETE
         BNO   CONT#26                    N. BYPASS
         MVC   54(9,R2),=C'MUST COMP'  MOVE MUST COMPLETE
CONT#26  DS    0H
         MVC   68(8,R2),=C'NOT RESV'    MOVE RESERVE LITERAL
         TM    RIBERFLG,RIBERESV       Q. IS RIBE TYPE RESERVED
         BNO   CONT#28                    N. BYPASS
         MVC   68(7,R2),=C'RESERVE'    MOVE RESERVE LITERAL
CONT#28  DS    0H
         L     R15,RTNADRS1            LAOD LINE ROUTINE ADDRESS
         BALR  R14,R15                 PUT OUT LINE MESSAGE
         MVC   MESSAGEG,SPACES         CLEAR OUTPUT AREA
CONT#30  DS    0H
         AH    R9,#RIBELEN             ADD LENGTH OF RIBE
         BCT   R8,RIBELOOP             LOOP TILL END
         ICM   R9,15,RIBCHAIN          LOAD NEXT RIB IN CHAIN
         BNZ   RIBLOOP1                GO PROCESS NEXT RIB
         DROP  R9
         DROP  R10
RETMAIN3 DS    0H
         LM    R0,R14,SAVSUBR1         RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*   TEST IF DSN IS QUOTED "'" IN COLUMN 1. IF IT IS REMOVE QUOTES     *
*   AND IF NOT, INSERT THE USER-ID IN FRONT OF IT. REMOVE ANY LEADING *
*   AND TRAILING SPACES.                                              *
*---------------------------------------------------------------------*
PARSEDSN DS    0H
         STM   R0,R14,SAVSUBR2         SAVE REGISTERS
         OC    RESOURCE,SPACES         CONVERT TO UPPER CASE
         MVC   ZCMD(46),RESOURCE       MOVE RESOURCE TO WORKAREA
         LA    R8,ZCMD                 LOOP COUNTER - # OF RIB'S RET'D
         LH    R9,RESOURCL             ADDRESS OF GOTMAIN AREA
         AR    R8,R9                   ADD LENGTH OF RESOURCE
         BCTR  R8,0                    POINT TO THE LAST BYTE
LOOP#10  DS    0H
         CLI   0(R8),C' '              Q. LEADING SPACE
         BNE   LOOP#10E                   N. EXIT LOOP
         BCTR  R8,0                    POINT TO PREV CHARACTER
         BCT   R9,LOOP#10              TEST NEXT CHAR
LOOP#10E DS    0H
         LA    R8,ZCMD                 LOOP COUNTER - # OF RIB'S RET'D
LOOP#11  DS    0H
         CLI   0(R8),C' '              Q. LEADING SPACE
         BNE   LOOP#11E                   N. EXIT LOOP
         LA    R8,1(R8)                POINT TO NEXT BYTE
         BCT   R9,LOOP#11              TEST NEXT CHAR
LOOP#11E DS    0H
         BCTR  R9,0                    RELATIVE LENGTH
         EX    R9,MOVEDSN1             REMOVE LEADING SPACES
         LA    R9,1(R9)                NORMAL LENGTH
         STH   R9,RESOURCL             STORE NEW RESOURCE LENGTH
         MVC   ZCMD(46),RESOURCE       MOVE RESOURCE TO WORKAREA
         LA    R6,ZCMD                 LOOP COUNTER - # OF RIB'S RET'D
         LA    R5,RESOURCE             DESTINATION
         LH    R1,RESOURCL             LOAD LENGTH OF RESOURCE
         CLI   0(R6),C''''             Q. LEADING '
         BNE   MOVUID                     N. MOVE USERID TO START
         LA    R6,1(R6)                POINT PAST '
         BCTR  R1,0                    SUBTRACT 1 FOR '
         STH   R1,RESOURCL             STORE NEW LENGTH
         B     MOVDSNP1                MOVE FULL DSN
MOVUID   DS    0H
         LA    R6,USERID               SOURCE
         LH    R1,USERIDL              LOAD USERID LENGTH
         BCTR  R1,0                    RELATIVE LENGTH
         EX    R1,MOVEGENR             MOVE USERID
         LA    R1,1(R1)                BACK TO NORMAL LENGTH
         AH    R1,RESOURCL             ADD RESOURCE LEN TO USERID LEN
         AH    R5,USERIDL              ADD LENGTH OF USERID
         MVI   0(R5),C'.'              MOVE HLQ SEPERATOR
         LA    R1,1(R1)                ADD LENGTH OF '.'
         STH   R1,RESOURCL             STORE NEW LENGTH
         LA    R5,1(R5)                POINT TO NEXT CHARACTER
         LA    R6,ZCMD                 LOOP COUNTER - # OF RIB'S RET'D
MOVDSNP1 DS    0H
         BCTR  R1,0                    RELATIVE LENGTH
         EX    R1,MOVEGENR             MOVE USERID
         LA    R5,RESOURCE             LOAD ADDRESS OF RESOURCE
         AH    R5,RESOURCL             ADD RESOURCE LENGTH
         CLI   0(R5),C''''             Q. TRAILING '
         BNE   RETMAIN4                   N. EXIT WITH LENGTH
         BCTR  R5,0                    POINT TO LAST CHARACTER
RETMAIN4 DS    0H
         LA    R9,RESOURCE             LOAD START OF RESOURCE
         SR    R5,R9                   SUB START FROM END
         STH   R5,RESOURCL             STORE NEW RESOURCE LENGTH
         LM    R0,R14,SAVSUBR2         RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*---------------------------------------------------------------------*
MOVEGENR MVC   0(0,R5),0(R6)           MOVE USERID
MOVEDSN1 MVC   RESOURCE(0),0(R8)       MOVE DATASET NAME
MOVEDSN2 MVC   0(0,R2),RESOURCE        MOVE DATASET NAME
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DEFINE ISPF ENVIRONMENT AND CREATE A TABLE                         *
*  TRY TO DUMMY DISPLAY THE PANEL, AND IF RETURN CODE IS NOT 0, IE.   *
*  PANEL NOT FOUND, CONVERT TO NON-ISPF ENVIRONMENT.                  *
*  AS TABLE IS CREATED AS NOWRITE, THE SHARE OPTION IS REDUNDANT AND  *
*  TABLE CANNOT BE SHARED. IF AN ATTEMPT IS MADE TO DOUBLE CREATE     *
*  THE TABLE (EG. SPLIT SVREEN MODE - OTHER SESSION) THE SECOND       *
*  SESSION WILL BE CONVERTED TO NON-ISPF MODE.                        *
*---------------------------------------------------------------------*
DEFISPF  DS    0H
         STM   R0,R14,SAVSUBR1         SAVE REGISTERS
         ISPEXEC MF=E,INIT=Y,LIST=Y    INITIALISE PROGRAM'S ISPF ENV
         ISPEXEC 'CONTROL ERRORS RETURN'
*        ISPEXEC 'CONTROL ERRORS CANCEL'
         ISPEXEC 'CONTROL NONDISPL ENTER'
         ISPEXEC 'DISPLAY PANEL(CONFLICT)'
         LTR   R15,R15                 Q. COULD DISPLAY THE PANEL
         BZ    PANELFND                   Y. CAN DISPLAY PANEL - BYPASS
TRNISPOF DS    0H
         MVI   ENVMNT,C'N'             SET NON-ISPF ENVIRONMENT
         LA    R1,TPUTRTN              NEW LINE MESSAGE ADDRESS
         ST    R1,RTNADRS1             STORE NEW ROUTINE 1 ADDRESS
         ST    R1,RTNADRS2             STORE NEW ROUTINE 2 ADDRESS
         B     RETMAIN5                EXIT ROUTINE
PANELFND DS    0H
         ISPVDEFX INM=(TIME),ANM=TIME,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(GC009),ANM=GC009,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(MESSAGEG),ANM=MESSAGEG,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(ZCMD),ANM=ZCMD,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX ANM=KEEPTB,INM=(KEEPTB),FORMAT=CHAR,LEN=1,MF=E
         ISPVDEFX INM=(CROW),ANM=CROW,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(USERIDIS),ANM=USERIDIS,FORMAT=CHAR,LEN=9,MF=E
         ISPVDEFX INM=(SKEY),ANM=USERIDIS,FORMAT=CHAR,LEN=1,MF=E
                                                                SPACE 1
         MVC   TBSKIP2(TBSKIP1L),TBSKIP1 MOVE SKIP AREA
         MVC   KEEPTB(2),=C'NN'        INIT KEEP TABLE AND EXIT FLAG
         ISPEXEC 'VGET KEEPTB SHARED'  GET KEEP TABLE FLAG
         MVC   KEEPTB+1(1),KEEPTB      BACKUP KEEP TABLE FLAG
         MVI   KEEPTB,C' '             INITIALISE KEEP TABLE FLAG
         ISPEXEC 'VPUT KEEPTB SHARED'  TURN KEEP TABLE FLAG OFF
                                                                SPACE 1
         ISPEXEC 'TBEND WHOHAS'        END THE TABLE
         ISPEXEC 'TBCREATE WHOHAS KEYS(USERIDIS,SKEY) NAMES(MESSAGEG) NO
               OWRITE SHARE'
         MVI   SORTFLAG,C'N'           TURN SORT FLAG OFF
         ISPEXEC 'TBSORT WHOHAS FIELDS(USERIDIS,C,A)'
         LTR   R15,R15                 Q. COULD CREATE A TABLE
         BNZ   TRNISPOF                   N. GO AND TURN ISPF OFF
RETMAIN5 DS    0H
         LM    R0,R14,SAVSUBR1         SAVE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY ROUTINE FOR NON-ISPF ENVIRONMENT.                          *
*---------------------------------------------------------------------*
TPUTRTN  DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         XC    MYSEG1(4),MYSEG1        INITIALISE LENGTH
         MVC   MYPTPB(12),MODLPTPB     MOVE IN MODEL FROM CONSTANT
         LA    R14,79                  LENGTH OF MESSAGE
         LA    R14,4(,R14)             ADD 4
         STH   R14,MYSEG1              STORE LENGTH
         L     R15,MYPUTLEP
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),MF=(E,MYIOPL),       +
               ENTRY=(15)
         LA    R15,4                   SET NON ZERO RETURN CODE
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY ROUTINE 1 FOR ISPF ENVIRONMENT.                            *
*---------------------------------------------------------------------*
TBADDRTN DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         ISPEXEC 'TBADD WHOHAS ORDER'
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY ROUTINE 2 FOR ISPF ENVIRONMENT.                            *
*  DISPLAYS THE TABLE CREATED. IF <ENTER> IS HIT, REDISPLAY THE       *
*  UPDATED DETAILS (NEW DETAILS IF COMMAND LINE IS NOT BLANK - TREATED*
*  AS NEW DATASET NAME). EXIT IF 'END' PF KEY IS USED.                *
*---------------------------------------------------------------------*
TBDISRTN DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         ISPEXEC 'TBTOP WHOHAS'        TOP OF THE TABLE
         CLI    KEEPTB+1,C'Y'          Q. KEEP TABLE
         BE    SETRCR04                   Y. EXIT WITHOUT CLOSING TABLE
DISPTAB  DS    0H
         MVC   ZCMD,SPACES             CLEAR COMMAND AREA
         ISPEXEC 'TBDISPL WHOHAS PANEL(CONFLICT)'
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   ENDTABLE                   N. EXIT W/O RETURN FOR REDISP
         MVC   GC009,SPACES            INITIALISE MESSAGES LINE
         OC    ZCMD,SPACES             CONVERT TO UPPER CASE
         CLC   ZCMD(04),=C'WHAT'       Q. WHATHAS
         BE    WHATHAS                    Y. DISPLAY THEIR ALLOCATION
         CLC   ZCMD(06),=C'SORT A'     Q. TURN SORT ON ALLOCATION
         BE    SORTOFF                    Y. TURN SORT ON
         CLC   ZCMD(06),=C'SORT J'     Q. TURN SORT ON USERID (OFF)
         BE    SORTON                     Y. TURN SORT OFF
         CLC   ZCMD(06),=C'SORT R'     Q. TURN SORT ON USERID (OFF)
         BE    SORTON                     Y. TURN SORT OFF
*        MVC   ZCMD,SPACES             INITIALISE ZCMD
         B     DISPRET                 REFRESH TABLE
SORTOFF  DS    0H
         MVI   SORTFLAG,C'Y'           TURN SORT FLAG ON
         MVC   GC009(28),=C'Sort on allocation sequence.'
         MVC   ZCMD,SPACES             INITIALISE ZCMD
         B     DISPRET                 GO GET TIME AND REBUILD TABLE
SORTON   DS    0H
         MVI   SORTFLAG,C'N'           TURN SORT FLAG OFF
         MVC   GC009(31),=C'Sort on resource''s user''s name.'
         MVC   ZCMD,SPACES             INITIALISE ZCMD
         B     DISPRET                 GO GET TIME AND REBUILD TABLE
*---------------------------------------------------------------------*
WHATHAS  DS    0H
         CLC   CROW(8),=C'00000002'    Q. LOOKING AT DUMMY ROWS
         BNL   SETWHAT                    N. BYPASS
         MVC   GC009,SPACES            CLEAR MESSAGE AREA
         MVC   GC009(24),=C'Invalid cursor position.'
         ISPEXEC 'SETMSG MSG(GC009)'   SET MESSAGE FOR NEXT DISPLAY
         B     DISPTAB                 REDISPLAY TABLE
SETWHAT  DS    0H
         ISPEXEC TBSKIP2,TBSKIP1L      SKIP TO APPROPRIATE ROW
         LA    R1,PARM2+4              LOAD PARAMETER LIST ADDRESS
         ST    R1,PARM2                STORE PARAMETER LIST ADDRESS
         MVC   0(2,R1),=H'12'          MOVE LENGTH OF USER
         MVC   2(4,R1),=C'ISPF'        MOVE ISPF IDENTIFIER
         MVC   6(8,R1),MESSAGEG        MOVE RESOURCE NAME
         LOAD  EP=WHATHASP             LOAD THE "WHATHAS" ROUTINE
         LR    R15,R0                  ADDRESS OF MODULE
         LA    R1,PARM2                POINT TO PARAMETER LIST ADDRESS
         BALR  R14,R15                 CALL "WHATHAS"
         ISPEXEC MF=E,INIT=Y,LIST=Y
         MVC   ZCMD,SPACES             INITIALISE COMMAND AREA
         MVC   GC009,SPACES            INITIALISE MESSAGE AREA
                                                                SPACE 1
* Redefine variables thay may have been corrupted by invoking
* the WHATHAS routine...
                                                                SPACE 1
         ISPVDEFX INM=(TIME),ANM=TIME,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(GC009),ANM=GC009,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(MESSAGEG),ANM=MESSAGEG,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX INM=(ZCMD),ANM=ZCMD,FORMAT=CHAR,LEN=79,MF=E
         ISPVDEFX ANM=KEEPTB,INM=(KEEPTB),FORMAT=CHAR,LEN=1,MF=E
         ISPVDEFX INM=(CROW),ANM=CROW,FORMAT=CHAR,LEN=8,MF=E
         ISPVDEFX INM=(USERIDIS),ANM=USERIDIS,FORMAT=CHAR,LEN=9,MF=E
         ISPVDEFX INM=(SKEY),ANM=USERIDIS,FORMAT=CHAR,LEN=1,MF=E
                                                                SPACE 1
         B     DISPTAB                 GO REDISPLAY TABLE
*---------------------------------------------------------------------*
DISPRET  DS    0H
         ISPEXEC 'TBEND WHOHAS'        END THE TABLE
         ISPEXEC 'TBCREATE WHOHAS KEYS(USERIDIS,SKEY) NAMES(MESSAGEG) NO
               OWRITE SHARE'
         ISPEXEC 'TBSORT WHOHAS FIELDS(USERIDIS,C,A)'
         CLC   GC009,SPACES            Q. MESSAGE ALREADY SET
         BNE   MSGSET01                   Y. BYPASS
         MVC   GC009(24),=C'** New task''s details **'
MSGSET01 DS    0H
         LA    R8,ZCMD                 SOURCE OF RESOURCE
         LH    R1,RESOURCL             LOAD LENGTH OF RESOURCE
         MVC   RESOURCL(2),=H'46'      MOVE LENGTH OF TASK NAME
         OC    ZCMD(46),SPACES         CONVERT TO UPPER CASE
         CLC   ZCMD(46),SPACES         Q. ZCMD ENTERED
         BNE   GETTIME                    Y. BYPASS
         MVI   ZCMD,C''''              MOVE ' TO FIRST BYTE
         LA    R5,ZCMD+1               ADDRESS OF DESTINATION
         LA    R6,RESOURCE             ADDRESS OF SOURCE
         BCTR  R1,0                    RELATIVE LENGTH
         EX    R1,MOVEGENR             MOVE DETAILS
         CLC   GC009,SPACES            Q. MESSAGE ALREADY SET
         BNE   GETTIME                    Y. BYPASS
         MVC   GC009(24),=C'** Refreshed details ** '
GETTIME  DS    0H
         ISPEXEC 'SETMSG MSG(GC009)'   SET MESSAGE FOR NEXT DISPLAY
         BAL   R14,TIMERTN             GO PERFORM TIME ROUTINE
         XR    R15,R15                 SET ZERO RETURN CODE
         B     DISPEXIT                EXIT WITH ZERO RETURN CODE
ENDTABLE DS    0H
         ISPEXEC 'TBEND WHOHAS'        END THE TABLE
SETRCR04 DS    0H
         LA    R15,4                   SET NON ZERO RETURN CODE
DISPEXIT DS    0H
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*  DISPLAY ROUTINE FOR SDSF ENVIRONMENT.                              *
*---------------------------------------------------------------------*
WTORTN   DS    0H
         ST    R14,R14SAVER            SAVE RETURN REGISTERS
         LA    R5,WTODET1              LOAD ADDRESS OF WTO AREA
         MVC   WTODET1+4(73),MESSAGEG  MOVE MESSAGE DETAILS
         WTO   MF=(E,(R5))             ISSUE MSG
         L     R14,R14SAVER            RESTORE RETURN REGISTERS
         LA    R15,4                   SET NON ZERO RETURN CODE
         BR    R14                     RETURN TO CALLER
                                                                SPACE 1
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*       GET END CONVERT TIME DO DISPLAYABLE FORMAT                    *
*---------------------------------------------------------------------*
TIMERTN  DS    0H
         STM   R14,R12,SAVSUBR2        SAVE REGISTERS
         TIME  DEC                     GET TIME  => IN R0
         ST    R0,DWORK8               SAVE TIME IN FULLWORD
         HEXCHMAC DWORK8,PARM2,3,MF=E  CONVERT HEX TO CHAR
         MVC   TIME(2),PARM2           INSERT HH
         MVC   TIME+3(2),PARM2+2       INSERT MM
         MVC   TIME+6(2),PARM2+4       INSERT SS
         LM    R14,R12,SAVSUBR2        RESTORE REGISTERS
         BR    R14                     RETURN TO CALLER
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*=====================================================================*
*---------------------------------------------------------------------*
         LTORG
*---------------------------------------------------------------------*
SPACES   DC    CL256' '
PATTERN  DC    X'40202120'
QUENAME  DC    CL8'SYSDSN'
TBSKIP1  DC    C'TBSKIP WHOHAS ROW(00000016)'
TBSKIP1L EQU   *-TBSKIP1
WTODETF  DS    0F
         WTO   '                                                       *
                                 ',                                    *
               ROUTCDE=(2,12),DESC=(7),                                *
               MF=L
WTODETL  EQU   *-WTODETF
GQSCANF  GQSCAN SCOPE=ALL,MF=L
GQSCANL  EQU   *-GQSCANF
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
*---------------------------------------------------------------------*
WORKAREA DSECT
$REGSAVE DS    18F                  LINKAGE STD REG SAVE AREA
SAVSUBR1 DS    15F                  SUBROUTINE REGISTER SAVE AREA
SAVSUBR2 DS    15F                  SUBROUTINE REGISTER SAVE AREA
RTNADRS1 DS    A                    ADDRESS ENQ MSG ISSUE ROUTINE
RTNADRS2 DS    A                    ADDRESS FINAL MSG ISSUE ROUTINE
*---------------------------------------------------------------------*
MYPUTLEP DS    F                    USED BY PUTLINE ROUTINE
MYECB    DS    F                    USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                   USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                   USED BY PUTLINE ROUTINE
MYSEG1   DS    2H                   USED BY PUTLINE ROUTINE
MESSAGEG DS    CL79                 GENERAL MESSAGE LINE
KEEPTB   DC    CL2'NN'              KEEP TABLE AND EXIT FLAG
TBSKIP2  DC    C'TBSKIP WHOHAS ROW(00000016)'
         ORG   TBSKIP2
         DS    CL18
CROW     DS    CL8
         DS    CL1
         ORG
SORTFLAG DC    C'N'
*---------------------------------------------------------------------*
         DS    0D
DWORK8   DS    PL8
MYARPTR1 DS    F
QNAME    DS    CL8                  MAJOR RESOURCE NAME
USERID   DS    CL8
USERIDL  DS    H
         DS    CL1                  FILLER TO FORCE USERIDIS+1 ON F.W.
USERIDIS DS    CL9
RESOURCL DS    H
RESOURCE DS    CL65
MESSAGEH DS    CL79                 GENERAL HEAD LINE
MESSAGET DS    CL79                 GENERAL TAIL LINE
GC009    DS    CL79                 GENERAL COMMENT
ZCMD     DS    CL79                 GENERAL COMMENT
TIME     DC    CL8'..:..:..'        GENERAL COMMENT
R0SAVER  DS    0F
#RIBFLEN DS    H
#RIBELEN DS    H
R14SAVER DS    F
R15SAVER DS    F
TOKEN@   DS    F
PARM2    DS    CL16
R1SAVER  DS    0F
#OFRIBS  DS    F
#RIBNR   DS    H
ENQFND   DS    CL1
ENVMNT   DS    CL1
WTODET1  DS    0F
         WTO   '                                                       *
                                 ',                                    *
               ROUTCDE=(2,12),DESC=(7),                                *
               MF=L
ISPINIT1 ISPEXEC  MF=L,INIT=Y,LIST=Y
ISPVDEF1 ISPVDEFX MF=L
HEXCHMC1 HEXCHMAC MF=L
GQSCAN1  GQSCAN SCOPE=ALL,MF=L
WORKLEN  EQU   *-WORKAREA
*---------------------------------------------------------------------*
GETMAINA DSECT
DATAGOT  DS    CL30000
         DS    CL30000
GETMAINL EQU   *-GETMAINA
*---------------------------------------------------------------------*
RIB      DSECT
         ISGRIB
         IKJCPPL COMMAND           PROCESSOR PARAMETER LIST
         IKJIOPL                   I/O SERVICE ROUTINE PARAMETER LIST
         IKJUPT USER               PROFILE TABLE
         CVT DSECT=YES,LIST=YES
         IHAASCB
ADYN3    ADYN  DATA=IBM
*---------------------------------------------------------------------*
         END
