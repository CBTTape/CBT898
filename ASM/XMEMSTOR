*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
*                                                                     *
*  Title   : Cross Memory access facility.                            *
*  System  : SHOWSTOR (Refer REXX routine).                           *
*  Module  : XMEMSTOR                                                 *
*  Program : XMEMSTOR                                                 *
*  Function: This program is designed to be called from a REXX        *
*            routine to return data from another address space that   *
*            was acquired using cross memory.                         *
*                                                                     *
*            The program has to be APF authorised and defined in the  *
*            TSO command table.                                       *
*                                                                     *
*            The program reads REXX variables, performs the cross     *
*            memory fetch/write and passes the data back to the REXX  *
*            routine.                                                 *
*                                                                     *
*            REXX variables used:                                     *
*                SYSAUTH.ASID - ASID of the source address space.     *
*                SYSAUTH.ADDR - Starting address of data to           *
*                               fetch/write.                          *
*                SYSAUTH.LENG - Length of data.                       *
*                SYSAUTH.REPD - Replacement data under MODE=Write     *
*                SYSAUTH.MODE - Operation mode. F - fetch             *
*                                               W - write.            *
*                XMEMSTOR     - Return data for fetch                 *
*                                                                     *
*  Author  : ASYSTS P/L (A. Kara).                                    *
*  Notes   : Program is not re-entrant.                               *
*            Requires program XMEMESTA to trap ESTAE abends.          *
*                                                                     *
*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*
         TITLE 'Cross memory Access Facility'
         LCLC  &MODULE
&MODULE  SETC  'XMEMSTOR'
&MODULE  CSECT
&MODULE  AMODE 31
&MODULE  RMODE 24
*
         SAVE  (14,12)
         USING &MODULE.,R12
         LR    R12,R15
         LR    R14,R13
         LA    R13,SAVE
         ST    R13,8(,R14)
         ST    R14,4(,R13)
*
** READ SYSAUTH.ASID
*
@ASID    MVC   NAME,=CL12'SYSAUTH.ASID' Variable name
         MVC   NL,=F'12'               Variable name's length
         MVC   VL,=F'2'                Variable length
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         L     R9,VP                   Pointer to variable
         MVC   XMASID,0(R9)            Get value from REXX
         MVC   REQASID,XMASID          Backup value
*
** READ SYSAUTH.ASID
*
@MODE    MVC   NAME,=CL12'SYSAUTH.MODE' Variable name
         MVC   NL,=F'12'               Variable name's length
         MVC   VL,=F'1'                Variable's length
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         L     R9,VP                   Pointer to variable
         MVC   REQMODE,0(R9)           Get value from REXX
         CLI   REQMODE,C'W'            Q. Write request
         BNE   @ADDR                      N. Bypass getting data
*
** READ SYSAUTH.REPD
*
@REPD    MVC   NAME,=CL12'SYSAUTH.REPD' Variable name
         MVC   NL,=F'12'               Variable name's length
         MVC   VL,=F'60'               Variable's length
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         MVC   REPD@,VP                Pointer to replacement data
         MVC   REPDL,VL                Length of replacement data
*
** READ SYSAUTH.ADDR - PAD TO FULLWORD
*
@ADDR    MVC   NAME,=CL12'SYSAUTH.ADDR' Variable name
         MVC   NL,=F'12'               Variable name's length
         MVC   VL,=F'4'                Variable's length
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         L     R8,VP                   Pointer to variable
         MVC   XMADDR,0(R8)            Get value from REXX
         L     R9,VL                   Load length of address
         LA    R8,4                    Max address length
@AEQ4    DS    0H
         CR    R8,R9                   Q. Address 4 bytes
         BNH   @LENG                      Y. Continue
         LA    R7,XMADDR               Pointer to address value
         MVC   3(0,R7),2(R7)           Ripple right
         MVC   2(0,R7),1(R7)             "     "
         MVC   1(0,R7),0(R7)             "     "
         MVI   0(R7),X'00'             Pad with HEX 0
         LA    R9,1(R9)                Up length address by 1
         B     @AEQ4                   Loop till end
*
** READ SYSAUTH.LENG - PAD TO FULLWORD
*
@LENG    MVC   NAME,=CL12'SYSAUTH.LENG'
         MVC   NL,=F'12'
         MVC   VL,=F'4'
         LINK  EP=IKJCT441,PARAM=(ECR,NP,NL,VP,VL,TK),VL=1
         L     R8,VP
         MVC   XMLENG,0(R8)
         L     R9,VL
         LA    R8,4
@LEQ4    CR    R8,R9
         BNH   @CHK64
         LA    R7,XMLENG
         MVC   3(0,R7),2(R7)
         MVC   2(0,R7),1(R7)
         MVC   1(0,R7),0(R7)
         MVI   0(R7),X'00'
         LA    R9,1(R9)
         B     @LEQ4
*
** CHECK LENGTH REQUESTED <- LIMIT
*
@CHK64   L     R9,XMLENG
         LH    R8,MAXLENG              LOAD LENGTH LIMIT
         CR    R8,R9
         BNL   @XMEM
@LENERR  MVC   XMSTOR(40),=CL40'ERROR - REQUESTED LENGTH > 4096'
         B     @ERROR
*
** CROSS MEMORY CALL
*
@XMEM    XR    R2,R2                   ZERO REG 2
         ESAR  R2                      OBTAIN OUR ADDR SP NUMBER
         ST    R2,OURASN               SAVE IT
*
*---------------------------------------------------------------------*
* Prepare for "ESTAE" when end of address space is reached.           *
* Make sure that the 'STM' offset is in sync with the ESTAE program.  *
*---------------------------------------------------------------------*
         LA    R1,ESTAEOF1             Return address
         ST    R1,RETNADR1             Store return address
         LA    R10,OURASN              Common data with ESTAE routine
         L     R9,=V(XMEMESTA)         Load external ESTAE address
         STM   R10,R13,12(R9)          Store registers in ESTAE saver
         ESTAE (9)                     Trap ABEND
*---------------------------------------------------------------------*
         MODESET KEY=ZERO,MODE=PROB    Key zero, prob state
         BAL   R14,@INXMEM             Go get into XMEM mode
*
         CLI   REQMODE,C'W'            Q. Write request
         BNE   SET4READ                   N. Bypass write setting
         L     R8,REPD@                Source address ptr
         L     R2,REPDL                Total length of transfer
         B     REDY2MOV                Go to ready to move
SET4READ DS    0H
         L     R2,XMLENG               Total length of transfer
         LA    R8,XMSTOR               Destination address
REDY2MOV DS    0H
         XC    XMLENG,XMLENG           Initialise length processed
         XR    R1,R1                   Initialise register
         XR    R5,R5                   Moved length counter
         L     R9,XMADDR               Source address
MOVELOOP DS    0H
         LR    R3,R2                   Incremental read
         CH    R3,=H'256'              Q. Larger than increment
         BNH   OK2MOVE                    N. Use value
         LH    R3,=H'256'              Set fixed length qaud word align
OK2MOVE  DS    0H
         CLI   REQMODE,C'W'            Q. Write request
         BNE   FETCH@                     Y. Go write data
WRITE@   DS    0H
         MVCS  0(R3,R9),0(R8),R1       Move to secondary
         B     DATAMOVD                Bypass primary move
FETCH@   DS    0H
         MVCP  0(R3,R8),0(R9),R1       Move to primary
DATAMOVD DS    0H
         AR    R5,R3                   Add length moved to accumulator
         ST    R5,XMLENG               Save in case of S0C4
         AR    R8,R3                   Point past data moved (other)
         AR    R9,R3                   Point past data moved (mine)
         SR    R2,R3                   Q. After -length still +ve
         BP    MOVELOOP                   Y. Lool
*
         XC    RCODE,RCODE             Init return code as no ESTAE
*
         BAL   R14,@OUTXMEM            Go get out of XMEM mode
         MODESET KEY=NZERO,MODE=PROB   Key user, prob state
*---------------------------------------------------------------------*
ESTAEOF1 DS    0H
         ESTAE 0                       TURN ESTAE OFF
*---------------------------------------------------------------------*
*

** MOVE RETURNED DATA TO REXX VARIABLE XMEMSTOR
@UPDTRX  MVC   NAME,=CL8'XMEMSTOR'
         MVC   NL,=F'8'
         MVC   VL,XMLENG
         LA    R8,XMSTOR
         ST    R8,VP
         LINK  EP=IKJCT441,PARAM=(ECU,NP,NL,VP,VL,TK),VL=1
         B     @FINISH
*
@ERROR   MVC   NAME,=CL8'XMEMSTOR'
         MVC   NL,=F'8'
         MVC   VL,=F'40'
         LA    R8,XMSTOR
         ST    R8,VP
         LINK  EP=IKJCT441,PARAM=(ECU,NP,NL,VP,VL,TK),VL=1
*
@FINISH  DS    0H
         L     R13,SAVE+4
         CLC   RCODE,=H'0'             Q.Set return code non-zero
         BNE   RETURN8                    Y. Exit with bad return code
RETURN0  DS    0H
         RETURN (14,12),RC=0           Return with zero return code
RETURN8  DS    0H
         RETURN (14,12),RC=8           Return with 8 return code
*
** SUBROUTINE - INTO CROSS MEMORY MODE **************************
*
@INXMEM  LA    R2,1                    REG 2 - 1
         AXSET AX=(R2)                 AUTH INDEX - 1
         L     R2,REQASN               INTO XMEM MODE
         SSAR  R2
@INXEND  BR    R14
*
** SUBROUTINE - OUT OF CROSS MEMORY MODE ************************
*
@OUTXMEM L     R2,OURASN               OUT OF XMEM MODE
         SSAR  R2
         XR    R2,R2                   REG 2 - 0
         AXSET AX=(R2)                 AUTH INDEX - 0
@OUTXEND BR    R14                     RETURN TO CALLER
*
ESTAERTN DS    0F
         CALL  XMEMESTA             ESTABLISH EXTERNAL ADDRESS
**********************************************************************
*
*
** STORAGE      ******************************************************
*
         LTORG
*
         DS    0D
SAVE     DS    18F
         COPY  XMEMCOMA
*
REQMODE  DS    CL1                     Request mode
MAXLENG  DC    H'4096'                 LENGTH LIMIT
XMASID   DS    XL2
XMADDR   DS    F
XMLENG   DS    F
REPD@    DS    F                       Replacement data address
REPDL    DS    F                       Replacement data length
*
         DS    0D
NAME     DS    CL12
NP       DC    A(NAME)                 VARIABLE NAME POINTER
NL       DS    F                       NAME LENGTH
VL       DS    F                       VARIABLE LENGHT
VP       DS    F                       VARIABLE POINTER
TK       DC    F'0'
ECR      DC    A(TSVERETR)             RETRIEVE FUNCTION
ECU      DC    A(TSVEUPDT)             UPDATE FUNCTION
XMSTOR   DS    CL4096                  VARIABLE INTERFACE
*
*---------------------------------------------------------------------*
         LTORG
         PRINT NOGEN
         IKJTSVT
         IHASDWA DSECT=YES             ENTRY : SDWA
         YREGS
         END   XMEMSTOR
