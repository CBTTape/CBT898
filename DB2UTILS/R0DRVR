/******************************** REXX ********************************/
    r0ver = 'V1.05'                         /* Version                */
/*--------------------------ooo000OOOO000ooo--------------------------*/
/*                                                                    */
/* Program - R0DRVR                                                   */
/*                                                                    */
/* Purpose - To generate DB2 utility parms & jcl for given databases  */
/*         - Special for jobs submitted via CONTROL/M                 */
/*                                                                    */
/* The following files will be created if they do not exist:          */
/*         hlq.LISTDEF  - LISTDEF members. 'hlq' returned by R0SITE$  */
/*         hlq.TEMPLATE - TEMPLATE members.                           */
/*                                                                    */
/* A site default templates dataset should be created and populated   */
/* and pointed to be variable TEMPSDEF in R0SITE$.                    */
/*                                                                    */
/* Members required to package this feature:                          */
/*   REXX:                                                            */
/*         R0           - Launcher. Allocates dataset etc...          */
/*         R0DRVR       - This driver                                 */
/*                        Note this driver doubles up as a multi      */
/*                        purpose edit macro.                         */
/*         R0SITE$      - Customise site default variables            */
/*         R0WHOME      - Routine to identify user.                   */
/*         R0HELP       o Dynamic HELP text.                          */
/*         HELPDRVR     o Routine to drive the help member            */
/*         HELPQR       o Dynamic Tutorial QuickRef HELP text.        */
/*         HELPTN       o Dynamic Tutorial navigation HELP text.      */
/*         HELPTT       o Tutorial on how to build dynamic help text. */
/*                                                                    */
/*   Panel:                                                           */
/*         HELPDRVP     o Panel for dynamic help display              */
/*         R0*P         - Action entry panel                          */
/*         R0*PY        - Dynamic LISTDEF parameter entry panel       */
/*         R0*PH        o Help panels (obsolete)                      */
/*                                                                    */
/*   Messages:                                                        */
/*         GC00         - Generic message member                      */
/*                                                                    */
/*   Skeletons:                                                       */
/*         R0S*         - Skeletons                                   */
/*         R0*S         - Skeletons                                   */
/*                                                                    */
/*--------------------------------------------------------------------*/
    Parse Upper Arg array
    Address ISPEXEC
    If array /= '' Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (array) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

    "VGET r1macro SHARED"
    If r1macro /= '' Then Do
        Signal on Syntax Name byp1
        Interpret "Signal Macro_"r1macro
    End

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

    helptab = 'HELPDRVR=R0HELP'
    debug   =

ini1:
    Parse SOURCE . . xcmd .
    sysid  = Strip(storage(d2x(c2d(storage(10,4)) + x2d(154)),8))
    userid = Userid()

/*--------------------------------------------------------------------*/
/* Variables grouped into functions for ease of passing between       */
/* driver and sub-routines.                                           */
/*--------------------------------------------------------------------*/
    drvrv  = 'utillib templib outlist sqlid db2ssid tempsdef',
             ''
    tempv  = 'tempdsn tempunit tempstck tempvcnt',
             'tempdis1 tempdis2 tempdis3',
             'tempspty tempspa1 tempspa2',
             'temptrtc tempdcb',
             'template',
             ''
    copyv  = 'copyshrl copylcop copyage',
             'copyldef copycddn copyrddn',
             'copyid',
             ''
    runsv  = 'runsupdt runshist runspct runsldef',
             'runsshrl,runsid,runsrep',
             ''
    quiev  = 'quiepart quiewrit quieldef',
             'quieid',
             ''
    uloadv = 'unldldef unldownr unldtbnm unlddbnm unldtspc unldpart',
             'unldspct unldlimt',
             'unldwhn1 unldwhn2 unldwhn3',
             'unldpddn unlduddn',
             'unldid',
             ''
    loadv  = 'loadupdt loadhist loadshrl loadstat loadrepl',
             'loadwddn loadeddn loadmddn loaddddn loadcddn loadrddn',
             'loaddevt loadsrtk loadresu loadspct loadsrtn',
             'loadid',
             ''
    reorgv = 'reorldef reordbnm reortspc reorupdt reorhist reorlog',
             'reorpart reorsdat reorskey reorfswc reorkdic reorruse',
             'reordwat reorrtry reorrdel reorstat reorshrl',
             'reormdbn reormtsp reoroffl reorindr reorrepo reorleaf',
             'reordead reorcurt reorspct',
             'reorsig1 reorval1 reordur1',
             'reormxro reordran reorllog reordlay reortout',
             'reorpddn reorcddn reorrddn',
             'reorcrea reorindx',
             'reorid',
             ''
    recovv = 'recodbnm recospce recotcpy recotdsn recopart recoptix',
             'recopntr recobjtp recoldef recocrea recoindx recoopt1',
             'recoid',
             ''
    rebixv = 'rebicrea rebindex rebidbnm rebispce rebipart rebiptix',
             'rebildef rebistat rebiupdt rebihist rebiwddn',
             'rebidevt rebisrtk rebireus rebisrtn',
             'rebiid',
             ''
    chkdav = 'chkddbnm chkdtspc chkdpart chkdscop',
             'chkdauxe chkdeddn chkdwddn chkddevt chkddelt',
             'chkdlog  chkdexcp chkdsrtn',
             'chkdid',
             ''
    chkixv = 'chkicrea chkindex chkidbnm chkispce chkipart chkiptix',
             'chkildef chkiwddn chkidevt chkisrtn',
             'chkiid',
             ''
    perfqv = 'perfdblk perfctl1 perfid perfsubr',
             ''
    migrtv = 'migrldef migrpddn migruddn migrssid migrlpar migrldsn',
             'migrmdsn migrtdsn migrxcls migrmcls migracct migrsubl',
             'migrid',
             ''
    jobcv  = 'jobcard1 jobcard2 jobcard3 jobcard4 jobcard5',
             ''
    sticky = 'ssid sqlid acct',
             'listname',
             drvrv reorgv copyv runsv quiev uloadv loadv,
             loadv recovv rebixv chkdav chkixv perfqv migrtv
    "VGET ("sticky jobcv") PROFILE"

    panel10 = 'R010P'                       /* Utility selection      */
    panel12 = 'R012PY'                      /* LISTDEF parm entry     */
    panel14 = 'R014P'                       /* Template entry         */
    panel14P= 'R0141P'                      /* Template type popup    */
    panel20 = 'R020P'                       /* Copy perm entry        */
    panel22 = 'R022P'                       /* Modify entry           */
    panel30 = 'R030P'                       /* Runstat entry          */
    panel40 = 'R040P'                       /* Quiesce entry          */
    panel50 = 'R050P'                       /* Unload entry           */
    panel51 = 'R051P'                       /* Unload From table      */
    panel52 = 'R052P'                       /* Unload From LIST       */
    panel53 = 'R053P'                       /* Unload From tablespace */
    panel54 = 'R054P'                       /* Unload From Copy       */
    panel60 = 'R060P'                       /* Load                   */
    panel61 = 'R061P'                       /* Load Dsnames           */
    panel611= 'R0611P'                      /* Load Table names       */
    panel62 = 'R062P'                       /* Load Table             */
    panel63 = 'R063P'                       /* Load Index             */
    panel70 = 'R070P'                       /* Reorg                  */
    panel71 = 'R071P'                       /* Reorg TS List          */
    panel72 = 'R072P'                       /* Reorg TS database      */
    panel73 = 'R073P'                       /* Reorg IX List          */
    panel74 = 'R074P'                       /* Reorg IX Index         */
    panel75 = 'R075P'                       /* Reorg deadline parms   */
    panel80 = 'R080P'                       /* Chkdata                */
    panel100= 'R100P'                       /* Recover                */
    panel101= 'R101P'                       /* Recover List           */
    panel102= 'R102P'                       /* Recover TS/IX          */
    panel103= 'R103P'                       /* Recover Index          */
    panel120= 'R120P'                       /* Rebldix                */
    panel121= 'R121P'                       /* Rebldix List           */
    panel122= 'R122P'                       /* Rebldix Index Name     */
    panel123= 'R123P'                       /* Rebldix TableSpace     */
    panel130= 'R130P'                       /* ChkIndx                */
    panel131= 'R131P'                       /* ChkIndx List           */
    panel132= 'R132P'                       /* ChkIndx Index Name     */
    panel133= 'R133P'                       /* ChkIndx TableSpace     */
    panel140= 'R140P'                       /* Perform Query          */
    panel141= 'R141P'                       /* Perform Query select   */
    panel150= 'R150P'                       /* Migration select       */
    panel90 = 'R090P'                       /* Member list table      */
    panel91 = 'R091P'                       /* Jobcard entry screen   */
    panel93 = 'R093P'                       /* Dataset table display  */

    panelv = 'panel10 panel12 panel14 panel14p panel20 panel22 panel30',
             'panel40 panel50 panel51 panel52 panel53 panel54',
             'panel60 panel61 panel611 panel62 panel63',
             'panel70 panel71 panel72 panel73 panel74 panel75',
             'panel80',
             'panel90 panel91 panel93',
             'panel100 panel101 panel102 panel103',
             'panel120 panel121 panel122 panel123',
             'panel130 panel131 panel132 panel133',
             'panel140 panel141',
             'panel150',
             'helptab',
             ''

/*  x=helpdrvr(helptab 'I /BUILD')                                    */

    "VPUT (jobcv,copyv,tempv,runsv,quiev,uloadv,loadv,recovv,rebixv,",
          "chkixv,chkdav,reorgv,perfqv,migrtv,",
          "drvrv,panelv,"panelv")SHARED"

    r1prog  = 'RDB20340'                    /* In/Ex filter routine   */
    gc00T   = 'WARNING'                     /* GC00 message variable  */
    table   = 'TB'Time('s')
    table1  = 'TABLE1'

/*--------------------------------------------------------------------*/
/*  The following string is used to control processing:               */
/*  - The first component of each 'word' is the action.               */
/*  - The following components (: seperated) are the xxx_PROCESS      */
/*    subroutines performed to complete the action. This way the      */
/*    processing logic can be readily identified from the contents of */
/*    the variable.                                                   */
/*    JCL(...) identifies inclusion modules                           */
/*--------------------------------------------------------------------*/
    process_matrix = ' ',
        'JOBCARD=JC                                    ',
        'LISTD=LISTDEF                                 ',
        'TEMPL=TEMPLATE                                ',
        'PERFQ=PERFQ:JCL(JC,J10,J20,JXXX)              ',
        'COPY=COPYU:JCL(JC,J10,J20,J21)                ',
        'MODIFY=MODFU:JCL(JC,J20,J22)                  ',
        'RUNSTAT=RUNSTAT:JCL(JC,J10,J20,J23)           ',
        'QUIESCE=QUIES:JCL(JC,J10,J20,J24)             ',
        'UNLOAD=UNLOAD:JCL(JC,J20,J50)                 ',
        'LOAD=LOAD:JCL(JC,J20,J60)                     ',
        'REORG=REORG:JCL(JC,J20,J70)                   ',
        'CHKDATA=CHKDATA:JCL(JC,J20,J80)               ',
        'CHKINDX=CHKINDX:JCL(JC,J20,J120)              ',
        'REBLDIX=REBLDIX:JCL(JC,J20,J120)              ',
        'RECOVER=RECOVER:JCL(JC,J20,J100)              ',
        'MIGRATE=MIGRATE:JCL(JC,J10,J20,J30):JCL(J31)  ',
        ' '
    Call set_vars_1

    x=R0helppf('On')

/*
perfq = '/'
*/

/*--------------------------------------------------------------------*/
/*  Display utility selection Menu selection                          */
/*--------------------------------------------------------------------*/
scr1:
    zcmd =
    "DISPLAY PANEL(&PANEL10) CURSOR(&csr1) CSRPOS(&csrp1)"
    If rc /= 0 Then Signal exit1
    If zcmd='DEBUG' Then Interpret r0debug(debug,scr1)
    If zcmd='?' Then Do
        x=helpdrvr(helptab 'I /OPEN')
        Signal scr1
    End
    csr1=;csrp1=
    Parse var zcmd cmd parm1 parm2 .

/*--------------------------------------------------------------------*/
/*  Get subsystem name from dynamic field                             */
/*--------------------------------------------------------------------*/
    Parse Var sslist . '[' xxx
    s# = 0
    Do i=1 To ss#
        Parse VAR xxx si +1 '[' xxx
        If si /= '' Then Do
            If s# = 0 Then s# = i
            Else Do
                csr1  = 'SSLIST'
                csrp1 = ssl + (i-1)*7 + (i%10*10)
                gc009 = 'Can only select one SSID.'
                "SETMSG MSG(GC009)"
                Signal scr1
            End
        End
    End
    If s# = 0 & ssid = '' Then Do
        csr1  = 'SSLIST'
        csrp1 = ssl
        gc009 = 'SSID must be entered or selected from list.'
        "SETMSG MSG(GC009)"
        Signal scr1
    End
    If s# > 0 Then Do
        ssid = ss.s#
        sslist = Overlay(' ',sslist,7+7*(s#-1)+2)
    End

/*--------------------------------------------------------------------*/
/* Process matrix according to non-space selection values.            */
/*--------------------------------------------------------------------*/
    "VPUT (ssid,sqlid) SHARED"
    uproc_string = process_matrix
    Do While uproc_string /= ''
        temp1=;temp2=;temp3=;temp4=;temp5=;temp6=;listd1=;
        Parse VAR uproc_string xxx uproc_string
        Parse VAR xxx oper1 '=' nexto
        Interpret "act =" oper1
        If act = '' Then Iterate
        genolist='ON';jcl_created=0;ulact=;r1macro=1
        Interpret oper1 "= ''"
        #nexto=nexto
        Do middle_loop=0
            Do while nexto /= ''
                Parse VAR nexto util2 ':' nexto
                Parse VAR util2 util2 '(' jclp ')'
                Interpret "x =" util2"_process('"nexto"')"
                If x > 8 Then Leave middle_loop
            End
            If jcl_created Then x = Edit_JCL()
            nexto=#nexto
        End
    End
    Signal scr1

/*--------------------------------------------------------------------*/
/*  Exit routine. Save sticky fields in profile                       */
/*--------------------------------------------------------------------*/
exit1:
    x = R0helppf('Off')
    "VPUT ("sticky") PROFILE"
    Do While Queued() > 0                   /* Del open stacks        */
        Address TSO "DELSTACK"
    End
    x=helpdrvr(helptab '/CLOSE')
    Exit

/*--------------------------------------------------------------------*/
/*  Process PREFormance Query parameter entry                         */
/*--------------------------------------------------------------------*/
perfq_process:
    "VPUT ("perfqv runsv reorgv" nexto) SHARED"
    xx = r0perfq(oper1,templib,tempsdef,debug)
    If xx = 0 Then "VGET ("perfqv runsv reorgv",ldeftype,nexto,ulact",
                         ") SHARED"
    listd1=
    If ulact /= '' Then,
        temp1=reorpddn;temp2=reorcddn;temp3=reorrddn
    utilid=perfid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process COPY LISTDEF parameter entry                              */
/*--------------------------------------------------------------------*/
copyu_process:
    "VPUT ("copyv") SHARED"
    xx = r0copy(oper1,utillib,templib,tempsdef)
    If xx = 0 Then "VGET ("copyv") SHARED"
    temp1=copycddn;temp2=copyrddn;listd1=copyldef
    utilid=copyid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process MODIFY LISTDEF parameter entry                            */
/*--------------------------------------------------------------------*/
modfu_process:
    "VPUT ("copyv") SHARED"
    xx = r0modify(oper1,utillib)
    If xx = 0 Then "VGET ("copyv") SHARED"
    listd1=copyldef
    utilid=copyid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process RUNSTAT LISTDEF parameter entry                           */
/*--------------------------------------------------------------------*/
runstat_process:
    "VPUT ("runsv") SHARED"
    xx = r0runsts(oper1,utillib)
    If xx = 0 Then "VGET ("runsv") SHARED"
    listd1=runsldef
    utilid=runsid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process QUIESCE parameter entry                                   */
/*--------------------------------------------------------------------*/
quies_process:
    "VPUT ("quiev") SHARED"
    xx = r0quiesc(oper1,utillib)
    If xx = 0 Then "VGET ("quiev") SHARED"
    listd1=quieldef
    utilid=quieid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process UNLOAD parameter entry                                    */
/*--------------------------------------------------------------------*/
unload_process:
    "VPUT ("uloadv" nexto) SHARED"
    xx = r0unload(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
          "VGET ("uloadv" nexto genolist ulact tspace partno dsnx"
          "when1Rwhen2 when3 when4 when5 when6 when7 when8"
          ") SHARED"
    listd1=unldldef;temp1=unldpddn;temp2=unlduddn
    utilid=ulid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process UNLOAD parameter entry                                    */
/*--------------------------------------------------------------------*/
load_process:
/*--------------------------------------------------------------------*/
    "VPUT ("loadv") SHARED"
    xx = r0load(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
        "VGET ("loadv" genolist loadtab loadudsn) SHARED"
    temp1=loadrddn;temp2=loadcddn;temp3=loadeddn;temp4=loaddddn
    temp5=loadmddn;temp6=loadwddn
    utilid=loadid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process REORG parameter entry                                     */
/*--------------------------------------------------------------------*/
reorg_process:
    "VPUT ("reorgv" rotl rots roil roix nexto) SHARED"
    xx = r0reorg(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
        "VGET ("reorgv" deadlin1 deadlin2 deadlin3 deadlin4",
               "mapping1 mapping2 mapping3 mapping4 report",
               "rotl rots roil roix",
               "tspace partno nexto genolist ulact) SHARED"
    listd1=reorldef
    temp1=reorpddn;temp2=reorcddn;temp3=reorrddn
    utilid=reorid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process CHECK DATA parameter entry                                */
/*--------------------------------------------------------------------*/
chkdata_process:
    "VPUT ("chkdav" nexto) SHARED"
    xx = r0chkdat(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
        "VGET ("chkdav" genolist tspace partno",
              ") SHARED"
    temp1=chkdeddn;temp2=chkdwddn
    utilid=chkdid
    Return xx

    Signal err1

/*--------------------------------------------------------------------*/
/*  Process CHECK INDEX parameter entry                               */
/*--------------------------------------------------------------------*/
chkindx_process:
    "VPUT ("chkixv" nexto) SHARED"
    xx = r0chkix(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
        "VGET ("chkixv" nexto genolist ulact tspace partno sortnum",
              "opertp) SHARED"
    listd1=chkildef;temp1=chkiwddn
    utilid=chkiid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process RECOVER parameter entry                                   */
/*--------------------------------------------------------------------*/
recover_process:
    "VPUT ("recovv" nexto) SHARED"
    xx = r0recovr(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
        "VGET ("recovv" nexto genolist ulact tspace partno dsnx",
               "tocopy rctype) SHARED"
    listd1=recoldef
    utilid=recoid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process ReBuild Index parameter entry                             */
/*--------------------------------------------------------------------*/
rebldix_process:
    "VPUT ("rebixv" nexto) SHARED"
    xx = r0rebix(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
        "VGET ("rebixv" nexto genolist ulact tspace partno",
               "sortnum opertp) SHARED"
    listd1=rebildef;temp1=rebiwddn
    utilid=rebiid
    Return xx

/*--------------------------------------------------------------------*/
/*  Process Migration parameter entry                                 */
/*--------------------------------------------------------------------*/
migrate_process:
    "VPUT ("migrtv") SHARED"
    xx = r0migrat(oper1,utillib,templib,tempsdef)
    If xx = 0 Then,
        "VGET ("migrtv",punchdsn,moddsn,mapdsn,tempdsn,password,tablem",
              "unloddsn,sameplex)SHARED"
    listd1=migrldef
    utilid=migrid
    Return xx

err1:
    gc009 = 'Option "'oper1'" not developed yet.'
    "SETMSG MSG(GC009)"
    Signal scr1

/*--------------------------------------------------------------------*/
/*  Process LISTDEF data                                              */
/*--------------------------------------------------------------------*/
listdef_process:
    Return r0ldef(utillib,Arg(1))

/*--------------------------------------------------------------------*/
/*  Process TEMPLATE data                                             */
/*--------------------------------------------------------------------*/
template_process:
    xmsg='your own choosing.'
    xx = R0templ(templib,tempsdef,xmsg,Arg(1))
    "VGET ("tempv") SHARED"
    Return xx

/*--------------------------------------------------------------------*/
/*  Process Jobcard                                                   */
/*--------------------------------------------------------------------*/
JC_process:
    x = r0jobcrd(utillib,Arg(1))
    "VGET ("jobcv") PROFILE"
    Return x

/*--------------------------------------------------------------------*/
/* Edit JCL. Output from file tailoring and present under editor.     */
/*--------------------------------------------------------------------*/
Edit_JCL:
    "CONTROL ERRORS RETURN"
    "TBEND &LOADTAB"
    "FTCLOSE"
    "VGET ZTEMPF"
    Address TSO "ALLOC DD(ZTEMPF) DS('"ztempf"') SHR REU"
    "LMINIT DATAID(DATAID) DDNAME(ZTEMPF)"
    "VPUT r1macro SHARED"
    "EDIT DATAID(&DATAID) MACRO(&XCMD)"
    "LMFREE DATAID(&DATAID)"
    Address TSO "FREE DD(ZTEMPF)"

    Return 0

/*--------------------------------------------------------------------*/
/* Macro 1 to put notelines into JCL                                  */
/*--------------------------------------------------------------------*/
macro_1:
    r1macro =
    "VPUT r1macro SHARED"
n_st = mark(2)                              /* Mark next line         */
/*

`   Hello &CNAME..

    THis is the JCL generated from the parameters entered.

    Either submit from the command line or use your favourite copy
    routine to save for posterity.

    The contents will self destruct on ending.

                            ****

    "A wise man will always check his JCL before submiting it."
    -Confucius...


*/
n_en = mark(-2)                             /* Mark prev 2 line       */
    "ISREDIT RES"
    call put_notelines

    Exit

/*--------------------------------------------------------------------*/
/* Macro 1 to put notelines into JCL                                  */
/*--------------------------------------------------------------------*/
macro_2:
    r1macro =
    "VPUT r1macro SHARED"
n_st = mark(2)                              /* Mark next line         */
/*

`   Hello &CNAME..

    * NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE *

    You have chosen to execute the LOAD function seperate to the
    UNLOAD.

    This job should be copied into a permanent member for later
    submission after the data has been successfully unloaded.

    If you are using FTP your password will be imbedded in the JCL.
    Suggest entering a dummy password and changing it just prior to
    job submission. Don't forget to delete the held output as the
    password will be there also.
    Alternatively arrange for a generic Userid/password for FTPing.

    The contents will self destruct on ending.

                            ****

    "A wise man will always check his JCL before submiting it."
    -Confucius...


*/
n_en = mark(-2)                             /* Mark prev 2 line       */
    "ISREDIT RES"
    call put_notelines

    Exit

/*--------------------------------------------------------------------*/
/* Build JCL                                                          */
/*--------------------------------------------------------------------*/
JCL_process:
    Do While jclp /= ''
        Signal on Syntax Name error_off_1
        Parse VAR jclp jj ',' jclp
        Interpret "Call build_COPY_"jj
    End

    Return 0

/*--------------------------------------------------------------------*/
/* Routine to build the various types of JCL                          */
/*    JC         - Obvious.                                           */
/*    J10        - LISTDEF filter used by:                            */
/*                 COPY/MODIFY/RUNSTATS                               */
/*    J20        - DSNUPROC infrastructure                            */
/*    J21        - COPY/MODIFY                                        */
/*    J22        - MODIFY                                             */
/*    J23        - RUNSTATS                                           */
/*--------------------------------------------------------------------*/
build_copy_JC:
    Signal Off Syntax
    Address ISPEXEC
    If jobcard1 = '' Then Do
        Call JC_process
        If jobcard1 = '' Then Drop jobcard1 jobcard2 jobcard3 jobcard4 jobcard5
    End
    jcl_created = 1
    #jc1=jobcard1;#jc3=jobcard3
    jobcard1 = R0cstrng(Jobcard1,'&UTILITY',oper1,1)
    jobcard2 = R0cstrng(Jobcard2,'&UTILITY',oper1,1)
    "FTOPEN TEMP"
    "FTINCL R0JCS"
    jobcard1=#jc1;jobcard3=#jc3
    If ulact/='NOJ01' Then "FTINCL R0J01S"
    Else ulact=

    Return 0

build_copy_j10:
    Signal Off Syntax
    If oper1 /= 'PERFQ' Then x = Build_table(utillib'('listd1')','NEW')
    "FTINCL R0J10S"
    If oper1 /= 'PERFQ' Then "TBEND &TABLE1"

    Return 0

build_copy_j20:
    Signal build_copy_jjj
build_copy_j21:
    x = Build_templates()
    Signal build_copy_jjj
build_copy_j22:
    x = Build_table(utillib'('listd1')','NEW')
build_copy_j23:
build_copy_j231:
build_copy_j24:
    Signal build_copy_jjj
build_copy_j50:
    x = Build_templates()
    Signal build_copy_jjj
build_copy_j60:
    x = Build_templates()
    Signal build_copy_jjj
build_copy_j70:
build_copy_j701:
    x = Build_templates()
    Signal build_copy_jjj
build_copy_j80:
    x = Build_templates()
    Signal build_copy_jjj
build_copy_j100:
    Signal build_copy_jjj
build_copy_j120:
    x = Build_templates()
    Signal build_copy_jjj
build_copy_j150:
    x = Build_templates()
    Signal build_copy_jjj
build_copy_jx01:
    Signal build_copy_jjj
build_copy_jjj:
    Signal Off Syntax
    jclopt = Substr(jj,2)
    "FTINCL R0J20S"
    "TBEND &TABLE1"
    If jclopt = 140 Then "TBEND &PERFCTL1"

    Return 0

build_copy_j30:
"CONTROL ERRORS CANCEL"
    "FTINCL R0J30S"
    "TBEND &TABLEM"
"CONTROL ERRORS RETURN"
    Return 0

build_copy_j31:
    If jcl_created Then x = Edit_JCL()
    If migrsubl = 'Y' Then Do
        jcl_created = 0
        Return 9
    End
    jcl_created = 1
    #jc1=jobcard1;#jc3=jobcard3
    jobcard1 = R0cstrng(Jobcard1,'&UTILITY',oper1,1)
    jobcard2 = R0cstrng(Jobcard2,'&UTILITY',oper1,1)
    "FTOPEN TEMP"
    "FTINCL R0J31S"
    jobcard1=#jc1;jobcard3=#jc3
    r1macro=2
    Return 0

build_templates:
    Do i=1 To 6
        Interpret 'xxx = temp'i
        If xxx = '' Then Iterate
        x = Build_template_table(xxx,'ADD')
        Interpret 'temp'i'='
    End
    Signal build_copy_jjj

/*====================================================================*/
/* Common sub-routines (one liners)                                   */
/*====================================================================*/
/* Generic syntax error for return of control                         */
/*--------------------------------------------------------------------*/
syntaxerr:Interpret syntaxact;Signal Value retlab
/*--------------------------------------------------------------------*/
/* Turn error off after syntax detected in JCL build process          */
/*--------------------------------------------------------------------*/
error_off_1:
    Signal Off Syntax
    gc009 = 'Process "'jj'" not found. Refer to dialog developer.'
    Address ISPEXEC "SETMSG MSG(GC009)"
    Return 8
/*--------------------------------------------------------------------*/
/* Noteline generator                                                 */
/*--------------------------------------------------------------------*/
nl_h:Parse Arg n#;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)";Return 0
/*--------------------------------------------------------------------*/
/* Mark line number for instream 'doco'                               */
/*--------------------------------------------------------------------*/
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff
/*--------------------------------------------------------------------*/
/* Establish whether the template is in the user defined dataset or   */
/* default site definitions.                                          */
/*--------------------------------------------------------------------*/
Build_template_table: Arg imemb,act
    If Sysdsn("'"templib"("imemb")'") = 'OK' Then xx = templib
    Else                                          xx = tempsdef
    x = Build_table(xx'('imemb')',act)

    Return 0

/*--------------------------------------------------------------------*/
/* Build a table from a member to be expanded in a skeleton.          */
/*--------------------------------------------------------------------*/
Build_table: Arg ifile,act
    table1 = 'TABLE1'
    If act = 'ADD' Then Do
        "TBEXIST &TABLE1"
        If rc = 12 Then act = 'NEW'
        Else "TBBOTTOM &TABLE1"
    End
    If act = 'NEW' Then Do
        "TBEND &TABLE1"
        "TBCREATE &TABLE1 NAMES(DATALINE) NOWRITE REPLACE"
    End
    dd = 'UL'Time('s')
    Address TSO "ALLOC F("dd") DA('"ifile"') SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM line. FINIS)"
    Do j=1 to line.0
        dataline = line.j
        "TBMOD &TABLE1"
    End
    Address TSO "FREE F("dd")"

    Return 0

/*--------------------------------------------------------------------*/
/* Put instream data captured to notelines for edit session           */
/*--------------------------------------------------------------------*/
put_notelines:
    chgchar = '`'
    syntaxact = "cname = 'there'"
    retlab = error_off_1x
    Signal on Syntax Name syntaxerr
    cname = R0whome('C')
error_off_1x:
    Call Off Error
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,1) = chgchar Then Do Forever
            line = ' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        x = nl_h('*'Substr(line,1,70)'*')
    End
    x = nl_h('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"

    Return 0

/*--------------------------------------------------------------------*/
/* Set variables:                                                     */
/* Note SQLID is the default RACF user group.                         */
/*--------------------------------------------------------------------*/
set_vars_1:
    x=R0site$('drvrv');"VGET (defvars) SHARED";"VGET ("defvars") SHARED"

    valhex  = '0123456789ABCDEF'

If userid() /= 'C838704' Then Signal bypass1;
tempsdef = 'TPCICS.C838704.TEMPLATE.DEFAULT';bypass1:

/*--------------------------------------------------------------------*/
/* Get all DB2 subsystems on system from the subsystem table in memory*/
/*--------------------------------------------------------------------*/
    Numeric digits 10
    cvt  = Storage('10',4)
    jesct= Storage(d2x(c2d(cvt)+x2d('128')),4)
    ssct = Storage(d2x(c2d(jesct)+x2d('18')),4)
    ssct = c2d(ssct)
    sslist = '       '
    ssl    = Length(sslist) +2
    ss#    = 0
    adr@ = Address()
    Address TSO
    xmsg = Msg('Off')

    Do Forever
        ssu = Storage(d2x(ssct+20),4)
        ssu = c2d(ssu)
        ssi = Storage(d2x(ssu+84),20)
        If Word(ssi,1) = db2ssid Then Do
            ssname = Storage(d2x(ssct+8),4)
/*--------------------------------------------------------------------*/
/*          Test if DB2 sub-system active                             */
/*--------------------------------------------------------------------*/
            "NEWSTACK"
            Queue 'END'
            'DSN SYSTEM('ssname')'
            If rc /= 0 Then "DELSTACK"
            Else Do
/*--------------------------------------------------------------------*/
                ss#   = ss# +1
                ss.ss#= ssname
                sslist = sslist||'[ ]'ssname
            End
        End
        ssct = c2d(Storage(d2x(ssct+4),4))
        If ssct = 0 Then Leave
    End
    Call Off Error
    xmsg = Msg(xmsg)
    Address(adr@)
/*--------------------------------------------------------------------*/

    Return 0
