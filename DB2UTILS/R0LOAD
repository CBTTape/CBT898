/******************************** REXX ********************************/
/*--------------------------------------------------------------------*/
/*  Process LOAD parameter entry                                      */
/*--------------------------------------------------------------------*/
    Arg oper1,utillib,templib,tempsdef,debug
    Address ISPEXEC
    If oper1 /= '' Then Signal byp1
    "CONTROL ERRORS RETURN"
    "ISREDIT MACRO (array) NOPROCESS"
    If rc > 0 Then SIGNAL byp1

    "VGET macload SHARED"
    If macload /= '' Then Do
        Signal on Syntax Name byp1
        Interpret "Signal Macro_"macload
    End

byp1:
    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn
    Parse Source . . xcmd .

    "VGET (loadv,panelv,ssid,sqlid) SHARED"
    "VGET ("loadv panelv" nexto) SHARED"
    loadtab = 'LT'Time('s')+1
    table   = 'LO'Time('s')+2
    dd      = 'LO'Time('s')+3
    #count  = 0

load_scr1:
    zcmd =
    csr1=;csrp1=
    genolist = 'OFF'
    x = load_tns1()
    If x /= 0 Then Do
        "TBEND &LOADTAB"
        "VPUT ("loadv") SHARED"
        gc009 = oper1 "entry panel abandoned."
        "SETMSG MSG(GC009)"
        csr1=;csrp1=
        Return 9
    End
    If #count = 0 Then Do
        gc009 = 'Must process "Input dataset..." specifications',
                'before processing "Control parameters".'
        "SETMSG MSG(GC009)"
        csr1 = 'LDTN'
        Signal load_scr1
    End
    x = load_pss1()
    If x /= 0 Then Signal load_scr1

    Call Merge_tables

Return0:
    "VPUT ("loadv" genolist loadtab loadudsn) SHARED"
    Return 0

/*--------------------------------------------------------------------*/
/* Input dataset name specifications                                  */
/*--------------------------------------------------------------------*/
load_tns1:
    brpdsn=;brudsn=;zcmd=
    "DISPLAY PANEL(&PANEL61) CURSOR(&csr1)"
    If zcmd='DEBUG' Then Interpret r0debug(debug,load_tns1)
    If Substr(zcmd,1,3)='DEF' Then Do
        x=R0site$('loadv_2');"VGET (defvars) SHARED";"VGET ("defvars") SHARED"
        Signal load_tns1;End

    csr1=;csrp1=
    If rc > 4 Then Do
        gc009 = oper1 "FROM TABLE name entry panel abandoned."
         "SETMSG MSG(GC009)"
        Return 9
    End
    If zcmd='?' Then Do
        x=helpdrvr(helptab '7A /OPEN')
        Signal load_tns1
    End

    ret_scr = 0
    Parse VAR zcmd cmd parm1

    If Sysdsn(loadpdsn) /= 'OK' Then Do
        gc009 = "Punch dataset not found."
        "SETMSG MSG(GC009)"
        csr1 = 'LOADPDSN'
        Signal load_tns1
    End
    If Sysdsn(loadudsn) /= 'OK' Then Do
        gc009 = "Unload dataset not found."
        "SETMSG MSG(GC009)"
        csr1 = 'LOADUDSN'
        Signal load_tns1
    End
    If brpdsn /= '' Then browse_dataset(loadpdsn)
    If brudsn /= '' Then browse_dataset(loadudsn)
    If ret_scr Then Signal load_tns1
    Address TSO "ALLOC F("dd") DSN("loadpdsn") SHR REU"
    Address TSO "EXECIO * DISKR" dd "(STEM line. FINIS)"
    Address TSO "FREE  F("dd")"
    "TBEND &LOADTAB"
    "TBCREATE &LOADTAB KEYS(SEQ#) NAMES(OWNER,TABNAME,EXIST,COUNT)",
        "NOWRITE REPLACE"
    "TBEND &TABLE"
    "TBCREATE &TABLE KEYS(SEQ@) NAMES(DATALINE) NOWRITE REPLACE"
    seq#=0;seq@=0;exist='N';count=0;t_list=
    Do i=1 To line.0
        dataline=Strip(line.i,'T')
        seq@=seq@+1;"TBADD &TABLE"
        If Word(dataline,1) /= 'INTO' Then Iterate
        t_list=t_list seq@
        Parse VAR dataline '"'owner '"' . '"' tabname '"' .
        seq#=seq#+1
        "TBMOD &LOADTAB"
    End

    "TBTOP &LOADTAB"
    gc009 = 'The following table(s) have been detected for load from',
            'contentes of' loadpdsn'. Change details or leave ASIS.',
            'Use END PF key to proceed to next stage or CANcel to',
            'abandon processing.'
    "SETMSG MSG(GC009)"
load_TB_tns1:
    zcmd=;type1='INPUT';color1='RED'
    "TBDISPL &LOADTAB PANEL(&PANEL611) CURSOR(&csr1)"
    If zcmd='DEBUG' Then Interpret r0debug(debug,load_TB_tns1)
    If Substr(zcmd,1,3)='DEF' Then Do
        x=R0site$('loadv_3');"VGET (defvars) SHARED";"VGET ("defvars") SHARED"
        Signal load_TB_tns1;End

    csr1=
    If rc > 4 Then Do
        "TBEND &LOADTAB"
        gc009 = 'Table name display screen cancelled.'
        "SETMSG MSG(GC009)"
        Signal load_tns1
    End
    csr1='ZCMD'
    If zcmd='?' Then Do
        x=helpdrvr(helptab '7B /OPEN')
        Signal load_TB_tns1
    End
    If ztdsels = 0 Then Signal load_TB_done
    msub = ztdsels
    Signal load_TB_con1

load_TB_mus1:
    "TBDISPL &LOADTAB"
load_TB_con1:
    exist = 'N'
    "TBMOD &LOADTAB"
load_TB_gnx1:
    msub = msub - 1
    If msub < 1 Then Do
        gc009 = 'Table name updated. Press [ENTER] to proceed to',
                'verify destination tables.'
        "SETMSG MSG(GC009)"
        Signal load_TB_tns1
    End
    Else             Signal load_TB_mus1

/*--------------------------------------------------------------------*/
/*  Verify each table if it has not been validated before. If table   */
/*  name changes, validated flag is turned off to force re-validation.*/
/*--------------------------------------------------------------------*/
load_TB_done:
    "TBTOP &LOADTAB"
    #count = 0
    Do While rc = 0
        "TBSKIP &LOADTAB"
        If exist = 'N' Then Do
            x = R0dsnrx('On')

/*  Go verify table and retrieve the tablespace name                  */
            sqlstmt = "SELECT DBNAME,TSNAME",
                     "FROM SYSIBM.SYSTABLES",
                     "WHERE CREATOR = '"owner"'",
                     "AND   NAME   = '"tabname"'"
            sqlretf = ':database,:tspace'
            "VPUT (sqlstmt,sqlretf) SHARED"
            xx = R0dsnrx('Ex',1)
            If xx /= 0 Then Do
                x  = R0dsnrx('Off')
                gc009 = '"'owner'.'tabname'" table not found on "',
                        ssid'", RC = 'xx'.'
                 "SETMSG MSG(GC009)"
                csr1 = 'OWNER'
                rc = 12
                Iterate
            End
            Address ISPEXEC "VGET (sqlretv) SHARED"
            flds = Translate(sqlretf,'  ',':,')
            Do While sqlretv /= ''
                Interpret 'Parse VAR sqlretv' flds 'sqlretv'
            End
/*  Go get count of tables in tablespace for warning if REPLACE       */
/*  specified when count>1.                                           */
            sqlstmt = "SELECT COUNT(*)",
                     "FROM SYSIBM.SYSTABLES",
                     "WHERE DBNAME = '"database"'",
                     "AND   TSNAME = '"tspace"'"
            sqlretf = ':count'
            "VPUT (sqlstmt,sqlretf) SHARED"
            xx = R0dsnrx('Ex',1)
            x  = R0dsnrx('Off')
            Address ISPEXEC "VGET (sqlretv) SHARED"
            flds = Translate(sqlretf,'  ',':,')
            Do While sqlretv /= ''
                Interpret 'Parse VAR sqlretv' flds 'sqlretv'
            End

            If count > #count Then #count = count
            exist = 'Y'
            "TBMOD &LOADTAB"
        End
    End
    If rc > 8 Then Do
        #count = 0
        Signal load_TB_tns1
    End

    gc009 = 'Table name specifications accepted. Processing may',
            'continue.'
    "SETMSG MSG(GC009)"
    Return 0

/*--------------------------------------------------------------------*/
/* LOAD parameter entry                                               */
/*--------------------------------------------------------------------*/
load_pss1:
    zcmd=;type1='INPUT';color1='RED'
    "DISPLAY PANEL(&PANEL62) CURSOR(&csr1) CSRPOS(&csrp1)"
    If zcmd='DEBUG' Then Interpret r0debug(debug,load_pss1)
    If Substr(zcmd,1,3)='DEF' Then Do
        x=R0site$('loadv_3');"VGET (defvars) SHARED";"VGET ("defvars") SHARED"
        Signal load_pss1;End

    csr1=;csrp1=
    If rc /= 0 Then Do
        gc009 = oper1 "FROM TABLE name entry panel abandoned."
         "SETMSG MSG(GC009)"
        Return 9
    End
    ret_scr = 0
    Parse VAR zcmd cmd parm1
    If zcmd='?' Then Do
        x=helpdrvr(helptab '7C /OPEN')
        Signal load_pss1
    End
    If loadrepl = 'YES' & #count > 1 & loaddevt /= '*' Then Do
        gc009 = 'NOTE -',
                'Some tablespaces being loaded have more than 1 tables',
                'defined.',
                'Replace specified, which will replace all tables in',
                'tablespaces with more than 1 tables.'
                'Hit [ENTER] to confirm or use END PF key to return',
                'for change.'
        csr1='LOADREPL'
        "SETMSG MSG(GC009)"
        zcmd=;type1='OUTPUT';color1='WHITE'
        "DISPLAY PANEL(&PANEL62) CURSOR(&csr1) CSRPOS(&csrp1)"
        If rc /= 0 Then Do
            gc009 = 'Replace verification abandoned.'
            "SETMSG MSG(GC009)"
            Signal load_pss1
        End
        csr1=
    End
    If loaddevt = '*' Then Do
        gc009 = 'Device type entry for Load operation.'
        "SETMSG MSG(GC009)"
        x = R0edtl('DASD',10,10,debug)
        If Datatype(x) = 'CHAR' | x > 20 Then loaddevt = x
        Signal load_pss1
    End
    Else Do
        x = R0edtl('LIST',,,debug)
        If Wordpos(loaddevt,x) = 0 Then Do
            gc009 = 'Invalid devive type. Suggest enter "*" for selection list.'
            "SETMSG MSG(GC009)"
            csr1 = 'loaddevt'
            Signal load_pss1
        End
    End

/*--------------------------------------------------------------------*/
/*  Test all the DDNs for * or / values                               */
/*--------------------------------------------------------------------*/
    ddnused = 'C,R,E,D,M,W'
    x = Msg('Off')
    Do WHile ddnused /= ''
        Parse VAR ddnused ddn ',' ddnused
        Interpret 'xxx = LOAD'ddn'DDN'
        If xxx = '' Then Iterate
        If xxx = '*' | xxx = '/' Then Do
            Select
                When ddn = 'C' Then yyy = 'COPYDDN'
                When ddn = 'R' Then yyy = 'RECOVERYDDN'
                When ddn = 'E' Then yyy = 'ERRDDN'
                When ddn = 'D' Then yyy = 'DISCARDDN'
                When ddn = 'M' Then yyy = 'MAPDDN'
                When ddn = 'W' Then yyy = 'WORKDDN'
                Otherwise           yyy = '????DDN'
            End
            Interpret 'LOAD'ddn'DDN = Load_ver_common(yyy,xxx)'
            Interpret 'xxx = LOAD'ddn'DDN'
        End
        If Sysdsn("'"tempsdef"("Strip(xxx)")'") /= 'OK' Then,
            If Sysdsn("'"templib"("Strip(xxx)")'") /= 'OK' Then Do
                csr1 = 'LOAD'ddn'DDN'
                ddnused=
                gc009 = 'Template not found. Please correct and hit',
                        '[ENTER].'
                "SETMSG MSG(GC009)"
                ret_scr=1
            End
    End

    If ret_scr Then Signal load_pss1

    Return 0

/*--------------------------------------------------------------------*/
/*  Comon template testing routine                                    */
/*--------------------------------------------------------------------*/
load_ver_common: Arg v1,v2
    xxx = '?'
    If v2 = '*' Then Do
        gc009 = 'Template processing for LOAD' v1'.'
        "SETMSG MSG(GC009)"
        x = R0listm(table,tempsdef,'$TTY','ND')
        x = R0listm(table,templib,'$TTY',,'EXIST')
        If Datatype(x) = 'CHAR' Then Parse VAR x xxx .
        ret_scr = 1
    End
    Else If v2 = '/' Then Do
             xmsg = 'LOAD' v1
             x = R0templ(templib,tempsdef,xmsg,v1)
             If Datatype(x) = 'CHAR' Then xxx = x
             ret_scr = 1
         End

    Return xxx

browse_dataset: Arg ifile
    "BROWSE DATASET(&IFILE)"
    ret_scr = 1

    Return 0

/*--------------------------------------------------------------------*/
/*  Merge the two tables.                                             */
/*  Check for changes in output table names and if changed update     */
/*  the punch table..                                                 */
/*--------------------------------------------------------------------*/
Merge_tables:
    "TBTOP &LOADTAB"
    Do While t_list /= ''
        Parse VAR t_list seq@ t_list
        "TBSKIP &LOADTAB"
        "TBTOP &TABLE"
        "TBSKIP &TABLE NUMBER(&SEQ@)"
        dataline = ' INTO TABLE "'Substr(owner,1,8)'"."' ||,
                   Substr(tabname,1,18)'"'
        "TBMOD &TABLE"
    End
    Do 4;"TBTOP &TABLE";"TBSKIP &TABLE";"TBDELETE &TABLE";ENd
    "TBEND &LOADTAB"
    loadtab = table

    Return 0

/*--------------------------------------------------------------------*/
/* Macro 1 to put notelines into JCL                                  */
/*--------------------------------------------------------------------*/
macro_1:
    r1macro =
    "VPUT r1macro SHARED"
n_st = mark(2)                              /* Mark next line         */
/*

&   Hello &CNAME..

    This is input data erated from the parameters entered.

    Either submit from the command line or use your favourite copy
    routine to save for posterity.

    The contents will self destruct on ending.

                            ****

    "A wise man will always check his JCL before submiting it."
    -Confucius...


*/
n_en = mark(-2)                             /* Mark prev 2 line       */
    "ISREDIT RES"
    call put_notelines

    Exit

/*--------------------------------------------------------------------*/
/* Put instream data captured to notelines for edit session           */
/*--------------------------------------------------------------------*/
put_notelines:
    chgchar = '&'
    syntaxact = "cname = 'there'"
    retlab = error_off_1x
    Signal on Syntax Name syntaxerr
    cname = R0whome('C')
error_off_1x:
    Call Off Error
    "ISREDIT (caps) = CAPS"; "ISREDIT CAPS = OFF"
    x = nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')
    Do i=n_st To n_en
        line = Sourceline(i)
        If Substr(line,1,1) = chgchar Then Do Forever
            line = ' 'Substr(line,2)
            If Index(line,'&') = 0 Then Leave
            Parse VAR line p1 '&' var '.' p2
            data = 'line = p1 || 'var' || p2'
            Interpret data
        End
        x = nl_h('*'Substr(line,1,70)'*')
    End
    x = nl_h('*'Copies('-',70)'*')
    "ISREDIT CAPS = (caps)"

    Return 0

/*--------------------------------------------------------------------*/
/* Noteline generator                                                 */
/*--------------------------------------------------------------------*/
nl_h:Parse Arg n#;"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)";Return 0
nl_a:Parse Arg n#;"ISREDIT LINE_AFTER  .ZCSR   = NOTELINE (n#)";Return 0
nl_b:Parse Arg n#;"ISREDIT LINE_BEFORE .ZCSR   = NOTELINE (n#)";Return 0
/*--------------------------------------------------------------------*/
/* Mark line number for instream 'doco'                               */
/*--------------------------------------------------------------------*/
Mark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff

