/******************************** REXX ********************************/
/*--------------------------------------------------------------------*/
/*  Process MIGRATE LISTDEF parameter entry                           */
/*--------------------------------------------------------------------*/
Arg oper1,utillib,templib,tempsdef,debug
    Address ISPEXEC

    cactn = "RETURN"
/*  cactn = "CANCEL"                                                  */
    "CONTROL ERRORS" cactn

    "VGET (migrtv,panelv,ssid,sqlid) SHARED"
    "VGET ("migrat panelv") SHARED"
    tablem = 'MT'Time('s')
    sysuid = Userid()
    today  = Date('e')
    today = Substr(today,7,2) ||,
            Substr(today,4,2) ||,
            Substr(today,1,2)
    ascb     = Storage(d2x(548),4)
    asxb     = Storage(d2x(c2d(ascb)+c2d(x2c(6c))),4)
    acee     = Storage(d2x(c2d(asxb)+c2d(x2c(c8))),4)
    group    = Strip( Storage(d2x(c2d(acee)+c2d(x2c(1e))),8) )

/*--------------------------------------------------------------------*/
/*  migrate LiStdef                                                   */
/*--------------------------------------------------------------------*/
migrate_lss1:
    zcmd =
    "DISPLAY PANEL(&PANEL150) CURSOR(&csr1) CSRPOS(&csrp1)"
    If zcmd='DEBUG' Then Interpret r0debug(debug,migrate_lss1)
    If Substr(zcmd,1,3)='DEF' Then Do
        "VPUT (ssid) SHARED"
        x=R0site$('migrtv');"VGET (defvars) SHARED";"VGET ("defvars") SHARED"
        If miglpar /= '' Then Do
            string = 'jobcard1 jobcard2 jobcard3 jobcard4 jobcard5'
            "VGET ("string") PROFILE"
            string = jobcard1 jobcard2 jobcard3 jobcard4 jobcard5
            Parse VAR string 'CLASS=' migrxcls ','
            Parse VAR migrxcls migrxcls
            Parse VAR string 'MSGCLASS=' migrmcls ','
            Parse VAR migrmcls migrmcls
            Parse VAR string . . migracct ',' .
        End
        Signal migrate_lss1;End

    csr1=;csrp1=
    If rc /= 0 Then Do
        gc009 = oper1 "FROM TABLE name entry panel abandoned."
         "SETMSG MSG(GC009)"
        Return 9
    End
    If zcmd='?' Then Do
        x=helpdrvr(helptab '13 /OPEN')
        Signal migrate_lss1
    End

    ret_scr = 0
    Parse VAR zcmd cmd parm1

    If migrldef = '*' Then Do
        x = R0listm(table,utillib)
        If Datatype(x) = 'CHAR' Then migrldef = x
        ret_scr = 1
    End
    Else If migrldef = '/' Then Do
             x = r0ldef(utillib,'migrldef')
             If Datatype(x) = 'CHAR' Then migrldef = x
             ret_scr = 1
         End
    If Sysdsn("'"utillib"("migrldef")'") /= 'OK' Then Do
        gc009 = Sysdsn("'"utillib"("migrldef")'")
        csr1 = 'migrldef'
        "SETMSG MSG(GC009)"
        Signal migrate_lss1
    End
    x = migrate_ver_common()
    If ret_scr Then Signal migrate_lss1
    x = build_migrate_template()
    If ret_scr Then Signal migrate_lss1

Return0:
    punchdsn = var_2_aster(get_pddn_dsn(migrpddn))
    unloddsn = var_2_aster(get_pddn_dsn(migruddn))
    moddsn  = var_sub(migrldsn)
    mapdsn  = var_sub(migrmdsn)
    If migrlpar /= '' Then,
        tempdsn = var_sub(migrtdsn)
    adr@ = Address()
    Address TSO
    sameplex = inquire_plex(migrlpar)
    Address(adr@)
    "VPUT ("migrtv",punchdsn,moddsn,mapdsn,tempdsn,password,tablem",
          "unloddsn,sameplex)SHARED"
    Return 0

/*--------------------------------------------------------------------*/
/*  Comon migrate field verifications:                                */
/*--------------------------------------------------------------------*/
migrate_ver_common:
    If migrpddn = '*' Then Do
        gc009 = 'Template processing for Migrate PUNCHDDN.'
        "SETMSG MSG(GC009)"
        x = R0listm(table,tempsdef,'$TTY','ND')
        x = R0listm(table,templib,'$TTY',,'EXIST')
        If Datatype(x) = 'CHAR' Then Parse VAR x migrpddn .
        ret_scr = 1
    End
    Else If migrpddn = '/' Then Do
             xmsg = 'Migrate PUNCHDDN'
             x = R0templ(templib,tempsdef,xmsg,'migrpddn')
             If Datatype(x) = 'CHAR' Then migrpddn = x
             ret_scr = 1
         End
    xmsg=Msg('Off')
    If Sysdsn("'"templib"("migrpddn")'") /= 'OK' Then,
        If Sysdsn("'"tempsdef"("migrpddn")'") /= 'OK' Then Do
            gc009 = 'Template not found.'
            "SETMSG MSG(GC009)"
            csr1  = 'migrpddn'
            ret_scr=1
            xmsg=Msg(xmsg)
            Return 4
        End
    xmsg=Msg(xmsg)
    If migruddn = '*' Then Do
        gc009 = 'Template selection for Migrate UNLDDN.'
        "SETMSG MSG(GC009)"
        x = R0listm(table,tempsdef,'$TTY','ND')
        x = R0listm(table,templib,'$TTY',,'EXIST')
        If Datatype(x) = 'CHAR' Then Parse VAR x migruddn .
        ret_scr = 1
    End
    Else If migruddn = '/' Then Do
             xmsg = 'Migrate UNLDDN'
             x = R0templ(templib,tempsdef,xmsg,'migruddn')
             If Datatype(x) = 'CHAR' Then migruddn = x
             ret_scr = 1
         End
    xmsg=Msg('Off')
    If Sysdsn("'"templib"("migruddn")'") /= 'OK' Then,
        If Sysdsn("'"tempsdef"("migruddn")'") /= 'OK' Then Do
            gc009 = 'Template not found.'
            "SETMSG MSG(GC009)"
            csr1  = 'migruddn'
            ret_scr=1
            xmsg=Msg(xmsg)
            Return 4
        End
    xmsg=Msg(xmsg)

    Return 0

get_pddn_dsn: Arg memb
    x = proces_tempate(memb)
    Parse VAR line.2 'DSN(' dsn ')'
    Return var_sub(dsn)

build_migrate_template:
    "TBEND &TABLEM"
    "TBCREATE &TABLEM NAMES(DATALINE) NOWRITE REPLACE"
    x = proces_tempate(migrpddn,'TBMOD')
    x = proces_tempate(migruddn,'TBMOD')
    Return 0

proces_tempate: Arg memb,act
    file = "'"templib"("memb")'"
    If Sysdsn(file) /= 'OK' Then
        file = "'"tempsdef"("memb")'"
    dd = 'MD'Time('s')
    Address TSO "ALLOC F("dd") DA("file") SHR REU"
    Address TSO "EXECIO * DISKR "dd" (STEM line. FINIS"
    Address TSO "FREE  F("dd")"
    If act = '' Then Return 0
    Do j=1 to line.0
        If j=2 Then dataline = var_sub(line.j)
        Else        dataline = line.j
        "TBMOD &TABLEM"
    End
    Return 0

var_sub: Arg file
    file = r0cstrng(file,'&SSID.',ssid)
    If Index(file,'&SYSPREF.') > 0 Then,
        file = r0cstrng(file,'&SYSPREF.',group)
    If Index(file,'&HLQ.') > 0 Then,
        file = r0cstrng(file,'&HLQ.',group)
    file = r0cstrng(file,'&SYSUID.',sysuid)
    file = r0cstrng(file,'&USERID.',sysuid)
    file = r0cstrng(file,'&DATE.','D'today)
    file = r0cstrng(file,'&LPAR.',migrlpar)
    Return file

var_2_aster: Arg file
    Do While Index(file,'&') > 0
        Parse VAR file p1 '&' . '.' p2
        file = p1'*'p2
    End
    Return file

inquire_plex: Arg lpar
/******************************** REXX ********************************/
/*--------------------------------------------------------------------*/
/* Activate CONSOLE facility                                          */
/*--------------------------------------------------------------------*/
    alfabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    sol     = Sysvar('SOLDISP')
    unsol   = Sysvar('UNSDISP')
    uid     = Userid()
    x = MSG('Off')
    "CONSOLE DEACTIVATE"
    x = MSG('On')
    Do i=1 To 26
        cn = uid || Substr(alfabet,i,1)
        x = Outtrap('line.',1,'NOCONCAT')
        "CONSOLE ACTIVATE NAME("cn")"   /* ACTIVATE CONSOLE           */
        rc1 = rc
        If rc1 = 0 Then Leave
    End
    If rc1 /= 0 Then Do
        Say 'Could not establist CONSOLE'
        Return 'Error'
    End
    "CONSPROF SOLDISP(NO) UNSOLDISP(NO)" /* SET PROFILE TO NO DISPLAYS*/
/*--------------------------------------------------------------------*/
/* Issue command to find IODF                                         */
/*--------------------------------------------------------------------*/
    "CONSOLE SYSCMD(D XCF) CART('IOS')"
    rc1 = rc
    msg = getmsg('CONSMSG.',,'ALK',,10)
    'CONSOLE DEACTIVATE'                  /* deactivate 1st.       */
    If msg Â¬= 0 Then Do
      Say 'No output from console command to process'
    End
    plex = ''
    Do i=2 To consmsg.0
        plex = plex consmsg.i
    End
    Parse VAR plex . pl ':' plex
    If Wordpos(lpar,plex)>0 Then Return 'Y'
    Else                         Return 'N'
