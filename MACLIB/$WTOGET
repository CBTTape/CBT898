         MACRO
&NAME    $WTOGET  &PROG=Missing, Program name (or any 8 byte data)     +
               &REGS=,           'ALL' or any single numeric register  +
               &TRACE=,          Data area or quoted literal           +
               &TRACEL=,         Trace length if not 56 bytes required +
               &HEX=NO,          Convert data area to HEX b4 display   +
               &TS=NO,           Write to CICS TSQ                     +
               &CICS=NO,         Set to YES/AEF 1st time for TSQ       +
               &YREGS=NO,        Include 'YREGS' on 1st. invocation    +
               &CSECT=NO,        New CSECT (forces 1st. invocation)    +
               &INIT=NO,         Used to init macro (w/o commands)     +
               &LIST=NO,         Produce macro expansion list          +
               &HELP=NO,         N/A (at this stage)                   +
               &MF=              Only standard format available. This
.*                               is used to control HEXCHMAC macro.
.*------- WTO GE Trace -----------------------------------------------*
.*                                                                    *
.* NOTES:                                                             *
.*  1. To place data to the TSQ, The first invocation of this macro   *
.*     must have an entry of 'CICS=..'. Thereafter you only need the  *
.*     'TS=..' parameter. You must specify the CICS= with every new   *
.*     CSECT=YES entry.                                               *
.*                                                                    *
.*  2. If 'CICS' is set to YES, the EI program called is 'DFHEI1'. If *
.*     it is set to 'AEF', the module called is 'S#EI1'. If it is set *
.*     to 'NO' (the default) the approprite code is NOT generated.    *
.*                                                                    *
.*  3. PROGname can be used for alternative literal tracing.          *
.*                                                                    *
.*  4. You may combine the TRACE and TRACEL parameters by providing   *
.*     syntactically correct address/length data on the TRACE         *
.*     parameter, eg.                                                 *
.*        $WTOGET ......,TRACE=SOURCE(15)... <- Implied length of 15  *
.*        $WTOGET ......,TRACE=X'E4'(36,R3). <- Implied length of 36  *
.*                                                                    *
.*  5. The maximum trace length is 56 (excluding the program name).   *
.*     If registers are traced and HEX conversion is in affect, the   *
.*     trace length will be adjusted to remain within limits.         *
.*                                                                    *
.*  6. Uses macro 'HEXCHMAC'.                                         *
.*                                                                    *
.*--------------------------------------------------------------------*
         AIF   (T'&LIST EQ 'O').BYPRNT1
         AIF   ('&LIST'(1,1) EQ 'Y').BYPRNT1
         PUSH  PRINT
         PRINT OFF
.BYPRNT1 ANOP
         GBLB  &WT1ST,&YR1ST,&CICSENV
         GBLB  &XC1ST,&XC1NAME   <-- Used to synchronise HEXCHMAC macro
         GBLB  &REGSFLG,&REGDFLG <-- Used to synchronise HEXCHMAC macro
         GBLC  &WTOON,&WGENAME,&CICSEI
         LCLA  &R#,&SR,&ER,&LM,&@@,&LTL,&LX,&LTR,&LL,&SUB1
         LCLC  &PROGN,&DOTS,&TRACEN,&P,&REGSN,&RD,&TRACE#,&TRACEL#
.*--------------------------------------------------------------------*
.*
&LTR     SETA  75-(8+11+9+4*2+1)            Length of trace with reg
&LTL     SETA  75-(8+11)                    Length of trace 'literal'
&DOTS    SETC  '.........'
&PROGN   SETC  '&PROG.&DOTS'(1,8)' +'
&TRACE#  SETC '&TRACE'                      Set work value
&TRACEL# SETC '&TRACEL'                     Set work value
.*--------------------------------------------------------------------*
.* ESTABLISH LENGTH OF VARIABLE AND MOVE LENGTH IF PRESENT            *
.*--------------------------------------------------------------------*
&MSGL    SETA  K'&TRACE#
         AIF   ('&TRACE#'(&MSGL,1) NE ')').MSGDTOK
&MSGL1   SETA  &MSGL-1
&APOST   SETA  0
.LOOP1   ANOP
         AIF   (&MSGL1 EQ  0).E4
         AIF   ('&TRACE#'(&MSGL1,1) EQ ',').LOOP1E
         AIF   ('&TRACE#'(&MSGL1,1) EQ '(').LOOP2E
&MSGL1   SETA  &MSGL1-1
         AGO   .LOOP1
.LOOP1E  ANOP
&APOST   SETA  &MSGL1
&MSGL1   SETA  &MSGL1-1
.LOOP2   ANOP
         AIF   (&MSGL1 EQ 0).E4
         AIF   ('&TRACE#'(&MSGL1,1) EQ '(').LOOP2E
&MSGL1   SETA  &MSGL1-1
         AGO   .LOOP2
.LOOP2E  ANOP
         AIF   (&APOST EQ 0).VARMSG    <======
&TRACEL# SETC  '&TRACE#'(&MSGL1+1,&APOST-(&MSGL1+1))
&TRACE#  SETC  '&TRACE#'(1,&MSGL1).'&TRACE#'(&APOST+1,&MSGL-&APOST)
         AGO   .MSGDTOK
.VARMSG  ANOP
&TRACEL# SETC  '&TRACE#'(&MSGL1+1,&MSGL-(&MSGL1+1))
&TRACE#  SETC  '&TRACE#'(1,&MSGL1-1)
.MSGDTOK ANOP
.*--------------------------------------------------------------------*
.*
         AIF   (&WT1ST).A$10           If not 1ST. time thru bypass
&WGENAME SETC  'WGE'.'&SYSNDX'         Set generic name
.A$10    ANOP
         AIF   (T'&CSECT EQ 'O').A$20      Bypass if missing CSECT
         AIF   ('&CSECT'(1,1) NE 'Y').A$20 Bypass if CSECT not 'YES'
&WT1ST   SETB  0                       Reset to 1st. time thru
&CICSENV SETB  0                       Reset to 1st. time thru
.*--------------------------------------------------------------------*
&XC1ST   SETB  0        <-----   Used to synchronise HEXCHMAC macro
&XC1NAME SETB  0        <-----   Used to synchronise HEXCHMAC macro
&REGSFLG SETB  0        <-----   Used to synchronise HEXCHMAC macro
&REGDFLG SETB  0        <-----   Used to synchronise HEXCHMAC macro
.*--------------------------------------------------------------------*
&WGENAME SETC  'WGE'.'&SYSNDX'         Set generic name <---- Unique
.A$20    ANOP
.*--------------------------------------------------------------------*
&TST     SETC  'N'
         AIF   (T'&TS EQ 'O').WTOTS01       Bypass if not TS omitted
&TST     SETC  '&TS'(1,1)
.WTOTS01 ANOP
.*--------------------------------------------------------------------*
&P       SETC  '&WGENAME'
&WGEBYP  SETC  '&P'.'0'
&WGERS1  SETC  '&P'.'1'
&WGERS2  SETC  '&P'.'2'
&WGETGT  SETC  '&P'.'3'
&WGEWTO1 SETC  '&P'.'4'
&WGEWTO2 SETC  '&P'.'5'
&WGEBTOA SETC  '&P'.'6'
&WGEBTOI SETC  '&P'.'7'
&WGEBTOP SETC  '&P'.'P'
&WGTSLEN SETC  '&P'.'L'                 TS message length
&WGTSFLG SETC  '&P'.'F'                 TS usage flag
&WGTSL1  SETC  '&P'.'A'                 TS WRITEQ procedure
.*--------------------------------------------------------------------*
         AIF   (&WT1ST).A$30           If not 1ST. time thru bypass
&WT1ST   SETB  1
         AIF   ('&YREGS'(1,1) NE 'Y').A$31
*---------------------------------------------------------------------*
         AIF   (&YR1ST).A$31           If not 1ST. time thru bypass
&YR1ST   SETB  1
         YREGS                         , REGISTER EQUATES
.A$31    ANOP
&YR1ST   SETB  1
         B     &WGEBYP                 BYPASS AROUND CONSTANT CODE/DATA
&WGERS1  DS    16F                     REG SAVE AREA BEFORE BRANCH
&WGERS2  DS    16F                     REG SAVE AREA BEFORE WTO
&WGETGT  DC    CL&LTL.' '              DISPLAY WORK AREA
         AIF   ('&CICS' EQ 'NO').NCENV01 Bypass if not CICS
&WGTSLEN DC    H'75'                   TSQ MESSAGE LENGTH
&WGTSFLG DC    C'N'                    TS USAGE FLAG (OFF)
&CICSENV SETB  1                       Set CICS environment flag
&CICSEI  SETC  'DFHEI1'                Set IBM module Address
         AIF   ('&CICS' NE 'AEF').NCENV01 Bypass if not AEF ENV
&CICSEI  SETC  'S#EI1'                 Set AEF module Address
.NCENV01 ANOP
*
&WGEWTO1 DS    0H                      TRACE MOVE/DISPLAY
         STM   0,15,&WGERS1            SAVE REGISTERS
         MVC   &WGEBTOA+8+11(&LTL),&WGETGT
         AIF   (NOT &CICSENV).NCENV02  Bypass if not CICS environment
         CLI   &WGTSFLG,C'Y'           Q. TSQ USAGE
         BE    &WGTSL1                    Y. PUT TO TS
.NCENV02 ANOP
         B     &WGEBTOA                BRANCH TO WTO
*
&WGEWTO2 DS    0H                      REGISTER MOVE/DISPLAY
         STM   0,15,&WGERS1            SAVE REGISTERS
         MVC   &WGEBTOA+8+11(8),&WGETGT
         HEXCHMAC &WGETGT+8,&WGEBTOA+8+20,4,LIST=&LIST,MF=&MF
         AIF   (NOT &CICSENV).NCENV03  Bypass if not CICS environment
         CLI   &WGTSFLG,C'Y'           Q. TSQ USAGE
         BE    &WGTSL1                    Y. PUT TO TS
.NCENV03 ANOP
         B     &WGEBTOA                BRANCH TO WTO
*
&WGEBTOA DS    0F                      WTO AND CLEAR FIELDS
         WTO   '&PROGN                                                 +
                                 ',ROUTCDE=11
         ORG   &WGEBTOA+8              POINT PAST CONSTANTS
&WGEBTOP DS    CL10                    PLACE FOR PROGRAM NAME
         ORG                           , END REDEFINES
&WGEBTOI DS    0H
         AIF   (NOT &CICSENV).NCENV04  Bypass if not CICS environment
         MVI   &WGTSFLG,C'N'           TURN TSQ USAGE OFF
.NCENV04 ANOP
         MVI   &WGEBTOA+8+11,C' '
         MVC   &WGEBTOA+8+11+1(74-(8+11)),&WGEBTOA+8+11
         MVI   &WGETGT,C' '
         MVC   &WGETGT+1(L'&WGETGT-1),&WGETGT
         LM    0,15,&WGERS1            RESTORE REGISTERS
         BR    14                      RETURN TO CALLER
         AIF   (NOT &CICSENV).NCENV05  Bypass if not CICS environment
*
&WGTSL1  DS    0H
.*--------------------------------------------------------------------*
.* Generated from the following statement
.*--------------------------------------------------------------------*
.*       EXEC  CICS WRITEQ TS QUEUE('$WTOGET') FROM(&WGEBTOA+8)
.*          LENGTH(&WGTSLEN)
.*
.*--------------------------------------------------------------------*
***********************************************************************
*        DFHECALL =X'0A02E0000800004100',(CHA8,=CL8'$WTOGET'),(______RF*
               ,&WGTSL1+8),(FB_2,&WGTSLEN)
***********************************************************************
         DS    0H                                                       01-DFHEC
         LA    1,DFHEIPL                                                01-DFHEC
         LA    14,=X'0A02E0000800004100'                                01-DFHEC
         LA    15,=CL8'$WTOGET'                                         01-DFHEC
         LA    0,&WGEBTOA+8                                             01-DFHEC
         STM   14,0,0(1)                                                01-DFHEC
         LA    14,&WGTSLEN                                              01-DFHEC
         ST    14,12(,1)                                                01-DFHEC
         OI    12(1),X'80'         LAST ARGUMENT                        01-DFHEC
         L     15,=V(&CICSEI)      SET EI ADDRESS                       01-DFHEC
         BALR  14,15               INVOKE EXEC INTERFACE                01-DFHEC
         B     &WGEBTOI            GO INITIALISE WORK FIELDS
.NCENV05 ANOP
***********************************************************************
&WGEBYP DS     0H
***** HOW TO USE TRACE ************************************************
*
*        $WTOGET PROG=MYPROG,TRACE='AT LABEL MOVEIT'
*        MVC   TARGET(10),SOURCE1
*        MVC   TARGET+10(10),SOURCE2
*        MVC   TARGET+20(10),SOURCE3
*        B     TARGET+L'TARGET
*TARGET  DS    CL30
*        $WTOGET PROG=MYPROG,TRACE=TARGET,TRACEL=56
*
***** HOW TO USE REGISTER DISPLAY *************************************
*
*        $WTOGET PROG=MYPROG,REGS=9      Note : REGS must be numeric
*        $WTOGET PROG=MYPROG,REGS=ALL           or 'ALL'
*
***********************************************************************
*
         AIF   (T'&INIT EQ 'O').A$30        Continue if INIT omitted
         AIF   ('&INIT'(1,1) EQ 'Y').MEXIT  Exit if init specified
.A$30    ANOP
.*--------------------------------------------------------------------*
&LX      SETA  0                            Set HEX trace length to 0
         AIF (T'&TRACE# EQ 'O').REGS$$$     Bypass if trace not present
&LL      SETA  &LTL                         Set HEX length limit
         AIF (T'&REGS EQ 'O').TABSLOK       Bypass if reg not required
&LL      SETA  &LTR                         Reset length to allow regs
.TABSLOK ANOP
&TRACEN  SETC '&TRACE#'                     Set work value
&LM      SETA  &LL                          Set default length
         AIF   (T'&TRACEL# EQ 'O').HAVTRL1  Bypass if length omitted
         AIF   (&TRACEL# GE &LL).HAVTRL1    Bypass if length > limit
&LM      SETA  &TRACEL#                     Set required length
.HAVTRL1 ANOP
.*--------------------------------------------------------------------*
.* Process HEX trace request. It is assumed that HEX conversion is    *
.* required on data area as we would already know the HEX value of    *
.* a literal constant.                                                *
.* It is also assumed that if no trace length is given the full       *
.* limit is to be used. Variable &XL will be used to determine if     *
.* HEX conversion is requited (ie. &XL > 0).                          *
.*--------------------------------------------------------------------*
         AIF   (T'&HEX EQ 'O').HEXLOK1      Bypass if HEX missing
         AIF   ('&HEX'(1,1) EQ 'N').HEXLOK1 Bypass if no HEX
&LX      SETA  &LM                          Set HEX length to sup/def
         AIF   (&LX LE &LL/2).HEXLOK1       Bypass if HEX len 1/2 limit
&LX      SETA  &LL/2                        Reset to limit
.HEXLOK1 ANOP
.*       B     *+20+4                        Use for debug
.*       DC    CL20'LL=&LL LM=&LM LX=&LX'    Use for debug
.*--------------------------------------------------------------------*
         AIF   ('&TRACE#'(1,1) NE '''').KEEPL1 Bypass if not literal
         AIF   (T'&TRACEL# NE 'O').HAVTRL3  Bypass if have length
&LM      SETA  K'&TRACE#-2                  Set length w/o quotes
.HAVTRL3 ANOP
&TRACEN  SETC '&TRACE#'(2,&LM)              Remove quotes
         AIF   (&LM LE &LL).KEEPL1          Continue if length < limit
&LM      SETA  &LL                          Set default length
.KEEPL1  ANOP
         AIF   ('&TRACE#'(1,1) NE '(').KEEPL2 Bypass if not register
&TRACEN  SETC   '0('.'&TRACE#'(2,1)         Set trace
         AIF   ('&TRACE#'(3,1) EQ ')').FULLRL1 Have full register
&TRACEN  SETC   '&TRACEN'.'&TRACE#'(3,1)    Set trace
.FULLRL1 ANOP
&TRACEN  SETC   '&TRACEN'.')'               Set trace
.KEEPL2  ANOP
.*--------------------------------------------------------------------*
.*
.REGS$$$ ANOP
&REGSN   SETC  '&REGS'
         AIF (T'&REGSN NE 'O').PREGS  Process REGS if present
         AIF (T'&TRACE# NE 'O').TRACE Process TRACE if present
&REGSN   SETC  'ALL'     Set to ALL if no REGS or TRACE arguments
.*
.PREGS   ANOP
***********************************************************************
*     PRINT REGISTER(S)                                               *
***********************************************************************
&SR      SETA  0
&ER      SETA  15
         AIF   (T'&REGS EQ 'O').SENDP
         AIF   ('&REGS' EQ 'ALL').SENDP
&SR      SETA  &REGS
&ER      SETA  &SR
.SENDP   ANOP
&R#      SETA  &SR
         STM   0,15,&WGERS2            SAVE REGISTERS
         MVC   &WGEBTOP,=C'&PROGN'     MOVE PROGRAM NAME
.WRLOOP  ANOP
         AIF   (&R# GT &ER).WRLOOPE    Exit loop after limit
&RD      SETC  '&R#., '(1,3)
         MVC   &WGETGT.(8),=CL8'R&RD. -->'
.*--------------------------------------------------------------------*
         AIF   (T'&TRACEN EQ 'O').NORTRC       Bypass if no trace
         AIF   ('&TRACE#'(1,1) NE '''').REGTRNQ TRACE not quoted
         MVC   &WGEBTOA+8+20+4*2+1(&LM.),=CL&LM.'&TRACEN.'
         AGO   .NORTRC
.REGTRNQ ANOP
         AIF   (&LX EQ 0).REGTRMV      Bypass if HEX length missing
         HEXCHMAC &TRACE#,&WGEBTOA+8+20+4*2+1,&LX,MF=&MF,LIST=&LIST
         AGO   .NORTRC
.REGTRMV ANOP
         MVC   &WGEBTOA+8+20+4*2+1(&LM.),&TRACEN
.*--------------------------------------------------------------------*
.NORTRC  ANOP
         ST    &R#.,&WGETGT+8          STORE REGISTER
         AIF   (NOT &CICSENV).NCENV06  Bypass if not CICS environment
         MVI   &WGTSFLG,C'&TST'        SET TSQ USAGE
.NCENV06 ANOP
         BAL   14,&WGEWTO2             GO WTO IT
&R#      SETA  &R#+1
         LM    0,15,&WGERS2            RESTORE REGISTERS
         AGO   .WRLOOP
.WRLOOPE ANOP
         AGO   .MEXIT
.*
.*-------------------------------------------------------------------*
.*
.TRACE   ANOP
         STM   0,15,&WGERS2            SAVE REGISTERS
         MVC   &WGEBTOP,=C'&PROGN'     MOVE PROGRAM NAME
         AIF   ('&TRACE#'(1,1) NE '''').PUTRACD
         MVC   &WGETGT.(&LM.),=CL&LM.'&TRACEN'
         AGO   .TRACEEX                EXIT TRACE PROCESSING
.PUTRACD ANOP
         AIF   (&LX EQ 0).PUTTRMV      Bypass if HEX length missing
         HEXCHMAC &TRACE#,&WGETGT,&LX,MF=&MF,LIST=&LIST
         AGO   .TRACEEX                EXIT TRACE PROCESSING
.PUTTRMV ANOP
         MVC   &WGETGT.(&LM.),&TRACEN MOVE DATA TO TRACE
.TRACEEX ANOP
         AIF   (NOT &CICSENV).NCENV07  Bypass if not CICS environment
         MVI   &WGTSFLG,C'&TST'        SET TSQ USAGE
.NCENV07 ANOP
         BAL   14,&WGEWTO1             GO WTO IT
         LM    0,15,&WGERS2            RESTORE REGISTERS
         AGO   .MEXIT
*
.*
.*-------------------------------------------------------------------*
.*  Errors
.*-------------------------------------------------------------------*
.E001    MNOTE 12,'Literal with REGS request must be qouted'
         AGO   .MEXIT
.*
.MEXIT   ANOP
         AIF   ('&LIST'(1,1) EQ 'Y').BYPRNT2
         POP   PRINT
.BYPRNT2 ANOP
         MEND
