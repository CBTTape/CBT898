         MACRO
&NAME    CHHEXMAC &SOURCE,&TARGET,&LENGTH,&ERRRTN,&MF=,&LIST=NO,       +
               &LABEL=YES,&HELP=NO
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'CHHEXMAC' parameter    *
* and it's use pass parameter 'HELP=Yes'.                             *
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
*                                                                     *
*   CONVERT CHARACTERS TO HEX.                                        *
*   --------------------------                                        *
*           N O T E - N O T E - N O T E - N O T E - N O T E           *
*                                                                     *
*   This routine saves and uses general registers 1, 14 & 15.         *
*   R14 and R15 will be altered on return from the macro. Do NOT use  *
*   these two registers to as parameter addresses.                    *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*   Parameters:-                                                      *
*       1. Source                                                     *
*       2. Target                                                     *
*       3. Length                                                     *
*       4. Error routine in case of error or a one byte (two character*
*          hex value  quoted, ie. 'xx') value to convert invalid      *
*          characters to and then continue.                           *
*          NOTE - An invalid supplied HEX substitution parameter will *
*                 result in X'00' substitution.                       *
*       5. MF=E/L -  Macro format for re-entrant programs             *
*       6. LABEL=YES/NO - Generate data labels. Used for reentrant    *
*                         programs with MF=L and you wish to move the *
*                         constant value from the CSECT over the      *
*                         the getmain'ed DSECT.                       *
*                         The default is 'YES'. the parameter can be  *
*                         ignored if note 2 option is observed.       *
*       7. LIST=YES/NO - Option to generate macro expansion or not    *
*       8. HELP=YES/NO - Option to print these help details. default  *
*                        is 'YES'.                                    *
*                                                                     *
*                                                                     *
*   If "error routine" = 'xx' (quoted) format then on return from     *
*   macro, R15 will be:-                                              *
*       set to - 0 if all conversion OK                               *
*       set to - 8 if conversion error found                          *
*                                                                     *
*   NOTE:-                                                            *
*       1. Parameters may be passed in registers using the (Rn) or    *
*          d(Rn) (for register displacement) notation.                *
*          NOTE - cannot have digits).                                *
*       2. For execute form of the macro (MF=E) the first occurence of*
*          the macro must be the first one executed. If a branch      *
*          causes a initial loop around it, insert a dummy macro to   *
*          perform a conversion into work areas or use the LABEL=NO   *
*          parameter.                                                 *
*                                                                     *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         PUSH  PRINT
         AIF   ('&LIST'(1,1) NE 'N').A$XX
         PRINT NOGEN
.A$XX    ANOP
.*--------------------------------------------------------------------*
         GBLC  &CXBAL,&CXBYPAS,&CXLOOP,&CXBYTES,&CXBYTE1,&CXBYTE2
         GBLC  &CXBADAT,&CXTABLE,&CXIGERR,&CXER1BR,&CXER2BR
         GBLC  &CXER1BS,&CXER2BS,&CXRTADR
         GBLC  &CXCHOK1,&CXERSUB,&CXERRCH,&CXRTCOD,&CXCHXT1,&CXR1SAV
         GBLB  &CX1NAME,&CX1ST
         LCLC  &#LENGTH,&#SOURCE,&#TARGET,&#ERRRTN
         LCLA  &LEN
.*--------------------------------------------------------------------*
         GBLC  &REGSAVR,&REGSMCR
         GBLB  &REGSFLG,&REGDFLG
         AIF   (&REGSFLG).A$RS
&REGSAVR SETC  'GB'.'&SYSNDX'.'#'
&REGSFLG SETB  1
&REGSMCR SETC  'CHHEXMAC'
.A$RS    ANOP
.*--------------------------------------------------------------------*
         AIF   (&CX1NAME).A$$0
         LCLC  &TNAME
&TNAME   SETC  'CX'.'&SYSNDX'
&CXTABLE SETC  '&TNAME'.'01'
&CXBYTES SETC  '&TNAME'.'02'
&CXBYTE1 SETC  '&TNAME'.'03'
&CXBYTE2 SETC  '&TNAME'.'04'
&CXERRCH SETC  '&TNAME'.'05'
&CXR1SAV SETC  '&TNAME'.'06'
&CXER1BS SETC  '&TNAME'.'07'
&CXER2BS SETC  '&TNAME'.'08'
&CXRTADR SETC  '&TNAME'.'09'
&CXRTCOD SETC  '&TNAME'.'10'
&CXBAL   SETC  '&TNAME'.'11'
&CXLOOP  SETC  '&TNAME'.'12'
&CXIGERR SETC  '&TNAME'.'13'
&CXCHOK1 SETC  '&TNAME'.'14'
&CXBADAT SETC  '&TNAME'.'15'
&CXBYPAS SETC  '&TNAME'.'16'
&CXCHXT1 SETC  '&TNAME'.'EX'
&CX1NAME SETB  1
         AGO   .A$$1                    BYPASS 2ND. INVOCATION
.*--------------------------------------------------------------------*
.A$$0    ANOP
&CXCHXT1 SETC  'CX'.'&SYSNDX'.'EX'
.A$$1    ANOP
         AIF   ('&MF' EQ 'L').RENT1     IF MF=L PARM PASSED BYPASS
         AIF   (T'&SOURCE EQ 'O').E1
         AIF   (T'&TARGET EQ 'O').E2
         AIF   (T'&LENGTH EQ 'O').E3
         AIF   (T'&ERRRTN EQ 'O').E4
.*--------------------------------------------------------------------*
         AIF   ('&SOURCE'(1,1) EQ '(').A$01
&#SOURCE SETC  '&SOURCE'
         AGO   .A$02
.A$01    ANOP
&#SOURCE SETC  '0(&SOURCE(1))'
.A$02    ANOP
         AIF   ('&TARGET'(1,1) EQ '(').A$03
&#TARGET SETC  '&TARGET'
         AGO   .A$04
.A$03    ANOP
&#TARGET SETC  '0(&TARGET(1))'
.A$04    ANOP
&CXERSUB SETC  '''00'''                       SET X'00' FOR SUB
&CXER1BR SETC  '&CXBADAT'                     SET ERROR BRANCH ADDRESS
&CXER2BR SETC  '&CXIGERR'                     SET IGNORE BRANCH ADDRESS
         AIF   ('&ERRRTN'(1,1) NE '''').A$07
&CXERSUB SETC  '&ERRRTN'                      SET IGNORE BRANCH ADDRESS
&CXER1BR SETC  '&CXIGERR'                     SET IGNORE BRANCH ADDRESS
         AGO   .A$10
.A$07    ANOP
         AIF   ('&ERRRTN'(1,1) EQ '(').A$08
&#ERRRTN SETC  '&ERRRTN'
         AGO   .A$09
.A$08    ANOP
&#ERRRTN SETC  '0(&ERRRTN(1))'
.A$09    ANOP
&CXER2BR SETC  '&#ERRRTN'                     SET ERROR ROUTINE ADDRESS
.A$10    ANOP
.*--------------------------------------------------------------------*
         AIF   (&CX1ST).A$11           IF NOT 1ST. TIME THRU
         AIF   (T'&MF EQ 'O').NONR1    IF NON-RE PROGRAM BYPASS
*  EXEC FORM OF MACRO 'CHHEXMAC'                                      *
*---------------------------------------------------------------------*
.*       MVI   &CXTABLE,X'00'          HEX FILL FIRST BYTE THEN RIPPLE
.*       MVC   &CXTABLE.+1(192),&CXTABLE  FILL REST
.*       MVC   &CXTABLE.+193(06),=X'0A0B0C0D0E0F'
.*       MVC   &CXTABLE.+199(41),&CXTABLE FILL REST
.*       MVC   &CXTABLE.+240(10),=X'F0010203040506070809'
.*       MVC   &CXTABLE.+250(06),&CXTABLE FILL REST
         B     &CXBYPAS                BYPASS COMMON CODE
         AGO   .RENT2                  BYPASS NON-RE PROCESS
.NONR1   ANOP
*  NORMAL FORM OF MACRO 'CHHEXMAC'                                    *
*---------------------------------------------------------------------*
         B     &CXBYPAS                BYPASS DATA + COMMON CODE
*---------------------------------------------------------------------*
         AGO   .NONR2                  BYPASS RE-ENT PROCESS
.RENT1   ANOP
*---------------------------------------------------------------------*
*  LIST FORM OF MACRO 'CHHEXMAC'                                      *
*---------------------------------------------------------------------*
.NONR2   ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&MF EQ 'O').LABON
         AIF   ('&LABEL'(1,1) EQ 'Y').LABON
         DS    0CL256
         DC    193X'0'
         DC    X'0A0B0C0D0E0F'
         DC    41X'0'
         DC    X'F0010203040506070809' NOTE - AS ZERO IS VALID
*               /|\                    CHAR 'F0' SUBSTITUTED AND
*                                      LATER CHANGED
         DC    6X'0'
         DS    0CL2                    BOTH BYTE
         DS    CL1                     1ST. BYTE
         DS    CL1                     1ST. BYTE
         DS    CL2                     CHARACTER SUBSTITUTION
         DC    4F'0'                   REGISTER 1 SAVE AREA B/C TRT
         DC    F'0'                    ERROR EXIT SAVE ADDRESS
         DC    F'0'                    ERROR ROUTINE SAVE ADDRESS
         DC    F'0'                    RETURN ADDRESS
         DC    H'0'                    RETURN CODE SAVE AREA
         AGO   .LABDONE
.LABON   ANOP
&CXTABLE DS    0CL256
         DC    193X'0'
         DC    X'0A0B0C0D0E0F'
         DC    41X'0'
         DC    X'F0010203040506070809' NOTE - AS ZERO IS VALID
*               /|\                    CHAR 'F0' SUBSTITUTED AND
*                                      LATER CHANGED
         DC    6X'0'
&CXBYTES DS    0CL2                    BOTH BYTE
&CXBYTE1 DS    CL1                     1ST. BYTE
&CXBYTE2 DS    CL1                     1ST. BYTE
&CXERRCH DS    CL2                     CHARACTER SUBSTITUTION
&CXR1SAV DC    4F'0'                   REGISTER 1 SAVE AREA B/C TRT
&CXER1BS DC    F'0'                    ERROR EXIT SAVE ADDRESS
&CXER2BS DC    F'0'                    ERROR ROUTINE SAVE ADDRESS
&CXRTADR DC    F'0'                    RETURN ADDRESS
&CXRTCOD DC    H'0'                    RETURN CODE SAVE AREA
.LABDONE ANOP
.*--------------------------------------------------------------------*
.*    IF GLOBAL REGISTER SAVE AREA DEFINED, BYPASS                    *
.*--------------------------------------------------------------------*
         AIF   (&REGDFLG).A$RD
         AIF   ('&LABEL'(1,1) EQ 'Y').LABON2 BYPASS IF LABEL REQUIRED
         AIF   ('&REGSMCR' NE 'CHHEXMAC').A$RD
         DS    16F                     REGISTER SAVE AREA
         AGO   .A$RD                   DO NOT SET FLAG IF LABEL REQD
.LABON2  ANOP
&REGDFLG SETB  1
&REGSAVR DS    16F                     REGISTER SAVE AREA
.A$RD    ANOP
.*--------------------------------------------------------------------*
.RENT2   ANOP
*---------------------------------------------------------------------*
         AIF   ('&MF' EQ 'L').EXIT
*                                                                     *
*        CONVERT CHARACTERS TO HEX.                                   *
*                                                                     *
*         R1=SOURCE, R14=TARGET, R15=LENGTH                           *
*                                                                     *
*---------------------------------------------------------------------*
&CXBAL   DS    0H
         XC    &CXRTCOD,&CXRTCOD       INITIALISE RETURN CODE
         AIF   (T'&MF EQ 'O').NONR3    IF NON-RE PROGRAM BYPASS
         CLC   &CXTABLE.+193(06),=X'0A0B0C0D0E0F' Q. CONSTANTS SET
         BE    &CXLOOP                               Y. BYPASS
         MVI   &CXTABLE,X'00'          HEX FILL FIRST BYTE THEN RIPPLE
         MVC   &CXTABLE.+1(192),&CXTABLE  FILL REST
         MVC   &CXTABLE.+193(06),=X'0A0B0C0D0E0F'
         MVC   &CXTABLE.+199(41),&CXTABLE FILL REST
         MVC   &CXTABLE.+240(10),=X'F0010203040506070809'
         MVC   &CXTABLE.+250(06),&CXTABLE FILL REST
.NONR3   ANOP
&CXLOOP  DS    0H
         MVC   &CXBYTES.(2),0(1)
         STM   14,1,&CXR1SAV           SAVE 1 BECAUSE OF TRT
         MVI   &CXTABLE,X'F0'          SET HEX 00 TO PASS
         L     14,&CXER1BS             LOAD ERROR EXIT ADDRESS
         TRT   &CXBYTE1.(1),&CXTABLE   Q. IS IT IN &CXTABLE
         BZR   14                         N. ERROR
         TRT   &CXBYTE2.(1),&CXTABLE   Q. IS IT IN &CXTABLE
         BZR   14                         N. ERROR
         B     &CXCHOK1                BOTH BYTES OK
&CXIGERR DS    0H
         MVC   &CXRTCOD.(2),=H'8'      SET ERROR CODE
         MVC   &CXBYTES.(2),&CXERRCH   SET ERROR HEX SUBSTITUTION
&CXCHOK1 DS    0H
         MVI   &CXTABLE,X'00'          RESET HEX 00
         TR    &CXBYTES.(2),&CXTABLE   TRANSLATE BOT CHARS
         NC    &CXBYTES.(2),=X'0F0F'   TURN HIGH NIBL OFF FOR 0 => 'F0'
         LM    14,1,&CXR1SAV           RESTORE 1 BECAUSE OF TRT
         PACK  0(1,14),&CXBYTE1        SWAP NIB OF LEFT &CXBYTE AND STO RE
         OC    0(1,14),&CXBYTE2        OVERLAY 2ND &CXBYTE OVER FIRST
         LA    1,2(1)                  UP SOURCE BY TWO
         LA    14,1(14)                UP DESTINATION BY 1
         BCTR  15,0                    DECREMENT LOOP COUNTER
         BCTR  15,0                           BY 2
         LTR   15,15                   Q. REACHED THE END
         BP    &CXLOOP                    N. LOOP
         L     14,&CXRTADR             LOAD RETURN ADDRESS
         BR    14                      RETURN
&CXBADAT DS    0H
         LM    14,12,&REGSAVR          RESTORE REGISTERS
         LH    15,&CXRTCOD             SET RETURN CODE
         L     14,&CXER2BS             LOAD ERROR ROUTINE ADDRESS
         BR    14                      BRANCH TO ERROR ROUTINE
&CXBYPAS DS    0H
.A$11    ANOP
         STM   14,12,&REGSAVR          SAVE REGISTERS
         MVC   &CXERRCH.(2),=C&CXERSUB MOVE HEX ERROR SUBSTITUTE CHAR
         LA    14,&CXER1BR             LOAD EXIT ADDRESS
         ST    14,&CXER1BS             SAVE EXIT ADDRESS
         LA    14,&CXER2BR             LOAD ERROR ROUTINE ADDRESS
         ST    14,&CXER2BS             SAVE ERROR ROUTINE ADDRESS
         LA    14,&CXCHXT1             LOAD RETURN ADDRESS
         ST    14,&CXRTADR             STORE RETURN ADDRESS
         LA    14,&#TARGET             SET UP DESTINATION ADDRESS
         AIF   ('&LENGTH'(1,1) NE '(').ACTLEN
&LEN     SETA  K'&LENGTH-2
&#LENGTH SETC  '&LENGTH'(2,&LEN)       REGISTER
         LR    15,&#LENGTH             LENGTH TO BE CONVERTED
         AGO   .FINLMV                 PASS AROUND
.ACTLEN  ANOP
         LA    15,&LENGTH              LENGTH TO BE CONVERTED
.FINLMV  ANOP
         LA    1,&#SOURCE              SET UP TO SOURCE ADDRESS
         B     &CXBAL                  GO TO HEX => CHAR ROUTINE
&CXCHXT1 DS    0H
         LM    14,12,&REGSAVR          RESTORE REGISTERS
         LH    15,&CXRTCOD             SET RETURN CODE
*---------------------------------------------------------------------*
&CX1ST   SETB  1
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E1      MNOTE 8,'CHHEX REQUIRES A SOURCE FIELD'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E2      MNOTE 8,'CHHEX REQUIRES A TARGET FIELD'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E3      MNOTE 8,'CHHEX REQUIRES A LENGTH'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E4      MNOTE 8,'CHHEX REQUIRES A CONVERSION ERROR ROUTINE ADDRESS'
.EXIT    ANOP
         POP   PRINT
         MEXIT
.*--------------------------------------------------------------------*
         MEND
