         MACRO
&NAME    CICS@ &ADDR,                            Returned address      +
               &BASE=15,                         Base for return @     +
               &CSA=DFHCSADS,                    CSA DSECT name        +
               &CWA=CWA,                         CWA DSECT name        +
               &TCA=DFHTCADY,                    TCA DSECT name        +
               &CSA@=,                           CSA return address    +
               &CWA@=,                           CWA return address    +
               &TCA@=,                           TCA return address    +
               &CICS=NO,                         CICS request          +
               &VER=3.3,                         CICS version          +
               &USING=YES,                       Retaing addresability +
               &LIST=YES,&HELP=NO,               Misc listing params   +
               &MF=E                             Macro format
         AIF   ('&MF' EQ 'L').A$HELPE         Bypass if list format
         AIF   ('&LIST'(1,1) NE 'N').A$XX     Bypass if listing req'd
         PUSH  PRINT
         PRINT OFF
.A$XX    ANOP
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP   Go process help listing
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'CICS@' parameter and   *
* it's use, pass parameter 'HELP=Yes'.                                *
.*--------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
*                                                                     *
* Macro to set specified register to a specific CICS address          *
*   established from MVS control block navigation.                    *
*   Available addresses are: CSA, CWA, TCA(User), TCAS(ystem).        *
*                                                                     *
* Format:                                                             *
*   Exec -  CICS@ CWA,BASE=3                                          *
*   List -  CICS@ (@@@,TCA),MF=L                                      *
*                                                                     *
* Parameters:                                                         *
*   1. addr      - One of the accepted reserved words for MF=E.       *
*                      CSA, CWA, TCA/TCAU or TCAS.                    *
*                  CSA is the default (default will turn USING off).  *
*                                                                     *
*                  For MF=L you need to specify a string of DSECTS    *
*                  seperated by commas and enclosed in parentheses.   *
*                  By default or if the first parameter is '@@@'      *
*                  the following DSECTS will automatically be included*
*                     PSA, CVT, TCB, AFCD and CSA as follows:         *
*                            IHAPSA                                   *
*                            CVT      DSECT=YES,LIST=NO    CVT        *
*                            IKJTCB                                   *
*                            DFHAFCD TYPE=DSECT                       *
*                            COPY DFHCSADS                            *
*                                                                     *
*                  Aditional DSECTS are TCA, TCT.                     *
*                            DFHTCA CICSYST=YES                       *
*                            DFHTCTZE CICSYST=YES                     *
*                  If you want the TCA DSECT as well as the defaults, *
*                  code the first positiuonal parameter as:           *
*                     (@@@,TCA)                                       *
*                  If you want all the dafault and the TCA without    *
*                  say the CVT you will have to explicitly list all   *
*                  required:  eg.                                     *
*                     (PSA,TCB,AFCD,CSA,TCA)                          *
*   2. BASE=n    - Acceptable notation for loading the address into   *
*                  a register (default is 15).                        *
*   3. CSA=ccc   - CSA DSECT name. Default is 'DFHCSADS'.             *
*   4. CWA=ccc   - CWA DSECT name. Default is 'CWA'.                  *
*   5. TCA=ccc   - TCA DSECT name. Default is 'DFHTCADY'.             *
*   6. CSA@=ccc  - Variable to store CSA address in.                  *
*   7. CWA@=ccc  - Variable to store CWA address in.                  *
*   8. TCA@=ccc  - Variable to store TCA (user) address in unless the *
*                  requested address is TCAS with this parameter      *
*                  whereby the system's address will be stored.       *
*   9. USING=Y/N - Establish addresability between base and DSECT.    *
*                  Default is 'YES'.                                  *
*                  Will be forced to 'NO' if address is defaulted.    *
*  10. VER=n.n   - CICS version.                                      *
*  11. CICS=Y/N  - Used to determine how the CWA (and TCA if required *
*                  is obtained. 'NO' forces MVS control block         *
*                  naigation while 'YES' will issue an 'EXEC CICS     *
*                    ADDRESS CWA(Rx)'.                                *
*                  Default is 'NO'.                                   *
*  12. LIST=Y/N  - Generate or suppress macro expansion, (YES/NO).    *
*                  Default is 'YES'.                                  *
*  13. HELP=Y/N  - Display these help comments, (YES/NO).             *
*                  Default is 'NO'.                                   *
*  14. MF=E/L    - Macro format.                                      *
*                    E - EXEC format of macro (default)               *
*                    L - LIST format of macro.                        *
*                                                                     *
.*--------------------------------------------------------------------*
.A$HELPE ANOP
         LCLC  &B,&DS,&LOSTCSA,&LUSE,&ADDRN,&TCAUSG,&USINGN,&VERN
         AIF   (T'&NAME EQ 'O').NONAME1  Bypass if NAME missing
&NAME    DS    0H
.NONAME1 ANOP
         AIF   ('&MF' EQ 'L').LIST1    Process LIST format
         AIF (T'&BASE EQ 'O').E002     Must have a base (cannot be     +
                                         explicitly turned off).
&B       SETC  '&BASE'                 Set base (work) register
&LOSTCSA SETC  'N'                     Turn lost CSA a'bility off
&ADDRN   SETC  '&ADDR'                 Set work variable
&VERN    SETC  '&VER'                  Set CICS version
&USINGN  SETC  '&USING'                Set work variable
         AIF (T'&ADDRN NE 'O').EXECFM1 Bypass if not omitted
&ADDRN   SETC  'CSA'                   Set CSA as default address
&USINGN  SETC  'NO'                    Set USING requirements off
.EXECFM1 ANOP
*---------------------------------------------------------------------*
*    EXEC form of macro 'CICS@'                                       *
*---------------------------------------------------------------------*
         AIF ('&CICS'(1,1) NE 'Y').NOTCICS  Bypass if not CICS request
         EXEC CICS ADDRESS CWA(&B)
         AIF ('&USINGN' NE 'YES').MEXIT Exit if USING not required
         USING CWA,&B                      ADDRESSABILITY TO CWA
&LUSE    SETC   'CWA'                  Indicate last user
         AGO   .MEXIT                  Exit MACRO
.NOTCICS ANOP
         AIF (T'&VER NE 'O').VERVER1   Bypass if version passed
.*--------------------------------------------------------------------*
.*
.*
.*
&VERN    SETC '3.3'                    Default version
.*
.*
.*
.*--------------------------------------------------------------------*
.VERVER1 ANOP
         AIF ('&VERN' EQ '3.1').VALVER1      Valid CICS version
         AIF ('&VERN' EQ '3.3').VALVER1      Valid CICS version
         AGO   .E000                   Tell of error
.VALVER1 ANOP
         AIF ('&ADDRN' EQ 'CSA').VALADDR     Valid CSA request
         AIF ('&ADDRN' EQ 'CWA').VALADDR     Valid CWA request
         AIF ('&ADDRN'(1,3) EQ 'TCA').VALADDR Valid TCA request
         AGO   .E001                   Tell of error
.VALADDR ANOP
         L     &B,PSATOLD-PSA(,0)          OLD TCB POINTER (FROM PSA)
         L     &B,TCBMDIDS-TCBFIX(,&B)     TCB EXTENTION
         L     &B,TCBCAUF-TCBXTNT2(,&B)    AFCB
         AIF ('&VERN' EQ '3.1').CSA31C1    Set CICS 3.1
.CSA33C1 ANOP
         L     &B,AFCSA-DFHAFCB(,&B)       CSA 3.3 OR HIGHER
         AGO   .CSAVST1               Have CSA set
.CSA31C1 ANOP
         LA    &B,512(,&B)                 CSA 3.1 OR LOWER
         AGO   .CSAVST1               Have CSA set
.CSAVST1 ANOP
&LUSE    SETC  'CSA'                   Indicate last user
         AIF   (T'&CSA@ EQ 'O').GOTCSA Bypass if CSA@ not required
         ST    &B,&CSA@                    SAVE CSA@
         NI    &CSA@,X'0F'                 TURN OFF 4 HIGH-ORDER BITS   DPSO7746
.GOTCSA  ANOP
         AIF   ('&ADDRN'(1,3) EQ 'TCA').TSTTCA Process TCA* request
         AIF   (T'&TCA@ NE 'O').TSTTCA Process TCA if TCA@ requested
         AGO   .SCWA                   Test if CWA required
.TSTTCA  ANOP
         AIF   ('&ADDRN'(1,3) NE 'TCA').OKTTCA Bypass address reset
         AIF   ('&ADDRN' EQ 'TCAS').OKTTCA Process TCA* request
&ADDRN   SETC  'TCAU'
.OKTTCA  ANOP
         L     &B,CSACDTA-&CSA.(,&B)       TCA (USER)
&TCAUSG  SETC  'DFHTCADS'              Set dsect name
&LUSE    SETC   'TCAU'                 Indicate who is using
&LOSTCSA SETC  'Y'                     Set lost CSA addressability
         AIF ('&ADDRN'(1,3) NE 'TCA').BYPUSR  Bypass if not TCA req
         AIF ('&ADDRN'(4,1) NE 'S').BYPUSR  Bypass if not SYSTEM req
         L     &B,TCASYAA-DFHTCADS(,&B)    TCA (SYSTEM)
&TCAUSG  SETC  'DFHTCADY'              Set dsect name
&LUSE    SETC  'TCAS'                  Indicate who is using
.BYPUSR  ANOP
         AIF   (T'&TCA@ EQ 'O').GOTTCA Bypass if TCA save not required
         AIF   ('&LUSE' EQ 'TCAU').TCAUMS1 USE THE RIGHT LITERAL
         ST    &B,&TCA@                    SAVE TCA@ (SYSTEM)
         AGO   .GOTTCA                 Bupass 'SYSTEM' message
.TCAUMS1 ANOP
         ST    &B,&TCA@                    SAVE TCA@ (USER)
.GOTTCA  ANOP
.SCWA    ANOP
         AIF   (T'&CWA@ NE 'O').TSTCWA If CWA@ requested, cont
         AIF   ('&ADDRN' EQ 'CWA').TSTCWA If CWA requested, cont
         AGO   .TUSING                 Exit if no other parms
.TSTCWA  ANOP
         AIF   ('&LOSTCSA' EQ 'N').SCWAOK Bypass if CSA@ in tact
         AIF   (T'&CSA@ EQ 'O').E004   Error if missing CSA storage @
         L     &B,&CSA@                    RESTORE CSA@
&LUSE    SETC  'CSA'                   Indicate who is using
.SCWAOK  ANOP
         L     &B,CSACWAA-&CSA.(,&B)       CWA
&LUSE    SETC   'CWA'                  Indicate last user
         AIF   (T'&CWA@ EQ 'O').GOTCWA Bypass if CWA@ not required
         ST    &B,&CWA@                    SAVE CWA@
.GOTCWA  ANOP
.TUSING  ANOP
         AIF ('&LUSE' EQ '&ADDRN').STUSING Go set using if @ same
         AIF ('&ADDRN' EQ 'CWA').TUCWA Process CWA restoration
         AIF ('&ADDRN'(1,3) EQ 'TCA').TUTCA Process TCA restoration
         AIF   (T'&CSA@ EQ 'O').E004   Error if missing CSA storage @
         L     &B,&CSA@                    RESTORE CSA@
&LUSE    SETC  'CSA'                   Indicate who is using
         AGO  .STUSING                 Go test if using required
.TUCWA   ANOP
         AIF   (T'&CWA@ EQ 'O').E005   Error if missing CWA storage @
         L     &B,&CWA@                    RESTORE CWA@
&LUSE    SETC  'CSA'                   Indicate who is using
         AGO  .STUSING                 Go test if using required
.*
.TUTCA   ANOP
         AIF   (T'&TCA@ EQ 'O').E006   Error if missing TCA storage @
         L     &B,&TCA@                    RESTORE TCA@
         AGO  .STUSING                 Go test if using required
.*
.STUSING ANOP
         AIF ('&USINGN'(1,1) EQ 'N').MEXIT Exit if not Using
         AIF ('&LUSE' EQ 'CSA').USECSA Set CSA for using
         AIF ('&LUSE' EQ 'CWA').USECWA Set CWA for using
         AIF   ('&LUSE' EQ 'TCAU').TCAUMS2 Use the right literal
         USING &TCAUSG,&B                  TCA (SYSTEM) ADDRESSABILITY
         AGO  .MEXIT
.TCAUMS2 ANOP
         USING &TCAUSG,&B                  TCA (USER) ADDRESSABILITY
         AGO  .MEXIT
.USECSA  ANOP
         USING &CSA,&B                     CSA ADDRESSABILITY
         AGO  .MEXIT
.USECWA  ANOP
         USING &CWA,&B                     CWA ADDRESSABILITY
         AGO  .MEXIT
*
.LIST1   ANOP
.*       LCLC  &ADDR1,&ADDR2,&ADDR3
.*       LCLC  &ADDR4,&ADDR5,&ADDR6
.*       LCLC  &ADDR7,&ADDR8,&ADDR9
         LCLB  &IPSA,&ICVT,&ITCB,&IAFCD,&ICSA,&ITCA,&ITCT
&ADDR1   SETC  '@@@'
&ADDR2   SETC  '    '
&ADDR3   SETC  '    '
&ADDR4   SETC  '    '
&ADDR5   SETC  '    '
&ADDR6   SETC  '    '
&ADDR7   SETC  '    '
&ADDR8   SETC  '    '
&ADDR9   SETC  '    '
         AIF   (T'&ADDR EQ 'O').LISTIT1 Bypass with defaults
&ADDR1   SETC  '&SYSLIST(1,1)'
&ADDR2   SETC  '&SYSLIST(1,2)'
&ADDR3   SETC  '&SYSLIST(1,3)'
&ADDR4   SETC  '&SYSLIST(1,4)'
&ADDR5   SETC  '&SYSLIST(1,5)'
&ADDR6   SETC  '&SYSLIST(1,6)'
&ADDR7   SETC  '&SYSLIST(1,7)'
&ADDR8   SETC  '&SYSLIST(1,8)'
&ADDR9   SETC  '&SYSLIST(1,9)'
.LISTIT1 ANOP
*---------------------------------------------------------------------*
*    LIST form of macro 'CICS@'                                       *
*---------------------------------------------------------------------*
         AIF ('&ADDR1' EQ '@@@').DSPSA
         AIF ('&ADDR1' EQ 'PSA').DSPSA
         AIF ('&ADDR2' EQ 'PSA').DSPSA
         AIF ('&ADDR3' EQ 'PSA').DSPSA
         AIF ('&ADDR4' EQ 'PSA').DSPSA
         AIF ('&ADDR5' EQ 'PSA').DSPSA
         AIF ('&ADDR6' EQ 'PSA').DSPSA
         AIF ('&ADDR7' EQ 'PSA').DSPSA
         AIF ('&ADDR8' EQ 'PSA').DSPSA
         AIF ('&ADDR9' EQ 'PSA').DSPSA
         AIF (T'&ADDR1 EQ 'O').DSPSA
         AGO  .T$CVT
.DSPSA   ANOP
&IPSA    SETB   1
.T$CVT   ANOP
         AIF ('&ADDR1' EQ '@@@').DSCVT
         AIF ('&ADDR1' EQ 'CVT').DSCVT
         AIF ('&ADDR2' EQ 'CVT').DSCVT
         AIF ('&ADDR3' EQ 'CVT').DSCVT
         AIF ('&ADDR4' EQ 'CVT').DSCVT
         AIF ('&ADDR5' EQ 'CVT').DSCVT
         AIF ('&ADDR6' EQ 'CVT').DSCVT
         AIF ('&ADDR7' EQ 'CVT').DSCVT
         AIF ('&ADDR8' EQ 'CVT').DSCVT
         AIF ('&ADDR9' EQ 'CVT').DSCVT
         AIF (T'&ADDR1 EQ 'O').DSCVT
         AGO  .T$TCB
.DSCVT   ANOP
&ICVT    SETB   1
.T$TCB   ANOP
         AIF ('&ADDR1' EQ '@@@').DSTCB
         AIF ('&ADDR1' EQ 'TCB').DSTCB
         AIF ('&ADDR2' EQ 'TCB').DSTCB
         AIF ('&ADDR3' EQ 'TCB').DSTCB
         AIF ('&ADDR4' EQ 'TCB').DSTCB
         AIF ('&ADDR5' EQ 'TCB').DSTCB
         AIF ('&ADDR6' EQ 'TCB').DSTCB
         AIF ('&ADDR7' EQ 'TCB').DSTCB
         AIF ('&ADDR8' EQ 'TCB').DSTCB
         AIF ('&ADDR9' EQ 'TCB').DSTCB
         AIF (T'&ADDR1 EQ 'O').DSTCB
         AGO  .T$AFCD
.DSTCB   ANOP
&ITCB    SETB   1
.T$AFCD  ANOP
         AIF ('&ADDR1' EQ '@@@').DSAFCD
         AIF ('&ADDR1' EQ 'AFCD').DSAFCD
         AIF ('&ADDR2' EQ 'AFCD').DSAFCD
         AIF ('&ADDR3' EQ 'AFCD').DSAFCD
         AIF ('&ADDR4' EQ 'AFCD').DSAFCD
         AIF ('&ADDR5' EQ 'AFCD').DSAFCD
         AIF ('&ADDR6' EQ 'AFCD').DSAFCD
         AIF ('&ADDR7' EQ 'AFCD').DSAFCD
         AIF ('&ADDR8' EQ 'AFCD').DSAFCD
         AIF ('&ADDR9' EQ 'AFCD').DSAFCD
         AIF (T'&ADDR1 EQ 'O').DSAFCD
         AGO  .T$CSA
.DSAFCD  ANOP
&IAFCD   SETB   1
.T$CSA   ANOP
         AIF ('&VERN' EQ '3.1').T$TCA      Bypass CSA DSECT if 3.1
         AIF ('&ADDR1' EQ '@@@').DSCSA
         AIF ('&ADDR1' EQ 'CSA').DSCSA
         AIF ('&ADDR2' EQ 'CSA').DSCSA
         AIF ('&ADDR3' EQ 'CSA').DSCSA
         AIF ('&ADDR4' EQ 'CSA').DSCSA
         AIF ('&ADDR5' EQ 'CSA').DSCSA
         AIF ('&ADDR6' EQ 'CSA').DSCSA
         AIF ('&ADDR7' EQ 'CSA').DSCSA
         AIF ('&ADDR8' EQ 'CSA').DSCSA
         AIF ('&ADDR9' EQ 'CSA').DSCSA
         AIF (T'&ADDR1 EQ 'O').DSCSA
         AGO   .T$TCA
.DSCSA   ANOP
&ICSA    SETB   1
.T$TCA   ANOP
.*       AIF ('&ADDR1' EQ '@@@').DSTCA
         AIF ('&ADDR1'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR2'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR3'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR4'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR5'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR6'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR7'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR8'(1,3) EQ 'TCA').DSTCA
         AIF ('&ADDR9'(1,3) EQ 'TCA').DSTCA
         AGO   .T$TCT
.DSTCA   ANOP
&ITCA    SETB   1
.T$TCT   ANOP
.*       AIF ('&ADDR1' EQ '@@@').DSTCT
         AIF ('&ADDR1' EQ 'TCT').DSTCT
         AIF ('&ADDR2' EQ 'TCT').DSTCT
         AIF ('&ADDR3' EQ 'TCT').DSTCT
         AIF ('&ADDR4' EQ 'TCT').DSTCT
         AIF ('&ADDR5' EQ 'TCT').DSTCT
         AIF ('&ADDR6' EQ 'TCT').DSTCT
         AIF ('&ADDR7' EQ 'TCT').DSTCT
         AIF ('&ADDR8' EQ 'TCT').DSTCT
         AIF ('&ADDR9' EQ 'TCT').DSTCT
         AGO   .T$XXX
.DSTCT   ANOP
&ITCT    SETB   1
.T$XXX   ANOP
.T$$$$   ANOP
.*--------------------------------------------------------------------*
         AIF   ('&LIST'(1,1) NE 'N').A$X1     Bypass if listing req'd
.NXT10   ANOP
         AIF   (NOT &IPSA).NXT11    Bypass if required
*        IHAPSA
.NXT11   ANOP
         AIF   (NOT &ICVT).NXT12    Bypass if required
*        CVT      DSECT=YES,LIST=NO    CVT
.NXT12   ANOP
         AIF   (NOT &ITCB).NXT13    Bypass if required
*        IKJTCB
.NXT13   ANOP
         AIF   (NOT &IAFCD).NXT14   Bypass if required
*        DFHAFCD TYPE=DSECT
.NXT14   ANOP
         AIF   (NOT &ICSA).NXT15    Bypass if required
*        COPY DFHCSADS
.NXT15   ANOP
         AIF   (NOT &ITCA).NXT16    Bypass if required
*        DFHTCA CICSYST=YES
.NXT16   ANOP
         AIF   (NOT &ITCT).NXT17    Bypass if required
*        DFHTCTZE CICSYST=YES
.NXT17   ANOP
.*--------------------------------------------------------------------*
         PUSH  PRINT
         PRINT OFF
.A$X1    ANOP
.*--------------------------------------------------------------------*
.NXT20   ANOP
         AIF   (NOT &IPSA).NXT21    Bypass if required
         IHAPSA
.NXT21   ANOP
         AIF   (NOT &ICVT).NXT22    Bypass if required
         CVT      DSECT=YES,LIST=NO    CVT
.NXT22   ANOP
         AIF   (NOT &ITCB).NXT23    Bypass if required
         IKJTCB
.NXT23   ANOP
         AIF   (NOT &IAFCD).NXT24   Bypass if required
         DFHAFCD TYPE=DSECT
.NXT24   ANOP
         AIF   (NOT &ICSA).NXT25    Bypass if required
         COPY DFHCSADS
.NXT25   ANOP
         AIF   (NOT &ITCA).NXT26    Bypass if required
         DFHTCA CICSYST=YES
.NXT26   ANOP
         AIF   (NOT &ITCT).NXT27    Bypass if required
         DFHTCTZE CICSYST=YES
.NXT27   ANOP
.*--------------------------------------------------------------------*
         AGO   .MEXIT                       Exit macro
*---------------------------------------------------------------------*
.E000    MNOTE 12,'CICS@ - INVALID VERSION VALID - 3.1 or 3.3'
         AGO   .MEXIT                       Exit macro
.E001    MNOTE 12,'CICS@ - INVALID ADDRESS REQUESTED'
         AGO   .MEXIT                       Exit macro
.E002    MNOTE 12,'CICS@ REQUIRES A BASE REGISTER PARAMETER'
         AGO   .MEXIT                       Exit macro
.E003    MNOTE 12,'CICS@ INVALID ARRSESS REQUEST'
         AGO   .MEXIT                       Exit macro
.E004    MNOTE 12,'CANNOT RESTORE CSA@ AS IT IS NOT STORED'
         AGO   .MEXIT                       EXIT MACRO
.E005    MNOTE 12,'CANNOT RESTORE CWA@ AS IT IS NOT STORED'
         AGO   .MEXIT                       EXIT MACRO
.E006    MNOTE 12,'CANNOT RESTORE TCA@ AS IT IS NOT STORED'
         AGO   .MEXIT                       EXIT MACRO
.*--------------------------------------------------------------------*
.MEXIT   ANOP
         AIF   ('&LIST' NE 'N').A$ZZ
         POP   PRINT
.A$ZZ    ANOP
         MEND
