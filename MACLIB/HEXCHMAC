         MACRO
&NAME    HEXCHMAC &SOURCE,&TARGET,&LENGTH,&MF=,&LIST=NO,&LABEL=YES,    +
               &HELP=NO,&INIT=NO,&DSECT=NO
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'HEXCHMAC' parameter    *
* and it's use, pass parameter 'HELP=Yes'.                            *
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
*                                                                     *
* CONVERT HEX TO CHARACTERS.                                          *
* --------------------------                                          *
*           N O T E - N O T E - N O T E - N O T E - N O T E           *
*                                                                     *
*   This routine saves and uses general registers 1, 14 & 15.         *
*   14 will be altered on return from the macro.                      *
*   Do NOT use registers 14 or 15 as addresses for passed parameters. *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*   Parameters:-                                                      *
*       1. Source                                                     *
*       2. Target (the target needs 2 times the length of source)     *
*       3. Length                                                     *
*       4. MF=E/L -  Macro format for re-entrant programs             *
*       5. LABEL=YES/NO - Generate data labels. Used for re-entrant   *
*                         programs with MF=L and you wish to move the *
*                         constant value from the CSECT over the      *
*                         the GETMAIN'ed DSECT.                       *
*                         The default is 'YES'. The parameter can be  *
*                         ignored if NOTE 2 option is observed.       *
*       6. LIST=YES/NO - Option to generate macro expansion or not    *
*       7. HELP=YES/NO - Option to print these help details. Default  *
*                        is 'YES'.                                    *
*       8. INIT=YES/NO - Initialise MF=E macro to repeat common code  *
*                        for multi-DSECT programs. 'NO' is the        *
*                        default.                                     *
*       9. DSECT=Y/N   - If DSECT=Y, the translate table is defided   *
*                        as storage (DS) not constant (DC).           *
*                        Should be used with MF=L.                    *
*                                                                     *
*   NOTE:-                                                            *
*       1. Parameters may be passed in registers using the (Rn)       *
*          notation (Note cannot have digits).                        *
*       2. For execute form of the macro (MF=E) the first occurence of*
*          the macro must be the first one executed. If a branch      *
*          causes a initial loop around it, insert a dummy macro to   *
*          perform a conversion into work areas or use the LABEL=NO   *
*          parameter.                                                 *
*                                                                     *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         AIF   ('&LIST'(1,1) NE 'N').A$XX
         PUSH  PRINT
         PRINT NOGEN
.A$XX    ANOP
&NAME    DS    0H
         LCLC  &#LENGTH,&#SOURCE,&#TARGET
         LCLA  &LEN
         GBLC  &XNAME,&XCBAL,&XCBYPAS,&XCLOOP
         GBLC  &XCBYTES,&XCBYTE1,&XCBYTE2,&XCTABLE,&XCRETAD
         GBLB  &XC1ST,&XC1NAME
.*--------------------------------------------------------------------*
         GBLC  &REGSAVR,&REGSMCR
         GBLB  &REGSFLG,&REGDFLG
         AIF   ('&INIT'(1,1) NE 'Y').A$YY  BYPASS IF NOT INITIALISE
&XC1ST   SETB  0
&XNAME   SETC  'XC'.'&SYSNDX'
&XCBAL   SETC  '&XNAME'.'06'
&XCLOOP  SETC  '&XNAME'.'07'
&XCBYPAS SETC  '&XNAME'.'08'
&XCRETRN SETC  '&XNAME'.'EX'
.A$YY    ANOP
.*--------------------------------------------------------------------*
         AIF   (&REGSFLG).A$RS
&REGSAVR SETC  'GB'.'&SYSNDX'.'#'
&REGSMCR SETC  'HEXCHMAC'
&REGSFLG SETB  1
.A$RS    ANOP
.*--------------------------------------------------------------------*
         AIF   (&XC1NAME).A$$0
&XNAME   SETC  'XC'.'&SYSNDX'
&XCRETAD SETC  '&XNAME'.'01'
&XCTABLE SETC  '&XNAME'.'02'
&XCBYTES SETC  '&XNAME'.'03'
&XCBYTE1 SETC  '&XNAME'.'04'
&XCBYTE2 SETC  '&XNAME'.'05'
&XCBAL   SETC  '&XNAME'.'06'
&XCLOOP  SETC  '&XNAME'.'07'
&XCBYPAS SETC  '&XNAME'.'08'
&XCRETRN SETC  '&XNAME'.'EX'
&XC1NAME SETB  1
         AGO   .A$$0
.*--------------------------------------------------------------------*
.A$$0    ANOP
&XCRETRN SETC  'XC'.'&SYSNDX'.'EX'
.A$$1    ANOP
         AIF   ('&MF' EQ 'L').RENT1    IF MF=L PARAMETER PASSED BYPASS
         AIF   (T'&SOURCE EQ 'O').E1   IF PARM 1 NOT PASSED ERROR
         AIF   (T'&TARGET EQ 'O').E2   IF PARM 2 NOT PASSED ERROR
         AIF   (T'&LENGTH EQ 'O').E3   IF PARM 3 NOT PASSED ERROR
         AIF   ('&SOURCE'(1,1) EQ '(').A$01
&#SOURCE SETC  '&SOURCE'
         AGO   .A$02
.A$01    ANOP
&#SOURCE SETC  '0(&SOURCE(1))'
.A$02    ANOP
         AIF   ('&TARGET'(1,1) EQ '(').A$03
&#TARGET SETC  '&TARGET'
         AGO   .A$04
.A$03    ANOP
&#TARGET SETC  '0(&TARGET(1))'
.A$04    ANOP
         AIF   (&XC1ST).A$11           IF NOT 1ST. TIME THRU
         AIF   (T'&MF EQ 'O').NONR1    IF NON-RE PROGRAM BYPASS
*  EXEC FORM OF MACRO 'HEXCHMAC'                                      *
*---------------------------------------------------------------------*
.*       MVC   &XCTABLE.(16),=C'0123456789ABCDEF'
         B     &XCBYPAS                BYPASS COMMON CODE
         AGO   .RENT2                  BYPASS NON-RE PROCESS
.NONR1   ANOP
*  NORMAL FORM OF MACRO 'HEXCHMAC'                                    *
*---------------------------------------------------------------------*
         B     &XCBYPAS                BYPASS DATA + COMMON CODE
*---------------------------------------------------------------------*
         AGO   .NONR2                  BYPASS RE-ENT PROCESS
.RENT1   ANOP
*---------------------------------------------------------------------*
*  List form of macro 'HEXCHMAC'                                      *
*---------------------------------------------------------------------*
.NONR2   ANOP
         AIF   (T'&MF EQ 'O').LABON1
         AIF   ('&LABEL'(1,1) EQ 'Y').LABON1
         DS    0F                      WORD ALIGN
         DS    F                       RETURNN ADDRESS SAVE AREA
         AIF   (T'&DSECT EQ 'O').DCTT1
         AIF   ('&DSECT'(1,1) EQ 'N').DCTT1
         DS    CL16                    TRANSLATE TABLE
         AGO   .DCTT1D
.DCTT1   ANOP
         DC    C'0123456789ABCDEF'     TRANSLATE TABLE
.DCTT1D  ANOP
         DS    0CL2                    BYTE SAVE AREA
         DS    CL1                     1ST. BYTE
         DS    CL1                     2ND. BYTE
         AGO   .LABDONE
.LABON1  ANOP
         DS    0F                      WORD ALIGN
&XCRETAD DS    F                       RETURNN ADDRESS SAVE AREA
         AIF   (T'&DSECT EQ 'O').DCTT2
         AIF   ('&DSECT'(1,1) EQ 'N').DCTT2
&XCTABLE DS    CL16                    TRANSLATE TABLE
         AGO   .DCTT2D
.DCTT2   ANOP
&XCTABLE DC    C'0123456789ABCDEF'     TRANSLATE TABLE
.DCTT2D  ANOP
&XCBYTES DS    0CL2                    BYTE SAVE AREA
&XCBYTE1 DS    CL1                     1ST. BYTE
&XCBYTE2 DS    CL1                     2ND. BYTE
.LABDONE ANOP
.*--------------------------------------------------------------------*
.*    IF GLOBAL REGISTER SAVE AREA DEFINED, BYPASS                    *
.*--------------------------------------------------------------------*
         AIF   (&REGDFLG).A$RD
         AIF   ('&LABEL'(1,1) EQ 'Y').LABON2 BYPASS IF LABEL REQUIRED
         AIF   ('&REGSMCR' NE 'HEXCHMAC').A$RD
         DS    0F                      WORD ALIGN
         DS    16F                     REGISTER SAVE AREA
         AGO   .A$RD                   DO NOT SET FLAG IF LABEL REQD
.LABON2  ANOP
&REGDFLG SETB  1
         DS    0F                      WORD ALIGN
&REGSAVR DS    16F                     REGISTER SAVE AREA
.A$RD    ANOP
.*--------------------------------------------------------------------*
.RENT2   ANOP
*---------------------------------------------------------------------*
         AIF   ('&MF' EQ 'L').EXIT
*                                                                     *
*        Convert HEX to characters.                                   *
*                                                                     *
*         R1=source, R14=target, R15=length                           *
*                                                                     *
*---------------------------------------------------------------------*
&XCBAL   DS    0H
         XR    0,0                     INITIALISE REGISTER
         AIF   (T'&MF EQ 'O').NONR3    IF NON-RE PROGRAM BYPASS
         MVC   &XCTABLE.(16),=C'0123456789ABCDEF'
.NONR3   ANOP
&XCLOOP  DS    0H
         IC    0,0(1)                  INSERT CHARACTER FOR TRANS'TN
         SRL   0,4                     GET RID OF RIGHT NIBBLE
         STC   0,&XCBYTE1              STORE LEFT NIBBLE
         TR    &XCBYTE1,&XCTABLE       TRANSLATE NIBBLE TO CHATACTER
         MVC   0(1,14),&XCBYTE1        MOVE TO DESTINATION
         MVC   &XCBYTE1,0(1)           MOVE CHARACTER TO WORK AREA
         NI    &XCBYTE1,15             AND WITH X'0F' REMOVE LEFT NIB
         TR    &XCBYTE1,&XCTABLE       TRANSLATE TO CHARACTER
         MVC   1(1,14),&XCBYTE1        MOVE CHAR TO DESTINATION
         LA    1,1(1)                  UP SOURCE BY 1
         LA    14,2(14)                UP DESTINATION BY 2
         BCT   15,&XCLOOP              BRANCH TILL END
         L     14,&XCRETAD             LOAD RETURN ADDRESS
         BR    14                      RETURN TO CALLER
&XCBYPAS DS    0H
.A$11    ANOP
         STM   14,12,&REGSAVR          SAVE REGISTERS
         LA    14,&XCRETRN             LOAD RETURN ADDRESS
         ST    14,&XCRETAD             STORE RETURN ADDRESS
         LA    14,&#TARGET             SET UP DESTINATION ADDRESS
         AIF   ('&LENGTH'(1,1) NE '(').ACTLEN
&LEN     SETA  K'&LENGTH-2
&#LENGTH SETC  '&LENGTH'(2,&LEN)       REGISTER
         LR    15,&#LENGTH             LENGTH TO BE CONVERTED
         AGO   .FINLMV  ANOP           PASS AROUND
.ACTLEN  ANOP
         LA    15,&LENGTH              LENGTH TO BE CONVERTED
.FINLMV  ANOP
         LA    1,&#SOURCE              SET UP TO SOURCE ADDRESS
         B     &XCBAL                  GO TO HEX => CHAR ROUTINE
&XCRETRN DS    0H
         LM    14,12,&REGSAVR          RESTORE REGISTERS
*---------------------------------------------------------------------*
&XC1ST   SETB  1
         AGO   .EXIT
.*--------------------------------------------------------------------*
.*       ERROR MESSAGES                                               *
.*--------------------------------------------------------------------*
.E1      MNOTE 8,'HEXCHMAC requires a SOURCE field'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E2      MNOTE 8,'HEXCHMAC requires a TARGET field'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E3      MNOTE 8,'HEXCHMAC requires a LENGTH'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.E4      MNOTE 8,'Invalid "MF" parameter passed'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.EXIT    ANOP
         AIF   ('&LIST'(1,1) NE 'N').EXIT9
         POP   PRINT
.EXIT9   ANOP
         MEXIT
         MEND
