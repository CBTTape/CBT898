         MACRO
&NAME    PDUMP &START,&LEN,                                            X
               &MSG=,                                                  X
               &QUIT=,                                                 X
               &REGS=YES,                                              X
               &LOAD@=,                                                X
               &DUMK@=,                                                X
               &CICS=NO,                                               X
               &ISPR=YES,                                              X
               &ALTSAVE=,                                              X
               &TRACE=,                                                X
               &VTAML=,                                                X
               &AUTH=NO,                                               X
               &HELP=NO,                                               X
               &LIST=NO,                                               X
               &MF=
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'PDUMP' parameter and   *
* it's use, pass parameter 'HELP=Yes'.
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
*  Macro to provide a formatted screen display of either the program  *
*    or selected data area.                                           *
*                                                                     *
*  PARAMETERS:                                                        *
*    1. Display address. This may be any A-type address or register   *
*       (2) - (13).                                                   *
*    2. Length of data to be displayed. Without this parameter you    *
*       may scroll down untill an addressing exception (0C4) occurs,  *
*       (which will be trapped with an appropriate message).          *
*    3. LIST=No / Yes
*             Default is 'NO'                                         *
*    4. TRACE=address
*             Trace supervisor address. Pointer to a flag indicating  *
*             trace status. 'N' indicates off, Any-Other-value implies*
*             on.                                                     *
*             This flag is turned off by the 'TRACE OFF' command or   *
*             explicitly setting it to 'N' within the program logic   *
*             between executions of the macro.                        *
*             Flag is turned on by a PDUMP macro without the flag or  *
*             using PDUMP with a diferent parameter address.          *
*    5. VTAML=.....                                                   *
*             Reserved for 'HALKEY' VTAM debuging                     *
*    5. LOAD@=.....                                                   *
*             Variable or register supplying the load address of      *
*             PROGDUMP thereby bypassing the LOAD.                    *
*    5. DUMK@=.....                                                   *
*             Variable or register supplying the load address of      *
*             PROGDUMK thereby bypassing the LOAD.                    *
*    6. AUTH=Y / N                                                    *
*             Authorised request. Permit authorised zapping of        *
*             normally unaccessible addresses. The calling program    *
*             must be authorised.                                     *
*    7. CICS=Y / N                                                    *
*             If inviked from CICS, will need to issue an             *
*             'EXEC CICS SEND / RECEIVE' rather than TPUT / TGET.     *
*             If flag set, will invoke dedicated drivers.             *
*    8. QUIT=address                                                  *
*             Adress to branch to if PROGDUMP is terminated using the *
*             'QUIT' command rather than END / PF3.                   *
*    9. MSG='text' / variable(len) / disp(len,reg)                    *
*             Initial message to be displayed. Either a quoted text   *
*             or a variable with the length of message to display in  *
*             brackets. You may use register base displacement, eg.   *
*                MSG='MESSAGE'  or MSG=DATA(8)  or MSG=2(6,R9)        *
*   10. ISPR=No / Yes                                                 *
*             Issue "ISPEXEC 'CONTROL DISPLAY REFRESH'" if using ISPF *
*             interface. If macro 'ISPFINIT' has been executed, the   *
*             refresh command will be automatically executed unless   *
*             explicitly NOT requested by this parameter.             *
*   11. MF=E / L                                                      *
*             For re-entrant programs.                                *
*   12. REGS=Yes / No; parameter value of NO will suppress the initial*
*             registers display screen on entry into the debugger.    *
*   13. ALTSAVE=@  ; Alternative register save area to be used for    *
*             diplaying registers. If this option is used, the        *
*             register or data area must contain registers 0-15 (in   *
*             that order). On exit registers 1, 14 and 15 have been   *
*             used and will not be restored.                          *
*             Alternatively you may use a parameter of (C,r) where    *
*             the literal 'C' indicates normal register conventions   *
*             and 'r' is the pointer to the register save area that   *
*             follow conventions (ie. prev R13 is stored at 4(r) ).   *
*                                                                     *
*  If no parameter is supplied, the start is the start of the program *
*    (assuming normal linkage procedures. This called routine assumes *
*    that R15 in the SAVEAREA of the program that called the program  *
*    calling this routine points to the start address of the program  *
*    that called this routine. <It does make sence if you read it a   *
*    couple of times>)                                                *
*    The end of display is reached on the first storage violation.    *
*                                                                     *
*  Parameters passed to PROGDUMP from this macro:                     *
*    The following parameter list is pointed to by R1:                *
*    1.  0(4,Rx) - Full(X'00000000') / part('DATA') display indicator *
*    2.  4(4,Rx) - Starting display address                           *
*    3.  8(4,Rx) - Length of display data                             *
*    4. 12(4,Rx) - Return address to branch to if 'QUIT' used         *
*    5. 16(4,Rx) - VTAM address, (reserved for HALKEY)                *
*    6. 20(1,Rx) - Display registers flag                             *
*       21(1,Rx) - Authorised request flag                            *
*       22(1,Rx) - CICS indicator flag (Y / N)                        *
*       23(1,Rx) - *** Spare ***                                      *
*    7. 24(4,Rx) - Trace supervisor flag's address                    *
*    8. 28(4,Rx) - PROGDUMK address if pre-loaded (CICS usage)        *
*                                                                     *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         AIF   ('&LIST'(1,1) EQ 'Y').A$XX
         PUSH  PRINT
         PRINT NOGEN
.A$XX    ANOP
         AIF   (T'&NAME EQ 'O').A$00     BYPASS IF NO LABEL PASSED
&NAME    DS    0H
.A$00    ANOP
         LCLC  &#START,&#LEN,&LENO,&#VTAML,&#VLT,&#MSGL,&#MSG
         LCLC  &REGSV,&REGSV15,&LOADN,&REST15,&DUMKN,&ALTSAV#,&ALTBLD
         GBLC  &DMPNAME
         GBLB  &DMPFST1,&DMPFST2
*---------------------------------------------------------------------*
         GBLB  &INIT1ST                  USED WITH ISPF VARIABLE TO
*                                        REFRESH IF ACTIVE
*---------------------------------------------------------------------*
         LCLA  &MSGL,&PL,&PC
         AIF   (&DMPFST1).A$01
&DMPNAME SETC  'DMP'.'&SYSNDX'
&DMPFST1 SETB  1
.A$01    ANOP
&#SAVER  SETC  '&DMPNAME'.'1'
&REGSV   SETC  '&DMPNAME'.'2'
&REGSV15 SETC  '&DMPNAME'.'3'
&MESL    SETC  '&DMPNAME'.'4'
&MESS    SETC  '&DMPNAME'.'5'
&DMPNAM  SETC  'DMP'.'&SYSNDX'
&#RETPT  SETC  '&DMPNAM'.'6'
         AIF   (T'&MSG EQ 'O').A$011    BYPASS IF NO MSG PASSED
&MSGL    SETA  K'&MSG-2
         AIF   ('&MSG'(1,1) EQ '''').A$011 BYPASS IF NO MSG QUOTED
.*--------------------------------------------------------------------*
.* ESTABLISH LENGTH OF VARIABLE AND MOVE LENGTH                       *
.*--------------------------------------------------------------------*
         LCLA  &APOST
&MSGL    SETA  K'&MSG
         AIF   ('&MSG'(&MSGL,1) NE ')').E3
&MSGL1   SETA  &MSGL-1
&APOST   SETA  0
.LOOP1   ANOP
         AIF   (&MSGL1 EQ  0).E4
         AIF   ('&MSG'(&MSGL1,1) EQ ',').LOOP1E
         AIF   ('&MSG'(&MSGL1,1) EQ '(').LOOP2E
&MSGL1   SETA  &MSGL1-1
         AGO   .LOOP1
.LOOP1E  ANOP
&APOST   SETA  &MSGL1
&MSGL1   SETA  &MSGL1-1
.LOOP2   ANOP
         AIF   (&MSGL1 EQ 0).E4
         AIF   ('&MSG'(&MSGL1,1) EQ '(').LOOP2E
&MSGL1   SETA  &MSGL1-1
         AGO   .LOOP2
.LOOP2E  ANOP
         AIF   (&APOST EQ 0).VARMSG    <======
&MSGL3   SETC  '&MSG'(&MSGL1+1,&APOST-(&MSGL1+1))
&MSGNW   SETC  '&MSG'(1,&MSGL1).'&MSG'(&APOST+1,&MSGL-&APOST)
         AGO   .MSGDTOK
.VARMSG  ANOP
&MSGL3   SETC  '&MSG'(&MSGL1+1,&MSGL-(&MSGL1+1))
&MSGNW   SETC  '&MSG'(1,&MSGL1-1)
.MSGDTOK ANOP
.*--------------------------------------------------------------------*
.A$011   ANOP
         AIF   ('&MF' NE 'L').A$02     PROCESS LIST FORM (RE-ENT)
&#SAVER  DS    8F                      PARAMETER LIST AREA
&REGSV   DS    15F                     REGISTER SAVE AREA (R0-R14)
&REGSV15 DS    F                       REGISTER SAVE AREA (R15)
&MESL    DS    H                       MESSAGE LENGTH
&MESS    DS    CL79                    MESSAGE
         AGO   .MEXIT
.A$02    ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&VTAML EQ 'O').A$029     NO VTAMLIST ADDRESS
         AIF   ('&VTAML'(1,1) EQ '(').A$023
&#VTAML  SETC   '&VTAML'
&#VLT    SETC   'L'
         AGO   .A$029
.A$023   ANOP
         AIF   ('&VTAML'(1,3) EQ '(1)').E2
         AIF   ('&VTAML'(1,4) EQ '(14)').E2
         AIF   ('&VTAML'(1,4) EQ '(15)').E2
         AIF   ('&VTAML'(1,4) EQ '(R1)').E2
         AIF   ('&VTAML'(1,5) EQ '(R14)').E2
         AIF   ('&VTAML'(1,5) EQ '(R15)').E2
&#VTAML  SETC   '0(&VTAML(1))'
&#VLT    SETC   'LA'
.A$029   ANOP
.*--------------------------------------------------------------------*
.* Establish alternate register save area                             *
.*--------------------------------------------------------------------*
.C0      ANOP
         AIF   (T'&ALTSAVE EQ 'O').C09 Bypass if alternate area missing
&P1      SETC  'NC'                    Set to non-conventional
&ALTSAV# SETC  '&ALTSAVE'              Set as passed
         AIF   ('&ALTSAV#'(1,1) NE '(').C09 Bypass if not brack reg
&PL      SETA  K'&ALTSAVE                   Length
         AIF   (&PL LE 4).C08          Bypass if too short
         AIF   (&PL GT 6).C08          Bypass if too short
&PC      SETA  3
.PCLOP1  ANOP
         AIF ('&ALTSAVE'(&PC,1) EQ ',').PCLOP1E
&PC      SETA  &PC+1
         AIF (&PC GT &PL).C08
         AGO   .PCLOP1  ANOP
.PCLOP1E ANOP
&P1      SETC  '&ALTSAVE'(2,&PC-2)
&P2      SETC  '&ALTSAVE'(&PC+1,&PL-(&PC+1))
.C08     ANOP
&ALTSAV# SETC  '0'.'&ALTSAVE'          Put in leading zero
.C09     ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&START EQ 'O').C2    NO STARTING POINT DISPLAY START
         AIF   ('&START'(1,1) EQ '(').A$03
&#START  SETC   '&START'
         AGO   .A$04
.A$03    ANOP
         AIF   ('&START'(1,3) EQ '(1)').E2
         AIF   ('&START'(1,4) EQ '(14)').E2
         AIF   ('&START'(1,4) EQ '(14)').E2
         AIF   ('&START'(1,4) EQ '(R1)').E2
         AIF   ('&START'(1,5) EQ '(R14)').E2
         AIF   ('&START'(1,5) EQ '(R15)').E2
&#START  SETC   '0(&START(1))'
.A$04    ANOP
&LENO    SETC  'L'                     SET LENGTH OPERATOR TO LOAD
         AIF   (T'&LEN EQ 'O').A$07    HAVE LENGTH, BYPASS
         AIF   ('&LEN'(1,1) LT '0').A$05
&#LEN    SETC  '=A(&LEN)'
         AGO   .C1
.A$05    ANOP
&LENO    SETC  'LA'                    SET LENGTH OPERATOR TO LOAD @
         AIF   ('&LEN'(1,1) EQ '(').A$06
&#LEN    SETC   '&LEN'
         AGO   .C1
.A$06    ANOP
         AIF   ('&LEN'(1,3) EQ '(1)').E2
         AIF   ('&LEN'(1,4) EQ '(14)').E2
         AIF   ('&LEN'(1,4) EQ '(15)').E2
         AIF   ('&LEN'(1,4) EQ '(R1)').E2
         AIF   ('&LEN'(1,5) EQ '(R14)').E2
         AIF   ('&LEN'(1,5) EQ '(R15)').E2
&#LEN    SETC   '0(&LEN(1))'
&LENO    SETC  'LA'                    SET LENGTH OPERATOR TO LOAD @
         AGO   .C1
.A$07    ANOP
&#LEN    SETC  '=X''7FFFFFFF'''        SET MAXIMUM LENGTH
&LENO    SETC  'LA'                    SET LENGTH OPERATOR TO LOAD @
.C1      ANOP
         AIF   (T'&LOAD@ NE 'O').C11   Bypass if present
         AIF   (T'&CICS EQ 'O').C11    Bypass if not CICS
         AIF   ('&CICS'(1,1) EQ 'Y').E5  LOAD@ required for CICS use
.C11     ANOP
         AIF   (T'&LOAD@ EQ 'O').C13   Bypass if missing
         AIF   ('&LOAD@'(1,1) EQ '(').C12
&LOADN SETC    '&LOAD@'                Set load address from variable
         AGO   .C13
.C12     ANOP
&LOADN SETC    '0(&LOAD@(1))'          Set load address from register
.C13     ANOP
         AIF   (T'&DUMK@ NE 'O').C21   Bypass if present
         AIF   (T'&CICS EQ 'O').C21    Bypass if not CICS
         AIF   ('&CICS'(1,1) EQ 'Y').E6  DUMK@ required for CICS use
.C21     ANOP
         AIF   (T'&DUMK@ EQ 'O').C23   Bypass if missing
         AIF   ('&DUMK@'(1,1) EQ '(').C22
&DUMKN SETC    '&DUMK@'                Set load address from variable
         AGO   .C23
.C22     ANOP
&DUMKN SETC    '0(&DUMK@(1))'          Set load address from register
.C23     ANOP
.*
.*--------------------------------------------------------------------*
         AIF   (T'&ALTSAV# EQ 'O').NRSAV1Y Normal save if no alternate
         AIF   ('&P1' EQ 'C').NRSAV1X  Conventional restore
         MVC   &REGSV.(64),&ALTSAV#    STORE REGISTERS
         AGO   .NRSAV1Z                Bypass
.NRSAV1X ANOP
         L     1,4(&P2)                     LOAD PREV SAVE AREA
         MVC   &REGSV.(52),20(1)            MOVE REGS 0-12
         ST    1,&REGSV.+52                 SAVE 13 POINTER
         MVC   &REGSV.+56(8),12(1)          MOVE REGS 14-15
         AGO   .NRSAV1Z                Bypass
.NRSAV1Y ANOP
         STM   0,15,&REGSV             STORE REGISTERS
.NRSAV1Z ANOP
.*--------------------------------------------------------------------*
.*
         AIF   (T'&LOADN EQ 'O').LOADHD1
         LA    15,&LOADN               LOAD ENTRY POINT OF PROGRAM
         AGO   .LOADED1                Bypass auto load
.LOADHD1 ANOP
         LOAD  EP=PROGDUMP             LOAD PROGRAM DUMP
         LR    15,0                    LOAD ENTRY POINT OF PROGRAM
.LOADED1 ANOP
         LA    1,&#SAVER               POINT 1 TO SAVE AREA
         MVC   0(4,1),=C'DATA'         DATA INDICATOR
         LA    14,&#START              START OF DUMP
         ST    14,4(1)                 STORE START ADDRESS
         &LENO 14,&#LEN                LOAD LENGTH
         ST    14,8(1)                 STORE LENGTH OF PROGRAM
         AGO   .LOAD                   GO LOAD/CALL PROGDUMP
.*--------------------------------------------------------------------*
.C2      ANOP
.*
.*--------------------------------------------------------------------*
         AIF   (T'&ALTSAV# EQ 'O').NRSAV2Y Normal save if no alternate
         AIF   ('&P1' EQ 'C').NRSAV2X  Conventional restore
         MVC   &REGSV.(64),&ALTSAV#    STORE REGISTERS
         AGO   .NRSAV2Z                Bypass
.NRSAV2X ANOP
         L     1,4(&P2)                     LOAD PREV SAVE AREA
         MVC   &REGSV.(52),20(1)            MOVE REGS 0-12
         ST    1,&REGSV.+52                 SAVE 13 POINTER
         MVC   &REGSV.+56(8),12(1)          MOVE REGS 14-15
         AGO   .NRSAV2Z                Bypass
.NRSAV2Y ANOP
         STM   0,15,&REGSV             STORE REGISTERS
.NRSAV2Z ANOP
.*--------------------------------------------------------------------*
.*
         AIF   (T'&LOADN EQ 'O').LOADHD2
         LA    15,&LOADN               LOAD ENTRY POINT OF PROGRAM
         AGO   .LOADED2                Bypass auto load
.LOADHD2 ANOP
         LOAD  EP=PROGDUMP             LOAD PROGRAM DUMP
         LR    15,0                    LOAD ENTRY POINT OF PROGRAM
.LOADED2 ANOP
         LA    1,&#SAVER               POINT 1 TO SAVE AREA
         XC    0(4,1),0(1)             CLEAR DATA INDICATOR
.LOAD    ANOP
         LA    14,&#RETPT              RETURN @ FROM PROGRAM DUMP
         ST    14,12(1)                STORE RETURN ADDRESS
         AIF   (T'&VTAML EQ 'O').NOVTL1   BYPASS IF NO VTAMLIST
         &#VLT 14,&#VTAML              LOAD LENGTH
         ST    14,16(1)                STORE VTAMLIST ADDRESS
.*--------------------------------------------------------------------*
.NOVTL1  ANOP
         XC    &MESL.(2),&MESL         INITIALISE MESSAGE LENGTH
         AIF   (T'&MSG EQ 'O').NOMESSG  BYPASS IF NO VTAMLIST
         AIF   ('&MSG'(1,1) EQ '''').MSGLIT1 BYPASS IF LIT SUPPLIED
         MVC   &MESL.(2),=H'&MSGL3'    MOVE MESSAGE LENGTH
         MVC   &MESS.(&MSGL3),&MSGNW   MOVE VARIABLE MESSAGE
         AGO   .NOMESSG
.*--------------------------------------------------------------------*
.MSGLIT1 ANOP
         MVC   &MESL.(2),=H'&MSGL'     MOVE MESSAGE LENGTH
         MVC   &MESS.(&MSGL),=C&MSG
.NOMESSG ANOP
.*--------------------------------------------------------------------*
         AIF ('&REGS'(1,1) EQ 'Y').REGSDY
         MVI   20(1),C'N'              DISPLAY/NOT REGS
         AGO   .REGSDON
.REGSDY  ANOP
         MVI   20(1),C'Y'              DISPLAY/NOT REGS
.REGSDON ANOP
.*--------------------------------------------------------------------*
         AIF ('&AUTH'(1,1) EQ 'Y').AUTHDY
         MVI   21(1),C'N'              AUTHORISATION NOT REQUESTED
         AGO   .AUTHDON
.AUTHDY  ANOP
         MVI   21(1),C'Y'              AUTHORISATION REQUESTED
.AUTHDON ANOP
.*--------------------------------------------------------------------*
         AIF ('&CICS'(1,1) EQ 'Y').CICSEY
         MVI   22(1),C'N'              NOT CICS ENVIRONMENT
         AGO   .CICSEON
.CICSEY  ANOP
         MVI   22(1),C'Y'              IS CICS ENVIRONMENT
.CICSEON ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&TRACE NE 'O').TRACADR
         XC    24(4,1),24(1)           SET TRACE SUPERVISOR N/A
         AGO   .TSTDUMK
.TRACADR ANOP
         AIF ('&TRACE'(1,1) EQ '(').TRACREG
         LA    14,&TRACE               LOAD TRACE SUPERVISOR ADDRESS
         AGO   .TRACST1
.TRACREG ANOP
         LA    14,0(&TRACE)            LOAD TRACE SUPERVISOR ADDRESS
.TRACST1 ANOP
         ST    14,24(1)                SAVE TRACE SUPERVISOR ADDRESS
.*--------------------------------------------------------------------*
.TSTDUMK ANOP
         AIF   (T'&DUMKN EQ 'O').INIDUMK
         LA    14,&DUMKN               LOAD ENTRY POINT OF PROGDUMK
         ST    14,28(1)                STORE ENTRY POINT OF PROGDUMK
         AGO   .CALLDMP                Bypass initialise
.INIDUMK ANOP
         XC    28(4,1),28(1)           SET DUMK@ NOT AVAILABLE
.CALLDMP ANOP
         BALR  14,15                   CALL 'PROGDUMP'
&REST15  SETC  'N'                     Restore R15 required flag
         AIF   (T'&LOADN NE 'O').DELETD1
&REST15  SETC  'Y'                     Restore R15 required
         ST    15,&REGSV15             SAVE RETURN REGISTER
         DELETE EP=PROGDUMP            REMOVE PROGRAM DUMP
.DELETD1 ANOP
.*--------------------------------------------------------------------*
         AIF   (&INIT1ST EQ 0).NOISPF1 BYPASS IF INITISPF NOT RUN
         AIF   ('&ISPR'(1,1) EQ 'N').NOISPF1 BYPASS IF EXPLICITLY REQ'D
         AIF   ('&REST15' EQ 'Y').BPS151 Bypass if R15 already saved
&REST15  SETC  'Y'                     Restore R15 required
         ST    15,&REGSV15             SAVE RETURN REGISTER
.BPS151  ANOP
*        ISPEXEC 'CONTROL DISPLAY REFRESH'
         ISPEXEC 'CONTROL DISPLAY REFRESH'
.NOISPF1 ANOP
.*--------------------------------------------------------------------*
         AIF   ('&REST15' EQ 'N').BPR151 Bypass if R15 not saved
         L     15,&REGSV15             RESTORE RETURN REGISTER
.BPR151  ANOP
         AIF   (T'&ALTSAV# NE 'O').NRSAV3X BYpass restore if alt used
         LM    0,14,&REGSV             RESTORE REGISTERS
.NRSAV3X ANOP
         AIF   (&DMPFST2).A$66
&DMPFST2 SETB  1
         AIF   ('&MF' EQ 'E').A$66     BYPASS IF EXEC FORM OF MACRO
         B     &#RETPT                 BYPASS PARM-LIST AREA
&#SAVER  DS    8F                      PARAMETER LIST AREA
&REGSV   DS    15F                     REGISTER SAVE AREA (R0-R14)
&REGSV15 DS    F                       REGISTER SAVE AREA (R15)
&MESL    DS    H                       MESSAGE LENGTH
&MESS    DS    CL79                    MESSAGE
.A$66    ANOP
&#RETPT  DS    0H
         AIF (T'&QUIT EQ 'O').MEXIT
         LTR   15,15                   Q. ZERO RETURN CODE
         BNZ   &QUIT                      N. GO TO QUIT ADDRESS
         AGO   .MEXIT
.*--------------------------------------------------------------------*
.E0      MNOTE 12,'''PDUMP'' REQUIRES A 3 FULLWORD SAVE AREA'
         AGO   .MEXIT
.E1      MNOTE 12,'''PDUMP'' REQUIRES A DATA AREA AND A LENGTH'
         AGO   .MEXIT
.E2      MNOTE 12,'DO NOT USE REGS 1, 14 OR 15 FOR PARAMETERS'
         AGO   .MEXIT
.E3      MNOTE 12,'INVALID VARIABLE MESSAGE FORMAT. S/B "VARNAME(LEN)"'
         AGO   .MEXIT
.E4      MNOTE 12,'MESSAGE LENGTH MUST BE LE 79 CHARACTERS'
         AGO   .MEXIT
.E5      MNOTE 12,'LOAD@ MUST BE SUPPLIED FOR CICS USAGE'
         AGO   .MEXIT
.E6      MNOTE 12,'DUMK@ MUST BE SUPPLIED FOR CICS USAGE'
.*--------------------------------------------------------------------*
.MEXIT   ANOP
         AIF   ('&LIST'(1,1) EQ 'Y').MEXIT9
         POP   PRINT
.MEXIT9  ANOP
         MEXIT
         MEND
