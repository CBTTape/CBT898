.*--------------------------------------------------------------------*
.* Macro used to debug PROGDUMP. Uses program PROGDUM$.               *
.*--------------------------------------------------------------------*
         MACRO
&NAME    PDUMP$ &START,&LEN,&MF=,&LIST=NO,&VTAML=,&MSG=,&REGS=YES,     X
               &TRACE=,&AUTH=NO,&QUIT=,&HELP=NO,&ISPR=YES
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'PDUMP' parameter and   *
* it's use, pass parameter 'HELP=Yes'.
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
*  Macro to provide a formatted screen display of either the program  *
*    or selected data area.                                           *
*                                                                     *
*  PARAMETERS:                                                        *
*    1. Display address. This may be any A-type address or register   *
*       (2) - (13).                                                   *
*    2. Length of data to be displayed. Without this parameter you    *
*       may scroll down untill an addressing exception (0C4) occurs,  *
*       (which will be trapped with an appropriate message).          *
*    3. LIST=No/Yes
*             Default is 'NO'                                         *
*    4. TRACE=address
*             Trace supervisor address. Pointer to a flag indicating  *
*             trace status. 'N' indicates off, Any-Other-value implies*
*             on.                                                     *
*             This flag is turned off by the 'TRACE OFF' command or   *
*             explicitly setting it to 'N' within the program logic   *
*             between executions of the macro.                        *
*             Flag is turned on by a PDUMP macro without the flag or  *
*             using PDUMP with a diferent parameter address.          *
*    5. VTAML=.....                                                   *
*             Reserved for 'HALKEY' VTAM debuging                     *
*    6. AUTH=Y/N                                                      *
*             Authorised request. Permit authorised zapping of        *
*             normally unaccessible addresses. The calling program    *
*             must be authorised.                                     *
*    7. QUIT=address                                                  *
*             Adress to branch to if PROGDUM$ is terminated using the *
*             'QUIT' command rather than END/PF3.                     *
*    8. MSG='text'/variable(len)                                      *
*             Initial message to be displayed. Either a quoted text   *
*             or a variable with the length of message to display in  *
*             brackets. You may use register base displacement, eg.   *
*                MSG='MESSAGE'  or MSG=DATA(8)  or MSG=2(R9)(6)       *
*             do not use MSG=2(6,R9)                                  *
*    9. ISPR=No/Yes                                                   *
*             Issue "ISPEXEC 'CONTROL DISPLAY REFRESH'" if using ISPF *
*             interface. If macro 'ISPFINIT' has been executed, the   *
*             refresh command will be automatically executed unless   *
*             explicitly NOT requested by this parameter.             *
*   10. MF=E/L                                                        *
*             For re-entrant programs.                                *
*   11. REGS=Yes/No; parameter value of NO will suppress the initial  *
*             registers display screen on entry into the debugger.    *
*                                                                     *
*  If no parameter is supplied, the start is the start of the program *
*    (assuming normal linkage procedures. This called routine assumes *
*    that R15 in the SAVEAREA of the program that called the program  *
*    calling this routine points to the start address of the program  *
*    that called this routine. <It does make sence if you read it a   *
*    couple of times>)                                                *
*    The end of display is reached on the first storage violation.    *
*                                                                     *
*  Parameters passed to PROGDUM$ from this macro:                     *
*    The following parameter list is pointed to by R1:                *
*    1.  0(4,Rx) - Full(X'00000000')/part('DATA') display indicator   *
*    2.  4(4,Rx) - Starting display address                           *
*    3.  8(4,Rx) - Length of display data                             *
*    4. 12(4,Rx) - Return address to branch to if 'QUIT' used         *
*    5. 16(4,Rx) - VTAM address, (reserved for HALKEY)                *
*    6. 20(1,Rx) - Display registers flag                             *
*       21(1,Rx) - Authorised request flag                            *
*    7. 24(4,Rx) - Trace supervisor flag's address                    *
*                                                                     *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         PUSH  PRINT
         AIF   ('&LIST'(1,1) EQ 'Y').A$XX
         PRINT NOGEN
.A$XX    ANOP
         AIF   (T'&NAME EQ 'O').A$00     BYPASS IF NO LABEL PASSED
&NAME    DS    0H
.A$00    ANOP
         LCLC  &#START,&#LEN,&LENO,&#VTAML,&#VLT,&#MSGL,&#MSG
         LCLC  &REGSV,&REGSV15
         GBLC  &DMPNAME
         GBLB  &DMPFST1,&DMPFST2
*---------------------------------------------------------------------*
         GBLB  &INIT1ST                  USED WITH ISPF VARIABLE TO
*                                        REFRESH IF ACTIVE
*---------------------------------------------------------------------*
         LCLA  &MSGL
         AIF   (&DMPFST1).A$01
&DMPNAME SETC  'DMP'.'&SYSNDX'
&DMPFST1 SETB  1
.A$01    ANOP
&#SAVER  SETC  '&DMPNAME'.'1'
&REGSV   SETC  '&DMPNAME'.'2'
&REGSV15 SETC  '&DMPNAME'.'3'
&MESL    SETC  '&DMPNAME'.'4'
&MESS    SETC  '&DMPNAME'.'5'
&DMPNAM  SETC  'DMP'.'&SYSNDX'
&#RETPT  SETC  '&DMPNAM'.'6'
         AIF   (T'&MSG EQ 'O').A$011    BYPASS IF NO MSG PASSED
&MSGL    SETA  K'&MSG-2
         AIF   ('&MSG'(1,1) EQ '''').A$011 BYPASS IF NO MSG QUOTED
.*--------------------------------------------------------------------*
.* ESTABLISH LENGTH OF VARIABLE AND MOVE LENGTH                       *
.*--------------------------------------------------------------------*
&MSGL    SETA  K'&MSG                  MESSAGE LENGTH
         AIF   ('&MSG'(&MSGL,1) NE ')').E3 INVALID MESSAGE FORMAT
&MSGL1   SETA  K'&MSG-2                LEFT BRACKET
         AIF   ('&MSG'(&MSGL1,1) NE '(').MSGL2 TEST MESSAGE LENGTH 2
&MSGL2   SETA  1                       MESSAGE MOVE LENGTH'S LENGTH
         AGO   .MSGVAR1
.MSGL2   ANOP
&MSGL1   SETA  K'&MSG-3
         AIF   ('&MSG'(&MSGL1,1) NE '(').E4 INVALID MESSAGE FORMAT
&MSGL2   SETA  2                       MESSAGE MOVE LENGTH'S LENGTH
.MSGVAR1 ANOP
&MSGL3   SETC  '&MSG'(&MSGL-&MSGL2,&MSGL2)
&MSGNW   SETC  '&MSG'(1,&MSGL-(&MSGL2+2))
         AIF   (&MSGL3 GT 79).E4
.*--------------------------------------------------------------------*
.A$011   ANOP
         AIF   ('&MF' NE 'L').A$02     PROCESS LIST FORM (RE-ENT)
&#SAVER  DS    7F                      PARAMETER LIST AREA
&REGSV   DS    15F                     REGISTER SAVE AREA (R0-R14)
&REGSV15 DS    F                       REGISTER SAVE AREA (R15)
&MESL    DS    H                       MESSAGE LENGTH
&MESS    DS    CL79                    MESSAGE
         AGO   .MEXIT
.A$02    ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&VTAML EQ 'O').A$029     NO VTAMLIST ADDRESS
         AIF   ('&VTAML'(1,1) EQ '(').A$023
&#VTAML  SETC   '&VTAML'
&#VLT    SETC   'L'
         AGO   .A$029
.A$023   ANOP
         AIF   ('&VTAML'(1,3) EQ '(1)').E2
         AIF   ('&VTAML'(1,4) EQ '(14)').E2
         AIF   ('&VTAML'(1,4) EQ '(15)').E2
         AIF   ('&VTAML'(1,4) EQ '(R1)').E2
         AIF   ('&VTAML'(1,5) EQ '(R14)').E2
         AIF   ('&VTAML'(1,5) EQ '(R15)').E2
&#VTAML  SETC   '0(&VTAML(1))'
&#VLT    SETC   'LA'
.A$029   ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&START EQ 'O').C2    NO STARTING POINT DISPLAY START
         AIF   ('&START'(1,1) EQ '(').A$03
&#START  SETC   '&START'
         AGO   .A$04
.A$03    ANOP
         AIF   ('&START'(1,3) EQ '(1)').E2
         AIF   ('&START'(1,4) EQ '(14)').E2
         AIF   ('&START'(1,4) EQ '(14)').E2
         AIF   ('&START'(1,4) EQ '(R1)').E2
         AIF   ('&START'(1,5) EQ '(R14)').E2
         AIF   ('&START'(1,5) EQ '(R15)').E2
&#START  SETC   '0(&START(1))'
.A$04    ANOP
&LENO    SETC  'L'                     SET LENGTH OPERATOR TO LOAD
         AIF   (T'&LEN EQ 'O').A$07    HAVE LENGTH, BYPASS
         AIF   ('&LEN'(1,1) LT '0').A$05
&#LEN    SETC  '=A(&LEN)'
         AGO   .C1
.A$05    ANOP
&LENO    SETC  'LA'                    SET LENGTH OPERATOR TO LOAD @
         AIF   ('&LEN'(1,1) EQ '(').A$06
&#LEN    SETC   '&LEN'
         AGO   .C1
.A$06    ANOP
         AIF   ('&LEN'(1,3) EQ '(1)').E2
         AIF   ('&LEN'(1,4) EQ '(14)').E2
         AIF   ('&LEN'(1,4) EQ '(15)').E2
         AIF   ('&LEN'(1,4) EQ '(R1)').E2
         AIF   ('&LEN'(1,5) EQ '(R14)').E2
         AIF   ('&LEN'(1,5) EQ '(R15)').E2
&#LEN    SETC   '0(&LEN(1))'
&LENO    SETC  'LA'                    SET LENGTH OPERATOR TO LOAD @
         AGO   .C1
.A$07    ANOP
&#LEN    SETC  '=X''7FFFFFFF'''        SET MAXIMUM LENGTH
&LENO    SETC  'LA'                    SET LENGTH OPERATOR TO LOAD @
.C1      ANOP
         STM   R0,R15,&REGSV           STORE REGISTERS
         LOAD  EP=PROGDUM$             LOAD PROGRAM DUMP
         LR    R15,R0                  LOAD ENTRY POINT OF PROGRAM
         LA    R1,&#SAVER              POINT R1 TO SAVE AREA
         MVC   0(4,R1),=C'DATA'        DATA INDICATOR
         LA    R14,&#START             START OF DUMP
         ST    R14,4(R1)               STORE START ADDRESS
         &LENO R14,&#LEN               LOAD LENGTH
         ST    R14,8(R1)               STORE LENGTH OF PROGRAM
         AGO   .LOAD                   GO LOAD/CALL PROGDUMP
.*--------------------------------------------------------------------*
.C2      ANOP
         STM   R0,R15,&REGSV           STORE REGISTERS
         LOAD  EP=PROGDUM$             LOAD PROGRAM DUMP
         LR    R15,R0                  LOAD ENTRY POINT OF PROGRAM
         LA    R1,&#SAVER              POINT R1 TO SAVE AREA
         XC    0(4,R1),0(R1)           CLEAR DATA INDICATOR
.LOAD    ANOP
         LA    R14,&#RETPT             RETURN @ FROM PROGRAM DUMP
         ST    R14,12(R1)              STORE RETURN ADDRESS
         AIF   (T'&VTAML EQ 'O').NOVTL1   BYPASS IF NO VTAMLIST
         &#VLT R14,&#VTAML             LOAD LENGTH
         ST    R14,16(R1)              STORE VTAMLIST ADDRESS
.*--------------------------------------------------------------------*
.NOVTL1  ANOP
         XC    &MESL.(2),&MESL         INITIALISE MESSAGE LENGTH
         AIF   (T'&MSG EQ 'O').NOMESSG  BYPASS IF NO VTAMLIST
         AIF   ('&MSG'(1,1) EQ '''').MSGLIT1 BYPASS IF LIT SUPPLIED
         MVC   &MESL.(2),=H'&MSGL3'    MOVE MESSAGE LENGTH
         MVC   &MESS.(&MSGL3),&MSGNW   MOVE VARIABLE MESSAGE
         AGO   .NOMESSG
.*--------------------------------------------------------------------*
.MSGLIT1 ANOP
         MVC   &MESL.(2),=H'&MSGL'     MOVE MESSAGE LENGTH
         MVC   &MESS.(&MSGL),=C&MSG
.NOMESSG ANOP
.*--------------------------------------------------------------------*
         AIF ('&REGS'(1,1) EQ 'Y').REGSDY
         MVI   20(R1),C'N'             DISPLAY/NOT REGS
         AGO   .REGSDON
.REGSDY  ANOP
         MVI   20(R1),C'Y'             DISPLAY/NOT REGS
.REGSDON ANOP
.*--------------------------------------------------------------------*
         AIF ('&AUTH'(1,1) EQ 'Y').AUTHDY
         MVI   21(R1),C'N'             AUTHORISATION NOT REQUESTED
         AGO   .AUTHDON
.AUTHDY  ANOP
         MVI   21(R1),C'Y'             AUTHORISATION REQUESTED
.AUTHDON ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&TRACE NE 'O').TRACADR
         XC    24(4,R1),24(R1)         SET TRACE SUPERVISOR N/A
         AGO   .CALLDMP
.TRACADR ANOP
         AIF ('&TRACE'(1,1) EQ '(').TRACREG
         LA    R14,&TRACE              LOAD TRACE SUPERVISOR ADDRESS
         AGO   .TRACST1
.TRACREG ANOP
         LA    R14,0(&TRACE)           LOAD TRACE SUPERVISOR ADDRESS
.TRACST1 ANOP
         ST    R14,24(R1)              SAVE TRACE SUPERVISOR ADDRESS
.*--------------------------------------------------------------------*
.CALLDMP ANOP
         BALR  R14,R15                 CALL 'PROGDUMP'
         ST    R15,&REGSV15            SAVE RETURN REGISTER
         DELETE EP=PROGDUM$            REMOVE PROGRAM DUMP
.*--------------------------------------------------------------------*
         AIF   (&INIT1ST EQ 0).NOISPF1 BYPASS IF INITISPF NOT RUN
         AIF   ('&ISPR'(1,1) EQ 'N').NOISPF1 BYPASS IF EXPLICITLY REQ'D
*        ISPEXEC 'CONTROL DISPLAY REFRESH'
         ISPEXEC 'CONTROL DISPLAY REFRESH'
.NOISPF1 ANOP
.*--------------------------------------------------------------------*
         L     R15,&REGSV15            RESTore RETURN REGISTER
         LM    R0,R14,&#SAVER+28       RESTORE REGISTERS
         AIF   (&DMPFST2).A$66
&DMPFST2 SETB  1
         AIF   ('&MF' EQ 'E').A$66     BYPASS IF EXEC FORM OF MACRO
         B     &#RETPT                 BYPASS PARM-LIST AREA
&#SAVER  DS    7F                      PARAMETER LIST AREA
&REGSV   DS    15F                     REGISTER SAVE AREA (R0-R14)
&REGSV15 DS    F                       REGISTER SAVE AREA (R15)
&MESL    DS    H                       MESSAGE LENGTH
&MESS    DS    CL79                    MESSAGE
.A$66    ANOP
&#RETPT  DS    0H
         AIF (T'&QUIT EQ 'O').MEXIT
         LTR   R15,R15                 Q. ZERO RETURN CODE
         BNZ   &QUIT                      N. GO TO QUIT ADDRESS
         AGO   .MEXIT
.*--------------------------------------------------------------------*
.E0      MNOTE 12,'''PDUMP$'' REQUIRES A 3 FULLWORD SAVE AREA'
         AGO   .MEXIT
.E1      MNOTE 12,'''PDUMP$'' REQUIRES A DATA AREA AND A LENGTH'
         AGO   .MEXIT
.E2      MNOTE 12,'DO NOT USE REGS 1, 14 OR 15 FOR PARAMETERS'
         AGO   .MEXIT
.E3      MNOTE 12,'INVALID VARIABLE MESSAGE FORMAT. S/B "VARNAME(LEN)"'
         AGO   .MEXIT
.E4      MNOTE 12,'MESSAGE LENGTH MUST BE LE 79 CHARACTERS'
.*--------------------------------------------------------------------*
.MEXIT   ANOP
         POP   PRINT
         MEXIT
         MEND
