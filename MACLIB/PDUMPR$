         MACRO
&NAME    PDUMPR &ADDR,          Address to display                     X
               &REGP=YES,       Ser REGP= parameter                    X
               &TYPE=VAR,       CONstant/VARiable type for MF=L        X
               &ISPI=YES,       Invoke ISPEXEC INIT=Y explicitly       X
               &X2CE=NO,        HEXCHMAC MF=E required ?               X
               &X2CL=NO,        HEXCHMAC MF=L required ?               X
               &REXX=SHOWSTOR,  REXX EXEC                              X
               &HELP=NO,        Help in expansion                      X
               &MSG=,           Message area for GC009                 X
               &LIST=NO,        List expansion                         X
               &DISPLAY=ASIS,   Process SHOWSTOR display               X
               &DISP=ASIS,      Alias for DISPLAY                      X
               &QUIT=,          R15 set to 'QUIT' branch               X
               &MF=             EXEC/LIST format
.*
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP   Go full help
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'PDUMPR' parameter and  *
* it's use, pass parameter 'HELP=Yes'.                                *
*---------------------------------------------------------------------*
         AGO .A$HELPE                         Bypass full help
.A$HELP  ANOP
*---------------------------------------------------------------------*
*                                                                     *
* This facility is used to display memory from within a program using *
* the SHOWSTOR memory mapper written in REXX, using ISPF services.    *
*                                                                     *
* All parameters are keyword parameters except the first which is the *
* only positional parameter for the address to be displayed. The      *
* format is as follows:                                               *
*                                                                     *
*   PDUMPR addr,kw1=..,kw2=..,kwn=...                                 *
*                                                                     *
* The following are permissable parameters:                           *
*   addr          - Address to be displayed. May be any relocatable   *
*                   address, a register in parentheses or a displace- *
*                   memt and register in parentheses.                 *
*   ISPI=Yes/No   o Invoke the ISPEXEC macro with the INIT option in  *
*                   it. Default is Yes. Set to No if you explicitly   *
*                   use the ISPEXEC macro in your program.            *
*   X2CE=Yes/No   o Invoke the HEXCHMAC macro MF=E format. This is    *
*                   only used if the HEXCHMAC with MF=E is explicitly *
*                   used in the same program and will prevent         *
*                   duplicate variable names. If PDUMPR is invoked    *
*                   with MF=E then this feature is automatically      *
*                   enabled. The default is NO.                       *
*   X2CL=Yes/No   o Invoke the HEXCHMAC macro MF=L format. Similar to *
*                   X2CE parameter. Default is No.                    *
*   MSG='....'    - MEssage to display on entering SHOWSTOR. Literal  *
*      =label()     padded/truncated to 256 bytes or a label where    *
*                   256 bytes or length of variable subscripted is    *
*                   moved, eg. MSG=MSGSRCE(80).                       *
*   QUIT=label    - Label of the instruction where control is to be   *
*                   passed if SHOWSTOR is terminated using the 'QUIT' *
*                   feature. Refer to SHOWSTOR documentation for      *
*                   further details.                                  *
*   REGP=Yes/No   - Set REGP= parameter on entry. this will enable    *
*                   the use of the /REGS* command. (Refer to SHOWSTOR *
*                   documentation.) Default is Yes and you would be   *
*                   a fool to suppress this handy feature.            *
*   REXX=SHOWSTOR - REXX EXEC to be executed from the macro. This     *
*                   should not be changed.                            *
*   TYPE=Var/Con  - Constatnt/Variable type for MF=L format. VAR is   *
*                   the default.                                      *
*   DISPLAY=Yes/No/Asis                                               *
*                 - Activate or bypass SHOWSTOR displays. Used to     *
*                   control SHOWSTOR displays during looping. Any     *
*                   value other than 'N' or 'Y' will default to 'A'.  *
*                   Use this parameter without an Address to set the  *
*                   condition without a display.                      *
*   HELP=No/Yes   - Help in expansion of this macro.                  *
*   LIST=No/Yes   - List expansion.                                   *
*   MF=           - Exec/List format.                                 *
*                                                                     *
* To use this feature you will also need access to macros ISPEXEC and *
* HEXCHMAC.                                                           *
* Parameters with an 'o' seperator are parameters whose values are    *
* dependant on the requirements of the ISPEXEC or HEXCHMAC macros.    *
* Refer to the actual macros for further details.                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
* Known GOTCHAs:                                                      *
* - This facility cannot be invoked from an authorised program        *
*   because of ISPF's limitations with authorised programs.           *
* - Because the macros used are designed in subroutine format, ensure *
*   that the first physical occurance of this macro (or it's related  *
*   counterparts of ISPEXEC and HEXCHMAC) are the ones actually       *
*   executed first to ensure all variables/settings are initialised.  *
*   This can be a problem in programs with a lot of branching logic.  *
*   To safeguard against this, invoke the macro as early as possible  *
*   in your program without an "addr" parameter to force              *
*   initialisation of all 3 macros (PDUMPR, ISPEXEC and HEXCHMAC).    *
* - Take care when explicitly using ISPEXEC and HEXCHMAC macros       *
*   outside this macro. You may need to fine tune the ISPI= and the   *
*   X2CE= and X2CL= parameters to prevent duplicate names.            *
*                                                                     *
*---------------------------------------------------------------------*
.*
.A$HELPE ANOP
.*
         AIF   ('&LIST'(1,1) EQ 'Y').A$XXX
         PUSH  PRINT
         PRINT NOGEN
.A$XXX   ANOP
.*
         LCLC  &SMXVAR,&L,&#DISP,&#ADR
         GBLB  &SMXFST1,&SMXEXE1,&SMXLST1
         GBLC  &SMXFXD
         GBLB  &XC1ST
.*
.*--------------------------------------------------------------------*
.* Evaluate and set Display requirements                              *
.*--------------------------------------------------------------------*
         AIF   (T'&DISPLAY EQ 'O').A$001 Test for 'alias'
&#DISP   SETC  '&DISPLAY'                Set to parameter
         AGO   .A$002                    GoAround alternate process
.A$001   ANOP
         AIF   (T'&DISP EQ 'O').A$002    Bypass
&#DISP   SETC  '&DISP'                   Set to 'alias' parameter
.A$002   ANOP
.*
.*--------------------------------------------------------------------*
.* Evaluate address if passed as (reg)....                            *
.*--------------------------------------------------------------------*
&#ADR    SETC  '&ADDR'                Set to parameter
         AIF   (T'&#ADR EQ 'O').A$003 Bypass processing
         AIF   ('&#ADR'(1,1) NE '(').A$003 Bypass if 1st char not '('
&#ADR    SETC  '0&#ADR.'              Set to Offset zero
.A$003   ANOP
.*--------------------------------------------------------------------*
.*
         AIF   (&SMXFST1).A$010
.*--------------------------------------------------------------------*
.* Global variables on initial invocation
.*--------------------------------------------------------------------*
&SMXFST1 SETB  1                       Set 1st. time thru  flag
&SMXFXD  SETC  'SMX'.'&SYSNDX'         Set fixed index value
&#DISP   SETC  'YES'                   Force display 1st. time thru
.A$010   ANOP
.*--------------------------------------------------------------------*
.* Local variables on each invocation
.*--------------------------------------------------------------------*
&SMXVAR  SETC  'SMX'.'&SYSNDX'         Set variable index value
.*--------------------------------------------------------------------*
.* Global variables on each invocation
.*--------------------------------------------------------------------*
&SMXLB0  SETC  '&SMXVAR'.'0'           Set variables (Full word branch)
&SMXLB1  SETC  '&SMXFXD'.'1'           Set variables
&SMXLB2  SETC  '&SMXVAR'.'2'           Set variables
&SMXLB3  SETC  '&SMXVAR'.'3'           Set variables
&SMXLB4  SETC  '&SMXFXD'.'4'           Set variables
&SMXLB5  SETC  '&SMXFXD'.'5'           Set variables
&SMXLB6  SETC  '&SMXVAR'.'6'           SPARE - NOT USED
&SMXLB7  SETC  '&SMXVAR'.'Z'           Set variable (PDUMPR terminator)
&SMXLB8  SETC  '&SMXVAR'.'X'           Set variable (PDUMPR start)
&SMXWK1  SETC  '&SMXFXD'.'8'           Set variables
&SMXWK2  SETC  '&SMXFXD'.'9'           Set variables
&SMXWK3  SETC  '&SMXFXD'.'A'           Set variables
&SMXWK4  SETC  '&SMXFXD'.'B'           Set variables
&SMXWK5  SETC  '&SMXFXD'.'C'           Set variables
&SMXWK6  SETC  '&SMXFXD'.'D'           Set variables
&SMXWK7  SETC  '&SMXFXD'.'E'           Set variables
&SMXWK8  SETC  '&SMXFXD'.'F'           Set variables
&SMXWK9  SETC  '&SMXFXD'.'G'           Set variables
&SMXWK10 SETC  '&SMXFXD'.'H'           Set variables
&SMXWK11 SETC  '&SMXFXD'.'I'           Set variables
&SMXWK12 SETC  '&SMXFXD'.'J'           Set variables
.*--------------------------------------------------------------------*
&L       SETC  '&LIST'
         AIF   (T'&NAME EQ 'O').A$YYY  Bypass if label passed
&SMXLB0  SETC  '&NAME'                 Use invocation name fro label
.A$YYY   ANOP
.*
         AIF   ('&MF' EQ 'L').A$200    Process list form of macro
.*
&SMXLB8  DS    0H                      START ANCHOR
         B     &SMXLB0                 ENSURE FULL WORD BRANCH
         AIF   (T'&MF EQ 'O').A$200    Process list form of macro
.A$020   ANOP
&SMXLB0  DS    0F                      ENSURE FULL WORD ALLIGNMENT
.*
         AIF   (&SMXEXE1).A$050        Bypass if not 1st. MF=E
&SMXEXE1 SETB  1
         STM   R0,R15,&SMXWK9          SAVE ALL REGISTERS
         AIF   ('&ISPI'(1,1) NE 'Y').A$022A Bypass if ISPEXEC not req
         AIF   ('&LIST'(1,1) EQ 'Y').A$021  Process list form yes
         ISPEXEC INIT=Y,MF=E           INITIALISE ISPF ENVIRONMENT
         AGO   .A$022
.A$021   ANOP
         ISPEXEC INIT=Y,MF=E,LIST=&L   INITIALISE ISPF ENVIRONMENT
.A$022   ANOP
         LM    R0,R15,&SMXWK9          RESTORE REGISTERS
.A$022A  ANOP
         B     &SMXLB2                 BRANCH AROUND CODE
&SMXLB1  DS    0H
         ST    R1,&SMXWK8              STORE FOR CONVERSION
         AIF   ('&X2CE'(1,1) EQ 'Y').X2C012 Process MF=E format
         AIF   ('&MF' EQ 'E').X2C011   Process MF=E format
.X2C010  ANOP
         HEXCHMAC &SMXWK8,&SMXWK2,4,LIST=&L HEX TO CHARACTER
         AGO   .X2C012                 Bypass MF=E format
.X2C011  ANOP
         HEXCHMAC &SMXWK8,&SMXWK2,4,LIST=&L,MF=E HEX TO CHARACTER
.X2C012  ANOP
.*
         CLI   &SMXWK7,C'Y'            Q. SETUP REGISTERS
         BE    &SMXLB4                    Y. GO DO IT
         MVI   &SMXWK3,C' '            BLANK FILL (RIPPLE)
         MVC   &SMXWK3.+1(L'&SMXWK3.+L'&SMXWK4.-1),&SMXWK3
         B     &SMXLB5                 BYPASS SETUP REGISTER
&SMXLB4  DS    0H
         MVC   &SMXWK3.(06),=C' REGP=' SET REGISTER
         LA    R1,&SMXWK9              LOAD ADDRESS REGISTER SAVE AREA
         ST    R1,&SMXWK8              STORE FOR CONVERSION
         AIF   ('&X2CE'(1,1) EQ 'Y').X2C022 Process MF=E format
         AIF   ('&MF' EQ 'E').X2C021   Process MF=E format
.X2C020  ANOP
         HEXCHMAC &SMXWK8,&SMXWK4,4,LIST=&L HEX TO CHARACTER
         AGO   .X2C022                 Bypass MF=E format
.X2C021  ANOP
         HEXCHMAC &SMXWK8,&SMXWK4,4,LIST=&L,MF=E HEX TO CHARACTER
.X2C022  ANOP
*---------------------------------------------------------------------*
* Set up PDUMPR start and end addresses for potential anchor points.  *
*---------------------------------------------------------------------*
         MVC   &SMXWK12.(21),=C'RR=......../........ '
         LA    R1,&SMXLB8              START PDUMPR ADDRESS
         ST    R1,&SMXWK8              STORE FOR CONVERSION
         AIF   ('&X2CE'(1,1) EQ 'Y').X2C032 Process MF=E format
         AIF   ('&MF' EQ 'E').X2C031   Process MF=E format
.X2C030  ANOP
         HEXCHMAC &SMXWK8,&SMXWK12+3,4,LIST=&L HEX TO CHARACTER
         AGO   .X2C032                 Bypass MF=E format
.X2C031  ANOP
         HEXCHMAC &SMXWK8,&SMXWK12+3,4,LIST=&L,MF=E HEX TO CHARACTER
.X2C032  ANOP
.*--------------------------------------------------------------------*
         LA    R1,&SMXLB7              END PDUMPR ADDRESS
         ST    R1,&SMXWK8              STORE FOR CONVERSION
         AIF   ('&X2CE'(1,1) EQ 'Y').X2C042 Process MF=E format
         AIF   ('&MF' EQ 'E').X2C041   Process MF=E format
.X2C040  ANOP
         HEXCHMAC &SMXWK8,&SMXWK12+12,4,LIST=&L HEX TO CHARACTER
         AGO   .X2C042                 Bypass MF=E format
.X2C041  ANOP
         HEXCHMAC &SMXWK8,&SMXWK12+12,4,LIST=&L,MF=E HEX TO CHARACTER
.X2C042  ANOP
.*--------------------------------------------------------------------*
&SMXLB5  DS    0H
         AIF   ('&LIST'(1,1) EQ 'Y').A$041 Process list form Yes
         ISPEXEC &SMXWK1,&SMXWK6       CALL 'SHOSTOR' REXX EXEC
         AGO   .A$042
.A$041   ANOP
         ISPEXEC &SMXWK1,&SMXWK6.,LIST=&L CALL 'SHOSTOR' REXX EXEC
.A$042   ANOP
         L     R14,&SMXWK8.+4          LOAD RETURN ADDRESS
         BR    R14                     RETURN TO CALLER
&SMXLB2  DS    0H
.*
.A$050   ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&#DISP EQ 'O').A$058 Do not set, just test
         AIF   ('&#DISP'(1,1) EQ 'Y').A$057 Use passed value
         AIF   ('&#DISP'(1,1) NE 'N').A$058 Bypass value setting
.A$057   ANOP
&#DISP   SETC  '&#DISP'(1,1)          Use 1st. byte
         MVI   &SMXWK11,C'&#DISP'      SET DISPLAY REQUIREMENT
         AIF   (T'&#ADR EQ 'O').SETEXT Continue if have an address
         AIF   ('&#DISP'(1,1) EQ 'Y').A$059 Bypass test if set 2 'Y'
         AIF   ('&#DISP'(1,1) EQ 'N').A$090 Bypass all if 'N' req'd
.A$058   ANOP
         AIF   (T'&#ADR EQ 'O').SETEXT Continue if have an address
         CLI   &SMXWK11,C'N'           Q. DISPLAY REQUIRED
         BE    &SMXLB7                    N. BYPASS
.A$059   ANOP
.*--------------------------------------------------------------------*
         STM   R0,R15,&SMXWK9          SAVE ALL REGISTERS
         LA    R0,&SMXLB3              LOAD RETURN ADDRESS
         ST    R0,&SMXWK8.+4           SAVE RETURN ADDRESS
         AIF   ('&REGP'(1,1) EQ 'N').A$060  Bypass if REGP=No
         MVI   &SMXWK7,C'Y'            SETUP REGISTERS REQUEST
         AGO   .A$065                  Branch around negative set
.A$060   ANOP
         MVI   &SMXWK7,C'N'            REGISTERS NOT REQUIRED
.A$065   ANOP
         AIF   (T'&MSG EQ 'O').A$075  Bypass if deliberate omission
         MVI   &SMXWK10,C' '           INITIALISE OUTPUT MESSAGE USING
         MVC   &SMXWK10.+1(L'&SMXWK10.-1),&SMXWK10 ..RIPPLE MOVE
&MSGNW   SETC  '&MSG'                 Set message to move from label
         AIF   ('&MSG'(1,1) EQ '''').A$072 Go process literal message
.*--------------------------------------------------------------------*
.* Establish length of literal and move length                        *
.*--------------------------------------------------------------------*
         LCLA  &APOST
&MSGL    SETA  K'&MSG                     Set length of message
         AIF   ('&MSG'(&MSGL,1) EQ ')').A$071
         MVC   &SMXWK10,&MSGNW         MOVE MESSAGE TO OUTPUT
         AGO   .A$075                       Leave process
.A$071   ANOP
&MSGL1   SETA  &MSGL-1
&APOST   SETA  0
.LOOP1   ANOP
         AIF   (&MSGL1 EQ  0).E4
         AIF   ('&MSG'(&MSGL1,1) EQ ',').LOOP1E
         AIF   ('&MSG'(&MSGL1,1) EQ '(').LOOP2E
&MSGL1   SETA  &MSGL1-1
         AGO   .LOOP1
.LOOP1E  ANOP
&APOST   SETA  &MSGL1
&MSGL1   SETA  &MSGL1-1
.LOOP2   ANOP
         AIF   (&MSGL1 EQ 0).E4
         AIF   ('&MSG'(&MSGL1,1) EQ '(').LOOP2E
&MSGL1   SETA  &MSGL1-1
         AGO   .LOOP2
.LOOP2E  ANOP
         AIF   (&APOST EQ 0).VARMSG
&MSGL3   SETC  '&MSG'(&MSGL1+1,&APOST-(&MSGL1+1))
&MSGNW   SETC  '&MSG'(1,&MSGL1).'&MSG'(&APOST+1,&MSGL-&APOST)
         AGO   .MSGDTOK
.VARMSG  ANOP
&MSGL3   SETC  '&MSG'(&MSGL1+1,&MSGL-(&MSGL1+1))
&MSGNW   SETC  '&MSG'(1,&MSGL1-1)
.MSGDTOK ANOP
         MVC   &SMXWK10.(&MSGL3),&MSGNW MOVE MESSAGE TO OUTPUT
         AGO   .A$075                       Leave process
.*-------------------------------------------------------------------*
.* Establish length of variable and move length                      *
.*-------------------------------------------------------------------*
.A$072   ANOP
         LCLC  &CHAR,&AMPER
         LCLA  &LC,&QC,&AC
&AMPER   SETC  '&&'
&MSGL    SETA  K'&MSG                       Loop counter (message len)
&QC      SETA  0                            Quotes counter
&AC      SETA  0                            Ampersand counter
&CP      SETA  0                            Character pointer
.LOOP3   ANOP
&CP      SETA  &CP+1                        Iincrement char pointer
&CHAR    SETC  '&MSG'(&CP,1)                Set character value
.TQUOT   ANOP
         AIF   ('&CHAR' NE '''').TAMPR      Bypass if char not "'"
&QC      SETA  &QC+1                        Bump quotes counter
         AGO   .NXTCH                       Get nest char
.TAMPR   ANOP
         AIF   ('&CHAR.&CHAR' NE '&AMPER').NXTCH Bypass if not "&"
&AC      SETA  &AC+1                        Bump amper counter
.NXTCH   ANOP
         AIF   (&CP LT &MSGL).LOOP3         Loop till end
&MSGL    SETA  &MSGL-2-(((&QC-2)/2)+(&AC/2)) Get actual length
         MVC   &SMXWK10.(&MSGL),=CL(&MSGL)&MSG
.A$075   ANOP
.*--------------------------------------------------------------------*
         LA    R1,&#ADR                LOAD ADDRESS OF ADDRESS
         B     &SMXLB1                 BRANCH TO COMMON CODE
&SMXLB3  DS    0H
         LM    R0,R15,&SMXWK9          RESTORE ALL REGISTERS
         AIF   (T'&QUIT EQ 'O').A$080  Bypass if no QUIT
         C     R15,=C'QUIT'            Q. QUIT REQUESTED
         BE    &QUIT                      Y. GO TO LABEL
.A$080   ANOP
         C     R15,=C'DOFF'            Q. DISPLAY OFF REQUESTED
         BNE   &SMXLB7                    N. BYPASS
         MVI   &SMXWK11,C'N'           SET DISPLAY OFF
&SMXLB7  DS    0H                      EXIT ANCHOR
.A$090   ANOP
         AGO   .MEXIT                  Exit macro
.*
.A$200   ANOP
         AIF   (T'&MF NE 'O').A$205    Bypass if MF is set
         AIF   (&SMXEXE1).A$020        Return if previously executed
.A$205   ANOP
         AIF   ('&TYPE'(1,1) NE 'C').A$210  Bypass if not constant
&SMXWK1  SETC  ''
&SMXWK2  SETC  ''
&SMXWK3  SETC  ''
&SMXWK4  SETC  ''
&SMXWK5  SETC  ''
&SMXWK6  SETC  ''
&SMXWK7  SETC  ''
&SMXWK8  SETC  ''
&SMXWK9  SETC  ''
&SMXWK10 SETC  ''
&SMXWK11 SETC  ''
&SMXWK12 SETC  ''
.*
.A$210   ANOP
.*
         AIF   ('&ISPI'(1,1) NE 'Y').A$224 Bypass if ISPEXEC not req'd
         AIF   ('&LIST'(1,1) EQ 'Y').A$221 Process list form Yes
         ISPEXEC  MF=L,INIT=Y,TYPE=&TYPE INIT ISPF ENVIRONMENT
         AGO   .A$224
.A$221   ANOP
         AIF   ('&ISPI'(1,1) EQ 'N').A$224 Bypass if INIT=No
.A$222   ANOP
         ISPEXEC  MF=L,INIT=Y,LIST=&L,TYPE=&TYPE INIT ISPF ENVIRONMENT
.A$224   ANOP
         DS    0F                      WORD ALLIGN
&SMXWK8  DS    2F                      WORK AREA
&SMXWK9  DS    16F                     REGISTER SAVE AREA FRO MACRO
&SMXWK1  DC    C'SELECT CMD(%SHOWSTOR ' WHAT WE WANT TO EXECUTE
&SMXWK2  DC    C'        '             ADDRESS WE WANT TO DISPLAY
&SMXWK3  DC    C' REGP='               REGISTER EQUATE LITERAL
&SMXWK4  DC    C'        '             ADDRESS WE WANT TO DISPLAY
         DC    C' '                    FILLER
&SMXWK12 DC    CL21'RR=......../........ ' Start and finish
.*-------------------------------------------------------------------*
.*   NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE    *
.*-------------------------------------------------------------------*
.* Modify the length of the next field to ensure the value (length)  *
.* of variable &SMXWK6 does not exceed 256 as &SMXWK1 and &SMXWK6    *
.* are used in a MVC instruction.                                    *
.*-------------------------------------------------------------------*
&SMXWK10 DC    CL190' '                MESSAGE AREA
.*-------------------------------------------------------------------*
&SMXWK5  DC    C')'                    WHAT WE WANT TO EXECUTE
         AIF   ('&TYPE'(1,1) EQ 'C').A$223  Bypass if constant
&SMXWK6  EQU   *-&SMXWK1               ISPF COMMAND LENGTH
.A$223   ANOP
&SMXWK7  DC    C'Y'                    REGISTER GENERATE FLAG
&SMXWK11 DC    C'Y'                    DISPLAY ON
         AIF   ('&X2CL'(1,1) NE 'Y').X2C090 BYpass MF=L for HEXCHMAC
         HEXCHMAC MF=L
.X2C090  ANOP
         AIF   (T'&MF EQ 'O').A$020    Return
         AGO   .MEXIT                  Exit
.*--------------------------------------------------------------------*
.E0      MNOTE 12,'No Errors at this stage'
         AGO   .MEXIT
.*--------------------------------------------------------------------*
.SETEXT  ANOP
&SMXLB7  DS    0H                      EXIT ANCHOR
.MEXIT   ANOP
         AIF   ('&LIST'(1,1) EQ 'Y').MEXIT9
         POP   PRINT
.MEXIT9  ANOP
         MEXIT
         MEND
