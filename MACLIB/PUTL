         MACRO
&NAME    PUTL  &SOURCE,&LTYPE=STD,&MF=,&LIST=NO,&HELP=NO,&CPPL=
         AIF   ('&HELP'(1,1) EQ 'Y').A$HELP
*---------------------------------------------------------------------*
* For a more comprehensive description of the 'PUTL' parameter and    *
* it's use, pass parameter 'HELP=Yes'.                                *
*---------------------------------------------------------------------*
         AGO .A$HELPE
.A$HELP  ANOP
*---------------------------------------------------------------------*
*                                                                     *
* PUTL                                                                *
* ----                                                                *
* The macro will establish all the required linkages, parameter lists *
* etc... and issue a PUTLINE macro.                                   *
* This is preferable to issuing a TPUT macro as a PUTLINE macro can   *
* be intercepted using SYSOUTTRAP for CLISTs and OUTTRAP for REXX.    *
*                                                                     *
*   Format (with defaults):                                           *
*      PUTL source,TL=,MF=,LTYPE=STD,CPPL=,LIST=NO,HELP=NO            *
*                                                                     *
*      Minimun requirement for standard format:                       *
*        Processing section -                                         *
*            PUTL source                                              *
*        DSECTS -                                                     *
*            PUTL MF=L,LTYPE=IBM                                      *
*                                                                     *
*   Parameters:-                                                      *
*       1. SOURCE      - Parameter pointer. This may be a quoted text *
*                        literal or a RX-type address or register.    *
*                                                                     *
*                        If it is text, it cannot be longer than 79   *
*                        bytes. If there are imbedded quotes or       *
*                        ampersands.                                  *
*                                                                     *
*                        If it is a RX-type address or register, it   *
*                        must point to storage where the first half   *
*                        word is the length of the message following. *
*                        The length must be in the range of 1-79      *
*                        bytes. If the length is invalid, it will be  *
*                        set to 79.  The length must be followed by   *
*                        the message text.                            *
*                        NOTE - The length should be the length of    *
*                               the actual text. The PUTL macro will  *
*                               add 4 extra bytes (for the length and *
*                               offset components) requred by the     *
*                               PUTLINE command.                      *
*                                                                     *
*                        This parameter may be ommitted on first      *
*                        invocation and will be used just to generate *
*                        the common code.                             *
*                                                                     *
*       2. LTYPE=      - LIST type of macro.                          *
*                        The following are permitted values:          *
*                          STD - Default for standard form of the     *
*                                 macro.                              *
*                          CON - Constant value (for re-entrant progs *
*                                in data area).                       *
*                          VAR - Variable value (for re-entrant progs *
*                                in DSECT area).                      *
*                          IBM - IBM macros required. Without this    *
*                                format of the macro, you must code   *
*                                the following IBM DSECTS             *
*                                      IKJCPPL                        *
*                                      IKJIOPL                        *
*                                                                     *
*                        For MF=L without this parameter or LTYPE=STD *
*                        format, both CON and VAR formats will be     *
*                        included. However, LTYPE=IBM must still be   *
*                        coded on a seperate statement.               *
*                                                                     *
*       3. CPPL=       - CPPL address. Must be provided if you do not *
*                        invoke PUTL on entry and R1 no longer points *
*                        to the CPPL (eg. R1 is used as 'SOURCE'      *
*                        pointer). May be a RX-type address or        *
*                        register.                                    *
*                                                                     *
*       4. MF=E/L      - Macro format for re-entrant programs         *
*                                                                     *
*       5. LIST=YES/NO - Option to generate macro expansion or not.   *
*                        Default is 'No'.                             *
*                                                                     *
*       6. HELP=YES/NO - Option to print these help details. Default  *
*                        is 'No.'                                     *
*                                                                     *
* NOTES:                                                              *
* -----                                                               *
* 1. This macro (PUTLINE command) can only be issued from within a    *
*    command processor and will cause an abend if issued from a       *
*    called program as no CPPL is established..                       *
*                                                                     *
*---------------------------------------------------------------------*
.A$HELPE ANOP
         PUSH  PRINT
         AIF   ('&LIST'(1,1) NE 'N').A$XX
         PRINT NOGEN
.A$XX    ANOP
&NAME    DS    0H
         GBLC  &PUTL
         GBLB  &PLL1ST,&PLL1PR,&PLL1DA
         LCLB  &#PLSVR1
         LCLC  &PLINIT,&PLLMOV,&PLMDLPB,&PLLEP,&PLECB,&PLSAVR1
         LCLC  &PLIOPL,&PLPTPB,&PLLEN1,&PLMESS,&#PLSRCE,&#PLCPPL
         LCLC  &PLLOAD,&PLLOADX,&PLVARB,&PLINVL,&PLCOMM,&PLLNOK
         LCLC  &PLPSET,&PLUNIQ@
.*--------------------------------------------------------------------*
         GBLC  &REGSAVR,&REGSMCR
         GBLB  &REGSFLG,&REGDFLG
         AIF   (&REGSFLG).A$RS
&REGSAVR SETC  'GB'.'&SYSNDX'.'#'
&REGSMCR SETC  'PTL'
&REGSFLG SETB  1
.A$RS    ANOP
.*--------------------------------------------------------------------*
         AIF   (&PLL1ST).A$$00
&PUTL    SETC  'PL'.'&SYSNDX'
&PLL1ST  SETB  1
.*--------------------------------------------------------------------*
.A$$00    ANOP
&PLSAVR1 SETC   '&PUTL'.'00'
&PLMDLPB SETC   '&PUTL'.'01'
&PLLMOV  SETC   '&PUTL'.'02'
&PLLEP   SETC   '&PUTL'.'03'
&PLECB   SETC   '&PUTL'.'04'
&PLIOPL  SETC   '&PUTL'.'05'
&PLPTPB  SETC   '&PUTL'.'06'
&PLLEN1  SETC   '&PUTL'.'07'
&PLMESS  SETC   '&PUTL'.'08'
&PLINIT  SETC   '&PUTL'.'09'
&PLLOAD  SETC   '&PUTL'.'10'
&PLLOADX SETC   '&PUTL'.'11'
&PLCOMM  SETC   '&PUTL'.'12'
&PLINVL  SETC   '&PUTL'.'13'
&PLLNOK  SETC   '&PUTL'.'14'
&PLPSET  SETC   '&PUTL'.'15'
&PLVARB  SETC   '&PUTL'.'16'
         AIF   ('&LTYPE'(1,1) EQ 'I').LIBM1 PROCESS IBM LIST FORMAT
         AIF   ('&LTYPE'(1,1) EQ 'V').LVAR1 PROCESS VAR LIST FORMAT
         AIF   ('&LTYPE'(1,1) EQ 'C').LCON1 PROCESS CON LIST FORMAT
.*
         AIF   (T'&MF EQ 'O').EXEC1    PROCESS LIST FORMAT
         AIF   ('&MF' EQ 'E').EXEC2    PROCESS EXEC FORMAT
.*
.*--- LTYPE=CON,MF=L OR STANDARD FORMAT ------------------------------*
.*
         AIF   ('&MF' EQ 'L').LCON1    BYPASS FOR LIST FORMAT
.EXEC1   ANOP
.*--------------------------------------------------------------------*
         AIF   (&PLL1PR).A$$80         BYPASS IF PROCESS ALREADY SET
.*--------------------------------------------------------------------*
         B     &PLINIT                 BYPASS INSTREAM DATA
.LCON1   ANOP
         AIF   (&PLL1DA).A$$15         BYPASS IF DATA FLAG ALREADY SET
&PLL1DA  SETB  1
*---------------------------------------------------------------------*
*  PUTL - Constants                                                   *
*---------------------------------------------------------------------*
&PLMDLPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
&PLLMOV  MVC   &PLMESS.(0),2(R1)       MOVE DATA TO MESSAGE AREA
*
         AIF   (T'&MF EQ 'O').LVAR1    CONT IF MF= NOT SPECIFIED
         AIF   ('&MF' EQ 'E').EXIT     EXIT IF TYPE=CON REQUESTED
         AIF   ('&LTYPE'(1,1) EQ 'C').EXIT EXIT IF CONSTANT LIST FORM
.*
.*--- LTYPE=VAR,MF=L OR STANDARD FORMAT ------------------------------*
.*
.LVAR1   ANOP
*---------------------------------------------------------------------*
*  PUTL - Variables                                                   *
*---------------------------------------------------------------------*
&PLLEP   DC    F'0'                    PUTLINE ROUTINE ENTRY ADDRESS
&PLECB   DC    F'0'                    ECB ADDRESS
&PLIOPL  DC    4F'0'                   IOPL MAPPING
&PLPTPB  DC    3F'0'                   PARAMETER BLOCK @
&PLLEN1  DC    2H'0'                   MESSAGE LENGTH + 4
&PLMESS  DC    CL79' '                 GENERAL MESSAGE LINE
         AIF   (&REGDFLG).A$RD
&REGDFLG SETB  1
&REGSAVR DS    16F                     REGISTER SAVE AREA
.A$RD    ANOP
*
.A$$15   ANOP
         AIF   (T'&MF EQ 'O').EXEC2    PROCESS EXEC IF MF= OMMITTED
         AIF   ('&MF' EQ 'L').EXIT     EXIT IF MF=L
.*
.*--- MF=E OR STANDARD FORMAT ----------------------------------------*
.*
.EXEC2   ANOP
         AIF   (&PLL1PR).A$$80         BYPASS IF PROCESS ALREADY SET
&PLL1PR  SETB  1                       SET PROCESS S FLAG
*---------------------------------------------------------------------*
&PLINIT DS     0H
         ST    R14,&REGSAVR.+4         SAVE RETURN ADDRESS
.*--------------------------------------------------------------------*
.* TEST IF ON FIRST INVOCATION, SOURCE IS POINTED TO BY R1.           *
.* BYPASS IF NOT, ELSE SAVE AND RESTORE AFTER INITIALISATION          *
.*--------------------------------------------------------------------*
         AIF   (T'&SOURCE EQ 'O').A$$49 BYPASS IF NO MESSAGE SOURCE
         AIF   ('&SOURCE'(1,1) NE '(').A$$49 BYPASS IF NOT REG FORMAT
&PLSAVR1 SETC  '&SYSLIST(1,1)'         SET TO 1ST PARAMETER
         AIF   ('&PLSAVR1' EQ 'R01').A$$41 PROCESS IF R1
         AIF   ('&PLSAVR1' EQ 'R1').A$$41  PROCESS IF R1
         AIF   ('&PLSAVR1' EQ '01').A$$41  PROCESS IF R1
         AIF   ('&PLSAVR1' EQ '1').A$$41   PROCESS IF R1
         AGO   .A$$49                  BYPASS IF NOT R1
.A$$41   ANOP
&#PLSVR1 SETB  1
         ST    R1,&REGSAVR             SAVE R1 AS R1 WILL BE USED
.A$$49   ANOP
.*--------------------------------------------------------------------*
         AIF   (T'&CPPL EQ 'O').CPPLDEF PROCESS CPPL POINTER AS R1
         AIF   ('&CPPL'(1,1) EQ '(').A$$50 PROCESS REGISTER TYPE
         L     R14,&CPPL               LOAD CPPL ADDR
         AGO   .CPPLSET
.A$$50   ANOP
         LR    R14,&CPPL(1)            LOAD CPPL ADDR
         AGO   .CPPLSET
.CPPLDEF ANOP
         LR    R14,R1                  LOAD CPPL ADDR
.CPPLSET ANOP
         USING CPPL,R14                ADDRESABILITY TO CPPL
*---------------------------------------------------------------------*
*  Set up 'IOPL' for PUTLINE 1st time through                         *
*---------------------------------------------------------------------*
         LA    R15,&PLIOPL             LOAD ADDRESS TO IOPL
         USING IOPL,R15                ESTABLISH ADDRESABILITY
         MVC   IOPLUPT(4),CPPLUPT      MOVE ADDRESS OF UPT TO IOPL
         MVC   IOPLECT(4),CPPLECT      MOVE ADDRESS OF ECT TO IOPL
         LA    R0,&PLECB               LOAD ADDRESS OF MY ECB
         ST    R0,IOPLECB              STORE ADDRESS IN IOPL
         XC    &PLECB,&PLECB           CLEAR ECB ADDRESS
         LA    R0,&PLPTPB              LOAD @ OF PUTLINE PARM BLOCK
         ST    R0,IOPLIOPB             STORE IT IN IOPL
         DROP  R14                     BREAK ADDRESABILITY
         DROP  R15                     LELINQUISH ADDRESABILITY
         L     R15,16                  CVT ADDRESS
         L     R15,0(R15)              POINT TO CVT
         TM    444(R15),X'80'          Q. IS PUTLINE LOADED? (MVS)
         BNO   &PLLOAD                    N. BRANCH TO LOAD
         L     R15,444(,R15)           USE CVTPTL
         B     &PLLOADX                BRANCH AROUND LOAD
&PLLOAD  DS    0H
         LA    R0,=CL8'IKJPUTL'        LOAD PROGRAM NAME
         LOAD  EPLOC=(0)               LOAD PROGRAM
         LR    R15,R0                  GET ENTRY ADDRESS
         LA    R15,0(,R15)             CLEAR HI BYTE FOR DELETE ROUTINE
&PLLOADX DS    0H
         ST    R15,&PLLEP              SAVE PUTLINE ENTRY ADDRESS
         AIF   (&#PLSVR1 NE 1).A$$60 BYPASS IF FLAG NOT SET
         L     R1,&REGSAVR             RESTORE R1
.A$$60   ANOP
         L     R14,&REGSAVR.+4         LOAD RETURN ADDRESS
         B     &PLVARB                 BYPASS COMMON CODE
*---------------------------------------------------------------------*
*  PUTL - End 'IOPL' setup                                            *
*---------------------------------------------------------------------*
*  PUTL - Common processing section                                   *
*---------------------------------------------------------------------*
&PLCOMM  DS    0H
         ST    R14,&REGSAVR.+8         SAVE RETURN ADDRESS
         LTR   R1,R1                   Q. DETAILS ALREADY SET
         BZ    &PLPSET                    Y. BYPASS PROCESSING
         LH    R14,0(R1)               LOAD PARAMETER LENGTH
         CH    R14,=H'1'               Q. PARAMETER LENGTH > 0
         BL    &PLINVL                    N. SET DEFAULT
         CH    R14,=H'79'              Q. PARAMETER LENGTH > 79
         BNH   &PLLNOK                    N. PROCESS LENGTH
&PLINVL  DS    0H
*        LENGTH > 79 CHARACTERS. HAS BEEN SET TO 79
         LA    R14,79                  LOAD DEFAULT LENGTH
&PLLNOK DS     0H
         BCTR  R14,0                   -1 FOR 'EX' MOVE
         EX    R14,&PLLMOV             EXECUTE MOVE DATA
         LA    R14,1(R14)              RESTORE ACTUAL LENGTH
*---------------------------------------------------------------------*
*  PUTLINE routine                                                    *
*---------------------------------------------------------------------*
         LA    R14,4(,R14)             ADD 4
         STH   R14,&PLLEN1             STORE LENGTH
&PLPSET  DS    0H
         XC    &PLLEN1.+2(2),&PLLEN1+2 INITIALISE 2ND HALF OF LENGTH
         MVC   &PLPTPB.(12),&PLMDLPB   MOVE IN MODEL FROM CONSTANT
         L     R15,&PLLEP              LOAD PUTLINE ENTRY ADDRESS
         PUTLINE PARM=&PLPTPB,OUTPUT=(&PLLEN1,DATA),MF=(E,&PLIOPL),    +
               ENTRY=(15)
         L     R14,&REGSAVR.+8         LOAD RETURN ADDRESS
         BR    R14                     RETURN TO CALLER
*---------------------------------------------------------------------*
*
&PLVARB  DS    0H
         AIF   (T'&SOURCE EQ 'O').EXIT EXIT IF INIT INVOKE W/O SOURCE
.A$$80   ANOP
         AIF   (T'&SOURCE EQ 'O').ERR0 ERROR IF SOURCE OMITTED
         AIF   ('&SOURCE'(1,1) NE '''').A$$95 BYPASS IF NOT QUOTED
.*--------------------------------------------------------------------*
.* Establish length of the literal passed, eliminating duplicate      *
.* quotes and ampersands.                                             *
.*--------------------------------------------------------------------*
         LCLC  &CHAR,&AMPER
         LCLA  &LC,&QC,&AC
&AMPER   SETC  '&&'
&LC      SETA  K'&SOURCE                    LOOP COUNTER
&QC      SETA  0                            QUOTES COUNTER
&AC      SETA  0                            AMPERSAND COUNTER
&CP      SETA  0                            CHARACTER POINTER
.LOOP1   ANOP
&CP      SETA  &CP+1                        INCREMENT CHARACTER PTR
&CHAR    SETC  '&SOURCE'(&CP,1)
.TQUOT   ANOP
         AIF   ('&CHAR' NE '''').TAMPR
&QC      SETA  &QC+1
         AGO   .NXTCH
.TAMPR   ANOP
         AIF   ('&CHAR.&CHAR' NE '&AMPER').NXTCH
&AC      SETA  &AC+1
.NXTCH   ANOP
         AIF   (&CP LT &LC).LOOP1           LOOP TILL END
&LC      SETA  &LC-2-(((&QC-2)/2)+(&AC/2))
.*--------------------------------------------------------------------*
.A$$91   ANOP
         AIF   (&LC LE 79).A$$92       CONTINE IF LENGTH ¬> 79
&LC      SETA  79                      SET TEXT LENGTH
*        LENGTH > 79 CHARACTERS. HAS BEEN SET TO 79
.A$$92   ANOP
         MVC   &PLMESS.(&LC),=C&SOURCE MOVE DATA TO MESSAGE AREA
         LA    R1,&LC+4                LOAD LENGTH OF TEXT + 4
         STH   R1,&PLLEN1              STORE LENGTH
         XR    R1,R1                   CLEAR PARMLIST POINTER
         AGO   .A$$99
.A$$95   ANOP
         AIF   ('&SOURCE'(1,1) EQ '(').A$$96 PROCESS REGISTER TYPE
&#PLSRCE SETC  '&SOURCE'
         AGO   .A$$98
.A$$96   ANOP
&#PLSRCE SETC  '0(&SOURCE(1))'
.A$$98   ANOP
         LA    R1,&#PLSRCE             LOAD PARMLIST POINTER
.A$$99   ANOP
         BAL   R14,&PLCOMM             CALL COMMON ROUTINE
.*       L     R14,&REGSAVR            LOAD RETURN ADDRESS
*
         AGO   .EXIT
.*
.*--- LTYPE=IBM,MF=L -------------------------------------------------*
.*
.LIBM1   ANOP
*---------------------------------------------------------------------*
*  PUTL - IBM supplied DSECTS                                         *
*---------------------------------------------------------------------*
         IKJCPPL COMMAND               PROCESSOR PARAMETER LIST
         IKJIOPL                       I/O SERVICE ROUTINE PARM LIST
*---------------------------------------------------------------------*
         AGO   .EXIT
.*--------------------------------------------------------------------*
.*       ERROR MESSAGES                                               *
.*--------------------------------------------------------------------*
.ERR0    MNOTE 8,'Missing parameter address'
         AGO   .EXIT
.*--------------------------------------------------------------------*
.EXIT    ANOP
         POP   PRINT
         MEXIT
         MEND
